\input texinfo
@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-

@c %**start of header
@setfilename guix.de.info
@documentencoding UTF-8
@documentlanguage de
@frenchspacing on
@settitle Referenzhandbuch zu GNU Guix
@c %**end of header

@include version-de.texi

@c Identifier of the OpenPGP key used to sign tarballs and such.
@set OPENPGP-SIGNING-KEY-ID 3CE464558A84FDC69DB40CFB090B11993D9AEBB5
@set OPENPGP-SIGNING-KEY-URL https://sv.gnu.org/people/viewgpg.php?user_id=15145

@c Base URL for downloads.
@set BASE-URL https://ftp.gnu.org/gnu/guix

@c The official substitute server used by default.
@set SUBSTITUTE-SERVER ci.guix.gnu.org
@set SUBSTITUTE-URL https://@value{SUBSTITUTE-SERVER}

@copying
Copyright @copyright{} 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020
Ludovic Courtès@* Copyright @copyright{} 2013, 2014, 2016 Andreas Enge@*
Copyright @copyright{} 2013 Nikita Karetnikov@* Copyright @copyright{} 2014,
2015, 2016 Alex Kost@* Copyright @copyright{} 2015, 2016 Mathieu Lirzin@*
Copyright @copyright{} 2014 Pierre-Antoine Rault@* Copyright @copyright{}
2015 Taylan Ulrich Bayırlı/Kammer@* Copyright @copyright{} 2015, 2016, 2017,
2019, 2020 Leo Famulari@* Copyright @copyright{} 2015, 2016, 2017, 2018,
2019, 2020 Ricardo Wurmus@* Copyright @copyright{} 2016 Ben Woodcroft@*
Copyright @copyright{} 2016, 2017, 2018 Chris Marusich@* Copyright
@copyright{} 2016, 2017, 2018, 2019, 2020 Efraim Flashner@* Copyright
@copyright{} 2016 John Darrington@* Copyright @copyright{} 2016, 2017 Nikita
Gillmann@* Copyright @copyright{} 2016, 2017, 2018, 2019, 2020 Jan
Nieuwenhuizen@* Copyright @copyright{} 2016, 2017, 2018, 2019, 2020 Julien
Lepiller@* Copyright @copyright{} 2016 Alex ter Weele@* Copyright
@copyright{} 2016, 2017, 2018, 2019 Christopher Baines@* Copyright
@copyright{} 2017, 2018, 2019 Clément Lassieur@* Copyright @copyright{}
2017, 2018 Mathieu Othacehe@* Copyright @copyright{} 2017 Federico Beffa@*
Copyright @copyright{} 2017, 2018 Carlo Zancanaro@* Copyright @copyright{}
2017 Thomas Danckaert@* Copyright @copyright{} 2017 humanitiesNerd@*
Copyright @copyright{} 2017 Christopher Allan Webber@* Copyright
@copyright{} 2017, 2018, 2019, 2020 Marius Bakke@* Copyright @copyright{}
2017, 2019, 2020 Hartmut Goebel@* Copyright @copyright{} 2017, 2019, 2020
Maxim Cournoyer@* Copyright @copyright{} 2017, 2018, 2019, 2020 Tobias
Geerinckx-Rice@* Copyright @copyright{} 2017 George Clemmer@* Copyright
@copyright{} 2017 Andy Wingo@* Copyright @copyright{} 2017, 2018, 2019 Arun
Isaac@* Copyright @copyright{} 2017 nee@* Copyright @copyright{} 2018 Rutger
Helling@* Copyright @copyright{} 2018 Oleg Pykhalov@* Copyright @copyright{}
2018 Mike Gerwitz@* Copyright @copyright{} 2018 Pierre-Antoine Rouby@*
Copyright @copyright{} 2018, 2019 Gábor Boskovits@* Copyright @copyright{}
2018, 2019 Florian Pelz@* Copyright @copyright{} 2018 Laura Lazzati@*
Copyright @copyright{} 2018 Alex Vong@* Copyright @copyright{} 2019 Josh
Holland@* Copyright @copyright{} 2019, 2020 Diego Nicola Barbato@* Copyright
@copyright{} 2019 Ivan Petkov@* Copyright @copyright{} 2019 Jakob
L. Kreuze@* Copyright @copyright{} 2019 Kyle Andrews@* Copyright
@copyright{} 2019 Alex Griffin@* Copyright @copyright{} 2019 Guillaume Le
Vaillant@* Copyright @copyright{} 2020 Leo Prikler@* Copyright @copyright{}
2019, 2020 Simon Tournier@* Copyright @copyright{} 2020 Wiktor Żelazny@*
Copyright @copyright{} 2020 Damien Cassou@* Copyright @copyright{} 2020
Jakub Kądziołka@* Copyright @copyright{} 2020 Jack Hill@* Copyright
@copyright{} 2020 Naga Malleswari@* Copyright @copyright{} 2020 Brice
Waegeneire@* Copyright @copyright{} 2020 R Veera Kumar@* Copyright
@copyright{} 2020 Pierre Langlois@* Copyright @copyright{} 2020 pinoaffe@*

Es ist Ihnen gestattet, dieses Dokument zu vervielfältigen, weiterzugeben
und/oder zu verändern, unter den Bedingungen der GNU Free Documentation
License, entweder gemäß Version 1.3 der Lizenz oder (nach Ihrer Option)
einer späteren Version, die von der Free Software Foundation veröffentlicht
wurde, ohne unveränderliche Abschnitte, ohne vorderen Umschlagtext und ohne
hinteren Umschlagtext. Eine Kopie der Lizenz finden Sie im Abschnitt mit dem
Titel „GNU Free Documentation License“.
@end copying

@dircategory Systemadministration
@direntry
* Guix: (guix.de).           Installierte Software und Systemkonfigurationen 
                               verwalten.
* guix package: (guix.de)guix package aufrufen.  Pakete installieren, 
                                                   entfernen und 
                                                   aktualisieren.
* guix gc: (guix.de)guix gc aufrufen.  Unbenutzten Plattenspeicher wieder 
                                         freigeben.
* guix pull: (guix.de)guix pull aufrufen.  Die Liste verfügbarer Pakete 
                                             aktualisieren.
* guix system: (guix.de)guix system aufrufen.  Die 
                                                 Betriebssystemkonfiguration 
                                                 verwalten.
* guix deploy: (guix.de)guix deploy aufrufen.  Betriebssystemkonfigurationen 
                                                 entfernter Rechner verwalten.
@end direntry

@dircategory Softwareentwicklung
@direntry
* guix environment: (guix.de)guix environment aufrufen.  Umgebungen für 
                                                           Entwickler 
                                                           erstellen
* guix build: (guix.de)guix build aufrufen.  Erstellen von Paketen.
* guix pack: (guix.de)guix pack aufrufen.  Bündel aus Binärdateien 
                                             erstellen.
@end direntry

@titlepage
@title Referenzhandbuch zu GNU Guix
@subtitle Den funktionalen Paketmanager GNU Guix benutzen
@author Die Entwickler von GNU Guix

@page
@vskip 0pt plus 1filll
Edition @value{EDITION} @* @value{UPDATED} @*

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top GNU Guix

Dieses Dokument beschreibt GNU Guix, Version @value{VERSION}, ein Werkzeug
zur funktionalen Verwaltung von Softwarepaketen, das für das GNU-System
geschrieben wurde.

@c TRANSLATORS: You can replace the following paragraph with information on
@c how to join your own translation team and how to report issues with the
@c translation.
Dieses Handbuch ist auch auf Englisch (siehe @ref{Top,,, guix, GNU Guix
Reference Manual}), in Vereinfachtem Chinesisch (siehe @ref{Top,,,
guix.zh_CN, GNU Guix参考手册}), auf Französisch (siehe @ref{Top,,, guix.fr,
Manuel de référence de GNU Guix}), auf Spanisch (siehe @ref{Top,,, guix.es,
Manual de referencia de GNU Guix}) und auf Russisch verfügbar (siehe
@ref{Top,,, guix.ru, Руководство GNU Guix}). Wenn Sie es in Ihre eigene
Sprache übersetzen möchten, dann sind Sie beim
@uref{https://translationproject.org/domain/guix-manual.html, Translation
Project} herzlich willkommen.

@menu
* Einführung::              Was ist Guix überhaupt?
* Installation::             Guix installieren.
* Systeminstallation::       Das ganze Betriebssystem installieren.
* Paketverwaltung::          Pakete installieren, aktualisieren usw.
* Entwicklung::              Von Guix unterstützte Softwareentwicklung.
* Programmierschnittstelle::  Guix in Scheme verwenden.
* Zubehör::                 Befehle zur Paketverwaltung.
* Systemkonfiguration::      Das Betriebssystem konfigurieren.
* Dokumentation::            Wie man Nutzerhandbücher von Software liest.
* Dateien zur Fehlersuche installieren::  Womit man seinen Debugger 
                                            füttert.
* Sicherheitsaktualisierungen::  Sicherheits-Patches schnell einspielen.
* Bootstrapping::            GNU/Linux von Grund auf selbst erstellen.
* Portierung::               Guix auf andere Plattformen und Kernels 
                               bringen.
* Mitwirken::                Ihre Hilfe ist nötig!

* Danksagungen::             Danke!
* GNU-Lizenz für freie Dokumentation::  Die Lizenz dieses Handbuchs.
* Konzeptverzeichnis::       Konzepte.
* Programmierverzeichnis::   Datentypen, Funktionen und Variable.

@detailmenu
 --- Detaillierte Liste der Knoten ---



Einführung



* Auf Guix-Art Software verwalten::  Was Guix besonders macht.
* GNU-Distribution::         Die Pakete und Werkzeuge.

Installation



* Aus Binärdatei installieren::  Guix installieren, ohne Zeit zu verlieren!
* Voraussetzungen::          Zum Erstellen und Benutzen von Guix nötige 
                               Software.
* Den Testkatalog laufen lassen::  Guix testen.
* Den Daemon einrichten::    Wie man die Umgebung des Erstellungs-Daemons 
                               einrichtet.
* Aufruf des guix-daemon::   Den Erstellungs-Daemon laufen lassen.
* Anwendungen einrichten::   Anwendungsspezifische Einstellungen.

Den Daemon einrichten



* Einrichten der Erstellungsumgebung::  Die isolierte Umgebung zum Erstellen 
                                          vorbereiten.
* Auslagern des Daemons einrichten::  Erstellungen auf entfernte Maschinen 
                                        auslagern.
* SELinux-Unterstützung::   Wie man eine SELinux-Richtlinie für den Daemon 
                               einrichtet.

Systeminstallation



* Einschränkungen::         Was Sie erwarten dürfen.
* Hardware-Überlegungen::   Unterstützte Hardware.
* Installation von USB-Stick oder DVD::  Das Installationsmedium 
                                           vorbereiten.
* Vor der Installation::     Netzwerkanbindung, Partitionierung etc.
* Geführte grafische Installation::  Leichte grafische Installation.
* Manuelle Installation::    Manuelle Installation für Zauberer.
* Nach der Systeminstallation::  Wenn die Installation erfolgreich war.
* Guix in einer VM installieren::  Ein „Guix System“-Spielplatz.
* Ein Abbild zur Installation erstellen::  Wie ein solches entsteht.

Manuelle Installation



* Tastaturbelegung und Netzwerkanbindung und Partitionierung::  Erstes 
                                                                  Einrichten.
* Fortfahren mit der Installation::  Installieren.

Paketverwaltung



* Funktionalitäten::        Wie Guix Ihr Leben schöner machen wird.
* Aufruf von guix package::  Pakete installieren, entfernen usw.
* Substitute::               Vorerstelle Binärdateien herunterladen.
* Pakete mit mehreren Ausgaben.::  Ein Quellpaket, mehrere Ausgaben.
* Aufruf von guix gc::       Den Müllsammler laufen lassen.
* Aufruf von guix pull::     Das neueste Guix samt Distribution laden.
* Kanäle::                  Die Paketsammlung anpassen.
* Aufruf von time-machine::  Alte Guix-Versionen verwenden.
* Untergeordnete::           Mit einer anderen Version von Guix 
                               interagieren.
* Aufruf von guix describe::  Informationen über Ihre Guix-Version 
                                anzeigen.
* Aufruf von guix archive::  Import und Export von Store-Dateien.

Substitute



* Offizieller Substitut-Server::  Eine besondere Quelle von Substituten.
* Substitut-Server autorisieren::  Wie man Substitute an- und abschaltet.
* Substitutauthentifizierung::  Wie Guix Substitute verifiziert.
* Proxy-Einstellungen::      Wie Sie Substitute über einen Proxy beziehen.
* Fehler bei der Substitution::  Was passiert, wenn die Substitution 
                                   fehlschlägt.
* Vom Vertrauen gegenüber Binärdateien::  Wie können Sie diesem binären 
                                              Blob trauen?

Entwicklung



* Aufruf von guix environment::  Entwicklungsumgebungen einrichten.
* Aufruf von guix pack::     Software-Bündel erstellen.
* GCC-Toolchain::            Working with languages supported by GCC.

Programmierschnittstelle



* Paketmodule::              Pakete aus Sicht des Programmierers.
* Pakete definieren::        Wie Sie neue Pakete definieren.
* Erstellungssysteme::       Angeben, wie Pakete erstellt werden.
* Der Store::                Den Paket-Store verändern.
* Ableitungen::              Systemnahe Schnittstelle für Paketableitungen.
* Die Store-Monade::         Rein funktionale Schnittstelle zum Store.
* G-Ausdrücke::             Erstellungsausdrücke verarbeiten.
* Aufruf von guix repl::     Interaktiv an Guix herumbasteln.

Pakete definieren



* „package“-Referenz::   Der Datentyp für Pakete.
* „origin“-Referenz::    Datentyp für Paketursprünge.

Zubehör



* Aufruf von guix build::    Pakete aus der Befehlszeile heraus erstellen.
* Aufruf von guix edit::     Paketdefinitionen bearbeiten.
* Aufruf von guix download::  Herunterladen einer Datei und Ausgabe ihres 
                                Hashes.
* Aufruf von guix hash::     Den kryptografischen Hash einer Datei 
                               berechnen.
* Aufruf von guix import::   Paketdefinitionen importieren.
* Aufruf von guix refresh::  Paketdefinitionen aktualisieren.
* Aufruf von guix lint::     Fehler in Paketdefinitionen finden.
* Aufruf von guix size::     Plattenplatzverbrauch profilieren.
* Aufruf von guix graph::    Den Paketgraphen visualisieren.
* Aufruf von guix publish::  Substitute teilen.
* Aufruf von guix challenge::  Die Substitut-Server anfechten.
* Aufruf von guix copy::     Mit einem entfernten Store Dateien austauschen.
* Aufruf von guix container::  Prozesse isolieren.
* Aufruf von guix weather::  Die Verfügbarkeit von Substituten 
                               einschätzen.
* Aufruf von guix processes::  Auflisten der Client-Prozesse

Aufruf von @command{guix build}



* Gemeinsame Erstellungsoptionen::  Erstellungsoptionen für die meisten 
                                      Befehle.
* Paketumwandlungsoptionen::  Varianten von Paketen erzeugen.
* Zusätzliche Erstellungsoptionen::  Optionen spezifisch für „guix 
                                        build“.
* Fehlschläge beim Erstellen untersuchen::  Praxiserfahrung bei der 
                                               Paketerstellung.

Systemkonfiguration



* Das Konfigurationssystem nutzen::  Ihr GNU-System anpassen.
* „operating-system“-Referenz::  Details der 
                                       Betriebssystem-Deklarationen.
* Dateisysteme::             Die Dateisystemeinbindungen konfigurieren.
* Zugeordnete Geräte::      Näheres zu blockorientierten Speichermedien.
* Benutzerkonten::           Benutzerkonten festlegen.
* Tastaturbelegung::         Wie das System Tastendrücke interpretiert.
* Locales::                  Sprache und kulturelle Konventionen.
* Dienste::                  Systemdienste festlegen.
* Setuid-Programme::         Mit Administratorrechten startende Programme.
* X.509-Zertifikate::        HTTPS-Server authentifizieren.
* Name Service Switch::      Den Name Service Switch von libc konfigurieren.
* Initiale RAM-Disk::        Linux-libre hochfahren.
* Bootloader-Konfiguration::  Den Bootloader konfigurieren.
* Aufruf von guix system::   Instanziierung einer Systemkonfiguration.
* Aufruf von guix deploy::   Eine Systemkonfiguration auf einen entfernten 
                               Rechner aufspielen.
* Guix in einer VM starten::  Wie man „Guix System“ in einer virtuellen 
                                Maschine startet.
* Dienste definieren::       Neue Dienstdefinitionen hinzufügen.

Dienste



* Basisdienste::             Essenzielle Systemdienste.
* Geplante Auftragsausführung::  Der mcron-Dienst.
* Log-Rotation::             Der rottlog-Dienst.
* Netzwerkdienste::          Netzwerkeinrichtung, SSH-Daemon etc.
* X Window::                 Grafische Anzeige.
* Druckdienste::             Unterstützung für lokale und entfernte 
                               Drucker.
* Desktop-Dienste::          D-Bus- und Desktop-Dienste.
* Tondienste::               Dienste für ALSA und Pulseaudio.
* Datenbankdienste::         SQL-Datenbanken, Schlüssel-Wert-Speicher etc.
* Mail-Dienste::             IMAP, POP3, SMTP und so weiter.
* Kurznachrichtendienste::   Dienste für Kurznachrichten.
* Telefondienste::           Telefoniedienste.
* Systemüberwachungsdienste::  Dienste zur Systemüberwachung.
* Kerberos-Dienste::         Kerberos-Dienste.
* Web-Dienste::              Web-Server.
* Zertifikatsdienste::       TLS-Zertifikate via Let’s Encrypt.
* DNS-Dienste::              DNS-Daemons.
* VPN-Dienste::              VPN-Daemons.
* Network File System::      Dienste mit Bezug zum Netzwerkdateisystem.
* Kontinuierliche Integration::  Der Cuirass-Dienst.
* Dienste zur Stromverbrauchsverwaltung::  Den Akku schonen.
* Audio-Dienste::            Der MPD.
* Virtualisierungsdienste::  Dienste für virtuelle Maschinen.
* Versionskontrolldienste::  Entfernten Zugang zu Git-Repositorys bieten.
* Spieldienste::             Spielserver.
* PAM-Einbindedienst::       Dienst, um Datenträger beim Anmelden 
                               einzubinden.
* Guix-Dienste::             Dienste, die speziell mit Guix zu tun haben.
* Linux-Dienste::            Dienste nur für Systeme mit Linux-Kernel.
* Hurd Services::            Services specific to a Hurd System.
* Verschiedene Dienste::     Andere Dienste.

Dienste definieren



* Dienstkompositionen::      Wie Dienste zusammengestellt werden.
* Diensttypen und Dienste::  Typen und Dienste.
* Service-Referenz::         Referenz zur Programmierschnittstelle.
* Shepherd-Dienste::         Eine spezielle Art von Dienst.

@end detailmenu
@end menu

@c *********************************************************************
@node Einführung
@chapter Einführung

@cindex Zweck
GNU Guix@footnote{„Guix“ wird wie „geeks“ ausgesprochen, also als „ɡiːks“ in
der Notation des Internationalen Phonetischen Alphabets (IPA).} ist ein
Werkzeug zur Verwaltung von Softwarepaketen für das GNU-System und eine
Distribution (eine „Verteilung“) desselbigen GNU-Systems. Guix macht es
@emph{nicht} mit besonderen Berechtigungen ausgestatteten,
„unprivilegierten“ Nutzern leicht, Softwarepakete zu installieren, zu
aktualisieren oder zu entfernen, zu einem vorherigen Satz von Paketen
zurückzuwechseln, Pakete aus ihrem Quellcode heraus zu erstellen und hilft
allgemein bei der Erzeugung und Wartung von Software-Umgebungen.

@cindex Guix System
@cindex GuixSD, was jetzt Guix System heißt
@cindex Guix System Distribution, welche jetzt Guix System heißt
Sie können GNU@tie{}Guix auf ein bestehendes GNU/Linux-System aufsetzen, wo
es die bereits verfügbaren Werkzeuge ergänzt, ohne zu stören (siehe
@ref{Installation}), oder Sie können es als eine eigenständige
Betriebssystem-Distribution namens @dfn{Guix@tie{}System}
verwenden@footnote{Der Name @dfn{Guix@tie{}System} wird auf englische Weise
ausgesprochen. Früher hatten wir „Guix System“ als „Guix System
Distribution“ bezeichnet und mit „GuixSD“ abgekürzt. Wir denken mittlerweile
aber, dass es sinnvoller ist, alles unter der Fahne von Guix zu gruppieren,
weil schließlich „Guix System“ auch über den Befehl @command{guix system}
verfügbar ist, selbst wenn Sie Guix auf einer fremden Distribution
benutzen!}. Siehe @ref{GNU-Distribution}.

@menu
* Auf Guix-Art Software verwalten::  Was Guix besonders macht.
* GNU-Distribution::         Die Pakete und Werkzeuge.
@end menu

@node Auf Guix-Art Software verwalten
@section Auf Guix-Art Software verwalten

@cindex Benutzeroberflächen
Guix bietet eine befehlszeilenbasierte Paketverwaltungsschnittstelle (siehe
@ref{Aufruf von guix package}), Werkzeuge als Hilfestellung bei der
Software-Entwicklung (siehe @ref{Entwicklung}), Befehlszeilenwerkzeuge für
fortgeschrittenere Nutzung (siehe @ref{Zubehör}) sowie Schnittstellen zur
Programmierung in Scheme (siehe @ref{Programmierschnittstelle}).
@cindex Erstellungs-Daemon
Der @dfn{Erstellungs-Daemon} ist für das Erstellen von Paketen im Auftrag
von Nutzern verantwortlich (siehe @ref{Den Daemon einrichten}) und für das
Herunterladen vorerstellter Binärdateien aus autorisierten Quellen (siehe
@ref{Substitute}).

@cindex Erweiterbarkeit der Distribution
@cindex Anpassung, von Paketen
Guix enthält Paketdefinitionen für viele Pakete, manche aus GNU und andere
nicht aus GNU, die alle @uref{https://www.gnu.org/philosophy/free-sw.html,
die Freiheit des Computernutzers respektieren}. Es ist @emph{erweiterbar}:
Nutzer können ihre eigenen Paketdefinitionen schreiben (siehe @ref{Pakete definieren}) und sie als unabhängige Paketmodule verfügbar machen (siehe
@ref{Paketmodule}). Es ist auch @emph{anpassbar}: Nutzer können
spezialisierte Paketdefinitionen aus bestehenden @emph{ableiten}, auch von
der Befehlszeile (siehe @ref{Paketumwandlungsoptionen}).

@cindex funktionale Paketverwaltung
@cindex Isolierung
Intern implementiert Guix die Disziplin der @dfn{funktionalen
Paketverwaltung}, zu der Nix schon die Pionierarbeit geleistet hat (siehe
@ref{Danksagungen}). In Guix wird der Prozess, ein Paket zu erstellen und
zu installieren, als eine @emph{Funktion} im mathematischen Sinn
aufgefasst. Diese Funktion hat Eingaben, wie zum Beispiel
Erstellungs-Skripts, einen Compiler und Bibliotheken, und liefert ein
installiertes Paket. Als eine reine Funktion hängt sein Ergebnis allein von
seinen Eingaben ab — zum Beispiel kann er nicht auf Software oder Skripts
Bezug nehmen, die nicht ausdrücklich als Eingaben übergeben wurden. Eine
Erstellungsfunktion führt immer zum selben Ergebnis, wenn ihr die gleiche
Menge an Eingaben übergeben wurde. Sie kann die Umgebung des laufenden
Systems auf keine Weise beeinflussen, zum Beispiel kann sie keine Dateien
außerhalb ihrer Erstellungs- und Installationsverzeichnisse verändern. Um
dies zu erreichen, laufen Erstellungsprozesse in isolieren Umgebungen
(sogenannte @dfn{Container}), wo nur ausdrückliche Eingaben sichtbar sind.

@cindex Store
Das Ergebnis von Paketerstellungsfunktionen wird im Dateisystem
@dfn{zwischengespeichert} in einem besonderen Verzeichnis, was als @dfn{der
Store} bezeichnet wird (siehe @ref{Der Store}). Jedes Paket wird in sein
eigenes Verzeichnis im Store installiert — standardmäßig ist er unter
@file{/gnu/store} zu finden. Der Verzeichnisname enthält einen Hash aller
Eingaben, anhand derer das Paket erzeugt wurde, somit hat das Ändern einer
Eingabe einen völlig anderen Verzeichnisnamen zur Folge.

Dieses Vorgehen ist die Grundlage für die Guix auszeichnenden
Funktionalitäten: Unterstützung transaktionsbasierter Paketaktualisierungen
und -rücksetzungen, Installation von Paketen für jeden Nutzer sowie Garbage
Collection für Pakete (siehe @ref{Funktionalitäten}).


@node GNU-Distribution
@section GNU-Distribution

@cindex Guix System
Mit Guix kommt eine Distribution des GNU-Systems, die nur aus freier
Software@footnote{Die Bezeichnung „frei“ steht hier für die
@url{https://www.gnu.org/philosophy/free-sw.html,Freiheiten@comma{} die
Nutzern der Software geboten werden}.} besteht. Die Distribution kann für
sich allein installiert werden (siehe @ref{Systeminstallation}), aber Guix
kann auch auf einem bestehenden GNU/Linux-System installiert werden. Wenn
wir die Anwendungsfälle unterscheiden möchten, bezeichnen wir die
alleinstehende Distribution als „Guix@tie{}System“ (mit englischer
Aussprache).

Die Distribution stellt den Kern der GNU-Pakete, also insbesondere GNU libc,
GCC und Binutils, sowie zahlreiche zum GNU-Projekt gehörende und nicht dazu
gehörende Anwendungen zur Verfügung. Die vollständige Liste verfügbarer
Pakete können Sie @url{https://www.gnu.org/software/guix/packages,online}
einsehen, oder indem Sie @command{guix package} ausführen (siehe
@ref{Aufruf von guix package}):

@example
guix package --list-available
@end example

Unser Ziel ist, eine zu 100% freie Software-Distribution von Linux-basierten
und von anderen GNU-Varianten anzubieten, mit dem Fokus darauf, das
GNU-Projekt und die enge Zusammenarbeit seiner Bestandteile zu befördern,
sowie die Programme und Werkzeuge hervorzuheben, die die Nutzer dabei
unterstützen, von dieser Freiheit Gebrauch zu machen.

Pakete sind zur Zeit auf folgenden Plattformen verfügbar:

@table @code

@item x86_64-linux
Intel/AMD-@code{x86_64}-Architektur, Linux-Libre als Kernel,

@item i686-linux
Intel-32-Bit-Architektur (IA-32), Linux-Libre als Kernel,

@item armhf-linux
ARMv7-A-Architektur mit „hard float“, Thumb-2 und NEON, für die EABI
„hard-float application binary interface“, mit Linux-Libre als Kernel,

@item aarch64-linux
64-Bit-ARMv8-A-Prozessoren, little-endian, mit Linux-Libre als Kernel,

@item mips64el-linux (deprecated)
little-endian 64-bit MIPS processors, specifically the Loongson series, n32
ABI, and Linux-Libre kernel.  This configuration is no longer fully
supported; in particular, there is no ongoing work to ensure that this
architecture still works. Should someone decide they wish to revive this
architecture then the code is still available.

@end table

Mit Guix@tie{}System @emph{deklarieren} Sie alle Aspekte der
Betriebssystemkonfiguration und Guix kümmert sich darum, die Konfiguration
auf transaktionsbasierte, reproduzierbare und zustandslose Weise zu
instanziieren (siehe @ref{Systemkonfiguration}). Guix System benutzt den
Kernel Linux-libre, das Shepherd-Initialisierungssystem (siehe
@ref{Einführung,,, shepherd, The GNU Shepherd Manual}), die wohlbekannten
GNU-Werkzeuge mit der zugehörigen Werkzeugkette sowie die grafische Umgebung
und Systemdienste Ihrer Wahl.

Guix System ist auf allen oben genannten Plattformen außer
@code{mips64el-linux} verfügbar.

@noindent
Informationen, wie auf andere Architekturen oder Kernels portiert werden
kann, finden Sie im Abschnitt @ref{Portierung}.

Diese Distribution aufzubauen basiert auf Kooperation, und Sie sind herzlich
eingeladen, dabei mitzumachen! Im Abschnitt @ref{Mitwirken} stehen
weitere Informationen, wie Sie uns helfen können.


@c *********************************************************************
@node Installation
@chapter Installation

@cindex Guix installieren

@quotation Anmerkung
Wir empfehlen, dieses
@uref{https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh,
Shell-basierte Installationsskript} zu benutzen, um Guix auf ein bestehendes
GNU/Linux-System zu installieren — im Folgenden als @dfn{Fremddistribution}
bezeichnet.@footnote{Dieser Abschnitt bezieht sich auf die Installation des
Paketverwaltungswerkzeugs, das auf ein bestehendes GNU/Linux-System
aufsetzend installiert werden kann. Wenn Sie stattdessen das vollständige
GNU-Betriebssystem installieren möchten, lesen Sie @ref{Systeminstallation}.} Das Skript automatisiert das Herunterladen, das Installieren
und die anfängliche Konfiguration von Guix. Es sollte als der
Administratornutzer „root“ ausgeführt werden.
@end quotation

@cindex Fremddistribution
@cindex Verzeichnisse auf einer Fremddistribution
Wenn es auf einer Fremddistribution installiert wird, ergänzt GNU@tie{}Guix
die verfügbaren Werkzeuge, ohne dass sie sich gegenseitig stören. Guix’
Daten befinden sich ausschließlich in zwei Verzeichnissen, üblicherweise
@file{/gnu/store} und @file{/var/guix}; andere Dateien auf Ihrem System wie
@file{/etc} bleiben unberührt.

Sobald es installiert ist, kann Guix durch Ausführen von @command{guix pull}
aktualisiert werden (siehe @ref{Aufruf von guix pull}).

Sollten Sie es vorziehen, die Installationsschritte manuell durchzuführen,
oder falls Sie Anpassungen daran vornehmen möchten, könnten sich die
folgenden Unterabschnitte als nützlich erweisen. Diese beschreiben die
Software-Voraussetzungen von Guix und wie man es manuell installiert, so
dass man es benutzen kann.

@menu
* Aus Binärdatei installieren::  Guix installieren, ohne Zeit zu verlieren!
* Voraussetzungen::          Zum Erstellen und Benutzen von Guix nötige 
                               Software.
* Den Testkatalog laufen lassen::  Guix testen.
* Den Daemon einrichten::    Wie man die Umgebung des Erstellungs-Daemons 
                               einrichtet.
* Aufruf des guix-daemon::   Den Erstellungs-Daemon laufen lassen.
* Anwendungen einrichten::   Anwendungsspezifische Einstellungen.
* Aktualisieren von Guix::   Guix und seinen Erstellungs-Daemon 
                               aktualisieren.
@end menu

@node Aus Binärdatei installieren
@section Aus Binärdatei installieren

@cindex Guix aus Binärdateien installieren
@cindex Installations-Skript
Dieser Abschnitt beschreibt, wie sich Guix auf einem beliebigen System aus
einem alle Komponenten umfassenden Tarball installieren lässt, der
Binärdateien für Guix und all seine Abhängigkeiten liefert. Dies geht in der
Regel schneller, als Guix aus seinen Quelldateien zu installieren, was in
den nächsten Abschnitten beschrieben wird. Vorausgesetzt wird hier
lediglich, dass GNU@tie{}tar und Xz verfügbar sind.

@c Note duplicated from the ``Installation'' node.
@quotation Anmerkung
We recommend the use of this
@uref{https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh,
shell installer script}.  The script automates the download, installation,
and initial configuration steps described below.  It should be run as the
root user.  As root, you can thus run this:

@example
cd /tmp
wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh
chmod +x guix-install.sh
./guix-install.sh
@end example
@end quotation

Die Installation läuft so ab:

@enumerate
@item
@cindex Guix-Binärdatei herunterladen
Download the binary tarball from
@indicateurl{@value{BASE-URL}/guix-binary-@value{VERSION}.x86_64-linux.tar.xz},
where @code{x86_64-linux} can be replaced with @code{i686-linux} for an
@code{i686} (32-bits) machine already running the kernel Linux, and so on
(@pxref{GNU-Distribution}).

@c The following is somewhat duplicated in ``System Installation''.
Achten Sie darauf, auch die zugehörige @file{.sig}-Datei herunterzuladen und
verifizieren Sie damit die Authentizität des Tarballs, ungefähr so:

@example
$ wget @value{BASE-URL}/guix-binary-@value{VERSION}.x86_64-linux.tar.xz.sig
$ gpg --verify guix-binary-@value{VERSION}.x86_64-linux.tar.xz.sig
@end example

Falls dieser Befehl fehlschlägt, weil Sie nicht über den nötigen
öffentlichen Schlüssel verfügen, können Sie ihn mit diesem Befehl
importieren:

@example
$ wget @value{OPENPGP-SIGNING-KEY-URL} \
      -qO - | gpg --import -
@end example

@noindent
und den Befehl @code{gpg --verify} erneut ausführen.

Beachten Sie, dass eine Warnung wie „Dieser Schlüssel trägt keine
vertrauenswürdige Signatur!“ normal ist.

@c end authentication part

@item
Nun müssen Sie zum Administratornutzer @code{root} wechseln. Abhängig von
Ihrer Distribution müssen Sie dazu etwa @code{su -} oder @code{sudo -i}
ausführen. Danach führen Sie als @code{root}-Nutzer aus:

@example
# cd /tmp
# tar --warning=no-timestamp -xf \
     /path/to/guix-binary-@value{VERSION}.x86_64-linux.tar.xz
# mv var/guix /var/ && mv gnu /
@end example

This creates @file{/gnu/store} (@pxref{Der Store}) and @file{/var/guix}.
The latter contains a ready-to-use profile for @code{root} (see next step).

Entpacken Sie den Tarball @emph{nicht} auf einem schon funktionierenden
Guix-System, denn es würde seine eigenen essenziellen Dateien überschreiben.

The @option{--warning=no-timestamp} option makes sure GNU@tie{}tar does not
emit warnings about ``implausibly old time stamps'' (such warnings were
triggered by GNU@tie{}tar 1.26 and older; recent versions are fine).  They
stem from the fact that all the files in the archive have their modification
time set to zero (which means January 1st, 1970).  This is done on purpose
to make sure the archive content is independent of its creation time, thus
making it reproducible.

@item
Machen Sie das Profil als @file{~root/.config/guix/current} verfügbar, wo
@command{guix pull} es aktualisieren kann (siehe @ref{Aufruf von guix pull}):

@example
# mkdir -p ~root/.config/guix
# ln -sf /var/guix/profiles/per-user/root/current-guix \
         ~root/.config/guix/current
@end example

Source @file{etc/profile} to augment @env{PATH} and other relevant
environment variables:

@example
# GUIX_PROFILE="`echo ~root`/.config/guix/current" ; \
  source $GUIX_PROFILE/etc/profile
@end example

@item
Erzeugen Sie Nutzergruppe und Nutzerkonten für die Erstellungs-Benutzer wie
folgt (siehe @ref{Einrichten der Erstellungsumgebung}).

@item
Führen Sie den Daemon aus, und lassen Sie ihn automatisch bei jedem
Hochfahren starten.

Wenn Ihre Wirts-Distribution systemd als „init“-System verwendet, können Sie
das mit folgenden Befehlen veranlassen:

@c Versions of systemd that supported symlinked service files are not
@c yet widely deployed, so we should suggest that users copy the service
@c files into place.
@c
@c See this thread for more information:
@c https://lists.gnu.org/archive/html/guix-devel/2017-01/msg01199.html

@example
# cp ~root/.config/guix/current/lib/systemd/system/gnu-store.mount \
     ~root/.config/guix/current/lib/systemd/system/guix-daemon.service \
     /etc/systemd/system/
# systemctl enable --now gnu-store.mount guix-daemon
@end example

Wenn Ihre Wirts-Distribution als „init“-System Upstart verwendet:

@example
# initctl reload-configuration
# cp ~root/.config/guix/current/lib/upstart/system/guix-daemon.conf \
     /etc/init/
# start guix-daemon
@end example

Andernfalls können Sie den Daemon immer noch manuell starten, mit:

@example
# ~root/.config/guix/current/bin/guix-daemon \
       --build-users-group=guixbuild
@end example

@item
Stellen Sie den @command{guix}-Befehl auch anderen Nutzern Ihrer Maschine
zur Verfügung, zum Beispiel so:

@example
# mkdir -p /usr/local/bin
# cd /usr/local/bin
# ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix
@end example

Es ist auch eine gute Idee, die Info-Version dieses Handbuchs ebenso
verfügbar zu machen:

@example
# mkdir -p /usr/local/share/info
# cd /usr/local/share/info
# for i in /var/guix/profiles/per-user/root/current-guix/share/info/* ;
  do ln -s $i ; done
@end example

That way, assuming @file{/usr/local/share/info} is in the search path,
running @command{info guix} will open this manual (@pxref{Other Info
Directories,,, texinfo, GNU Texinfo}, for more details on changing the Info
search path).

@item
@cindex Substitute, deren Autorisierung
Um Substitute von @code{@value{SUBSTITUTE-SERVER}} oder einem Spiegelserver
davon zu benutzen (siehe @ref{Substitute}), müssen sie erst autorisiert
werden:

@example
# guix archive --authorize < \
     ~root/.config/guix/current/share/guix/@value{SUBSTITUTE-SERVER}.pub
@end example

@item
Alle Nutzer müssen womöglich ein paar zusätzliche Schritte ausführen, damit
ihre Guix-Umgebung genutzt werden kann, siehe @ref{Anwendungen einrichten}.
@end enumerate

Voilà, die Installation ist fertig!

Sie können nachprüfen, dass Guix funktioniert, indem Sie ein Beispielpaket
in das root-Profil installieren:

@example
# guix install hello
@end example

Der Tarball zur Installation aus einer Binärdatei kann einfach durch
Ausführung des folgenden Befehls im Guix-Quellbaum (re-)produziert und
verifiziert werden:

@example
make guix-binary.@var{System}.tar.xz
@end example

@noindent
…@: was wiederum dies ausführt:

@example
guix pack -s @var{System} --localstatedir \
  --profile-name=current-guix guix
@end example

Siehe @ref{Aufruf von guix pack} für weitere Informationen zu diesem
praktischen Werkzeug.

@node Voraussetzungen
@section Voraussetzungen

Dieser Abschnitt listet Voraussetzungen auf, um Guix aus seinem Quellcode zu
erstellen. Der Erstellungsprozess für Guix ist derselbe wie für andere
GNU-Software und wird hier nicht beschrieben. Bitte lesen Sie die Dateien
@file{README} und @file{INSTALL} im Guix-Quellbaum, um weitere Details zu
erfahren.

@cindex Offizieller Webauftritt
GNU Guix kann von seinem Webauftritt unter
@url{http://www.gnu.org/software/guix/} heruntergeladen werden.

GNU Guix hat folgende Pakete als Abhängigkeiten:

@itemize
@item @url{https://gnu.org/software/guile/, GNU Guile}, Version 3.0.x oder
2.2.x,
@item @url{https://notabug.org/cwebber/guile-gcrypt, Guile-Gcrypt}, Version
0.1.0 oder neuer,
@item
@uref{https://gnutls.org/, GnuTLS}, im Speziellen dessen Anbindungen für
Guile (siehe @ref{Guile Preparations, how to install the GnuTLS bindings for
Guile,, gnutls-guile, GnuTLS-Guile}),
@item
@uref{https://notabug.org/guile-sqlite3/guile-sqlite3, Guile-SQLite3},
Version 0.1.0 oder neuer,
@item
@c FIXME: Specify a version number once a release has been made.
@uref{https://gitlab.com/guile-git/guile-git, Guile-Git}, vom August 2017
oder neuer,
@item @uref{https://savannah.nongnu.org/projects/guile-json/, Guile-JSON} 3.x,
@item @url{https://zlib.net, zlib},
@item @url{https://www.gnu.org/software/make/, GNU Make}.
@end itemize

Folgende Abhängigkeiten sind optional:

@itemize
@item
@c Note: We need at least 0.12.0 for 'userauth-gssapi!'.
Unterstützung für das Auslagern von Erstellungen (siehe @ref{Auslagern des Daemons einrichten}) und @command{guix copy} (siehe @ref{Aufruf von guix copy}) hängt von
@uref{https://github.com/artyom-poptsov/guile-ssh, Guile-SSH}, Version
0.12.0 oder neuer, ab.

@item
Wenn @url{https://www.nongnu.org/lzip/lzlib.html, lzlib} verfügbar ist,
können lzlib-Substitute benutzt werden und @command{guix publish} kann
Substitute mit lzlib komprimieren.

@item
Wenn @url{http://www.bzip.org, libbz2} verfügbar ist, kann
@command{guix-daemon} damit Erstellungsprotokolle komprimieren.
@end itemize

Unless @option{--disable-daemon} was passed to @command{configure}, the
following packages are also needed:

@itemize
@item @url{https://gnupg.org/, GNU libgcrypt},
@item @url{https://sqlite.org, SQLite 3},
@item @url{https://gcc.gnu.org, GCC's g++} mit Unterstützung für den
C++11-Standard.
@end itemize

@cindex Zustandsverzeichnis
When configuring Guix on a system that already has a Guix installation, be
sure to specify the same state directory as the existing installation using
the @option{--localstatedir} option of the @command{configure} script
(@pxref{Directory Variables, @code{localstatedir},, standards, GNU Coding
Standards}).  Usually, this @var{localstatedir} option is set to the value
@file{/var}.  The @command{configure} script protects against unintended
misconfiguration of @var{localstatedir} so you do not inadvertently corrupt
your store (@pxref{Der Store}).

@node Den Testkatalog laufen lassen
@section Den Testkatalog laufen lassen

@cindex Testkatalog
Nachdem @command{configure} und @code{make} erfolgreich durchgelaufen sind,
ist es ratsam, den Testkatalog auszuführen. Er kann dabei helfen, Probleme
mit der Einrichtung oder Systemumgebung zu finden, oder auch Probleme in
Guix selbst — und Testfehler zu melden ist eine wirklich gute Art und Weise,
bei der Verbesserung von Guix mitzuhelfen. Um den Testkatalog auszuführen,
geben Sie Folgendes ein:

@example
make check
@end example

Testfälle können parallel ausgeführt werden. Sie können die
Befehlszeiltenoption @code{-j} von GNU@tie{}make benutzen, damit es
schneller geht. Der erste Durchlauf kann auf neuen Maschinen ein paar
Minuten dauern, nachfolgende Ausführungen werden schneller sein, weil der
für die Tests erstellte Store schon einige Dinge zwischengespeichert haben
wird.

Es ist auch möglich, eine Teilmenge der Tests laufen zu lassen, indem Sie
die @code{TESTS}-Variable des Makefiles ähnlich wie in diesem Beispiel
definieren:

@example
make check TESTS="tests/store.scm tests/cpio.scm"
@end example

Standardmäßig werden Testergebnisse pro Datei angezeigt. Um die Details
jedes einzelnen Testfalls zu sehen, können Sie wie in diesem Beispiel die
@code{SCM_LOG_DRIVER_FLAGS}-Variable des Makefiles definieren:

@example
make check TESTS="tests/base64.scm" SCM_LOG_DRIVER_FLAGS="--brief=no"
@end example

Kommt es zum Fehlschlag, senden Sie bitte eine E-Mail an
@email{bug-guix@@gnu.org} und fügen Sie die Datei @file{test-suite.log} als
Anhang bei. Bitte geben Sie dabei in Ihrer Nachricht die benutzte Version
von Guix an sowie die Versionsnummern der Abhängigkeiten (siehe
@ref{Voraussetzungen}).

Guix wird auch mit einem Testkatalog für das ganze System ausgeliefert, der
vollständige Instanzen des „Guix System“-Betriebssystems testet. Er kann nur
auf Systemen benutzt werden, auf denen Guix bereits installiert ist, mit
folgendem Befehl:

@example
make check-system
@end example

@noindent
Oder, auch hier, indem Sie @code{TESTS} definieren, um eine Teilmenge der
auszuführenden Tests anzugeben:

@example
make check-system TESTS="basic mcron"
@end example

Diese Systemtests sind in den @code{(gnu tests …)}-Modulen definiert. Sie
funktionieren, indem Sie das getestete Betriebssystem mitsamt schlichter
Instrumentierung in einer virtuellen Maschine (VM) ausführen. Die Tests
können aufwendige Berechnungen durchführen oder sie günstig umgehen, je
nachdem, ob für ihre Abhängigkeiten Substitute zur Verfügung stehen (siehe
@ref{Substitute}). Manche von ihnen nehmen viel Speicherplatz in Anspruch,
um die VM-Abbilder zu speichern.

Auch hier gilt: Falls Testfehler auftreten, senden Sie bitte alle Details an
@email{bug-guix@@gnu.org}.

@node Den Daemon einrichten
@section Den Daemon einrichten

@cindex Daemon
Operationen wie das Erstellen eines Pakets oder Laufenlassen des
Müllsammlers werden alle durch einen spezialisierten Prozess durchgeführt,
den @dfn{Erstellungs-Daemon}, im Auftrag seiner Kunden (den Clients). Nur
der Daemon darf auf den Store und seine zugehörige Datenbank
zugreifen. Daher wird jede den Store verändernde Operation durch den Daemon
durchgeführt. Zum Beispiel kommunizieren Befehlszeilenwerkzeuge wie
@command{guix package} und @command{guix build} mit dem Daemon (mittels
entfernter Prozeduraufrufe), um ihm Anweisungen zu geben, was er tun soll.

Folgende Abschnitte beschreiben, wie Sie die Umgebung des
Erstellungs-Daemons ausstatten sollten. Siehe auch @ref{Substitute} für
Informationen darüber, wie Sie es dem Daemon ermöglichen, vorerstellte
Binärdateien herunterzuladen.

@menu
* Einrichten der Erstellungsumgebung::  Die isolierte Umgebung zum Erstellen 
                                          vorbereiten.
* Auslagern des Daemons einrichten::  Erstellungen auf entfernte Maschinen 
                                        auslagern.
* SELinux-Unterstützung::   Wie man eine SELinux-Richtlinie für den Daemon 
                               einrichtet.
@end menu

@node Einrichten der Erstellungsumgebung
@subsection Einrichten der Erstellungsumgebung

@cindex Erstellungsumgebung
In einem normalen Mehrbenutzersystem werden Guix und sein Daemon — das
Programm @command{guix-daemon} — vom Systemadministrator installiert;
@file{/gnu/store} gehört @code{root} und @command{guix-daemon} läuft als
@code{root}. Nicht mit erweiterten Rechten ausgestattete Nutzer können
Guix-Werkzeuge benutzen, um Pakete zu erstellen oder anderweitig auf den
Store zuzugreifen, und der Daemon wird dies für sie erledigen und dabei
sicherstellen, dass der Store in einem konsistenten Zustand verbleibt und
sich die Nutzer erstellte Pakete teilen.

@cindex Erstellungsbenutzer
Wenn @command{guix-daemon} als Administratornutzer @code{root} läuft, wollen
Sie aber vielleicht dennoch nicht, dass Paketerstellungsprozesse auch als
@code{root} ablaufen, aus offensichtlichen Sicherheitsgründen. Um dies zu
vermeiden, sollte ein besonderer Pool aus @dfn{Erstellungsbenutzern}
geschaffen werden, damit vom Daemon gestartete Erstellungsprozesse ihn
benutzen. Diese Erstellungsbenutzer müssen weder eine Shell noch ein
Persönliches Verzeichnis zugewiesen bekommen, sie werden lediglich benutzt,
wenn der Daemon @code{root}-Rechte in Erstellungsprozessen ablegt. Mehrere
solche Benutzer zu haben, ermöglicht es dem Daemon, verschiedene
Erstellungsprozessen unter verschiedenen Benutzeridentifikatoren (UIDs) zu
starten, was garantiert, dass sie einander nicht stören — eine essenzielle
Funktionalität, da Erstellungen als reine Funktionen angesehen werden (siehe
@ref{Einführung}).

Auf einem GNU/Linux-System kann ein Pool von Erstellungsbenutzern wie folgt
erzeugt werden (mit Bash-Syntax und den Befehlen von @code{shadow}):

@c See https://lists.gnu.org/archive/html/bug-guix/2013-01/msg00239.html
@c for why `-G' is needed.
@example
# groupadd --system guixbuild
# for i in `seq -w 1 10`;
  do
    useradd -g guixbuild -G guixbuild                  \
            -d /var/empty -s `which nologin`           \
            -c "Guix-Erstellungsbenutzer $i" --system  \
            guixbuilder$i;
  done
@end example

@noindent
Die Anzahl der Erstellungsbenutzer entscheidet, wieviele Erstellungsaufträge
parallel ausgeführt werden können, wie es mit der Befehlszeilenoption
@option{--max-jobs} vorgegeben werden kann (siehe @ref{Aufruf des guix-daemon,
@option{--max-jobs}}). Um @command{guix system vm} und ähnliche Befehle
nutzen zu können, müssen Sie die Erstellungsbenutzer unter Umständen zur
@code{kvm}-Benutzergruppe hinzufügen, damit sie Zugriff auf @file{/dev/kvm}
haben, mit @code{-G guixbuild,kvm} statt @code{-G guixbuild} (siehe
@ref{Aufruf von guix system}).

Das Programm @code{guix-daemon} kann mit dem folgenden Befehl als
@code{root} gestartet werden@footnote{Wenn Ihre Maschine systemd als
„init“-System verwendet, genügt es, die Datei
@file{@var{prefix}/lib/systemd/system/guix-daemon.service} in
@file{/etc/systemd/system} zu platzieren, damit @command{guix-daemon}
automatisch gestartet wird. Ebenso können Sie, wenn Ihre Maschine Upstart
als „init“-System benutzt, die Datei
@file{@var{prefix}/lib/upstart/system/guix-daemon.conf} in @file{/etc/init}
platzieren.}:

@example
# guix-daemon --build-users-group=guixbuild
@end example

@cindex chroot
@noindent
Auf diese Weise startet der Daemon Erstellungsprozesse in einem chroot als
einer der @code{guixbuilder}-Benutzer. Auf GNU/Linux enthält die
chroot-Umgebung standardmäßig nichts außer:

@c Keep this list in sync with libstore/build.cc! -----------------------
@itemize
@item
einem minimalen @code{/dev}-Verzeichnis, was größtenteils vom @code{/dev}
des Wirtssystems unabhängig erstellt wurde@footnote{„Größtenteils“, denn
obwohl die Menge an Dateien, die im @code{/dev} des chroots vorkommen, fest
ist, können die meisten dieser Dateien nur dann erstellt werden, wenn das
Wirtssystem sie auch hat.},

@item
dem @code{/proc}-Verzeichnis, es zeigt nur die Prozesse des Containers, weil
ein separater Namensraum für Prozess-IDs (PIDs) benutzt wird,

@item
@file{/etc/passwd} mit einem Eintrag für den aktuellen Benutzer und einem
Eintrag für den Benutzer @file{nobody},

@item
@file{/etc/group} mit einem Eintrag für die Gruppe des Benutzers,

@item
@file{/etc/hosts} mit einem Eintrag, der @code{localhost} auf
@code{127.0.0.1} abbildet,

@item
einem @file{/tmp}-Verzeichnis mit Schreibrechten.
@end itemize

You can influence the directory where the daemon stores build trees @i{via}
the @env{TMPDIR} environment variable.  However, the build tree within the
chroot is always called @file{/tmp/guix-build-@var{name}.drv-0}, where
@var{name} is the derivation name---e.g., @code{coreutils-8.24}.  This way,
the value of @env{TMPDIR} does not leak inside build environments, which
avoids discrepancies in cases where build processes capture the name of
their build tree.

@vindex http_proxy
@vindex https_proxy
The daemon also honors the @env{http_proxy} and @env{https_proxy}
environment variables for HTTP and HTTPS downloads it performs, be it for
fixed-output derivations (@pxref{Ableitungen}) or for substitutes
(@pxref{Substitute}).

If you are installing Guix as an unprivileged user, it is still possible to
run @command{guix-daemon} provided you pass @option{--disable-chroot}.
However, build processes will not be isolated from one another, and not from
the rest of the system.  Thus, build processes may interfere with each
other, and may access programs, libraries, and other files available on the
system---making it much harder to view them as @emph{pure} functions.


@node Auslagern des Daemons einrichten
@subsection Nutzung der Auslagerungsfunktionalität

@cindex auslagern
@cindex Build-Hook
Wenn erwünscht, kann der Erstellungs-Daemon Ableitungserstellungen auf
andere Maschinen @dfn{auslagern}, auf denen Guix läuft, mit Hilfe des
@code{offload}-@dfn{Build-Hooks}@footnote{Diese Funktionalität ist nur
verfügbar, wenn @uref{https://github.com/artyom-poptsov/guile-ssh,
Guile-SSH} vorhanden ist.}. Wenn diese Funktionalität aktiviert ist, wird
eine nutzerspezifizierte Liste von Erstellungsmaschinen aus
@file{/etc/guix/machines.scm} gelesen. Wann immer eine Erstellung angefragt
wird, zum Beispiel durch @code{guix build}, versucht der Daemon, sie an eine
der Erstellungsmaschinen auszulagern, die die Einschränkungen der Ableitung
erfüllen, insbesondere ihren Systemtyp — z.B.@:
@file{x86_64-linux}. Fehlende Voraussetzungen für die Erstellung werden über
SSH auf die Zielmaschine kopiert, welche dann mit der Erstellung
weitermacht. Hat sie Erfolg damit, so werden die Ausgabe oder Ausgaben der
Erstellung zurück auf die ursprüngliche Maschine kopiert.

Die Datei @file{/etc/guix/machines.scm} sieht normalerweise so aus:

@lisp
(list (build-machine
        (name "eightysix.example.org")
        (system "x86_64-linux")
        (host-key "ssh-ed25519 AAAAC3Nza…")
        (user "bob")
        (speed 2.))     ;unglaublich schnell!

      (build-machine
        (name "armeight.example.org")
        (system "aarch64-linux")
        (host-key "ssh-rsa AAAAB3Nza@dots{}")
        (user "alice")
        (private-key
         (string-append (getenv "HOME")
                        "/.ssh/identity-for-guix"))))
@end lisp

@noindent
In the example above we specify a list of two build machines, one for the
@code{x86_64} architecture and one for the @code{aarch64} architecture.

Tatsächlich ist diese Datei — wenig überraschend! — eine Scheme-Datei, die
ausgewertet wird, wenn der @code{offload}-Hook gestartet wird. Der Wert, den
sie zurückliefert, muss eine Liste von @code{build-machine}-Objekten
sein. Obwohl dieses Beispiel eine feste Liste von Erstellungsmaschinen
zeigt, könnte man auch auf die Idee kommen, etwa mit DNS-SD eine Liste
möglicher im lokalen Netzwerk entdeckter Erstellungsmaschinen zu liefern
(siehe @ref{Einführung, Guile-Avahi,, guile-avahi, Using Avahi in Guile
Scheme Programs}). Der Datentyp @code{build-machine} wird im Folgenden
weiter ausgeführt.

@deftp {Datentyp} build-machine
Dieser Datentyp repräsentiert Erstellungsmaschinen, an die der Daemon
Erstellungen auslagern darf. Die wichtigen Felder sind:

@table @code

@item name
Der Hostname (d.h.@: der Rechnername) der entfernten Maschine.

@item system
Der Systemtyp der entfernten Maschine — z.B.@: @code{"x86_64-linux"}.

@item user
Das Benutzerkonto, mit dem eine Verbindung zur entfernten Maschine über SSH
aufgebaut werden soll. Beachten Sie, dass das SSH-Schlüsselpaar @emph{nicht}
durch eine Passphrase geschützt sein darf, damit nicht-interaktive
Anmeldungen möglich sind.

@item host-key
Dies muss der @dfn{öffentliche SSH-Host-Schlüssel} der Maschine im
OpenSSH-Format sein. Er wird benutzt, um die Identität der Maschine zu
prüfen, wenn wir uns mit ihr verbinden. Er ist eine lange Zeichenkette, die
ungefähr so aussieht:

@example
ssh-ed25519 AAAAC3NzaC…mde+UhL hint@@example.org
@end example

Wenn auf der Maschine der OpenSSH-Daemon, @command{sshd}, läuft, ist der
Host-Schlüssel in einer Datei wie @file{/etc/ssh/ssh_host_ed25519_key.pub}
zu finden.

Wenn auf der Maschine der SSH-Daemon von GNU@tie{}lsh, nämlich
@command{lshd}, läuft, befindet sich der Host-Schlüssel in
@file{/etc/lsh/host-key.pub} oder einer ähnlichen Datei. Er kann ins
OpenSSH-Format umgewandelt werden durch @command{lsh-export-key} (siehe
@ref{Converting keys,,, lsh, LSH Manual}):

@example
$ lsh-export-key --openssh < /etc/lsh/host-key.pub
ssh-rsa AAAAB3NzaC1yc2EAAAAEOp8FoQAAAQEAs1eB46LV…
@end example

@end table

Eine Reihe optionaler Felder kann festgelegt werden:

@table @asis

@item @code{port} (Vorgabe: @code{22})
Portnummer des SSH-Servers auf der Maschine.

@item @code{private-key} (Vorgabe: @file{~root/.ssh/id_rsa})
Die Datei mit dem privaten SSH-Schlüssel, der beim Verbinden zur Maschine
genutzt werden soll, im OpenSSH-Format. Dieser Schlüssel darf nicht mit
einer Passphrase geschützt sein.

Beachten Sie, dass als Vorgabewert der private Schlüssel @emph{des
root-Benutzers} genommen wird. Vergewissern Sie sich, dass er existiert,
wenn Sie die Standardeinstellung verwenden.

@item @code{compression} (Vorgabe: @code{"zlib@@openssh.com,zlib"})
@itemx @code{compression-level} (Vorgabe: @code{3})
Die Kompressionsmethoden auf SSH-Ebene und das angefragte
Kompressionsniveau.

Beachten Sie, dass Auslagerungen SSH-Kompression benötigen, um beim
Übertragen von Dateien an Erstellungsmaschinen und zurück weniger Bandbreite
zu benutzen.

@item @code{daemon-socket} (Vorgabe: @code{"/var/guix/daemon-socket/socket"})
Dateiname des Unix-Sockets, auf dem @command{guix-daemon} auf der Maschine
lauscht.

@item @code{parallel-builds} (Vorgabe: @code{1})
Die Anzahl der Erstellungen, die auf der Maschine parallel ausgeführt werden
können.

@item @code{speed} (Vorgabe: @code{1.0})
Ein „relativer Geschwindigkeitsfaktor“. Der Auslagerungsplaner gibt
tendenziell Maschinen mit höherem Geschwindigkeitsfaktor den Vorrang.

@item @code{features} (Vorgabe: @code{'()})
Eine Liste von Zeichenketten, die besondere von der Maschine unterstützte
Funktionalitäten bezeichnen. Ein Beispiel ist @code{"kvm"} für Maschinen,
die über die KVM-Linux-Module zusammen mit entsprechender
Hardware-Unterstützung verfügen. Ableitungen können Funktionalitäten dem
Namen nach anfragen und werden dann auf passenden Erstellungsmaschinen
eingeplant.

@end table
@end deftp

Der Befehl @code{guix} muss sich im Suchpfad der Erstellungsmaschinen
befinden. Um dies nachzuprüfen, können Sie Folgendes ausführen:

@example
ssh build-machine guix repl --version
@end example

Es gibt noch eine weitere Sache zu tun, sobald @file{machines.scm}
eingerichtet ist. Wie zuvor erklärt, werden beim Auslagern Dateien zwischen
den Stores der Maschinen hin- und hergeschickt. Damit das funktioniert,
müssen Sie als Erstes ein Schlüsselpaar auf jeder Maschine erzeugen, damit
der Daemon signierte Archive mit den Dateien aus dem Store versenden kann
(siehe @ref{Aufruf von guix archive}):

@example
# guix archive --generate-key
@end example

@noindent
Jede Erstellungsmaschine muss den Schlüssel der Hauptmaschine autorisieren,
damit diese Store-Objekte von der Hauptmaschine empfangen kann:

@example
# guix archive --authorize < öffentlicher-schlüssel-hauptmaschine.txt
@end example

@noindent
Andersherum muss auch die Hauptmaschine den jeweiligen Schlüssel jeder
Erstellungsmaschine autorisieren.

Der ganze Umstand mit den Schlüsseln soll ausdrücken, dass sich Haupt- und
Erstellungsmaschinen paarweise gegenseitig vertrauen. Konkret kann der
Erstellungs-Daemon auf der Hauptmaschine die Echtheit von den
Erstellungsmaschinen empfangener Dateien gewährleisten (und umgekehrt), und
auch dass sie nicht sabotiert wurden und mit einem autorisierten Schlüssel
signiert wurden.

@cindex Auslagerung testen
Um zu testen, ob Ihr System funktioniert, führen Sie diesen Befehl auf der
Hauptmaschine aus:

@example
# guix offload test
@end example

Dadurch wird versucht, zu jeder Erstellungsmaschine eine Verbindung
herzustellen, die in @file{/etc/guix/machines.scm} angegeben wurde,
sichergestellt, dass auf jeder Guile und die Guix-Module nutzbar sind, und
jeweils versucht, etwas auf die Erstellungsmaschine zu exportieren und von
dort zu imporieren. Dabei auftretende Fehler werden gemeldet.

Wenn Sie stattdessen eine andere Maschinendatei verwenden möchten, geben Sie
diese einfach auf der Befehlszeile an:

@example
# guix offload test maschinen-qualif.scm
@end example

Letztendlich können Sie hiermit nur die Teilmenge der Maschinen testen,
deren Name zu einem regulären Ausdruck passt:

@example
# guix offload test maschinen.scm '\.gnu\.org$'
@end example

@cindex Auslagerungs-Lagebericht
Um die momentane Auslastung aller Erstellungs-Hosts anzuzeigen, führen Sie
diesen Befehl auf dem Hauptknoten aus:

@example
# guix offload status
@end example


@node SELinux-Unterstützung
@subsection SELinux-Unterstützung

@cindex SELinux, Policy für den Daemon
@cindex Mandatory Access Control, SELinux
@cindex Sicherheit, des guix-daemon
Guix enthält eine SELinux-Richtliniendatei („Policy“) unter
@file{etc/guix-daemon.cil}, die auf einem System installiert werden kann,
auf dem SELinux aktiviert ist, damit Guix-Dateien gekennzeichnet sind und um
das erwartete Verhalten des Daemons anzugeben. Da Guix System keine
Grundrichtlinie („Base Policy“) für SELinux bietet, kann diese Richtlinie
für den Daemon auf Guix System nicht benutzt werden.

@subsubsection Installieren der SELinux-Policy
@cindex SELinux, Policy installieren
Um die Richtlinie (Policy) zu installieren, führen Sie folgenden Befehl mit
Administratorrechten aus:

@example
semodule -i etc/guix-daemon.cil
@end example

Kennzeichnen Sie dann das Dateisystem neu mit @code{restorecon} oder einem
anderen, von Ihrem System angebotenen Mechanismus.

Sobald die Richtlinie installiert ist, das Dateisystem neu gekennzeichnet
wurde und der Daemon neugestartet wurde, sollte er im Kontext
@code{guix_daemon_t} laufen. Sie können dies mit dem folgenden Befehl
nachprüfen:

@example
ps -Zax | grep guix-daemon
@end example

Beobachten Sie die Protokolldateien von SELinux, wenn Sie einen Befehl wie
@code{guix build hello} ausführen, um sich zu überzeugen, dass SELinux alle
notwendigen Operationen gestattet.

@subsubsection Einschränkungen
@cindex SELinux, Einschränkungen

Diese Richtlinie ist nicht perfekt. Im Folgenden finden Sie eine Liste von
Einschränkungen oder merkwürdigen Verhaltensweisen, die bedacht werden
sollten, wenn man die mitgelieferte SELinux-Richtlinie für den Guix-Daemon
einspielt.

@enumerate
@item
@code{guix_daemon_socket_t} wird nicht wirklich benutzt. Keine der
Socket-Operationen benutzt Kontexte, die irgendetwas mit
@code{guix_daemon_socket_t} zu tun haben. Es schadet nicht, diese ungenutzte
Kennzeichnung zu haben, aber es wäre besser, für die Kennzeichnung auch
Socket-Regeln festzulegen.

@item
@code{guix gc} kann nicht auf beliebige Verknüpfungen zu Profilen
zugreifen. Die Kennzeichnung des Ziels einer symbolischen Verknüpfung ist
notwendigerweise unabhängig von der Dateikennzeichnung der
Verknüpfung. Obwohl alle Profile unter $localstatedir gekennzeichnet sind,
erben die Verknüpfungen auf diese Profile die Kennzeichnung desjenigen
Verzeichnisses, in dem sie sich befinden. Für Verknüpfungen im Persönlichen
Verzeichnis des Benutzers ist das @code{user_home_t}, aber Verknüpfungen aus
dem Persönlichen Verzeichnis des Administratornutzers, oder @file{/tmp},
oder das Arbeitsverzeichnis des HTTP-Servers, etc., funktioniert das
nicht. @code{guix gc} würde es nicht gestattet, diese Verknüpfungen
auszulesen oder zu verfolgen.

@item
Die vom Daemon gebotene Funktionalität, auf TCP-Verbindungen zu lauschen,
könnte nicht mehr funktionieren. Dies könnte zusätzliche Regeln brauchen,
weil SELinux Netzwerk-Sockets anders behandelt als Dateien.

@item
Derzeit wird allen Dateien mit einem Namen, der zum regulären Ausdruck
@code{/gnu/store/.+-(guix-.+|profile)/bin/guix-daemon} passt, die
Kennzeichnung @code{guix_daemon_exec_t} zugewiesen, wodurch @emph{jede
beliebige} Datei mit diesem Namen in irgendeinem Profil gestattet wäre, in
der Domäne @code{guix_daemon_t} ausgeführt zu werden. Das ist nicht
ideal. Ein Angreifer könnte ein Paket erstellen, dass solch eine ausführbare
Datei enthält, und den Nutzer überzeugen, es zu installieren und
auszuführen. Dadurch käme es in die Domäne @code{guix_daemon_t}. Ab diesem
Punkt könnte SELinux nicht mehr verhindern, dass es auf Dateien zugreift,
auf die Prozesse in dieser Domäne zugreifen dürfen.

Wir könnten zum Zeitpunkt der Installation eine wesentlich restriktivere
Richtlinie generieren, für die nur @emph{genau derselbe} Dateiname des
gerade installierten @code{guix-daemon}-Programms als
@code{guix_daemon_exec_t} gekennzeichnet würde, statt einen vieles
umfassenden regulären Ausdruck zu benutzen. Aber dann müsste der
Administratornutzer zum Zeitpunkt der Installation jedes Mal die Richtlinie
installieren oder aktualisieren müssen, sobald das Guix-Paket aktualisiert
wird, dass das tatsächlich in Benutzung befindliche
@code{guix-daemon}-Programm enthält.
@end enumerate

@node Aufruf des guix-daemon
@section Aufruf von @command{guix-daemon}

Das Programm @command{guix-daemon} implementiert alle Funktionalitäten, um
auf den Store zuzugreifen. Dazu gehört das Starten von Erstellungsprozessen,
das Ausführen des Müllsammlers, das Abfragen, ob ein Erstellungsergebnis
verfügbar ist, etc. Normalerweise wird er so als Administratornutzer
(@code{root}) gestartet:

@example
# guix-daemon --build-users-group=guixbuild
@end example

@noindent
Details, wie Sie ihn einrichten, finden Sie im Abschnitt @ref{Den Daemon einrichten}.

@cindex chroot
@cindex Container, Erstellungsumgebung
@cindex Erstellungsumgebung
@cindex Reproduzierbare Erstellungen
By default, @command{guix-daemon} launches build processes under different
UIDs, taken from the build group specified with
@option{--build-users-group}.  In addition, each build process is run in a
chroot environment that only contains the subset of the store that the build
process depends on, as specified by its derivation (@pxref{Programmierschnittstelle, derivation}), plus a set of specific system directories.  By
default, the latter contains @file{/dev} and @file{/dev/pts}.  Furthermore,
on GNU/Linux, the build environment is a @dfn{container}: in addition to
having its own file system tree, it has a separate mount name space, its own
PID name space, network name space, etc.  This helps achieve reproducible
builds (@pxref{Funktionalitäten}).

When the daemon performs a build on behalf of the user, it creates a build
directory under @file{/tmp} or under the directory specified by its
@env{TMPDIR} environment variable.  This directory is shared with the
container for the duration of the build, though within the container, the
build tree is always called @file{/tmp/guix-build-@var{name}.drv-0}.

Nach Abschluss der Erstellung wird das Erstellungsverzeichnis automatisch
entfernt, außer wenn die Erstellung fehlgeschlagen ist und der Client
@option{--keep-failed} angegeben hat (siehe @ref{Aufruf von guix build,
@option{--keep-failed}}).

The daemon listens for connections and spawns one sub-process for each
session started by a client (one of the @command{guix} sub-commands).  The
@command{guix processes} command allows you to get an overview of the
activity on your system by viewing each of the active sessions and clients.
@xref{Aufruf von guix processes}, for more information.

Die folgenden Befehlszeilenoptionen werden unterstützt:

@table @code
@item --build-users-group=@var{Gruppe}
Verwende die Benutzerkonten aus der @var{Gruppe}, um Erstellungsprozesse
auszuführen (siehe @ref{Den Daemon einrichten, build users}).

@item --no-substitutes
@cindex Substitute
Benutze keine Substitute für Erstellungsergebnisse. Das heißt, dass alle
Objekte lokal erstellt werden müssen, und kein Herunterladen von vorab
erstellten Binärdateien erlaubt ist (siehe @ref{Substitute}).

When the daemon runs with @option{--no-substitutes}, clients can still
explicitly enable substitution @i{via} the @code{set-build-options} remote
procedure call (@pxref{Der Store}).

@item --substitute-urls=@var{URLs}
@anchor{daemon-substitute-urls}
@var{URLs} als standardmäßige, leerzeichengetrennte Liste der Quell-URLs für
Substitute benutzen. Wenn diese Befehlszeilenoption @emph{nicht} angegeben
wird, wird @indicateurl{https://@value{SUBSTITUTE-SERVER}} verwendet.

Das hat zur Folge, dass Substitute von den @var{URLs} heruntergeladen werden
können, solange sie mit einer Signatur versehen sind, der vertraut wird
(siehe @ref{Substitute}).

@cindex auslagern
@item --no-offload
Nicht versuchen, an andere Maschinen ausgelagerte Erstellungen zu benutzen
(siehe @ref{Auslagern des Daemons einrichten}). Somit wird lokal erstellt, statt
Erstellungen auf entfernte Maschinen auszulagern.

@item --cache-failures
Fehler bei der Erstellung zwischenspeichern. Normalerweise werden nur
erfolgreiche Erstellungen gespeichert.

Wenn diese Befehlszeilenoption benutzt wird, kann @command{guix gc
--list-failures} benutzt werden, um die Menge an Store-Objekten abzufragen,
die als Fehlschläge markiert sind; @command{guix gc --clear-failures}
entfernt Store-Objekte aus der Menge zwischengespeicherter
Fehlschläge. Siehe @ref{Aufruf von guix gc}.

@item --cores=@var{n}
@itemx -c @var{n}
@var{n} CPU-Kerne zum Erstellen jeder Ableitung benutzen; @code{0} heißt, so
viele wie verfügbar sind.

The default value is @code{0}, but it may be overridden by clients, such as
the @option{--cores} option of @command{guix build} (@pxref{Aufruf von guix build}).

The effect is to define the @env{NIX_BUILD_CORES} environment variable in
the build process, which can then use it to exploit internal
parallelism---for instance, by running @code{make -j$NIX_BUILD_CORES}.

@item --max-jobs=@var{n}
@itemx -M @var{n}
Höchstenss @var{n} Erstellungsaufträge parallel bearbeiten. Der Vorgabewert
liegt bei @code{1}. Wird er auf @code{0} gesetzt, werden keine Erstellungen
lokal durchgeführt, stattdessen lagert der Daemon sie nur aus (siehe
@ref{Auslagern des Daemons einrichten}) oder sie schlagen einfach fehl.

@item --max-silent-time=@var{Sekunden}
Wenn der Erstellungs- oder Substitutionsprozess länger als
@var{Sekunden}-lang keine Ausgabe erzeugt, wird er abgebrochen und ein
Fehler beim Erstellen gemeldet.

Der Vorgabewert ist @code{0}, was bedeutet, dass es keine Zeitbeschränkung
gibt.

The value specified here can be overridden by clients (@pxref{Gemeinsame Erstellungsoptionen, @option{--max-silent-time}}).

@item --timeout=@var{Sekunden}
Entsprechend wird hier der Erstellungs- oder Substitutionsprozess
abgebrochen und als Fehlschlag gemeldet, wenn er mehr als
@var{Sekunden}-lang dauert.

Der Vorgabewert ist @code{0}, was bedeutet, dass es keine Zeitbeschränkung
gibt.

The value specified here can be overridden by clients (@pxref{Gemeinsame Erstellungsoptionen, @option{--timeout}}).

@item --rounds=@var{N}
Jede Ableitung @var{n}-mal hintereinander erstellen und einen Fehler melden,
wenn nacheinander ausgewertete Erstellungsergebnisse nicht Bit für Bit
identisch sind. Beachten Sie, dass Clients wie @command{guix build} einen
anderen Wert verwenden lassen können (siehe @ref{Aufruf von guix build}).

Wenn dies zusammen mit @option{--keep-failed} benutzt wird, bleiben die sich
unterscheidenden Ausgaben im Store unter dem Namen
@file{/gnu/store/…-check}. Dadurch können Unterschiede zwischen den beiden
Ergebnissen leicht erkannt werden.

@item --debug
Informationen zur Fehlersuche ausgeben.

This is useful to debug daemon start-up issues, but then it may be
overridden by clients, for example the @option{--verbosity} option of
@command{guix build} (@pxref{Aufruf von guix build}).

@item --chroot-directory=@var{Verzeichnis}
Füge das @var{Verzeichnis} zum chroot von Erstellungen hinzu.

Dadurch kann sich das Ergebnis von Erstellungsprozessen ändern — zum
Beispiel, wenn diese optionale Abhängigkeiten aus dem @var{Verzeichnis}
verwenden, wenn sie verfügbar sind, und nicht, wenn es fehlt. Deshalb ist es
nicht empfohlen, dass Sie diese Befehlszeilenoption verwenden, besser
sollten Sie dafür sorgen, dass jede Ableitung alle von ihr benötigten
Eingabgen deklariert.

@item --disable-chroot
Erstellungen ohne chroot durchführen.

Diese Befehlszeilenoption zu benutzen, wird nicht empfohlen, denn auch
dadurch bekämen Erstellungsprozesse Zugriff auf nicht deklarierte
Abhängigkeiten. Sie ist allerdings unvermeidlich, wenn @command{guix-daemon}
auf einem Benutzerkonto ohne ausreichende Berechtigungen ausgeführt wird.

@item --log-compression=@var{Typ}
Erstellungsprotokolle werden entsprechend dem @var{Typ} komprimiert, der
entweder @code{gzip}, @code{bzip2} oder @code{none} (für keine Kompression)
sein muss.

Unless @option{--lose-logs} is used, all the build logs are kept in the
@var{localstatedir}.  To save space, the daemon automatically compresses
them with Bzip2 by default.

@item --disable-deduplication
@cindex Deduplizieren
Automatische Dateien-„Deduplizierung“ im Store ausschalten.

Standardmäßig werden zum Store hinzugefügte Objekte automatisch
„dedupliziert“: Wenn eine neue Datei mit einer anderen im Store
übereinstimmt, wird die neue Datei stattdessen als harte Verknüpfung auf die
andere Datei angelegt. Dies reduziert den Speicherverbrauch auf der Platte
merklich, jedoch steigt andererseits die Auslastung bei der Ein-/Ausgabe im
Erstellungsprozess geringfügig. Durch diese Option wird keine solche
Optimierung durchgeführt.

@item --gc-keep-outputs[=yes|no]
Gibt an, ob der Müllsammler (Garbage Collector, GC) die Ausgaben lebendiger
Ableitungen behalten muss („yes“) oder nicht („no“).

@cindex GC-Wurzeln
@cindex Müllsammlerwurzeln
When set to @code{yes}, the GC will keep the outputs of any live derivation
available in the store---the @file{.drv} files.  The default is @code{no},
meaning that derivation outputs are kept only if they are reachable from a
GC root.  @xref{Aufruf von guix gc}, for more on GC roots.

@item --gc-keep-derivations[=yes|no]
Gibt an, ob der Müllsammler (GC) Ableitungen behalten muss („yes“), wenn sie
lebendige Ausgaben haben, oder nicht („no“).

When set to @code{yes}, as is the case by default, the GC keeps
derivations---i.e., @file{.drv} files---as long as at least one of their
outputs is live.  This allows users to keep track of the origins of items in
their store.  Setting it to @code{no} saves a bit of disk space.

In this way, setting @option{--gc-keep-derivations} to @code{yes} causes
liveness to flow from outputs to derivations, and setting
@option{--gc-keep-outputs} to @code{yes} causes liveness to flow from
derivations to outputs.  When both are set to @code{yes}, the effect is to
keep all the build prerequisites (the sources, compiler, libraries, and
other build-time tools) of live objects in the store, regardless of whether
these prerequisites are reachable from a GC root.  This is convenient for
developers since it saves rebuilds or downloads.

@item --impersonate-linux-2.6
On Linux-based systems, impersonate Linux 2.6.  This means that the kernel's
@command{uname} system call will report 2.6 as the release number.

Dies kann hilfreich sein, um Programme zu erstellen, die (normalerweise zu
Unrecht) von der Kernel-Versionsnummer abhängen.

@item --lose-logs
Do not keep build logs.  By default they are kept under
@file{@var{localstatedir}/guix/log}.

@item --system=@var{System}
Verwende @var{System} als aktuellen Systemtyp. Standardmäßig ist dies das
Paar aus Befehlssatz und Kernel, welches beim Aufruf von @code{configure}
erkannt wurde, wie zum Beispiel @code{x86_64-linux}.

@item --listen=@var{Endpunkt}
Lausche am @var{Endpunkt} auf Verbindungen. Dabei wird der @var{Endpunkt}
als Dateiname eines Unix-Sockets verstanden, wenn er mit einem @code{/}
(Schrägstrich) beginnt. Andernfalls wird der @var{Endpunkt} als Hostname
(d.h.@: Rechnername) oder als Hostname-Port-Paar verstanden, auf dem
gelauscht wird. Hier sind ein paar Beispiele:

@table @code
@item --listen=/gnu/var/daemon
Lausche auf Verbindungen am Unix-Socket @file{/gnu/var/daemon}, falls nötig
wird er dazu erstellt.

@item --listen=localhost
@cindex Daemon, Fernzugriff
@cindex Fernzugriff auf den Daemon
@cindex Daemon, Einrichten auf Clustern
@cindex Cluster, Einrichtung des Daemons
Lausche auf TCP-Verbindungen an der Netzwerkschnittstelle, die
@code{localhost} entspricht, auf Port 44146.

@item --listen=128.0.0.42:1234
Lausche auf TCP-Verbindungen an der Netzwerkschnittstelle, die
@code{128.0.0.42} entspricht, auf Port 1234.
@end table

This option can be repeated multiple times, in which case
@command{guix-daemon} accepts connections on all the specified endpoints.
Users can tell client commands what endpoint to connect to by setting the
@env{GUIX_DAEMON_SOCKET} environment variable (@pxref{Der Store,
@env{GUIX_DAEMON_SOCKET}}).

@quotation Anmerkung
The daemon protocol is @emph{unauthenticated and unencrypted}.  Using
@option{--listen=@var{host}} is suitable on local networks, such as
clusters, where only trusted nodes may connect to the build daemon.  In
other cases where remote access to the daemon is needed, we recommend using
Unix-domain sockets along with SSH.
@end quotation

When @option{--listen} is omitted, @command{guix-daemon} listens for
connections on the Unix-domain socket located at
@file{@var{localstatedir}/guix/daemon-socket/socket}.
@end table


@node Anwendungen einrichten
@section Anwendungen einrichten

@cindex Fremddistribution
Läuft Guix aufgesetzt auf einer GNU/Linux-Distribution außer Guix System —
einer sogenannten @dfn{Fremddistribution} —, so sind ein paar zusätzliche
Schritte bei der Einrichtung nötig. Hier finden Sie manche davon.

@subsection Locales

@anchor{locales-and-locpath}
@cindex Locales, nicht auf Guix System
@vindex LOCPATH
@vindex GUIX_LOCPATH
Packages installed @i{via} Guix will not use the locale data of the host
system.  Instead, you must first install one of the locale packages
available with Guix and then define the @env{GUIX_LOCPATH} environment
variable:

@example
$ guix install glibc-locales
$ export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale
@end example

Beachten Sie, dass das Paket @code{glibc-locales} Daten für alle von
GNU@tie{}libc unterstützten Locales enthält und deswegen um die 917@tie{}MiB
wiegt. Alternativ gibt es auch @code{glibc-utf8-locales}, was kleiner, aber
auf ein paar UTF-8-Locales beschränkt ist.

The @env{GUIX_LOCPATH} variable plays a role similar to @env{LOCPATH}
(@pxref{Locale Names, @env{LOCPATH},, libc, The GNU C Library Reference
Manual}).  There are two important differences though:

@enumerate
@item
@env{GUIX_LOCPATH} is honored only by the libc in Guix, and not by the libc
provided by foreign distros.  Thus, using @env{GUIX_LOCPATH} allows you to
make sure the programs of the foreign distro will not end up loading
incompatible locale data.

@item
libc suffixes each entry of @env{GUIX_LOCPATH} with @code{/X.Y}, where
@code{X.Y} is the libc version---e.g., @code{2.22}.  This means that, should
your Guix profile contain a mixture of programs linked against different
libc version, each libc version will only try to load locale data in the
right format.
@end enumerate

Das ist wichtig, weil das Locale-Datenformat verschiedener libc-Versionen
inkompatibel sein könnte.

@subsection Name Service Switch

@cindex Name Service Switch, glibc
@cindex NSS (Name Service Switch), glibc
@cindex nscd (Name Service Caching Daemon)
@cindex Name Service Caching Daemon (nscd)
Wenn Sie Guix auf einer Fremddistribution verwenden, @emph{empfehlen wir
stärkstens}, dass Sie den @dfn{Name Service Cache Daemon} der
GNU-C-Bibliothek, @command{nscd}, laufen lassen, welcher auf dem Socket
@file{/var/run/nscd/socket} lauschen sollte. Wenn Sie das nicht tun, könnten
mit Guix installierte Anwendungen Probleme beim Auflösen von Hostnamen
(d.h.@: Rechnernamen) oder Benutzerkonten haben, oder sogar abstürzen. Die
nächsten Absätze erklären warum.

@cindex @file{nsswitch.conf}
Die GNU-C-Bibliothek implementiert einen @dfn{Name Service Switch} (NSS),
welcher einen erweiterbaren Mechanismus zur allgemeinen „Namensauflösung“
darstellt: Hostnamensauflösung, Benutzerkonten und weiteres (siehe @ref{Name Service Switch,,, libc, The GNU C Library Reference Manual}).

@cindex Network Information Service (NIS)
@cindex NIS (Network Information Service)
Für die Erweiterbarkeit unterstützt der NSS @dfn{Plugins}, welche neue
Implementierungen zur Namensauflösung bieten: Zum Beispiel ermöglicht das
Plugin @code{nss-mdns} die Namensauflösung für @code{.local}-Hostnamen, das
Plugin @code{nis} gestattet die Auflösung von Benutzerkonten über den
Network Information Service (NIS) und so weiter. Diese zusätzlichen
„Auflösungsdienste“ werden systemweit konfiguriert in
@file{/etc/nsswitch.conf} und alle auf dem System laufenden Programme halten
sich an diese Einstellungen (siehe @ref{NSS Configuration File,,, libc, The
GNU C Reference Manual}).

Wenn sie eine Namensauflösung durchführen — zum Beispiel, indem sie die
@code{getaddrinfo}-Funktion in C aufrufen — versuchen die Anwendungen als
Erstes, sich mit dem nscd zu verbinden; ist dies erfolgreich, führt nscd für
sie die weiteren Namensauflösungen durch. Falls nscd nicht läuft, führen sie
selbst die Namensauflösungen durch, indem sie die Namensauflösungsdienste in
ihren eigenen Adressraum laden und ausführen. Diese Namensauflösungsdienste
— die @file{libnss_*.so}-Dateien — werden mit @code{dlopen} geladen, aber
sie kommen von der C-Bibliothek des Wirtssystems und nicht von der
C-Bibliothek, an die die Anwendung gebunden wurde (also der C-Bibliothek von
Guix).

Und hier kommt es zum Problem: Wenn die Anwendung an die C-Bibliothek von
Guix (etwa glibc 2.24) gebunden wurde und die NSS-Plugins von einer anderen
C-Bibliothek (etwa @code{libnss_mdns.so} für glibc 2.22) zu laden versucht,
wird sie vermutlich abstürzen oder die Namensauflösungen werden unerwartet
fehlschlagen.

Durch das Ausführen von @command{nscd} auf dem System wird, neben anderen
Vorteilen, dieses Problem der binären Inkompatibilität vermieden, weil diese
@code{libnss_*.so}-Dateien vom @command{nscd}-Prozess geladen werden, nicht
in den Anwendungen selbst.

@subsection X11-Schriftarten

@cindex Schriftarten
The majority of graphical applications use Fontconfig to locate and load
fonts and perform X11-client-side rendering.  The @code{fontconfig} package
in Guix looks for fonts in @file{$HOME/.guix-profile} by default.  Thus, to
allow graphical applications installed with Guix to display fonts, you have
to install fonts with Guix as well.  Essential font packages include
@code{gs-fonts}, @code{font-dejavu}, and @code{font-gnu-freefont}.

@cindex @code{fc-cache}
@cindex Font-Cache
Sobald Sie Schriftarten installiert oder wieder entfernt haben oder wenn
Ihnen auffällt, dass eine Anwendung Schriftarten nicht finden kann, dann
müssen Sie vielleicht Fontconfig installieren und den folgenden Befehl
ausführen, damit dessen Zwischenspeicher für Schriftarten aktualisiert wird:

@example
guix install fontconfig
fc-cache -rv
@end example

Um auf Chinesisch, Japanisch oder Koreanisch verfassten Text in grafischen
Anwendungen anzeigen zu können, möchten Sie vielleicht
@code{font-adobe-source-han-sans} oder @code{font-wqy-zenhei}
installieren. Ersteres hat mehrere Ausgaben, für jede Sprachfamilie eine
(siehe @ref{Pakete mit mehreren Ausgaben.}). Zum Beispiel installiert
folgender Befehl Schriftarten für chinesische Sprachen:

@example
guix install font-adobe-source-han-sans:cn
@end example

@cindex @code{xterm}
Ältere Programme wie @command{xterm} benutzen kein Fontconfig, sondern
X-Server-seitige Schriftartendarstellung. Solche Programme setzen voraus,
dass der volle Name einer Schriftart mit XLFD (X Logical Font Description)
angegeben wird, z.B.@: so:

@example
-*-dejavu sans-medium-r-normal-*-*-100-*-*-*-*-*-1
@end example

Um solche vollen Namen für die in Ihrem Guix-Profil installierten
TrueType-Schriftarten zu verwenden, müssen Sie den Pfad für Schriftarten
(Font Path) des X-Servers anpassen:

@c Note: 'xset' does not accept symlinks so the trick below arranges to
@c get at the real directory.  See <https://bugs.gnu.org/30655>.
@example
xset +fp $(dirname $(readlink -f ~/.guix-profile/share/fonts/truetype/fonts.dir))
@end example

@cindex @code{xlsfonts}
Danach können Sie den Befehl @code{xlsfonts} ausführen (aus dem Paket
@code{xlsfonts}), um sicherzustellen, dass dort Ihre TrueType-Schriftarten
aufgeführt sind.


@subsection X.509-Zertifikate

@cindex @code{nss-certs}
Das Paket @code{nss-certs} bietet X.509-Zertifikate, womit Programme die
Identität von Web-Servern authentifizieren können, auf die über HTTPS
zugegriffen wird.

Wenn Sie Guix auf einer Fremddistribution verwenden, können Sie dieses Paket
installieren und die relevanten Umgebungsvariablen festlegen, damit Pakete
wissen, wo sie Zertifikate finden. Unter @ref{X.509-Zertifikate} stehen
genaue Informationen.

@subsection Emacs-Pakete

@cindex @code{emacs}
When you install Emacs packages with Guix, the Elisp files are placed under
the @file{share/emacs/site-lisp/} directory of the profile in which they are
installed.  The Elisp libraries are made available to Emacs through the
@env{EMACSLOADPATH} environment variable, which is set when installing Emacs
itself.

Additionally, autoload definitions are automatically evaluated at the
initialization of Emacs, by the Guix-specific
@code{guix-emacs-autoload-packages} procedure.  If, for some reason, you
want to avoid auto-loading the Emacs packages installed with Guix, you can
do so by running Emacs with the @option{--no-site-file} option (@pxref{Init
File,,, emacs, The GNU Emacs Manual}).


@node Aktualisieren von Guix
@section Aktualisieren von Guix

@cindex Aktualisieren von Guix, auf einer Fremddistribution

Um Guix zu aktualisieren, führen Sie aus:

@example
guix pull
@end example

Siehe @ref{Aufruf von guix pull} für weitere Informationen.

@cindex Aktualisieren von Guix für den root-Administratornutzer, auf einer Fremddistribution
@cindex Aktualisieren des Guix-Daemon, auf einer Fremddistribution
@cindex @command{guix pull} für den root-Administratornutzer, auf einer Fremddistribution

Auf einer Fremddistribution können Sie den Erstellungsdaemon aktualisieren,
indem Sie diesen Befehl:

@example
sudo -i guix pull
@end example

@noindent
gefolgt von diesem  ausführen (unter der Annahme, dass Ihre Distribution zur
Dienstverwaltung das systemd-Werkzeug benutzt):

@example
systemctl restart guix-daemon.service
@end example

Auf Guix System wird der Daemon aktualisiert, indem Sie das System
rekonfigurieren (siehe @ref{Aufruf von guix system, @code{guix system
reconfigure}}).

@c TODO What else?

@c *********************************************************************
@node Systeminstallation
@chapter Systeminstallation

@cindex Installieren von Guix System
@cindex Guix System, Installation
Dieser Abschnitt beschreibt, wie Sie „Guix System“ auf einer Maschine
installieren. Guix kann auch als Paketverwaltungswerkzeug ein bestehendes
GNU/Linux-System ergänzen, mehr dazu finden Sie im Abschnitt
@ref{Installation}.

@ifinfo
@quotation Anmerkung
@c This paragraph is for people reading this from tty2 of the
@c installation image.
Sie lesen diese Dokumentation mit einem Info-Betrachter. Details, wie Sie
ihn bedienen, erfahren Sie, indem Sie die Eingabetaste (auch „Return“ oder
„Enter“ genannt) auf folgender Verknüpfung drücken: @ref{Top, Info reader,,
info-stnd, Stand-alone GNU Info}. Drücken Sie danach @kbd{l}, um hierher
zurückzukommen.

Alternatively, run @command{info info} in another tty to keep the manual
available.
@end quotation
@end ifinfo

@menu
* Einschränkungen::         Was Sie erwarten dürfen.
* Hardware-Überlegungen::   Unterstützte Hardware.
* Installation von USB-Stick oder DVD::  Das Installationsmedium 
                                           vorbereiten.
* Vor der Installation::     Netzwerkanbindung, Partitionierung etc.
* Geführte grafische Installation::  Leichte grafische Installation.
* Manuelle Installation::    Manuelle Installation für Zauberer.
* Nach der Systeminstallation::  Wenn die Installation erfolgreich war.
* Guix in einer VM installieren::  Ein „Guix System“-Spielplatz.
* Ein Abbild zur Installation erstellen::  Wie ein solches entsteht.
@end menu

@node Einschränkungen
@section Einschränkungen

Wir denken, dass Guix System für viele Anwendungszwecke von Heim- und
Bürorechnern bis hin zu Servern geeignet ist. Die Verlässlichkeitsgarantien,
die es einem bietet — transaktionelle Aktualisierungen und Rücksetzungen,
Reproduzierbarkeit — machen es zu einer soliden Grundlage.

Bevor Sie mit der Installation fortfahren, sollten Sie dennoch die folgenden
merklichen Einschränkungen der Version @value{VERSION} beachten:

@itemize
@item
Der Logical Volume Manager (LVM) wird nicht unterstützt.

@item
Immer mehr Systemdienste sind verfügbar (siehe @ref{Dienste}), aber manche
könnten noch fehlen.

@item
GNOME, Xfce, LXDE und Enlightenment stehen zur Verfügung (siehe @ref{Desktop-Dienste}), ebenso eine Reihe von X11-Fensterverwaltungsprogrammen,
allerdings fehlt KDE zur Zeit noch.
@end itemize

Dies soll allerdings nicht nur ein Hinweis sein, sondern auch als Einladung
aufgefasst werden, uns Fehler (und Erfolgsgeschichten!) zu melden und bei
uns mitzumachen, um Guix zu verbessern. Siehe den Abschnitt
@ref{Mitwirken}.


@node Hardware-Überlegungen
@section Hardware-Überlegungen

@cindex Hardwareunterstützung von Guix System
GNU@tie{}Guix legt den Fokus darauf, die Freiheit des Nutzers auf seinem
Rechner zu respektieren. Es baut auf Linux-libre als Kernel auf, wodurch nur
Hardware unterstützt wird, für die Treiber und Firmware existieren, die
freie Software sind. Heutzutage wird ein großer Teil der handelsüblichen
Hardware von GNU/Linux-libre unterstützt — von Tastaturen bis hin zu
Grafikkarten, Scannern und Ethernet-Adaptern. Leider gibt es noch Bereiche,
wo die Hardwareanbieter ihren Nutzern die Kontrolle über ihren eigenen
Rechner verweigern. Solche Hardware wird von Guix System nicht unterstützt.

@cindex WLAN, Hardware-Unterstützung
Einer der wichtigsten Bereiche, wo es an freien Treibern und freier Firmware
mangelt, sind WLAN-Geräte. WLAN-Geräte, von denen wir wissen, dass sie
funktionieren, sind unter anderem solche, die die Atheros-Chips AR9271 und
AR7010 verbauen, welche der Linux-libre-Treiber @code{ath9k} unterstützt,
und die, die Broadcom/AirForce-Chips BCM43xx (mit Wireless-Core Revision 5)
verbauen, welche der Linux-libre-Treiber @code{b43-open} unterstützt. Freie
Firmware gibt es für beide und sie wird von Haus aus mit Guix System als ein
Teil von @code{%base-firmware} mitgeliefert (siehe @ref{„operating-system“-Referenz, @code{firmware}}).

@cindex RYF, Respects Your Freedom
Die @uref{https://www.fsf.org/, Free Software Foundation} betreibt
@uref{https://www.fsf.org/ryf, @dfn{Respects Your Freedom}} (RYF), ein
Zertifizierungsprogramm für Hardware-Produkte, die Ihre Freiheit
respektieren, Datenschutz gewährleisten und sicherstellen, dass Sie die
Kontrolle über Ihr Gerät haben. Wir ermutigen Sie dazu, die Liste
RYF-zertifizierter Geräte zu beachten.

Eine weitere nützliche Ressource ist die Website
@uref{https://h-node.org/home/index/de, H-Node}. Dort steht ein Katalog von
Hardware-Geräten mit Informationen darüber, wie gut sie von GNU/Linux
unterstützt werden.


@node Installation von USB-Stick oder DVD
@section Installation von USB-Stick oder DVD

An ISO-9660 installation image that can be written to a USB stick or burnt
to a DVD can be downloaded from
@indicateurl{@value{BASE-URL}/guix-system-install-@value{VERSION}.x86_64-linux.iso.xz},
where you can replace @code{x86_64-linux} with one of:

@table @code
@item x86_64-linux
für ein GNU/Linux-System auf Intel/AMD-kompatiblen 64-Bit-Prozessoren,

@item i686-linux
für ein 32-Bit-GNU/Linux-System auf Intel-kompatiblen Prozessoren.
@end table

@c start duplication of authentication part from ``Binary Installation''
Laden Sie auch die entsprechende @file{.sig}-Datei herunter und verifizieren
Sie damit die Authentizität Ihres Abbilds, indem Sie diese Befehle eingeben:

@example
$ wget @value{BASE-URL}/guix-system-install-@value{VERSION}.x86_64-linux.iso.xz.sig
$ gpg --verify guix-system-install-@value{VERSION}.x86_64-linux.iso.xz.sig
@end example

Falls dieser Befehl fehlschlägt, weil Sie nicht über den nötigen
öffentlichen Schlüssel verfügen, können Sie ihn mit diesem Befehl
importieren:

@example
$ wget @value{OPENPGP-SIGNING-KEY-URL} \
      -qO - | gpg --import -
@end example

@noindent
und den Befehl @code{gpg --verify} erneut ausführen.

Beachten Sie, dass eine Warnung wie „Dieser Schlüssel trägt keine
vertrauenswürdige Signatur!“ normal ist.

@c end duplication

Dieses Abbild enthält die Werkzeuge, die Sie zur Installation brauchen. Es
ist dafür gedacht,  @emph{so wie es ist} auf einen hinreichend großen
USB-Stick oder eine DVD kopiert zu werden.

@unnumberedsubsec Kopieren auf einen USB-Stick

Um das Abbild auf einen USB-Stick zu kopieren, führen Sie folgende Schritte
durch:

@enumerate
@item
Entpacken Sie das Abbild mit dem @command{xz}-Befehl:

@example
xz -d guix-system-install-@value{VERSION}.x86_64-linux.iso.xz
@end example

@item
Stecken Sie einen USB-Stick in Ihren Rechner ein, der mindestens 1@tie{}GiB
groß ist, und bestimmen Sie seinen Gerätenamen. Ist der Gerätename des
USB-Sticks @file{/dev/sdX}, dann kopieren Sie das Abbild mit dem Befehl:

@example
dd if=guix-system-install-@value{VERSION}.x86_64-linux.iso of=/dev/sdX
sync
@end example

Sie benötigen in der Regel Administratorrechte, um auf @file{/dev/sdX}
zuzugreifen.
@end enumerate

@unnumberedsubsec Auf eine DVD brennen

Um das Abbild auf eine DVD zu kopieren, führen Sie diese Schritte durch:

@enumerate
@item
Entpacken Sie das Abbild mit dem @command{xz}-Befehl:

@example
xz -d guix-system-install-@value{VERSION}.x86_64-linux.iso.xz
@end example

@item
Legen Sie eine unbespielte DVD in Ihren Rechner ein und bestimmen Sie ihren
Gerätenamen. Angenommen der Name des DVD-Laufwerks ist @file{/dev/srX},
kopieren Sie das Abbild mit:

@example
growisofs -dvd-compat -Z /dev/srX=guix-system-install-@value{VERSION}.x86_64-linux.iso
@end example

Der Zugriff auf @file{/dev/srX} setzt in der Regel Administratorrechte
voraus.
@end enumerate

@unnumberedsubsec Das System starten

Sobald das erledigt ist, sollten Sie Ihr System neu starten und es vom
USB-Stick oder der DVD hochfahren („booten“) können. Dazu müssen Sie
wahrscheinlich beim Starten des Rechners in das BIOS- oder UEFI-Boot-Menü
gehen, von wo aus Sie auswählen können, dass vom USB-Stick gebootet werden
soll. Um aus Libreboot heraus zu booten, wechseln Sie in den Befehlsmodus,
indem Sie die @kbd{c}-Taste drücken, und geben Sie @command{search_grub usb}
ein.

Lesen Sie den Abschnitt @ref{Guix in einer VM installieren}, wenn Sie Guix System
stattdessen in einer virtuellen Maschine (VM) installieren möchten.


@node Vor der Installation
@section Vor der Installation

Once you have booted, you can use the guided graphical installer, which
makes it easy to get started (@pxref{Geführte grafische Installation}).
Alternatively, if you are already familiar with GNU/Linux and if you want
more control than what the graphical installer provides, you can choose the
``manual'' installation process (@pxref{Manuelle Installation}).

Das grafische Installationsprogramm steht Ihnen auf TTY1 zur Verfügung. Auf
den TTYs 3 bis 6 können Sie vor sich eine Eingabeaufforderung für den
Administratornutzer „root“ sehen, nachdem Sie @kbd{strg-alt-f3},
@kbd{strg-alt-f4} usw.@: gedrückt haben. TTY2 zeigt Ihnen dieses Handbuch,
das Sie über die Tastenkombination @kbd{strg-alt-f2} erreichen. In dieser
Dokumentation können Sie mit den Steuerungsbefehlen Ihres Info-Betrachters
blättern (siehe @ref{Top,,, info-stnd, Stand-alone GNU Info}). Auf dem
Installationssystem läuft der GPM-Maus-Daemon, wodurch Sie Text mit der
linken Maustaste markieren und ihn mit der mittleren Maustaste einfügen
können.

@quotation Anmerkung
Für die Installation benötigen Sie Zugang zum Internet, damit fehlende
Abhängigkeiten Ihrer Systemkonfiguration heruntergeladen werden können. Im
Abschnitt „Netzwerkkonfiguration“ weiter unten finden Sie mehr Informationen
dazu.
@end quotation

@node Geführte grafische Installation
@section Geführte grafische Installation

Das grafische Installationsprogramm ist mit einer textbasierten
Benutzeroberfläche ausgestattet. Es kann Sie mit Dialogfeldern durch die
Schritte führen, mit denen Sie GNU@tie{}Guix System installieren.

Die ersten Dialogfelder ermöglichen es Ihnen, das System aufzusetzen, wie
Sie es bei der Installation benutzen: Sie können die Sprache und
Tastaturbelegung festlegen und die Netzwerkanbindung einrichten, die während
der Installation benutzt wird. Das folgende Bild zeigt den Dialog zur
Einrichtung der Netzwerkanbindung.

@image{images/installer-network,5in,, Netzwerkanbindung einrichten mit dem
grafischen Installationsprogramm}

Mit den danach kommenden Schritten können Sie Ihre Festplatte
partitionieren, wie im folgenden Bild gezeigt, und auswählen, ob Ihre
Dateisysteme verschlüsselt werden sollen oder nicht. Sie können Ihren
Rechnernamen und das Administratorpasswort (das „root“-Passwort) festlegen
und ein Benutzerkonto einrichten, und noch mehr.

@image{images/installer-partitions,5in,, Partitionieren mit dem grafischen
Installationsprogramm}

Beachten Sie, dass Sie mit dem Installationsprogramm jederzeit den aktuellen
Installationsschritt verlassen und zu einem vorherigen Schritt zurückkehren
können, wie Sie im folgenden Bild sehen können.

@image{images/installer-resume,5in,, Mit einem Installationsschritt
fortfahren}

Sobald Sie fertig sind, erzeugt das Installationsprogramm eine
Betriebssystemkonfiguration und zeigt sie an (siehe @ref{Das Konfigurationssystem nutzen}). Zu diesem Zeitpunkt können Sie auf „OK“ drücken und
die Installation wird losgehen. Ist sie erfolgreich, können Sie neu starten
und Ihr neues System genießen. Siehe @ref{Nach der Systeminstallation} für
Informationen, wie es weitergeht!


@node Manuelle Installation
@section Manuelle Installation

Dieser Abschnitt beschreibt, wie Sie GNU@tie{}Guix System auf manuelle Weise
auf Ihrer Maschine installieren. Diese Alternative setzt voraus, dass Sie
bereits mit GNU/Linux, der Shell und üblichen Administrationswerkzeugen
vertraut sind. Wenn Sie glauben, dass das nichts für Sie ist, dann möchten
Sie vielleicht das geführte grafische Installationsprogramm benutzen (siehe
@ref{Geführte grafische Installation}).

Das Installationssystem macht Eingabeaufforderungen auf den TTYs 3 bis 6
zugänglich, auf denen Sie als Administratornutzer Befehle eingeben können;
Sie erreichen diese, indem Sie die Tastenkombinationen @kbd{strg-alt-f3},
@kbd{strg-alt-f4} und so weiter benutzen. Es enthält viele übliche
Werkzeuge, mit denen Sie diese Aufgabe bewältigen können. Da es sich auch um
ein vollständiges „Guix System“-System handelt, können Sie aber auch andere
Pakete mit dem Befehl @command{guix package} nachinstallieren, wenn Sie sie
brauchen (siehe @ref{Aufruf von guix package}).

@menu
* Tastaturbelegung und Netzwerkanbindung und Partitionierung::  Erstes 
                                                                  Einrichten.
* Fortfahren mit der Installation::  Installieren.
@end menu

@node Tastaturbelegung und Netzwerkanbindung und Partitionierung
@subsection Tastaturbelegung, Netzwerkanbindung und Partitionierung

Bevor Sie das System installieren können, wollen Sie vielleicht die
Tastaturbelegung ändern, eine Netzwerkverbindung herstellen und die
Zielfestplatte partitionieren. Dieser Abschnitt wird Sie durch diese
Schritte führen.

@subsubsection Tastaturbelegung

@cindex Tastaturbelegung
Das Installationsabbild verwendet die US-amerikanische
QWERTY-Tastaturbelegung. Wenn Sie dies ändern möchten, können Sie den
@command{loadkeys}-Befehl benutzen. Mit folgendem Befehl würden Sie zum
Beispiel die Dvorak-Tastaturbelegung auswählen:

@example
loadkeys dvorak
@end example

Schauen Sie sich an, welche Dateien im Verzeichnis
@file{/run/current-system/profile/share/keymaps} stehen, um eine Liste
verfügbarer Tastaturbelegungen zu sehen. Wenn Sie mehr Informationen
brauchen, führen Sie @command{man loadkeys} aus.

@subsubsection Netzwerkkonfiguration

Führen Sie folgenden Befehl aus, um zu sehen, wie Ihre
Netzwerkschnittstellen benannt sind:

@example
ifconfig -a
@end example

@noindent
…@: oder mit dem GNU/Linux-eigenen @command{ip}-Befehl:

@example
ip address
@end example

@c https://cgit.freedesktop.org/systemd/systemd/tree/src/udev/udev-builtin-net_id.c#n20
Der Name kabelgebundener Schnittstellen (engl. Interfaces) beginnt mit dem
Buchstaben @samp{e}, zum Beispiel heißt die dem ersten fest eingebauten
Ethernet-Adapter entsprechende Schnittstelle @samp{eno1}. Drahtlose
Schnittstellen werden mit einem Namen bezeichnet, der mit dem Buchstaben
@samp{w} beginnt, etwa @samp{w1p2s0}.

@table @asis
@item Kabelverbindung
Um ein kabelgebundenes Netzwerk einzurichten, führen Sie den folgenden
Befehl aus, wobei Sie statt @var{Schnittstelle} den Namen der
kabelgebundenen Schnittstelle eintippen, die Sie benutzen möchten.

@example
ifconfig @var{Schnittstelle} up
@end example

@noindent
…@: oder mit dem GNU/Linux-eigenen @command{ip}-Befehl:

@example
ip link set @var{Schnittstelle} up
@end example

@item Drahtlose Verbindung
@cindex WLAN
@cindex WiFi
Um Drahtlosnetzwerke einzurichten, können Sie eine Konfigurationsdatei für
das Konfigurationswerkzeug des @command{wpa_supplicant} schreiben (wo Sie
sie speichern, ist nicht wichtig), indem Sie eines der verfügbaren
Textbearbeitungsprogramme wie etwa @command{nano} benutzen:

@example
nano wpa_supplicant.conf
@end example

Zum Beispiel können Sie die folgende Formulierung in der Datei speichern,
die für viele Drahtlosnetzwerke funktioniert, sofern Sie die richtige SSID
und Passphrase für das Netzwerk eingeben, mit dem Sie sich verbinden
möchten:

@example
network=@{
  ssid="@var{meine-ssid}"
  key_mgmt=WPA-PSK
  psk="geheime Passphrase des Netzwerks"
@}
@end example

Starten Sie den Dienst für Drahtlosnetzwerke und lassen Sie ihn im
Hintergrund laufen, indem Sie folgenden Befehl eintippen (ersetzen Sie dabei
@var{Schnittstelle} durch den Namen der Netzwerkschnittstelle, die Sie
benutzen möchten):

@example
wpa_supplicant -c wpa_supplicant.conf -i @var{Schnittstelle} -B
@end example

Führen Sie @command{man wpa_supplicant} aus, um mehr Informationen zu
erhalten.
@end table

@cindex DHCP
Zu diesem Zeitpunkt müssen Sie sich eine IP-Adresse beschaffen. Auf einem
Netzwerk, wo IP-Adressen automatisch @i{via} DHCP zugewiesen werden, können
Sie das hier ausführen:

@example
dhclient -v @var{Schnittstelle}
@end example

Versuchen Sie, einen Server zu pingen, um zu prüfen, ob sie mit dem Internet
verbunden sind und alles richtig funktioniert:

@example
ping -c 3 gnu.org
@end example

Einen Internetzugang herzustellen, ist in jedem Fall nötig, weil das Abbild
nicht alle Software und Werkzeuge enthält, die nötig sein könnten.

@cindex Proxy, bei der Systeminstallation
Wenn HTTP- und HTTPS-Zugriffe bei Ihnen über einen Proxy laufen sollen,
führen Sie folgenden Befehl aus:

@example
herd set-http-proxy guix-daemon @var{URL}
@end example

@noindent
Dabei ist @var{URL} die URL des Proxys, zum Beispiel
@code{http://example.org:8118}.

@cindex Über SSH installieren
Wenn Sie möchten, können Sie die weitere Installation auch per Fernwartung
durchführen, indem Sie einen SSH-Server starten:

@example
herd start ssh-daemon
@end example

Vergewissern Sie sich vorher, dass Sie entweder ein Passwort mit
@command{passwd} festgelegt haben, oder dass Sie für OpenSSH eine
Authentifizierung über öffentliche Schlüssel eingerichtet haben, bevor Sie
sich anmelden.

@subsubsection Plattenpartitionierung

Sofern nicht bereits geschehen, ist der nächste Schritt, zu partitionieren
und dann die Zielpartition zu formatieren.

Auf dem Installationsabbild sind mehrere Partitionierungswerkzeuge zu
finden, einschließlich (siehe @ref{Overview,,, parted, GNU Parted User
Manual}), @command{fdisk} und @command{cfdisk}. Starten Sie eines davon und
partitionieren Sie Ihre Festplatte oder sonstigen Massenspeicher, wie Sie
möchten:

@example
cfdisk
@end example

Wenn Ihre Platte mit einer „GUID Partition Table“ (GPT) formatiert ist, und
Sie vorhaben, die BIOS-basierte Variante des GRUB-Bootloaders  zu
installieren (was der Vorgabe entspricht), stellen Sie sicher, dass eine
Partition als BIOS-Boot-Partition ausgewiesen ist (siehe @ref{BIOS
installation,,, grub, GNU GRUB manual}).

@cindex EFI, Installation
@cindex UEFI, Installation
@cindex ESP, EFI-Systempartition
Falls Sie stattdessen einen EFI-basierten GRUB installieren möchten, muss
auf der Platte eine FAT32-formatierte @dfn{EFI-Systempartition} (ESP)
vorhanden sein. Diese Partition kann unter dem Pfad @file{/boot/efi}
eingebunden („gemountet“) werden und die @code{esp}-Flag der Partition muss
gesetzt sein. Dazu würden Sie beispielsweise in @command{parted} eintippen:

@example
parted /dev/sda set 1 esp on
@end example

@quotation Anmerkung
@vindex grub-bootloader
@vindex grub-efi-bootloader
Falls Sie nicht wissen, ob Sie einen EFI- oder BIOS-basierten GRUB
installieren möchten: Wenn bei Ihnen das Verzeichnis
@file{/sys/firmware/efi} im Dateisystem existiert, möchten Sie vermutlich
eine EFI-Installation durchführen, wozu Sie in Ihrer Konfiguration
@code{grub-efi-bootloader} benutzen. Ansonsten sollten Sie den
BIOS-basierten GRUB benutzen, der mit @code{grub-bootloader} bezeichnet
wird.  Siehe @ref{Bootloader-Konfiguration}, wenn Sie mehr Informationen
über Bootloader brauchen.
@end quotation

Sobald Sie die Platte fertig partitioniert haben, auf die Sie installieren
möchten, müssen Sie ein Dateisystem auf Ihrer oder Ihren für Guix System
vorgesehenen Partition(en) erzeugen@footnote{Derzeit unterstützt Guix System
nur die Dateisystemtypen ext4, btrfs und JFS. Insbesondere funktioniert
Guix-Code, der Dateisystem-UUIDs und -Labels ausliest, nur auf diesen
Dateisystemtypen.}. Wenn Sie eine ESP brauchen und dafür die Partition
@file{/dev/sda1} vorgesehen haben, müssen Sie diesen Befehl ausführen:

@example
mkfs.fat -F32 /dev/sda1
@end example

Geben Sie Ihren Dateisystemen auch besser eine Bezeichnung („Label“), damit
Sie sie zuverlässig wiedererkennen und später in den
@code{file-system}-Deklarationen darauf Bezug nehmen können (siehe @ref{Dateisysteme}). Dazu benutzen Sie typischerweise die Befehlszeilenoption
@code{-L} des Befehls @command{mkfs.ext4} oder entsprechende Optionen für
andere Befehle. Wenn wir also annehmen, dass @file{/dev/sda2} die Partition
ist, auf der Ihr Wurzeldateisystem (englisch „root“) wohnen soll, können Sie
dort mit diesem Befehl ein Dateisystem mit der Bezeichnung @code{my-root}
erstellen:

@example
mkfs.ext4 -L my-root /dev/sda2
@end example

@cindex verschlüsselte Partition
If you are instead planning to encrypt the root partition, you can use the
Cryptsetup/LUKS utilities to do that (see @inlinefmtifelse{html,
@uref{https://linux.die.net/man/8/cryptsetup, @code{man cryptsetup}},
@code{man cryptsetup}} for more information).  Assuming you want to store
the root partition on @file{/dev/sda2}, the command sequence would be along
these lines:

@example
cryptsetup luksFormat /dev/sda2
cryptsetup open --type luks /dev/sda2 my-partition
mkfs.ext4 -L my-root /dev/mapper/my-partition
@end example

Sobald das erledigt ist, binden Sie dieses Dateisystem als Installationsziel
mit dem Einhängepunkt @file{/mnt} ein, wozu Sie einen Befehl wie hier
eintippen (auch hier unter der Annahme, dass @code{my-root} die Bezeichnung
des künftigen Wurzeldateisystems ist):

@example
mount LABEL=my-root /mnt
@end example

Binden Sie auch alle anderen Dateisysteme ein, die Sie auf dem Zielsystem
benutzen möchten, mit Einhängepunkten relativ zu diesem Pfad. Wenn Sie sich
zum Beispiel für einen Einhängepunkt @file{/boot/efi} für die
EFI-Systempartition entschieden haben, binden Sie sie jetzt als
@file{/mnt/boot/efi} ein, damit @code{guix system init} sie später findet.

Wenn Sie zudem auch vorhaben, eine oder mehrere Swap-Partitionen zu benutzen
(siehe @ref{Memory Concepts, swap space,, libc, The GNU C Library Reference
Manual}), initialisieren Sie diese nun mit @command{mkswap}. Angenommen Sie
haben eine Swap-Partition auf @file{/dev/sda3}, dann würde der Befehl so
lauten:

@example
mkswap /dev/sda3
swapon /dev/sda3
@end example

Alternativ können Sie eine Swap-Datei benutzen. Angenommen, Sie wollten die
Datei @file{/swapdatei} im neuen System als eine Swapdatei benutzen, dann
müssten Sie Folgendes ausführen@footnote{Dieses Beispiel wird auf vielen
Arten von Dateisystemen funktionieren (z.B.@: auf ext4). Auf Dateisystemen
mit Copy-on-Write (wie z.B.@: btrfs) können sich die nötigen Schritte
unterscheiden. Details finden Sie in der Dokumentation auf den
Handbuchseiten von @command{mkswap} und @command{swapon}.}:

@example
# Das bedeutet 10 GiB Swapspeicher. "count" anpassen zum ändern.
dd if=/dev/zero of=/mnt/swapfile bs=1MiB count=10240
# Zur Sicherheit darf nur der Administrator lesen und schreiben.
chmod 600 /mnt/swapfile
mkswap /mnt/swapfile
swapon /mnt/swapfile
@end example

Bedenken Sie, dass, wenn Sie die Partition für das Wurzeldateisystem
(„root“) verschlüsselt und eine Swap-Datei in diesem Dateisystem wie oben
beschrieben erstellt haben, die Verschlüsselung auch die Swap-Datei schützt,
genau wie jede andere Datei in dem Dateisystem.

@node Fortfahren mit der Installation
@subsection Fortfahren mit der Installation

Wenn die Partitionen des Installationsziels bereit sind und dessen
Wurzeldateisystem unter @file{/mnt} eingebunden wurde, kann es losgehen mit
der Installation. Führen Sie zuerst aus:

@example
herd start cow-store /mnt
@end example

Dadurch wird @file{/gnu/store} copy-on-write, d.h.@: dorthin von Guix
erstellte Pakete werden in ihrer Installationsphase auf dem unter
@file{/mnt} befindlichen Zieldateisystem gespeichert, statt den
Arbeitsspeicher auszulasten. Das ist nötig, weil die erste Phase des Befehls
@command{guix system init} (siehe unten) viele Dateien nach
@file{/gnu/store} herunterlädt oder sie erstellt, Änderungen am
@file{/gnu/store} aber bis dahin wie das übrige Installationssystem nur im
Arbeitsspeicher gelagert werden konnten.

Als Nächstes müssen Sie eine Datei bearbeiten und dort eine Deklaration des
Betriebssystems, das Sie installieren möchten, hineinschreiben. Zu diesem
Zweck sind im Installationssystem drei Texteditoren enthalten. Wir
empfehlen, dass Sie GNU nano benutzen (siehe @ref{Top,,, nano, GNU nano
Manual}), welcher Syntax und zueinander gehörende Klammern hervorheben
kann. Andere mitgelieferte Texteditoren, die Sie benutzen können, sind GNU
Zile (ein Emacs-Klon) und nvi (ein Klon des ursprünglichen
@command{vi}-Editors von BSD). Wir empfehlen sehr, dass Sie diese Datei im
Zieldateisystem der Installation speichern, etwa als
@file{/mnt/etc/config.scm}, weil Sie Ihre Konfigurationsdatei im frisch
installierten System noch brauchen werden.

Der Abschnitt @ref{Das Konfigurationssystem nutzen} gibt einen Überblick über
die Konfigurationsdatei. Die in dem Abschnitt diskutierten
Beispielkonfigurationen sind im Installationsabbild im Verzeichnis
@file{/etc/configuration} zu finden. Um also mit einer Systemkonfiguration
anzufangen, die einen grafischen Anzeigeserver (einen „Display-Server“ zum
Darstellen einer „Desktop“-Arbeitsumgebung) bietet, könnten Sie so etwas
ausführen:

@example
# mkdir /mnt/etc
# cp /etc/configuration/desktop.scm /mnt/etc/config.scm
# nano /mnt/etc/config.scm
@end example

Achten Sie darauf, was in Ihrer Konfigurationsdatei steht, und besonders auf
Folgendes:

@itemize
@item
Ihre @code{bootloader-configuration}-Form muss sich auf dasjenige Ziel
beziehen, auf das Sie GRUB installieren möchten. Sie sollte genau dann
@code{grub-bootloader} nennen, wenn Sie GRUB im alten BIOS-Modus
installieren, und für neuere UEFI-Systeme sollten Sie
@code{grub-efi-bootloader} nennen. Bei Altsystemen bezeichnet das
@code{target}-Feld ein Gerät wie @code{/dev/sda}, bei UEFI-Systemen
bezeichnet es den Pfad zu einer eingebundenen EFI-Partition wie
@code{/boot/efi}; stellen Sie sicher, dass die ESP tatsächlich dort
eingebunden ist und ein @code{file-system}-Eintrag dafür in Ihrer
Konfiguration festgelegt wurde.

@item
Dateisystembezeichnungen müssen mit den jeweiligen @code{device}-Feldern in
Ihrer @code{file-system}-Konfiguration übereinstimmen, sofern Sie in Ihrer
@code{file-system}-Konfiguration die Prozedur @code{file-system-label} für
ihre @code{device}-Felder benutzen.

@item
Gibt es verschlüsselte Partitionen oder RAID-Partitionen, dann müssen sie im
@code{mapped-devices}-Feld genannt werden (siehe @ref{Zugeordnete Geräte}).
@end itemize

Wenn Sie damit fertig sind, Ihre Konfigurationsdatei vorzubereiten, können
Sie das neue System initialisieren (denken Sie daran, dass zukünftige
Wurzeldateisystem muss unter @file{/mnt} wie bereits beschrieben eingebunden
sein):

@example
guix system init /mnt/etc/config.scm /mnt
@end example

@noindent
Dies kopiert alle notwendigen Dateien und installiert GRUB auf
@file{/dev/sdX}, sofern Sie nicht noch die Befehlszeilenoption
@option{--no-bootloader} benutzen. Weitere Informationen finden Sie im
Abschnitt @ref{Aufruf von guix system}. Der Befehl kann das Herunterladen oder
Erstellen fehlender Softwarepakete auslösen, was einige Zeit in Anspruch
nehmen kann.

Sobald der Befehl erfolgreich — hoffentlich! — durchgelaufen ist, können Sie
mit dem Befehl @command{reboot} das neue System booten lassen. Der
Administratornutzer @code{root} hat im neuen System zunächst ein leeres
Passwort, und Passwörter der anderen Nutzer müssen Sie später setzen, indem
Sie den Befehl @command{passwd} als @code{root} ausführen, außer Ihre
Konfiguration enthält schon Passwörter (siehe @ref{user-account-password,
Passwörter für Benutzerkonten}). Siehe @ref{Nach der Systeminstallation} für
Informationen, wie es weiter geht!


@node Nach der Systeminstallation
@section Nach der Systeminstallation

Sie haben es geschafft: Sie haben Guix System erfolgreich gebootet! Von
jetzt an können Sie Guix System aktualisieren, wann Sie möchten, indem Sie
zum Beispiel das hier ausführen:

@example
guix pull
sudo guix system reconfigure /etc/config.scm
@end example

@noindent
Dadurch wird eine neue Systemgeneration aus den neuesten Paketen und
Diensten erstellt (siehe @ref{Aufruf von guix system}). Wir empfehlen, diese
Schritte regelmäßig zu wiederholen, damit Ihr System die aktuellen
Sicherheitsaktualisierungen benutzt (siehe @ref{Sicherheitsaktualisierungen}).

@c See <https://lists.gnu.org/archive/html/guix-devel/2019-01/msg00268.html>.
@quotation Anmerkung
@cindex sudo, Wirkung auf @command{guix pull}
Note that @command{sudo guix} runs your user's @command{guix} command and
@emph{not} root's, because @command{sudo} leaves @env{PATH} unchanged.  To
explicitly run root's @command{guix}, type @command{sudo -i guix @dots{}}.

Das macht hier einen Unterschied, weil @command{guix pull} den
@command{guix}-Befehl und Paketdefinitionen nur für dasjenige Benutzerkonto
aktualisiert, mit dem es ausgeführt wird. Würden Sie stattdessen in der
Anmelde-Shell des „root“-Nutzers @command{guix system reconfigure}
ausführen, müssten Sie auch für ihn @command{guix pull} ausführen.
@end quotation

Besuchen Sie uns auf @code{#guix} auf dem Freenode-IRC-Netzwerk oder auf der
Mailing-Liste @file{guix-devel@@gnu.org}, um uns Rückmeldung zu geben!


@node Guix in einer VM installieren
@section Guix in einer virtuellen Maschine installieren

@cindex virtuelle Maschine, Guix System installieren
@cindex Virtual Private Server (VPS)
@cindex VPS (Virtual Private Server)
Wenn Sie Guix System auf einer virtuellen Maschine (VM) oder einem „Virtual
Private Server“ (VPS) statt auf Ihrer echten Maschine installieren möchten,
ist dieser Abschnitt hier richtig für Sie.

Um eine virtuelle Maschine für @uref{https://qemu.org/,QEMU} aufzusetzen,
mit der Sie Guix System in ein „Disk-Image“ installieren können (also in
eine Datei mit einem Abbild eines Plattenspeichers), gehen Sie so vor:

@enumerate
@item
Zunächst laden Sie das Installationsabbild des Guix-Systems wie zuvor
beschrieben herunter und entpacken es (siehe @ref{Installation von USB-Stick oder DVD}).

@item
Legen Sie nun ein Disk-Image an, das das System nach der Installation
enthalten soll. Um ein qcow2-formatiertes Disk-Image zu erstellen, benutzen
Sie den Befehl @command{qemu-img}:

@example
qemu-img create -f qcow2 guix-system.img 50G
@end example

Die Datei, die Sie herausbekommen, wird wesentlich kleiner als 50 GB sein
(typischerweise kleiner als 1 MB), vergrößert sich aber, wenn der
virtualisierte Speicher gefüllt wird.

@item
Starten Sie das USB-Installationsabbild auf einer virtuellen Maschine:

@example
qemu-system-x86_64 -m 1024 -smp 1 -enable-kvm \
  -nic user,model=virtio-net-pci -boot menu=on,order=d \
  -drive file=guix-system.img \
  -drive media=cdrom,file=guix-system-install-@value{VERSION}.@var{System}.iso
@end example

@code{-enable-kvm} ist optional, verbessert die Rechenleistung aber
erheblich, siehe @ref{Guix in einer VM starten}.

@item
Sie sind nun in der virtuellen Maschine als Administratornutzer @code{root}
angemeldet und können mit der Installation wie gewohnt fortfahren. Folgen
Sie der Anleitung im Abschnitt @ref{Vor der Installation}.
@end enumerate

Wurde die Installation abgeschlossen, können Sie das System starten, das
sich nun als Abbild in der Datei @file{guix-system.img} befindet. Der
Abschnitt @ref{Guix in einer VM starten} erklärt, wie Sie das tun können.

@node Ein Abbild zur Installation erstellen
@section Ein Abbild zur Installation erstellen

@cindex Installationsabbild
Das oben beschriebene Installationsabbild wurde mit dem Befehl @command{guix
system} erstellt, genauer gesagt mit:

@example
guix system disk-image --file-system-type=iso9660 \
  gnu/system/install.scm
@end example

Die Datei @file{gnu/system/install.scm} finden Sie im Quellbaum von
Guix. Schauen Sie sich die Datei und auch den Abschnitt @ref{Aufruf von guix system} an, um mehr Informationen über das Installationsabbild zu erhalten.

@section Abbild zur Installation für ARM-Rechner erstellen

Viele ARM-Chips funktionieren nur mit ihrer eigenen speziellen Variante des
@uref{https://www.denx.de/wiki/U-Boot/, U-Boot-Bootloaders}.

Wenn Sie ein Disk-Image erstellen und der Bootloader nicht anderweitig schon
installiert ist (auf einem anderen Laufwerk), ist es ratsam, ein Disk-Image
zu erstellen, was den Bootloader enthält, mit dem Befehl:

@example
guix system disk-image --system=armhf-linux -e '((@@ (gnu system install) os-with-u-boot) (@@ (gnu system install) installation-os) "A20-OLinuXino-Lime2")'
@end example

@code{A20-OLinuXino-Lime2} ist der Name des Chips. Wenn Sie einen ungültigen
Namen eingeben, wird eine Liste möglicher Chip-Namen ausgegeben.

@c *********************************************************************
@node Paketverwaltung
@chapter Paketverwaltung

@cindex Pakete
Der Zweck von GNU Guix ist, Benutzern die leichte Installation,
Aktualisierung und Entfernung von Software-Paketen zu ermöglichen, ohne dass
sie ihre Erstellungsprozeduren oder Abhängigkeiten kennen müssen. Guix kann
natürlich noch mehr als diese offensichtlichen Funktionalitäten.

Dieses Kapitel beschreibt die Hauptfunktionalitäten von Guix, sowie die von
Guix angebotenen Paketverwaltungswerkzeuge. Zusätzlich zu den im Folgenden
beschriebenen Befehlszeilen-Benutzerschnittstellen (siehe @ref{Aufruf von guix package, @code{guix package}}) können Sie auch mit der
Emacs-Guix-Schnittstelle (siehe @ref{Top,,, emacs-guix, The Emacs-Guix
Reference Manual}) arbeiten, nachdem Sie das Paket @code{emacs-guix}
installiert haben (führen Sie zum Einstieg in Emacs-Guix den Emacs-Befehl
@kbd{M-x guix-help} aus):

@example
guix install emacs-guix
@end example

@menu
* Funktionalitäten::        Wie Guix Ihr Leben schöner machen wird.
* Aufruf von guix package::  Pakete installieren, entfernen usw.
* Substitute::               Vorerstelle Binärdateien herunterladen.
* Pakete mit mehreren Ausgaben.::  Ein Quellpaket, mehrere Ausgaben.
* Aufruf von guix gc::       Den Müllsammler laufen lassen.
* Aufruf von guix pull::     Das neueste Guix samt Distribution laden.
* Kanäle::                  Die Paketsammlung anpassen.
* Aufruf von time-machine::  Alte Guix-Versionen verwenden.
* Untergeordnete::           Mit einer anderen Version von Guix 
                               interagieren.
* Aufruf von guix describe::  Informationen über Ihre Guix-Version 
                                anzeigen.
* Aufruf von guix archive::  Import und Export von Store-Dateien.
@end menu

@node Funktionalitäten
@section Funktionalitäten

Wenn Sie Guix benutzen, landet jedes Paket schließlich im @dfn{Paket-Store}
in seinem eigenen Verzeichnis — der Name ist ähnlich wie
@file{/gnu/store/xxx-package-1.2}, wobei @code{xxx} eine Zeichenkette in
Base32-Darstellung ist.

Statt diese Verzeichnisse direkt anzugeben, haben Nutzer ihr eigenes
@dfn{Profil}, welches auf diejenigen Pakete zeigt, die sie tatsächlich
benutzen wollen. Diese Profile sind im Persönlichen Verzeichnis des
jeweiligen Nutzers gespeichert als @code{$HOME/.guix-profile}.

Zum Beispiel installiert @code{alice} GCC 4.7.2. Dadurch zeigt dann
@file{/home/alice/.guix-profile/bin/gcc} auf
@file{/gnu/store/…-gcc-4.7.2/bin/gcc}. Auf demselben Rechner hat @code{bob}
bereits GCC 4.8.0 installiert. Das Profil von @code{bob} zeigt dann einfach
weiterhin auf @file{/gnu/store/…-gcc-4.8.0/bin/gcc} — d.h.@: beide Versionen
von GCC koexistieren auf demselben System, ohne sich zu stören.

Der Befehl @command{guix package} ist das zentrale Werkzeug, um Pakete zu
verwalten (siehe @ref{Aufruf von guix package}). Es arbeitet auf dem eigenen
Profil jedes Nutzers und kann @emph{mit normalen Benutzerrechten} ausgeführt
werden.

@cindex Transaktionen
Der Befehl stellt die offensichtlichen Installations-, Entfernungs- und
Aktualisierungsoperationen zur Verfügung. Jeder Aufruf ist tatsächlich eine
eigene @emph{Transaktion}: Entweder die angegebene Operation wird
erfolgreich durchgeführt, oder gar nichts passiert. Wenn also der Prozess
von @command{guix package} während der Transaktion beendet wird, oder es zum
Stromausfall während der Transaktion kommt, dann bleibt der alte, nutzbare
Zustands des Nutzerprofils erhalten.

Zudem kann jede Pakettransaktion @emph{zurückgesetzt} werden
(Rollback). Wird also zum Beispiel durch eine Aktualisierung eine neue
Version eines Pakets installiert, die einen schwerwiegenden Fehler zur Folge
hat, können Nutzer ihr Profil einfach auf die vorherige Profilinstanz
zurücksetzen, von der sie wissen, dass sie gut lief. Ebenso unterliegt bei
Guix auch die globale Systemkonfiguration transaktionellen Aktualisierungen
und Rücksetzungen (siehe @ref{Das Konfigurationssystem nutzen}).

Alle Pakete im Paket-Store können vom @emph{Müllsammler} (Garbage Collector)
gelöscht werden. Guix ist in der Lage, festzustellen, welche Pakete noch
durch Benutzerprofile referenziert werden, und entfernt nur diese, die
nachweislich nicht mehr referenziert werden (siehe @ref{Aufruf von guix gc}). Benutzer können auch ausdrücklich alte Generationen ihres Profils
löschen, damit die zugehörigen Pakete vom Müllsammler gelöscht werden
können.

@cindex Reproduzierbarkeit
@cindex Reproduzierbare Erstellungen
Guix verfolgt einen @dfn{rein funktionalen} Ansatz bei der Paketverwaltung,
wie er in der Einleitung beschrieben wurde (siehe @ref{Einführung}). Jedes
Paketverzeichnis im @file{/gnu/store} hat einen Hash all seiner bei der
Erstellung benutzten Eingaben im Namen — Compiler, Bibliotheken,
Erstellungs-Skripts etc. Diese direkte Entsprechung ermöglicht es Benutzern,
eine Paketinstallation zu benutzen, die sicher dem aktuellen Stand ihrer
Distribution entspricht. Sie maximiert auch die @dfn{Reproduzierbarkeit der
Erstellungen} zu maximieren: Dank der isolierten Erstellungsumgebungen, die
benutzt werden, resultiert eine Erstellung wahrscheinlich in bitweise
identischen Dateien, auch wenn sie auf unterschiedlichen Maschinen
durchgeführt wird (siehe @ref{Aufruf des guix-daemon, container}).

@cindex Substitute
Auf dieser Grundlage kann Guix @dfn{transparent Binär- oder Quelldateien
ausliefern}. Wenn eine vorerstellte Binärdatei für ein
@file{/gnu/store}-Objekt von einer externen Quelle verfügbar ist — ein
@dfn{Substitut} —, lädt Guix sie einfach herunter und entpackt sie,
andernfalls erstellt Guix das Paket lokal aus seinem Quellcode (siehe
@ref{Substitute}). Weil Erstellungsergebnisse normalerweise Bit für Bit
reproduzierbar sind, müssen die Nutzer den Servern, die Substitute anbieten,
nicht blind vertrauen; sie können eine lokale Erstellung erzwingen und
Substitute @emph{anfechten} (siehe @ref{Aufruf von guix challenge}).

Kontrolle über die Erstellungsumgebung ist eine auch für Entwickler
nützliche Funktionalität. Der Befehl @command{guix environment} ermöglicht
es Entwicklern eines Pakets, schnell die richtige Entwicklungsumgebung für
ihr Paket einzurichten, ohne manuell die Abhängigkeiten des Pakets in ihr
Profil installieren zu müssen (siehe @ref{Aufruf von guix environment}).

@cindex Nachbildung, von Software-Umgebungen
@cindex Provenienzverfolgung, von Software-Artefakten
Ganz Guix und all seine Paketdefinitionen stehen unter Versionskontrolle und
@command{guix pull} macht es möglich, auf dem Verlauf der Entwicklung von
Guix selbst „in der Zeit zu reisen“ (siehe @ref{Aufruf von guix pull}). Dadurch kann eine Instanz von Guix auf einer anderen Maschine oder
zu einem späteren Zeitpunkt genau nachgebildet werden, wodurch auch
@emph{vollständige Software-Umgebungen gänzlich nachgebildet} werden können,
mit genauer @dfn{Provenienzverfolgung}, wo diese Software herkommt.

@node Aufruf von guix package
@section @command{guix package} aufrufen

@cindex Installieren von Paketen
@cindex Entfernen von Paketen
@cindex Paketinstallation
@cindex Paketentfernung
Der Befehl @command{guix package} ist ein Werkzeug, womit Nutzer Pakete
installieren, aktualisieren, entfernen und auf vorherige Konfigurationen
zurücksetzen können. Dabei wird nur das eigene Profil des Nutzers verwendet,
und es funktioniert mit normalen Benutzerrechten, ohne Administratorrechte
(siehe @ref{Funktionalitäten}). Die Syntax ist:

@example
guix package @var{Optionen}
@end example

@cindex Transaktionen
In erster Linie geben die @var{Optionen} an, welche Operationen in der
Transaktion durchgeführt werden sollen. Nach Abschluss wird ein neues Profil
erzeugt, aber vorherige @dfn{Generationen} des Profils bleiben verfügbar,
falls der Benutzer auf sie zurückwechseln will.

Um zum Beispiel @code{lua} zu entfernen und @code{guile} und
@code{guile-cairo} in einer einzigen Transaktion zu installieren:

@example
guix package -r lua -i guile guile-cairo
@end example

@cindex Alias-Namen für @command{guix package}
Um es Ihnen einfacher zu machen, bieten wir auch die folgenden Alias-Namen
an:

@itemize
@item
@command{guix search} ist eine andere Schreibweise für @command{guix package
-s},
@item
@command{guix install} ist eine andere Schreibweise für @command{guix
package -i},
@item
@command{guix remove} ist eine andere Schreibweise für @command{guix package
-r},
@item
@command{guix upgrade} ist eine andere Schreibweise für @command{guix
package -u}
@item
und @command{guix show} ist eine andere Schreibweise für @command{guix
package --show=}.
@end itemize

Diese Alias-Namen sind weniger ausdrucksstark als @command{guix package} und
stellen weniger Befehlszeilenoptionen bereit, deswegen werden Sie vermutlich
manchmal @command{guix package} direkt benutzen wollen.

@command{guix package} unterstützt auch ein @dfn{deklaratives Vorgehen},
wobei der Nutzer die genaue Menge an Paketen, die verfügbar sein sollen,
festlegt und über die Befehlszeilenoption @option{--manifest} übergibt
(siehe @ref{profile-manifest, @option{--manifest}}).

@cindex Profil
For each user, a symlink to the user's default profile is automatically
created in @file{$HOME/.guix-profile}.  This symlink always points to the
current generation of the user's default profile.  Thus, users can add
@file{$HOME/.guix-profile/bin} to their @env{PATH} environment variable, and
so on.
@cindex Suchpfade
Wenn Sie @emph{nicht} Guix System benutzen, sollten Sie in Betracht ziehen,
folgende Zeilen zu Ihrem @file{~/.bash_profile} hinzuzufügen (siehe
@ref{Bash Startup Files,,, bash, The GNU Bash Reference Manual}), damit in
neu erzeugten Shells alle Umgebungsvariablen richtig definiert werden:

@example
GUIX_PROFILE="$HOME/.guix-profile" ; \
source "$HOME/.guix-profile/etc/profile"
@end example

In a multi-user setup, user profiles are stored in a place registered as a
@dfn{garbage-collector root}, which @file{$HOME/.guix-profile} points to
(@pxref{Aufruf von guix gc}).  That directory is normally
@code{@var{localstatedir}/guix/profiles/per-user/@var{user}}, where
@var{localstatedir} is the value passed to @code{configure} as
@option{--localstatedir}, and @var{user} is the user name.  The
@file{per-user} directory is created when @command{guix-daemon} is started,
and the @var{user} sub-directory is created by @command{guix package}.

Als @var{Optionen} kann vorkommen:

@table @code

@item --install=@var{Paket} …
@itemx -i @var{Paket} …
Die angegebenen @var{Paket}e installieren.

Each @var{package} may specify either a simple package name, such as
@code{guile}, or a package name followed by an at-sign and version number,
such as @code{guile@@1.8.8} or simply @code{guile@@1.8} (in the latter case,
the newest version prefixed by @code{1.8} is selected).

Wird keine Versionsnummer angegeben, wird die neueste verfügbare Version
ausgewählt. Zudem kann im @var{Paket} ein Doppelpunkt auftauchen, gefolgt
vom Namen einer der Ausgaben des Pakets, wie @code{gcc:doc} oder
@code{binutils@@2.22:lib} (siehe @ref{Pakete mit mehreren Ausgaben.}). Pakete mit zugehörigem Namen (und optional der Version) werden
unter den Modulen der GNU-Distribution gesucht (siehe @ref{Paketmodule}).

@cindex propagierte Eingaben
Manchmal haben Pakete @dfn{propagierte Eingaben}: Als solche werden
Abhängigkeiten bezeichnet, die automatisch zusammen mit dem angeforderten
Paket installiert werden (im Abschnitt @ref{package-propagated-inputs,
@code{propagated-inputs} in @code{package} objects} sind weitere
Informationen über propagierte Eingaben in Paketdefinitionen zu finden).

@anchor{package-cmd-propagated-inputs}
Ein Beispiel ist die GNU-MPC-Bibliothek: Ihre C-Headerdateien verweisen auf
die der GNU-MPFR-Bibliothek, welche wiederum auf die der GMP-Bibliothek
verweisen. Wenn also MPC installiert wird, werden auch die MPFR- und
GMP-Bibliotheken in das Profil installiert; entfernt man MPC, werden auch
MPFR und GMP entfernt — außer sie wurden noch auf andere Art ausdrücklich
vom Nutzer installiert.

Besides, packages sometimes rely on the definition of environment variables
for their search paths (see explanation of @option{--search-paths} below).
Any missing or possibly incorrect environment variable definitions are
reported here.

@item --install-from-expression=@var{Ausdruck}
@itemx -e @var{Ausdruck}
Das Paket installieren, zu dem der @var{Ausdruck} ausgewertet wird.

Beim @var{Ausdruck} muss es sich um einen Scheme-Ausdruck handeln, der zu
einem @code{<package>}-Objekt ausgewertet wird. Diese Option ist besonders
nützlich, um zwischen gleichnamigen Varianten eines Pakets zu unterscheiden,
durch Ausdrücke wie @code{(@@ (gnu packages base) guile-final)}.

Beachten Sie, dass mit dieser Option die erste Ausgabe des angegebenen
Pakets installiert wird, was unzureichend sein kann, wenn eine bestimmte
Ausgabe eines Pakets mit mehreren Ausgaben gewünscht ist.

@item --install-from-file=@var{Datei}
@itemx -f @var{Datei}
Das Paket installieren, zu dem der Code in der @var{Datei} ausgewertet wird.

Zum Beispiel könnte die @var{Datei} eine Definition wie diese enthalten
(siehe @ref{Pakete definieren}):

@lisp
@include package-hello.scm
@end lisp

Entwickler könnten es für nützlich erachten, eine solche
@file{guix.scm}-Datei im Quellbaum ihres Projekts abzulegen, mit der
Zwischenstände der Entwicklung getestet und reproduzierbare
Erstellungsumgebungen aufgebaut werden können (siehe @ref{Aufruf von guix environment}).

The @var{file} may also contain a JSON representation of one or more package
definitions.  Running @code{guix package -f} on @file{hello.json} with the
following contents would result in installing the package @code{greeter}
after building @code{myhello}:

@example
@verbatiminclude package-hello.json
@end example

@item --remove=@var{Paket} …
@itemx -r @var{Paket} …
Die angegebenen @var{Paket}e entfernen.

As for @option{--install}, each @var{package} may specify a version number
and/or output name in addition to the package name.  For instance, @samp{-r
glibc:debug} would remove the @code{debug} output of @code{glibc}.

@item --upgrade[=@var{Regexp} …]
@itemx -u [@var{Regexp} …]
@cindex Pakete aktualisieren
Upgrade all the installed packages.  If one or more @var{regexp}s are
specified, upgrade only installed packages whose name matches a
@var{regexp}.  Also see the @option{--do-not-upgrade} option below.

Beachten Sie, dass das Paket so auf die neueste Version unter den Paketen
gebracht wird, die in der aktuell installierten Distribution vorliegen. Um
jedoch Ihre Distribution zu aktualisieren, sollten Sie regelmäßig
@command{guix pull} ausführen (siehe @ref{Aufruf von guix pull}).

@item --do-not-upgrade[=@var{Regexp} …]
When used together with the @option{--upgrade} option, do @emph{not} upgrade
any packages whose name matches a @var{regexp}.  For example, to upgrade all
packages in the current profile except those containing the substring
``emacs'':

@example
$ guix package --upgrade . --do-not-upgrade emacs
@end example

@item @anchor{profile-manifest}--manifest=@var{Datei}
@itemx -m @var{Datei}
@cindex Profildeklaration
@cindex Profilmanifest
Erstellt eine neue Generation des Profils aus dem vom Scheme-Code in
@var{Datei} gelieferten Manifest-Objekt. Wenn diese Befehlszeilenoption
mehrmals wiederholt angegeben wird, werden die Manifeste aneinandergehängt.

This allows you to @emph{declare} the profile's contents rather than
constructing it through a sequence of @option{--install} and similar
commands.  The advantage is that @var{file} can be put under version
control, copied to different machines to reproduce the same profile, and so
on.

@c FIXME: Add reference to (guix profile) documentation when available.
Der Code in der @var{Datei} muss ein @dfn{Manifest}-Objekt liefern, was
ungefähr einer Liste von Paketen entspricht:

@findex packages->manifest
@lisp
(use-package-modules guile emacs)

(packages->manifest
 (list emacs
       guile-2.0
       ;; Eine bestimmte Paketausgabe nutzen.
       (list guile-2.0 "debug")))
@end lisp

@findex specifications->manifest
In diesem Beispiel müssen wir wissen, welche Module die Variablen
@code{emacs} und @code{guile-2.0} definieren, um die richtige Angabe mit
@code{use-package-modules} machen zu können, was umständlich sein kann. Wir
können auch normale Paketnamen angeben und sie durch
@code{specifications->manifest} zu den entsprechenden Paketobjekten
auflösen, zum Beispiel so:

@lisp
(specifications->manifest
 '("emacs" "guile@@2.2" "guile@@2.2:debug"))
@end lisp

@item --roll-back
@cindex rücksetzen
@cindex Zurücksetzen von Transaktionen
@cindex Transaktionen, zurücksetzen
Wechselt zur vorherigen @dfn{Generation} des Profils zurück — d.h.@: macht
die letzte Transaktion rückgängig.

When combined with options such as @option{--install}, roll back occurs
before any other actions.

Ein Rücksetzen der ersten Generation, die installierte Pakete enthält,
wechselt das Profil zur @dfn{nullten Generation}, die keinerlei Dateien
enthält, abgesehen von Metadaten über sich selbst.

Nach dem Zurücksetzen überschreibt das Installieren, Entfernen oder
Aktualisieren von Paketen vormals zukünftige Generationen, d.h.@: der
Verlauf der Generationen eines Profils ist immer linear.

@item --switch-generation=@var{Muster}
@itemx -S @var{Muster}
@cindex Generationen
Wechselt zu der bestimmten Generation, die durch das @var{Muster} bezeichnet
wird.

@var{pattern} may be either a generation number or a number prefixed with
``+'' or ``-''.  The latter means: move forward/backward by a specified
number of generations.  For example, if you want to return to the latest
generation after @option{--roll-back}, use @option{--switch-generation=+1}.

The difference between @option{--roll-back} and
@option{--switch-generation=-1} is that @option{--switch-generation} will
not make a zeroth generation, so if a specified generation does not exist,
the current generation will not be changed.

@item --search-paths[=@var{Art}]
@cindex Suchpfade
Führe die Definitionen von Umgebungsvariablen auf, in Bash-Syntax, die nötig
sein könnten, um alle installierten Pakete nutzen zu können. Diese
Umgebungsvariablen werden benutzt, um die @dfn{Suchpfade} für Dateien
festzulegen, die von einigen installierten Paketen benutzt werden.

For example, GCC needs the @env{CPATH} and @env{LIBRARY_PATH} environment
variables to be defined so it can look for headers and libraries in the
user's profile (@pxref{Environment Variables,,, gcc, Using the GNU Compiler
Collection (GCC)}).  If GCC and, say, the C library are installed in the
profile, then @option{--search-paths} will suggest setting these variables
to @file{@var{profile}/include} and @file{@var{profile}/lib}, respectively.

Die typische Nutzung ist, in der Shell diese Variablen zu definieren:

@example
$ eval `guix package --search-paths`
@end example

Als @var{Art} kann entweder @code{exact}, @code{prefix} oder @code{suffix}
gewählt werden, wodurch die gelieferten Definitionen der Umgebungsvariablen
entweder exakt die Einstellungen für Guix meldet, oder sie als Präfix oder
Suffix an den aktuellen Wert dieser Variablen anhängt. Gibt man keine
@var{Art} an, wird der Vorgabewert @code{exact} verwendet.

Diese Befehlszeilenoption kann auch benutzt werden, um die
@emph{kombinierten} Suchpfade mehrerer Profile zu berechnen. Betrachten Sie
dieses Beispiel:

@example
$ guix package -p foo -i guile
$ guix package -p bar -i guile-json
$ guix package -p foo -p bar --search-paths
@end example

The last command above reports about the @env{GUILE_LOAD_PATH} variable,
even though, taken individually, neither @file{foo} nor @file{bar} would
lead to that recommendation.


@item --profile=@var{Profil}
@itemx -p @var{Profil}
Auf @var{Profil} anstelle des Standardprofils des Benutzers arbeiten.

Als @var{Profil} muss der Name einer Datei angegeben werden, die dann nach
Abschluss der Transaktion erzeugt wird. Konkret wird @var{Profil} nur zu
einer symbolischen Verknüpfung („Symlink“) auf das eigentliche Profil
gemacht, in das Pakete installiert werden.

@example
$ guix install hello -p ~/code/mein-profil
…
$ ~/code/mein-profil/bin/hello
Hallo, Welt!
@end example

Um das Profil loszuwerden, genügt es, die symbolische Verknüpfung und damit
einhergehende Verknüpfungen, die auf bestimmte Generationen verweisen, zu
entfernen:

@example
$ rm ~/code/mein-profil ~/code/mein-profil-*-link
@end example

@item --list-profiles
Alle Profile des Benutzers auflisten:

@example
$ guix package --list-profiles
/home/charlie/.guix-profile
/home/charlie/code/my-profile
/home/charlie/code/devel-profile
/home/charlie/tmp/test
@end example

Wird es als Administratornutzer „root“ ausgeführt, werden die Profile aller
Benutzer aufgelistet.

@cindex Kollisionen, in einem Profil
@cindex Paketkollisionen in Profilen
@cindex Profilkollisionen
@item --allow-collisions
Kollidierende Pakete im neuen Profil zulassen. Benutzung auf eigene Gefahr!

Standardmäßig wird @command{guix package} @dfn{Kollisionen} als Fehler
auffassen und melden. Zu Kollisionen kommt es, wenn zwei oder mehr
verschiedene Versionen oder Varianten desselben Pakets im Profil landen.

@item --bootstrap
Erstellt das Profil mit dem Bootstrap-Guile. Diese Option ist nur für
Entwickler der Distribution nützlich.

@end table

Zusätzlich zu diesen Aktionen unterstützt @command{guix package} folgende
Befehlszeilenoptionen, um den momentanen Zustand eines Profils oder die
Verfügbarkeit von Paketen nachzulesen:

@table @option

@item --search=@var{Regexp}
@itemx -s @var{Regexp}
@anchor{guix-search}
@cindex Suche nach Paketen
Führt alle verfügbaren Pakete auf, deren Name, Zusammenfassung oder
Beschreibung zum regulären Ausdruck @var{Regexp} passt, ohne Groß- und
Kleinschreibung zu unterscheiden und sortiert nach ihrer Relevanz. Alle
Metadaten passender Pakete werden im @code{recutils}-Format geliefert (siehe
@ref{Top, GNU recutils databases,, recutils, GNU recutils manual}).

So können bestimmte Felder mit dem Befehl @command{recsel} extrahiert
werden, zum Beispiel:

@example
$ guix package -s malloc | recsel -p name,version,relevance
name: jemalloc
version: 4.5.0
relevance: 6

name: glibc
version: 2.25
relevance: 1

name: libgc
version: 7.6.0
relevance: 1
@end example

Ebenso kann der Name aller zu den Bedingungen der GNU@tie{}LGPL, Version 3,
verfügbaren Pakete ermittelt werden:

@example
$ guix package -s "" | recsel -p name -e 'license ~ "LGPL 3"'
name: elfutils

name: gmp
…
@end example

Es ist auch möglich, Suchergebnisse näher einzuschränken, indem Sie
@code{-s} mehrmals an @command{guix package} übergeben, oder mehrere
Argumente an @command{guix search} übergeben. Zum Beispiel liefert folgender
Befehl eines Liste von Brettspielen:

@example
$ guix search '\<board\>' game | recsel -p name
name: gnubg
…
@end example

Würden wir @code{-s game} weglassen, bekämen wir auch Software-Pakete
aufgelistet, die mit „printed circuit boards“ (elektronischen Leiterplatten)
zu tun haben; ohne die spitzen Klammern um @code{board} bekämen wir auch
Pakete, die mit „keyboards“ (Tastaturen, oder musikalischen Keyboard) zu tun
haben.

Es ist Zeit für ein komplexeres Beispiel. Folgender Befehl sucht
kryptografische Bibliotheken, filtert Haskell-, Perl-, Python- und
Ruby-Bibliotheken heraus und gibt Namen und Zusammenfassung passender Pakete
aus:

@example
$ guix search crypto library | \
    recsel -e '! (name ~ "^(ghc|perl|python|ruby)")' -p name,synopsis
@end example

@noindent
Siehe @ref{Selection Expressions,,, recutils, GNU recutils manual}, es
enthält weitere Informationen über @dfn{Auswahlausdrücke} mit @code{recsel
-e}.

@item --show=@var{Paket}
Zeigt Details über das @var{Paket} aus der Liste verfügbarer Pakete, im
@code{recutils}-Format (siehe @ref{Top, GNU recutils databases,, recutils,
GNU recutils manual}).

@example
$ guix package --show=python | recsel -p name,version
name: python
version: 2.7.6

name: python
version: 3.3.5
@end example

Sie können auch den vollständigen Namen eines Pakets angeben, um Details nur
über diese Version angezeigt zu bekommen (diesmal benutzen wir die andere
Schreibweise @command{guix show}):
@example
$ guix show python@@3.4 | recsel -p name,version
name: python
version: 3.4.3
@end example



@item --list-installed[=@var{Regexp}]
@itemx -I [@var{Regexp}]
Listet die derzeit installierten Pakete im angegebenen Profil auf, die
zuletzt installierten Pakete zuletzt. Wenn ein regulärer Ausdruck
@var{Regexp} angegeben wird, werden nur installierte Pakete aufgeführt,
deren Name zu @var{Regexp} passt.

Zu jedem installierten Paket werden folgende Informationen angezeigt, durch
Tabulatorzeichen getrennt: der Paketname, die Version als Zeichenkette,
welche Teile des Pakets installiert sind (zum Beispiel @code{out}, wenn die
Standard-Paketausgabe installiert ist, @code{include}, wenn seine Header
installiert sind, usw.)@: und an welchem Pfad das Paket im Store zu finden
ist.

@item --list-available[=@var{Regexp}]
@itemx -A [@var{Regexp}]
Listet Pakete auf, die in der aktuell installierten Distribution dieses
Systems verfügbar sind (siehe @ref{GNU-Distribution}). Wenn ein regulärer
Ausdruck @var{Regexp} angegeben wird, werden nur Pakete aufgeführt, deren
Name zum regulären Ausdruck @var{Regexp} passt.

Zu jedem Paket werden folgende Informationen getrennt durch Tabulatorzeichen
ausgegeben: der Name, die Version als Zeichenkette, die Teile des Programms
(siehe @ref{Pakete mit mehreren Ausgaben.}) und die Stelle im Quellcode, an
der das Paket definiert ist.

@item --list-generations[=@var{Muster}]
@itemx -l [@var{Muster}]
@cindex Generationen
Liefert eine Liste der Generationen zusammen mit dem Datum, an dem sie
erzeugt wurden; zu jeder Generation werden zudem die installierten Pakete
angezeigt, zuletzt installierte Pakete zuletzt. Beachten Sie, dass die
nullte Generation niemals angezeigt wird.

Zu jedem installierten Paket werden folgende Informationen durch
Tabulatorzeichen getrennt angezeigt: der Name des Pakets, die Version als
Zeichenkette, welcher Teil des Pakets installiert ist (siehe @ref{Pakete mit mehreren Ausgaben.}) und an welcher Stelle sich das Paket im Store
befindet.

Wenn ein @var{Muster} angegeben wird, liefert der Befehl nur dazu passende
Generationen. Gültige Muster sind zum Beispiel:

@itemize
@item @emph{Ganze Zahlen und kommagetrennte ganze Zahlen}. Beide Muster bezeichnen
generation numbers.  For instance, @option{--list-generations=1} returns the
first one.

And @option{--list-generations=1,8,2} outputs three generations in the
specified order.  Neither spaces nor trailing commas are allowed.

@item @emph{Ranges}.  @option{--list-generations=2..9} prints the
angegebenen Generationen und alles dazwischen aus. Beachten Sie, dass der
Bereichsanfang eine kleinere Zahl als das Bereichsende sein muss.

It is also possible to omit the endpoint.  For example,
@option{--list-generations=2..}, returns all generations starting from the
second one.

@item @emph{Zeitdauern}. Sie können auch die letzten @emph{N}@tie{}Tage, Wochen
or months by passing an integer along with the first letter of the
duration.  For example, @option{--list-generations=20d} lists generations
that are up to 20 days old.
@end itemize

@item --delete-generations[=@var{Muster}]
@itemx -d [@var{Muster}]
Wird kein @var{Muster} angegeben, werden alle Generationen außer der
aktuellen entfernt.

This command accepts the same patterns as @option{--list-generations}.  When
@var{pattern} is specified, delete the matching generations.  When
@var{pattern} specifies a duration, generations @emph{older} than the
specified duration match.  For instance, @option{--delete-generations=1m}
deletes generations that are more than one month old.

Falls die aktuelle Generation zum Muster passt, wird sie @emph{nicht}
gelöscht. Auch die nullte Generation wird niemals gelöscht.

Beachten Sie, dass Sie auf gelöschte Generationen nicht zurückwechseln
können. Dieser Befehl sollte also nur mit Vorsicht benutzt werden.

@end table

Finally, since @command{guix package} may actually start build processes, it
supports all the common build options (@pxref{Gemeinsame Erstellungsoptionen}).  It
also supports package transformation options, such as @option{--with-source}
(@pxref{Paketumwandlungsoptionen}).  However, note that package
transformations are lost when upgrading; to preserve transformations across
upgrades, you should define your own package variant in a Guile module and
add it to @env{GUIX_PACKAGE_PATH} (@pxref{Pakete definieren}).

@node Substitute
@section Substitute

@cindex Substitute
@cindex vorerstellte Binärdateien
Guix kann transparent Binär- oder Quelldateien ausliefern. Das heißt, Dinge
können sowohl lokal erstellt, als auch als vorerstellte Objekte von einem
Server heruntergeladen werden, oder beides gemischt. Wir bezeichnen diese
vorerstellten Objekte als @dfn{Substitute} — sie substituieren lokale
Erstellungsergebnisse. In vielen Fällen geht das Herunterladen eines
Substituts wesentlich schneller, als Dinge lokal zu erstellen.

Substitute können alles sein, was das Ergebnis einer Ableitungserstellung
ist (siehe @ref{Ableitungen}). Natürlich sind sie üblicherweise vorerstellte
Paket-Binärdateien, aber wenn zum Beispiel ein Quell-Tarball das Ergebnis
einer Ableitungserstellung ist, kann auch er als Substitut verfügbar sein.

@menu
* Offizieller Substitut-Server::  Eine besondere Quelle von Substituten.
* Substitut-Server autorisieren::  Wie man Substitute an- und abschaltet.
* Substitutauthentifizierung::  Wie Guix Substitute verifiziert.
* Proxy-Einstellungen::      Wie Sie Substitute über einen Proxy beziehen.
* Fehler bei der Substitution::  Was passiert, wenn die Substitution 
                                   fehlschlägt.
* Vom Vertrauen gegenüber Binärdateien::  Wie können Sie diesem binären 
                                              Blob trauen?
@end menu

@node Offizieller Substitut-Server
@subsection Offizieller Substitut-Server

@cindex Erstellungsfarm
Der Server @code{@value{SUBSTITUTE-SERVER}} ist die Fassade für eine
offizielle Erstellungsfarm („Build-Farm“), die kontinuierlich Guix-Pakete
für einige Prozessorarchitekturen erstellt und sie als Substitute zur
Verfügung stellt. Dies ist die standardmäßige Quelle von Substituten; durch
Übergeben der Befehlszeilenoption @option{--substitute-urls} an entweder den
@command{guix-daemon} (siehe @ref{daemon-substitute-urls,, @code{guix-daemon
--substitute-urls}}) oder Client-Werkzeuge wie @command{guix package} (siehe
@ref{client-substitute-urls,, die Befehlszeilenoption
@option{--substitute-urls} beim Client}) kann eine abweichende Einstellung
benutzt werden.

Substitut-URLs können entweder HTTP oder HTTPS sein. HTTPS wird empfohlen,
weil die Kommunikation verschlüsselt ist; umgekehrt kann bei HTTP die
Kommunikation belauscht werden, wodurch der Angreifer zum Beispiel erfahren
könnte, ob Ihr System über noch nicht behobene Sicherheitsschwachstellen
verfügt.

Substitute von der offiziellen Erstellungsfarm sind standardmäßig erlaubt,
wenn Sie Guix System verwenden (siehe @ref{GNU-Distribution}). Auf
Fremddistributionen sind sie allerdings standardmäßig ausgeschaltet, solange
Sie sie nicht ausdrücklich in einem der empfohlenen Installationsschritte
erlaubt haben (siehe @ref{Installation}). Die folgenden Absätze beschreiben,
wie Sie Substitute für die offizielle Erstellungsfarm an- oder ausschalten;
dieselbe Prozedur kann auch benutzt werden, um Substitute für einen
beliebigen anderen Substitutserver zu erlauben.

@node Substitut-Server autorisieren
@subsection Substitut-Server autorisieren

@cindex Sicherheit
@cindex Substitute, deren Autorisierung
@cindex Access Control List (ACL), für Substitute
@cindex ACL (Access Control List), für Substitute
Um es Guix zu gestatten, Substitute von @code{@value{SUBSTITUTE-SERVER}}
oder einem Spiegelserver davon herunterzuladen, müssen Sie den zugehörigen
öffentlichen Schlüssel zur Access Control List (ACL,
Zugriffssteuerungsliste) für Archivimporte hinzufügen, mit Hilfe des Befehls
@command{guix archive} (siehe @ref{Aufruf von guix archive}). Dies impliziert,
dass Sie darauf vertrauen, dass @code{@value{SUBSTITUTE-SERVER}} nicht
kompromittiert wurde und echte Substitute liefert.

Der öffentliche Schlüssel für @code{@value{SUBSTITUTE-SERVER}} wird zusammen
mit Guix installiert, in das Verzeichnis
@code{@var{prefix}/share/guix/hydra.gnu.org.pub}, wobei @var{prefix} das bei
der Installation angegebene Präfix von Guix ist. Wenn Sie Guix aus seinem
Quellcode heraus installieren, sollten Sie sichergehen, dass Sie die
GPG-Signatur (auch „Beglaubigung“ genannt) von
@file{guix-@value{VERSION}.tar.gz} prüfen, worin sich dieser öffentliche
Schlüssel befindet. Dann können Sie so etwas wie hier ausführen:

@example
# guix archive --authorize < @var{prefix}/share/guix/@value{SUBSTITUTE-SERVER}.pub
@end example

Sobald es eingerichtet wurde, sollte sich die Ausgabe eines Befehls wie
@code{guix build} von so etwas:

@example
$ guix build emacs --dry-run
Folgende Ableitungen würden erstellt:
   /gnu/store/yr7bnx8xwcayd6j95r2clmkdl1qh688w-emacs-24.3.drv
   /gnu/store/x8qsh1hlhgjx6cwsjyvybnfv2i37z23w-dbus-1.6.4.tar.gz.drv
   /gnu/store/1ixwp12fl950d15h2cj11c73733jay0z-alsa-lib-1.0.27.1.tar.bz2.drv
   /gnu/store/nlma1pw0p603fpfiqy7kn4zm105r5dmw-util-linux-2.21.drv
…
@end example

@noindent
in so etwas verwandeln:

@example
$ guix build emacs --dry-run
112.3 MB würden heruntergeladen:
   /gnu/store/pk3n22lbq6ydamyymqkkz7i69wiwjiwi-emacs-24.3
   /gnu/store/2ygn4ncnhrpr61rssa6z0d9x22si0va3-libjpeg-8d
   /gnu/store/71yz6lgx4dazma9dwn2mcjxaah9w77jq-cairo-1.12.16
   /gnu/store/7zdhgp0n1518lvfn8mb96sxqfmvqrl7v-libxrender-0.9.7
…
@end example

@noindent
Der Text hat sich von „Folgende Ableitungen würden erstellt“ zu „112.3 MB
würden heruntergeladen“ geändert. Das zeigt an, dass Substitute von
@code{@value{SUBSTITUTE-SERVER}} nutzbar sind und für zukünftige
Erstellungen heruntergeladen werden, wann immer es möglich ist.

@cindex Substitute, wie man sie ausschaltet
The substitute mechanism can be disabled globally by running
@code{guix-daemon} with @option{--no-substitutes} (@pxref{Aufruf des guix-daemon}).  It can also be disabled temporarily by passing the
@option{--no-substitutes} option to @command{guix package}, @command{guix
build}, and other command-line tools.

@node Substitutauthentifizierung
@subsection Substitutauthentifizierung

@cindex digitale Signaturen
Guix erkennt, wenn ein verfälschtes Substitut benutzt würde, und meldet
einen Fehler. Ebenso werden Substitute ignoriert, die nich signiert sind,
oder nicht mit einem in der ACL aufgelisteten Schlüssel signiert sind.

Es gibt nur eine Ausnahme: Wenn ein unautorisierter Server Substitute
anbietet, die @emph{Bit für Bit identisch} mit denen von einem autorisierten
Server sind, können sie auch vom unautorisierten Server heruntergeladen
werden. Zum Beispiel, angenommen wir haben zwei Substitutserver mit dieser
Befehlszeilenoption ausgewählt:

@example
--substitute-urls="https://a.example.org https://b.example.org"
@end example

@noindent
@cindex Reproduzierbare Erstellungen
If the ACL contains only the key for @samp{b.example.org}, and if
@samp{a.example.org} happens to serve the @emph{exact same} substitutes,
then Guix will download substitutes from @samp{a.example.org} because it
comes first in the list and can be considered a mirror of
@samp{b.example.org}.  In practice, independent build machines usually
produce the same binaries, thanks to bit-reproducible builds (see below).

When using HTTPS, the server's X.509 certificate is @emph{not} validated (in
other words, the server is not authenticated), contrary to what HTTPS
clients such as Web browsers usually do.  This is because Guix authenticates
substitute information itself, as explained above, which is what we care
about (whereas X.509 certificates are about authenticating bindings between
domain names and public keys).

@node Proxy-Einstellungen
@subsection Proxy-Einstellungen

@vindex http_proxy
@vindex https_proxy
Substitutes are downloaded over HTTP or HTTPS.  The @env{http_proxy} and
@env{https_proxy} environment variables can be set in the environment of
@command{guix-daemon} and are honored for downloads of substitutes.  Note
that the value of those environment variables in the environment where
@command{guix build}, @command{guix package}, and other client commands are
run has @emph{absolutely no effect}.

@node Fehler bei der Substitution
@subsection Fehler bei der Substitution

Selbst wenn ein Substitut für eine Ableitung verfügbar ist, schlägt die
versuchte Substitution manchmal fehl. Das kann aus vielen Gründen geschehen:
die Substitutsserver könnten offline sein, das Substitut könnte kürzlich
gelöscht worden sein, die Netzwerkverbindunge könnte unterbrochen worden
sein, usw.

When substitutes are enabled and a substitute for a derivation is available,
but the substitution attempt fails, Guix will attempt to build the
derivation locally depending on whether or not @option{--fallback} was given
(@pxref{fallback-option,, common build option @option{--fallback}}).
Specifically, if @option{--fallback} was omitted, then no local build will
be performed, and the derivation is considered to have failed.  However, if
@option{--fallback} was given, then Guix will attempt to build the
derivation locally, and the success or failure of the derivation depends on
the success or failure of the local build.  Note that when substitutes are
disabled or no substitute is available for the derivation in question, a
local build will @emph{always} be performed, regardless of whether or not
@option{--fallback} was given.

Um eine Vorstellung zu bekommen, wieviele Substitute gerade verfügbar sind,
können Sie den Befehl @command{guix weather} benutzen (siehe @ref{Aufruf von guix weather}). Dieser Befehl zeigt Statistiken darüber an, wie es um die
von einem Server verfügbaren Substitute steht.

@node Vom Vertrauen gegenüber Binärdateien
@subsection Vom Vertrauen gegenüber Binärdateien

@cindex Vertrauen, gegenüber vorerstellten Binärdateien
Derzeit hängt die Kontrolle jedes Individuums über seine Rechner von
Institutionen, Unternehmen und solchen Gruppierungen ab, die über genug
Macht und Entschlusskraft verfügen, die Rechnerinfrastruktur zu sabotieren
und ihre Schwachstellen auszunutzen. Auch wenn es bequem ist, Substitute von
@code{@value{SUBSTITUTE-SERVER}} zu benutzen, ermuntern wir Nutzer, auch
selbst Erstellungen durchzuführen oder gar ihre eigene Erstellungsfarm zu
betreiben, damit @code{@value{SUBSTITUTE-SERVER}} ein weniger interessantes
Ziel wird. Eine Art, uns zu helfen, ist, die von Ihnen erstellte Software
mit dem Befehl @command{guix publish} zu veröffentlichen, damit andere eine
größere Auswahl haben, von welchem Server sie Substitute beziehen möchten
(siehe @ref{Aufruf von guix publish}).

Guix hat die richtigen Grundlagen, um die Reproduzierbarkeit von
Erstellungen zu maximieren (siehe @ref{Funktionalitäten}). In den meisten Fällen
sollten unabhängige Erstellungen eines bestimmten Pakets zu bitweise
identischen Ergebnissen führen. Wir können also mit Hilfe einer
vielschichtigen Menge an unabhängigen Paketerstellungen die Integrität
unseres Systems besser gewährleisten. Der Befehl @command{guix challenge}
hat das Ziel, Nutzern zu ermöglichen, Substitutserver zu beurteilen, und
Entwickler dabei zu unterstützen, nichtdeterministische Paketerstellungen zu
finden (siehe @ref{Aufruf von guix challenge}). Ebenso ermöglicht es die
Befehlszeilenoption @option{--check} von @command{guix build}, dass Nutzer
bereits installierte Substitute auf Echtheit zu prüfen, indem sie lokal
nachgebaut werden (siehe @ref{build-check, @command{guix build --check}}).

In Zukunft wollen wir, dass Sie mit Guix Binärdateien von Netzwerkteilnehmer
zu Netzwerkteilnehmer („peer-to-peer“) veröffentlichen und empfangen
können. Wenn Sie mit uns dieses Projekt diskutieren möchten, kommen Sie auf
unsere Mailing-Liste @email{guix-devel@@gnu.org}.

@node Pakete mit mehreren Ausgaben.
@section Pakete mit mehreren Ausgaben.

@cindex mehrere Ausgaben, bei Paketen
@cindex Paketausgaben
@cindex Ausgaben

Oft haben in Guix definierte Pakete eine einzige @dfn{Ausgabe} — d.h.@: aus
dem Quellpaket entsteht genau ein Verzeichnis im Store. Wenn Sie
@command{guix install glibc} ausführen, wird die Standard-Paketausgabe des
GNU-libc-Pakets installiert; die Standardausgabe wird @code{out} genannt,
aber ihr Name kann weggelassen werden, wie Sie am obigen Befehl sehen. In
diesem speziellen Fall enthält die Standard-Paketausgabe von @code{glibc}
alle C-Headerdateien, gemeinsamen Bibliotheken („Shared Libraries“),
statischen Bibliotheken („Static Libraries“), Dokumentation für Info sowie
andere zusätzliche Dateien.

Manchmal ist es besser, die verschiedenen Arten von Dateien, die aus einem
einzelnen Quellpaket hervorgehen, in getrennte Ausgaben zu unterteilen. Zum
Beispiel installiert die GLib-C-Bibliothek (die von GTK und damit
zusammenhängenden Paketen benutzt wird) mehr als 20 MiB an HTML-Seiten mit
Referenzdokumentation. Um den Nutzern, die das nicht brauchen, Platz zu
sparen, wird die Dokumentation in einer separaten Ausgabe abgelegt, genannt
@code{doc}. Um also die Hauptausgabe von GLib zu installieren, zu der alles
außer der Dokumentation gehört, ist der Befehl:

@example
guix install glib
@end example

@cindex documentation
Der Befehl, um die Dokumentation zu installieren, ist:

@example
guix install glib:doc
@end example

Manche Pakete installieren Programme mit unterschiedlich großem
„Abhängigkeiten-Fußabdruck“. Zum Beispiel installiert das Paket WordNet
sowohl Befehlszeilenwerkzeuge als auch grafische Benutzerschnittstellen
(GUIs). Erstere hängen nur von der C-Bibliothek ab, während Letztere auch
von Tcl/Tk und den zu Grunde liegenden X-Bibliotheken abhängen. Jedenfalls
belassen wir deshalb die Befehlszeilenwerkzeuge in der
Standard-Paketausgabe, während sich die GUIs in einer separaten Ausgabe
befinden. So können Benutzer, die die GUIs nicht brauchen, Platz sparen. Der
Befehl @command{guix size} kann dabei helfen, solche Situationen zu erkennen
(siehe @ref{Aufruf von guix size}). @command{guix graph} kann auch helfen
(siehe @ref{Aufruf von guix graph}).

In der GNU-Distribution gibt es viele solche Pakete mit mehreren
Ausgaben. Andere Konventionen für Ausgabenamen sind zum Beispiel @code{lib}
für Bibliotheken und eventuell auch ihre Header-Dateien,, @code{bin} für
eigenständige Programme und @code{debug} für Informationen zur
Fehlerbehandlung (siehe @ref{Dateien zur Fehlersuche installieren}). Die Ausgaben
eines Pakets stehen in der dritten Spalte der Anzeige von @command{guix
package --list-available} (siehe @ref{Aufruf von guix package}).


@node Aufruf von guix gc
@section @command{guix gc} aufrufen

@cindex Müllsammler
@cindex Plattenspeicher
Pakete, die zwar installiert sind, aber nicht benutzt werden, können vom
@dfn{Müllsammler} entfernt werden. Mit dem Befehl @command{guix gc} können
Benutzer den Müllsammler ausdrücklich aufrufen, um Speicher im Verzeichnis
@file{/gnu/store} freizugeben. Dies ist der @emph{einzige} Weg, Dateien aus
@file{/gnu/store} zu entfernen — das manuelle Entfernen von Dateien kann den
Store irreparabel beschädigen!

@cindex GC-Wurzeln
@cindex Müllsammlerwurzeln
Der Müllsammler kennt eine Reihe von @dfn{Wurzeln}: Jede Datei in
@file{/gnu/store}, die von einer Wurzel aus erreichbar ist, gilt als
@dfn{lebendig} und kann nicht entfernt werden; jede andere Datei gilt als
@dfn{tot} und ist ein Kandidat, gelöscht zu werden. Die Menge der
Müllsammlerwurzeln (kurz auch „GC-Wurzeln“, von englisch „Garbage
Collector“) umfasst Standard-Benutzerprofile; standardmäßig werden diese
Müllsammlerwurzeln durch symbolische Verknüpfungen in
@file{/var/guix/gcroots} dargestellt. Neue Müllsammlerwurzeln können zum
Beispiel mit @command{guix build --root} festgelegt werden (siehe
@ref{Aufruf von guix build}). Der Befehl @command{guix gc --list-roots} listet
sie auf.

Bevor Sie mit @code{guix gc --collect-garbage} Speicher freimachen, wollen
Sie vielleicht alte Generationen von Benutzerprofilen löschen, damit alte
Paketerstellungen von diesen Generationen entfernt werden können. Führen Sie
dazu @code{guix package --delete-generations} aus (siehe @ref{Aufruf von guix package}).

Unsere Empfehlung ist, dass Sie den Müllsammler regelmäßig laufen lassen und
wenn Sie wenig freien Speicherplatz zur Verfügung haben. Um zum Beispiel
sicherzustellen, dass Sie mindestens 5@tie{}GB auf Ihrer Platte zur
Verfügung haben, benutzen Sie einfach:

@example
guix gc -F 5G
@end example

Es ist völlig sicher, dafür eine nicht interaktive, regelmäßige
Auftragsausführung vorzugeben (siehe @ref{Geplante Auftragsausführung} für eine
Erklärung, wie man das tun kann). @command{guix gc} ohne
Befehlszeilenargumente auszuführen, lässt so viel Müll wie möglich sammeln,
aber das ist oft nicht, was man will, denn so muss man unter Umständen
Software erneut erstellen oder erneut herunterladen, weil der Müllsammler
sie als „tot“ ansieht, sie aber zur Erstellung anderer Software wieder
gebraucht wird — das trifft zum Beispiel auf die Compiler-Toolchain zu.

The @command{guix gc} command has three modes of operation: it can be used
to garbage-collect any dead files (the default), to delete specific files
(the @option{--delete} option), to print garbage-collector information, or
for more advanced queries.  The garbage collection options are as follows:

@table @code
@item --collect-garbage[=@var{Minimum}]
@itemx -C [@var{Minimum}]
Lässt Müll sammeln — z.B.@: nicht erreichbare Dateien in @file{/gnu/store}
und seinen Unterverzeichnissen. Wird keine andere Befehlszeilenoption
angegeben, wird standardmäßig diese durchgeführt.

Wenn ein @var{Minimum} angegeben wurde, hört der Müllsammler auf, sobald
@var{Minimum} Bytes gesammelt wurden. Das @var{Minimum} kann die Anzahl der
Bytes bezeichnen oder mit einer Einheit als Suffix versehen sein, wie etwa
@code{MiB} für Mebibytes und @code{GB} für Gigabytes (siehe @ref{Block size,
size specifications,, coreutils, GNU Coreutils}).

Wird kein @var{Minimum} angegeben, sammelt der Müllsammler allen Müll.

@item --free-space=@var{Menge}
@itemx -F @var{Menge}
Sammelt Müll, bis die angegebene @var{Menge} an freiem Speicher in
@file{/gnu/store} zur Verfügung steht, falls möglich; die @var{Menge} ist
eine Speichergröße wie @code{500MiB}, wie oben beschrieben.

Wenn die angegebene  @var{Menge} oder mehr bereits in @file{/gnu/store} frei
verfügbar ist, passiert nichts.

@item --delete-generations[=@var{Dauer}]
@itemx -d [@var{Dauer}]
Bevor der Müllsammelvorgang beginnt, werden hiermit alle Generationen von
allen Benutzerprofilen gelöscht, die älter sind als die angegebene
@var{Dauer}; wird es als Administratornutzer „root“ ausgeführt, geschieht
dies mit den Profilen @emph{von allen Benutzern}.

Zum Beispiel löscht der folgende Befehl alle Generationen Ihrer Profile, die
älter als zwei Monate sind (ausgenommen die momentanen Generationen), und
schmeißt dann den Müllsammler an, um Platz freizuräumen, bis mindestens 10
GiB verfügbar sind:

@example
guix gc -d 2m -F 10G
@end example

@item --delete
@itemx -D
Versucht, alle als Argumente angegebenen Dateien oder Verzeichnisse im Store
zu löschen. Dies schlägt fehl, wenn manche der Dateien oder Verzeichnisse
nicht im Store oder noch immer lebendig sind.

@item --list-failures
Store-Objekte auflisten, die zwischengespeicherten Erstellungsfehlern
entsprechen.

Hierbei wird nichts ausgegeben, sofern der Daemon nicht mit
@option{--cache-failures} gestartet wurde (siehe @ref{Aufruf des guix-daemon,
@option{--cache-failures}}).

@item --list-roots
Die Müllsammlerwurzeln auflisten, die dem Nutzer gehören. Wird der Befehl
als Administratornutzer ausgeführt, werden @emph{alle} Müllsammlerwurzeln
aufgelistet.

@item --list-busy
Solche Store-Objekte auflisten, die von aktuell laufenden Prozessen benutzt
werden. Diese Store-Objekte werden praktisch wie Müllsammlerwurzeln
behandelt; sie können nicht gelöscht werden.

@item --clear-failures
Die angegebenen Store-Objekte aus dem Zwischenspeicher für fehlgeschlagene
Erstellungen entfernen.

Auch diese Option macht nur Sinn, wenn der Daemon mit
@option{--cache-failures} gestartet wurde. Andernfalls passiert nichts.

@item --list-dead
Zeigt die Liste toter Dateien und Verzeichnisse an, die sich noch im Store
befinden — das heißt, Dateien, die von keiner Wurzel mehr erreichbar sind.

@item --list-live
Zeige die Liste lebendiger Store-Dateien und -Verzeichnisse.

@end table

Außerdem können Referenzen unter bestehenden Store-Dateien gefunden werden:

@table @code

@item --references
@itemx --referrers
@cindex Paketabhängigkeiten
Listet die referenzierten bzw. sie referenzierenden Objekte der angegebenen
Store-Dateien auf.

@item --requisites
@itemx -R
@cindex Abschluss
Listet alle Voraussetzungen der als Argumente übergebenen Store-Dateien
auf. Voraussetzungen sind die Store-Dateien selbst, ihre Referenzen sowie
die Referenzen davon, rekursiv. Mit anderen Worten, die zurückgelieferte
Liste ist der @dfn{transitive Abschluss} dieser Store-Dateien.

Der Abschnitt @ref{Aufruf von guix size} erklärt ein Werkzeug, um den
Speicherbedarf des Abschlusses eines Elements zu ermitteln. Siehe
@ref{Aufruf von guix graph} für ein Werkzeug, um den Referenzgraphen zu
veranschaulichen.

@item --derivers
@cindex Ableitung
Liefert die Ableitung(en), die zu den angegebenen Store-Objekten führen
(siehe @ref{Ableitungen}).

Zum Beispiel liefert dieser Befehl:

@example
guix gc --derivers `guix package -I ^emacs$ | cut -f4`
@end example

@noindent
die @file{.drv}-Datei(en), die zum in Ihrem Profil installierten
@code{emacs}-Paket führen.

Beachten Sie, dass es auch sein kann, dass keine passenden
@file{.drv}-Dateien existieren, zum Beispiel wenn diese Dateien bereits dem
Müllsammler zum Opfer gefallen sind. Es kann auch passieren, dass es mehr
als eine passende @file{.drv} gibt, bei Ableitungen mit fester Ausgabe.
@end table

Zuletzt können Sie mit folgenden Befehlszeilenoptionen die Integrität des
Stores prüfen und den Plattenspeicherverbrauch im Zaum halten.

@table @option

@item --verify[=@var{Optionen}]
@cindex Integrität, des Stores
@cindex Integritätsprüfung
Die Integrität des Stores verifizieren

Standardmäßig wird sichergestellt, dass alle Store-Objekte, die in der
Datenbank des Daemons als gültig markiert wurden, auch tatsächlich in
@file{/gnu/store} existieren.

Wenn angegeben, müssen die @var{Optionen} eine kommagetrennte Liste aus
mindestens einem der Worte @code{contents} und @code{repair} sein.

Wenn Sie @option{--verify=contents} übergeben, berechnet der Daemon den Hash
des Inhalts jedes Store-Objekts und vergleicht ihn mit dem Hash in der
Datenbank. Sind die Hashes ungleich, wird eine Datenbeschädigung
gemeldet. Weil dabei @emph{alle Dateien im Store} durchlaufen werden, kann
der Befehl viel Zeit brauchen, besonders auf Systemen mit langsamer Platte.

@cindex Store, reparieren
@cindex Datenbeschädigung, Behebung
Mit @option{--verify=repair} oder @option{--verify=contents,repair} versucht
der Daemon, beschädigte Store-Objekte zu reparieren, indem er Substitute für
selbige herunterlädt (siehe @ref{Substitute}). Weil die Reparatur nicht
atomar und daher womöglich riskant ist, kann nur der Systemadministrator den
Befehl benutzen. Eine weniger aufwendige Alternative, wenn Sie wissen,
welches Objekt beschädigt ist, ist, @command{guix build --repair} zu
benutzen (siehe @ref{Aufruf von guix build}).

@item --optimize
@cindex Deduplizieren
Den Store durch Nutzung harter Verknüpfungen für identische Dateien
optimieren — mit anderen Worten wird der Store @dfn{dedupliziert}.

The daemon performs deduplication after each successful build or archive
import, unless it was started with @option{--disable-deduplication}
(@pxref{Aufruf des guix-daemon, @option{--disable-deduplication}}).  Thus,
this option is primarily useful when the daemon was running with
@option{--disable-deduplication}.

@end table

@node Aufruf von guix pull
@section @command{guix pull} aufrufen

@cindex Aktualisieren von Guix
@cindex Updaten von Guix
@cindex @command{guix pull}
@cindex pull
Nach der Installation oder Aktualisierung wird stets die neueste Version von
Paketen verwendet, die in der aktuell installierten Distribution verfügbar
ist. Um die Distribution und die Guix-Werkzeuge zu aktualisieren, führen Sie
@command{guix pull} aus. Der Befehl lädt den neuesten Guix-Quellcode
einschließlich Paketbeschreibungen herunter und installiert ihn. Quellcode
wird aus einem @uref{https://git-scm.com, Git-Repository} geladen,
standardmäßig dem offiziellen Repository von GNU@tie{}Guix, was Sie aber
auch ändern können.

Genauer gesagt lädt @command{guix pull} Code von den @dfn{Kanälen} herunter
(siehe @ref{Kanäle}), die an einer der folgenden Stellen, in dieser
Reihenfolge, angegeben wurden:

@enumerate
@item
die Befehlszeilenoption @option{--channels},
@item
die Datei @file{~/.config/guix/channels.scm} des Benutzers,
@item
die systemweite @file{/etc/guix/channels.scm}-Datei,
@item
die eingebauten vorgegebenen Kanäle, wie sie in der Variablen
@code{%default-channels} festgelegt sind.
@end enumerate

Danach wird @command{guix package} Pakete und ihre Versionen entsprechend
der gerade heruntergeladenen Kopie von Guix benutzen. Nicht nur das, auch
alle Guix-Befehle und Scheme-Module werden aus der neuesten Version von Guix
kommen. Neue @command{guix}-Unterbefehle, die durch die Aktualisierung
hinzugekommen sind, werden also auch verfügbar.

Jeder Nutzer kann seine Kopie von Guix mittels @command{guix pull}
aktualisieren, wodurch sich nur für den Nutzer etwas verändert, der
@command{guix pull} ausgeführt hat. Wenn also zum Beispiel der
Administratornutzer @code{root} den Befehl @command{guix pull} ausführt, hat
das keine Auswirkungen auf die für den Benutzer @code{alice} sichtbare
Guix-Version, und umgekehrt.

Das Ergebnis von @command{guix pull} ist ein als
@file{~/.config/guix/current} verfügbares @dfn{Profil} mit dem neuesten
Guix. Stellen Sie sicher, dass es am Anfang Ihres Suchpfades steht, damit
Sie auch wirklich das neueste Guix und sein Info-Handbuch sehen (siehe
@ref{Dokumentation}):

@example
export PATH="$HOME/.config/guix/current/bin:$PATH"
export INFOPATH="$HOME/.config/guix/current/share/info:$INFOPATH"
@end example

The @option{--list-generations} or @option{-l} option lists past generations
produced by @command{guix pull}, along with details about their provenance:

@example
$ guix pull -l
Generation 1	Jun 10 2018 00:18:18
  guix 65956ad
    repository URL: https://git.savannah.gnu.org/git/guix.git
    branch: origin/master
    commit: 65956ad3526ba09e1f7a40722c96c6ef7c0936fe

Generation 2	Jun 11 2018 11:02:49
  guix e0cc7f6
    repository URL: https://git.savannah.gnu.org/git/guix.git
    branch: origin/master
    commit: e0cc7f669bec22c37481dd03a7941c7d11a64f1d
  2 new packages: keepalived, libnfnetlink
  6 packages upgraded: emacs-nix-mode@@2.0.4,
    guile2.0-guix@@0.14.0-12.77a1aac, guix@@0.14.0-12.77a1aac,
    heimdal@@7.5.0, milkytracker@@1.02.00, nix@@2.0.4

Generation 3	Jun 13 2018 23:31:07	(current)
  guix 844cc1c
    repository URL: https://git.savannah.gnu.org/git/guix.git
    branch: origin/master
    commit: 844cc1c8f394f03b404c5bb3aee086922373490c
  28 new packages: emacs-helm-ls-git, emacs-helm-mu, …
  69 packages upgraded: borg@@1.1.6, cheese@@3.28.0, …
@end example

Im Abschnitt @ref{Aufruf von guix describe, @command{guix describe}} werden
andere Möglichkeiten erklärt, sich den momentanen Zustand von Guix
beschreiben zu lassen.

Das Profil @code{~/.config/guix/current} verhält sich genau wie die durch
@command{guix package} erzeugten Profile (siehe @ref{Aufruf von guix package}). Das bedeutet, Sie können seine Generationen auflisten und es auf
die vorherige Generation — also das vorherige Guix — zurücksetzen und so
weiter:

@example
$ guix pull --roll-back
Von Generation „3“ zu „2“ gewechselt
$ guix pull --delete-generations=1
/var/guix/profiles/per-user/charlie/current-guix-1-link wird gelöscht
@end example

Sie können auch @command{guix package} benutzen (siehe @ref{Aufruf von guix package}), um das Profil zu verwalten, indem Sie es explizit angeben.:
@example
$ guix package -p ~/.config/guix/current --roll-back
switched from generation 3 to 2
$ guix package -p ~/.config/guix/current --delete-generations=1
deleting /var/guix/profiles/per-user/charlie/current-guix-1-link
@end example

Der Befehl @command{guix pull} wird in der Regel ohne Befehlszeilenargumente
aufgerufen, aber er versteht auch folgende Befehlszeilenoptionen:

@table @code
@item --url=@var{URL}
@itemx --commit=@var{Commit}
@itemx --branch=@var{Branch}
Code wird für den @code{guix}-Kanal von der angegebenen @var{URL} für den
angegebenen @var{Commit} (eine gültige Commit-ID, dargestellt als
hexadezimale Zeichenkette) oder @var{Branch} heruntergeladen.

@cindex @file{channels.scm}, Konfigurationsdatei
@cindex Konfigurationsdatei für Kanäle
Diese Befehlszeilenoptionen sind manchmal bequemer, aber Sie können Ihre
Konfiguration auch in der Datei @file{~/.config/guix/channels.scm} oder über
die Option @option{--channels} angeben (siehe unten).

@item --channels=@var{Datei}
@itemx -C @var{Datei}
Die Liste der Kanäle aus der angegebenen @var{Datei} statt aus
@file{~/.config/guix/channels.scm} oder aus @file{/etc/guix/channels.scm}
auslesen. Die @var{Datei} muss Scheme-Code enthalten, der zu einer Liste von
Kanalobjekten ausgewertet wird. Siehe @ref{Kanäle} für nähere
Informationen.

@cindex Neuigkeiten über Kanäle
@item --news
@itemx -N
Die Liste anzeigen, welche Pakete seit der vorherigen Generation hinzugefügt
oder aktualisiert wurden, und gelegentlich auch, welche Neuigkeiten die
Kanalautoren für ihre Nutzer geschrieben haben (siehe @ref{Kanäle, Writing
Channel News}).

Die Paketinformationen sind dieselben, die auch nach Abschluss von
@command{guix pull} angezeigt werden, aber ohne Auslassungen; sie ähnelt
auch der Ausgabe von @command{guix pull -l} für die neueste Generation
(siehe unten).

@item --list-generations[=@var{Muster}]
@itemx -l [@var{Muster}]
Alle Generationen von @file{~/.config/guix/current} bzw., wenn ein
@var{Muster} angegeben wird, die dazu passenden Generationen auflisten. Die
Syntax für das @var{Muster} ist dieselbe wie bei @code{guix package
--list-generations} (siehe @ref{Aufruf von guix package}).

@item --roll-back
@cindex rücksetzen
@cindex Zurücksetzen von Transaktionen
@cindex Transaktionen, zurücksetzen
Zur vorherigen @dfn{Generation} von @file{~/.config/guix/current}
zurückwechseln — d.h.@: die letzte Transaktion rückgängig machen.

@item --switch-generation=@var{Muster}
@itemx -S @var{Muster}
@cindex Generationen
Wechselt zu der bestimmten Generation, die durch das @var{Muster} bezeichnet
wird.

@var{pattern} may be either a generation number or a number prefixed with
``+'' or ``-''.  The latter means: move forward/backward by a specified
number of generations.  For example, if you want to return to the latest
generation after @option{--roll-back}, use @option{--switch-generation=+1}.

@item --delete-generations[=@var{Muster}]
@itemx -d [@var{Muster}]
Wird kein @var{Muster} angegeben, werden alle Generationen außer der
aktuellen entfernt.

This command accepts the same patterns as @option{--list-generations}.  When
@var{pattern} is specified, delete the matching generations.  When
@var{pattern} specifies a duration, generations @emph{older} than the
specified duration match.  For instance, @option{--delete-generations=1m}
deletes generations that are more than one month old.

Falls die aktuelle Generation zum Muster passt, wird sie @emph{nicht}
gelöscht.

Beachten Sie, dass Sie auf gelöschte Generationen nicht zurückwechseln
können. Dieser Befehl sollte also nur mit Vorsicht benutzt werden.

Im Abschnitt @ref{Aufruf von guix describe, @command{guix describe}} wird eine
Möglichkeit erklärt, sich Informationen nur über die aktuelle Generation
anzeigen zu lassen.

@item --profile=@var{Profil}
@itemx -p @var{Profil}
Auf @var{Profil} anstelle von @file{~/.config/guix/current} arbeiten.

@item --dry-run
@itemx -n
Anzeigen, welche(r) Commit(s) für die Kanäle benutzt würde(n) und was
jeweils erstellt oder substituiert würde, ohne es tatsächlich durchzuführen.

@item --allow-downgrades
Allow pulling older or unrelated revisions of channels than those currently
in use.

@cindex downgrade attacks, protection against
By default, @command{guix pull} protects against so-called ``downgrade
attacks'' whereby the Git repository of a channel would be reset to an
earlier or unrelated revision of itself, potentially leading you to install
older, known-vulnerable versions of software packages.

@quotation Anmerkung
Make sure you understand its security implications before using
@option{--allow-downgrades}.
@end quotation

@item --system=@var{System}
@itemx -s @var{System}
Versuchen, für die angegebene Art von @var{System} geeignete Binärdateien zu
erstellen — z.B.@: @code{i686-linux} — statt für die Art von System, das die
Erstellung durchführt.

@item --verbose
Ausführliche Informationen ausgeben und Erstellungsprotokolle auf der
Standardfehlerausgabe ausgeben.

@item --bootstrap
Das neueste Guix mit dem Bootstrap-Guile erstellen. Diese
Befehlszeilenoption ist nur für Guix-Entwickler von Nutzen.
@end table

Mit Hilfe von @dfn{Kanälen} können Sie @command{guix pull} anweisen, von
welchem Repository und welchem Branch Guix aktualisiert werden soll, sowie
von welchen @emph{weiteren} Repositorys Paketmodule bezogen werden
sollen. Im Abschnitt @ref{Kanäle} finden Sie nähere Informationen.

Außerdem unterstützt @command{guix pull} alle gemeinsamen
Erstellungsoptionen (siehe @ref{Gemeinsame Erstellungsoptionen}).

@node Kanäle
@section Kanäle

@cindex Kanäle
@cindex @file{channels.scm}, Konfigurationsdatei
@cindex Konfigurationsdatei für Kanäle
@cindex @command{guix pull}, Konfigurationsdatei
@cindex Konfiguration von @command{guix pull}
Guix und die Sammlung darin verfügbarer Pakete können Sie durch Ausführen
von @command{guix pull} aktualisieren (siehe @ref{Aufruf von guix pull}). Standardmäßig lädt @command{guix pull} Guix selbst vom offiziellen
Repository von GNU@tie{}Guix herunter und installiert es. Diesen Vorgang
können Sie anpassen, indem Sie @dfn{Kanäle} in der Datei
@file{~/.config/guix/channels.scm} angeben. Ein Kanal enthält eine Angabe
einer URL und eines Branches eines zu installierenden Git-Repositorys und
Sie können @command{guix pull} veranlassen, die Aktualisierungen von einem
oder mehreren Kanälen zu beziehen. Mit anderen Worten können Kanäle benutzt
werden, um Guix @emph{anzupassen} und zu @emph{erweitern}, wie wir im
Folgenden sehen werden.

@subsection Einen eigenen Guix-Kanal benutzen

Der Kanal namens @code{guix} gibt an, wovon Guix selbst — seine
Befehlszeilenwerkzeuge und seine Paketsammlung — heruntergeladen werden
sollen. Wenn Sie zum Beispiel mit Ihrer eigenen Kopie des Guix-Repositorys
arbeiten möchten und diese auf @code{example.org} zu finden ist, und zwar im
Branch namens @code{super-hacks}, dann schreiben Sie folgende Spezifikation
in @code{~/.config/guix/channels.scm}:

@lisp
;; 'guix pull' mein eigenes Repository benutzen lassen.
(list (channel
        (name 'guix)
        (url "https://example.org/my-guix.git")
        (branch "super-hacks")))
@end lisp

@noindent
Ab dann wird @command{guix pull} seinen Code vom Branch @code{super-hacks}
des Repositorys auf @code{example.org} beziehen.

@subsection Weitere Kanäle angeben

@cindex Paketsammlung erweitern (Kanäle)
@cindex Eigene Pakete (Kanäle)
@cindex Kanäle, für eigene Pakete
Sie können auch @emph{weitere Kanäle} als Bezugsquelle angeben. Sagen wir,
Sie haben ein paar eigene Paketvarianten oder persönliche Pakete, von denen
Sie meinen, dass sie @emph{nicht} geeignet sind, ins Guix-Projekt selbst
aufgenommen zu werden, die Ihnen aber dennoch wie andere Pakete auf der
Befehlszeile zur Verfügung stehen sollen. Dann würden Sie zunächst Module
mit diesen Paketdefinitionen schreiben (siehe @ref{Paketmodule}) und
diese dann in einem Git-Repository verwalten, welches Sie selbst oder jeder
andere dann als zusätzlichen Kanal eintragen können, von dem Pakete geladen
werden. Klingt gut, oder?

@c What follows stems from discussions at
@c <https://debbugs.gnu.org/cgi/bugreport.cgi?bug=22629#134> as well as
@c earlier discussions on guix-devel@gnu.org.
@quotation Warnung
Bevor Sie, verehrter Nutzer, ausrufen: „Wow, das ist @emph{soooo coool}!“,
und Ihren eigenen Kanal der Welt zur Verfügung stellen, möchten wir Ihnen
auch ein paar Worte der Warnung mit auf den Weg geben:

@itemize
@item
Bevor Sie einen Kanal veröffentlichen, überlegen Sie sich bitte erst, ob Sie
die Pakete nicht besser zum eigentlichen Guix-Projekt beisteuern (siehe
@ref{Mitwirken}). Das Guix-Projekt ist gegenüber allen Arten freier
Software offen und zum eigentlichen Guix gehörende Pakete stehen allen
Guix-Nutzern zur Verfügung, außerdem profitieren sie von Guix’
Qualitätssicherungsprozess.

@item
Wenn Sie Paketdefinitionen außerhalb von Guix betreuen, sehen wir
Guix-Entwickler es als @emph{Ihre Aufgabe an, deren Kompatibilität
sicherzstellen}. Bedenken Sie, dass Paketmodule und Paketdefinitionen nur
Scheme-Code sind, der verschiedene Programmierschnittstellen (APIs)
benutzt. Wir nehmen uns das Recht heraus, diese APIs jederzeit zu ändern,
damit wir Guix besser machen können, womöglich auf eine Art, wodurch Ihr
Kanal nicht mehr funktioniert. Wir ändern APIs nie einfach so, werden aber
auch @emph{nicht} versprechen, APIs nicht zu verändern.

@item
Das bedeutet auch, dass Sie, wenn Sie einen externen Kanal verwenden und
dieser kaputt geht, Sie dies bitte @emph{den Autoren des Kanals} und nicht
dem Guix-Projekt melden.
@end itemize

Wir haben Sie gewarnt! Allerdings denken wir auch, dass externe Kanäle eine
praktische Möglichkeit sind, die Paketsammlung von Guix zu ergänzen und Ihre
Verbesserungen mit anderen zu teilen, wie es dem Grundgedanken
@uref{https://www.gnu.org/philosophy/free-sw.html, freier Software}
entspricht. Bitte schicken Sie eine E-Mail an @email{guix-devel@@gnu.org},
wenn Sie dies diskutieren möchten.
@end quotation

Um einen Kanal zu benutzen, tragen Sie ihn in
@code{~/.config/guix/channels.scm} ein, damit @command{guix pull} diesen
Kanal @emph{zusätzlich} zu den standardmäßigen Guix-Kanälen als Paketquelle
verwendet:

@vindex %default-channels
@lisp
;; Meine persönlichen Pakete zu denen von Guix dazunehmen.
(cons (channel
        (name 'meine-persönlichen-pakete)
        (url "https://example.org/personal-packages.git"))
      %default-channels)
@end lisp

@noindent
Beachten Sie, dass der obige Schnipsel (wie immer!)@: Scheme-Code ist; mit
@code{cons} fügen wir einen Kanal zur Liste der Kanäle hinzu, an die die
Variable @code{%default-channels} gebunden ist (siehe @ref{Pairs,
@code{cons} and lists,, guile, GNU Guile Reference Manual}). Mit diesem
Dateiinhalt wird @command{guix pull} nun nicht mehr nur Guix, sondern auch
die Paketmodule aus Ihrem Repository erstellen. Das Ergebnis in
@file{~/.config/guix/current} ist so die Vereinigung von Guix und Ihren
eigenen Paketmodulen.

@example
$ guix pull --list-generations
…
Generation 19	Aug 27 2018 16:20:48
  guix d894ab8
    repository URL: https://git.savannah.gnu.org/git/guix.git
    branch: master
    commit: d894ab8e9bfabcefa6c49d9ba2e834dd5a73a300
  meine-persönlichen-pakete dd3df5e
    repository URL: https://example.org/personal-packages.git
    branch: master
    commit: dd3df5e2c8818760a8fc0bd699e55d3b69fef2bb
  11 new packages: mein-gimp, mein-emacs-mit-coolen-features, …
  4 packages upgraded: emacs-racket-mode@@0.0.2-2.1b78827, …
@end example

@noindent
Obige Ausgabe von @command{guix pull} zeigt an, dass Generation@tie{}19
sowohl Guix als auch Pakete aus dem Kanal @code{meine-persönlichen-pakete}
enthält. Unter den aufgeführten neuen und aktualisierten Paketen kommen
vielleicht manche wie @code{mein-gimp} und
@code{mein-emacs-mit-coolen-features} aus @code{meine-persönlichen-pakete},
während andere aus dem Standard-Guix-Kanal kommen.

Um einen Kanal zu erzeugen, müssen Sie ein Git-Repository mit Ihren eigenen
Paketmodulen erzeugen und den Zugriff darauf ermöglichen. Das Repository
kann beliebigen Inhalt haben, aber wenn es ein nützlicher Kanal sein soll,
muss es Guile-Module enthalten, die Pakete exportieren. Sobald Sie anfangen,
einen Kanal zu benutzen, verhält sich Guix, als wäre das Wurzelverzeichnis
des Git-Repositorys des Kanals in Guiles Ladepfad enthalten (siehe @ref{Load
Paths,,, guile, GNU Guile Reference Manual}). Wenn Ihr Kanal also zum
Beispiel eine Datei als @file{my-packages/my-tools.scm} enthält, die ein
Guile-Modul definiert, dann wird das Modul unter dem Namen
@code{(my-packages my-tools)} verfügbar sein und Sie werden es wie jedes
andere Modul benutzen können (siehe @ref{Module,,, guile, GNU Guile
Reference Manual}).

@cindex Abhängigkeiten, bei Kanälen
@cindex Metadaten, bei Kanälen
@subsection Kanalabhängigkeiten deklarieren

Kanalautoren können auch beschließen, die Paketsammlung von anderen Kanälen
zu erweitern. Dazu können sie in einer Metadatendatei @file{.guix-channel}
deklarieren, dass ihr Kanal von anderen Kanälen abhängt. Diese Datei muss im
Wurzelverzeichnis des Kanal-Repositorys platziert werden.

Die Metadatendatei sollte einen einfachen S-Ausdruck wie diesen enthalten:

@lisp
(channel
 (version 0)
 (dependencies
  (channel
   (name irgendeine-sammlung)
   (url "https://example.org/erste-sammlung.git"))
  (channel
   (name eine-andere-sammlung)
   (url "https://example.org/zweite-sammlung.git")
   (branch "testing"))))
@end lisp

Im Beispiel oben wird deklariert, dass dieser Kanal von zwei anderen Kanälen
abhängt, die beide automatisch geladen werden. Die vom Kanal angebotenen
Module werden in einer Umgebung kompiliert, in der die Module all dieser
deklarierten Kanäle verfügbar sind.

Um Verlässlichkeit und Wartbarkeit zu gewährleisten, sollten Sie darauf
verzichten, eine Abhängigkeit von Kanälen herzustellen, die Sie nicht
kontrollieren, außerdem sollten Sie sich auf eine möglichst kleine Anzahl
von Abhängigkeiten beschränken.

@cindex Unterverzeichnis, Kanäle
@subsection Paketmodule in einem Unterverzeichnis

Als Kanalautor möchten Sie vielleicht Ihre Kanalmodule in einem
Unterverzeichnis anlegen. Wenn sich Ihre Module im Unterverzeichnis
@file{guix} befinden, müssen Sie eine Datei @file{.guix-channel} mit
Metadaten einfügen:

@lisp
(channel
  (version 0)
  (directory "guix"))
@end lisp

@cindex Neuigkeiten, bei Kanälen
@subsection Kanalneuigkeiten verfassen

Kanalautoren möchten ihren Nutzern vielleicht manchmal Informationen über
wichtige Änderungen im Kanal zukommen lassen. Man könnte allen eine E-Mail
schicken, aber das wäre unbequem.

Stattdessen können Kanäle eine Datei mit Neuigkeiten („News File“) anbieten:
Wenn die Kanalnutzer @command{guix pull} ausführen, wird diese Datei
automatisch ausgelesen. Mit @command{guix pull --news} kann man sich die
Ankündigungen anzeigen lassen, die den neu gepullten Commits entsprechen,
falls es welche gibt.

Dazu müssen Kanalautoren zunächst den Namen der Datei mit Neuigkeiten in der
Datei @file{.guix-channel} nennen:

@lisp
(channel
  (version 0)
  (news-file "etc/news.txt"))
@end lisp

Die Datei mit Neuigkeiten, @file{etc/news.txt} in diesem Beispiel, muss
selbst etwa so aussehen:

@lisp
(channel-news
  (version 0)
  (entry (tag "the-bug-fix")
         (title (en "Fixed terrible bug")
                (fr "Oh la la"))
         (body (en "@@emph@{Good news@}!  It's fixed!")
               (eo "Certe ĝi pli bone funkcias nun!")))
  (entry (commit "bdcabe815cd28144a2d2b4bc3c5057b051fa9906")
         (title (en "Added a great package")
                (ca "Què vol dir guix?"))
         (body (en "Don't miss the @@code@{hello@} package!"))))
@end lisp

Die Datei setzt sich aus einer Liste von Einträgen mit Neuigkeiten („News
Entries“) zusammen. Jeder Eintrag ist mit einem Commit oder einem Tag
assoziiert und beschreibt die Änderungen, die in diesem oder auch
vorangehenden Commits gemacht wurden. Benutzer sehen die Einträge nur beim
erstmaligen Übernehmen des Commits, auf den sich der jeweilige Eintrag
bezieht.

Das @code{title}-Feld sollte eine einzeilige Zusammenfassung sein, während
@code{body} beliebig lang sein kann. Beide können Texinfo-Auszeichnungen
enthalten (siehe @ref{Overview,,, texinfo, GNU Texinfo}). Sowohl
@code{title} als auch @code{body} sind dabei eine Liste aus Tupeln mit
jeweils Sprachcode und Mitteilung, wodurch @command{guix pull} Neuigkeiten
in derjenigen Sprache anzeigen kann, die der vom Nutzer eingestellten Locale
entspricht.

Wenn Sie Neuigkeiten mit einem gettext-basierten Arbeitsablauf übersetzen
möchten, können Sie übersetzbare Zeichenketten mit @command{xgettext}
extrahieren (siehe @ref{xgettext Invocation,,, gettext, GNU Gettext
Utilities}). Unter der Annahme, dass Sie Einträge zu Neuigkeiten zunächst
auf Englisch verfassen, können Sie mit diesem Befehl eine PO-Datei erzeugen,
die die zu übersetzenden Zeichenketten enthält:

@example
xgettext -o news.po -l scheme -ken etc/news.scm
@end example

Kurz gesagt, ja, Sie können Ihren Kanal sogar als Blog missbrauchen. Aber
das ist @emph{nicht ganz}, was Ihre Nutzer erwarten dürften.

@subsection Guix nachbilden

@cindex Festsetzen, bei Kanälen
@cindex Nachbilden von Guix
@cindex Reproduzierbarkeit von Guix
Die Ausgabe von @command{guix pull --list-generations} oben zeigt genau, aus
welchen Commits diese Guix-Instanz erstellt wurde. Wir können Guix so zum
Beispiel auf einer anderen Maschine nachbilden, indem wir eine
Kanalspezifikation in @file{~/.config/guix/channels.scm} angeben, die auf
diese Commits „festgesetzt“ ist.

@lisp
;; Ganz bestimmte Commits der relevanten Kanäle installieren.
(list (channel
       (name 'guix)
       (url "https://git.savannah.gnu.org/git/guix.git")
       (commit "d894ab8e9bfabcefa6c49d9ba2e834dd5a73a300"))
      (channel
       (name 'meine-persönlichen-pakete)
       (url "https://example.org/personal-packages.git")
       (commit "dd3df5e2c8818760a8fc0bd699e55d3b69fef2bb")))
@end lisp

Der Befehl @command{guix describe --format=channels} kann diese Kanalliste
sogar direkt erzeugen (siehe @ref{Aufruf von guix describe}). Die erzeugte
Datei kann mit den @code{-C} genannten Befehlszeilenoptionen von
@command{guix pull} (siehe @ref{Aufruf von guix pull}) oder von @command{guix
time-machine} (siehe @ref{Aufruf von time-machine}) benutzt werden.

Somit läuft auf beiden Maschinen @emph{genau dasselbe Guix} und es hat
Zugang zu @emph{genau denselben Paketen}. Die Ausgabe von @command{guix
build gimp} auf der einen Maschine wird Bit für Bit genau dieselbe wie die
desselben Befehls auf der anderen Maschine sein. Das bedeutet auch, dass
beide Maschinen Zugang zum gesamten Quellcode von Guix und daher auch
transitiv Zugang zum Quellcode jedes davon definierten Pakets haben.

Das verleiht Ihnen Superkräfte, mit denen Sie die Provenienz binärer
Artefakte sehr feinkörnig nachverfolgen können und Software-Umgebungen nach
Belieben nachbilden können. Sie können es als eine Art Fähigkeit zur
„Meta-Reproduzierbarkeit“ auffassen, wenn Sie möchten. Der Abschnitt
@ref{Untergeordnete} beschreibt eine weitere Möglichkeit, diese Superkräfte zu
nutzen.

@node Aufruf von time-machine
@section @command{guix time-machine} aufrufen

@cindex @command{guix time-machine}
@cindex Festsetzen, bei Kanälen
@cindex Nachbilden von Guix
@cindex Reproduzierbarkeit von Guix

Der Befehl @command{guix time-machine} erleichtert den Zugang zu anderen
Versionen von Guix. Damit können ältere Versionen von Paketen installiert
werden oder eine Berechnung in einer identischen Umgebung reproduziert
werden. Die zu benutzende Guix-Version wird über eine Commit-Angabe oder
eine Kanalbeschreibungsdatei, wie sie durch @command{guix describe} erzeugt
werden kann, festgelegt (siehe @ref{Aufruf von guix describe}).

Die allgemeine Syntax lautet:

@example
guix time-machine @var{Optionen}… -- @var{Befehl} @var {Argument}…
@end example

Dabei werden der @var{Befehl} und jedes @var{Argument}… unverändert an den
@command{guix}-Befehl der angegebenen Version übergeben. Die @var{Optionen},
die die Version definieren, sind dieselben wie bei @command{guix pull}
(siehe @ref{Aufruf von guix pull}):

@table @code
@item --url=@var{URL}
@itemx --commit=@var{Commit}
@itemx --branch=@var{Branch}
Den @code{guix}-Kanal von der angegebenen @var{URL} benutzen, für den
angegebenen @var{Commit} (eine gültige Commit-ID, dargestellt als
hexadezimale Zeichenkette) oder @var{Branch}.

@item --channels=@var{Datei}
@itemx -C @var{Datei}
Die Liste der Kanäle aus der angegebenen @var{Datei} auslesen. Die
@var{Datei} muss Scheme-Code enthalten, der zu einer Liste von Kanalobjekten
ausgewertet wird. Siehe @ref{Kanäle} für nähere Informationen.
@end table

Wie bei @command{guix pull} wird in Ermangelung anderer Optionen der letzte
Commit auf dem master-Branch benutzt. Mit dem Befehl

@example
guix time-machine -- build hello
@end example

wird dementsprechend das Paket @code{hello} erstellt, so wie es auf dem
master-Branch definiert ist, was in der Regel einer neueren Guix-Version
entspricht als der, die Sie installiert haben. Zeitreisen funktionieren also
in beide Richtungen!

Beachten Sie, dass durch @command{guix time-machine} Erstellungen von
Kanälen und deren Abhängigkeiten ausgelöst werden können, welche durch die
gemeinsamen Erstellungsoptionen gesteuert werden können (siehe @ref{Gemeinsame Erstellungsoptionen}).

@node Untergeordnete
@section Untergeordnete

@c TODO: Remove this once we're more confident about API stability.
@quotation Anmerkung
Die hier beschriebenen Funktionalitäten sind in der Version @value{VERSION}
bloß eine „Technologie-Vorschau“, daher kann sich die Schnittstelle in
Zukunft noch ändern.
@end quotation

@cindex Untergeordnete
@cindex Mischen von Guix-Versionen
Manchmal könnten Sie Pakete aus der gerade laufenden Fassung von Guix mit
denen mischen wollen, die in einer anderen Guix-Version verfügbar sind.
Guix-@dfn{Untergeordnete} ermöglichen dies, indem Sie verschiedene
Guix-Versionen beliebig mischen können.

@cindex untergeordnete Pakete
Aus technischer Sicht ist ein „Untergeordneter“ im Kern ein separater
Guix-Prozess, der über eine REPL (siehe @ref{Aufruf von guix repl}) mit Ihrem
Haupt-Guix-Prozess verbunden ist. Das Modul @code{(guix inferior)}
ermöglicht es Ihnen, Untergeordnete zu erstellen und mit ihnen zu
kommunizieren. Dadurch steht Ihnen auch eine hochsprachliche Schnittstelle
zur Verfügung, um die von einem Untergeordneten angebotenen Pakete zu
durchsuchen und zu verändern — @dfn{untergeordnete Pakete}.

In Kombination mit Kanälen (siehe @ref{Kanäle}) bieten Untergeordnete eine
einfache Möglichkeit, mit einer anderen Version von Guix zu
interagieren. Nehmen wir zum Beispiel an, Sie wollen das aktuelle
@code{guile}-Paket in Ihr Profil installieren, zusammen mit dem
@code{guile-json}, wie es in einer früheren Guix-Version existiert hat —
vielleicht weil das neuere @code{guile-json} eine inkompatible API hat und
Sie daher Ihren Code mit der alten API benutzen möchten. Dazu könnten Sie
ein Manifest für @code{guix package --manifest} schreiben (siehe
@ref{Aufruf von guix package}); in diesem Manifest würden Sie einen
Untergeordneten für diese alte Guix-Version erzeugen, für die Sie sich
interessieren, und aus diesem Untergeordneten das @code{guile-json}-Paket
holen:

@lisp
(use-modules (guix inferior) (guix channels)
             (srfi srfi-1))   ;für die Prozedur 'first'

(define channels
  ;; Dies ist die alte Version, aus der wir
  ;; guile-json extrahieren möchten.
  (list (channel
         (name 'guix)
         (url "https://git.savannah.gnu.org/git/guix.git")
         (commit
          "65956ad3526ba09e1f7a40722c96c6ef7c0936fe"))))

(define inferior
  ;; Ein Untergeordneter, der obige Version repräsentiert.
  (inferior-for-channels channels))

;; Daraus erzeugen wir jetzt ein Manifest mit dem aktuellen
;; „guile“-Paket und dem alten „guile-json“-Paket.
(packages->manifest
 (list (first (lookup-inferior-packages inferior "guile-json"))
       (specification->package "guile")))
@end lisp

Bei seiner ersten Ausführung könnte für @command{guix package --manifest}
erst der angegebene Kanal erstellt werden müssen, bevor der Untergeordnete
erstellt werden kann; nachfolgende Durchläufe sind wesentlich schneller,
weil diese Guix-Version bereits zwischengespeichert ist.

Folgende Prozeduren werden im Modul @code{(guix inferior)} angeboten, um
einen Untergeordneten zu öffnen:

@deffn {Scheme-Prozedur} inferior-for-channels @var{Kanäle} @
   [#:cache-directory] [#:ttl] Liefert einen Untergeordneten für die
@var{Kanäle}, einer Liste von Kanälen. Dazu wird der Zwischenspeicher im
Verzeichnis @var{cache-directory} benutzt, dessen Einträge nach @var{ttl}
Sekunden gesammelt werden dürfen. Mit dieser Prozedur wird eine neue
Verbindung zum Erstellungs-Daemon geöffnet.

Als Nebenwirkung erstellt oder substituiert diese Prozedur unter Umständen
Binärdateien für die @var{Kanäle}, was einige Zeit in Anspruch nehmen kann.
@end deffn

@deffn {Scheme-Prozedur} open-inferior @var{Verzeichnis} @
  [#:command "bin/guix"] Öffnet das untergeordnete Guix mit dem Befehl
@var{command} im angegebenen @var{Verzeichnis} durch Ausführung von
@code{@var{Verzeichnis}/@var{command} repl} oder entsprechend. Liefert
@code{#f}, wenn der Untergeordnete nicht gestartet werden konnte.
@end deffn

@cindex untergeordnete Pakete
Die im Folgenden aufgeführten Prozeduren ermöglichen es Ihnen,
untergeordnete Pakete abzurufen und zu verändern.

@deffn {Scheme-Prozedur} inferior-packages @var{Untergeordneter}
Liefert die Liste der Pakete in @var{Untergeordneter}.
@end deffn

@deffn {Scheme-Prozedur} lookup-inferior-packages @var{Untergeordneter} @var{Name} @
   [@var{Version}] Liefert die sortierte Liste der untergeordneten Pakete in
@var{Untergeordneter}, die zum Muster @var{Name} in @var{Untergeordneter}
passen, dabei kommen höhere Versionsnummern zuerst. Wenn @var{Version} auf
wahr gesetzt ist, werden nur Pakete geliefert, deren Versionsnummer mit dem
Präfix @var{Version} beginnt.
@end deffn

@deffn {Scheme-Prozedur} inferior-package? @var{Objekt}
Liefert wahr, wenn das @var{obj} ein Untergeordneter ist.
@end deffn

@deffn {Scheme-Prozedur} inferior-package-name @var{Paket}
@deffnx {Scheme-Prozedur} inferior-package-version @var{Paket}
@deffnx {Scheme-Prozedur} inferior-package-synopsis @var{Paket}
@deffnx {Scheme-Prozedur} inferior-package-description @var{Paket}
@deffnx {Scheme-Prozedur} inferior-package-home-page @var{Paket}
@deffnx {Scheme-Prozedur} inferior-package-location @var{Paket}
@deffnx {Scheme-Prozedur} inferior-package-inputs @var{Paket}
@deffnx {Scheme-Prozedur} inferior-package-native-inputs @var{Paket}
@deffnx {Scheme-Prozedur} inferior-package-propagated-inputs @var{Paket}
@deffnx {Scheme-Prozedur} inferior-package-transitive-propagated-inputs @var{Paket}
@deffnx {Scheme-Prozedur} inferior-package-native-search-paths @var{Paket}
@deffnx {Scheme-Prozedur} inferior-package-transitive-native-search-paths @var{Paket}
@deffnx {Scheme-Prozedur} inferior-package-search-paths @var{Paket}
Diese Prozeduren sind das Gegenstück zu den Zugriffsmethoden des Verbunds
„package“ für Pakete (siehe @ref{„package“-Referenz}). Die meisten davon
funktionieren durch eine Abfrage auf dem Untergeordneten, von dem das
@var{Paket} kommt, weshalb der Untergeordnete noch lebendig sein muss, wenn
Sie diese Prozeduren aufrufen.
@end deffn

Untergeordnete Pakete können transparent wie jedes andere Paket oder
dateiartige Objekt in G-Ausdrücken verwendet werden (siehe
@ref{G-Ausdrücke}). Sie werden auch transparent wie reguläre Pakete von
der Prozedur @code{packages->manifest} behandelt, welche oft in Manifesten
benutzt wird (siehe @ref{Aufruf von guix package, siehe die
Befehlszeilenoption @option{--manifest} von @command{guix package}}). Somit
können Sie ein untergeordnetes Paket ziemlich überall dort verwenden, wo Sie
ein reguläres Paket einfügen würden: in Manifesten, im Feld @code{packages}
Ihrer @code{operating-system}-Deklaration und so weiter.

@node Aufruf von guix describe
@section @command{guix describe} aufrufen

@cindex Reproduzierbarkeit
@cindex Nachbilden von Guix
Sie könnten sich des Öfteren Fragen stellen wie: „Welche Version von Guix
benutze ich gerade?“ oder „Welche Kanäle benutze ich?“ Diese Informationen
sind in vielen Situationen nützlich: wenn Sie eine Umgebung auf einer
anderen Maschine oder mit einem anderen Benutzerkonto @emph{nachbilden}
möchten, wenn Sie einen Fehler melden möchten, wenn Sie festzustellen
versuchen, welche Änderung an den von Ihnen verwendeten Kanälen diesen
Fehler verursacht hat, oder wenn Sie Ihren Systemzustand zum Zweck der
Reproduzierbarkeit festhalten möchten. Der Befehl @command{guix describe}
gibt Ihnen Antwort auf diese Fragen.

Wenn Sie ihn aus einem mit @command{guix pull} bezogenen @command{guix}
heraus ausführen, zeigt Ihnen @command{guix describe} die Kanäle an, aus
denen es erstellt wurde, jeweils mitsamt ihrer Repository-URL und Commit-ID
(siehe @ref{Kanäle}):

@example
$ guix describe
Generation 10	Sep 03 2018 17:32:44	(current)
  guix e0fa68c
    repository URL: https://git.savannah.gnu.org/git/guix.git
    branch: master
    commit: e0fa68c7718fffd33d81af415279d6ddb518f727
@end example

Wenn Sie mit dem Versionskontrollsystem Git vertraut sind, erkennen Sie
vielleicht die Ähnlichkeit zu @command{git describe}; die Ausgabe ähnelt
auch der von @command{guix pull --list-generations} eingeschränkt auf die
aktuelle Generation (siehe @ref{Aufruf von guix pull, die Befehlszeilenoption
@option{--list-generations}}). Weil die oben gezeigte Git-Commit-ID
eindeutig eine bestimmte Version von Guix bezeichnet, genügt diese
Information, um die von Ihnen benutzte Version von Guix zu beschreiben, und
auch, um sie nachzubilden.

Damit es leichter ist, Guix nachzubilden, kann Ihnen @command{guix describe}
auch eine Liste der Kanäle statt einer menschenlesbaren Beschreibung wie
oben liefern:

@example
$ guix describe -f channels
(list (channel
        (name 'guix)
        (url "https://git.savannah.gnu.org/git/guix.git")
        (commit
          "e0fa68c7718fffd33d81af415279d6ddb518f727")))
@end example

@noindent
Sie können die Ausgabe in einer Datei speichern, die Sie an @command{guix
pull -C} auf einer anderen Maschine oder zu einem späteren Zeitpunkt
übergeben, wodurch dann eine Instanz @emph{von genau derselben Guix-Version}
installiert wird (siehe @ref{Aufruf von guix pull, die Befehlszeilenoption
@option{-C}}). Daraufhin können Sie, weil Sie jederzeit dieselbe Version von
Guix installieren können, auch gleich @emph{eine vollständige
Softwareumgebung genau nachbilden}. Wir halten das trotz aller
Bescheidenheit für @emph{klasse} und hoffen, dass Ihnen das auch gefällt!

Die genauen Befehlszeilenoptionen, die @command{guix describe} unterstützt,
lauten wie folgt:

@table @code
@item --format=@var{Format}
@itemx -f @var{Format}
Die Ausgabe im angegebenen @var{Format} generieren, was eines der Folgenden
sein muss:

@table @code
@item human
für menschenlesbare Ausgabe,
@item Kanäle
eine Liste von Kanalspezifikationen erzeugen, die an @command{guix pull -C}
übergeben werden oder als @file{~/.config/guix/channels.scm} eingesetzt
werden können (siehe @ref{Aufruf von guix pull}),
@item json
@cindex JSON
generiert eine Liste von Kanalspezifikationen im JSON-Format,
@item recutils
generiert eine Liste von Kanalspezifikationen im Recutils-Format.
@end table

@item --list-formats
Display available formats for @option{--format} option.

@item --profile=@var{Profil}
@itemx -p @var{Profil}
Informationen über das @var{Profil} anzeigen.
@end table

@node Aufruf von guix archive
@section @command{guix archive} aufrufen

@cindex @command{guix archive}
@cindex Archivdateien
Der Befehl @command{guix archive} ermöglicht es Nutzern, Dateien im Store in
eine einzelne Archivdatei zu @dfn{exportieren} und diese später auf einer
Maschine, auf der Guix läuft, zu @dfn{importieren}. Insbesondere können so
Store-Objekte von einer Maschine in den Store einer anderen Maschine
übertragen werden.

@quotation Anmerkung
Wenn Sie nach einer Möglichkeit suchen, Archivdateien für andere Werkzeuge
als Guix zu erstellen, finden Sie Informationen dazu im Abschnitt
@ref{Aufruf von guix pack}.
@end quotation

@cindex Store-Objekte exportieren
Führen Sie Folgendes aus, um Store-Dateien als ein Archiv auf die
Standardausgabe zu exportieren:

@example
guix archive --export @var{Optionen} @var{Spezifikationen}…
@end example

@var{Spezifikationen} sind dabei entweder die Namen von Store-Dateien oder
Paketspezifikationen wie bei @command{guix package} (siehe @ref{Aufruf von guix package}). Zum Beispiel erzeugt der folgende Befehl ein Archiv der
@code{gui}-Ausgabe des Pakets @code{git} sowie die Hauptausgabe von
@code{emacs}:

@example
guix archive --export git:gui /gnu/store/…-emacs-24.3 > groß.nar
@end example

Wenn die angegebenen Pakete noch nicht erstellt worden sind, werden sie
durch @command{guix archive} automatisch erstellt. Der Erstellungsprozess
kann durch die gemeinsamen Erstellungsoptionen gesteuert werden (siehe
@ref{Gemeinsame Erstellungsoptionen}).

Um das @code{emacs}-Paket auf eine über SSH verbundene Maschine zu
übertragen, würde man dies ausführen:

@example
guix archive --export -r emacs | ssh die-maschine guix archive --import
@end example

@noindent
Auf gleiche Art kann auch ein vollständiges Benutzerprofil von einer
Maschine auf eine andere übertragen werden:

@example
guix archive --export -r $(readlink -f ~/.guix-profile) | \
  ssh die-maschine guix archive --import
@end example

@noindent
However, note that, in both examples, all of @code{emacs} and the profile as
well as all of their dependencies are transferred (due to @option{-r}),
regardless of what is already available in the store on the target machine.
The @option{--missing} option can help figure out which items are missing
from the target store.  The @command{guix copy} command simplifies and
optimizes this whole process, so this is probably what you should use in
this case (@pxref{Aufruf von guix copy}).

@cindex Nar, Archivformat
@cindex Normalisiertes Archiv (Nar)
Archive werden als „Normalisiertes Archiv“, kurz „Nar“, formatiert. Diese
Technik folgt einem ähnlichen Gedanken wie beim „tar“-Format, unterscheidet
sich aber auf eine für unsere Zwecke angemessene Art. Erstens werden im
Nar-Format nicht sämtliche Unix-Metadaten aller Dateien aufgenommen, sondern
nur der Dateityp (ob es sich um eine reguläre Datei, ein Verzeichnis oder
eine symbolische Verknüpfung handelt). Unix-Dateiberechtigungen sowie
Besitzer und Gruppe werden nicht gespeichert. Zweitens entspricht die
Reihenfolge, in der der Inhalt von Verzeichnissen abgelegt wird, immer der
Reihenfolge, in der die Dateinamen gemäß der C-Locale sortiert
würden. Dadurch wird die Erstellung von Archivdateien völlig
deterministisch.

@c FIXME: Add xref to daemon doc about signatures.
Beim Exportieren versieht der Daemon den Inhalt des Archivs mit einer
digitalen Signatur, auch Beglaubigung genannt. Diese digitale Signatur wird
an das Archiv angehängt. Beim Importieren verifiziert der Daemon die
Signatur und lehnt den Import ab, falls die Signatur ungültig oder der
signierende Schlüssel nicht autorisiert ist.

Die wichtigsten Befehlszeilenoptionen sind:

@table @code
@item --export
Export the specified store files or packages (see below).  Write the
resulting archive to the standard output.

Dependencies are @emph{not} included in the output, unless
@option{--recursive} is passed.

@item -r
@itemx --recursive
When combined with @option{--export}, this instructs @command{guix archive}
to include dependencies of the given items in the archive.  Thus, the
resulting archive is self-contained: it contains the closure of the exported
store items.

@item --import
Read an archive from the standard input, and import the files listed therein
into the store.  Abort if the archive has an invalid digital signature, or
if it is signed by a public key not among the authorized keys (see
@option{--authorize} below).

@item --missing
Eine Liste der Store-Dateinamen von der Standardeingabe lesen, je ein Name
pro Zeile, und auf die Standardausgabe die Teilmenge dieser Dateien
schreiben, die noch nicht im Store vorliegt.

@item --generate-key[=@var{Parameter}]
@cindex Signieren, von Archiven
Generate a new key pair for the daemon.  This is a prerequisite before
archives can be exported with @option{--export}.  Note that this operation
usually takes time, because it needs to gather enough entropy to generate
the key pair.

The generated key pair is typically stored under @file{/etc/guix}, in
@file{signing-key.pub} (public key) and @file{signing-key.sec} (private key,
which must be kept secret).  When @var{parameters} is omitted, an ECDSA key
using the Ed25519 curve is generated, or, for Libgcrypt versions before
1.6.0, it is a 4096-bit RSA key.  Alternatively, @var{parameters} can
specify @code{genkey} parameters suitable for Libgcrypt (@pxref{General
public-key related Functions, @code{gcry_pk_genkey},, gcrypt, The Libgcrypt
Reference Manual}).

@item --authorize
@cindex Autorisieren, von Archiven
Mit dem auf der Standardeingabe übergebenen öffentlichen Schlüssel signierte
Importe autorisieren. Der öffentliche Schlüssel muss als
„advanced“-formatierter S-Ausdruck gespeichert sein, d.h.@: im selben Format
wie die Datei @file{signing-key.pub}.

Die Liste autorisierter Schlüssel wird in der Datei @file{/etc/guix/acl}
gespeichert, die auch von Hand bearbeitet werden kann. Die Datei enthält
@url{https://people.csail.mit.edu/rivest/Sexp.txt, „advanced“-formatierte
S-Ausdrücke} und ist als eine Access Control List für die
@url{https://theworld.com/~cme/spki.txt, Simple Public-Key Infrastructure
(SPKI)} aufgebaut.

@item --extract=@var{Verzeichnis}
@itemx -x @var{Verzeichnis}
Ein Archiv mit einem einzelnen Objekt lesen, wie es von Substitutservern
geliefert wird (siehe @ref{Substitute}), und ins @var{Verzeichnis}
entpacken. Dies ist eine systemnahe Operation, die man nur selten direkt
benutzt; siehe unten.

Zum Beispiel entpackt folgender Befehl das Substitut für Emacs, wie es von
@code{@value{SUBSTITUTE-SERVER}} geliefert wird, nach @file{/tmp/emacs}:

@example
$ wget -O - \
  https://@value{SUBSTITUTE-SERVER}/nar/gzip/@dots{}-emacs-24.5 \
  | gunzip | guix archive -x /tmp/emacs
@end example

Archive mit nur einem einzelnen Objekt unterscheiden sich von Archiven für
mehrere Dateien, wie sie @command{guix archive --export} erzeugt; sie
enthalten nur ein einzelnes Store-Objekt und @emph{keine} eingebettete
Signatur. Beim Entpacken findet also @emph{keine} Signaturprüfung statt und
ihrer Ausgabe sollte so erst einmal nicht vertraut werden.

The primary purpose of this operation is to facilitate inspection of archive
contents coming from possibly untrusted substitute servers (@pxref{Aufruf von guix challenge}).

@item --list
@itemx -t
Ein Archiv mit einem einzelnen Objekt lesen, wie es von Substitutservern
geliefert wird (siehe @ref{Substitute}), und die Dateien darin ausgeben,
wie in diesem Beispiel:

@example
$ wget -O - \
  https://@value{SUBSTITUTE-SERVER}/nar/lzip/…-emacs-26.3 \
  | lzip -d | guix archive -t
@end example

@end table


@c *********************************************************************
@node Entwicklung
@chapter Entwicklung

@cindex Softwareentwicklung
Wenn Sie ein Software-Entwickler sind, gibt Ihnen Guix Werkzeuge an die
Hand, die Sie für hilfreich erachten dürften — ganz unabhängig davon, in
welcher Sprache Sie entwickeln. Darum soll es in diesem Kapitel gehen.

Der Befehl @command{guix environment} stellt eine bequeme Möglichkeit dar,
wie Sie eine @dfn{Entwicklungsumgebung} aufsetzen können, in der all die
Abhängigkeiten und Werkzeuge enthalten sind, die Sie brauchen, wenn Sie an
Ihrem Lieblingssoftwarepaket arbeiten. Der Befehl @command{guix pack} macht
es Ihnen möglich, @dfn{Anwendungsbündel} zu erstellen, die leicht an Nutzer
verteilt werden können, die kein Guix benutzen.

@menu
* Aufruf von guix environment::  Entwicklungsumgebungen einrichten.
* Aufruf von guix pack::     Software-Bündel erstellen.
* GCC-Toolchain::            Working with languages supported by GCC.
@end menu

@node Aufruf von guix environment
@section @command{guix environment} aufrufen

@cindex reproduzierbare Erstellungsumgebungen
@cindex Entwicklungsumgebungen
@cindex @command{guix environment}
@cindex Umgebung, Paketerstellungsumgebung
Der Zweck von @command{guix environment} ist es, Hacker beim Aufbau einer
reproduzierbaren Entwicklungsumgebung zu unterstützen, ohne dass diese ihr
Paketprofil verunreinigen müssen. Das Werkzeug @command{guix environment}
nimmt eines oder mehrere Pakete entgegen und erstellt erst all ihre
Eingaben, um dann eine Shell-Umgebung herzustellen, in der diese benutzt
werden können.

Die allgemeine Syntax lautet:

@example
guix environment @var{Optionen} @var{Paket}…
@end example

Folgendes Beispiel zeigt, wie eine neue Shell gestartet wird, auf der alles
für die Entwicklung von GNU@tie{}Guile eingerichtet ist:

@example
guix environment guile
@end example

If the needed dependencies are not built yet, @command{guix environment}
automatically builds them.  The environment of the new shell is an augmented
version of the environment that @command{guix environment} was run in.  It
contains the necessary search paths for building the given package added to
the existing environment variables.  To create a ``pure'' environment, in
which the original environment variables have been unset, use the
@option{--pure} option@footnote{Users sometimes wrongfully augment
environment variables such as @env{PATH} in their @file{~/.bashrc} file.  As
a consequence, when @command{guix environment} launches it, Bash may read
@file{~/.bashrc}, thereby introducing ``impurities'' in these environment
variables.  It is an error to define such environment variables in
@file{.bashrc}; instead, they should be defined in @file{.bash_profile},
which is sourced only by log-in shells.  @xref{Bash Startup Files,,, bash,
The GNU Bash Reference Manual}, for details on Bash start-up files.}.

@vindex GUIX_ENVIRONMENT
@command{guix environment} defines the @env{GUIX_ENVIRONMENT} variable in
the shell it spawns; its value is the file name of the profile of this
environment.  This allows users to, say, define a specific prompt for
development environments in their @file{.bashrc} (@pxref{Bash Startup
Files,,, bash, The GNU Bash Reference Manual}):

@example
if [ -n "$GUIX_ENVIRONMENT" ]
then
    export PS1="\u@@\h \w [dev]\$ "
fi
@end example

@noindent
…@: oder um ihr Profil durchzusehen:

@example
$ ls "$GUIX_ENVIRONMENT/bin"
@end example

Des Weiteren kann mehr als ein Paket angegeben werden. In diesem Fall wird
die Vereinigung der Eingaben der jeweiligen Pakete zugänglich gemacht. Zum
Beispiel erzeugt der folgende Befehl eine Shell, in der alle Abhängigkeiten
von sowohl Guile als auch Emacs verfügbar sind:

@example
guix environment guile emacs
@end example

Manchmal will man keine interaktive Shell-Sitzung. Ein beliebiger Befehl
kann aufgerufen werden, indem man nach Angabe der Pakete noch @code{--} vor
den gewünschten Befehl schreibt, um ihn von den übrigen Argumenten
abzutrennen:

@example
guix environment guile -- make -j4
@end example

In anderen Situationen ist es bequemer, aufzulisten, welche Pakete in der
Umgebung benötigt werden. Zum Beispiel führt der folgende Befehl
@command{python} aus einer Umgebung heraus aus, in der Python@tie{}2.7 und
NumPy enthalten sind:

@example
guix environment --ad-hoc python2-numpy python-2.7 -- python
@end example

Furthermore, one might want the dependencies of a package and also some
additional packages that are not build-time or runtime dependencies, but are
useful when developing nonetheless.  Because of this, the @option{--ad-hoc}
flag is positional.  Packages appearing before @option{--ad-hoc} are
interpreted as packages whose dependencies will be added to the
environment.  Packages appearing after are interpreted as packages that will
be added to the environment directly.  For example, the following command
creates a Guix development environment that additionally includes Git and
strace:

@example
guix environment --pure guix --ad-hoc git strace
@end example

@cindex container
Manchmal ist es wünschenswert, die Umgebung so viel wie möglich zu
isolieren, um maximale Reinheit und Reproduzierbarkeit zu
bekommen. Insbesondere ist es wünschenswert, den Zugriff auf @file{/usr/bin}
und andere Systemressourcen aus der Entwicklungsumgebung heraus zu
verhindern, wenn man Guix auf einer fremden Wirtsdistribution benutzt, die
nicht Guix System ist. Zum Beispiel startet der folgende Befehl eine
Guile-REPL in einer isolierten Umgebung, einem sogenannten „Container“, in
der nur der Store und das aktuelle Arbeitsverzeichnis eingebunden sind:

@example
guix environment --ad-hoc --container guile -- guile
@end example

@quotation Anmerkung
The @option{--container} option requires Linux-libre 3.19 or newer.
@end quotation

@cindex certificates
Another typical use case for containers is to run security-sensitive
applications such as a web browser.  To run Eolie, we must expose and share
some files and directories; we include @code{nss-certs} and expose
@file{/etc/ssl/certs/} for HTTPS authentication; finally we preserve the the
@env{DISPLAY} environment variable since containerized graphical
applications won't display without it.

@example
guix environment --preserve='^DISPLAY$' --container --network \
  --expose=/etc/machine-id \
  --expose=/etc/ssl/certs/ \
  --share=$HOME/.local/share/eolie/=$HOME/.local/share/eolie/ \
  --ad-hoc eolie nss-certs dbus --  eolie
@end example

Im Folgenden werden die verfügbaren Befehlszeilenoptionen zusammengefasst.

@table @code
@item --root=@var{Datei}
@itemx -r @var{Datei}
@cindex persistente Umgebung
@cindex Müllsammlerwurzel, für Umgebungen
Die @var{Datei} zu einer symbolischen Verknüpfung auf das Profil dieser
Umgebung machen und als eine Müllsammlerwurzel registrieren.

Das ist nützlich, um seine Umgebung vor dem Müllsammler zu schützen und sie
„persistent“ zu machen.

Wird diese Option weggelassen, ist die Umgebung nur, solange die Sitzung von
@command{guix environment} besteht, vor dem Müllsammler sicher. Das
bedeutet, wenn Sie das nächste Mal dieselbe Umgebung neu erzeugen, müssen
Sie vielleicht Pakete neu erstellen oder neu herunterladen. @ref{Aufruf von guix gc} hat mehr Informationen über Müllsammlerwurzeln.

@item --expression=@var{Ausdruck}
@itemx -e @var{Ausdruck}
Eine Umgebung für das Paket oder die Liste von Paketen erzeugen, zu der der
@var{Ausdruck} ausgewertet wird.

Zum Beispiel startet dies:

@example
guix environment -e '(@@ (gnu packages maths) petsc-openmpi)'
@end example

eine Shell mit der Umgebung für eben diese bestimmte Variante des Pakets
PETSc.

Wenn man dies ausführt:

@example
guix environment --ad-hoc -e '(@@ (gnu) %base-packages)'
@end example

bekommt man eine Shell, in der alle Basis-Pakete verfügbar sind.

Die obigen Befehle benutzen nur die Standard-Ausgabe des jeweiligen
Pakets. Um andere Ausgaben auszuwählen, können zweielementige Tupel
spezifiziert werden:

@example
guix environment --ad-hoc -e '(list (@@ (gnu packages bash) bash) "include")'
@end example

@item --load=@var{Datei}
@itemx -l @var{Datei}
Eine Umgebung erstellen für das Paket oder die Liste von Paketen, zu der der
Code in der @var{Datei} ausgewertet wird.

Zum Beispiel könnte die @var{Datei} eine Definition wie diese enthalten
(siehe @ref{Pakete definieren}):

@lisp
@verbatiminclude environment-gdb.scm
@end lisp

@item --manifest=@var{Datei}
@itemx -m @var{Datei}
Eine Umgebung für die Pakete erzeugen, die im Manifest-Objekt enthalten
sind, das vom Scheme-Code in der @var{Datei} geliefert wird. Wenn diese
Befehlszeilenoption mehrmals wiederholt angegeben wird, werden die Manifeste
aneinandergehängt.

Dies verhält sich ähnlich wie die gleichnamige Option des Befehls
@command{guix package} (siehe @ref{profile-manifest, @option{--manifest}})
und benutzt auch dieselben Manifestdateien.

@item --ad-hoc
Alle angegebenen Pakete in der resultierenden Umgebung einschließen, als
wären sie Eingaben eines @i{ad hoc} definierten Pakets. Diese
Befehlszeilenoption ist nützlich, um schnell Umgebungen aufzusetzen, ohne
dafür einen Paketausdruck schreiben zu müssen, der die gewünschten Eingaben
enthält.

Zum Beispiel wird mit diesem Befehl:

@example
guix environment --ad-hoc guile guile-sdl -- guile
@end example

@command{guile} in einer Umgebung ausgeführt, in der sowohl Guile als auch
Guile-SDL zur Verfügung stehen.

Beachten Sie, dass in diesem Beispiel implizit die vorgegebene Ausgabe von
@code{guile} und @code{guile-sdl} verwendet wird, es aber auch möglich ist,
eine bestimmte Ausgabe auszuwählen — z.B.@: wird mit @code{glib:bin} die
Ausgabe @code{bin} von @code{glib} gewählt (siehe @ref{Pakete mit mehreren Ausgaben.}).

This option may be composed with the default behavior of @command{guix
environment}.  Packages appearing before @option{--ad-hoc} are interpreted
as packages whose dependencies will be added to the environment, the default
behavior.  Packages appearing after are interpreted as packages that will be
added to the environment directly.

@item --pure
Unset existing environment variables when building the new environment,
except those specified with @option{--preserve} (see below).  This has the
effect of creating an environment in which search paths only contain package
inputs.

@item --preserve=@var{Regexp}
@itemx -E @var{Regexp}
Wenn das hier zusammen mit @option{--pure} angegeben wird, bleiben die zum
regulären Ausdruck @var{Regexp} passenden Umgebungsvariablen erhalten — mit
anderen Worten werden sie auf eine „weiße Liste“ von Umgebungsvariablen
gesetzt, die erhalten bleiben müssen. Diese Befehlszeilenoption kann
mehrmals wiederholt werden.

@example
guix environment --pure --preserve=^SLURM --ad-hoc openmpi …@: \
  -- mpirun …
@end example

This example runs @command{mpirun} in a context where the only environment
variables defined are @env{PATH}, environment variables whose name starts
with @samp{SLURM}, as well as the usual ``precious'' variables (@env{HOME},
@env{USER}, etc.).

@item --search-paths
Die Umgebungsvariablendefinitionen anzeigen, aus denen die Umgebung besteht.

@item --system=@var{System}
@itemx -s @var{System}
Versuchen, für das angegebene @var{System} zu erstellen — z.B.@:
@code{i686-linux}.

@item --container
@itemx -C
@cindex container
Run @var{command} within an isolated container.  The current working
directory outside the container is mapped inside the container.
Additionally, unless overridden with @option{--user}, a dummy home directory
is created that matches the current user's home directory, and
@file{/etc/passwd} is configured accordingly.

The spawned process runs as the current user outside the container.  Inside
the container, it has the same UID and GID as the current user, unless
@option{--user} is passed (see below).

@item --network
@itemx -N
Bei isolierten Umgebungen („Containern“) wird hiermit der
Netzwerk-Namensraum mit dem des Wirtssystems geteilt. Container, die ohne
diese Befehlszeilenoption erzeugt wurden, haben nur Zugriff auf das
Loopback-Gerät.

@item --link-profile
@itemx -P
For containers, link the environment profile to @file{~/.guix-profile}
within the container.  This is equivalent to running the command @samp{ln -s
$GUIX_ENVIRONMENT ~/.guix-profile} within the container.  Linking will fail
and abort the environment if the directory already exists, which will
certainly be the case if @command{guix environment} was invoked in the
user's home directory.

Certain packages are configured to look in @file{~/.guix-profile} for
configuration files and data;@footnote{For example, the @code{fontconfig}
package inspects @file{~/.guix-profile/share/fonts} for additional fonts.}
@option{--link-profile} allows these programs to behave as expected within
the environment.

@item --user=@var{Benutzer}
@itemx -u @var{Benutzer}
Bei isolierten Umgebungen („Containern“) wird der Benutzername
@var{Benutzer} anstelle des aktuellen Benutzers benutzt. Der erzeugte
Eintrag in @file{/etc/passwd} im Container wird also den Namen
@var{Benutzer} enthalten und das persönliche Verzeichnis wird den Namen
@file{/home/BENUTZER} tragen; keine GECOS-Daten über den Nutzer werden in
die Umgebung übernommen. Des Weiteren sind UID und GID innerhalb der
isolierten Umgebung auf 1000 gesetzt. @var{Benutzer} muss auf dem System
nicht existieren.

Additionally, any shared or exposed path (see @option{--share} and
@option{--expose} respectively) whose target is within the current user's
home directory will be remapped relative to @file{/home/USER}; this includes
the automatic mapping of the current working directory.

@example
# wird Pfade als /home/foo/wd, /home/foo/test und /home/foo/target exponieren
cd $HOME/wd
guix environment --container --user=foo \
     --expose=$HOME/test \
     --expose=/tmp/target=$HOME/target
@end example

Obwohl dies das Datenleck von Nutzerdaten durch Pfade im persönlichen
Verzeichnis und die Benutzereinträge begrenzt, kann dies nur als Teil einer
größeren Lösung für Datenschutz und Anonymität sinnvoll eingesetzt
werden. Es sollte nicht für sich allein dazu eingesetzt werden.

@item --no-cwd
For containers, the default behavior is to share the current working
directory with the isolated container and immediately change to that
directory within the container.  If this is undesirable, @option{--no-cwd}
will cause the current working directory to @emph{not} be automatically
shared and will change to the user's home directory within the container
instead.  See also @option{--user}.

@item --expose=@var{Quelle}[=@var{Ziel}]
@itemx --share=@var{Quelle}[=@var{Ziel}]
For containers, @option{--expose} (resp. @option{--share}) exposes the file
system @var{source} from the host system as the read-only (resp. writable)
file system @var{target} within the container.  If @var{target} is not
specified, @var{source} is used as the target mount point in the container.

Im folgenden Beispiel wird eine Guile-REPL in einer isolierten Umgebung
gestartet, in der das persönliche Verzeichnis des Benutzers als Verzeichnis
@file{/austausch} nur für Lesezugriffe zugänglich gemacht wurde:

@example
guix environment --container --expose=$HOME=/austausch --ad-hoc guile -- guile
@end example

@end table

@command{guix environment} unterstützt auch alle gemeinsamen
Erstellungsoptionen, die von @command{guix build} unterstützt werden (siehe
@ref{Gemeinsame Erstellungsoptionen}), und die Paketumwandlungsoptionen (siehe
@ref{Paketumwandlungsoptionen}).

@node Aufruf von guix pack
@section @command{guix pack} aufrufen

Manchmal möchten Sie Software an Leute weitergeben, die (noch!) nicht das
Glück haben, Guix zu benutzen. Mit Guix würden sie nur @command{guix package
-i @var{irgendetwas}} einzutippen brauchen, aber wenn sie kein Guix haben,
muss es anders gehen. Hier kommt @command{guix pack} ins Spiel.

@quotation Anmerkung
Wenn Sie aber nach einer Möglichkeit suchen, Binärdateien unter Maschinen
auszutauschen, auf denen Guix bereits läuft, sollten Sie einen Blick auf die
Abschnitte @ref{Aufruf von guix copy}, @ref{Aufruf von guix publish} und
@ref{Aufruf von guix archive} werfen.
@end quotation

@cindex Pack
@cindex Bündel
@cindex Anwendungsbündel
@cindex Software-Bündel
Der Befehl @command{guix pack} erzeugt ein gut verpacktes
@dfn{Software-Bündel}: Konkret wird dadurch ein Tarball oder eine andere Art
von Archiv mit den Binärdateien der Software erzeugt, die Sie sich gewünscht
haben, zusammen mit all ihren Abhängigkeiten. Der resultierende Archiv kann
auch auf jeder Maschine genutzt werden, die kein Guix hat, und jeder kann
damit genau dieselben Binärdateien benutzen, die Ihnen unter Guix zur
Verfügung stehen. Das Bündel wird dabei auf eine Bit für Bit reproduzierbare
Art erzeugt, damit auch jeder nachprüfen kann, dass darin wirklich
diejenigen Binärdateien enthalten sind, von denen Sie es behaupten.

Um zum Beispiel ein Bündel mit Guile, Emacs, Geiser und all ihren
Abhängigkeiten zu erzeugen, führen Sie diesen Befehl aus:

@example
$ guix pack guile emacs geiser
…
/gnu/store/…-pack.tar.gz
@end example

Als Ergebnis erhalten Sie einen Tarball mit einem Verzeichnis
@file{/gnu/store}, worin sich alles relevanten Pakete befinden. Der
resultierende Tarball enthält auch ein @dfn{Profil} mit den drei angegebenen
Paketen; es ist dieselbe Art von Profil, die auch @command{guix package -i}
erzeugen würde. Mit diesem Mechanismus wird auch der binäre Tarball zur
Installation von Guix erzeugt (siehe @ref{Aus Binärdatei installieren}).

Benutzer des Bündels müssten dann aber zum Beispiel
@file{/gnu/store/…-profile/bin/guile} eintippen, um Guile auszuführen, was
Ihnen zu unbequem sein könnte. Ein Ausweg wäre, dass Sie etwa eine
symbolische Verknüpfung @file{/opt/gnu/bin} auf das Profil anlegen:

@example
guix pack -S /opt/gnu/bin=bin guile emacs geiser
@end example

@noindent
Benutzer müssten dann nur noch @file{/opt/gnu/bin/guile} eintippen, um Guile
zu genießen.

@cindex verschiebliche Binärdateien, mit @command{guix pack}
What if the recipient of your pack does not have root privileges on their
machine, and thus cannot unpack it in the root file system? In that case,
you will want to use the @option{--relocatable} option (see below).  This
option produces @dfn{relocatable binaries}, meaning they they can be placed
anywhere in the file system hierarchy: in the example above, users can
unpack your tarball in their home directory and directly run
@file{./opt/gnu/bin/guile}.

@cindex Docker, ein Abbild erstellen mit guix pack
Eine weitere Möglichkeit ist, das Bündel im Format eines Docker-Abbilds
(englisch Docker-Image) zu erzeugen. Das geht mit dem folgenden Befehl:

@example
guix pack -f docker -S /bin=bin guile guile-readline
@end example

@noindent
Das Ergebnis ist ein Tarball, der dem Befehl @command{docker load} übergeben
werden kann, gefolgt von @code{docker run}:

@example
docker load < @var{Datei}
docker run -ti guile-guile-readline /bin/guile
@end example

@noindent
Dabei steht @var{Datei} für das durch @var{guix pack} gelieferte Abbild und
@code{guile-guile-readline} für den „Image-Tag“, der diesem zugewiesen
wurde. In der
@uref{https://docs.docker.com/engine/reference/commandline/load/,
Dokumentation von Docker} finden Sie nähere Informationen.

@cindex Singularity, ein Abbild erstellen mit guix pack
@cindex SquashFS, ein Abbild erstellen mit guix pack
Und noch eine weitere Möglichkeit ist, dass Sie ein SquashFS-Abbild mit
folgendem Befehl erzeugen:

@example
guix pack -f squashfs bash guile emacs geiser
@end example

@noindent
The result is a SquashFS file system image that can either be mounted or
directly be used as a file system container image with the
@uref{https://www.sylabs.io/docs/, Singularity container execution
environment}, using commands like @command{singularity shell} or
@command{singularity exec}.

Es gibt mehrere Befehlszeilenoptionen, mit denen Sie Ihr Bündel anpassen
können:

@table @code
@item --format=@var{Format}
@itemx -f @var{Format}
Generiert ein Bündel im angegebenen @var{Format}.

Die verfügbaren Formate sind:

@table @code
@item tarball
Das standardmäßig benutzte Format. Damit wird ein Tarball generiert, der
alle angegebenen Binärdateien und symbolischen Verknüpfungen enthält.

@item docker
Generiert einen Tarball gemäß der
@uref{https://github.com/docker/docker/blob/master/image/spec/v1.2.md,
Spezifikation für Docker-Abbilder}. Der „Repository-Name“, wie er in der
Ausgabe des Befehls @command{docker images} erscheint, wird anhand der
Paketnamen berechnet, die auf der Befehlszeile oder in der Manifest-Datei
angegeben wurden.

@item squashfs
Generiert ein SquashFS-Abbild, das alle angegebenen Binärdateien und
symbolischen Verknüpfungen enthält, sowie leere Einhängepunkte für virtuelle
Dateisysteme wie procfs.

@quotation Anmerkung
Für Singularity @emph{müssen} Sie eine @file{/bin/sh} in das Abbild
aufnehmen. Aus diesem Grund gilt für @command{guix pack -f squashfs}
implizit immer auch @code{-S /bin=bin}. Daher muss Ihr Aufruf von
@command{guix pack} immer ungefähr so beginnen:

@example
guix pack -f squashfs bash …
@end example

Wenn Sie vergessen, das @code{bash}-Paket (oder etwas Ähnliches) zu bündeln,
werden @command{singularity run} und @command{singularity exec} mit der
wenig hilfreichen Meldung „Datei oder Verzeichnis nicht gefunden“ scheitern.
@end quotation
@end table

@cindex verschiebliche Binärdateien
@item --relocatable
@itemx -R
Erzeugt @dfn{verschiebliche Binärdateien} — also pfad-agnostische,
„portable“ Binärdateien, die an einer beliebigen Stelle in der
Dateisystemhierarchie platziert und von dort ausgeführt werden können.

When this option is passed once, the resulting binaries require support for
@dfn{user namespaces} in the kernel Linux; when passed
@emph{twice}@footnote{Here's a trick to memorize it: @code{-RR}, which adds
PRoot support, can be thought of as the abbreviation of ``Really
Relocatable''.  Neat, isn't it?}, relocatable binaries fall to back to other
techniques if user namespaces are unavailable, and essentially work
anywhere---see below for the implications.

Zum Beispiel können Sie ein Bash enthalltendes Bündel erzeugen mit:

@example
guix pack -RR -S /mybin=bin bash
@end example

@noindent
…@: Sie können dieses dann auf eine Maschine ohne Guix kopieren und als
normaler Nutzer aus Ihrem Persönlichen Verzeichnis (auch „Home“-Verzeichnis
genannt) dann ausführen mit:

@example
tar xf pack.tar.gz
./meine-bin/sh
@end example

@noindent
Wenn Sie in der so gestarteten Shell dann @code{ls /gnu/store} eintippen,
sehen Sie, dass Ihnen angezeigt wird, in @file{/gnu/store} befänden sich
alle Abhängigkeiten von @code{bash}, obwohl auf der Maschine überhaupt kein
Verzeichnis @file{/gnu/store} existiert! Dies ist vermutlich die einfachste
Art, mit Guix erstellte Software für eine Maschine ohne Guix auszuliefern.

@quotation Anmerkung
Wenn die Voreinstellung verwendet wird, funktionieren verschiebliche
Binärdateien nur mit @dfn{Benutzernamensräumen} (englisch @dfn{User
namespaces}), einer Funktionalität des Linux-Kernels, mit der Benutzer ohne
besondere Berechtigungen Dateisysteme einbinden (englisch „mount“) oder die
Wurzel des Dateisystems wechseln können („change root“, kurz „chroot“). Alte
Versionen von Linux haben diese Funktionalität noch nicht unterstützt und
manche Distributionen von GNU/Linux schalten sie ab.

To produce relocatable binaries that work even in the absence of user
namespaces, pass @option{--relocatable} or @option{-R} @emph{twice}.  In
that case, binaries will try user namespace support and fall back to another
@dfn{execution engine} if user namespaces are not supported.  The following
execution engines are supported:

@table @code
@item default
Try user namespaces and fall back to PRoot if user namespaces are not
supported (see below).

@item performance
Try user namespaces and fall back to Fakechroot if user namespaces are not
supported (see below).

@item userns
Run the program through user namespaces and abort if they are not supported.

@item proot
Run through PRoot.  The @uref{https://proot-me.github.io/, PRoot} program
provides the necessary support for file system virtualization.  It achieves
that by using the @code{ptrace} system call on the running program.  This
approach has the advantage to work without requiring special kernel support,
but it incurs run-time overhead every time a system call is made.

@item fakechroot
Run through Fakechroot.  @uref{https://github.com/dex4er/fakechroot/,
Fakechroot} virtualizes file system accesses by intercepting calls to C
library functions such as @code{open}, @code{stat}, @code{exec}, and so on.
Unlike PRoot, it incurs very little overhead.  However, it does not always
work: for example, some file system accesses made from within the C library
are not intercepted, and file system accesses made @i{via} direct syscalls
are not intercepted either, leading to erratic behavior.
@end table

@vindex GUIX_EXECUTION_ENGINE
When running a wrapped program, you can explicitly request one of the
execution engines listed above by setting the @code{GUIX_EXECUTION_ENGINE}
environment variable accordingly.
@end quotation

@cindex Einsprungpunkt, für Docker-Abbilder
@item --entry-point=@var{Befehl}
Den @var{Befehl} als den @dfn{Einsprungpunkt} des erzeugten Bündels
verwenden, wenn das Bündelformat einen solchen unterstützt — derzeit tun das
@code{docker} und @code{squashfs} (Singularity). Der @var{Befehl} wird
relativ zum Profil ausgeführt, das sich im Bündel befindet.

Der Einsprungpunkt gibt den Befehl an, der mit @code{docker run} oder
@code{singularity run} beim Start nach Voreinstellung automatisch ausgeführt
wird. Zum Beispiel können Sie das hier benutzen:

@example
guix pack -f docker --entry-point=bin/guile guile
@end example

Dann kann das erzeugte Bündel mit z.B.@: @code{docker run} ohne weitere
Befehlszeilenargumente einfach geladen und ausgeführt werden, um
@code{bin/guile} zu starten:

@example
docker load -i pack.tar.gz
docker run @var{Abbild-ID}
@end example

@item --expression=@var{Ausdruck}
@itemx -e @var{Ausdruck}
Als Paket benutzen, wozu der @var{Ausdruck} ausgewertet wird.

This has the same purpose as the same-named option in @command{guix build}
(@pxref{Zusätzliche Erstellungsoptionen, @option{--expression} in @command{guix
build}}).

@item --manifest=@var{Datei}
@itemx -m @var{Datei}
Die Pakete benutzen, die im Manifest-Objekt aufgeführt sind, das vom
Scheme-Code in der angegebenen @var{Datei} geliefert wird. Wenn diese
Befehlszeilenoption mehrmals wiederholt angegeben wird, werden die Manifeste
aneinandergehängt.

Dies hat einen ähnlichen Zweck wie die gleichnamige Befehlszeilenoption in
@command{guix package} (siehe @ref{profile-manifest, @option{--manifest}})
und benutzt dieselben Regeln für Manifest-Dateien. Damit können Sie eine
Reihe von Paketen einmal definieren und dann sowohl zum Erzeugen von
Profilesn als auch zum Erzeugen von Archiven benutzen, letztere für
Maschinen, auf denen Guix nicht installiert ist. Beachten Sie, dass Sie
@emph{entweder} eine Manifest-Datei @emph{oder} eine Liste von Paketen
angeben können, aber nicht beides.

@item --system=@var{System}
@itemx -s @var{System}
Versuchen, für die angegebene Art von @var{System} geeignete Binärdateien zu
erstellen — z.B.@: @code{i686-linux} — statt für die Art von System, das die
Erstellung durchführt.

@item --target=@var{Tripel}
@cindex Cross-Kompilieren
Cross-build for @var{triplet}, which must be a valid GNU triplet, such as
@code{"aarch64-linux-gnu"} (@pxref{Specifying target triplets, GNU
configuration triplets,, autoconf, Autoconf}).

@item --compression=@var{Werkzeug}
@itemx -C @var{Werkzeug}
Komprimiert den resultierenden Tarball mit dem angegebenen @var{Werkzeug} —
dieses kann @code{gzip}, @code{bzip2}, @code{xz}, @code{lzip} oder
@code{none} für keine Kompression sein.

@item --symlink=@var{Spezifikation}
@itemx -S @var{Spezifikation}
Fügt die in der @var{Spezifikation} festgelegten symbolischen Verknüpfungen
zum Bündel hinzu.  Diese Befehlszeilenoption darf mehrmals vorkommen.

Die @var{Spezifikation} muss von der Form
@code{@var{Quellort}=@var{Zielort}} sein, wobei der @var{Quellort} der Ort
der symbolischen Verknüpfung, die erstellt wird, und @var{Zielort} das Ziel
der symbolischen Verknüpfung ist.

Zum Beispiel wird mit @code{-S /opt/gnu/bin=bin} eine symbolische
Verknüpfung @file{/opt/gnu/bin} auf das Unterverzeichnis @file{bin} im
Profil erzeugt.

@item --save-provenance
Provenienzinformationen für die auf der Befehlszeile übergebenen Pakete
speichern. Zu den Provenienzinformationen gehören die URL und der Commit
jedes benutzten Kanals (siehe @ref{Kanäle}).

Provenienzinformationen werden in der Datei
@file{/gnu/store/…-profile/manifest} im Bündel zusammen mit den üblichen
Paketmetadaten abgespeichert — also Name und Version jedes Pakets, welche
Eingaben dabei propagiert werden und so weiter. Die Informationen nützen den
Empfängern des Bündels, weil sie dann wissen, woraus das Bündel (angeblich)
besteht.

Der Vorgabe nach wird diese Befehlszeilenoption @emph{nicht} verwendet, weil
Provenienzinformationen genau wie Zeitstempel nichts zum Erstellungsprozess
beitragen. Mit anderen Worten gibt es unendlich viele Kanal-URLs und
Commit-IDs, aus denen dasselbe Bündel stammen könnte. Wenn solche „stillen“
Metadaten Teil des Ausgabe sind, dann wird also die bitweise
Reproduzierbarkeit von Quellcode zu Binärdateien eingeschränkt.

@item --root=@var{Datei}
@itemx -r @var{Datei}
@cindex Müllsammlerwurzel, für Bündel
Die @var{Datei} zu einer symbolischen Verknüpfung auf das erzeugte Bündel
machen und als Müllsammlerwurzel registrieren.

@item --localstatedir
@itemx --profile-name=@var{Name}
Das „lokale Zustandsverzeichnis“ @file{/var/guix} ins resultierende Bündel
aufnehmen, speziell auch das Profil
@file{/var/guix/profiles/per-user/root/@var{Name}} — der vorgegebene
@var{Name} ist @code{guix-profile}, was @file{~root/.guix-profile}
entspricht.

@file{/var/guix} enthält die Store-Datenbank (siehe @ref{Der Store}) sowie
die Müllsammlerwurzeln (siehe @ref{Aufruf von guix gc}). Es ins Bündel
aufzunehmen, bedeutet, dass der enthaltene Store „vollständig“ ist und von
Guix verwaltet werden kann, andernfalls wäre der Store im Bündel „tot“ und
nach dem Auspacken des Bündels könnte Guix keine Objekte mehr dort
hinzufügen oder entfernen.

Ein Anwendungsfall hierfür ist der eigenständige, alle Komponenten
umfassende binäre Tarball von Guix (siehe @ref{Aus Binärdatei installieren}).

@item --derivation
@itemx -d
Den Namen der Ableitung ausgeben, die das Bündel erstellt.

@item --bootstrap
Mit den Bootstrap-Binärdateien das Bündel erstellen. Diese Option ist nur
für Guix-Entwickler nützlich.
@end table

Außerdem unterstützt @command{guix pack} alle gemeinsamen
Erstellungsoptionen (siehe @ref{Gemeinsame Erstellungsoptionen}) und alle
Paketumwandlungsoptionen (siehe @ref{Paketumwandlungsoptionen}).


@node GCC-Toolchain
@section GCC-Toolchain

@cindex GCC
@cindex ld-wrapper
@cindex linker wrapper
@cindex toolchain, for C development
@cindex toolchain, for Fortran development

If you need a complete toolchain for compiling and linking C or C++ source
code, use the @code{gcc-toolchain} package.  This package provides a
complete GCC toolchain for C/C++ development, including GCC itself, the GNU
C Library (headers and binaries, plus debugging symbols in the @code{debug}
output), Binutils, and a linker wrapper.

The wrapper's purpose is to inspect the @code{-L} and @code{-l} switches
passed to the linker, add corresponding @code{-rpath} arguments, and invoke
the actual linker with this new set of arguments.  You can instruct the
wrapper to refuse to link against libraries not in the store by setting the
@env{GUIX_LD_WRAPPER_ALLOW_IMPURITIES} environment variable to @code{no}.

The package @code{gfortran-toolchain} provides a complete GCC toolchain for
Fortran development.  For other languages, please use @samp{guix search gcc
toolchain} (@pxref{guix-search,, Invoking guix package}).

@c *********************************************************************
@node Programmierschnittstelle
@chapter Programmierschnittstelle

GNU Guix bietet mehrere Programmierschnittstellen (APIs) in der
Programmiersprache Scheme an, mit denen Software-Pakete definiert, erstellt
und gesucht werden können. Die erste Schnittstelle erlaubt es Nutzern, ihre
eigenen Paketdefinitionen in einer Hochsprache zu schreiben. Diese
Definitionen nehmen Bezug auf geläufige Konzepte der Paketverwaltung, wie
den Namen und die Version eines Pakets, sein Erstellungssystem (Build
System) und seine Abhängigkeiten (Dependencies). Diese Definitionen können
dann in konkrete Erstellungsaktionen umgewandelt werden.

Erstellungsaktionen werden vom Guix-Daemon für dessen Nutzer
durchgeführt. Bei einer normalen Konfiguration hat der Daemon Schreibzugriff
auf den Store, also das Verzeichnis @file{/gnu/store}, Nutzer hingegen
nicht. Die empfohlene Konfiguration lässt den Daemon die Erstellungen in
chroot-Umgebungen durchführen, mit eigenen Benutzerkonten für
„Erstellungsbenutzer“, um gegenseitige Beeinflussung der Erstellung und des
übrigen Systems zu minimieren.

@cindex Ableitung
Systemnahe APIs stehen zur Verfügung, um mit dem Daemon und dem Store zu
interagieren. Um den Daemon anzuweisen, eine Erstellungsaktion
durchzuführen, versorgen ihn Nutzer jeweils mit einer @dfn{Ableitung}. Eine
Ableitung ist, wie durchzuführende Erstellungsaktionen, sowie die
Umgebungen, in denen sie durchzuführen sind, in Guix eigentlich intern
dargestellt werden. Ableitungen verhalten sich zu Paketdefinitionen
vergleichbar mit Assembler-Code zu C-Programmen. Der Begriff „Ableitung“
kommt daher, dass Erstellungsergebnisse daraus @emph{abgeleitet} werden.

Dieses Kapitel beschreibt der Reihe nach all diese Programmierschnittstellen
(APIs), angefangen mit hochsprachlichen Paketdefinitionen.

@menu
* Paketmodule::              Pakete aus Sicht des Programmierers.
* Pakete definieren::        Wie Sie neue Pakete definieren.
* Erstellungssysteme::       Angeben, wie Pakete erstellt werden.
* Der Store::                Den Paket-Store verändern.
* Ableitungen::              Systemnahe Schnittstelle für Paketableitungen.
* Die Store-Monade::         Rein funktionale Schnittstelle zum Store.
* G-Ausdrücke::             Erstellungsausdrücke verarbeiten.
* Aufruf von guix repl::     Interaktiv an Guix herumbasteln.
@end menu

@node Paketmodule
@section Paketmodule

Aus Programmierersicht werden die Paketdefinitionen der GNU-Distribution als
Guile-Module in Namensräumen wie @code{(gnu packages …)} sichtbar
gemacht@footnote{Beachten Sie, dass Pakete unter dem Modulnamensraum
@code{(gnu packages …)} nicht notwendigerweise auch „GNU-Pakete“
sind. Dieses Schema für die Benennung von Modulen folgt lediglich den
üblichen Guile-Konventionen: @code{gnu} bedeutet, dass die Module als Teil
des GNU-Systems ausgeliefert werden, und @code{packages} gruppiert Module
mit Paketdefinitionen.} (siehe @ref{Module, Guile modules,, guile, GNU
Guile Reference Manual}). Zum Beispiel exportiert das Modul @code{(gnu
packages emacs)} eine Variable namens @code{emacs}, die an ein
@code{<package>}-Objekt gebunden ist (siehe @ref{Pakete definieren}).

Der Modulnamensraum @code{(gnu packages …)} wird von Befehlszeilenwerkzeugen
automatisch nach Paketen durchsucht. Wenn Sie zum Beispiel @code{guix
install emacs} ausführen, werden alle @code{(gnu packages …)}-Module
durchlaufen, bis eines gefunden wird, das ein Paketobjekt mit dem Namen
@code{emacs} exportiert. Diese Paketsuchfunktion ist im Modul @code{(gnu
packages)} implementiert.

@cindex Anpassung, von Paketen
@cindex Paketmodulsuchpfad
Users can store package definitions in modules with different names---e.g.,
@code{(my-packages emacs)}@footnote{Note that the file name and module name
must match.  For instance, the @code{(my-packages emacs)} module must be
stored in a @file{my-packages/emacs.scm} file relative to the load path
specified with @option{--load-path} or @env{GUIX_PACKAGE_PATH}.
@xref{Modules and the File System,,, guile, GNU Guile Reference Manual}, for
details.}.  There are two ways to make these package definitions visible to
the user interfaces:

@enumerate
@item
By adding the directory containing your package modules to the search path
with the @code{-L} flag of @command{guix package} and other commands
(@pxref{Gemeinsame Erstellungsoptionen}), or by setting the @env{GUIX_PACKAGE_PATH}
environment variable described below.

@item
Die andere Möglichkeit ist, einen @dfn{Kanal} zu definieren und
@command{guix pull} so zu konfigurieren, dass es davon seine Module
bezieht. Ein Kanal ist im Kern nur ein Git-Repository, in welchem
Paketmodule liegen. Siehe @ref{Kanäle} für mehr Informationen, wie Kanäle
definiert und benutzt werden.
@end enumerate

@env{GUIX_PACKAGE_PATH} works similarly to other search path variables:

@defvr {Umgebungsvariable} GUIX_PACKAGE_PATH
Dies ist eine doppelpunktgetrennte Liste von Verzeichnissen, die nach
zusätzlichen Paketmodulen durchsucht werden. In dieser Variablen
aufgelistete Verzeichnisse haben Vorrang vor den Modulen, die zur
Distribution gehören.
@end defvr

Die Distribution wird komplett von Grund auf initialisiert — man sagt zur
Initialisierung auch @dfn{Bootstrapping} — und sie ist @dfn{eigenständig}
(„self-contained“): Jedes Paket wird nur auf Basis von anderen Paketen in
der Distribution erstellt. Die Wurzel dieses Abhängigkeitsgraphen ist ein
kleiner Satz von Initialisierungsbinärdateien, den
@dfn{Bootstrap-Binärdateien}, die im Modul @code{(gnu packages bootstrap)}
verfügbar gemacht werden. Für mehr Informationen über Bootstrapping, siehe
@ref{Bootstrapping}.

@node Pakete definieren
@section Pakete definieren

Mit den Modulen @code{(guix packages)} und @code{(guix build-system)} können
Paketdefinitionen auf einer hohen Abstraktionsebene geschrieben werden. Zum
Beispiel sieht die Paketdefinition bzw. das @dfn{Rezept} für das Paket von
GNU Hello so aus:

@lisp
(define-module (gnu packages hello)
  #:use-module (guix packages)
  #:use-module (guix download)
  #:use-module (guix build-system gnu)
  #:use-module (guix licenses)
  #:use-module (gnu packages gawk))

(define-public hello
  (package
    (name "hello")
    (version "2.10")
    (source (origin
              (method url-fetch)
              (uri (string-append "mirror://gnu/hello/hello-" version
                                  ".tar.gz"))
              (sha256
               (base32
                "0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i"))))
    (build-system gnu-build-system)
    (arguments '(#:configure-flags '("--enable-silent-rules")))
    (inputs `(("gawk" ,gawk)))
    (synopsis "Hello, GNU world: An example GNU package")
    (description "Guess what GNU Hello prints!")
    (home-page "https://www.gnu.org/software/hello/")
    (license gpl3+)))
@end lisp

@noindent
Auch ohne ein Experte in Scheme zu sein, könnten Leser erraten haben, was
die verschiedenen Felder dabei bedeuten. Dieser Ausdruck bindet die Variable
@code{hello} an ein @code{<package>}-Objekt, was an sich nur ein Verbund
(Record) ist (siehe @ref{SRFI-9, Scheme records,, guile, GNU Guile Reference
Manual}). Die Felder dieses Paket-Objekts lassen sich mit den Prozeduren aus
dem Modul @code{(guix packages)} auslesen, zum Beispiel liefert
@code{(package-name hello)} — Überraschung! — @code{"hello"}.

Mit etwas Glück können Sie die Definition vielleicht teilweise oder sogar
ganz aus einer anderen Paketsammlung importieren, indem Sie den Befehl
@code{guix import} verwenden (siehe @ref{Aufruf von guix import}).

In obigem Beispiel wurde @var{hello} in einem eigenen Modul ganz für sich
alleine definiert, und zwar @code{(gnu packages hello)}. Technisch gesehen
muss es nicht unbedingt in einem solchen Modul definiert werden, aber es ist
bequem, denn alle Module unter @code{(gnu packages …)} werden automatisch
von den Befehlszeilenwerkzeugen gefunden (siehe @ref{Paketmodule}).

Ein paar Dinge sind noch erwähnenswert in der obigen Paketdefinition:

@itemize
@item
Das @code{source}-Feld für die Quelle des Pakets ist ein
@code{<origin>}-Objekt, was den Paketursprung angibt (siehe @ref{„origin“-Referenz} für eine vollständige Referenz). Hier wird dafür die Methode
@code{url-fetch} aus dem Modul @code{(guix download)} benutzt, d.h.@: die
Quelle ist eine Datei, die über FTP oder HTTP heruntergeladen werden soll.

Das Präfix @code{mirror://gnu} lässt @code{url-fetch} einen der
GNU-Spiegelserver benutzen, die in @code{(guix download)} definiert sind.

Das Feld @code{sha256} legt den erwarteten SHA256-Hashwert der
herunterzuladenden Datei fest. Ihn anzugeben ist Pflicht und er ermöglicht
es Guix, die Integrität der Datei zu überprüfen. Die Form @code{(base32 …)}
geht der base32-Darstellung des Hash-Wertes voraus. Sie finden die
base32-Darstellung mit Hilfe der Befehle @code{guix download} (siehe
@ref{Aufruf von guix download}) und @code{guix hash} (siehe @ref{Aufruf von guix hash}).

@cindex Patches
Wenn nötig kann in der @code{origin}-Form auch ein @code{patches}-Feld
stehen, wo anzuwendende Patches aufgeführt werden, sowie ein
@code{snippet}-Feld mit einem Scheme-Ausdruck mit den Anweisungen, wie der
Quellcode zu modifizieren ist.

@item
@cindex GNU-Erstellungssystem
Das Feld @code{build-system} legt fest, mit welcher Prozedur das Paket
erstellt werden soll (siehe @ref{Erstellungssysteme}). In diesem Beispiel steht
@var{gnu-build-system} für das wohlbekannte GNU-Erstellungssystem, wo Pakete
mit der üblichen Befehlsfolge @code{./configure && make && make check &&
make install} konfiguriert, erstellt und installiert werden.

@item
The @code{arguments} field specifies options for the build system
(@pxref{Erstellungssysteme}).  Here it is interpreted by @var{gnu-build-system}
as a request run @file{configure} with the @option{--enable-silent-rules}
flag.

@cindex quote
@cindex Maskierung
@findex '
@findex quote
Was hat es mit diesen einfachen Anführungszeichen (@code{'}) auf sich? Sie
gehören zur Syntax von Scheme und führen eine wörtlich zu interpretierende
Datenlisten ein; dies nennt sich Maskierung oder Quotierung. @code{'} ist
synonym mit @code{quote}. @ref{Expression Syntax, quoting,, guile, GNU Guile
Reference Manual} enthält weitere Details. Hierbei ist also der Wert des
@code{arguments}-Feldes eine Liste von Argumenten, die an das
Erstellungssystem weitergereicht werden, wie bei @code{apply} (siehe
@ref{Fly Evaluation, @code{apply},, guile, GNU Guile Reference Manual}).

Ein Doppelkreuz gefolgt von einem Doppelpunkt (@code{#:}) definiert ein
Scheme-@dfn{Schlüsselwort} (siehe @ref{Keywords,,, guile, GNU Guile
Reference Manual}) und @code{#:configure-flags} ist ein Schlüsselwort, um
eine Befehlszeilenoption an das Erstellungssystem mitzugeben (siehe
@ref{Coding With Keywords,,, guile, GNU Guile Reference Manual}).

@item
Das Feld @code{inputs} legt Eingaben an den Erstellungsprozess fest — d.h.@:
Abhängigkeiten des Pakets zur Erstellungs- oder Laufzeit. Hier definieren
wir eine Eingabe namens @code{"gawk"}, deren Wert wir auf den Wert der
@var{gawk}-Variablen festlegen; @var{gawk} ist auch selbst wiederum an ein
@code{<package>}-Objekt als Variablenwert gebunden.

@cindex Backquote (Quasimaskierung)
@findex `
@findex quasiquote
@cindex Komma (Demaskierung)
@findex ,
@findex unquote
@findex ,@@
@findex unquote-splicing
Auch mit @code{`} (einem Backquote, stattdessen kann man auch das längere
Synonym @code{quasiquote} schreiben) können wir eine wörtlich als Daten
interpretierte Liste im @code{inputs}-Feld einführen, aber bei dieser
„Quasimaskierung“ kann @code{,} (ein Komma, oder dessen Synonym
@code{unquote}) benutzt werden, um den ausgewerteten Wert eines Ausdrucks in
diese Liste einzufügen (siehe @ref{Expression Syntax, unquote,, guile, GNU
Guile Reference Manual}).

Beachten Sie, dass GCC, Coreutils, Bash und andere essenzielle Werkzeuge
hier nicht als Eingaben aufgeführt werden müssen. Stattdessen sorgt schon
@var{gnu-build-system} dafür, dass diese vorhanden sein müssen (siehe
@ref{Erstellungssysteme}).

Sämtliche anderen Abhängigkeiten müssen aber im @code{inputs}-Feld
aufgezählt werden. Jede hier nicht angegebene Abhängigkeit wird während des
Erstellungsprozesses schlicht nicht verfügbar sein, woraus ein
Erstellungsfehler resultieren kann.
@end itemize

Siehe @ref{„package“-Referenz} für eine umfassende Beschreibung aller
erlaubten Felder.

Sobald eine Paketdefinition eingesetzt wurde, können Sie das Paket mit Hilfe
des Befehlszeilenwerkzeugs @code{guix build} dann auch tatsächlich erstellen
(siehe @ref{Aufruf von guix build}) und dabei jegliche Erstellungsfehler, auf
die Sie stoßen, beseitigen (siehe @ref{Fehlschläge beim Erstellen untersuchen}). Sie
können den Befehl @command{guix edit} benutzen, um leicht zur
Paketdefinition zurückzuspringen (siehe @ref{Aufruf von guix edit}). Unter
@ref{Paketrichtlinien} finden Sie mehr Informationen darüber, wie Sie
Paketdefinitionen testen, und unter @ref{Aufruf von guix lint} finden Sie
Informationen, wie Sie prüfen, ob eine Definition alle Stilkonventionen
einhält.
@vindex GUIX_PACKAGE_PATH
Zuletzt finden Sie unter @ref{Kanäle} Informationen, wie Sie die
Distribution um Ihre eigenen Pakete in einem „Kanal“ erweitern.

Zu all dem sei auch erwähnt, dass Sie das Aktualisieren einer
Paketdefinition auf eine vom Anbieter neu veröffentlichte Version mit dem
Befehl @command{guix refresh} teilweise automatisieren können (siehe
@ref{Aufruf von guix refresh}).

Behind the scenes, a derivation corresponding to the @code{<package>} object
is first computed by the @code{package-derivation} procedure.  That
derivation is stored in a @file{.drv} file under @file{/gnu/store}.  The
build actions it prescribes may then be realized by using the
@code{build-derivations} procedure (@pxref{Der Store}).

@deffn {Scheme-Prozedur} package-derivation @var{Store} @var{Paket} [@var{System}]
Das @code{<derivation>}-Objekt zum @var{Paket} für das angegebene
@var{System} liefern (siehe @ref{Ableitungen}).

Als @var{Paket} muss ein gültiges @code{<package>}-Objekt angegeben werden
und das @var{System} muss eine Zeichenkette sein, die das Zielsystem angibt
— z.B.@: @code{"x86_64-linux"} für ein auf x86_64 laufendes, Linux-basiertes
GNU-System. @var{Store} muss eine Verbindung zum Daemon sein, der die
Operationen auf dem Store durchführt (siehe @ref{Der Store}).
@end deffn

@noindent
@cindex Cross-Kompilieren
Auf ähnliche Weise kann eine Ableitung berechnet werden, die ein Paket für
ein anderes System cross-erstellt.

@deffn {Scheme-Prozedur} package-cross-derivation @var{Store} @
            @var{Paket} @var{Ziel} [@var{System}] Liefert das
@code{<derivation>}-Objekt, um das @var{Paket} zu cross-erstellen vom
@var{System} aus für das @var{Ziel}-System.

@var{target} must be a valid GNU triplet denoting the target hardware and
operating system, such as @code{"aarch64-linux-gnu"} (@pxref{Specifying
Target Triplets,,, autoconf, Autoconf}).
@end deffn

@cindex Paketumwandlungen
@cindex Eingaben umschreiben
@cindex Abhängigkeitsbaum umschreiben
Pakete können auf beliebige Art verändert werden. Ein Beispiel für eine
nützliche Veränderung ist das @dfn{Umschreiben von Eingaben}, womit der
Abhängigkeitsbaum eines Pakets umgeschrieben wird, indem bestimmte Eingaben
durch andere ersetzt werden:

@deffn {Scheme-Prozedur} package-input-rewriting @var{Ersetzungen} @
           [@var{umgeschriebener-Name}] Eine Prozedur liefern, die für ein ihr
übergebenes Paket dessen direkte und indirekte Abhängigkeit (aber nicht
dessen implizite Eingaben) gemäß den @var{Ersetzungen}
umschreibt. @var{Ersetzungen} ist eine Liste von Paketpaaren; das erste
Element eines Paares ist das zu ersetzende Paket und das zweite ist, wodurch
es ersetzt werden soll.

Optional kann als @var{umgeschriebener-Name} eine ein Argument nehmende
Prozedur angegeben werden, die einen Paketnamen nimmt und den Namen nach dem
Umschreiben zurückliefert.
@end deffn

@noindent
Betrachten Sie dieses Beispiel:

@lisp
(define libressl-statt-openssl
  ;; Dies ist eine Prozedur, mit der OPENSSL durch LIBRESSL
  ;; rekursiv ersetzt wird.
  (package-input-rewriting `((,openssl . ,libressl))))

(define git-mit-libressl
  (libressl-statt-openssl git))
@end lisp

@noindent
Hier definieren wir zuerst eine Umschreibeprozedur, die @var{openssl} durch
@var{libressl} ersetzt. Dann definieren wir damit eine @dfn{Variante} des
@var{git}-Pakets, die @var{libressl} statt @var{openssl} benutzt. Das ist
genau, was auch die Befehlszeilenoption @option{--with-input} tut (siehe
@ref{Paketumwandlungsoptionen, @option{--with-input}}).

Die folgende Variante von @code{package-input-rewriting} kann für die
Ersetzung passende Pakete anhand ihres Namens finden, statt zu prüfen, ob
der Wert identisch ist.

@deffn {Scheme-Prozedur} package-input-rewriting/spec @var{Ersetzungen}
Liefert eine Prozedur, die für ein gegebenes Paket die angegebenen
@var{Ersetzungen} auf dessen gesamten Paketgraphen anwendet (außer auf
implizite Eingaben). @var{Ersetzungen} muss dabei eine Liste von Paaren aus
je einer Spezifikation und Prozedur sein. Dabei ist jede Spezifikation eine
Paketspezifikation wie @code{"gcc"} oder @code{"guile@@2"} und jede Prozedur
nimmt ein passendes Paket und liefert dafür einen Ersatz für das Paket.
@end deffn

Das obige Beispiel könnte auch so geschrieben werden:

@lisp
(define libressl-statt-openssl
  ;; Rekursiv alle Pakete namens "openssl" durch LibreSSL ersetzen.
  (package-input-rewriting/spec `(("openssl" . ,(const libressl)))))
@end lisp

Der Hauptunterschied ist hier, dass diesmal Pakete zur Spezifikation passen
müssen und nicht deren Wert identisch sein muss, damit sie ersetzt
werden. Mit anderen Worten wird jedes Paket im Graphen ersetzt, das
@code{openssl} heißt.

Eine allgemeiner anwendbare Prozedur, um den Abhängigkeitsgraphen eines
Pakets umzuschreiben, ist @code{package-mapping}. Sie unterstützt beliebige
Änderungen an den Knoten des Graphen.

@deffn {Scheme-Prozedur} package-mapping @var{Prozedur} [@var{Schnitt?}]
Liefert eine Prozedur, die, wenn ihr ein Paket übergeben wird, die an
@code{package-mapping} übergebene @var{Prozedur} auf alle vom Paket
abhängigen Pakete anwendet. Die Prozedur liefert das resultierende
Paket. Wenn @var{Schnitt?} für ein Paket davon einen wahren Wert liefert,
findet kein rekursiver Abstieg in dessen Abhängigkeiten statt.
@end deffn

@menu
* „package“-Referenz::   Der Datentyp für Pakete.
* „origin“-Referenz::    Datentyp für Paketursprünge.
@end menu


@node „package“-Referenz
@subsection @code{package}-Referenz

Dieser Abschnitt fasst alle in @code{package}-Deklarationen zur Verfügung
stehenden Optionen zusammen (siehe @ref{Pakete definieren}).

@deftp {Datentyp} package
Dieser Datentyp steht für ein Paketrezept.

@table @asis
@item @code{name}
Der Name des Pakets als Zeichenkette.

@item @code{version}
Die Version des Pakets als Zeichenkette.

@item @code{source}
Ein Objekt, das beschreibt, wie der Quellcode des Pakets bezogen werden
soll. Meistens ist es ein @code{origin}-Objekt, welches für eine aus dem
Internet heruntergeladene Datei steht (siehe @ref{„origin“-Referenz}). Es
kann aber auch ein beliebiges anderes „dateiähnliches“ Objekt sein, wie
z.B.@: ein @code{local-file}, was eine Datei im lokalen Dateisystem
bezeichnet (siehe @ref{G-Ausdrücke, @code{local-file}}).

@item @code{build-system}
Das Erstellungssystem, mit dem das Paket erstellt werden soll (siehe
@ref{Erstellungssysteme}).

@item @code{arguments} (Vorgabe: @code{'()})
Die Argumente, die an das Erstellungssystem übergeben werden sollen. Dies
ist eine Liste, typischerweise eine Reihe von Schlüssel-Wert-Paaren.

@item @code{inputs} (Vorgabe: @code{'()})
@itemx @code{native-inputs} (Vorgabe: @code{'()})
@itemx @code{propagated-inputs} (Vorgabe: @code{'()})
@cindex Eingaben, von Paketen
In diesen Feldern werden die Abhängigkeiten des Pakets aufgeführt. Jedes
dieser Felder enthält eine Liste von Tupeln, wobei jedes Tupel eine
Bezeichnung für die Eingabe (als Zeichenkette) als erstes Element, dann ein
„package“-, „origin“- oder „derivation“-Objekt (Paket, Ursprung oder
Ableitung) als zweites Element und optional die Benennung der davon zu
benutzenden Ausgabe umfasst; letztere hat als Vorgabewert @code{"out"}
(siehe @ref{Pakete mit mehreren Ausgaben.} für mehr Informationen zu
Paketausgaben). Im folgenden Beispiel etwa werden drei Eingaben festgelegt:

@lisp
`(("libffi" ,libffi)
  ("libunistring" ,libunistring)
  ("glib:bin" ,glib "bin"))  ;Ausgabe "bin" von Glib
@end lisp

@cindex Cross-Kompilieren, Paketabhängigkeiten
Die Unterscheidung zwischen @code{native-inputs} und @code{inputs} ist
wichtig, damit Cross-Kompilieren möglich ist. Beim Cross-Kompilieren werden
als @code{inputs} aufgeführte Abhängigkeiten für die
Ziel-Prozessorarchitektur (@emph{target}) erstellt, andersherum werden als
@code{native-inputs} aufgeführte Abhängigkeiten für die Prozessorarchitektur
der erstellenden Maschine (@emph{build}) erstellt.

@code{native-inputs} listet typischerweise die Werkzeuge auf, die während
der Erstellung gebraucht werden, aber nicht zur Laufzeit des Programms
gebraucht werden. Beispiele sind Autoconf, Automake, pkg-config, Gettext
oder Bison. @command{guix lint} kann melden, ob wahrscheinlich Fehler in der
Auflistung sind (siehe @ref{Aufruf von guix lint}).

@anchor{package-propagated-inputs}
Lastly, @code{propagated-inputs} is similar to @code{inputs}, but the
specified packages will be automatically installed alongside the package
they belong to (@pxref{package-cmd-propagated-inputs, @command{guix
package}}, for information on how @command{guix package} deals with
propagated inputs).

Dies ist zum Beispiel nötig, wenn eine C-/C++-Bibliothek Header-Dateien
einer anderen Bibliothek braucht, um mit ihr kompilieren zu können, oder
wenn sich eine pkg-config-Datei auf eine andere über ihren
@code{Requires}-Eintrag bezieht.

Noch ein Beispiel, wo @code{propagated-inputs} nützlich ist, sind Sprachen,
die den Laufzeit-Suchpfad @emph{nicht} zusammen mit dem Programm abspeichern
(@emph{nicht} wie etwa im @code{RUNPATH} bei ELF-Dateien), also Sprachen wie
Guile, Python, Perl und weitere. Damit auch in solchen Sprachen geschriebene
Bibliotheken zur Laufzeit den von ihnen benötigten Code finden können,
müssen deren Laufzeit-Abhängigkeiten in @code{propagated-inputs} statt in
@code{inputs} aufgeführt werden.

@item @code{outputs} (Vorgabe: @code{'("out")})
Die Liste der Benennungen der Ausgaben des Pakets. Der Abschnitt
@ref{Pakete mit mehreren Ausgaben.} beschreibt übliche Nutzungen
zusätzlicher Ausgaben.

@item @code{native-search-paths} (Vorgabe: @code{'()})
@itemx @code{search-paths} (Vorgabe: @code{'()})
Eine Liste von @code{search-path-specification}-Objekten, die
Umgebungsvariable für von diesem Paket beachtete Suchpfade („search paths“)
beschreiben.

@item @code{replacement} (Vorgabe: @code{#f})
Dies muss entweder @code{#f} oder ein package-Objekt sein, das als Ersatz
(@dfn{replacement}) dieses Pakets benutzt werden soll. Im Abschnitt
@ref{Sicherheitsaktualisierungen, grafts} wird dies erklärt.

@item @code{synopsis}
Eine einzeilige Beschreibung des Pakets.

@item @code{description}
Eine ausführlichere Beschreibung des Pakets.

@item @code{license}
@cindex Lizenz, von Paketen
Die Lizenz des Pakets; benutzt werden kann ein Wert aus dem Modul
@code{(guix licenses)} oder eine Liste solcher Werte.

@item @code{home-page}
Die URL, die die Homepage des Pakets angibt, als Zeichenkette.

@item @code{supported-systems} (default: @code{%supported-systems})
Die Liste der vom Paket unterstützten Systeme als Zeichenketten der Form
@code{Architektur-Kernel}, zum Beispiel @code{"x86_64-linux"}.

@item @code{location} (Vorgabe: die Stelle im Quellcode, wo die @code{package}-Form steht)
Wo im Quellcode das Paket definiert wurde. Es ist sinnvoll, dieses Feld
manuell zuzuweisen, wenn das Paket von einem anderen Paket erbt, weil dann
dieses Feld nicht automatisch berichtigt wird.
@end table
@end deftp

@deffn {Scheme-Syntax} this-package
Wenn dies im @emph{lexikalischen Geltungsbereich} der Definition eines
Feldes im Paket steht, bezieht sich dieser Bezeichner auf das Paket, das
gerade definiert wird.

Das folgende Beispiel zeigt, wie man ein Paket als native Eingabe von sich
selbst beim Cross-Kompilieren deklariert:

@lisp
(package
  (name "guile")
  ;; …

  ;; Wenn es cross-kompiliert wird, hängt zum Beispiel
  ;; Guile von einer nativen Version von sich selbst ab.
  ;; Wir fügen sie hier hinzu.
  (native-inputs (if (%current-target-system)
                     `(("self" ,this-package))
                     '())))
@end lisp

Es ist ein Fehler, außerhalb einer Paketdefinition auf @code{this-package}
zu verweisen.
@end deffn

@node „origin“-Referenz
@subsection @code{origin}-Referenz

Dieser Abschnitt fasst alle Optionen zusammen, die in
@code{origin}-Deklarationen zur Verfügung stehen (siehe @ref{Pakete definieren}).

@deftp {Datentyp} origin
Mit diesem Datentyp wird ein Ursprung, von dem Quellcode geladen werden
kann, beschrieben.

@table @asis
@item @code{uri}
Ein Objekt, was die URI des Quellcodes enthält. Der Objekttyp hängt von der
@code{Methode} ab (siehe unten). Zum Beispiel sind, wenn die
@var{url-fetch}-Methode aus @code{(guix download)} benutzt wird, die
gültigen Werte für @code{uri}: eine URL dargestellt als Zeichenkette oder
eine Liste solcher URLs.

@item @code{method}
Eine Prozedur, die die URI verwertet.

Beispiele sind unter anderem:

@table @asis
@item @var{url-fetch} aus @code{(guix download)}
Herunterladen einer Datei von einer HTTP-, HTTPS- oder FTP-URL, die im
@code{uri}-Feld angegeben wurde.

@vindex git-fetch
@item @var{git-fetch} aus @code{(guix git-download)}
Das im @code{uri}-Feld spezifizierte Repository des
Git-Versionskontrollsystems klonen und davon den im @code{uri}-Feld als ein
@code{git-reference}-Objekt angegebenen Commit benutzen; eine
@code{git-reference} sieht so aus:

@lisp
(git-reference
  (url "https://git.savannah.gnu.org/git/hello.git")
  (commit "v2.10"))
@end lisp
@end table

@item @code{sha256}
A bytevector containing the SHA-256 hash of the source.  This is equivalent
to providing a @code{content-hash} SHA256 object in the @code{hash} field
described below.

@item @code{hash}
The @code{content-hash} object of the source---see below for how to use
@code{content-hash}.

Diese Informationen liefert Ihnen der Befehl @code{guix download} (siehe
@ref{Aufruf von guix download}) oder @code{guix hash} (siehe @ref{Aufruf von guix hash}).

@item @code{file-name} (Vorgabe: @code{#f})
Der Dateiname, unter dem der Quellcode abgespeichert werden soll. Wenn er
auf @code{#f} steht, wird ein vernünftiger Name automatisch gewählt. Falls
der Quellcode von einer URL geladen wird, wird der Dateiname aus der URL
genommen. Wenn der Quellcode von einem Versionskontrollsystem bezogen wird,
empfiehlt es sich, den Dateinamen ausdrücklich anzugeben, weil dann keine
sprechende Benennung automatisch gefunden werden kann.

@item @code{patches} (Vorgabe: @code{'()})
Eine Liste von Dateinamen, Ursprüngen oder dateiähnlichen Objekten (siehe
@ref{G-Ausdrücke, dateiartige Objekte}) mit Patches, welche auf den
Quellcode anzuwenden sind.

Die Liste von Patches kann nicht von Parametern der Erstellung
abhängen. Insbesondere kann sie nicht vom Wert von @code{%current-system}
oder @code{%current-target-system} abḧängen.

@item @code{snippet} (Vorgabe: @code{#f})
Ein im Quellcode-Verzeichnis auszuführender G-Ausdruck (siehe
@ref{G-Ausdrücke}) oder S-Ausdruck. Hiermit kann der Quellcode bequem
modifiziert werden, manchmal ist dies bequemer als mit einem Patch.

@item @code{patch-flags} (Vorgabe: @code{'("-p1")})
Eine Liste der Befehlszeilenoptionen, die dem @code{patch}-Befehl übergeben
werden sollen.

@item @code{patch-inputs} (Vorgabe: @code{#f})
Eingabepakete oder -ableitungen für den Patch-Prozess. Bei @code{#f} werden
die üblichen Patcheingaben wie GNU@tie{}Patch bereitgestellt.

@item @code{modules} (Vorgabe: @code{'()})
Eine Liste von Guile-Modulen, die während des Patch-Prozesses und während
der Ausführung des @code{snippet}-Felds geladen sein sollen.

@item @code{patch-guile} (Vorgabe: @code{#f})
Welches Guile-Paket für den Patch-Prozess benutzt werden soll. Bei @code{#f}
wird ein vernünftiger Vorgabewert angenommen.
@end table
@end deftp

@deftp {Data Type} content-hash @var{value} [@var{algorithm}]
Construct a content hash object for the given @var{algorithm}, and with
@var{value} as its hash value.  When @var{algorithm} is omitted, assume it
is @code{sha256}.

@var{value} can be a literal string, in which case it is base32-decoded, or
it can be a bytevector.

The following forms are all equivalent:

@lisp
(content-hash "05zxkyz9bv3j9h0xyid1rhvh3klhsmrpkf3bcs6frvlgyr2gwilj")
(content-hash "05zxkyz9bv3j9h0xyid1rhvh3klhsmrpkf3bcs6frvlgyr2gwilj"
              sha256)
(content-hash (base32
               "05zxkyz9bv3j9h0xyid1rhvh3klhsmrpkf3bcs6frvlgyr2gwilj"))
(content-hash (base64 "kkb+RPaP7uyMZmu4eXPVkM4BN8yhRd8BTHLslb6f/Rc=")
              sha256)
@end lisp

Technically, @code{content-hash} is currently implemented as a macro.  It
performs sanity checks at macro-expansion time, when possible, such as
ensuring that @var{value} has the right size for @var{algorithm}.
@end deftp

@node Erstellungssysteme
@section Erstellungssysteme

@cindex Erstellungssystem
Jede Paketdefinition legt ein @dfn{Erstellungssystem} („build system“) sowie
dessen Argumente fest (siehe @ref{Pakete definieren}). Das
@code{build-system}-Feld steht für die Erstellungsprozedur des Pakets sowie
für weitere implizite Eingaben für die Erstellungsprozedur.

Erstellungssysteme sind @code{<build-system>}-Objekte. Die Schnittstelle, um
solche zu erzeugen und zu verändern, ist im Modul @code{(guix build-system)}
zu finden, und die eigentlichen Erstellungssysteme werden jeweils von ihren
eigenen Modulen exportiert.

@cindex Bag (systemnahe Paketrepräsentation)
Intern funktionieren Erstellungssysteme, indem erst Paketobjekte zu
@dfn{Bags} kompiliert werden. Eine Bag (deutsch: Beutel, Sack) ist wie ein
Paket, aber mit weniger Zierrat — anders gesagt ist eine Bag eine
systemnähere Darstellung eines Pakets, die sämtliche Eingaben des Pakets
einschließlich vom Erstellungssystem hinzugefügter Eingaben enthält. Diese
Zwischendarstellung wird dann zur eigentlichen Ableitung kompiliert (siehe
@ref{Ableitungen}).

Erstellungssysteme akzeptieren optional eine Liste von @dfn{Argumenten}. In
Paketdefinitionen werden diese über das @code{arguments}-Feld übergeben
(siehe @ref{Pakete definieren}). Sie sind in der Regel
Schlüsselwort-Argumente (siehe @ref{Optional Arguments, keyword arguments in
Guile,, guile, GNU Guile Reference Manual}). Der Wert dieser Argumente wird
normalerweise vom Erstellungssystem in der @dfn{Erstellungsschicht}
ausgewertet, d.h.@: von einem durch den Daemon gestarteten Guile-Prozess
(siehe @ref{Ableitungen}).

Das häufigste Erstellungssystem ist @code{gnu-build-system}, was die übliche
Erstellungsprozedur für GNU-Pakete und viele andere Pakete darstellt. Es
wird vom Modul @code{(guix build-system gnu)} bereitgestellt.

@defvr {Scheme-Variable} gnu-build-system
@code{gnu-build-system} steht für das GNU-Erstellungssystem und Varianten
desselben (siehe @ref{Configuration, configuration and makefile
conventions,, standards, GNU Coding Standards}).

@cindex Erstellungsphasen
Kurz gefasst werden Pakete, die es benutzen, konfiguriert, erstellt und
installiert mit der üblichen Befehlsfolge @code{./configure && make && make
check && make install}. In der Praxis braucht man oft noch ein paar weitere
Schritte. Alle Schritte sind in voneinander getrennte @dfn{Phasen}
unterteilt. Erwähnt werden sollten@footnote{Bitte schauen Sie in den Modulen
unter @code{(guix build gnu-build-system)}, wenn Sie mehr Details zu
Erstellungsphasen brauchen.}:

@table @code
@item unpack
Den Quell-Tarball entpacken und das Arbeitsverzeichnis wechseln in den
entpackten Quellbaum. Wenn die Quelle bereits ein Verzeichnis ist, wird es
in den Quellbaum kopiert und dorthin gewechselt.

@item patch-source-shebangs
„Shebangs“ in Quelldateien beheben, damit Sie sich auf die richtigen
Store-Dateipfade beziehen. Zum Beispiel könnte @code{#!/bin/sh} zu
@code{#!/gnu/store/…-bash-4.3/bin/sh} geändert werden.

@item configure
Run the @file{configure} script with a number of default options, such as
@option{--prefix=/gnu/store/@dots{}}, as well as the options specified by
the @code{#:configure-flags} argument.

@item build
@code{make} ausführen mit den Optionen aus der Liste in
@code{#:make-flags}. Wenn das Argument @code{#:parallel-build?} auf wahr
gesetzt ist (was der Vorgabewert ist), wird @code{make -j} zum Erstellen
ausgeführt.

@item check
@code{make check} (oder statt @code{check} ein anderes bei
@code{#:test-target} angegebenes Ziel) ausführen, außer falls @code{#:tests?
#f} gesetzt ist. Wenn das Argument @code{#:parallel-tests?} auf wahr gesetzt
ist (der Vorgabewert), führe @code{make check -j} aus.

@item install
@code{make install} mit den in @code{#:make-flags} aufgelisteten Optionen
ausführen.

@item patch-shebangs
Shebangs in den installierten ausführbaren Dateien beheben.

@item strip
Symbole zur Fehlerbehebung aus ELF-Dateien entfernen (außer
@code{#:strip-binaries?} ist auf falsch gesetzt) und in die
@code{debug}-Ausgabe kopieren, falls diese verfügbar ist (siehe
@ref{Dateien zur Fehlersuche installieren}).
@end table

@vindex %standard-phases
Das erstellungsseitige Modul @code{(guix build gnu-build-system)} definiert
@code{%standard-phases} als die vorgegebene Liste der
Erstellungsphasen. @code{%standard-phases} ist eine Liste von Paaren aus je
einem Symbol und einer Prozedur. Letztere implementiert die eigentliche
Phase.

Die Liste der Phasen, die für ein bestimmtes Paket verwendet werden sollen,
kann vom Parameter @code{#:phases} überschrieben werden. Zum Beispiel werden
bei Übergabe von:

@example
#:phases (modify-phases %standard-phases (delete 'configure))
@end example

alle oben beschriebenen Phasen benutzt außer der @code{configure}-Phase.

Zusätzlich stellt dieses Erstellungssystem sicher, dass die
„Standard“-Umgebung für GNU-Pakete zur Verfügung steht. Diese umfasst
Werkzeuge wie GCC, libc, Coreutils, Bash, Make, Diffutils, grep und sed
(siehe das Modul @code{(guix build-system gnu)} für eine vollständige
Liste). Wir bezeichnen sie als @dfn{implizite Eingaben} eines Pakets, weil
Paketdefinitionen sie nicht aufführen müssen.
@end defvr

Andere @code{<build-system>}-Objekte werden definiert, um andere
Konventionen und Werkzeuge von Paketen für freie Software zu
unterstützen. Die anderen Erstellungssysteme erben den Großteil vom
@code{gnu-build-system} und unterscheiden sich hauptsächlich darin, welche
Eingaben dem Erstellungsprozess implizit hinzugefügt werden und welche Liste
von Phasen durchlaufen wird. Manche dieser Erstellungssysteme sind im
Folgenden aufgeführt.

@defvr {Scheme-Variable} ant-build-system
Diese Variable wird vom Modul @code{(guix build-system ant)} exportiert. Sie
implementiert die Erstellungsprozedur für Java-Pakete, die mit dem
@url{https://ant.apache.org/, Ant build tool} erstellt werden können.

Sowohl @code{ant} als auch der @dfn{Java Development Kit} (JDK), wie er vom
Paket @code{icedtea} bereitgestellt wird, werden zu den Eingaben
hinzugefügt. Wenn andere Pakete dafür benutzt werden sollen, können sie
jeweils mit den Parametern @code{#:ant} und @code{#:jdk} festgelegt werden.

Falls das ursprüngliche Paket über keine nutzbare Ant-Erstellungsdatei
(„Ant-Buildfile“) verfügt, kann aus der Angabe im Parameter
@code{#:jar-name} eine minimale Ant-Erstellungsdatei @file{build.xml}
erzeugt werden, in der die für die Erstellung durchzuführenden Aufgaben
(Tasks) für die Erstellung des angegebenen Jar-Archivs stehen. In diesem
Fall kann der Parameter @code{#:source-dir} benutzt werden, um das
Unterverzeichnis mit dem Quellcode anzugeben; sein Vorgabewert ist „src“.

Der Parameter @code{#:main-class} kann mit einer minimalen
Ant-Erstellungsdatei benutzt werden, um die Hauptklasse des resultierenden
Jar-Archivs anzugeben. Dies ist nötig, wenn die Jar-Datei ausführbar sein
soll. Mit dem Parameter @code{#:test-include} kann eine Liste angegeben
werden, welche Junit-Tests auszuführen sind. Der Vorgabewert ist @code{(list
"**/*Test.java")}. Mit @code{#:test-exclude} kann ein Teil der Testdateien
ignoriert werden. Der Vorgabewert ist @code{(list "**/Abstract*.java")},
weil abstrakte Klassen keine ausführbaren Tests enthalten können.

Der Parameter @code{#:build-target} kann benutzt werden, um die Ant-Aufgabe
(Task) anzugeben, die während der @code{build}-Phase ausgeführt werden
soll. Vorgabe ist, dass die Aufgabe (Task) „jar“ ausgeführt wird.

@end defvr

@defvr {Scheme-Variable} android-ndk-build-system
@cindex Android-Distribution
@cindex Android-NDK-Erstellungssystem
Diese Variable wird von @code{(guix build-system android-ndk)}
exportiert. Sie implementiert eine Erstellungsprozedur für das Android NDK
(Native Development Kit) benutzende Pakete mit einem Guix-spezifischen
Erstellungsprozess.

The build system assumes that packages install their public interface
(header) files to the subdirectory @file{include} of the @code{out} output
and their libraries to the subdirectory @file{lib} the @code{out} output.

Ebenso wird angenommen, dass es keine im Konflikt stehenden Dateien unter
der Vereinigung aller Abhängigkeiten gibt.

Derzeit wird Cross-Kompilieren hierfür nicht unterstützt, also wird dabei
vorausgesetzt, dass Bibliotheken und Header-Dateien dieselben wie im
Wirtssystem sind.

@end defvr

@defvr {Scheme-Variable} asdf-build-system/source
@defvrx {Scheme-Variable} asdf-build-system/sbcl
@defvrx {Scheme-Variable} asdf-build-system/ecl

Diese Variablen, die vom Modul @code{(guix build-system asdf)} exportiert
werden, implementieren Erstellungsprozeduren für Common-Lisp-Pakete, welche
@url{https://common-lisp.net/project/asdf/, „ASDF“} benutzen. ASDF dient der
Systemdefinition für Common-Lisp-Programme und -Bibliotheken.

Das Erstellungssystem @code{asdf-build-system/source} installiert die Pakete
in Quellcode-Form und kann @i{via} ASDF mit jeder
Common-Lisp-Implementierung geladen werden. Die anderen Erstellungssysteme
wie @code{asdf-build-system/sbcl} installieren binäre Systeme in dem Format,
das von einer bestimmten Implementierung verstanden wird. Diese
Erstellungssysteme können auch benutzt werden, um ausführbare Programme zu
erzeugen oder um Lisp-Abbilder mit einem vorab geladenen Satz von Paketen zu
erzeugen.

Das Erstellungssystem benutzt gewisse Namenskonventionen. Bei Binärpaketen
sollte dem Paketnamen die Lispimplementierung als Präfix vorangehen, z.B.@:
@code{sbcl-} für @code{asdf-build-system/sbcl}.

Zudem sollte das entsprechende Quellcode-Paket mit der Konvention wie bei
Python-Paketen (siehe @ref{Python-Module}) ein @code{cl-} als Präfix
bekommen.

Für Binärpakete sollte für jedes System ein Guix-Paket definiert
werden. Wenn für einen Ursprung im @code{origin} mehrere Systeme enthalten
sind, können Paketvarianten geschrieben werden, mit denen alle Systeme
erstellt werden. Quellpakete, die @code{asdf-build-system/source} benutzen,
können mehrere Systeme enthalten.

Um ausführbare Programme und Abbilder zu erzeugen, können die
erstellungsseitigen Prozeduren @code{build-program} und @code{build-image}
benutzt werden. Sie sollten in einer Erstellungsphase nach der
@code{create-symlinks}-Phase aufgerufen werden, damit das gerade erstellte
System Teil des resultierenden Abbilds sein kann. An @code{build-program}
muss eine Liste von Common-Lisp-Ausdrücken über das Argument
@code{#:entry-program} übergeben werden.

If the system is not defined within its own @file{.asd} file of the same
name, then the @code{#:asd-file} parameter should be used to specify which
file the system is defined in.  Furthermore, if the package defines a system
for its tests in a separate file, it will be loaded before the tests are run
if it is specified by the @code{#:test-asd-file} parameter.  If it is not
set, the files @code{<system>-tests.asd}, @code{<system>-test.asd},
@code{tests.asd}, and @code{test.asd} will be tried if they exist.

Wenn aus irgendeinem Grund der Paketname nicht den Namenskonventionen folgen
kann, kann der Parameter @code{#:asd-system-name} benutzt werden, um den
Namen des Systems anzugeben.

@end defvr

@defvr {Scheme-Variable} cargo-build-system
@cindex Rust-Programmiersprache
@cindex Cargo (Rust-Erstellungssystem)
Diese Variable wird vom Modul @code{(guix build-system cargo)}
exportiert. Damit können Pakete mit Cargo erstellt werden, dem
Erstellungswerkzeug der @uref{https://www.rust-lang.org,
Rust-Programmiersprache}.

Das Erstellungssystem fügt @code{rustc} und @code{cargo} zu den Eingaben
hinzu. Ein anderes Rust-Paket kann mit dem Parameter @code{#:rust} angegeben
werden.

Normale cargo-Abhängigkeiten sollten zur Paketdefinition über den Parameter
@code{#:cargo-inputs} als eine Liste von Paaren aus Name und Spezifikation
hinzugefügt werden, wobei als Spezifikation ein Paket oder eine
Quellcode-Definition angegeben werden kann. Beachten Sie, dass die
Spezifikation zu einem mit gzip komprimierten Tarball ausgewertet werden
muss, der eine Datei @code{Cargo.toml} in seinem Wurzelverzeichnis enthält,
ansonsten wird sie ignoriert. Analog sollten solche Abhängigkeiten, die in
cargo als „dev-dependencies“ deklariert werden, zur Paketdefinition über den
Parameter @code{#:cargo-development-inputs} hinzugefügt werden.

In seiner @code{configure}-Phase sorgt dieses Erstellungssystem dafür, dass
cargo alle Quellcodeeingaben zur Verfügung stehen, die in den Parametern
@code{#:cargo-inputs} und @code{#:cargo-development-inputs} angegeben
wurden. Außerdem wird eine enthaltene @code{Cargo.lock}-Datei entfernt,
damit @code{cargo} selbige während der @code{build}-Phase neu erzeugt. Die
@code{install}-Phase installiert die in jeder Crate definierten
Binärdateien.
@end defvr


@defvr {Scheme-Variable} copy-build-system
Diese Variable wird vom Modul @code{(guix build-system copy)}
exportiert. Damit können einfache Pakete erstellt werden, für die nur wenig
kompiliert werden muss, sondern in erster Linie Dateien kopiert werden.

Dadurch wird ein Großteil der @code{gnu-build-system} zur Menge der
Paketeingaben hinzugefügt. Deswegen kann man bei Nutzung des
@code{copy-build-system} auf große Teile des Codes verzichten, der beim
@code{trivial-build-system} anfallen würde.

Um den Dateiinstallationsvorgang weiter zu vereinfachen, wird ein Argument
@code{#:install-plan} zur Verfügung gestellt, mit dem der Paketautor angeben
kann, welche Dateien wohin gehören. Der Installationsplan ist eine Liste aus
@code{(@var{Quelle} @var{Ziel} [@var{Filter}])}. Die @var{Filter} sind
optional.

@itemize
@item Wenn die @var{Quelle} einer Datei oder einem Verzeichnis ohne Schrägstrich am Ende entspricht, wird sie nach @var{Ziel} installiert.
@itemize
@item Hat das @var{Ziel} einen Schrägstrich am Ende, wird mit dem Basisnamen der @var{Quelle} innerhalb von @var{Ziel} installiert.
@item Andernfalls wird die @var{Quelle} als @var{Ziel} installiert.
@end itemize

@item Falls es sich bei der @var{Quelle} um ein Verzeichnis mit Schrägstrich am Ende handelt oder wenn @var{Filter} benutzt werden,
so ist der Schrägstrich am Ende von @var{Ziel} mit der Bedeutung wie oben
implizit.
@itemize
@item Ohne Angabe von @var{Filter}n wird der gesamte @emph{Inhalt} der @var{Quelle} nach @var{Ziel} installiert.
@item Werden @var{Filter} als @code{#:include}, @code{#:include-regexp}, @code{#:exclude}
oder @code{#:exclude-regexp} aufgeführt, werden je nach Filter nur die
ausgewählten Dateien installiert. Jeder Filter wird als Liste von
Zeichenketten angegeben.
@itemize
@item Bei @code{#:include} werden all die Dateien installiert, deren Pfad als Suffix
zu mindestens einem der Elemente der angegebenen Liste passt.
@item Bei @code{#:include-regexp} werden all die Dateien installiert, deren
Unterpfad zu mindestens einem der regulären Ausdrücke in der angegebenen
Liste passt.
@item Die Filter @code{#:exclude} und @code{#:exclude-regexp}
bewirken das Gegenteil ihrer Include-Entsprechungen. Ohne
@code{#:include}-Angaben werden alle Dateien außer den zu den
Exclude-Filtern passenden installiert. Werden sowohl @code{#:include} als
auch @code{#:exclude} angegeben, werden zuerst die @code{#:include}-Angaben
beachtet und danach wird durch @code{#:exclude} gefiltert.
@end itemize
@end itemize
In jedem Fall bleiben die Pfade relativ zur @var{Quelle} innerhalb des
@var{Ziel}s erhalten.
@end itemize

Beispiele:

@itemize
@item @code{("foo/bar" "share/my-app/")}: Installiert @file{bar} nach @file{share/my-app/bar}.
@item @code{("foo/bar" "share/my-app/baz")}: Installiert @file{bar} nach @file{share/my-app/baz}.
@item @code{("foo/" "share/my-app")}: Installiert den Inhalt von @file{foo} innerhalb von @file{share/my-app}.
Zum Beispiel wird @file{foo/sub/datei} nach @file{share/my-app/sub/datei}
installiert.
@item @code{("foo/" "share/my-app" #:include ("sub/datei"))}: Installiert nur @file{foo/sub/datei}
nach @file{share/my-app/sub/datei}.
@item @code{("foo/sub" "share/my-app" #:include ("datei"))}: Installiert @file{foo/sub/datei}
nach @file{share/my-app/datei}.
@end itemize
@end defvr


@cindex Clojure (Programmiersprache)
@cindex einfaches Clojure-Erstellungssystem
@defvr {Scheme-Variable} clojure-build-system
Diese Variable wird durch das Modul @code{(guix build-system clojure)}
exportiert. Sie implementiert eine einfache Erstellungsprozedur für in
@uref{https://clojure.org/, Clojure} geschriebene Pakete mit dem guten alten
@code{compile} in Clojure. Cross-Kompilieren wird noch nicht unterstützt.

Das Erstellungssystem fügt @code{clojure}, @code{icedtea} und @code{zip} zu
den Eingaben hinzu. Sollen stattdessen andere Pakete benutzt werden, können
diese jeweils mit den Parametern @code{#:clojure}, @code{#:jdk} und
@code{#:zip} spezifiziert werden.

Eine Liste der Quellcode-Verzeichnisse, Test-Verzeichnisse und Namen der
Jar-Dateien können jeweils über die Parameter @code{#:source-dirs},
@code{#:test-dirs} und @code{#:jar-names} angegeben werden. Das Verzeichnis,
in das kompiliert wird, sowie die Hauptklasse können jeweils mit den
Parametern @code{#:compile-dir} und @code{#:main-class} angegeben
werden. Andere Parameter sind im Folgenden dokumentiert.

Dieses Erstellungssystem ist eine Erweiterung des @code{ant-build-system},
bei der aber die folgenden Phasen geändert wurden:

@table @code

@item build
Diese Phase ruft @code{compile} in Clojure auf, um Quelldateien zu
kompilieren, und führt @command{jar} aus, um Jar-Dateien aus sowohl
Quelldateien als auch kompilierten Dateien zu erzeugen, entsprechend der
jeweils in @code{#:aot-include} und @code{#:aot-exclude} festgelegten Listen
aus in der Menge der Quelldateien eingeschlossenen und ausgeschlossenen
Bibliotheken. Die Ausschlussliste hat Vorrang vor der Einschlussliste. Diese
Listen setzen sich aus Symbolen zusammen, die für Clojure-Bibliotheken
stehen oder dem Schlüsselwort @code{#:all} entsprechen, was für alle im
Quellverzeichis gefundenen Clojure-Bibliotheken steht. Der Parameter
@code{#:omit-source?} entscheidet, ob Quelldateien in die Jar-Archive
aufgenommen werden sollen.

@item check
In dieser Phase werden Tests auf die durch Einschluss- und Ausschlussliste
@code{#:test-include} bzw. @code{#:test-exclude} angegebenen Dateien
ausgeführt. Deren Bedeutung ist analog zu @code{#:aot-include} und
@code{#:aot-exclude}, außer dass das besondere Schlüsselwort @code{#:all}
jetzt für alle Clojure-Bibliotheken in den Test-Verzeichnissen steht. Der
Parameter @code{#:tests?} entscheidet, ob Tests ausgeführt werden sollen.

@item install
In dieser Phase werden alle zuvor erstellten Jar-Dateien installiert.
@end table

Zusätzlich zu den bereits angegebenen enthält dieses Erstellungssystem noch
eine weitere Phase.

@table @code

@item install-doc
Diese Phase installiert alle Dateien auf oberster Ebene, deren Basisnamen
ohne Verzeichnisangabe zu @code{%doc-regex} passen. Ein anderer regulärer
Ausdruck kann mit dem Parameter @code{#:doc-regex} verwendet werden. All die
so gefundenen oder (rekursiv) in den mit @code{#:doc-dirs} angegebenen
Dokumentationsverzeichnissen liegenden Dateien werden installiert.
@end table
@end defvr

@defvr {Scheme-Variable} cmake-build-system
Diese Variable wird von @code{(guix build-system cmake)} exportiert. Sie
implementiert die Erstellungsprozedur für Pakete, die das
@url{https://www.cmake.org, CMake-Erstellungswerkzeug} benutzen.

Das Erstellungssystem fügt automatisch das Paket @code{cmake} zu den
Eingaben hinzu. Welches Paket benutzt wird, kann mit dem Parameter
@code{#:cmake} geändert werden.

Der Parameter @code{#:configure-flags} wird als Liste von
Befehlszeilenoptionen aufgefasst, die an den Befehl @command{cmake}
übergeben werden. Der Parameter @code{#:build-type} abstrahiert, welche
Befehlszeilenoptionen dem Compiler übergeben werden; der Vorgabewert ist
@code{"RelWithDebInfo"} (kurz für „release mode with debugging
information“), d.h.@: kompiliert wird für eine Produktionsumgebung und
Informationen zur Fehlerbehebung liegen bei, was ungefähr @code{-O2 -g}
entspricht, wie bei der Vorgabe für Autoconf-basierte Pakete.
@end defvr

@defvr {Scheme-Variable} dune-build-system
Diese Variable wird vom Modul @code{(guix build-system dune)}
exportiert. Sie unterstützt es, Pakete mit @uref{https://dune.build/, Dune}
zu erstellen, einem Erstellungswerkzeug für die Programmiersprache OCaml,
und ist als Erweiterung des unten beschriebenen OCaml-Erstellungssystems
@code{ocaml-build-system} implementiert. Als solche können auch die
Parameter @code{#:ocaml} und @code{#:findlib} an dieses Erstellungssystem
übergeben werden.

Das Erstellungssystem fügt automatisch das Paket @code{dune} zu den Eingaben
hinzu. Welches Paket benutzt wird, kann mit dem Parameter @code{#:dune}
geändert werden.

Es gibt keine @code{configure}-Phase, weil dune-Pakete typischerweise nicht
konfiguriert werden müssen. Vom Parameter @code{#:build-flags} wird
erwartet, dass es sich um eine Liste von Befehlszeilenoptionen handelt, die
zur Erstellung an den @code{dune}-Befehl übergeben werden.

Der Parameter @code{#:jbuild?} kann übergeben werden, um den Befehl
@code{jbuild} anstelle des neueren @code{dune}-Befehls aufzurufen, um das
Paket zu erstellen. Der Vorgabewert ist @code{#f}.

Mit dem Parameter @code{#:package} kann ein Paketname angegeben werden, wenn
im Paket mehrere Pakete enthalten sind und nur eines davon erstellt werden
soll. Es ist äquivalent dazu, die Befehlszeilenoption @code{-p} an
@code{dune} zu übergeben.
@end defvr

@defvr {Scheme-Variable} go-build-system
Diese Variable wird vom Modul @code{(guix build-system go)} exportiert. Mit
ihr ist eine Erstellungsprozedur für Go-Pakete implementiert, die dem
normalen
@url{https://golang.org/cmd/go/#hdr-Compile_packages_and_dependencies,
Go-Erstellungsmechanismus} entspricht.

Beim Aufruf wird ein Wert für den Schlüssel @code{#:import-path} und
manchmal auch für @code{#:unpack-path} erwartet.  Der
@url{https://golang.org/doc/code.html#ImportPaths, „import path“} entspricht
dem Dateisystempfad, den die Erstellungsskripts des Pakets und darauf Bezug
nehmende Pakete erwarten; durch ihn wird ein Go-Paket eindeutig
bezeichnet. Typischerweise setzt er sich aus einer Kombination der
entfernten URI des Paketquellcodes und der Dateisystemhierarchie
zusammen. Manchmal ist es nötig, den Paketquellcode in ein anderes als das
vom „import path“ bezeichnete Verzeichnis zu entpacken; diese andere
Verzeichnisstruktur sollte dann als @code{#:unpack-path} angegeben werden.

Pakete, die Go-Bibliotheken zur Verfügung stellen, sollten ihren Quellcode
auch in die Erstellungsausgabe installieren. Der Schlüssel
@code{#:install-source?}, sein Vorgabewert ist @code{#t}, steuert, ob
Quellcode installiert wird. Bei Paketen, die nur ausführbare Dateien
liefern, kann der Wert auf @code{#f} gesetzt werden.
@end defvr

@defvr {Scheme-Variable} glib-or-gtk-build-system
Diese Variable wird vom Modul @code{(guix build-system glib-or-gtk)}
exportiert. Sie ist für Pakete gedacht, die GLib oder GTK benutzen.

Dieses Erstellungssystem fügt die folgenden zwei Phasen zu denen von
@code{gnu-build-system} hinzu:

@table @code
@item glib-or-gtk-wrap
The phase @code{glib-or-gtk-wrap} ensures that programs in @file{bin/} are
able to find GLib ``schemas'' and
@uref{https://developer.gnome.org/gtk3/stable/gtk-running.html, GTK+
modules}.  This is achieved by wrapping the programs in launch scripts that
appropriately set the @env{XDG_DATA_DIRS} and @env{GTK_PATH} environment
variables.

Es ist möglich, bestimmte Paketausgaben von diesem Wrapping-Prozess
auszunehmen, indem Sie eine Liste ihrer Namen im Parameter
@code{#:glib-or-gtk-wrap-excluded-outputs} angeben. Das ist nützlich, wenn
man von einer Ausgabe weiß, dass sie keine Binärdateien enthält, die GLib
oder GTK benutzen, und diese Ausgabe durch das Wrappen ohne Not eine weitere
Abhängigkeit von GLib und GTK bekäme.

@item glib-or-gtk-compile-schemas
Mit der Phase @code{glib-or-gtk-compile-schemas} wird sichergestellt, dass
alle @uref{https://developer.gnome.org/gio/stable/glib-compile-schemas.html,
GSettings-Schemata} für GLib kompiliert werden. Dazu wird das Programm
@command{glib-compile-schemas} ausgeführt. Es kommt aus dem Paket
@code{glib:bin}, was automatisch vom Erstellungssystem importiert
wird. Welches @code{glib}-Paket dieses @command{glib-compile-schemas}
bereitstellt, kann mit dem Parameter @code{#:glib} spezifiziert werden.
@end table

Beide Phasen finden nach der @code{install}-Phase statt.
@end defvr

@defvr {Scheme-Variable} guile-build-system
Dieses Erstellungssystem ist für Guile-Pakete gedacht, die nur aus
Scheme-Code bestehen und so schlicht sind, dass sie nicht einmal ein
Makefile und erst recht keinen @file{configure}-Skript enthalten. Hierzu
wird Scheme-Code mit @command{guild compile} kompiliert (siehe
@ref{Compilation,,, guile, GNU Guile Reference Manual}) und die @file{.scm}-
und @file{.go}-Dateien an den richtigen Pfad installiert. Auch Dokumentation
wird installiert.

This build system supports cross-compilation by using the @option{--target}
option of @samp{guild compile}.

Mit @code{guile-build-system} erstellte Pakete müssen ein Guile-Paket in
ihrem @code{native-inputs}-Feld aufführen.
@end defvr

@defvr {Scheme-Variable} julia-build-system
This variable is exported by @code{(guix build-system julia)}.  It
implements the build procedure used by @uref{https://julialang.org/, julia}
packages, which essentially is similar to running @samp{julia -e 'using Pkg;
Pkg.add(package)'} in an environment where @env{JULIA_LOAD_PATH} contains
the paths to all Julia package inputs.  Tests are run not run.

Für Julia-Pakete wird vorausgesetzt, dass der Dateiname im
@code{file-name}-Feld der Quelle der echte Name des Pakets ist, in der
richtigen Groß-/Kleinschreibung.

Für Pakete, die als Abhängigkeiten gemeinsame Bibliotheken („Shared
Libraries“) verlangen, müssen Sie die @file{/deps/deps.jl}-Datei unter
Umständen selbst schreiben. Normalerweise enthält sie eine Zeile wie
@code{const variable = /gnu/store/library.so} für jede Abhängigkeit sowie
eine Funktion @code{check_deps() = nothing} ohne Rückgabe.

Für manche ältere Pakete, die noch keine @file{Package.toml} benutzen, muss
auch diese Datei erstellt werden. Die Funktion
@code{julia-create-package-toml} hilft dabei. Sie müssen ihr nur die
Ausgaben und die Quelle des Pakets übergeben sowie seinen Namen (derselbe
wie beim Parameter @code{file-name}), die Paket-UUID, die Paketversion und
eine Liste von Abhängigkeiten, jeweils angegeben über ihren Namen und ihre
UUID.
@end defvr

@defvr {Scheme-Variable} minify-build-system
Diese Variable wird vom Modul @code{(guix build-system minify)}
exportiert. Sie implementiert eine Prozedur zur Minifikation einfacher
JavaScript-Pakete.

Es fügt @code{uglify-js} zur Menge der Eingaben hinzu und komprimiert damit
alle JavaScript-Dateien im @file{src}-Verzeichnis. Ein anderes Programm zur
Minifikation kann verwendet werden, indem es mit dem Parameter
@code{#:uglify-js} angegeben wird; es wird erwartet, dass das angegebene
Paket den minifizierten Code auf der Standardausgabe ausgibt.

Wenn die Eingabe-JavaScript-Dateien nicht alle im @file{src}-Verzeichnis
liegen, kann mit dem Parameter @code{#:javascript-files} eine Liste der
Dateinamen übergeben werden, auf die das Minifikationsprogramm aufgerufen
wird.
@end defvr

@defvr {Scheme-Variable} ocaml-build-system
Diese Variable wird vom Modul @code{(guix build-system ocaml)}
exportiert. Mit ihr ist ein Erstellungssystem für @uref{https://ocaml.org,
OCaml-Pakete} implementiert, was bedeutet, dass es die richtigen
auszuführenden Befehle für das jeweilige Paket auswählt. OCaml-Pakete können
sehr unterschiedliche Befehle erwarten. Dieses Erstellungssystem probiert
manche davon durch.

Wenn im Paket eine Datei @file{setup.ml} auf oberster Ebene vorhanden ist,
wird @code{ocaml setup.ml -configure}, @code{ocaml setup.ml -build} und
@code{ocaml setup.ml -install} ausgeführt. Das Erstellungssystem wird
annehmen, dass die Datei durch @uref{http://oasis.forge.ocamlcore.org/,
OASIS} erzeugt wurde, und wird das Präfix setzen und Tests aktivieren, wenn
diese nicht abgeschaltet wurden. Sie können Befehlszeilenoptionen zum
Konfigurieren und Erstellen mit den Parametern @code{#:configure-flags} und
@code{#:build-flags} übergeben. Der Schlüssel @code{#:test-flags} kann
übergeben werden, um die Befehlszeilenoptionen zu ändern, mit denen die
Tests aktiviert werden. Mit dem Parameter @code{#:use-make?} kann dieses
Erstellungssystem für die build- und install-Phasen abgeschaltet werden.

Verfügt das Paket über eine @file{configure}-Datei, wird angenommen, dass
diese von Hand geschrieben wurde mit einem anderen Format für Argumente als
bei einem Skript des @code{gnu-build-system}. Sie können weitere
Befehlszeilenoptionen mit dem Schlüssel @code{#:configure-flags} hinzufügen.

Falls dem Paket ein @file{Makefile} beiliegt (oder @code{#:use-make?} auf
@code{#t} gesetzt wurde), wird dieses benutzt und weitere
Befehlszeilenoptionen können mit dem Schlüssel @code{#:make-flags} zu den
build- und install-Phasen hinzugefügt werden.

Letztlich gibt es in manchen Pakete keine solchen Dateien, sie halten sich
aber an bestimmte Konventionen, wo ihr eigenes Erstellungssystem zu finden
ist. In diesem Fall führt Guix’ OCaml-Erstellungssystem @code{ocaml
pkg/pkg.ml} oder @code{ocaml pkg/build.ml} aus und kümmert sich darum, dass
der Pfad zu dem benötigten findlib-Modul passt. Weitere
Befehlszeilenoptionen können über den Schlüssel @code{#:build-flags}
übergeben werden. Um die Installation kümmert sich
@command{opam-installer}. In diesem Fall muss das @code{opam}-Paket im
@code{native-inputs}-Feld der Paketdefinition stehen.

Note that most OCaml packages assume they will be installed in the same
directory as OCaml, which is not what we want in guix.  In particular, they
will install @file{.so} files in their module's directory, which is usually
fine because it is in the OCaml compiler directory.  In guix though, these
libraries cannot be found and we use @env{CAML_LD_LIBRARY_PATH}.  This
variable points to @file{lib/ocaml/site-lib/stubslibs} and this is where
@file{.so} libraries should be installed.
@end defvr

@defvr {Scheme-Variable} python-build-system
Diese Variable wird vom Modul @code{(guix build-system python)}
exportiert. Sie implementiert mehr oder weniger die konventionelle
Erstellungsprozedur, wie sie für Python-Pakete üblich ist, d.h.@: erst wird
@code{python setup.py build} ausgeführt und dann @code{python setup.py
install --prefix=/gnu/store/…}.

For packages that install stand-alone Python programs under @code{bin/}, it
takes care of wrapping these programs so that their @env{PYTHONPATH}
environment variable points to all the Python libraries they depend on.

Welches Python-Paket benutzt wird, um die Erstellung durchzuführen, kann mit
dem Parameter @code{#:python} bestimmt werden. Das ist nützlich, wenn wir
erzwingen wollen, dass ein Paket mit einer bestimmten Version des
Python-Interpretierers arbeitet. Das kann nötig sein, wenn das Programm nur
mit einer einzigen Interpretiererversion kompatibel ist.

Standardmäßig ruft Guix @code{setup.py} auf, was zu @code{setuptools}
gehört, ähnlich wie es auch @command{pip} tut. Manche Pakete sind mit
setuptools (und pip) inkompatibel, deswegen können Sie diese Einstellung
abschalten, indem Sie den Parameter @code{#:use-setuptools?} auf @code{#f}
setzen.
@end defvr

@defvr {Scheme-Variable} perl-build-system
Diese Variable wird vom Modul @code{(guix build-system perl)}
exportiert. Mit ihr wird die Standard-Erstellungsprozedur für Perl-Pakete
implementiert, welche entweder darin besteht, @code{perl Build.PL
--prefix=/gnu/store/…} gefolgt von @code{Build} und @code{Build install}
auszuführen, oder @code{perl Makefile.PL PREFIX=/gnu/store/…} gefolgt von
@code{make} und @code{make install} auszuführen, je nachdem, ob eine Datei
@code{Build.PL} oder eine Datei @code{Makefile.PL} in der Paketdistribution
vorliegt. Den Vorrang hat erstere, wenn sowohl @code{Build.PL} als auch
@code{Makefile.PL} in der Paketdistribution existieren. Der Vorrang kann
umgekehrt werden, indem @code{#t} für den Parameter @code{#:make-maker?}
angegeben wird.

Der erste Aufruf von @code{perl Makefile.PL} oder @code{perl Build.PL}
übergibt die im Parameter @code{#:make-maker-flags}
bzw. @code{#:module-build-flags} angegebenen Befehlszeilenoptionen, je
nachdem, was verwendet wird.

Welches Perl-Paket dafür benutzt wird, kann mit @code{#:perl} angegeben
werden.
@end defvr

@defvr {Scheme-Variable} qt-build-system
Diese Variable wird vom Modul @code{(guix build-system qt)} exportiert. Sie
ist für Anwendungen gedacht, die Qt oder KDE benutzen.

Dieses Erstellungssystem fügt die folgenden zwei Phasen zu denen von
@code{cmake-build-system} hinzu:

@table @code
@item check-setup
Die Phase @code{check-setup} bereitet die Umgebung für Überprüfungen vor,
wie sie von Qt-Test-Programmen üblicherweise benutzt werden. Zur Zeit werden
nur manche Umgebungsvariable gesetzt: @code{QT_QPA_PLATFORM=offscreen},
@code{DBUS_FATAL_WARNINGS=0} und @code{CTEST_OUTPUT_ON_FAILURE=1}.

Diese Phase wird vor der @code{check}-Phase hinzugefügt. Es handelt sich um
eine eigene Phase, die nach Bedarf angepasst werden kann.

@item qt-wrap
In der Phase @code{qt-wrap} wird nach Qt5-Plugin-Pfaden, QML-Pfaden und
manchen XDG-Daten in den Ein- und Ausgaben gesucht. Wenn solch ein Pfad
gefunden wird, werden für alle Programme in den Verzeichnissen @file{bin/},
@file{sbin/}, @file{libexec/} und @file{lib/libexec/} in der Ausgabe
Wrapper-Skripte erzeugt, die die nötigen Umgebungsvariablen definieren.

Es ist möglich, bestimmte Paketausgaben von diesem Wrapping-Prozess
auszunehmen, indem Sie eine Liste ihrer Namen im Parameter
@code{#:qt-wrap-excluded-outputs} angeben. Das ist nützlich, wenn man von
einer Ausgabe weiß, dass sie keine Qt-Binärdateien enthält, und diese
Ausgabe durch das Wrappen ohne Not eine weitere Abhängigkeit von Qt, KDE
oder Ähnlichem bekäme.

Diese Phase wird nach der @code{install}-Phase hinzugefügt.
@end table
@end defvr

@defvr {Scheme-Variable} r-build-system
This variable is exported by @code{(guix build-system r)}.  It implements
the build procedure used by @uref{https://r-project.org, R} packages, which
essentially is little more than running @samp{R CMD INSTALL
--library=/gnu/store/@dots{}} in an environment where @env{R_LIBS_SITE}
contains the paths to all R package inputs.  Tests are run after
installation using the R function @code{tools::testInstalledPackage}.
@end defvr

@defvr {Scheme-Variable} rakudo-build-system
Diese Variable wird vom Modul @code{(guix build-system rakudo)}
exportiert. Sie implementiert die Erstellungsprozedur, die von
@uref{https://rakudo.org/, Rakudo} für @uref{https://perl6.org/,
Perl6-Pakete} benutzt wird. Pakete werden ins Verzeichnis
@code{/gnu/store/…/NAME-VERSION/share/perl6} abgelegt und Binärdateien,
Bibliotheksdateien und Ressourcen werden installiert, zudem werden die
Dateien im Verzeichnis @code{bin/} in Wrapper-Skripte verpackt. Tests können
übersprungen werden, indem man @code{#f} im Parameter @code{tests?}
übergibt.

Welches rakudo-Paket benutzt werden soll, kann mit dem Parameter
@code{rakudo} angegeben werden. Das perl6-tap-harness-Paket, das für die
Tests benutzt wird, kann mit @code{#:prove6} ausgewählt werden; es kann auch
entfernt werden, indem man @code{#f} für den Parameter @code{with-prove6?}
übergibt. Welches perl6-zef-Paket für Tests und Installation verwendet wird,
kann mit dem Parameter @code{#:zef} angegeben werden; es kann auch entfernt
werden, indem man @code{#f} für den Parameter @code{with-zef?} übergibt.
@end defvr

@defvr {Scheme-Variable} texlive-build-system
This variable is exported by @code{(guix build-system texlive)}.  It is used
to build TeX packages in batch mode with a specified engine.  The build
system sets the @env{TEXINPUTS} variable to find all TeX source files in the
inputs.

Standardmäßig wird @code{luatex} auf allen Dateien mit der Dateiendung
@code{ins} ausgeführt. Eine andere Engine oder ein anderes Format kann mit
dem Argument @code{#:tex-format} angegeben werden. Verschiedene
Erstellungsziele können mit dem Argument @code{#:build-targets} festgelegt
werden, das eine Liste von Dateinamen erwartet. Das Erstellungssystem fügt
nur @code{texlive-bin} und @code{texlive-latex-base} zu den Eingaben hinzu
(beide kommen aus dem Modul @code{(gnu packages tex}). Für beide kann das zu
benutzende Paket jeweils mit den Argumenten @code{#:texlive-bin} oder
@code{#:texlive-latex-base} geändert werden.

Der Parameter @code{#:tex-directory} sagt dem Erstellungssystem, wohin die
installierten Dateien im texmf-Verzeichnisbaum installiert werden sollen.
@end defvr

@defvr {Scheme-Variable} ruby-build-system
Diese Variable wird vom Modul @code{(guix build-system ruby)}
exportiert. Sie steht für eine Implementierung der
RubyGems-Erstellungsprozedur, die für Ruby-Pakete benutzt wird, wobei
@code{gem build} gefolgt von @code{gem install} ausgeführt wird.

Das @code{source}-Feld eines Pakets, das dieses Erstellungssystem benutzt,
verweist typischerweise auf ein Gem-Archiv, weil Ruby-Entwickler dieses
Format benutzen, wenn sie ihre Software veröffentlichen. Das
Erstellungssystem entpackt das Gem-Archiv, spielt eventuell Patches für den
Quellcode ein, führt die Tests aus, verpackt alles wieder in ein Gem-Archiv
und installiert dieses. Neben Gem-Archiven darf das Feld auch auf
Verzeichnisse und Tarballs verweisen, damit es auch möglich ist,
unveröffentlichte Gems aus einem Git-Repository oder traditionelle
Quellcode-Veröffentlichungen zu benutzen.

Welches Ruby-Paket benutzt werden soll, kann mit dem Parameter @code{#:ruby}
festgelegt werden. Eine Liste zusätzlicher Befehlszeilenoptionen für den
Aufruf des @command{gem}-Befehls kann mit dem Parameter @code{#:gem-flags}
angegeben werden.
@end defvr

@defvr {Scheme-Variable} waf-build-system
Diese Variable wird durch das Modul @code{(guix build-system waf)}
exportiert. Damit ist eine Erstellungsprozedur rund um das @code{waf}-Skript
implementiert. Die üblichen Phasen — @code{configure}, @code{build} und
@code{install} — sind implementiert, indem deren Namen als Argumente an das
@code{waf}-Skript übergeben werden.

Das @code{waf}-Skript wird vom Python-Interpetierer ausgeführt. Mit welchem
Python-Paket das Skript ausgeführt werden soll, kann mit dem Parameter
@code{#:python} angegeben werden.
@end defvr

@defvr {Scheme-Variable} scons-build-system
Diese Variable wird vom Modul @code{(guix build-system scons)}
exportiert. Sie steht für eine Implementierung der Erstellungsprozedur, die
das SCons-Softwarekonstruktionswerkzeug („software construction tool“)
benutzt. Das Erstellungssystem führt @code{scons} aus, um das Paket zu
erstellen, führt mit @code{scons test} Tests aus und benutzt @code{scons
install}, um das Paket zu installieren.

Zusätzliche Optionen, die an @code{scons} übergeben werden sollen, können
mit dem Parameter @code{#:scons-flags} angegeben werden. Die
voreingestellten Erstellungs- und Installationsziele können jeweils durch
@code{#:build-targets} und @code{#:install-targets} ersetzt werden. Die
Python-Version, die benutzt werden soll, um SCons auszuführen, kann
festgelegt werden, indem das passende SCons-Paket mit dem Parameter
@code{#:scons} ausgewählt wird.
@end defvr

@defvr {Scheme-Variable} haskell-build-system
Diese Variable wird vom Modul @code{(guix build-system haskell)}
exportiert. Sie bietet Zugang zur Cabal-Erstellungsprozedur, die von
Haskell-Paketen benutzt wird, was bedeutet, @code{runhaskell Setup.hs
configure --prefix=/gnu/store/…} und @code{runhaskell Setup.hs build}
auszuführen. Statt das Paket mit dem Befehl @code{runhaskell Setup.hs
install} zu installieren, benutzt das Erstellungssystem @code{runhaskell
Setup.hs copy} gefolgt von @code{runhaskell Setup.hs register}, um keine
Bibliotheken im Store-Verzeichnis des Compilers zu speichern, auf dem keine
Schreibberechtigung besteht. Zusätzlich generiert das Erstellungssystem
Dokumentation durch Ausführen von @code{runhaskell Setup.hs haddock}, außer
@code{#:haddock? #f} wurde übergeben. Optional können an Haddock Parameter
mit Hilfe des Parameters @code{#:haddock-flags} übergeben werden. Wird die
Datei @code{Setup.hs} nicht gefunden, sucht das Erstellungssystem
stattdessen nach @code{Setup.lhs}.

Welcher Haskell-Compiler benutzt werden soll, kann über den
@code{#:haskell}-Parameter angegeben werden. Als Vorgabewert verwendet er
@code{ghc}.
@end defvr

@defvr {Scheme-Variable} dub-build-system
Diese Variable wird vom Modul @code{(guix build-system dub)} exportiert. Sie
verweist auf eine Implementierung des Dub-Erstellungssystems, das von
D-Paketen benutzt wird. Dabei werden @code{dub build} und @code{dub run}
ausgeführt. Die Installation wird durch manuelles Kopieren der Dateien
durchgeführt.

Welcher D-Compiler benutzt wird, kann mit dem Parameter @code{#:ldc}
festgelegt werden, was als Vorgabewert @code{ldc} benutzt.
@end defvr

@defvr {Scheme-Variable} emacs-build-system
Diese Variable wird vom Modul @code{(guix build-system emacs)}
exportiert. Darin wird eine Installationsprozedur ähnlich der des
Paketsystems von Emacs selbst implementiert (siehe @ref{Packages,,, emacs,
The GNU Emacs Manual}).

Zunächst wird eine Datei @code{@code{Paket}-autoloads.el} erzeugt, dann
werden alle Emacs-Lisp-Dateien zu Bytecode kompiliert. Anders als beim
Emacs-Paketsystem werden die Info-Dokumentationsdateien in das
Standardverzeichnis für Dokumentation verschoben und die Datei @file{dir}
gelöscht. Die Dateien des Elisp-Pakets werden direkt in
@file{share/emacs/site-lisp} installiert.
@end defvr

@defvr {Scheme-Variable} font-build-system
Diese Variable wird vom Modul @code{(guix build-system font)}
exportiert. Mit ihr steht eine Installationsprozedur für Schriftarten-Pakete
zur Verfügung für vom Anbieter vorkompilierte TrueType-, OpenType- und
andere Schriftartendateien, die nur an die richtige Stelle kopiert werden
müssen. Dieses Erstellungssystem kopiert die Schriftartendateien an den
Konventionen folgende Orte im Ausgabeverzeichnis.
@end defvr

@defvr {Scheme-Variable} meson-build-system
Diese Variable wird vom Modul @code{(guix build-system meson)}
exportiert. Sie enthält die Erstellungsprozedur für Pakete, die
@url{https://mesonbuild.com, Meson} als ihr Erstellungssystem benutzen.

Mit ihr werden sowohl Meson als auch @uref{https://ninja-build.org/, Ninja}
zur Menge der Eingaben hinzugefügt; die Pakete dafür können mit den
Parametern @code{#:meson} und @code{#:ninja} geändert werden, wenn
nötig. Das vorgegebene Meson-Paket ist @code{meson-for-build}, ein
besonderes Paket, dessen Besonderheit darin besteht, den @code{RUNPATH} von
Binärdateien und Bibliotheken @emph{nicht} zu entfernen, wenn sie
installiert werden.

Dieses Erstellungssystem ist eine Erweiterung für das
@code{gnu-build-system}, aber mit Änderungen an den folgenden Phasen, die
Meson-spezifisch sind:

@table @code

@item configure
The phase runs @code{meson} with the flags specified in
@code{#:configure-flags}.  The flag @option{--buildtype} is always set to
@code{debugoptimized} unless something else is specified in
@code{#:build-type}.

@item build
Diese Phase ruft @code{ninja} auf, um das Paket standardmäßig parallel zu
erstellen. Die Vorgabeeinstellung, dass parallel erstellt wird, kann
verändert werden durch Setzen von @code{#:parallel-build?}.

@item check
Diese Phase führt @code{ninja} mit dem als @code{#:test-target}
spezifizierten Ziel für Tests auf, der Vorgabewert ist das Ziel namens
@code{"test"}.

@item install
Diese Phase führt @code{ninja install} aus und kann nicht verändert werden.
@end table

Dazu fügt das Erstellungssystem noch folgende neue Phasen:

@table @code

@item fix-runpath
In dieser Phase wird sichergestellt, dass alle Binärdateien die von ihnen
benötigten Bibliotheken finden können. Die benötigten Bibliotheken werden in
den Unterverzeichnissen des Pakets, das erstellt wird, gesucht, und zum
@code{RUNPATH} hinzugefügt, wann immer es nötig ist. Auch werden diejenigen
Referenzen zu Bibliotheken aus der Erstellungsphase wieder entfernt, die bei
@code{meson-for-build} hinzugefügt wurden, aber eigentlich zur Laufzeit
nicht gebraucht werden, wie Abhängigkeiten nur für Tests.

@item glib-or-gtk-wrap
Diese Phase ist dieselbe, die auch im @code{glib-or-gtk-build-system} zur
Verfügung gestellt wird, und mit Vorgabeeinstellungen wird sie nicht
durchlaufen. Wenn sie gebraucht wird, kann sie mit dem Parameter
@code{#:glib-or-gtk?} aktiviert werden.

@item glib-or-gtk-compile-schemas
Diese Phase ist dieselbe, die auch im @code{glib-or-gtk-build-system} zur
Verfügung gestellt wird, und mit Vorgabeeinstellungen wird sie nicht
durchlaufen. Wenn sie gebraucht wird, kann sie mit dem Parameter
@code{#:glib-or-gtk?} aktiviert werden.
@end table
@end defvr

@defvr {Scheme-Variable} linux-module-build-system
Mit @code{linux-module-build-system} können Linux-Kernelmodule erstellt
werden.

@cindex Erstellungsphasen
Dieses Erstellungssystem ist eine Erweiterung des @code{gnu-build-system},
bei der aber die folgenden Phasen geändert wurden:

@table @code

@item configure
Diese Phase konfiguriert die Umgebung so, dass das externe Kernel-Modul
durch das Makefile des Linux-Kernels erstellt werden kann.

@item build
Diese Phase benutzt das Makefile des Linux-Kernels, um das externe
Kernel-Modul zu erstellen.

@item install
Diese Phase benutzt das Makefile des Linux-Kernels zur Installation des
externen Kernel-Moduls.
@end table

It is possible and useful to specify the Linux kernel to use for building
the module (in the @code{arguments} form of a package using the
@code{linux-module-build-system}, use the key @code{#:linux} to specify it).
@end defvr

@defvr {Scheme-Variable} node-build-system
Diese Variable wird vom Modul @code{(guix build-system node)}
exportiert. Sie stellt eine Implementierung der Erstellungsprozedur von
@uref{https://nodejs.org, Node.js} dar, die annäherungsweise der Funktion
des Befehls @code{npm install} gefolgt vom Befehl @code{npm test}
entspricht.

Welches Node.js-Paket zur Interpretation der @code{npm}-Befehle benutzt
wird, kann mit dem Parameter @code{#:node} angegeben werden. Dessen
Vorgabewert ist @code{node}.
@end defvr

Letztlich gibt es für die Pakete, die bei weitem nichts so komplexes
brauchen, ein „triviales“ Erstellungssystem. Es ist in dem Sinn trivial,
dass es praktisch keine Hilfestellungen gibt: Es fügt keine impliziten
Eingaben hinzu und hat kein Konzept von Erstellungsphasen.

@defvr {Scheme-Variable} trivial-build-system
Diese Variable wird vom Modul @code{(guix build-system trivial)} exportiert.

Diesem Erstellungssystem muss im Argument @code{#:builder} ein
Scheme-Ausdruck übergeben werden, der die Paketausgabe(n) erstellt — wie bei
@code{build-expression->derivation} (siehe @ref{Ableitungen,
@code{build-expression->derivation}}).
@end defvr

@node Der Store
@section Der Store

@cindex Store
@cindex Store-Objekte
@cindex Store-Pfade

Konzeptionell ist der @dfn{Store} der Ort, wo Ableitungen nach erfolgreicher
Erstellung gespeichert werden — standardmäßig finden Sie ihn in
@file{/gnu/store}. Unterverzeichnisse im Store werden @dfn{Store-Objekte}
oder manchmal auch @dfn{Store-Pfade} genannt. Mit dem Store ist eine
Datenbank assoziiert, die Informationen enthält wie zum Beispiel, welche
Store-Pfade jeder Store-Pfad jeweils referenziert, und eine Liste, welche
Store-Objekte @emph{gültig} sind, also Ergebnisse erfolgreicher Erstellungen
sind. Die Datenbank befindet sich in @file{@var{localstatedir}/guix/db},
wobei @var{localstatedir} das mit @option{--localstatedir} bei der
Ausführung von „configure“ angegebene Zustandsverzeichnis ist, normalerweise
@file{/var}.

Auf den Store wird @emph{nur} durch den Daemon im Auftrag seiner Clients
zugegriffen (siehe @ref{Aufruf des guix-daemon}). Um den Store zu verändern,
verbinden sich Clients über einen Unix-Socket mit dem Daemon, senden ihm
entsprechende Anfragen und lesen dann dessen Antwort — so etwas nennt sich
entfernter Prozeduraufruf (englisch „Remote Procedure Call“ oder kurz RPC).

@quotation Anmerkung
Benutzer dürfen @emph{niemals} Dateien in @file{/gnu/store} direkt
verändern, sonst wären diese nicht mehr konsistent und die Grundannahmen im
funktionalen Modell von Guix, dass die Objekte unveränderlich sind, wären
dahin (siehe @ref{Einführung}).

Siehe @ref{Aufruf von guix gc, @command{guix gc --verify}} für Informationen,
wie die Integrität des Stores überprüft und nach versehentlichen
Veränderungen unter Umständen wiederhergestellt werden kann.
@end quotation

The @code{(guix store)} module provides procedures to connect to the daemon,
and to perform RPCs.  These are described below.  By default,
@code{open-connection}, and thus all the @command{guix} commands, connect to
the local daemon or to the URI specified by the @env{GUIX_DAEMON_SOCKET}
environment variable.

@defvr {Umgebungsvariable} GUIX_DAEMON_SOCKET
Ist diese Variable gesetzt, dann sollte ihr Wert ein Dateipfad oder eine URI
sein, worüber man sich mit dem Daemon verbinden kann. Ist der Wert der Pfad
zu einer Datei, bezeichnet dieser einen Unix-Socket, mit dem eine Verbindung
hergestellt werden soll. Ist er eine URI, so werden folgende URI-Schemata
unterstützt:

@table @code
@item file
@itemx unix
Für Unix-Sockets. @code{file:///var/guix/daemon-socket/socket} kann
gleichbedeutend auch als @file{/var/guix/daemon-socket/socket} angegeben
werden.

@item guix
@cindex Daemon, Fernzugriff
@cindex Fernzugriff auf den Daemon
@cindex Daemon, Einrichten auf Clustern
@cindex Cluster, Einrichtung des Daemons
Solche URIs benennen Verbindungen über TCP/IP ohne Verschlüsselung oder
Authentifizierung des entfernten Rechners. Die URI muss den Hostnamen, also
den Rechnernamen des entfernten Rechners, und optional eine Port-Nummer
angeben (sonst wird als Vorgabe der Port 44146 benutzt):

@example
guix://master.guix.example.org:1234
@end example

Diese Konfiguration ist für lokale Netzwerke wie etwa in Rechen-Clustern
geeignet, wo sich nur vertrauenswürdige Knoten mit dem Erstellungs-Daemon
z.B.@: unter @code{master.guix.example.org} verbinden können.

The @option{--listen} option of @command{guix-daemon} can be used to
instruct it to listen for TCP connections (@pxref{Aufruf des guix-daemon,
@option{--listen}}).

@item ssh
@cindex SSH-Zugriff auf Erstellungs-Daemons
These URIs allow you to connect to a remote daemon over SSH.  This feature
requires Guile-SSH (@pxref{Voraussetzungen}) and a working @command{guile}
binary in @env{PATH} on the destination machine.  It supports public key and
GSSAPI authentication.  A typical URL might look like this:

@example
ssh://charlie@@guix.example.org:22
@end example

Was @command{guix copy} betrifft, richtet es sich nach den üblichen
OpenSSH-Client-Konfigurationsdateien (siehe @ref{Aufruf von guix copy}).
@end table

In Zukunft könnten weitere URI-Schemata unterstützt werden.

@c XXX: Remove this note when the protocol incurs fewer round trips
@c and when (guix derivations) no longer relies on file system access.
@quotation Anmerkung
Die Fähigkeit, sich mit entfernten Erstellungs-Daemons zu verbinden, sehen
wir als experimentell an, Stand @value{VERSION}. Bitte diskutieren Sie mit
uns jegliche Probleme oder Vorschläge, die Sie haben könnten (siehe
@ref{Mitwirken}).
@end quotation
@end defvr

@deffn {Scheme-Prozedur} open-connection [@var{Uri}] [#:reserve-space? #t]
Sich mit dem Daemon über den Unix-Socket an @var{Uri} verbinden (einer
Zeichenkette). Wenn @var{reserve-space?} wahr ist, lässt ihn das etwas
zusätzlichen Speicher im Dateisystem reservieren, damit der Müllsammler auch
dann noch funktioniert, wenn die Platte zu voll wird. Liefert ein
Server-Objekt.

@var{Uri} nimmt standardmäßig den Wert von @code{%default-socket-path} an,
was dem bei der Installation mit dem Aufruf von @command{configure}
ausgewählten Vorgabeort entspricht, gemäß den Befehlszeilenoptionen, mit
denen @command{configure} aufgerufen wurde.
@end deffn

@deffn {Scheme-Prozedur} close-connection @var{Server}
Die Verbindung zum @var{Server} trennen.
@end deffn

@defvr {Scheme-Variable} current-build-output-port
Diese Variable ist an einen SRFI-39-Parameter gebunden, der auf den
Scheme-Port verweist, an den vom Daemon empfangene Erstellungsprotokolle und
Fehlerprotokolle geschrieben werden sollen.
@end defvr

Prozeduren, die entfernte Prozeduraufrufe durchführen, nehmen immer ein
Server-Objekt als ihr erstes Argument.

@deffn {Scheme-Prozedur} valid-path? @var{Server} @var{Pfad}
@cindex ungültige Store-Objekte
Return @code{#t} when @var{path} designates a valid store item and @code{#f}
otherwise (an invalid item may exist on disk but still be invalid, for
instance because it is the result of an aborted or failed build).

Ein @code{&store-protocol-error}-Fehlerzustand wird ausgelöst, wenn der
@var{Pfad} nicht mit dem Store-Verzeichnis als Präfix beginnt
(@file{/gnu/store}).
@end deffn

@deffn {Scheme-Prozedur} add-text-to-store @var{Server} @var{Name} @var{Text} [@var{Referenzen}]
Den @var{Text} im Store in einer Datei namens @var{Name} ablegen und ihren
Store-Pfad zurückliefern. @var{Referenzen} ist die Liste der Store-Pfade,
die der Store-Pfad dann referenzieren soll.
@end deffn

@deffn {Scheme-Prozedur} build-derivations @var{Store} @var{Ableitungen} @
  [@var{Modus}] Die @var{Ableitungen} erstellen (eine Liste von
@code{<derivation>}-Objekten, @file{.drv}-Dateinamen oder Paaren aus je
Ableitung und Ausgabe. Dabei gilt der angegebene @var{Modus} — vorgegeben
ist @code{(build-mode normal)}.
@end deffn

Es sei erwähnt, dass im Modul @code{(guix monads)} eine Monade sowie
monadische Versionen obiger Prozeduren angeboten werden, damit an Code, der
auf den Store zugreift, bequemer gearbeitet werden kann (siehe @ref{Die Store-Monade}).

@c FIXME
@i{Dieser Abschnitt ist im Moment noch unvollständig.}

@node Ableitungen
@section Ableitungen

@cindex Ableitungen
Systemnahe Erstellungsaktionen sowie die Umgebung, in der selbige
durchzuführen sind, werden durch @dfn{Ableitungen} dargestellt. Eine
Ableitung enthält folgende Informationen:

@itemize
@item
Die Ausgaben, die die Ableitung hat. Ableitungen erzeugen mindestens eine
Datei bzw. ein Verzeichnis im Store, können aber auch mehrere erzeugen.

@item
@cindex Erstellungszeitabhängigkeiten
@cindex Abhängigkeiten zur Erstellungszeit
The inputs of the derivations---i.e., its build-time dependencies---which
may be other derivations or plain files in the store (patches, build
scripts, etc.).

@item
Das System, wofür mit der Ableitung erstellt wird, also ihr Ziel — z.B.@:
@code{x86_64-linux}.

@item
Der Dateiname eines Erstellungsskripts im Store, zusammen mit den
Argumenten, mit denen es aufgerufen werden soll.

@item
Eine Liste zu definierender Umgebungsvariabler.

@end itemize

@cindex Ableitungspfad
Derivations allow clients of the daemon to communicate build actions to the
store.  They exist in two forms: as an in-memory representation, both on the
client- and daemon-side, and as files in the store whose name end in
@file{.drv}---these files are referred to as @dfn{derivation paths}.
Derivations paths can be passed to the @code{build-derivations} procedure to
perform the build actions they prescribe (@pxref{Der Store}).

@cindex Ableitungen mit fester Ausgabe
Operationen wie das Herunterladen von Dateien und Checkouts von unter
Versionskontrolle stehenden Quelldateien, bei denen der Hash des Inhalts im
Voraus bekannt ist, werden als @dfn{Ableitungen mit fester Ausgabe}
modelliert. Anders als reguläre Ableitungen sind die Ausgaben von
Ableitungen mit fester Ausgabe unabhängig von ihren Eingaben — z.B.@:
liefert das Herunterladen desselben Quellcodes dasselbe Ergebnis unabhängig
davon, mit welcher Methode und welchen Werkzeugen er heruntergeladen wurde.

@cindex references
@cindex Laufzeitabhängigkeiten
@cindex Abhängigkeiten, zur Laufzeit
Den Ausgaben von Ableitungen — d.h.@: Erstellungergebnissen — ist eine Liste
von @dfn{Referenzen} zugeordnet, die auch der entfernte Prozeduraufruf
@code{references} oder der Befehl @command{guix gc --references} liefert
(siehe @ref{Aufruf von guix gc}). Referenzen sind die Menge der
Laufzeitabhängigkeiten von Erstellungsergebnissen. Referenzen sind eine
Teilmenge der Eingaben von Ableitungen; die Teilmenge wird automatisch
ermittelt, indem der Erstellungsdaemon alle Dateien unter den Ausgaben nach
Referenzen durchsucht.

Das Modul @code{(guix derivations)} stellt eine Repräsentation von
Ableitungen als Scheme-Objekte zur Verfügung, zusammen mit Prozeduren, um
Ableitungen zu erzeugen und zu manipulieren. Die am wenigsten abstrahierte
Methode, eine Ableitung zu erzeugen, ist mit der Prozedur @code{derivation}:

@deffn {Scheme-Prozedur} derivation @var{Store} @var{Name} @var{Ersteller} @
  @var{Argumente} [#:outputs '("out")] [#:hash #f] [#:hash-algo #f] @
[#:recursive? #f] [#:inputs '()] [#:env-vars '()] @ [#:system
(%current-system)] [#:references-graphs #f] @ [#:allowed-references #f]
[#:disallowed-references #f] @ [#:leaked-env-vars #f] [#:local-build? #f] @
[#:substitutable? #t] [#:properties '()] Eine Ableitungen mit den
@var{Argumente}n erstellen und das resultierende @code{<derivation>}-Objekt
liefern.

Wurden @var{hash} und @var{hash-algo} angegeben, wird eine @dfn{Ableitung
mit fester Ausgabe} erzeugt — d.h.@: eine, deren Ausgabe schon im Voraus
bekannt ist, wie z.B.@: beim Herunterladen einer Datei. Wenn des Weiteren
auch @var{recursive?} wahr ist, darf die Ableitung mit fester Ausgabe eine
ausführbare Datei oder ein Verzeichnis sein und @var{hash} muss die
Prüfsumme eines Archivs mit dieser Ausgabe sein.

Ist @var{references-graphs} wahr, dann muss es eine Liste von Paaren aus je
einem Dateinamen und einem Store-Pfad sein. In diesem Fall wird der
Referenzengraph jedes Store-Pfads in einer Datei mit dem angegebenen Namen
in der Erstellungsumgebung zugänglich gemacht, in einem einfachen
Text-Format.

Ist @var{allowed-references} ein wahr, muss es eine Liste von Store-Objekten
oder Ausgaben sein, die die Ausgabe der Ableitung referenzieren darf. Ebenso
muss @var{disallowed-references}, wenn es auf wahr gesetzt ist, eine Liste
von Dingen bezeichnen, die die Ausgaben @emph{nicht} referenzieren dürfen.

Ist @var{leaked-env-vars} wahr, muss es eine Liste von Zeichenketten sein,
die Umgebungsvariable benennen, die aus der Umgebung des Daemons in die
Erstellungsumgebung überlaufen — ein „Leck“, englisch „leak“. Dies kann nur
in Ableitungen mit fester Ausgabe benutzt werden, also wenn @var{hash} wahr
ist. So ein Leck kann zum Beispiel benutzt werden, um Variable wie
@code{http_proxy} an Ableitungen zu übergeben, die darüber Dateien
herunterladen.

Ist @var{local-build?} wahr, wird die Ableitung als schlechter Kandidat für
das Auslagern deklariert, der besser lokal erstellt werden sollte (siehe
@ref{Auslagern des Daemons einrichten}). Dies betrifft kleine Ableitungen, wo das
Übertragen der Daten aufwendiger als ihre Erstellung ist.

Ist @var{substitutable?} falsch, wird deklariert, dass für die Ausgabe der
Ableitung keine Substitute benutzt werden sollen (siehe
@ref{Substitute}). Das ist nützlich, wenn Pakete erstellt werden, die
Details über den Prozessorbefehlssatz des Wirtssystems auslesen.

@var{properties} muss eine assoziative Liste enthalten, die „Eigenschaften“
der Ableitungen beschreibt. Sie wird genau so, wie sie ist, in der Ableitung
gespeichert.
@end deffn

@noindent
Hier ist ein Beispiel mit einem Shell-Skript, das als Ersteller benutzt
wird. Es wird angenommen, dass @var{Store} eine offene Verbindung zum Daemon
ist und @var{bash} auf eine ausführbare Bash im Store verweist:

@lisp
(use-modules (guix utils)
             (guix store)
             (guix derivations))

(let ((builder   ; das Ersteller-Bash-Skript in den Store einfügen
        (add-text-to-store store "my-builder.sh"
                           "echo Hallo Welt > $out\n" '())))
  (derivation store "foo"
              bash `("-e" ,builder)
              #:inputs `((,bash) (,builder))
              #:env-vars '(("HOME" . "/homeless"))))
@result{} #<derivation /gnu/store/…-foo.drv => /gnu/store/…-foo>
@end lisp

Wie man sehen kann, ist es umständlich, diese grundlegende Methode direkt zu
benutzen. Natürlich ist es besser, Erstellungsskripts in Scheme zu
schreiben! Am besten schreibt man den Erstellungscode als „G-Ausdruck“ und
übergibt ihn an @code{gexp->derivation}. Mehr Informationen finden Sie im
Abschnitt @ref{G-Ausdrücke}.

Doch es gab einmal eine Zeit, zu der @code{gexp->derivation} noch nicht
existiert hatte und wo das Zusammenstellen von Ableitungen mit
Scheme-Erstellungscode noch mit @code{build-expression->derivation}
bewerkstelligt wurde, was im Folgenden beschrieben wird. Diese Prozedur gilt
als veraltet und man sollte nunmehr die viel schönere Prozedur
@code{gexp->derivation} benutzen.

@deffn {Scheme-Prozedur} build-expression->derivation @var{Store} @
       @var{Name} @var{Ausdruck} @ [#:system (%current-system)] [#:inputs '()] @
[#:outputs '("out")] [#:hash #f] [#:hash-algo #f] @ [#:recursive? #f]
[#:env-vars '()] [#:modules '()] @ [#:references-graphs #f]
[#:allowed-references #f] @ [#:disallowed-references #f] @ [#:local-build?
#f] [#:substitutable? #t] [#:guile-for-build #f] Liefert eine Ableitung, die
den Scheme-Ausdruck @var{Ausdruck} als Ersteller einer Ableitung namens
@var{Name} ausführt. @var{inputs} muss die Liste der Eingaben enthalten,
jeweils als Tupel @code{(Name Ableitungspfad Unterableitung)}; wird keine
@var{Unterableitung} angegeben, wird @code{"out"} angenommen. @var{Module}
ist eine Liste der Namen von Guile-Modulen im momentanen Suchpfad, die in
den Store kopiert, kompiliert und zur Verfügung gestellt werden, wenn der
@var{Ausdruck} ausgeführt wird — z.B.@: @code{((guix build utils) (guix
build gnu-build-system))}.

Der @var{Ausdruck} wird in einer Umgebung ausgewertet, in der
@code{%outputs} an eine Liste von Ausgabe-/Pfad-Paaren gebunden wurde und in
der @code{%build-inputs} an eine Liste von Zeichenkette-/Ausgabepfad-Paaren
gebunden wurde, die aus den @var{inputs}-Eingaben konstruiert worden
ist. Optional kann in @var{env-vars} eine Liste von Paaren aus Zeichenketten
stehen, die Name und Wert von für den Ersteller sichtbaren
Umgebungsvariablen angeben. Der Ersteller terminiert, indem er @code{exit}
mit dem Ergebnis des @var{Ausdruck}s aufruft; wenn also der @var{Ausdruck}
den Wert @code{#f} liefert, wird angenommen, dass die Erstellung
fehlgeschlagen ist.

@var{Ausdruck} wird mit einer Ableitung @var{guile-for-build} erstellt. Wird
kein @var{guile-for-build} angegeben oder steht es auf @code{#f}, wird
stattdessen der Wert der Fluiden @code{%guile-for-build} benutzt.

Siehe die Erklärungen zur Prozedur @code{derivation} für die Bedeutung von
@var{references-graphs}, @var{allowed-references},
@var{disallowed-references}, @var{local-build?} und @var{substitutable?}.
@end deffn

@noindent
Hier ist ein Beispiel einer Ableitung mit nur einer Ausgabe, die ein
Verzeichnis erzeugt, in dem eine einzelne Datei enthalten ist:

@lisp
(let ((builder '(let ((out (assoc-ref %outputs "out")))
                  (mkdir out)    ; das Verzeichnis
                                 ; /gnu/store/…-goo erstellen
                  (call-with-output-file (string-append out "/test")
                    (lambda (p)
                      (display '(Hallo Guix) p))))))
  (build-expression->derivation store "goo" builder))

@result{} #<derivation /gnu/store/…-goo.drv => …>
@end lisp


@node Die Store-Monade
@section Die Store-Monade

@cindex Monade

Die auf dem Store arbeitenden Prozeduren, die in den vorigen Abschnitten
beschrieben wurden, nehmen alle eine offene Verbindung zum
Erstellungs-Daemon als ihr erstes Argument entgegen. Obwohl das ihnen zu
Grunde liegende Modell funktional ist, weisen sie doch alle Nebenwirkungen
auf oder hängen vom momentanen Zustand des Stores ab.

Ersteres ist umständlich, weil die Verbindung zum Erstellungs-Daemon
zwischen all diesen Funktionen durchgereicht werden muss, so dass eine
Komposition mit Funktionen ohne diesen Parameter unmöglich wird. Letzteres
kann problematisch sein, weil Operationen auf dem Store Nebenwirkungen
und/oder Abhängigkeiten von externem Zustand haben und ihre
Ausführungsreihenfolge deswegen eine Rolle spielt.

@cindex monadische Werte
@cindex monadische Funktionen
Hier kommt das Modul @code{(guix monads)} ins Spiel. Im Rahmen dieses Moduls
können @dfn{Monaden} benutzt werden und dazu gehört insbesondere eine für
unsere Zwecke sehr nützliche Monade, die @dfn{Store-Monade}. Monaden sind
ein Konstrukt, mit dem zwei Dinge möglich sind: eine Assoziation von Werten
mit einem „Kontext“ (in unserem Fall ist das die Verbindung zum Store) und
das Festlegen einer Reihenfolge für Berechnungen (hiermit sind auch Zugriffe
auf den Store gemeint). Werte in einer Monade — solche, die mit weiterem
Kontext assoziiert sind — werden @dfn{monadische Werte} genannt; Prozeduren,
die solche Werte liefern, heißen @dfn{monadische Prozeduren}.

Betrachten Sie folgende „normale“ Prozedur:

@lisp
(define (sh-symlink store)
  ;; Eine Ableitung liefern, die mit der ausführbaren Datei „bash“
  ;; symbolisch verknüpft.
  (let* ((drv (package-derivation store bash))
         (out (derivation->output-path drv))
         (sh  (string-append out "/bin/bash")))
    (build-expression->derivation store "sh"
                                  `(symlink ,sh %output))))
@end lisp

Unter Verwendung von @code{(guix monads)} und @code{(guix gexp)} lässt sie
sich als monadische Funktion aufschreiben:

@lisp
(define (sh-symlink)
  ;; Ebenso, liefert aber einen monadischen Wert.
  (mlet %store-monad ((drv (package->derivation bash)))
    (gexp->derivation "sh"
                      #~(symlink (string-append #$drv "/bin/bash")
                                 #$output))))
@end lisp

An der zweiten Version lassen sich mehrere Dinge beobachten: Der Parameter
@code{Store} ist jetzt implizit geworden und wurde in die Aufrufe der
monadischen Prozeduren @code{package->derivation} und
@code{gexp->derivation} „eingefädelt“ und der von @code{package->derivation}
gelieferte monadische Wert wurde mit @code{mlet} statt einem einfachen
@code{let} @dfn{gebunden}.

Wie sich herausstellt, muss man den Aufruf von @code{package->derivation}
nicht einmal aufschreiben, weil er implizit geschieht, wie wir später sehen
werden (siehe @ref{G-Ausdrücke}):

@lisp
(define (sh-symlink)
  (gexp->derivation "sh"
                    #~(symlink (string-append #$bash "/bin/bash")
                               #$output)))
@end lisp

@c See
@c <https://syntaxexclamation.wordpress.com/2014/06/26/escaping-continuations/>
@c for the funny quote.
Die monadische @code{sh-symlink} einfach aufzurufen, bewirkt nichts. Wie
jemand einst sagte: „Mit einer Monade geht man um, wie mit Gefangenen, gegen
die man keine Beweise hat: Man muss sie laufen lassen.“ Um also aus der
Monade auszubrechen und die gewünschte Wirkung zu erzielen, muss man
@code{run-with-store} benutzen:

@lisp
(run-with-store (open-connection) (sh-symlink))
@result{} /gnu/store/…-sh-symlink
@end lisp

Erwähnenswert ist, dass das Modul @code{(guix monad-repl)} die REPL von
Guile um neue „Meta-Befehle“ erweitert, mit denen es leichter ist, mit
monadischen Prozeduren umzugehen: @code{run-in-store} und
@code{enter-store-monad}. Mit Ersterer wird ein einzelner monadischer Wert
durch den Store „laufen gelassen“:

@example
scheme@@(guile-user)> ,run-in-store (package->derivation hello)
$1 = #<derivation /gnu/store/…-hello-2.9.drv => …>
@end example

Mit Letzterer wird rekursiv eine weitere REPL betreten, in der alle
Rückgabewerte automatisch durch den Store laufen gelassen werden:

@example
scheme@@(guile-user)> ,enter-store-monad
store-monad@@(guile-user) [1]> (package->derivation hello)
$2 = #<derivation /gnu/store/…-hello-2.9.drv => …>
store-monad@@(guile-user) [1]> (text-file "foo" "Hallo!")
$3 = "/gnu/store/…-foo"
store-monad@@(guile-user) [1]> ,q
scheme@@(guile-user)>
@end example

@noindent
Beachten Sie, dass in einer @code{store-monad}-REPL keine nicht-monadischen
Werte zurückgeliefert werden können.

Die wichtigsten syntaktischen Formen, um mit Monaden im Allgemeinen
umzugehen, werden im Modul @code{(guix monads)} bereitgestellt und sind im
Folgenden beschrieben.

@deffn {Scheme-Syntax} with-monad @var{Monade} @var{Rumpf} ...
Alle @code{>>=}- oder @code{return}-Formen im @var{Rumpf} in der
@var{Monade} auswerten.
@end deffn

@deffn {Scheme-Syntax} return @var{Wert}
Einen monadischen Wert liefern, der den übergebenen @var{Wert} kapselt.
@end deffn

@deffn {Scheme-Syntax} >>= @var{mWert} @var{mProz} ...
Den monadischen Wert @var{mWert} @dfn{binden}, wobei sein „Inhalt“ an die
monadischen Prozeduren @var{mProz}…@: übergeben wird@footnote{Diese
Operation wird gemeinhin „bind“ genannt, aber mit diesem Begriff wird in
Guile eine völlig andere Prozedur bezeichnet, die nichts damit zu tun
hat. Also benutzen wir dieses etwas kryptische Symbol als Erbe der
Haskell-Programmiersprache.}. Es kann eine einzelne @var{mProz} oder mehrere
davon geben, wie in diesem Beispiel:

@lisp
(run-with-state
    (with-monad %state-monad
      (>>= (return 1)
           (lambda (x) (return (+ 1 x)))
           (lambda (x) (return (* 2 x)))))
  'irgendein-Zustand)

@result{} 4
@result{} irgendein-Zustand
@end lisp
@end deffn

@deffn {Scheme-Syntax} mlet @var{Monade} ((@var{Variable} @var{mWert}) ...) @
       @var{Rumpf} ...
@deffnx {Scheme-Syntax} mlet* @var{Monade} ((@var{Variable} @var{mWert}) ...) @
       @var{Rumpf} ...  Die @var{Variable}n an die monadischen Werte @var{mWert} im
@var{Rumpf} binden, der eine Folge von Ausdrücken ist. Wie beim
bind-Operator kann man es sich vorstellen als „Auspacken“ des rohen,
nicht-monadischen Werts, der im @var{mWert} steckt, wobei anschließend
dieser rohe, nicht-monadische Wert im Sichtbarkeitsbereich des @var{Rumpf}s
von der @var{Variable}n bezeichnet wird. Die Form (@var{Variable} ->
@var{Wert}) bindet die @var{Variable} an den „normalen“ @var{Wert}, wie es
@code{let} tun würde. Die Bindungsoperation geschieht in der Reihenfolge von
links nach rechts. Der letzte Ausdruck des @var{Rumpfs} muss ein monadischer
Ausdruck sein und dessen Ergebnis wird das Ergebnis von @code{mlet} oder
@code{mlet*} werden, wenn es durch die @var{Monad} laufen gelassen wurde.

@code{mlet*} verhält sich gegenüber @code{mlet} wie @code{let*} gegenüber
@code{let} (siehe @ref{Local Bindings,,, guile, GNU Guile Reference
Manual}).
@end deffn

@deffn {Scheme-System} mbegin @var{Monade} @var{mAusdruck} ...
Der Reihe nach den @var{mAusdruck} und die nachfolgenden monadischen
Ausdrücke binden und als Ergebnis das des letzten Ausdrucks liefern. Jeder
Ausdruck in der Abfolge muss ein monadischer Ausdruck sein.

Dies verhält sich ähnlich wie @code{mlet}, außer dass die Rückgabewerte der
monadischen Prozeduren ignoriert werden. In diesem Sinn verhält es sich
analog zu @code{begin}, nur auf monadischen Ausdrücken.
@end deffn

@deffn {Scheme-System} mwhen @var{Bedingung} @var{mAusdr0} @var{mAusdr*} ...
Wenn die @var{Bedingung} wahr ist, wird die Folge monadischer Ausdrücke
@var{mAusdr0}..@var{mAusdr*} wie bei @code{mbegin} ausgewertet. Wenn die
@var{Bedingung} falsch ist, wird @code{*unspecified*} („unbestimmt“) in der
momentanen Monade zurückgeliefert. Jeder Ausdruck in der Folge muss ein
monadischer Ausdruck sein.
@end deffn

@deffn {Scheme-System} munless @var{Bedingung} @var{mAusdr0} @var{mAusdr*} ...
Wenn die @var{Bedingung} falsch ist, wird die Folge monadischer Ausdrücke
@var{mAusdr0}..@var{mAusdr*} wie bei @code{mbegin} ausgewertet. Wenn die
@var{Bedingung} wahr ist, wird @code{*unspecified*} („unbestimmt“) in der
momentanen Monade zurückgeliefert. Jeder Ausdruck in der Folge muss ein
monadischer Ausdruck sein.
@end deffn

@cindex Zustandsmonade
Das Modul @code{(guix monads)} macht die @dfn{Zustandsmonade} (englisch
„state monad“) verfügbar, mit der ein zusätzlicher Wert — der Zustand —
durch die monadischen Prozeduraufrufe @emph{gefädelt} werden kann.

@defvr {Scheme-Variable} %state-monad
Die Zustandsmonade. Prozeduren in der Zustandsmonade können auf den
gefädelten Zustand zugreifen und ihn verändern.

Betrachten Sie das folgende Beispiel. Die Prozedur @code{Quadrat} liefert
einen Wert in der Zustandsmonade zurück. Sie liefert das Quadrat ihres
Arguments, aber sie inkrementiert auch den momentanen Zustandswert:

@lisp
(define (Quadrat x)
  (mlet %state-monad ((Anzahl (current-state)))
    (mbegin %state-monad
      (set-current-state (+ 1 Anzahl))
      (return (* x x)))))

(run-with-state (sequence %state-monad (map Quadrat (iota 3))) 0)
@result{} (0 1 4)
@result{} 3
@end lisp

When ``run'' through @code{%state-monad}, we obtain that additional state
value, which is the number of @code{square} calls.
@end defvr

@deffn {Monadische Prozedur} current-state
Liefert den momentanen Zustand als einen monadischen Wert.
@end deffn

@deffn {Monadische Prozedur} set-current-state @var{Wert}
Setzt den momentanen Zustand auf @var{Wert} und liefert den vorherigen
Zustand als einen monadischen Wert.
@end deffn

@deffn {Monadische Prozedur} state-push @var{Wert}
Hängt den @var{Wert} vorne an den momentanen Zustand an, der eine Liste sein
muss. Liefert den vorherigen Zustand als monadischen Wert.
@end deffn

@deffn {Monadische Prozedur} state-pop
Entfernt einen Wert vorne vom momentanen Zustand und liefert ihn als
monadischen Wert zurück. Dabei wird angenommen, dass es sich beim Zustand um
eine Liste handelt.
@end deffn

@deffn {Scheme-Prozedur} run-with-state @var{mWert} [@var{Zustand}]
Den monadischen Wert @var{mWert} mit @var{Zustand} als initialem Zustand
laufen lassen. Dies liefert zwei Werte: den Ergebniswert und den
Ergebniszustand.
@end deffn

Die zentrale Schnittstelle zur Store-Monade, wie sie vom Modul @code{(guix
store)} angeboten wird, ist die Folgende:

@defvr {Scheme-Variable} %store-monad
The store monad---an alias for @code{%state-monad}.

Values in the store monad encapsulate accesses to the store.  When its
effect is needed, a value of the store monad must be ``evaluated'' by
passing it to the @code{run-with-store} procedure (see below).
@end defvr

@deffn {Scheme-Prozedur} run-with-store @var{Store} @var{mWert} [#:guile-for-build] [#:system (%current-system)]
Den @var{mWert}, einen monadischen Wert in der Store-Monade, in der offenen
Verbindung @var{Store} laufen lassen.
@end deffn

@deffn {Monadische Prozedur} text-file @var{Name} @var{Text} [@var{Referenzen}]
Als monadischen Wert den absoluten Dateinamen im Store für eine Datei
liefern, deren Inhalt der der Zeichenkette @var{Text} ist. @var{Referenzen}
ist dabei eine Liste von Store-Objekten, die die Ergebnis-Textdatei
referenzieren wird; der Vorgabewert ist die leere Liste.
@end deffn

@deffn {Monadische Prozedur} binary-file @var{Name} @var{Daten} [@var{Referenzen}]
Den absoluten Dateinamen im Store als monadischen Wert für eine Datei
liefern, deren Inhalt der des Byte-Vektors @var{Daten} ist. @var{Referenzen}
ist dabei eine Liste von Store-Objekten, die die Ergebnis-Binärdatei
referenzieren wird; der Vorgabewert ist die leere Liste.
@end deffn

@deffn {Monadische Prozedur} interned-file @var{Datei} [@var{Name}] @
         [#:recursive? #t] [#:select? (const #t)] Liefert den Namen der @var{Datei},
nachdem sie in den Store interniert wurde. Dabei wird der @var{Name} als ihr
Store-Name verwendet, oder, wenn kein @var{Name} angegeben wurde, der
Basisname der @var{Datei}.

Ist @var{recursive?} wahr, werden in der @var{Datei} enthaltene Dateien
rekursiv hinzugefügt; ist die @var{Datei} eine flache Datei und
@var{recursive?} ist wahr, wird ihr Inhalt in den Store eingelagert und ihre
Berechtigungs-Bits übernommen.

Steht @var{recursive?} auf wahr, wird @code{(@var{select?} @var{Datei}
@var{Stat})} für jeden Verzeichniseintrag aufgerufen, wobei @var{Datei} der
absolute Dateiname und @var{Stat} das Ergebnis von @code{lstat} ist, außer
auf den Einträgen, wo @var{select?} keinen wahren Wert liefert.

Folgendes Beispiel fügt eine Datei unter zwei verschiedenen Namen in den
Store ein:

@lisp
(run-with-store (open-connection)
  (mlet %store-monad ((a (interned-file "README"))
                      (b (interned-file "README" "LEGU-MIN")))
    (return (list a b))))

@result{} ("/gnu/store/rwm…-README" "/gnu/store/44i…-LEGU-MIN")
@end lisp

@end deffn

Das Modul @code{(guix packages)} exportiert die folgenden paketbezogenen
monadischen Prozeduren:

@deffn {Monadische Prozedur} package-file @var{Paket} [@var{Datei}] @
       [#:system (%current-system)] [#:target #f] @ [#:output "out"] Liefert als
monadischen Wert den absoluten Dateinamen der @var{Datei} innerhalb des
Ausgabeverzeichnisses @var{output} des @var{Paket}s. Wird keine @var{Datei}
angegeben, wird der Name des Ausgabeverzeichnisses @var{output} für das
@var{Paket} zurückgeliefert. Ist @var{target} wahr, wird sein Wert als das
Zielsystem bezeichnendes Tripel zum Cross-Kompilieren benutzt.

Note that this procedure does @emph{not} build @var{package}.  Thus, the
result might or might not designate an existing file.  We recommend not
using this procedure unless you know what you are doing.
@end deffn

@deffn {Monadische Prozedur} package->derivation @var{Paket} [@var{System}]
@deffnx {Monadische Prozedur} package->cross-derivation @var{Paket} @
          @var{Ziel} [@var{System}] Monadische Version von @code{package-derivation}
und @code{package-cross-derivation} (siehe @ref{Pakete definieren}).
@end deffn


@node G-Ausdrücke
@section G-Ausdrücke

@cindex G-Ausdruck
@cindex Erstellungscode maskieren
Es gibt also „Ableitungen“, die eine Abfolge von Erstellungsaktionen
repräsentieren, die durchgeführt werden müssen, um ein Objekt im Store zu
erzeugen (siehe @ref{Ableitungen}). Diese Erstellungsaktionen werden
durchgeführt, nachdem der Daemon gebeten wurde, die Ableitungen tatsächlich
zu erstellen; dann führt der Daemon sie in einer isolierten Umgebung (einem
sogenannten Container) aus (siehe @ref{Aufruf des guix-daemon}).

@cindex Schichten von Code
Wenig überraschend ist, dass wir diese Erstellungsaktionen gerne in Scheme
schreiben würden. Wenn wir das tun, bekommen wir zwei verschiedene
@dfn{Schichten} von Scheme-Code@footnote{Der Begriff @dfn{Schicht}, englisch
Stratum, wurde in diesem Kontext von Manuel Serrano et al.@: in ihrer Arbeit
an Hop geprägt. Oleg Kiselyov, der aufschlussreiche
@url{http://okmij.org/ftp/meta-programming/#meta-scheme, Essays und Code zu
diesem Thema} geschrieben hat, nennt diese Art der Code-Generierung
@dfn{Staging}, deutsch etwa Inszenierung bzw.@: Aufführung.}: den
„wirtsseitigen Code“ („host code“) — also Code, der Pakete definiert, mit
dem Daemon kommuniziert etc.@: — und den „erstellungsseitigen Code“ („build
code“) — also Code, der die Erstellungsaktionen auch wirklich umsetzt, indem
Dateien erstellt werden, @command{make} aufgerufen wird etc.

Um eine Ableitung und ihre Erstellungsaktionen zu beschreiben, muss man
normalerweise erstellungsseitigen Code im wirtsseitigen Code einbetten. Das
bedeutet, man behandelt den erstellungsseitigen Code als Daten, was wegen
der Homoikonizität von Scheme — dass Code genauso als Daten repräsentiert
werden kann — sehr praktisch ist. Doch brauchen wir hier mehr als nur den
normalen Quasimaskierungsmechanismus mit @code{quasiquote} in Scheme, wenn
wir Erstellungsausdrücke konstruieren möchten.

Das Modul @code{(guix gexp)} implementiert @dfn{G-Ausdrücke}, eine Form von
S-Ausdrücken, die zu Erstellungsausdrücken angepasst wurden. G-Ausdrücke
(englisch „G-expressions“, kurz @dfn{Gexps}) setzen sich grundlegend aus
drei syntaktischen Formen zusammen: @code{gexp}, @code{ungexp} und
@code{ungexp-splicing} (alternativ einfach: @code{#~}, @code{#$} und
@code{#$@@}), die jeweils mit @code{quasiquote}, @code{unquote} und
@code{unquote-splicing} vergleichbar sind (siehe @ref{Expression Syntax,
@code{quasiquote},, guile, GNU Guile Reference Manual}). Es gibt aber auch
erhebliche Unterschiede:

@itemize
@item
G-Ausdrücke sind dafür gedacht, in eine Datei geschrieben zu werden, wo sie
von anderen Prozessen ausgeführt oder manipuliert werden können.

@item
Wenn ein abstraktes Objekt wie ein Paket oder eine Ableitung innerhalb eines
G-Ausdrucks demaskiert wird, ist das Ergebnis davon dasselbe, wie wenn
dessen Ausgabedateiname genannt worden wäre.

@item
G-Ausdrücke tragen Informationen über die Pakete oder Ableitungen mit sich,
auf die sie sich beziehen, und diese Abhängigkeiten werden automatisch zu
den sie benutzenden Erstellungsprozessen als Eingaben hinzugefügt.
@end itemize

@cindex Herunterbrechen, von abstrakten Objekten in G-Ausdrücken
This mechanism is not limited to package and derivation objects:
@dfn{compilers} able to ``lower'' other high-level objects to derivations or
files in the store can be defined, such that these objects can also be
inserted into gexps.  For example, a useful type of high-level objects that
can be inserted in a gexp is ``file-like objects'', which make it easy to
add files to the store and to refer to them in derivations and such (see
@code{local-file} and @code{plain-file} below).

Zur Veranschaulichung dieser Idee soll uns dieses Beispiel eines G-Ausdrucks
dienen:

@lisp
(define build-exp
  #~(begin
      (mkdir #$output)
      (chdir #$output)
      (symlink (string-append #$coreutils "/bin/ls")
               "list-files")))
@end lisp

Indem wir diesen G-Ausdruck an @code{gexp->derivation} übergeben, bekommen
wir eine Ableitung, die ein Verzeichnis mit genau einer symbolischen
Verknüpfung auf @file{/gnu/store/…-coreutils-8.22/bin/ls} erstellt:

@lisp
(gexp->derivation "das-ding" build-exp)
@end lisp

Wie man es erwarten würde, wird die Zeichenkette
@code{"/gnu/store/…-coreutils-8.22"} anstelle der Referenzen auf das Paket
@var{coreutils} im eigentlichen Erstellungscode eingefügt und
@var{coreutils} automatisch zu einer Eingabe der Ableitung gemacht. Genauso
wird auch @code{#$output} (was äquivalent zur Schreibweise @code{(ungexp
output)} ist) ersetzt durch eine Zeichenkette mit dem Namen der Ausgabe der
Ableitung.

@cindex Cross-Kompilieren
Im Kontext der Cross-Kompilierung bietet es sich an, zwischen Referenzen auf
die @emph{native} Erstellung eines Pakets — also der, die auf dem
Wirtssystem ausgeführt werden kann — und Referenzen auf Cross-Erstellungen
eines Pakets zu unterscheiden. Hierfür spielt @code{#+} dieselbe Rolle wie
@code{#$}, steht aber für eine Referenz auf eine native Paketerstellung.

@lisp
(gexp->derivation "vi"
   #~(begin
       (mkdir #$output)
       (mkdir (string-append #$output "/bin"))
       (system* (string-append #+coreutils "/bin/ln")
                "-s"
                (string-append #$emacs "/bin/emacs")
                (string-append #$output "/bin/vi")))
   #:target "aarch64-linux-gnu")
@end lisp

@noindent
Im obigen Beispiel wird die native Erstellung der @var{coreutils} benutzt,
damit @command{ln} tatsächlich auf dem Wirtssystem ausgeführt werden kann,
aber danach die cross-kompilierte Erstellung von @var{emacs} referenziert.

@cindex importierte Module, in G-Ausdrücken
@findex with-imported-modules
Eine weitere Funktionalität von G-Ausdrücken stellen @dfn{importierte
Module} dar. Manchmal will man bestimmte Guile-Module von der „wirtsseitigen
Umgebung“ im G-Ausdruck benutzen können, deswegen sollten diese Module in
die „erstellungsseitige Umgebung“ importiert werden. Die
@code{with-imported-modules}-Form macht das möglich:

@lisp
(let ((build (with-imported-modules '((guix build utils))
               #~(begin
                   (use-modules (guix build utils))
                   (mkdir-p (string-append #$output "/bin"))))))
  (gexp->derivation "leeres-Verzeichnis"
                    #~(begin
                        #$build
                        (display "Erfolg!\n")
                        #t)))
@end lisp

@noindent
In diesem Beispiel wird das Modul @code{(guix build utils)} automatisch in
die isolierte Erstellungsumgebung unseres G-Ausdrucks geholt, so dass
@code{(use-modules (guix build utils))} wie erwartet funktioniert.

@cindex Modulabschluss
@findex source-module-closure
Normalerweise möchten Sie, dass der @emph{Abschluss} eines Moduls importiert
wird — also das Modul und alle Module, von denen es abhängt — statt nur das
Modul selbst. Ansonsten scheitern Versuche, das Modul zu benutzen, weil
seine Modulabhängigkeiten fehlen. Die Prozedur @code{source-module-closure}
berechnet den Abschluss eines Moduls, indem es den Kopf seiner Quelldatei
analysiert, deswegen schafft die Prozedur hier Abhilfe:

@lisp
(use-modules (guix modules))   ;„source-module-closure“ verfügbar machen

(with-imported-modules (source-module-closure
                         '((guix build utils)
                           (gnu build vm)))
  (gexp->derivation "etwas-mit-vm"
                    #~(begin
                        (use-modules (guix build utils)
                                     (gnu build vm))
                        …)))
@end lisp

@cindex Erweiterungen, für G-Ausdrücke
@findex with-extensions
Auf die gleiche Art können Sie auch vorgehen, wenn Sie nicht bloß reine
Scheme-Module importieren möchten, sondern auch „Erweiterungen“ wie
Guile-Anbindungen von C-Bibliotheken oder andere „vollumfängliche“
Pakete. Sagen wir, Sie bräuchten das Paket @code{guile-json} auf der
Erstellungsseite, dann könnten Sie es hiermit bekommen:

@lisp
(use-modules (gnu packages guile))  ;für „guile-json“

(with-extensions (list guile-json)
  (gexp->derivation "etwas-mit-json"
                    #~(begin
                        (use-modules (json))
                        …)))
@end lisp

Die syntaktische Form, in der G-Ausdrücke konstruiert werden, ist im
Folgenden zusammengefasst.

@deffn {Scheme-Syntax} #~@var{Ausdruck}
@deffnx {Scheme-Syntax} (gexp @var{Ausdruck})
Liefert einen G-Ausdruck, der den @var{Ausdruck} enthält. Der @var{Ausdruck}
kann eine oder mehrere der folgenden Formen enthalten:

@table @code
@item #$@var{Objekt}
@itemx (ungexp @var{Objekt})
Eine Referenz auf das @var{Objekt} einführen. Das @var{Objekt} kann einen
der unterstützten Typen haben, zum Beispiel ein Paket oder eine Ableitung,
so dass die @code{ungexp}-Form durch deren Ausgabedateiname ersetzt wird —
z.B.@: @code{"/gnu/store/…-coreutils-8.22}.

Wenn das @var{Objekt} eine Liste ist, wird diese durchlaufen und alle
unterstützten Objekte darin auf diese Weise ersetzt.

Wenn das @var{Objekt} ein anderer G-Ausdruck ist, wird sein Inhalt eingefügt
und seine Abhängigkeiten zu denen des äußeren G-Ausdrucks hinzugefügt.

Wenn das @var{Objekt} eine andere Art von Objekt ist, wird es so wie es ist
eingefügt.

@item #$@var{Objekt}:@var{Ausgabe}
@itemx (ungexp @var{Objekt} @var{Ausgabe})
Dies verhält sich wie die Form oben, bezieht sich aber ausdrücklich auf die
angegebene @var{Ausgabe} des @var{Objekt}s — dies ist nützlich, wenn das
@var{Objekt} mehrere Ausgaben generiert (siehe @ref{Pakete mit mehreren Ausgaben.}).

@item #+@var{Objekt}
@itemx #+@var{Objekt}:@var{Ausgabe}
@itemx (ungexp-native @var{Objekt})
@itemx (ungexp-native @var{Objekt} @var{Ausgabe})
Das Gleiche wie @code{ungexp}, jedoch wird im Kontext einer
Cross-Kompilierung eine Referenz auf die @emph{native} Erstellung des
@var{Objekt}s eingefügt.

@item #$output[:@var{Ausgabe}]
@itemx (ungexp output [@var{Ausgabe}])
Fügt eine Referenz auf die angegebene @var{Ausgabe} dieser Ableitung ein,
oder auf die Hauptausgabe, wenn keine @var{Ausgabe} angegeben wurde.

Dies ist nur bei G-Ausdrücken sinnvoll, die an @code{gexp->derivation}
übergeben werden.

@item #$@@@var{Liste}
@itemx (ungexp-splicing @var{Liste})
Das Gleiche wie oben, jedoch wird nur der Inhalt der @var{Liste} in die
äußere Liste eingespleißt.

@item #+@@@var{Liste}
@itemx (ungexp-native-splicing @var{Liste})
Das Gleiche, aber referenziert werden native Erstellungen der Objekte in der
@var{Liste}.

@end table

G-expressions created by @code{gexp} or @code{#~} are run-time objects of
the @code{gexp?} type (see below).
@end deffn

@deffn {Scheme-Syntax} with-imported-modules @var{Module} @var{Rumpf}…
Markiert die in @var{Rumpf}…@: definierten G-Ausdrücke, dass sie in ihrer
Ausführungsumgebung die angegebenen @var{Module} brauchen.

Jedes Objekt unter den @var{Module}n kann der Name eines Moduls wie
@code{(guix build utils)} sein, oder es kann nacheinander ein Modulname, ein
Pfeil und ein dateiartiges Objekt sein:

@lisp
`((guix build utils)
  (guix gcrypt)
  ((guix config) => ,(scheme-file "config.scm"
                                  #~(define-module …))))
@end lisp

@noindent
Im Beispiel oben werden die ersten beiden Module vom Suchpfad genommen und
das letzte aus dem angegebenen dateiartigen Objekt erzeugt.

Diese Form hat einen @emph{lexikalischen} Sichtbarkeitsbereich: Sie wirkt
sich auf die direkt in @var{Rumpf}…@: definierten G-Ausdrücke aus, aber
nicht auf jene, die, sagen wir, in aus @var{Rumpf}…@: heraus aufgerufenen
Prozeduren definiert wurden.
@end deffn

@deffn {Scheme-Syntax} with-extensions @var{Erweiterungen} @var{Rumpf}…
Markiert die in @var{Rumpf}…@: definierten G-Ausdrücke, dass sie
@var{Erweiterungen} in ihrer Erstellungs- und Ausführungsumgebung
benötigen. @var{Erweiterungen} sind typischerweise eine Liste von
Paketobjekten wie zum Beispiel die im Modul @code{(gnu packages guile)}
definierten.

Konkret werden die unter den @var{Erweiterungen} aufgeführten Pakete zum
Ladepfad hinzugefügt, während die in @var{Rumpf}…@: aufgeführten
importierten Module kompiliert werden und sie werden auch zum Ladepfad des
von @var{Rumpf}…@: gelieferten G-Ausdrucks hinzugefügt.
@end deffn

@deffn {Scheme-Prozedur} gexp? @var{Objekt}
Liefert @code{#t}, wenn das @var{Objekt} ein G-Ausdruck ist.
@end deffn

G-expressions are meant to be written to disk, either as code building some
derivation, or as plain files in the store.  The monadic procedures below
allow you to do that (@pxref{Die Store-Monade}, for more information about
monads).

@deffn {Monadische Prozedur} gexp->derivation @var{Name} @var{Ausdruck} @
       [#:system (%current-system)] [#:target #f] [#:graft? #t] @ [#:hash #f]
[#:hash-algo #f] @ [#:recursive? #f] [#:env-vars '()] [#:modules '()] @
[#:module-path @code{%load-path}] @ [#:effective-version "2.2"] @
[#:references-graphs #f] [#:allowed-references #f] @
[#:disallowed-references #f] @ [#:leaked-env-vars #f] @ [#:script-name
(string-append @var{name} "-builder")] @ [#:deprecation-warnings #f] @
[#:local-build? #f] [#:substitutable? #t] @ [#:properties '()]
[#:guile-for-build #f] Return a derivation @var{name} that runs @var{exp} (a
gexp) with @var{guile-for-build} (a derivation) on @var{system}; @var{exp}
is stored in a file called @var{script-name}.  When @var{target} is true, it
is used as the cross-compilation target triplet for packages referred to by
@var{exp}.

@var{modules} gilt als veraltet; stattdessen sollte
@code{with-imported-modules} benutzt werden. Die Bedeutung ist, dass die
@var{Module} im Ausführungskontext des @var{Ausdruck}s verfügbar gemacht
werden; @var{modules} ist dabei eine Liste von Namen von Guile-Modulen, die
im Modulpfad @var{module-path} gesucht werden, um sie in den Store zu
kopieren, zu kompilieren und im Ladepfad während der Ausführung des
@var{Ausdruck}s verfügbar zu machen — z.B.@: @code{((guix build utils) (guix
build gnu-build-system))}.

@var{effective-version} bestimmt, unter welcher Zeichenkette die
Erweiterungen des @var{Ausdruck}s zum Suchpfad hinzugefügt werden (siehe
@code{with-extensions}) — z.B.@: @code{"2.2"}.

@var{graft?} bestimmt, ob vom @var{Ausdruck} benannte Pakete veredelt werden
sollen, falls Veredelungen zur Verfügung stehen.

Ist @var{references-graphs} wahr, muss es eine Liste von Tupeln in einer der
folgenden Formen sein:

@example
(@var{Dateiname} @var{Paket})
(@var{Dateiname} @var{Paket} @var{Ausgabe})
(@var{Dateiname} @var{Ableitung})
(@var{Dateiname} @var{Ableitung} @var{Ausgabe})
(@var{Dateiname} @var{Store-Objekt})
@end example

Bei jedem Element von @var{references-graphs} wird das rechts Stehende
automatisch zu einer Eingabe des Erstellungsprozesses vom @var{Ausdruck}
gemacht. In der Erstellungsumgebung enthält das, was mit @var{Dateiname}
bezeichnet wird, den Referenzgraphen des entsprechenden Objekts in einem
einfachen Textformat.

@var{allowed-references} muss entweder @code{#f} oder eine Liste von
Ausgabenamen und Paketen sein. Eine solche Liste benennt Store-Objekte, die
das Ergebnis referenzieren darf. Jede Referenz auf ein nicht dort
aufgeführtes Store-Objekt löst einen Erstellungsfehler aus. Genauso
funktioniert @var{disallowed-references}, was eine Liste von Objekten sein
kann, die von den Ausgaben nicht referenziert werden dürfen.

@var{deprecation-warnings} bestimmt, ob beim Kompilieren von Modulen
Warnungen angezeigt werden sollen, wenn auf als veraltet markierten Code
zugegriffen wird. @var{deprecation-warnings} kann @code{#f}, @code{#t} oder
@code{'detailed} (detailliert) sein.

Die anderen Argumente verhalten sich wie bei @code{derivation} (siehe
@ref{Ableitungen}).
@end deffn

@cindex dateiartige Objekte
Die im Folgenden erklärten Prozeduren @code{local-file}, @code{plain-file},
@code{computed-file}, @code{program-file} und @code{scheme-file} liefern
@dfn{dateiartige Objekte}. Das bedeutet, dass diese Objekte, wenn sie in
einem G-Ausdruck demaskiert werden, zu einer Datei im Store
führen. Betrachten Sie zum Beispiel diesen G-Ausdruck:

@lisp
#~(system* #$(file-append glibc "/sbin/nscd") "-f"
           #$(local-file "/tmp/my-nscd.conf"))
@end lisp

Der Effekt hiervon ist, dass @file{/tmp/my-nscd.conf} „interniert“ wird,
indem es in den Store kopiert wird. Sobald er umgeschrieben wurde, zum
Beispiel über @code{gexp->derivation}, referenziert der G-Ausdruck diese
Kopie im @file{/gnu/store}. Die Datei in @file{/tmp} zu bearbeiten oder zu
löschen, hat dann keinen Effekt mehr darauf, was der G-Ausdruck
tut. @code{plain-file} kann in ähnlicher Weise benutzt werden, es
unterscheidet sich aber darin, dass dort der Prozedur der Inhalt der Datei
als eine Zeichenkette übergeben wird.

@deffn {Scheme-Prozedur} local-file @var{Datei} [@var{Name}] @
   [#:recursive? #f] [#:select? (const #t)] Liefert ein Objekt, dass die lokale
Datei @var{Datei} repräsentiert und sie zum Store hinzufügen lässt; dieses
Objekt kann in einem G-Ausdruck benutzt werden. Wurde für die @var{Datei}
ein relativer Dateiname als literaler Ausdruck angegeben, wird sie relativ
zur Quelldatei gesucht, in der diese Form steht. Wurde die @var{Datei}
@emph{nicht} als literale Zeichenkette angegeben, wird sie zur Laufzeit
relativ zum aktuellen Arbeitsverzeichnis gesucht. Die @var{Datei} wird unter
dem angegebenen @var{Name}n im Store abgelegt — als Vorgabe wird dabei der
Basisname der @var{Datei} genommen.

Ist @var{recursive?} wahr, werden in der @var{Datei} enthaltene Dateien
rekursiv hinzugefügt; ist die @var{Datei} eine flache Datei und
@var{recursive?} ist wahr, wird ihr Inhalt in den Store eingelagert und ihre
Berechtigungs-Bits übernommen.

Steht @var{recursive?} auf wahr, wird @code{(@var{select?} @var{Datei}
@var{Stat})} für jeden Verzeichniseintrag aufgerufen, wobei @var{Datei} der
absolute Dateiname und @var{Stat} das Ergebnis von @code{lstat} ist, außer
auf den Einträgen, wo @var{select?} keinen wahren Wert liefert.

Dies ist das deklarative Gegenstück zur monadischen Prozedur
@code{interned-file} (siehe @ref{Die Store-Monade, @code{interned-file}}).
@end deffn

@deffn {Scheme-Prozedur} plain-file @var{Name} @var{Inhalt}
Liefert ein Objekt, das eine Textdatei mit dem angegebenen @var{Name}n
repräsentiert, die den angegebenen @var{Inhalt} hat (eine Zeichenkette oder
ein Bytevektor), welche zum Store hinzugefügt werden soll.

Dies ist das deklarative Gegenstück zu @code{text-file}.
@end deffn

@deffn {Scheme-Prozedur} computed-file @var{Name} @var{G-Ausdruck} @
          [#:options '(#:local-build? #t)] Liefert ein Objekt, das das Store-Objekt
mit dem @var{Name}n repräsentiert, eine Datei oder ein Verzeichnis, das vom
@var{G-Ausdruck} berechnet wurde. @var{options} ist eine Liste zusätzlicher
Argumente, die an @code{gexp->derivation} übergeben werden.

Dies ist das deklarative Gegenstück zu @code{gexp->derivation}.
@end deffn

@deffn {Monadische Prozedur} gexp->script @var{Name} @var{Ausdruck} @
  [#:guile (default-guile)] [#:module-path %load-path] @ [#:system
(%current-system)] [#:target #f] Liefert ein ausführbares Skript namens
@var{Name}, das den @var{Ausdruck} mit dem angegebenen @var{guile} ausführt,
wobei vom @var{Ausdruck} importierte Module in seinem Suchpfad stehen. Die
Module des @var{Ausdruck}s werden dazu im Modulpfad @var{module-path}
gesucht.

Folgendes Beispiel erstellt ein Skript, das einfach nur den Befehl
@command{ls} ausführt:

@lisp
(use-modules (guix gexp) (gnu packages base))

(gexp->script "list-files"
              #~(execl #$(file-append coreutils "/bin/ls")
                       "ls"))
@end lisp

Lässt man es durch den Store „laufen“ (siehe @ref{Die Store-Monade,
@code{run-with-store}}), erhalten wir eine Ableitung, die eine ausführbare
Datei @file{/gnu/store/…-list-files} generiert, ungefähr so:

@example
#!/gnu/store/…-guile-2.0.11/bin/guile -ds
!#
(execl "/gnu/store/…-coreutils-8.22"/bin/ls" "ls")
@end example
@end deffn

@deffn {Scheme-Prozedur} program-file @var{Name} @var{G-Ausdruck} @
          [#:guile #f] [#:module-path %load-path] Liefert ein Objekt, das eine
ausführbare Store-Datei @var{Name} repräsentiert, die den @var{G-Ausdruck}
ausführt. @var{guile} ist das zu verwendende Guile-Paket, mit dem das Skript
ausgeführt werden kann. Importierte Module des @var{G-Ausdruck}s werden im
Modulpfad @var{module-path} gesucht.

Dies ist das deklarative Gegenstück zu @code{gexp->script}.
@end deffn

@deffn {Monadische Prozedur} gexp->file @var{Name} @var{G-Ausdruck} @
            [#:set-load-path? #t] [#:module-path %load-path] @ [#:splice? #f] @ [#:guile
(default-guile)] Liefert eine Ableitung, die eine Datei @var{Name} erstellen
wird, deren Inhalt der @var{G-Ausdruck} ist. Ist @var{splice?} wahr, dann
wird @var{G-Ausdruck} stattdessen als eine Liste von mehreren G-Ausdrücken
behandelt, die alle in die resultierende Datei gespleißt werden.

Ist @var{set-load-path?} wahr, wird in die resultierende Datei Code
hinzugefügt, der den Ladepfad @code{%load-path} und den Ladepfad für
kompilierte Dateien @code{%load-compiled-path} festlegt, die für die
importierten Module des @var{G-Ausdruck}s nötig sind. Die Module des
@var{G-Ausdruck}s werden im Modulpfad @var{module-path} gesucht.

Die resultierende Datei referenziert alle Abhängigkeiten des
@var{G-Ausdruck}s oder eine Teilmenge davon.
@end deffn

@deffn {Scheme Procedure} scheme-file @var{name} @var{exp} @
          [#:splice? #f] [#:set-load-path? #t] Return an object representing the
Scheme file @var{name} that contains @var{exp}.

Dies ist das deklarative Gegenstück zu @code{gexp->file}.
@end deffn

@deffn {Monadische Prozedur} text-file* @var{Name} @var{Text} …
Liefert eine Ableitung als monadischen Wert, welche eine Textdatei erstellt,
in der der gesamte @var{Text} enthalten ist. @var{Text} kann eine Folge
nicht nur von Zeichenketten, sondern auch Objekten beliebigen Typs sein, die
in einem G-Ausdruck benutzt werden können, also Paketen, Ableitungen,
Objekte lokaler Dateien und so weiter. Die resultierende Store-Datei
referenziert alle davon.

Diese Variante sollte gegenüber @code{text-file} bevorzugt verwendet werden,
wann immer die zu erstellende Datei Objekte im Store referenzieren
wird. Typischerweise ist das der Fall, wenn eine Konfigurationsdatei
erstellt wird, die Namen von Store-Dateien enthält, so wie hier:

@lisp
(define (profile.sh)
  ;; Liefert den Namen eines Shell-Skripts im Store,
  ;; welcher die Umgebungsvariable „PATH“ initialisiert.
  (text-file* "profile.sh"
              "export PATH=" coreutils "/bin:"
              grep "/bin:" sed "/bin\n"))
@end lisp

In diesem Beispiel wird die resultierende Datei
@file{/gnu/store/…-profile.sh} sowohl @var{coreutils}, @var{grep} als auch
@var{sed} referenzieren, so dass der Müllsammler diese nicht löscht, während
die resultierende Datei noch lebendig ist.
@end deffn

@deffn {Scheme-Prozedur} mixed-text-file @var{Name} @var{Text} …
Liefert ein Objekt, was die Store-Datei @var{Name} repräsentiert, die
@var{Text} enthält. @var{Text} ist dabei eine Folge von Zeichenketten und
dateiartigen Objekten wie zum Beispiel:

@lisp
(mixed-text-file "profile"
                 "export PATH=" coreutils "/bin:" grep "/bin")
@end lisp

Dies ist das deklarative Gegenstück zu @code{text-file*}.
@end deffn

@deffn {Scheme-Prozedur} file-union @var{Name} @var{Dateien}
Liefert ein @code{<computed-file>}, das ein Verzeichnis mit allen
@var{Dateien} enthält. Jedes Objekt in @var{Dateien} muss eine
zweielementige Liste sein, deren erstes Element der im neuen Verzeichnis zu
benutzende Dateiname ist und deren zweites Element ein G-Ausdruck ist, der
die Zieldatei benennt. Hier ist ein Beispiel:

@lisp
(file-union "etc"
            `(("hosts" ,(plain-file "hosts"
                                    "127.0.0.1 localhost"))
              ("bashrc" ,(plain-file "bashrc"
                                     "alias ls='ls --color=auto'"))))
@end lisp

Dies liefert ein Verzeichnis @code{etc}, das zwei Dateien enthält.
@end deffn

@deffn {Scheme-Prozedur} directory-union @var{Name} @var{Dinge}
Liefert ein Verzeichnis, was die Vereinigung (englisch „Union“) der
@var{Dinge} darstellt, wobei @var{Dinge} eine Liste dateiartiger Objekte
sein muss, die Verzeichnisse bezeichnen. Zum Beispiel:

@lisp
(directory-union "guile+emacs" (list guile emacs))
@end lisp

Das liefert ein Verzeichnis, welches die Vereinigung der Pakete @code{guile}
und @code{emacs} ist.
@end deffn

@deffn {Scheme-Prozedur} file-append @var{Objekt} @var{Suffix} …
Liefert ein dateiartiges Objekt, das zur Aneinanderreihung von @var{Objekt}
und @var{Suffix} umgeschrieben wird, wobei das @var{Objekt} ein
herunterbrechbares Objekt und jedes @var{Suffix} eine Zeichenkette sein
muss.

Betrachten Sie zum Beispiel diesen G-Ausdruck:

@lisp
(gexp->script "uname-ausfuehren"
              #~(system* #$(file-append coreutils
                                        "/bin/uname")))
@end lisp

Denselben Effekt könnte man erreichen mit:

@lisp
(gexp->script "uname-ausfuehren"
              #~(system* (string-append #$coreutils
                                        "/bin/uname")))
@end lisp

Es gibt jedoch einen Unterschied, nämlich enthält das resultierende Skript
bei @code{file-append} tatsächlich den absoluten Dateinamen als
Zeichenkette, während im anderen Fall das resultierende Skript einen
Ausdruck @code{(string-append …)} enthält, der den Dateinamen erst @emph{zur
Laufzeit} zusammensetzt.
@end deffn

@deffn {Scheme Syntax} let-system @var{system} @var{body}@dots{}
@deffnx {Scheme Syntax} let-system (@var{system} @var{target}) @var{body}@dots{}
Bind @var{system} to the currently targeted system---e.g.,
@code{"x86_64-linux"}---within @var{body}.

In the second case, additionally bind @var{target} to the current
cross-compilation target---a GNU triplet such as
@code{"arm-linux-gnueabihf"}---or @code{#f} if we are not cross-compiling.

@code{let-system} is useful in the occasional case where the object spliced
into the gexp depends on the target system, as in this example:

@example
#~(system*
   #+(let-system system
       (cond ((string-prefix? "armhf-" system)
              (file-append qemu "/bin/qemu-system-arm"))
             ((string-prefix? "x86_64-" system)
              (file-append qemu "/bin/qemu-system-x86_64"))
             (else
              (error "dunno!"))))
   "-net" "user" #$image)
@end example
@end deffn

@deffn {Scheme-Syntax} with-parameters ((@var{Parameter} @var{Wert}) …) @var{Ausdruck}
Mit diesem Makro verhält es sich ähnlich wie mit der
@code{parameterize}-Form für dynamisch gebundene @dfn{Parameter} (siehe
@ref{Parameters,,, guile, GNU Guile Reference Manual}). Der Hauptunterschied
ist, dass es sich erst auswirkt, wenn das vom @var{Ausdruck}
zurückgelieferte dateiartige Objekt auf eine Ableitung oder ein Store-Objekt
heruntergebrochen wird.

Eine typische Anwendung von @code{with-parameters} ist, den für ein
bestimmtes Objekt geltenden Systemtyp zwingend festzulegen:

@lisp
(with-parameters ((%current-system "i686-linux"))
  coreutils)
@end lisp

Obiges Beispiel liefert ein Objekt, das der Erstellung von Coreutils für die
i686-Architektur entspricht, egal was der aktuelle Wert von
@code{%current-system} ist.
@end deffn


Natürlich gibt es zusätzlich zu in „wirtsseitigem“ Code eingebetteten
G-Ausdrücken auch Module mit „erstellungsseitig“ nutzbaren Werkzeugen. Um
klarzustellen, dass sie dafür gedacht sind, in der Erstellungsschicht
benutzt zu werden, bleiben diese Module im Namensraum @code{(guix build …)}.

@cindex Herunterbrechen, von abstrakten Objekten in G-Ausdrücken
Intern werden hochsprachliche, abstrakte Objekte mit ihrem Compiler entweder
zu Ableitungen oder zu Store-Objekten @dfn{heruntergebrochen}. Wird zum
Beispiel ein Paket heruntergebrochen, bekommt man eine Ableitung, während
ein @code{plain-file} zu einem Store-Objekt heruntergebrochen wird. Das wird
mit der monadischen Prozedur @code{lower-object} bewerkstelligt.

@deffn {Monadische Prozedur} lower-object @var{Objekt} [@var{System}] @
           [#:target #f] Return as a value in @code{%store-monad} the derivation or
store item corresponding to @var{obj} for @var{system}, cross-compiling for
@var{target} if @var{target} is true.  @var{obj} must be an object that has
an associated gexp compiler, such as a @code{<package>}.
@end deffn

@node Aufruf von guix repl
@section @command{guix repl} aufrufen

@cindex REPL (Lese-Auswerten-Schreiben-Schleife)
Der Befehl @command{guix repl} startet eine Guile-REPL (@dfn{Read-Eval-Print
Loop}, kurz REPL, deutsch Lese-Auswerten-Schreiben-Schleife) zur
interaktiven Programmierung (siehe @ref{Using Guile Interactively,,, guile,
GNU Guile Reference Manual}). Im Vergleich dazu, einfach den Befehl
@command{guile} aufzurufen, garantiert @command{guix repl}, dass alle
Guix-Module und deren Abhängigkeiten im Suchpfad verfügbar sind. Sie können
die REPL so benutzen:

@example
$ guix repl
scheme@@(guile-user)> ,use (gnu packages base)
scheme@@(guile-user)> coreutils
$1 = #<package coreutils@@8.29 gnu/packages/base.scm:327 3e28300>
@end example

@cindex Untergeordnete
@command{guix repl} implementiert zusätzlich ein einfaches maschinenlesbares
Protokoll für die REPL, das von @code{(guix inferior)} benutzt wird, um mit
@dfn{Untergeordneten} zu interagieren, also mit getrennten Prozessen einer
womöglich anderen Version von Guix.

Folgende @var{Optionen} gibt es:

@table @code
@item --type=@var{Typ}
@itemx -t @var{Typ}
Startet eine REPL des angegebenen @var{Typ}s, der einer der Folgenden sein
darf:

@table @code
@item guile
Die Voreinstellung, mit der eine normale, voll funktionsfähige Guile-REPL
gestartet wird.
@item machine
Startet eine REPL, die ein maschinenlesbares Protokoll benutzt. Dieses
Protokoll wird vom Modul @code{(guix inferior)} gesprochen.
@end table

@item --listen=@var{Endpunkt}
Der Vorgabe nach würde @command{guix repl} von der Standardeingabe lesen und
auf die Standardausgabe schreiben. Wird diese Befehlszeilenoption angegeben,
lauscht die REPL stattdessen auf dem @var{Endpunkt} auf Verbindungen. Hier
sind Beispiele gültiger Befehlszeilenoptionen:

@table @code
@item --listen=tcp:37146
Verbindungen mit dem „localhost“ auf Port 37146 akzeptieren.

@item --listen=unix:/tmp/socket
Verbindungen zum Unix-Socket @file{/tmp/socket} akzeptieren.
@end table

@item --load-path=@var{Verzeichnis}
@itemx -L @var{Verzeichnis}
Das @var{Verzeichnis} vorne an den Suchpfad für Paketmodule anfügen (siehe
@ref{Paketmodule}).

Damit können Nutzer dafür sorgen, dass ihre eigenen selbstdefinierten Pakete
für das Befehlszeilenwerkzeug sichtbar sind.

@item -q
Das Laden der @file{~/.guile}-Datei unterdrücken. Nach Voreinstellung würde
diese Konfigurationsdatei beim Erzeugen einer REPL für @code{guile} geladen.
@end table

@c *********************************************************************
@node Zubehör
@chapter Zubehör

Dieser Abschnitt beschreibt die Befehlszeilenwerkzeuge von Guix. Manche
davon richten sich hauptsächlich an Entwickler und solche Nutzer, die neue
Paketdefinitionen schreiben, andere sind auch für ein breiteres Publikum
nützlich. Sie ergänzen die Scheme-Programmierschnittstelle um bequeme
Befehle.

@menu
* Aufruf von guix build::    Pakete aus der Befehlszeile heraus erstellen.
* Aufruf von guix edit::     Paketdefinitionen bearbeiten.
* Aufruf von guix download::  Herunterladen einer Datei und Ausgabe ihres 
                                Hashes.
* Aufruf von guix hash::     Den kryptografischen Hash einer Datei 
                               berechnen.
* Aufruf von guix import::   Paketdefinitionen importieren.
* Aufruf von guix refresh::  Paketdefinitionen aktualisieren.
* Aufruf von guix lint::     Fehler in Paketdefinitionen finden.
* Aufruf von guix size::     Plattenplatzverbrauch profilieren.
* Aufruf von guix graph::    Den Paketgraphen visualisieren.
* Aufruf von guix publish::  Substitute teilen.
* Aufruf von guix challenge::  Die Substitut-Server anfechten.
* Aufruf von guix copy::     Mit einem entfernten Store Dateien austauschen.
* Aufruf von guix container::  Prozesse isolieren.
* Aufruf von guix weather::  Die Verfügbarkeit von Substituten 
                               einschätzen.
* Aufruf von guix processes::  Auflisten der Client-Prozesse
@end menu

@node Aufruf von guix build
@section Aufruf von @command{guix build}

@cindex Paketerstellung
@cindex @command{guix build}
Der Befehl @command{guix build} lässt Pakete oder Ableitungen samt ihrer
Abhängigkeiten erstellen und gibt die resultierenden Pfade im Store
aus. Beachten Sie, dass das Nutzerprofil dadurch nicht modifiziert wird —
eine solche Installation bewirkt der Befehl @command{guix package} (siehe
@ref{Aufruf von guix package}). @command{guix build} wird also hauptsächlich
von Entwicklern der Distribution benutzt.

Die allgemeine Syntax lautet:

@example
guix build @var{Optionen} @var{Paket-oder-Ableitung}…
@end example

Zum Beispiel wird mit folgendem Befehl die neueste Version von Emacs und von
Guile erstellt, das zugehörige Erstellungsprotokoll angezeigt und
letztendlich werden die resultierenden Verzeichnisse ausgegeben:

@example
guix build emacs guile
@end example

Folgender Befehl erstellt alle Pakete, die zur Verfügung stehen:

@example
guix build --quiet --keep-going \
  `guix package -A | cut -f1,2 --output-delimiter=@@`
@end example

Als @var{Paket-oder-Ableitung} muss entweder der Name eines in der
Software-Distribution zu findenden Pakets, wie etwa @code{coreutils} oder
@code{coreutils@@8.20}, oder eine Ableitung wie
@file{/gnu/store/…-coreutils-8.19.drv} sein. Im ersten Fall wird nach einem
Paket mit entsprechendem Namen (und optional der entsprechenden Version) in
den Modulen der GNU-Distribution gesucht (siehe @ref{Paketmodule}).

Alternatively, the @option{--expression} option may be used to specify a
Scheme expression that evaluates to a package; this is useful when
disambiguating among several same-named packages or package variants is
needed.

Null oder mehr @var{Optionen} können angegeben werden. Zur Verfügung stehen
die in den folgenden Unterabschnitten beschriebenen Befehlszeilenoptionen.

@menu
* Gemeinsame Erstellungsoptionen::  Erstellungsoptionen für die meisten 
                                      Befehle.
* Paketumwandlungsoptionen::  Varianten von Paketen erzeugen.
* Zusätzliche Erstellungsoptionen::  Optionen spezifisch für „guix 
                                        build“.
* Fehlschläge beim Erstellen untersuchen::  Praxiserfahrung bei der 
                                               Paketerstellung.
@end menu

@node Gemeinsame Erstellungsoptionen
@subsection Gemeinsame Erstellungsoptionen

Einige dieser Befehlszeilenoptionen zur Steuerung des Erstellungsprozess
haben @command{guix build} und andere Befehle, mit denen Erstellungen
ausgelöst werden können, wie @command{guix package} oder @command{guix
archive}, gemeinsam. Das sind folgende:

@table @code

@item --load-path=@var{Verzeichnis}
@itemx -L @var{Verzeichnis}
Das @var{Verzeichnis} vorne an den Suchpfad für Paketmodule anfügen (siehe
@ref{Paketmodule}).

Damit können Nutzer dafür sorgen, dass ihre eigenen selbstdefinierten Pakete
für die Befehlszeilenwerkzeuge sichtbar sind.

@item --keep-failed
@itemx -K
Den Verzeichnisbaum, in dem fehlgeschlagene Erstellungen durchgeführt
wurden, behalten. Wenn also eine Erstellung fehlschlägt, bleibt ihr
Erstellungsbaum in @file{/tmp} erhalten. Der Name dieses Unterverzeichnisses
wird am Ende dem Erstellungsprotokolls ausgegeben. Dies hilft bei der Suche
nach Fehlern in Erstellungen. Der Abschnitt @ref{Fehlschläge beim Erstellen untersuchen}
zeigt Ihnen Hinweise und Tricks, wie Erstellungsfehler untersucht werden
können.

This option implies @option{--no-offload}, and it has no effect when
connecting to a remote daemon with a @code{guix://} URI (@pxref{Der Store,
the @env{GUIX_DAEMON_SOCKET} variable}).

@item --keep-going
@itemx -k
Weitermachen, auch wenn ein Teil der Erstellungen fehlschlägt. Das bedeutet,
dass der Befehl erst terminiert, wenn alle Erstellungen erfolgreich oder mit
Fehler durchgeführt wurden.

Das normale Verhalten ist, abzubrechen, sobald eine der angegebenen
Ableitungen fehlschlägt.

@item --dry-run
@itemx -n
Die Ableitungen nicht erstellen.

@anchor{fallback-option}
@item --fallback
Wenn das Substituieren vorerstellter Binärdateien fehlschlägt, diese
ersatzweise lokal selbst erstellen (siehe @ref{Fehler bei der Substitution}).

@item --substitute-urls=@var{URLs}
@anchor{client-substitute-urls}
Die @var{urls} als durch Leerraumzeichen getrennte Liste von Quell-URLs für
Substitute anstelle der vorgegebenen URL-Liste für den @command{guix-daemon}
verwenden (siehe @ref{daemon-substitute-urls,, @command{guix-daemon} URLs}).

Das heißt, die Substitute dürfen von den @var{urls} heruntergeladen werden,
sofern sie mit einem durch den Systemadministrator autorisierten Schlüssel
signiert worden sind (siehe @ref{Substitute}).

Wenn als @var{urls} eine leere Zeichenkette angegeben wurde, verhält es
sich, als wären Substitute abgeschaltet.

@item --no-substitutes
Benutze keine Substitute für Erstellungsergebnisse. Das heißt, dass alle
Objekte lokal erstellt werden müssen, und kein Herunterladen von vorab
erstellten Binärdateien erlaubt ist (siehe @ref{Substitute}).

@item --no-grafts
Pakete nicht „veredeln“ (engl. „graft“). Praktisch heißt das, dass als
Veredelungen verfügbare Paketaktualisierungen nicht angewandt werden. Der
Abschnitt @ref{Sicherheitsaktualisierungen} hat weitere Informationen zu Veredelungen.

@item --rounds=@var{n}
Jede Ableitung @var{n}-mal nacheinander erstellen und einen Fehler melden,
wenn die aufeinanderfolgenden Erstellungsergebnisse nicht Bit für Bit
identisch sind.

Das ist eine nützliche Methode, um nicht-deterministische
Erstellungsprozesse zu erkennen. Nicht-deterministische Erstellungsprozesse
sind ein Problem, weil Nutzer dadurch praktisch nicht @emph{verifizieren}
können, ob von Drittanbietern bereitgestellte Binärdateien echt sind. Der
Abschnitt @ref{Aufruf von guix challenge} erklärt dies genauer.

Beachten Sie, dass die sich unterscheidenden Erstellungsergebnisse nicht
erhalten bleiben, so dass Sie eventuelle Fehler manuell untersuchen müssen,
z.B.@: indem Sie eines oder mehrere der Erstellungsergebnisse @code{guix
archive --export} auslagern (siehe @ref{Aufruf von guix archive}), dann neu
erstellen und letztlich die beiden Erstellungsergebnisse vergleichen.

@item --no-offload
Nicht versuchen, an andere Maschinen ausgelagerte Erstellungen zu benutzen
(siehe @ref{Auslagern des Daemons einrichten}). Somit wird lokal erstellt, statt
Erstellungen auf entfernte Maschinen auszulagern.

@item --max-silent-time=@var{Sekunden}
Wenn der Erstellungs- oder Substitutionsprozess länger als
@var{Sekunden}-lang keine Ausgabe erzeugt, wird er abgebrochen und ein
Fehler beim Erstellen gemeldet.

By default, the daemon's setting is honored (@pxref{Aufruf des guix-daemon,
@option{--max-silent-time}}).

@item --timeout=@var{Sekunden}
Entsprechend wird hier der Erstellungs- oder Substitutionsprozess
abgebrochen und als Fehlschlag gemeldet, wenn er mehr als
@var{Sekunden}-lang dauert.

By default, the daemon's setting is honored (@pxref{Aufruf des guix-daemon,
@option{--timeout}}).

@c Note: This option is actually not part of %standard-build-options but
@c most programs honor it.
@cindex Ausführlichkeit der Befehlszeilenwerkzeuge
@cindex Erstellungsprotokolle, Ausführlichkeit
@item -v @var{Stufe}
@itemx --verbosity=@var{Stufe}
Die angegebene Ausführlichkeitsstufe verwenden. Als @var{Stufe} muss eine
ganze Zahl angegeben werden. Wird 0 gewählt, wird keine Ausgabe zur
Fehlersuche angezeigt, 1 bedeutet eine knappe Ausgabe und 2 lässt alle
Erstellungsprotokollausgaben auf die Standardfehlerausgabe schreiben.

@item --cores=@var{n}
@itemx -c @var{n}
Die Nutzung von bis zu @var{n} Prozessorkernen für die Erstellungen
gestatten. Der besondere Wert @code{0} bedeutet, dass so viele wie möglich
benutzt werden.

@item --max-jobs=@var{n}
@itemx -M @var{n}
Allow at most @var{n} build jobs in parallel.  @xref{Aufruf des guix-daemon,
@option{--max-jobs}}, for details about this option and the equivalent
@command{guix-daemon} option.

@item --debug=@var{Stufe}
Ein Protokoll zur Fehlersuche ausgeben, das vom Erstellungsdaemon kommt. Als
@var{Stufe} muss eine ganze Zahl zwischen 0 und 5 angegeben werden; höhere
Zahlen stehen für ausführlichere Ausgaben. Stufe 4 oder höher zu wählen,
kann bei der Suche nach Fehlern, wie der Erstellungs-Daemon eingerichtet
ist, helfen.

@end table

Intern ist @command{guix build} im Kern eine Schnittstelle zur Prozedur
@code{package-derivation} aus dem Modul @code{(guix packages)} und zu der
Prozedur @code{build-derivations} des Moduls @code{(guix derivations)}.

In addition to options explicitly passed on the command line, @command{guix
build} and other @command{guix} commands that support building honor the
@env{GUIX_BUILD_OPTIONS} environment variable.

@defvr {Umgebungsvariable} GUIX_BUILD_OPTIONS
Nutzer können diese Variable auf eine Liste von Befehlszeilenoptionen
definieren, die automatisch von @command{guix build} und anderen
@command{guix}-Befehlen, die Erstellungen durchführen lassen, benutzt wird,
wie in folgendem Beispiel:

@example
$ export GUIX_BUILD_OPTIONS="--no-substitutes -c 2 -L /foo/bar"
@end example

Diese Befehlszeilenoptionen werden unabhängig von den auf der Befehlszeile
übergebenen Befehlszeilenoptionen grammatikalisch analysiert und das
Ergebnis an die bereits analysierten auf der Befehlszeile übergebenen
Befehlszeilenoptionen angehängt.
@end defvr


@node Paketumwandlungsoptionen
@subsection Paketumwandlungsoptionen

@cindex Paketvarianten
Eine weitere Gruppe von Befehlszeilenoptionen, die @command{guix build} und
auch @command{guix package} unterstützen, sind
@dfn{Paketumwandlungsoptionen}. Diese Optionen ermöglichen es,
@dfn{Paketvarianten} zu definieren — zum Beispiel können Pakete aus einem
anderen Quellcode als normalerweise erstellt werden. Damit ist es leicht,
angepasste Pakete schnell zu erstellen, ohne die vollständigen Definitionen
von Paketvarianten einzutippen (siehe @ref{Pakete definieren}).

@table @code

@item --with-source=@var{Quelle}
@itemx --with-source=@var{Paket}=@var{Quelle}
@itemx --with-source=@var{Paket}@@@var{Version}=@var{Quelle}
Den Paketquellcode für das @var{Paket} von der angegebenen @var{Quelle}
holen und die @var{Version} als seine Versionsnummer verwenden. Die
@var{Quelle} muss ein Dateiname oder eine URL sein wie bei @command{guix
download} (siehe @ref{Aufruf von guix download}).

Wird kein @var{Paket} angegeben, wird als Paketname derjenige auf der
Befehlszeile angegebene Paketname angenommen, der zur Basis am Ende der
@var{Quelle} passt — wenn z.B.@: als @var{Quelle} die Datei
@code{/src/guile-2.0.10.tar.gz} angegeben wurde, entspricht das dem
@code{guile}-Paket.

Ebenso wird, wenn keine @var{Version} angegeben wurde, die Version als
Zeichenkette aus der @var{Quelle} abgeleitet; im vorherigen Beispiel wäre
sie @code{2.0.10}.

Mit dieser Option können Nutzer versuchen, eine andere Version ihres Pakets
auszuprobieren, als die in der Distribution enthaltene Version. Folgendes
Beispiel lädt @file{ed-1.7.tar.gz} von einem GNU-Spiegelserver herunter und
benutzt es als Quelle für das @code{ed}-Paket:

@example
guix build ed --with-source=mirror://gnu/ed/ed-1.7.tar.gz
@end example

As a developer, @option{--with-source} makes it easy to test release
candidates:

@example
guix build guile --with-source=../guile-2.0.9.219-e1bb7.tar.xz
@end example

…@: oder ein Checkout eines versionskontrollierten Repositorys in einer
isolierten Umgebung zu erstellen:

@example
$ git clone git://git.sv.gnu.org/guix.git
$ guix build guix --with-source=guix@@1.0=./guix
@end example

@item --with-input=@var{Paket}=@var{Ersatz}
Abhängigkeiten vom @var{Paket} durch eine Abhängigkeit vom
@var{Ersatz}-Paket ersetzen. Als @var{Paket} muss ein Paketname angegeben
werden und als @var{Ersatz} eine Paketspezifikation wie @code{guile} oder
@code{guile@@1.8}.

Mit folgendem Befehl wird zum Beispiel Guix erstellt, aber statt der
aktuellen stabilen Guile-Version hängt es von der alten Guile-Version
@code{guile@@2.0} ab:

@example
guix build --with-input=guile=guile@@2.0 guix
@end example

Die Ersetzung ist rekursiv und umfassend. In diesem Beispiel würde nicht nur
@code{guix}, sondern auch seine Abhängigkeit @code{guile-json} (was auch von
@code{guile} abhängt) für @code{guile@@2.0} neu erstellt.

Implementiert wird das alles mit der Scheme-Prozedur
@code{package-input-rewriting} (siehe @ref{Pakete definieren,
@code{package-input-rewriting}}).

@item --with-graft=@var{Paket}=@var{Ersatz}
This is similar to @option{--with-input} but with an important difference:
instead of rebuilding the whole dependency chain, @var{replacement} is built
and then @dfn{grafted} onto the binaries that were initially referring to
@var{package}.  @xref{Sicherheitsaktualisierungen}, for more information on grafts.

Zum Beispiel veredelt folgender Befehl Wget und alle Abhängigkeiten davon
mit der Version 3.5.4 von GnuTLS, indem Verweise auf die ursprünglich
verwendete GnuTLS-Version ersetzt werden:

@example
guix build --with-graft=gnutls=gnutls@@3.5.4 wget
@end example

Das hat den Vorteil, dass es viel schneller geht, als alles neu zu
erstellen. Die Sache hat aber einen Haken: Veredelung funktioniert nur, wenn
das @var{Paket} und sein @var{Ersatz} miteinander streng kompatibel sind —
zum Beispiel muss, wenn diese eine Programmbibliothek zur Verfügung stellen,
deren Binärschnittstelle („Application Binary Interface“, kurz ABI)
kompatibel sein. Wenn das @var{Ersatz}-Paket auf irgendeine Art inkompatibel
mit dem @var{Paket} ist, könnte das Ergebnispaket unbrauchbar sein. Vorsicht
ist also geboten!

@item --with-git-url=@var{Paket}=@var{URL}
@cindex Git, den neuesten Commit benutzen
@cindex neuester Commit, davon erstellen
Das @var{Paket} aus dem neuesten Commit im @code{master}-Branch des unter
der @var{URL} befindlichen Git-Repositorys erstellen. Git-Submodule des
Repositorys werden dabei rekursiv geladen.

Zum Beispiel erstellt der folgende Befehl die NumPy-Python-Bibliothek unter
Verwendung des neuesten Commits von Python auf dessen „master“-Branch.

@example
guix build python-numpy \
  --with-git-url=python=https://github.com/python/cpython
@end example

This option can also be combined with @option{--with-branch} or
@option{--with-commit} (see below).

@cindex Kontinuierliche Integration
Da es den neuesten Commit auf dem verwendeten Branch benutzt, ändert sich
das Ergebnis natürlich mit der Zeit. Nichtsdestoweniger ist es eine bequeme
Möglichkeit, ganze Softwarestapel auf dem neuesten Commit von einem oder
mehr Paketen aufbauen zu lassen. Es ist besonders nützlich im Kontext
Kontinuierlicher Integration (englisch „Continuous Integration“, kurz CI).

Checkouts bleiben zwischengespeichert als @file{~/.cache/guix/checkouts},
damit danach schneller auf dasselbe Repository zugegriffen werden
kann. Eventuell möchten Sie das Verzeichnis ab und zu bereinigen, um
Plattenplatz zu sparen.

@item --with-branch=@var{Paket}=@var{Branch}
Build @var{package} from the latest commit of @var{branch}.  If the
@code{source} field of @var{package} is an origin with the @code{git-fetch}
method (@pxref{„origin“-Referenz}) or a @code{git-checkout} object, the
repository URL is taken from that @code{source}.  Otherwise you have to use
@option{--with-git-url} to specify the URL of the Git repository.

Zum Beispiel wird mit dem folgenden Befehl @code{guile-sqlite3} aus dem
neuesten Commit seines @code{master}-Branches erstellt und anschließend
@code{guix} (was von @code{guile-sqlite3} abhängt) und @code{cuirass} (was
von @code{guix} abhängt) unter Nutzung genau dieser
@code{guile-sqlite3}-Erstellung erstellt:

@example
guix build --with-branch=guile-sqlite3=master cuirass
@end example

@item --with-commit=@var{Paket}=@var{Commit}
This is similar to @option{--with-branch}, except that it builds from
@var{commit} rather than the tip of a branch.  @var{commit} must be a valid
Git commit SHA1 identifier or a tag.
@end table

@node Zusätzliche Erstellungsoptionen
@subsection Zusätzliche Erstellungsoptionen

Die unten aufgeführten Befehlszeilenoptionen funktionieren nur mit
@command{guix build}.

@table @code

@item --quiet
@itemx -q
Build quietly, without displaying the build log; this is equivalent to
@option{--verbosity=0}.  Upon completion, the build log is kept in
@file{/var} (or similar) and can always be retrieved using the
@option{--log-file} option.

@item --file=@var{Datei}
@itemx -f @var{Datei}
Das Paket, die Ableitung oder das dateiähnliche Objekt erstellen, zu dem der
Code in der @var{Datei} ausgewertet wird (siehe @ref{G-Ausdrücke,
dateiartige Objekte}).

Zum Beispiel könnte in der @var{Datei} so eine Paketdefinition stehen (siehe
@ref{Pakete definieren}):

@lisp
@include package-hello.scm
@end lisp

The @var{file} may also contain a JSON representation of one or more package
definitions.  Running @code{guix build -f} on @file{hello.json} with the
following contents would result in building the packages @code{myhello} and
@code{greeter}:

@example
@verbatiminclude package-hello.json
@end example

@item --manifest=@var{Manifest}
@itemx -m @var{Manifest}
Alle Pakete erstellen, die im angegebenen @var{Manifest} stehen (siehe
@ref{profile-manifest, @option{--manifest}}).

@item --expression=@var{Ausdruck}
@itemx -e @var{Ausdruck}
Das Paket oder die Ableitung erstellen, zu der der @var{Ausdruck}
ausgewertet wird.

Zum Beispiel kann der @var{Ausdruck} @code{(@@ (gnu packages guile)
guile-1.8)} sein, was diese bestimmte Variante der Version 1.8 von Guile
eindeutig bezeichnet.

Alternativ kann der @var{Ausdruck} ein G-Ausdruck sein. In diesem Fall wird
er als Erstellungsprogramm an @code{gexp->derivation} übergeben (siehe
@ref{G-Ausdrücke}).

Zudem kann der @var{Ausdruck} eine monadische Prozedur mit null Argumenten
bezeichnen (siehe @ref{Die Store-Monade}). Die Prozedur muss eine Ableitung
als monadischen Wert zurückliefern, die dann durch @code{run-with-store}
laufen gelassen wird.

@item --source
@itemx -S
Die Quellcode-Ableitung der Pakete statt die Pakete selbst erstellen.

Zum Beispiel liefert @code{guix build -S gcc} etwas in der Art von
@file{/gnu/store/…-gcc-4.7.2.tar.bz2}, also den Tarball mit dem
GCC-Quellcode.

Der gelieferte Quell-Tarball ist das Ergebnis davon, alle Patches und
Code-Schnipsel aufzuspielen, die im @code{origin}-Objekt des Pakets
festgelegt wurden (siehe @ref{Pakete definieren}).

Beachten Sie, dass @command{guix build -S} nur für die angegebenen Pakete
den Quellcode herunterlädt. Dazu gehört @emph{nicht} der Quellcode statisch
gebundener Abhängigkeiten und der Quellcode alleine reicht nicht aus, um die
Pakete zu reproduzieren.

@item --sources
Fetch and return the source of @var{package-or-derivation} and all their
dependencies, recursively.  This is a handy way to obtain a local copy of
all the source code needed to build @var{packages}, allowing you to
eventually build them even without network access.  It is an extension of
the @option{--source} option and can accept one of the following optional
argument values:

@table @code
@item package
This value causes the @option{--sources} option to behave in the same way as
the @option{--source} option.

@item all
Erstellt die Quellcode-Ableitungen aller Pakete einschließlich allen
Quellcodes, der als Teil der Eingaben im @code{inputs}-Feld aufgelistet
ist. Dies ist der vorgegebene Wert, wenn sonst keiner angegeben wird.

@example
$ guix build --sources tzdata
Folgende Ableitungen werden erstellt:
   /gnu/store/…-tzdata2015b.tar.gz.drv
   /gnu/store/…-tzcode2015b.tar.gz.drv
@end example

@item transitive
Die Quellcode-Ableitungen aller Pakete sowie aller transitiven Eingaben der
Pakete erstellen. Damit kann z.B.@: Paket-Quellcode vorab heruntergeladen
und später offline erstellt werden.

@example
$ guix build --sources=transitive tzdata
Folgende Ableitungen werden erstellt:
   /gnu/store/…-tzcode2015b.tar.gz.drv
   /gnu/store/…-findutils-4.4.2.tar.xz.drv
   /gnu/store/…-grep-2.21.tar.xz.drv
   /gnu/store/…-coreutils-8.23.tar.xz.drv
   /gnu/store/…-make-4.1.tar.xz.drv
   /gnu/store/…-bash-4.3.tar.xz.drv
…
@end example

@end table

@item --system=@var{System}
@itemx -s @var{System}
Versuchen, für das angegebene @var{System} — z.B.@: @code{i686-linux} —
statt für denselben Systemtyp wie auf dem Wirtssystem zu erstellen. Beim
Befehl @command{guix build} können Sie diese Befehlszeilenoption mehrmals
wiederholen, wodurch für jedes angegebene System eine Erstellung
durchgeführt wird; andere Befehle ignorieren überzählige
@option{-s}-Befehlszeilenoptionen.

@quotation Anmerkung
The @option{--system} flag is for @emph{native} compilation and must not be
confused with cross-compilation.  See @option{--target} below for
information on cross-compilation.
@end quotation

An example use of this is on Linux-based systems, which can emulate
different personalities.  For instance, passing @option{--system=i686-linux}
on an @code{x86_64-linux} system or @option{--system=armhf-linux} on an
@code{aarch64-linux} system allows you to build packages in a complete
32-bit environment.

@quotation Anmerkung
Das Erstellen für ein @code{armhf-linux}-System ist ungeprüft auf allen
@code{aarch64-linux}-Maschinen aktiviert, obwohl bestimmte aarch64-Chipsätze
diese Funktionalität nicht unterstützen, darunter auch ThunderX.
@end quotation

Ebenso können Sie, wenn transparente Emulation mit QEMU und
@code{binfmt_misc} aktiviert sind (siehe @ref{Virtualisierungsdienste,
@code{qemu-binfmt-service-type}}), für jedes System Erstellungen
durchführen, für das ein QEMU-@code{binfmt_misc}-Handler installiert ist.

Erstellungen für ein anderes System, das nicht dem System der Maschine, die
Sie benutzen, entspricht, können auch auf eine entfernte Maschine mit der
richtigen Architektur ausgelagert werden. Siehe @ref{Auslagern des Daemons einrichten}
für mehr Informationen über das Auslagern.

@item --target=@var{Tripel}
@cindex Cross-Kompilieren
Cross-build for @var{triplet}, which must be a valid GNU triplet, such as
@code{"aarch64-linux-gnu"} (@pxref{Specifying Target Triplets, GNU
configuration triplets,, autoconf, Autoconf}).

@anchor{build-check}
@item --check
@cindex Determinismus, Überprüfung
@cindex Reproduzierbarkeit, Überprüfung
@var{Paket-oder-Ableitung} erneut erstellen, wenn diese bereits im Store
verfügbar ist, und einen Fehler melden, wenn die Erstellungsergebnisse nicht
Bit für Bit identisch sind.

Mit diesem Mechanismus können Sie überprüfen, ob zuvor installierte
Substitute unverfälscht sind (siehe @ref{Substitute}) oder auch ob das
Erstellungsergebnis eines Pakets deterministisch ist. Siehe @ref{Aufruf von guix challenge} für mehr Hintergrundinformationen und Werkzeuge.

Wenn dies zusammen mit @option{--keep-failed} benutzt wird, bleiben die sich
unterscheidenden Ausgaben im Store unter dem Namen
@file{/gnu/store/…-check}. Dadurch können Unterschiede zwischen den beiden
Ergebnissen leicht erkannt werden.

@item --repair
@cindex Reparieren von Store-Objekten
@cindex Datenbeschädigung, Behebung
Versuchen, die angegebenen Store-Objekte zu reparieren, wenn sie beschädigt
sind, indem sie neu heruntergeladen oder neu erstellt werden.

Diese Operation ist nicht atomar und nur der Administratornutzer @code{root}
kann sie verwenden.

@item --derivations
@itemx -d
Liefert die Ableitungspfade und @emph{nicht} die Ausgabepfade für die
angegebenen Pakete.

@item --root=@var{Datei}
@itemx -r @var{Datei}
@cindex GC-Wurzeln, Hinzufügen
@cindex Müllsammlerwurzeln, Hinzufügen
Die @var{Datei} zu einer symbolischen Verknüpfung auf das Ergebnis machen
und als Müllsammlerwurzel registrieren.

Dadurch wird das Ergebnis dieses Aufrufs von @command{guix build} vor dem
Müllsammler geschützt, bis die @var{Datei} gelöscht wird. Wird diese
Befehlszeilenoption @emph{nicht} angegeben, können Erstellungsergebnisse vom
Müllsammler geholt werden, sobald die Erstellung abgeschlossen ist. Siehe
@ref{Aufruf von guix gc} für mehr Informationen zu Müllsammlerwurzeln.

@item --log-file
@cindex Erstellungsprotokolle, Zugriff
Liefert die Dateinamen oder URLs der Erstellungsprotokolle für das
angegebene @var{Paket-oder-Ableitung} oder meldet einen Fehler, falls
Protokolldateien fehlen.

Dies funktioniert, egal wie die Pakete oder Ableitungen angegeben
werden. Zum Beispiel sind folgende Aufrufe alle äquivalent:

@example
guix build --log-file `guix build -d guile`
guix build --log-file `guix build guile`
guix build --log-file guile
guix build --log-file -e '(@@ (gnu packages guile) guile-2.0)'
@end example

If a log is unavailable locally, and unless @option{--no-substitutes} is
passed, the command looks for a corresponding log on one of the substitute
servers (as specified with @option{--substitute-urls}).

Stellen Sie sich zum Beispiel vor, sie wollten das Erstellungsprotokoll von
GDB auf einem MIPS-System sehen, benutzen aber selbst eine
@code{x86_64}-Maschine:

@example
$ guix build --log-file gdb -s aarch64-linux
https://@value{SUBSTITUTE-SERVER}/log/@dots{}-gdb-7.10
@end example

So haben Sie umsonst Zugriff auf eine riesige Bibliothek von
Erstellungsprotokollen!
@end table

@node Fehlschläge beim Erstellen untersuchen
@subsection Fehlschläge beim Erstellen untersuchen

@cindex Erstellungsfehler, Fehlersuche
Wenn Sie ein neues Paket definieren (siehe @ref{Pakete definieren}), werden
Sie sich vermutlich einige Zeit mit der Fehlersuche beschäftigen und die
Erstellung so lange anpassen, bis sie funktioniert. Dazu müssen Sie die
Erstellungsbefehle selbst in einer Umgebung benutzen, die der, die der
Erstellungsdaemon aufbaut, so ähnlich wie möglich ist.

To that end, the first thing to do is to use the @option{--keep-failed} or
@option{-K} option of @command{guix build}, which will keep the failed build
tree in @file{/tmp} or whatever directory you specified as @env{TMPDIR}
(@pxref{Aufruf von guix build, @option{--keep-failed}}).

Im Anschluss können Sie mit @command{cd} in die Verzeichnisse dieses
fehlgeschlagenen Erstellungsbaums wechseln und mit @command{source} dessen
@file{environment-variables}-Datei laden, die alle
Umgebungsvariablendefinitionen enthält, die zum Zeitpunkt des Fehlschlags
der Erstellung galten. Sagen wir, Sie suchen Fehler in einem Paket
@code{foo}, dann würde eine typische Sitzung so aussehen:

@example
$ guix build foo -K
…@: @i{Erstellung schlägt fehl}
$ cd /tmp/guix-build-foo.drv-0
$ source ./environment-variables
$ cd foo-1.2
@end example

Nun können Sie Befehle (fast) so aufrufen, als wären Sie der Daemon, und
Fehlerursachen in Ihrem Erstellungsprozess ermitteln.

Manchmal passiert es, dass zum Beispiel die Tests eines Pakets erfolgreich
sind, wenn Sie sie manuell aufrufen, aber scheitern, wenn der Daemon sie
ausführt. Das kann passieren, weil der Daemon Erstellungen in isolierten
Umgebungen („Containern“) durchführt, wo, anders als in der obigen Umgebung,
kein Netzwerkzugang möglich ist, @file{/bin/sh} nicht exisiert usw.@: (siehe
@ref{Einrichten der Erstellungsumgebung}).

In solchen Fällen müssen Sie den Erstellungsprozess womöglich aus einer zu
der des Daemons ähnlichen isolierten Umgebung heraus ausprobieren:

@example
$ guix build -K foo
…
$ cd /tmp/guix-build-foo.drv-0
$ guix environment --no-grafts -C foo --ad-hoc strace gdb
[env]# source ./environment-variables
[env]# cd foo-1.2
@end example

Here, @command{guix environment -C} creates a container and spawns a new
shell in it (@pxref{Aufruf von guix environment}).  The @command{--ad-hoc
strace gdb} part adds the @command{strace} and @command{gdb} commands to the
container, which you may find handy while debugging.  The
@option{--no-grafts} option makes sure we get the exact same environment,
with ungrafted packages (@pxref{Sicherheitsaktualisierungen}, for more info on grafts).

Um der isolierten Umgebung des Erstellungsdaemons noch näher zu kommen,
können wir @file{/bin/sh} entfernen:

@example
[env]# rm /bin/sh
@end example

(Keine Sorge, das ist harmlos: All dies passiert nur in der zuvor von
@command{guix environment} erzeugten Wegwerf-Umgebung.)

Der Befehl @command{strace} befindet sich wahrscheinlich nicht in Ihrem
Suchpfad, aber wir können ihn so benutzen:

@example
[env]# $GUIX_ENVIRONMENT/bin/strace -f -o log make check
@end example

Auf diese Weise haben Sie nicht nur die Umgebungsvariablen, die der Daemon
benutzt, nachgebildet, sondern lassen auch den Erstellungsprozess in einer
isolierten Umgebung ähnlich der des Daemons laufen.


@node Aufruf von guix edit
@section @command{guix edit} aufrufen

@cindex @command{guix edit}
@cindex Paketdefinition, Bearbeiten
So viele Pakete, so viele Quelldateien! Der Befehl @command{guix edit}
erleichtert das Leben von sowohl Nutzern als auch Paketentwicklern, indem er
Ihren Editor anweist, die Quelldatei mit der Definition des jeweiligen
Pakets zu bearbeiten. Zum Beispiel startet dies:

@example
guix edit gcc@@4.9 vim
@end example

@noindent
launches the program specified in the @env{VISUAL} or in the @env{EDITOR}
environment variable to view the recipe of GCC@tie{}4.9.3 and that of Vim.

If you are using a Guix Git checkout (@pxref{Erstellung aus dem Git}), or have
created your own packages on @env{GUIX_PACKAGE_PATH} (@pxref{Paketmodule}), you will be able to edit the package recipes.  In other cases,
you will be able to examine the read-only recipes for packages currently in
the store.

Instead of @env{GUIX_PACKAGE_PATH}, the command-line option
@option{--load-path=@var{directory}} (or in short @option{-L
@var{directory}}) allows you to add @var{directory} to the front of the
package module search path and so make your own packages visible.

@node Aufruf von guix download
@section @command{guix download} aufrufen

@cindex @command{guix download}
@cindex Paketquellcode herunterladen
Wenn Entwickler einer Paketdefinition selbige schreiben, müssen diese
normalerweise einen Quellcode-Tarball herunterladen, seinen SHA256-Hash als
Prüfsumme berechnen und diese in der Paketdefinition eintragen (siehe
@ref{Pakete definieren}). Das Werkzeug @command{guix download} hilft bei
dieser Aufgabe: Damit wird eine Datei von der angegebenen URI
heruntergeladen, in den Store eingelagert und sowohl ihr Dateiname im Store
als auch ihr SHA256-Hash als Prüfsumme angezeigt.

Dadurch, dass die heruntergeladene Datei in den Store eingefügt wird, wird
Bandbreite gespart: Wenn der Entwickler schließlich versucht, das neu
definierte Paket mit @command{guix build} zu erstellen, muss der
Quell-Tarball nicht erneut heruntergeladen werden, weil er sich bereits im
Store befindet. Es ist auch eine bequeme Methode, Dateien temporär
aufzubewahren, die letztlich irgendwann gelöscht werden (siehe @ref{Aufruf von guix gc}).

Der Befehl @command{guix download} unterstützt dieselben URIs, die in
Paketdefinitionen verwendet werden. Insbesondere unterstützt er
@code{mirror://}-URIs. @code{https}-URIs (HTTP über TLS) werden unterstützt,
@emph{vorausgesetzt} die Guile-Anbindungen für GnuTLS sind in der Umgebung
des Benutzers verfügbar; wenn nicht, wird ein Fehler gemeldet. Siehe
@ref{Guile Preparations, how to install the GnuTLS bindings for Guile,,
gnutls-guile, GnuTLS-Guile}, hat mehr Informationen.

@command{guix download} verifies HTTPS server certificates by loading the
certificates of X.509 authorities from the directory pointed to by the
@env{SSL_CERT_DIR} environment variable (@pxref{X.509-Zertifikate}), unless
@option{--no-check-certificate} is used.

Folgende Befehlszeilenoptionen stehen zur Verfügung:

@table @code
@item --hash=@var{algorithm}
@itemx -H @var{algorithm}
Compute a hash using the specified @var{algorithm}.  @xref{Aufruf von guix hash}, for more information.

@item --format=@var{Format}
@itemx -f @var{Format}
Die Hash-Prüfsumme im angegebenen @var{Format} ausgeben. Für weitere
Informationen, was gültige Werte für das @var{Format} sind, siehe
@ref{Aufruf von guix hash}.

@item --no-check-certificate
X.509-Zertifikate von HTTPS-Servern @emph{nicht} validieren.

Wenn Sie diese Befehlszeilenoption benutzen, haben Sie @emph{keinerlei
Garantie}, dass Sie tatsächlich mit dem authentischen Server, der für die
angegebene URL verantwortlich ist, kommunizieren. Das macht Sie anfällig
gegen sogenannte „Man-in-the-Middle“-Angriffe.

@item --output=@var{Datei}
@itemx -o @var{Datei}
Die heruntergeladene Datei @emph{nicht} in den Store, sondern in die
angegebene @var{Datei} abspeichern.
@end table

@node Aufruf von guix hash
@section @command{guix hash} aufrufen

@cindex @command{guix hash}
Der Befehl @command{guix hash} berechnet den SHA256-Hash einer Datei. Er ist
primär ein Werkzeug, dass es bequemer macht, etwas zur Distribution
beizusteuern: Damit wird die kryptografische Hash-Prüfsumme berechnet, die
bei der Definition eines Pakets benutzt werden kann (siehe @ref{Pakete definieren}).

Die allgemeine Syntax lautet:

@example
guix hash @var{Option} @var{Datei}
@end example

Wird als @var{Datei} ein Bindestrich @code{-} angegeben, berechnet
@command{guix hash} den Hash der von der Standardeingabe gelesenen
Daten. @command{guix hash} unterstützt die folgenden Optionen:

@table @code

@item --hash=@var{algorithm}
@itemx -H @var{algorithm}
Compute a hash using the specified @var{algorithm}, @code{sha256} by
default.

@var{algorithm} must the name of a cryptographic hash algorithm supported by
Libgcrypt @i{via} Guile-Gcrypt---e.g., @code{sha512} or @code{sha3-256}
(@pxref{Hash Functions,,, guile-gcrypt, Guile-Gcrypt Reference Manual}).

@item --format=@var{Format}
@itemx -f @var{Format}
Gibt die Prüfsumme im angegebenen @var{Format} aus.

Supported formats: @code{base64}, @code{nix-base32}, @code{base32},
@code{base16} (@code{hex} and @code{hexadecimal} can be used as well).

Wird keine Befehlszeilenoption @option{--format} angegeben, wird
@command{guix hash} die Prüfsumme im @code{nix-base32}-Format
ausgeben. Diese Darstellung wird bei der Definition von Paketen benutzt.

@item --recursive
@itemx -r
Die Prüfsumme der @var{Datei} rekursiv berechnen.

@c FIXME: Replace xref above with xref to an ``Archive'' section when
@c it exists.
In diesem Fall wird die Prüfsumme eines Archivs berechnet, das die
@var{Datei} enthält, und auch ihre Kinder, wenn es sich um ein Verzeichnis
handelt. Einige der Metadaten der @var{Datei} sind Teil dieses Archivs. Zum
Beispiel unterscheidet sich die berechnete Prüfsumme, wenn die @var{Datei}
eine reguläre Datei ist, je nachdem, ob die @var{Datei} ausführbar ist oder
nicht. Metadaten wie der Zeitstempel haben keinen Einfluss auf die Prüfsumme
(siehe @ref{Aufruf von guix archive}).

@item --exclude-vcs
@itemx -x
When combined with @option{--recursive}, exclude version control system
directories (@file{.bzr}, @file{.git}, @file{.hg}, etc.).

@vindex git-fetch
Zum Beispiel würden Sie auf diese Art die Prüfsumme eines Git-Checkouts
berechnen, was nützlich ist, wenn Sie die Prüfsumme für die Methode
@code{git-fetch} benutzen (siehe @ref{„origin“-Referenz}):

@example
$ git clone http://example.org/foo.git
$ cd foo
$ guix hash -rx .
@end example
@end table

@node Aufruf von guix import
@section @command{guix import} aufrufen

@cindex Pakete importieren
@cindex Paketimport
@cindex Pakete an Guix anpassen
@cindex @command{guix import} aufrufen
Der Befehl @command{guix import} ist für Leute hilfreich, die ein Paket
gerne mit so wenig Arbeit wie möglich zur Distribution hinzufügen würden —
ein legitimer Anspruch. Der Befehl kennt ein paar Sammlungen, aus denen mit
ihm Paketmetadaten „importiert“ werden können. Das Ergebnis ist eine
Paketdefinition oder eine Vorlage dafür in dem uns bekannten Format (siehe
@ref{Pakete definieren}).

Die allgemeine Syntax lautet:

@example
guix import @var{Importer} @var{Optionen}…
@end example

Der @var{Importer} gibt die Quelle an, aus der Paketmetadaten importiert
werden, und die @var{Optionen} geben eine Paketbezeichnung und andere vom
@var{Importer} abhängige Daten an.

Manche Importer setzen voraus, dass der Befehl @command{gpgv} ausgeführt
werden kann. Sie funktionieren nur, wenn GnuPG installiert und im
@code{$PATH} enthalten ist; falls nötig können Sie @code{guix install gnupg}
ausführen.

Derzeit sind folgende „Importer“ verfügbar:

@table @code
@item gnu
Metadaten für das angegebene GNU-Paket importieren. Damit wird eine Vorlage
für die neueste Version dieses GNU-Pakets zur Verfügung gestellt,
einschließlich der Prüfsumme seines Quellcode-Tarballs, seiner kanonischen
Zusammenfassung und seiner Beschreibung.

Zusätzliche Informationen wie Paketabhängigkeiten und seine Lizenz müssen
noch manuell ermittelt werden.

Zum Beispiel liefert der folgende Befehl eine Paketdefinition für
GNU@tie{}Hello:

@example
guix import gnu hello
@end example

Speziell für diesen Importer stehen noch folgende Befehlszeilenoptionen zur
Verfügung:

@table @code
@item --key-download=@var{Richtlinie}
As for @command{guix refresh}, specify the policy to handle missing OpenPGP
keys when verifying the package signature.  @xref{Aufruf von guix refresh,
@option{--key-download}}.
@end table

@item pypi
@cindex pypi
Metadaten aus dem @uref{https://pypi.python.org/, Python Package Index}
importieren. Informationen stammen aus der JSON-formatierten Beschreibung,
die unter @code{pypi.python.org} verfügbar ist, und enthalten meistens alle
relevanten Informationen einschließlich der Abhängigkeiten des Pakets. Für
maximale Effizienz wird empfohlen, das Hilfsprogramm @command{unzip} zu
installieren, damit der Importer „Python Wheels“ entpacken und daraus Daten
beziehen kann.

Der folgende Befehl importiert Metadaten für das Python-Paket namens
@code{itsdangerous}:

@example
guix import pypi itsdangerous
@end example

@table @code
@item --recursive
@itemx -r
Den Abhängigkeitsgraphen des angegebenen Pakets beim Anbieter rekursiv
durchlaufen und Paketausdrücke für alle solchen Pakete erzeugen, die es in
Guix noch nicht gibt.
@end table

@item gem
@cindex gem
Metadaten von @uref{https://rubygems.org/, RubyGems}
importieren. Informationen kommen aus der JSON-formatierten Beschreibung,
die auf @code{rubygems.org} verfügbar ist, und enthält die relevantesten
Informationen einschließlich der Laufzeitabhängigkeiten. Dies hat aber auch
Schattenseiten — die Metadaten unterscheiden nicht zwischen
Zusammenfassungen und Beschreibungen, daher wird dieselbe Zeichenkette für
beides eingesetzt. Zudem fehlen Informationen zu nicht in Ruby geschriebenen
Abhängigkeiten, die benötigt werden, um native Erweiterungen zu in Ruby
geschriebenem Code zu erstellen. Diese herauszufinden bleibt dem
Paketentwickler überlassen.

Der folgende Befehl importiert Metadaten aus dem Ruby-Paket @code{rails}.

@example
guix import gem rails
@end example

@table @code
@item --recursive
@itemx -r
Den Abhängigkeitsgraphen des angegebenen Pakets beim Anbieter rekursiv
durchlaufen und Paketausdrücke für alle solchen Pakete erzeugen, die es in
Guix noch nicht gibt.
@end table

@item cpan
@cindex CPAN
Importiert Metadaten von @uref{https://www.metacpan.org/,
MetaCPAN}. Informationen werden aus den JSON-formatierten Metadaten
genommen, die über die @uref{https://fastapi.metacpan.org/,
Programmierschnittstelle („API“) von MetaCPAN} angeboten werden, und
enthalten die relevantesten Informationen wie zum Beispiel
Modulabhängigkeiten. Lizenzinformationen sollten genau nachgeprüft
werden. Wenn Perl im Store verfügbar ist, wird das Werkzeug @code{corelist}
benutzt, um Kernmodule in der Abhängigkeitsliste wegzulassen.

The command command below imports metadata for the Acme::Boolean Perl
module:

@example
guix import cpan Acme::Boolean
@end example

@item cran
@cindex CRAN
@cindex Bioconductor
Metadaten aus dem @uref{https://cran.r-project.org/, CRAN} importieren, der
zentralen Sammlung für die @uref{https://r-project.org, statistische und
grafische Umgebung GNU@tie{}R}.

Information is extracted from the @file{DESCRIPTION} file of the package.

The command command below imports metadata for the Cairo R package:

@example
guix import cran Cairo
@end example

When @option{--recursive} is added, the importer will traverse the
dependency graph of the given upstream package recursively and generate
package expressions for all those packages that are not yet in Guix.

When @option{--archive=bioconductor} is added, metadata is imported from
@uref{https://www.bioconductor.org/, Bioconductor}, a repository of R
packages for for the analysis and comprehension of high-throughput genomic
data in bioinformatics.

Information is extracted from the @file{DESCRIPTION} file contained in the
package archive.

The command below imports metadata for the GenomicRanges R package:

@example
guix import cran --archive=bioconductor GenomicRanges
@end example

Finally, you can also import R packages that have not yet been published on
CRAN or Bioconductor as long as they are in a git repository.  Use
@option{--archive=git} followed by the URL of the git repository:

@example
guix import cran --archive=git https://github.com/immunogenomics/harmony
@end example

@item texlive
@cindex TeX Live
@cindex CTAN
Metadaten aus @uref{https://www.ctan.org/, CTAN}, dem umfassenden
TeX-Archivnetzwerk, herunterladen, was für TeX-Pakete benutzt wird, die Teil
der @uref{https://www.tug.org/texlive/, TeX-Live-Distribution} sind.

Informationen über das Paket werden über die von CTAN angebotene
XML-Programmierschnittstelle bezogen, wohingegen der Quellcode aus dem
SVN-Repository des TeX-Live-Projekts heruntergeladen wird. Das wird so
gemacht, weil CTAN keine versionierten Archive vorhält.

Der folgende Befehl importiert Metadaten für das TeX-Paket @code{fontspec}:

@example
guix import texlive fontspec
@end example

When @option{--archive=@var{directory}} is added, the source code is
downloaded not from the @file{latex} sub-directory of the
@file{texmf-dist/source} tree in the TeX Live SVN repository, but from the
specified sibling @var{directory} under the same root.

Der folgende Befehl importiert Metadaten für das Paket @code{ifxetex} aus
CTAN und lädt die Quelldateien aus dem Verzeichnis
@file{texmf/source/generic}:

@example
guix import texlive --archive=generic ifxetex
@end example

@item json
@cindex JSON, Import
Paketmetadaten aus einer lokalen JSON-Datei importieren. Betrachten Sie
folgende Beispiel-Paketdefinition im JSON-Format:

@example
@{
  "name": "hello",
  "version": "2.10",
  "source": "mirror://gnu/hello/hello-2.10.tar.gz",
  "build-system": "gnu",
  "home-page": "https://www.gnu.org/software/hello/",
  "synopsis": "Hello, GNU world: An example GNU package",
  "description": "GNU Hello prints a greeting.",
  "license": "GPL-3.0+",
  "native-inputs": ["gettext"]
@}
@end example

Die Felder sind genauso benannt wie bei einem @code{<package>}-Verbundstyp
(siehe @ref{Pakete definieren}). Referenzen zu anderen Paketen stehen darin
als JSON-Liste von mit Anführungszeichen quotierten Zeichenketten wie
@code{guile} oder @code{guile@@2.0}.

Der Importer unterstützt auch eine ausdrücklichere Definition der
Quelldateien mit den üblichen Feldern eines @code{<origin>}-Verbunds:

@example
@{
  …
  "source": @{
    "method": "url-fetch",
    "uri": "mirror://gnu/hello/hello-2.10.tar.gz",
    "sha256": @{
      "base32": "0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i"
    @}
  @}
  …
@}
@end example

Der folgende Befehl liest Metadaten aus der JSON-Datei @code{hello.json} und
gibt einen Paketausdruck aus:

@example
guix import json hello.json
@end example

@item nix
Metadaten aus einer lokalen Kopie des Quellcodes der
@uref{https://nixos.org/nixpkgs/, Nixpkgs-Distribution}
importieren@footnote{Dazu wird der Befehl @command{nix-instantiate} von
@uref{https://nixos.org/nix/, Nix} verwendet.}. Paketdefinitionen in Nixpkgs
werden typischerweise in einer Mischung aus der Sprache von Nix und aus
Bash-Code geschrieben. Dieser Befehl wird nur die abstrakte Paketstruktur,
die in der Nix-Sprache geschrieben ist, importieren. Dazu gehören
normalerweise alle grundlegenden Felder einer Paketdefinition.

Beim Importieren eines GNU-Pakets werden Zusammenfassung und Beschreibung
stattdessen durch deren kanonische Variante bei GNU ersetzt.

Normalerweise würden Sie zunächst dies ausführen:

@example
export NIX_REMOTE=daemon
@end example

@noindent
damit @command{nix-instantiate} nicht versucht, die Nix-Datenbank zu öffnen.

Zum Beispiel importiert der Befehl unten die Paketdefinition von LibreOffice
(genauer gesagt importiert er die Definition des an das Attribut
@code{libreoffice} auf oberster Ebene gebundenen Pakets):

@example
guix import nix ~/path/to/nixpkgs libreoffice
@end example

@item hackage
@cindex hackage
Metadaten aus @uref{https://hackage.haskell.org/, Hackage}, dem zentralen
Paketarchiv der Haskell-Gemeinde, importieren. Informationen werden aus
Cabal-Dateien ausgelesen. Darin sind alle relevanten Informationen
einschließlich der Paketabhängigkeiten enthalten.

Speziell für diesen Importer stehen noch folgende Befehlszeilenoptionen zur
Verfügung:

@table @code
@item --stdin
@itemx -s
Eine Cabal-Datei von der Standardeingabe lesen.
@item --no-test-dependencies
@itemx -t
Keine Abhängigkeiten übernehmen, die nur von Testkatalogen benötigt werden.
@item --cabal-environment=@var{Aliste}
@itemx -e @var{Aliste}
@var{Aliste} muss eine assoziative Liste der Scheme-Programmiersprache sein,
die die Umgebung definiert, in der bedingte Ausdrücke von Cabal ausgewertet
werden. Dabei werden folgende Schlüssel akzeptiert: @code{os}, @code{arch},
@code{impl} und eine Zeichenkette, die dem Namen einer Option (einer „Flag“)
entspricht. Der mit einer „Flag“ assoziierte Wert muss entweder das Symbol
@code{true} oder @code{false} sein. Der anderen Schlüsseln zugeordnete Wert
muss mit der Definition des Cabal-Dateiformats konform sein. Der vorgegebene
Wert zu den Schlüsseln @code{os}, @code{arch} and @code{impl} ist jeweils
@samp{linux}, @samp{x86_64} bzw. @samp{ghc}.
@item --recursive
@itemx -r
Den Abhängigkeitsgraphen des angegebenen Pakets beim Anbieter rekursiv
durchlaufen und Paketausdrücke für alle solchen Pakete erzeugen, die es in
Guix noch nicht gibt.
@end table

The command below imports metadata for the latest version of the HTTP
Haskell package without including test dependencies and specifying the value
of the flag @samp{network-uri} as @code{false}:

@example
guix import hackage -t -e "'((\"network-uri\" . false))" HTTP
@end example

Eine ganz bestimmte Paketversion kann optional ausgewählt werden, indem man
nach dem Paketnamen anschließend ein At-Zeichen und eine Versionsnummer
angibt wie in folgendem Beispiel:

@example
guix import hackage mtl@@2.1.3.1
@end example

@item stackage
@cindex stackage
Der @code{stackage}-Importer ist ein Wrapper um den
@code{hackage}-Importer. Er nimmt einen Paketnamen und schaut dafür die
Paketversion nach, die Teil einer @uref{https://www.stackage.org,
Stackage-Veröffentlichung} mit Langzeitunterstützung (englisch „Long-Term
Support“, kurz LTS) ist, deren Metadaten er dann mit dem
@code{hackage}-Importer bezieht. Beachten Sie, dass es Ihre Aufgabe ist,
eine LTS-Veröffentlichung auszuwählen, die mit dem von Guix benutzten
GHC-Compiler kompatibel ist.

Speziell für diesen Importer stehen noch folgende Befehlszeilenoptionen zur
Verfügung:

@table @code
@item --no-test-dependencies
@itemx -t
Keine Abhängigkeiten übernehmen, die nur von Testkatalogen benötigt werden.
@item --lts-version=@var{Version}
@itemx -l @var{Version}
@var{Version} ist die gewünschte Version der LTS-Veröffentlichung. Wird
keine angegeben, wird die neueste benutzt.
@item --recursive
@itemx -r
Den Abhängigkeitsgraphen des angegebenen Pakets beim Anbieter rekursiv
durchlaufen und Paketausdrücke für alle solchen Pakete erzeugen, die es in
Guix noch nicht gibt.
@end table

The command below imports metadata for the HTTP Haskell package included in
the LTS Stackage release version 7.18:

@example
guix import stackage --lts-version=7.18 HTTP
@end example

@item elpa
@cindex elpa
Metadaten aus der Paketsammlung „Emacs Lisp Package Archive“ (ELPA)
importieren (siehe @ref{Packages,,, emacs, The GNU Emacs Manual}).

Speziell für diesen Importer stehen noch folgende Befehlszeilenoptionen zur
Verfügung:

@table @code
@item --archive=@var{Repo}
@itemx -a @var{Repo}
Mit @var{Repo} wird die Archiv-Sammlung (ein „Repository“) bezeichnet, von
dem die Informationen bezogen werden sollen. Derzeit sind die unterstützten
Repositorys und ihre Bezeichnungen folgende:
@itemize -
@item
@uref{https://elpa.gnu.org/packages, GNU}, bezeichnet mit @code{gnu}. Dies
ist die Vorgabe.

Pakete aus @code{elpa.gnu.org} wurden mit einem der Schlüssel im
GnuPG-Schlüsselbund in @file{share/emacs/25.1/etc/package-keyring.gpg} (oder
einem ähnlichen Pfad) des @code{emacs}-Pakets signiert (siehe @ref{Package
Installation, ELPA package signatures,, emacs, The GNU Emacs Manual}).

@item
@uref{https://stable.melpa.org/packages, MELPA-Stable}, bezeichnet mit
@code{melpa-stable}.

@item
@uref{https://melpa.org/packages, MELPA}, bezeichnet mit @code{melpa}.
@end itemize

@item --recursive
@itemx -r
Den Abhängigkeitsgraphen des angegebenen Pakets beim Anbieter rekursiv
durchlaufen und Paketausdrücke für alle solchen Pakete erzeugen, die es in
Guix noch nicht gibt.
@end table

@item crate
@cindex crate
Metadaten aus der Paketsammlung crates.io für Rust importieren
@uref{https://crates.io, crates.io}, wie Sie in diesem Beispiel sehen:

@example
guix import crate blake2-rfc
@end example

Mit dem Crate-Importer können Sie auch eine Version als Zeichenkette
angeben:

@example
guix import crate constant-time-eq@@0.1.0
@end example

Zu den zusätzlichen Optionen gehören:

@table @code
@item --recursive
@itemx -r
Den Abhängigkeitsgraphen des angegebenen Pakets beim Anbieter rekursiv
durchlaufen und Paketausdrücke für alle solchen Pakete erzeugen, die es in
Guix noch nicht gibt.
@end table

@item opam
@cindex OPAM
@cindex OCaml
Metadaten aus der Paketsammlung @uref{https://opam.ocaml.org/, OPAM} der
OCaml-Gemeinde importieren.
@end table

@command{guix import} verfügt über eine modulare Code-Struktur. Mehr
Importer für andere Paketformate zu haben, wäre nützlich, und Ihre Hilfe ist
hierbei gerne gesehen (siehe @ref{Mitwirken}).

@node Aufruf von guix refresh
@section @command{guix refresh} aufrufen

@cindex @command{guix refresh}
Die Zielgruppe des Befehls @command{guix refresh} zum Auffrischen von
Paketen sind in erster Linie Entwickler der GNU-Software-Distribution. Nach
Vorgabe werden damit alle Pakete in der Distribution gemeldet, die nicht der
neuesten Version des Anbieters entsprechen, indem Sie dies ausführen:

@example
$ guix refresh
gnu/packages/gettext.scm:29:13: gettext would be upgraded from 0.18.1.1 to 0.18.2.1
gnu/packages/glib.scm:77:12: glib would be upgraded from 2.34.3 to 2.37.0
@end example

Alternatively, one can specify packages to consider, in which case a warning
is emitted for packages that lack an updater:

@example
$ guix refresh coreutils guile guile-ssh
gnu/packages/ssh.scm:205:2: warning: no updater for guile-ssh
gnu/packages/guile.scm:136:12: guile would be upgraded from 2.0.12 to 2.0.13
@end example

@command{guix refresh} durchsucht die Paketsammlung beim Anbieter jedes
Pakets und bestimmt, was die höchste Versionsnummer ist, zu der es dort eine
Veröffentlichung gibt. Zum Befehl gehören Aktualisierungsprogramme, mit
denen bestimmte Typen von Paketen automatisch aktualisiert werden können:
GNU-Pakete, ELPA-Pakete usw.@: — siehe die Dokumentation von @option{--type}
unten. Es gibt jedoch auch viele Pakete, für die noch keine Methode
enthalten ist, um das Vorhandensein einer neuen Veröffentlichung zu
prüfen. Der Mechanismus ist aber erweiterbar, also können Sie gerne mit uns
in Kontakt treten, wenn Sie eine neue Methode hinzufügen möchten!

@table @code

@item --recursive
Hiermit werden die angegebenen Pakete betrachtet und außerdem alle Pakete,
von denen sie abhängen.

@example
$ guix refresh --recursive coreutils
gnu/packages/acl.scm:35:2: warning: no updater for acl
gnu/packages/m4.scm:30:12: info: 1.4.18 is already the latest version of m4
gnu/packages/xml.scm:68:2: warning: no updater for expat
gnu/packages/multiprecision.scm:40:12: info: 6.1.2 is already the latest version of gmp
…
@end example

@end table

Manchmal unterscheidet sich der vom Anbieter benutzte Name von dem
Paketnamen, der in Guix verwendet wird, so dass @command{guix refresh} etwas
Unterstützung braucht. Die meisten Aktualisierungsprogramme folgen der
Eigenschaft @code{upstream-name} in Paketdefinitionen, die diese
Unterstützung bieten kann.

@lisp
(define-public network-manager
  (package
    (name "network-manager")
    ;; …
    (properties '((upstream-name . "NetworkManager")))))
@end lisp

When passed @option{--update}, it modifies distribution source files to
update the version numbers and source tarball hashes of those package
recipes (@pxref{Pakete definieren}).  This is achieved by downloading each
package's latest source tarball and its associated OpenPGP signature,
authenticating the downloaded tarball against its signature using
@command{gpgv}, and finally computing its hash---note that GnuPG must be
installed and in @code{$PATH}; run @code{guix install gnupg} if needed.

Wenn der öffentliche Schlüssel, mit dem der Tarball signiert wurde, im
Schlüsselbund des Benutzers fehlt, wird versucht, ihn automatisch von einem
Schlüssel-Server zu holen. Wenn das klappt, wird der Schlüssel zum
Schlüsselbund des Benutzers hinzugefügt, ansonsten meldet @command{guix
refresh} einen Fehler.

Die folgenden Befehlszeilenoptionen werden unterstützt:

@table @code

@item --expression=@var{Ausdruck}
@itemx -e @var{Ausdruck}
Als Paket benutzen, wozu der @var{Ausdruck} ausgewertet wird.

Dies ist nützlich, um genau ein bestimmtes Paket zu referenzieren, wie in
diesem Beispiel:

@example
guix refresh -l -e '(@@@@ (gnu packages commencement) glibc-final)'
@end example

This command lists the dependents of the ``final'' libc (essentially all the
packages).

@item --update
@itemx -u
Die Quelldateien der Distribution (die Paketrezepte) werden direkt „in
place“ verändert. Normalerweise führen Sie dies aus einem Checkout des
Guix-Quellbaums heraus aus (siehe @ref{Guix vor der Installation ausführen}):

@example
$ ./pre-inst-env guix refresh -s non-core -u
@end example

Siehe @ref{Pakete definieren} für mehr Informationen zu Paketdefinitionen.

@item --select=[@var{Teilmenge}]
@itemx -s @var{Teilmenge}
Wählt alle Pakete aus der @var{Teilmenge} aus, die entweder @code{core} oder
@code{non-core} sein muss.

Die @code{core}-Teilmenge bezieht sich auf alle Pakete, die den Kern der
Distribution ausmachen, d.h.@: Pakete, aus denen heraus „alles andere“
erstellt wird. Dazu gehören GCC, libc, Binutils, Bash und so weiter. In der
Regel ist die Folge einer Änderung an einem dieser Pakete in der
Distribution, dass alle anderen neu erstellt werden müssen. Daher sind
solche Änderungen unangenehm für Nutzer, weil sie einiges an Erstellungszeit
oder Bandbreite investieren müssen, um die Aktualisierung abzuschließen.

Die @code{non-core}-Teilmenge bezieht sich auf die übrigen Pakete. Sie wird
typischerweise dann benutzt, wenn eine Aktualisierung der Kernpakete zu
viele Umstände machen würde.

@item --manifest=@var{Datei}
@itemx -m @var{Datei}
Wählt alle Pakete im in der @var{Datei} stehenden Manifest aus. Das ist
nützlich, um zu überprüfen, welche Pakete aus dem Manifest des Nutzers
aktualisiert werden können.

@item --type=@var{Aktualisierungsprogramm}
@itemx -t @var{Aktualisierungsprogramm}
Nur solche Pakete auswählen, die vom angegebenen
@var{Aktualisierungsprogramm} behandelt werden. Es darf auch eine
kommagetrennte Liste mehrerer Aktualisierungsprogramme angegeben werden. Zur
Zeit kann als @var{Aktualisierungsprogramm} eines der folgenden angegeben
werden:

@table @code
@item gnu
Aktualisierungsprogramm für GNU-Pakete,
@item gnome
Aktualisierungsprogramm für GNOME-Pakete,
@item kde
Aktualisierungsprogramm für KDE-Pakete,
@item xorg
Aktualisierungsprogramm für X.org-Pakete,
@item kernel.org
Aktualisierungsprogramm auf kernel.org angebotener Pakete,
@item elpa
Aktualisierungsprogramm für @uref{https://elpa.gnu.org/, ELPA-Pakete},
@item cran
Aktualisierungsprogramm für @uref{https://cran.r-project.org/, CRAN-Pakete},
@item bioconductor
Aktualisierungsprogramm für R-Pakete vom
@uref{https://www.bioconductor.org/, Bioconductor},
@item cpan
Aktualisierungsprogramm für @uref{https://www.cpan.org/, CPAN-Pakete},
@item pypi
Aktualisierungsprogramm für @uref{https://pypi.python.org, PyPI-Pakete},
@item gem
Aktualisierungsprogramm für @uref{https://rubygems.org, RubyGems-Pakete}.
@item github
Aktualisierungsprogramm für @uref{https://github.com, GitHub-Pakete}.
@item hackage
Aktualisierungsprogramm für @uref{https://hackage.haskell.org,
Hackage-Pakete}.
@item stackage
Aktualisierungsprogramm für @uref{https://www.stackage.org,
Stackage-Pakete}.
@item crate
Aktualisierungsprogramm für @uref{https://crates.io, Crates-Pakete}.
@item launchpad
Aktualisierungsprogramm für @uref{https://launchpad.net, Launchpad}.
@end table

Zum Beispiel prüft folgender Befehl nur auf mögliche Aktualisierungen von
auf @code{elpa.gnu.org} angebotenen Emacs-Paketen und von CRAN-Paketen:

@example
$ guix refresh --type=elpa,cran
gnu/packages/statistics.scm:819:13: r-testthat would be upgraded from 0.10.0 to 0.11.0
gnu/packages/emacs.scm:856:13: emacs-auctex would be upgraded from 11.88.6 to 11.88.9
@end example

@end table

An @command{guix refresh} können auch ein oder mehrere Paketnamen übergeben
werden wie in diesem Beispiel:

@example
$ ./pre-inst-env guix refresh -u emacs idutils gcc@@4.8
@end example

@noindent
The command above specifically updates the @code{emacs} and @code{idutils}
packages.  The @option{--select} option would have no effect in this case.

Wenn Sie sich fragen, ob ein Paket aktualisiert werden sollte oder nicht,
kann es helfen, sich anzuschauen, welche Pakete von der Aktualisierung
betroffen wären und auf Kompatibilität hin geprüft werden sollten. Dazu kann
die folgende Befehlszeilenoption zusammen mit einem oder mehreren Paketnamen
an @command{guix refresh} übergeben werden:

@table @code

@item --list-updaters
@itemx -L
List available updaters and exit (see @option{--type} above).

Für jedes Aktualisierungsprogramm den Anteil der davon betroffenen Pakete
anzeigen; zum Schluss wird der Gesamtanteil von irgendeinem
Aktualisierungsprogramm betroffener Pakete angezeigt.

@item --list-dependent
@itemx -l
Auflisten, welche abhängigen Pakete auf oberster Ebene neu erstellt werden
müssten, wenn eines oder mehrere Pakete aktualisiert würden.

Siehe @ref{Aufruf von guix graph, den @code{reverse-package}-Typ von
@command{guix graph}} für Informationen dazu, wie Sie die Liste der
Abhängigen eines Pakets visualisieren können.

@end table

Be aware that the @option{--list-dependent} option only @emph{approximates}
the rebuilds that would be required as a result of an upgrade.  More
rebuilds might be required under some circumstances.

@example
$ guix refresh --list-dependent flex
Building the following 120 packages would ensure 213 dependent packages are rebuilt:
hop@@2.4.0 geiser@@0.4 notmuch@@0.18 mu@@0.9.9.5 cflow@@1.4 idutils@@4.6 …
@end example

Der oben stehende Befehl gibt einen Satz von Paketen aus, die Sie erstellen
wollen könnten, um die Kompatibilität einer Aktualisierung des
@code{flex}-Pakets beurteilen zu können.

@table @code

@item --list-transitive
Die Pakete auflisten, von denen eines oder mehrere Pakete abhängen.

@example
$ guix refresh --list-transitive flex
flex@@2.6.4 depends on the following 25 packages: perl@@5.28.0 help2man@@1.47.6
bison@@3.0.5 indent@@2.2.10 tar@@1.30 gzip@@1.9 bzip2@@1.0.6 xz@@5.2.4 file@@5.33 …
@end example

@end table

Der oben stehende Befehl gibt einen Satz von Paketen aus, die, wenn sie
geändert würden, eine Neuerstellung des @code{flex}-Pakets auslösen würden.

Mit den folgenden Befehlszeilenoptionen können Sie das Verhalten von GnuPG
anpassen:

@table @code

@item --gpg=@var{Befehl}
Den @var{Befehl} als GnuPG-2.x-Befehl einsetzen. Der @var{Befehl} wird im
@code{$PATH} gesucht.

@item --keyring=@var{Datei}
Die @var{Datei} als Schlüsselbund mit Anbieterschlüsseln verwenden. Die
@var{Datei} muss im @dfn{Keybox-Format} vorliegen. Keybox-Dateien haben
normalerweise einen Namen, der auf @file{.kbx} endet. Sie können mit Hilfe
von GNU@tie{}Privacy Guard (GPG) bearbeitet werden (siehe @ref{kbxutil,
@command{kbxutil},, gnupg, Using the GNU Privacy Guard} für Informationen
über ein Werkzeug zum Bearbeiten von Keybox-Dateien).

When this option is omitted, @command{guix refresh} uses
@file{~/.config/guix/upstream/trustedkeys.kbx} as the keyring for upstream
signing keys.  OpenPGP signatures are checked against keys from this
keyring; missing keys are downloaded to this keyring as well (see
@option{--key-download} below).

Sie können Schlüssel aus Ihrem normalerweise benutzten GPG-Schlüsselbund in
eine Keybox-Datei exportieren, indem Sie Befehle wie diesen benutzen:

@example
gpg --export rms@@gnu.org | kbxutil --import-openpgp >> mykeyring.kbx
@end example

Ebenso können Sie wie folgt Schlüssel in eine bestimmte Keybox-Datei
herunterladen:

@example
gpg --no-default-keyring --keyring mykeyring.kbx \
  --recv-keys @value{OPENPGP-SIGNING-KEY-ID}
@end example

Siehe @ref{GPG Configuration Options, @option{--keyring},, gnupg, Using the
GNU Privacy Guard} für mehr Informationen zur Befehlszeilenoption
@option{--keyring} von GPG.

@item --key-download=@var{Richtlinie}
Fehlende OpenPGP-Schlüssel gemäß dieser @var{Richtlinie} behandeln, für die
eine der Folgenden angegeben werden kann:

@table @code
@item always
Immer fehlende OpenPGP-Schlüssel herunterladen und zum GnuPG-Schlüsselbund
des Nutzers hinzufügen.

@item never
Niemals fehlende OpenPGP-Schlüssel herunterladen, sondern einfach abbrechen.

@item interactive
Ist ein Paket mit einem unbekannten OpenPGP-Schlüssel signiert, wird der
Nutzer gefragt, ob der Schlüssel heruntergeladen werden soll oder
nicht. Dies entspricht dem vorgegebenen Verhalten.
@end table

@item --key-server=@var{Host}
Den mit @var{Host} bezeichneten Rechner als Schlüsselserver für OpenPGP
benutzen, wenn ein öffentlicher Schlüssel importiert wird.

@item --load-path=@var{Verzeichnis}
Das @var{Verzeichnis} vorne an den Suchpfad für Paketmodule anfügen (siehe
@ref{Paketmodule}).

Damit können Nutzer dafür sorgen, dass ihre eigenen selbstdefinierten Pakete
für die Befehlszeilenwerkzeuge sichtbar sind.

@end table

The @code{github} updater uses the @uref{https://developer.github.com/v3/,
GitHub API} to query for new releases.  When used repeatedly e.g.@: when
refreshing all packages, GitHub will eventually refuse to answer any further
API requests.  By default 60 API requests per hour are allowed, and a full
refresh on all GitHub packages in Guix requires more than this.
Authentication with GitHub through the use of an API token alleviates these
limits.  To use an API token, set the environment variable
@env{GUIX_GITHUB_TOKEN} to a token procured from
@uref{https://github.com/settings/tokens} or otherwise.


@node Aufruf von guix lint
@section @command{guix lint} aufrufen

@cindex @command{guix lint}
@cindex Pakete, auf Fehler prüfen
The @command{guix lint} command is meant to help package developers avoid
common errors and use a consistent style.  It runs a number of checks on a
given set of packages in order to find common mistakes in their
definitions.  Available @dfn{checkers} include (see @option{--list-checkers}
for a complete list):

@table @code
@item synopsis
@itemx description
Überprüfen, ob bestimmte typografische und stilistische Regeln in
Paketbeschreibungen und -zusammenfassungen eingehalten wurden.

@item inputs-should-be-native
Eingaben identifizieren, die wahrscheinlich native Eingaben sein sollten.

@item source
@itemx home-page
@itemx mirror-url
@itemx github-url
@itemx source-file-name
Die URLs für die Felder @code{home-page} und @code{source} anrufen und nicht
erreichbare URLs melden. Wenn passend, wird eine @code{mirror://}-URL
vorgeschlagen. Wenn die Quell-URL auf eine GitHub-URL weiterleitet, wird
eine Empfehlung ausgegeben, direkt letztere zu verwenden. Es wird geprüft,
dass der Quell-Dateiname aussagekräftig ist, dass er also z.B.@: nicht nur
aus einer Versionsnummer besteht oder als „git-checkout“ angegeben wurde,
ohne dass ein @code{Dateiname} deklariert wurde (siehe @ref{„origin“-Referenz}).

@item source-unstable-tarball
Analysiert die @code{source}-URL, um zu bestimmen, ob der Tarball von GitHub
automatisch generiert wurde oder zu einer Veröffentlichung gehört. Leider
werden GitHubs automatisch generierte Tarballs manchmal neu generiert.

@item archival
@cindex Software Heritage, Quellcode-Archiv
@cindex Archivierung von Quellcode, Software Heritage
Überprüft, ob der Quellcode des Pakets bei der
@uref{https://www.softwareheritage.org, Software Heritage} archiviert ist.

Wenn der noch nicht archivierte Quellcode aus einem Versionskontrollsystem
(„Version Control System“, VCS) stammt, wenn er also z.B.@: mit
@code{git-fetch} bezogen wird, wird eine Anfrage an Software Heritage
gestellt, diesen zu speichern („Save“), damit sie ihn irgendwann in deren
Archiv aufnehmen. So wird gewährleistet, dass der Quellcode langfristig
verfügbar bleibt und Guix notfalls auf Software Heritage zurückgreifen kann,
falls der Quellcode bei seinem ursprünglichen Anbieter verschwindet. Der
Status kürzlicher Archivierungsanfragen kann
@uref{https://archive.softwareheritage.org/save/#requests, online eingesehen
werden}.

Wenn der Quellcode in Form eines über @code{url-fetch} zu beziehenden
Tarballs vorliegt, wird bloß eine Nachricht ausgegeben, wenn er nicht
archiviert ist. Zum Zeitpunkt, wo dies geschrieben wurde, ermöglicht
Software Heritage keine Anfragen, beliebige Tarballs zu archivieren; wir
arbeiten an Möglichkeiten wie auch @emph{nicht} versionskontrollierter
Quellcode archiviert werden kann.

Software Heritage
@uref{https://archive.softwareheritage.org/api/#rate-limiting, beschränkt},
wie schnell dieselbe IP-Adresse Anfragen stellen kann. Ist das Limit
erreicht, gibt @command{guix lint} eine Mitteilung aus und der
@code{archival}-Prüfer steht so lange still, bis die Beschränkung wieder
zurückgesetzt wurde.

@item cve
@cindex Sicherheitslücken
@cindex CVE, Common Vulnerabilities and Exposures
Bekannte Sicherheitslücken melden, die in den Datenbanken der „Common
Vulnerabilities and Exposures“ (CVE) aus diesem und dem letzten Jahr
vorkommen, @uref{https://nvd.nist.gov/vuln/data-feeds, wie sie von der
US-amerikanischen NIST veröffentlicht werden}.

Um Informationen über eine bestimmte Sicherheitslücke angezeigt zu bekommen,
besuchen Sie Webseiten wie:

@itemize
@item
@indicateurl{https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-YYYY-ABCD}
@item
@indicateurl{https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-YYYY-ABCD}
@end itemize

@noindent
wobei Sie statt @code{CVE-YYYY-ABCD} die CVE-Kennnummer angeben — z.B.@:
@code{CVE-2015-7554}.

Paketentwickler können in ihren Paketrezepten den Namen und die Version des
Pakets in der @uref{https://nvd.nist.gov/products/cpe,Common Platform
Enumeration (CPE)} angeben, falls sich diese von dem in Guix benutzten Namen
und der Version unterscheiden, zum Beispiel so:

@lisp
(package
  (name "grub")
  ;; …
  ;; CPE bezeichnet das Paket als "grub2".
  (properties '((cpe-name . "grub2")
                (cpe-version . "2.3"))))
@end lisp

@c See <https://www.openwall.com/lists/oss-security/2017/03/15/3>.
Manche Einträge in der CVE-Datenbank geben die Version des Pakets nicht an,
auf das sie sich beziehen, und würden daher bis in alle Ewigkeit Warnungen
auslösen. Paketentwickler, die CVE-Warnmeldungen gefunden und geprüft haben,
dass diese ignoriert werden können, können sie wie in diesem Beispiel
deklarieren:

@lisp
(package
  (name "t1lib")
  ;; …
  ;; Diese CVEs treffen nicht mehr zu und können bedenkenlos ignoriert
  ;; werden.
  (properties `((lint-hidden-cve . ("CVE-2011-0433"
                                    "CVE-2011-1553"
                                    "CVE-2011-1554"
                                    "CVE-2011-5244")))))
@end lisp

@item Formatierung
Offensichtliche Fehler bei der Formatierung von Quellcode melden, z.B.@:
Leerraum-Zeichen am Zeilenende oder Nutzung von Tabulatorzeichen.
@end table

Die allgemeine Syntax lautet:

@example
guix lint @var{Optionen} @var{Pakete}…
@end example

Wird kein Paket auf der Befehlszeile angegeben, dann werden alle Pakete
geprüft, die es gibt. Als @var{Optionen} können null oder mehr der folgenden
Befehlszeilenoptionen übergeben werden:

@table @code
@item --list-checkers
@itemx -l
Alle verfügbaren Prüfer für die Pakete auflisten und beschreiben.

@item --checkers
@itemx -c
Only enable the checkers specified in a comma-separated list using the names
returned by @option{--list-checkers}.

@item --load-path=@var{Verzeichnis}
@itemx -L @var{Verzeichnis}
Das @var{Verzeichnis} vorne an den Suchpfad für Paketmodule anfügen (siehe
@ref{Paketmodule}).

Damit können Nutzer dafür sorgen, dass ihre eigenen selbstdefinierten Pakete
für die Befehlszeilenwerkzeuge sichtbar sind.

@end table

@node Aufruf von guix size
@section @command{guix size} aufrufen

@cindex Größe
@cindex Paketgröße
@cindex Abschluss
@cindex @command{guix size}
Der Befehl @command{guix size} hilft Paketentwicklern dabei, den
Plattenplatzverbrauch von Paketen zu profilieren. Es ist leicht, die
Auswirkungen zu unterschätzen, die das Hinzufügen zusätzlicher
Abhängigkeiten zu einem Paket hat oder die das Verwenden einer einzelnen
Ausgabe für ein leicht aufteilbares Paket ausmacht (siehe @ref{Pakete mit mehreren Ausgaben.}). Das sind typische Probleme, auf die @command{guix size}
aufmerksam machen kann.

Dem Befehl können eine oder mehrere Paketspezifikationen wie @code{gcc@@4.8}
oder @code{guile:debug} übergeben werden, oder ein Dateiname im
Store. Betrachten Sie dieses Beispiel:

@example
$ guix size coreutils
Store-Objekt                            Gesamt   Selbst
/gnu/store/…-gcc-5.5.0-lib           60.4    30.1  38.1%
/gnu/store/…-glibc-2.27              30.3    28.8  36.6%
/gnu/store/…-coreutils-8.28          78.9    15.0  19.0%
/gnu/store/…-gmp-6.1.2               63.1     2.7   3.4%
/gnu/store/…-bash-static-4.4.12       1.5     1.5   1.9%
/gnu/store/…-acl-2.2.52              61.1     0.4   0.5%
/gnu/store/…-attr-2.4.47             60.6     0.2   0.3%
/gnu/store/…-libcap-2.25             60.5     0.2   0.2%
Gesamt: 78.9 MiB
@end example

@cindex Abschluss
Die hier aufgelisteten Store-Objekte bilden den @dfn{transitiven Abschluss}
der Coreutils — d.h.@: die Coreutils und all ihre Abhängigkeiten und deren
Abhängigkeiten, rekursiv —, wie sie hiervon angezeigt würden:<f

@example
$ guix gc -R /gnu/store/…-coreutils-8.23
@end example

Hier zeigt die Ausgabe neben den Store-Objekten noch drei Spalten. Die erste
Spalte namens „Gesamt“ gibt wieder, wieviele Mebibytes (MiB) der Abschluss
des Store-Objekts groß ist — das heißt, dessen eigene Größe plus die Größe
all seiner Abhängigkeiten. Die nächste Spalte, bezeichnet mit „Selbst“,
zeigt die Größe nur dieses Objekts an. Die letzte Spalte zeigt das
Verhältnis der Größe des Objekts zur Gesamtgröße aller hier aufgelisteten
Objekte an.

In diesem Beispiel sehen wir, dass der Abschluss der Coreutils 79@tie{}MiB
schwer ist, wovon das meiste durch libc und die Bibliotheken zur
Laufzeitunterstützung von GCC ausgemacht wird. (Dass libc und die
Bibliotheken vom GCC einen großen Anteil am Abschluss ausmachen, ist aber an
sich noch kein Problem, weil es Bibliotheken sind, die auf dem System
sowieso immer verfügbar sein müssen.)

Wenn das oder die Paket(e), die an @command{guix size} übergeben wurden, im
Store verfügbar sind@footnote{Genauer gesagt braucht @command{guix size} die
@emph{nicht veredelte} Variante des angegebenen Pakets bzw. der Pakete, wie
@code{guix build @var{Paket} --no-grafts} sie liefert. Siehe @ref{Sicherheitsaktualisierungen} für Informationen über Veredelungen.}, beauftragen Sie mit
@command{guix size} den Daemon, die Abhängigkeiten davon zu bestimmen und
deren Größe im Store zu messen, ähnlich wie es mit @command{du -ms
--apparent-size} geschehen würde (siehe @ref{du invocation,,, coreutils, GNU
Coreutils}).

Wenn die übergebenen Pakete @emph{nicht} im Store liegen, erstattet
@command{guix size} Bericht mit Informationen, die aus verfügbaren
Substituten herausgelesen werden (siehe @ref{Substitute}). Dadurch kann die
Plattenausnutzung von Store-Objekten profiliert werden, die gar nicht auf
der Platte liegen und nur auf entfernten Rechnern vorhanden sind.

Sie können auch mehrere Paketnamen angeben:

@example
$ guix size coreutils grep sed bash
Store-Objekt                            Gesamt   Selbst
/gnu/store/…-coreutils-8.24          77.8    13.8  13.4%
/gnu/store/…-grep-2.22               73.1     0.8   0.8%
/gnu/store/…-bash-4.3.42             72.3     4.7   4.6%
/gnu/store/…-readline-6.3            67.6     1.2   1.2%
…
Gesamt: 102.3 MiB
@end example

@noindent
In diesem Beispiel sehen wir, dass die Kombination der vier Pakete insgesamt
102,3@tie{}MiB Platz verbraucht, was wesentlich weniger als die Summe der
einzelnen Abschlüsse ist, weil diese viele Abhängigkeiten gemeinsam
verwenden.

When looking at the profile returned by @command{guix size}, you may find
yourself wondering why a given package shows up in the profile at all.  To
understand it, you can use @command{guix graph --path -t references} to
display the shortest path between the two packages (@pxref{Aufruf von guix graph}).

Die verfügbaren Befehlszeilenoptionen sind:

@table @option

@item --substitute-urls=@var{URLs}
Substitutinformationen von den @var{URLs} benutzen. Siehe
@ref{client-substitute-urls, dieselbe Option bei @code{guix build}}.

@item --sort=@var{Schlüssel}
Zeilen anhand des @var{Schlüssel}s sortieren, der eine der folgenden
Alternativen sein muss:

@table @code
@item self
die Größe jedes Objekts (die Vorgabe),
@item Abschluss
die Gesamtgröße des Abschlusses des Objekts.
@end table

@item --map-file=@var{Datei}
Eine grafische Darstellung des Plattenplatzverbrauchs als eine
PNG-formatierte Karte in die @var{Datei} schreiben.

Für das Beispiel oben sieht die Karte so aus:

@image{images/coreutils-size-map,5in,, Karte der Plattenausnutzung der
Coreutils, erzeugt mit @command{guix size}}

Diese Befehlszeilenoption setzt voraus, dass
@uref{https://wingolog.org/software/guile-charting/, Guile-Charting}
installiert und im Suchpfad für Guile-Module sichtbar ist. Falls nicht,
schlägt @command{guix size} beim Versuch fehl, dieses Modul zu laden.

@item --system=@var{System}
@itemx -s @var{System}
Pakete für dieses @var{System} betrachten — z.B.@: für @code{x86_64-linux}.

@item --load-path=@var{Verzeichnis}
@itemx -L @var{Verzeichnis}
Das @var{Verzeichnis} vorne an den Suchpfad für Paketmodule anfügen (siehe
@ref{Paketmodule}).

Damit können Nutzer dafür sorgen, dass ihre eigenen selbstdefinierten Pakete
für die Befehlszeilenwerkzeuge sichtbar sind.
@end table

@node Aufruf von guix graph
@section @command{guix graph} aufrufen

@cindex DAG
@cindex @command{guix graph}
@cindex Paketabhängigkeiten
Packages and their dependencies form a @dfn{graph}, specifically a directed
acyclic graph (DAG).  It can quickly become difficult to have a mental model
of the package DAG, so the @command{guix graph} command provides a visual
representation of the DAG.  By default, @command{guix graph} emits a DAG
representation in the input format of @uref{https://www.graphviz.org/,
Graphviz}, so its output can be passed directly to the @command{dot} command
of Graphviz.  It can also emit an HTML page with embedded JavaScript code to
display a ``chord diagram'' in a Web browser, using the
@uref{https://d3js.org/, d3.js} library, or emit Cypher queries to construct
a graph in a graph database supporting the
@uref{https://www.opencypher.org/, openCypher} query language.  With
@option{--path}, it simply displays the shortest path between two packages.
The general syntax is:

@example
guix graph @var{Optionen} @var{Pakete}…
@end example

Zum Beispiel erzeugt der folgende Befehl eine PDF-Datei, die den Paket-DAG
für die GNU@tie{}Core Utilities darstellt, welcher ihre Abhängigkeiten zur
Erstellungszeit anzeigt:

@example
guix graph coreutils | dot -Tpdf > dag.pdf
@end example

Die Ausgabe sieht so aus:

@image{images/coreutils-graph,2in,,Abhängigkeitsgraph der GNU Coreutils}

Ein netter, kleiner Graph, oder?

You may find it more pleasant to navigate the graph interactively with
@command{xdot} (from the @code{xdot} package):

@example
guix graph coreutils | xdot -
@end example

Aber es gibt mehr als eine Art von Graph! Der Graph oben ist kurz und knapp:
Es ist der Graph der Paketobjekte, ohne implizite Eingaben wie GCC, libc,
grep und so weiter. Oft möchte man einen knappen Graphen sehen, aber
manchmal will man auch mehr Details sehen. @command{guix graph} unterstützt
mehrere Typen von Graphen; Sie können den Detailgrad auswählen.

@table @code
@item package
Der vorgegebene Typ aus dem Beispiel oben. Er zeigt den DAG der Paketobjekte
ohne implizite Abhängigkeiten. Er ist knapp, filtert aber viele Details
heraus.

@item reverse-package
Dies zeigt den @emph{umgekehrten} DAG der Pakete. Zum Beispiel liefert

@example
guix graph --type=reverse-package ocaml
@end example

...@: yields the graph of packages that @emph{explicitly} depend on OCaml
(if you are also interested in cases where OCaml is an implicit dependency,
see @code{reverse-bag} below).

Beachten Sie, dass für Kernpakete damit gigantische Graphen entstehen
können. Wenn Sie nur die Anzahl der Pakete wissen wollen, die von einem
gegebenen Paket abhängen, benutzen Sie @command{guix refresh
--list-dependent} (siehe @ref{Aufruf von guix refresh,
@option{--list-dependent}}).

@item bag-emerged
Dies ist der Paket-DAG @emph{einschließlich} impliziter Eingaben.

Zum Beispiel liefert der folgende Befehl

@example
guix graph --type=bag-emerged coreutils
@end example

…@: diesen größeren Graphen:

@image{images/coreutils-bag-graph,,5in,Detaillierter Abhängigkeitsgraph der
GNU Coreutils}

Am unteren Rand des Graphen sehen wir alle impliziten Eingaben des
@var{gnu-build-system} (siehe @ref{Erstellungssysteme, @code{gnu-build-system}}).

Beachten Sie dabei aber, dass auch hier die Abhängigkeiten dieser impliziten
Eingaben — d.h.@: die @dfn{Bootstrap-Abhängigkeiten} (siehe
@ref{Bootstrapping}) — nicht gezeigt werden, damit der Graph knapper bleibt.

@item bag
Ähnlich wie @code{bag-emerged}, aber diesmal mit allen
Bootstrap-Abhängigkeiten.

@item bag-with-origins
Ähnlich wie @code{bag}, aber auch mit den Ursprüngen und deren
Abhängigkeiten.

@item reverse-bag
Dies zeigt den @emph{umgekehrten} DAG der Pakete. Anders als
@code{reverse-package} werden auch implizite Abhängigkeiten
berücksichtigt. Zum Beispiel liefert

@example
guix graph -t reverse-bag dune
@end example

@noindent
…@: den Graphen aller Pakete, die von Dune direkt oder indirekt
abhängen. Weil Dune eine @emph{implizite} Abhängigkeit von vielen Paketen
über das @code{dune-build-system} ist, zeigt er eine große Zahl von Paketen,
während bei @code{reverse-package} nur sehr wenige bis gar keine zu sehen
sind.

@item Ableitung
Diese Darstellung ist am detailliertesten: Sie zeigt den DAG der Ableitungen
(siehe @ref{Ableitungen}) und der einfachen Store-Objekte. Verglichen mit
obiger Darstellung sieht man viele zusätzliche Knoten einschließlich
Erstellungs-Skripts, Patches, Guile-Module usw.

Für diesen Typ Graph kann auch der Name einer @file{.drv}-Datei anstelle
eines Paketnamens angegeben werden, etwa so:

@example
guix graph -t derivation `guix system build -d my-config.scm`
@end example

@item module
Dies ist der Graph der @dfn{Paketmodule} (siehe @ref{Paketmodule}). Zum
Beispiel zeigt der folgende Befehl den Graphen für das Paketmodul an, das
das @code{guile}-Paket definiert:

@example
guix graph -t module guile | xdot -
@end example
@end table

Alle oben genannten Typen entsprechen @emph{Abhängigkeiten zur
Erstellungszeit}. Der folgende Graphtyp repräsentiert die
@emph{Abhängigkeiten zur Laufzeit}:

@table @code
@item references
Dies ist der Graph der @dfn{Referenzen} einer Paketausgabe, wie
@command{guix gc --references} sie liefert (siehe @ref{Aufruf von guix gc}).

Wenn die angegebene Paketausgabe im Store nicht verfügbar ist, versucht
@command{guix graph}, die Abhängigkeitsinformationen aus Substituten zu
holen.

Hierbei können Sie auch einen Store-Dateinamen statt eines Paketnamens
angeben. Zum Beispiel generiert der Befehl unten den Referenzgraphen Ihres
Profils (der sehr groß werden kann!):

@example
guix graph -t references `readlink -f ~/.guix-profile`
@end example

@item referrers
Dies ist der Graph der ein Store-Objekt @dfn{referenzierenden} Objekte, wie
@command{guix gc --referrers} sie liefern würde (siehe @ref{Aufruf von guix gc}).

Er basiert ausschließlich auf lokalen Informationen aus Ihrem Store. Nehmen
wir zum Beispiel an, dass das aktuelle Inkscape in 10 Profilen verfügbar
ist, dann wird @command{guix graph -t referrers inkscape} einen Graph
zeigen, der bei Inkscape gewurzelt ist und Kanten zu diesen 10 Profilen hat.

Ein solcher Graph kann dabei helfen, herauszufinden, weshalb ein
Store-Objekt nicht vom Müllsammler abgeholt werden kann.

@end table

@cindex shortest path, between packages
Often, the graph of the package you are interested in does not fit on your
screen, and anyway all you want to know is @emph{why} that package actually
depends on some seemingly unrelated package.  The @option{--path} option
instructs @command{guix graph} to display the shortest path between two
packages (or derivations, or store items, etc.):

@example
$ guix graph --path emacs libunistring
emacs@@26.3
mailutils@@3.9
libunistring@@0.9.10
$ guix graph --path -t derivation emacs libunistring
/gnu/store/@dots{}-emacs-26.3.drv
/gnu/store/@dots{}-mailutils-3.9.drv
/gnu/store/@dots{}-libunistring-0.9.10.drv
$ guix graph --path -t references emacs libunistring
/gnu/store/@dots{}-emacs-26.3
/gnu/store/@dots{}-libidn2-2.2.0
/gnu/store/@dots{}-libunistring-0.9.10
@end example

Folgendes sind die verfügbaren Befehlszeilenoptionen:

@table @option
@item --type=@var{Typ}
@itemx -t @var{Typ}
Eine Graph-Ausgabe dieses @var{Typ}s generieren. Dieser @var{Typ} muss einer
der oben genannten Werte sein.

@item --list-types
Die unterstützten Graph-Typen auflisten.

@item --backend=@var{Backend}
@itemx -b @var{Backend}
Einen Graph mit Hilfe des ausgewählten @var{Backend}s generieren.

@item --list-backends
Die unterstützten Graph-Backends auflisten.

Derzeit sind die verfügbaren Backends Graphviz und d3.js.

@item --path
Display the shortest path between two nodes of the type specified by
@option{--type}.  The example below shows the shortest path between
@code{libreoffice} and @code{llvm} according to the references of
@code{libreoffice}:

@example
$ guix graph --path -t references libreoffice llvm
/gnu/store/@dots{}-libreoffice-6.4.2.2
/gnu/store/@dots{}-libepoxy-1.5.4
/gnu/store/@dots{}-mesa-19.3.4
/gnu/store/@dots{}-llvm-9.0.1
@end example

@item --expression=@var{Ausdruck}
@itemx -e @var{Ausdruck}
Als Paket benutzen, wozu der @var{Ausdruck} ausgewertet wird.

Dies ist nützlich, um genau ein bestimmtes Paket zu referenzieren, wie in
diesem Beispiel:

@example
guix graph -e '(@@@@ (gnu packages commencement) gnu-make-final)'
@end example

@item --system=@var{System}
@itemx -s @var{System}
Den Graphen für das @var{System} anzeigen — z.B.@: @code{i686-linux}.

Der Abhängigkeitsgraph ist größtenteils von der Systemarchitektur
unabhängig, aber ein paar architekturabhängige Teile können Ihnen mit dieser
Befehlszeilenoption visualisiert werden.

@item --load-path=@var{Verzeichnis}
@itemx -L @var{Verzeichnis}
Das @var{Verzeichnis} vorne an den Suchpfad für Paketmodule anfügen (siehe
@ref{Paketmodule}).

Damit können Nutzer dafür sorgen, dass ihre eigenen selbstdefinierten Pakete
für die Befehlszeilenwerkzeuge sichtbar sind.
@end table

Hinzu kommt, dass @command{guix graph} auch all die üblichen
Paketumwandlungsoptionen unterstützt (siehe @ref{Paketumwandlungsoptionen}). Somit ist es kein Problem, die Folgen einer den Paketgraphen
umschreibenden Umwandlung wie @option{--with-input} zu erkennen. Zum
Beispiel gibt der folgende Befehl den Graphen von @code{git} aus, nachdem
@code{openssl} an allen Stellen im Graphen durch @code{libressl} ersetzt
wurde:

@example
guix graph git --with-input=openssl=libressl
@end example

Ihrem Vergnügen sind keine Grenzen gesetzt!

@node Aufruf von guix publish
@section @command{guix publish} aufrufen

@cindex @command{guix publish}
Der Zweck von @command{guix publish} ist, es Nutzern zu ermöglichen, ihren
Store auf einfache Weise mit anderen zu teilen, die ihn dann als
Substitutserver einsetzen können (siehe @ref{Substitute}).

Wenn @command{guix publish} ausgeführt wird, wird dadurch ein HTTP-Server
gestartet, so dass jeder mit Netzwerkzugang davon Substitute beziehen
kann. Das bedeutet, dass jede Maschine, auf der Guix läuft, auch als
Erstellungsfarm fungieren kann, weil die HTTP-Schnittstelle mit Cuirass, der
Software, mit der die offizielle Erstellungsfarm
@code{@value{SUBSTITUTE-SERVER}} betrieben wird, kompatibel ist.

For security, each substitute is signed, allowing recipients to check their
authenticity and integrity (@pxref{Substitute}).  Because @command{guix
publish} uses the signing key of the system, which is only readable by the
system administrator, it must be started as root; the @option{--user} option
makes it drop root privileges early on.

Das Schlüsselpaar zum Signieren muss erzeugt werden, bevor @command{guix
publish} gestartet wird. Dazu können Sie @command{guix archive
--generate-key} ausführen (siehe @ref{Aufruf von guix archive}).

Die allgemeine Syntax lautet:

@example
guix publish @var{Optionen}…
@end example

Wird @command{guix publish} ohne weitere Argumente ausgeführt, wird damit
ein HTTP-Server gestartet, der auf Port 8080 lauscht:

@example
guix publish
@end example

Sobald ein Server zum Veröffentlichen autorisiert wurde (siehe @ref{Aufruf von guix archive}), kann der Daemon davon Substitute herunterladen:

@example
guix-daemon --substitute-urls=http://example.org:8080
@end example

Nach den Voreinstellungen komprimiert @command{guix publish} Archive erst
dann, wenn sie angefragt werden. Dieser „dynamische“ Modus bietet sich an,
weil so nichts weiter eingerichtet werden muss und er direkt verfügbar
ist. Wenn Sie allerdings viele Clients bedienen wollen, empfehlen wir, dass
Sie die Befehlszeilenoption @option{--cache} benutzen, die das
Zwischenspeichern der komprimierten Archive aktiviert, bevor diese an die
Clients geschickt werden — siehe unten für Details. Mit dem Befehl
@command{guix weather} haben Sie eine praktische Methode zur Hand, zu
überprüfen, was so ein Server anbietet (siehe @ref{Aufruf von guix weather}).

Als Bonus dient @command{guix publish} auch als inhaltsadressierbarer
Spiegelserver für Quelldateien, die in @code{origin}-Verbundsobjekten
eingetragen sind (siehe @ref{„origin“-Referenz}). Wenn wir zum Beispiel
annehmen, dass @command{guix publish} auf @code{example.org} läuft, liefert
folgende URL die rohe @file{hello-2.10.tar.gz}-Datei mit dem angegebenen
SHA256-Hash als ihre Prüfsumme (dargestellt im @code{nix-base32}-Format,
siehe @ref{Aufruf von guix hash}):

@example
http://example.org/file/hello-2.10.tar.gz/sha256/0ssi1…ndq1i
@end example

Offensichtlich funktionieren diese URLs nur mit solchen Dateien, die auch im
Store vorliegen; in anderen Fällen werden sie 404 („Nicht gefunden“)
zurückliefern.

@cindex Erstellungsprotokolle, Veröffentlichen
Erstellungsprotokolle sind unter @code{/log}-URLs abrufbar:

@example
http://example.org/log/gwspk…-guile-2.2.3
@end example

@noindent
When @command{guix-daemon} is configured to save compressed build logs, as
is the case by default (@pxref{Aufruf des guix-daemon}), @code{/log} URLs
return the compressed log as-is, with an appropriate @code{Content-Type}
and/or @code{Content-Encoding} header.  We recommend running
@command{guix-daemon} with @option{--log-compression=gzip} since Web
browsers can automatically decompress it, which is not the case with Bzip2
compression.

Folgende Befehlszeilenoptionen stehen zur Verfügung:

@table @code
@item --port=@var{Port}
@itemx -p @var{Port}
Auf HTTP-Anfragen auf diesem @var{Port} lauschen.

@item --listen=@var{Host}
Auf der Netzwerkschnittstelle für den angegebenen @var{Host}, also der
angegebenen Rechneradresse, lauschen. Vorgegeben ist, Verbindungen mit jeder
Schnittstelle zu akzeptieren.

@item --user=@var{Benutzer}
@itemx -u @var{Benutzer}
So früh wie möglich alle über die Berechtigungen des @var{Benutzer}s
hinausgehenden Berechtigungen ablegen — d.h.@: sobald der Server-Socket
geöffnet und der Signierschlüssel gelesen wurde.

@item --compression[=@var{Methode}[:@var{Stufe}]]
@itemx -C [@var{Methode}[:@var{Stufe}]]
Daten auf der angegebenen Kompressions-@var{Stufe} mit der angegebenen
@var{Methode} komprimieren. Als @var{Methode} kann entweder @code{lzip} oder
@code{gzip} angegeben werden. Wird keine @var{Methode} angegeben, wird
@code{gzip} benutzt.

Daten auf der angegebenen Kompressions-@var{Stufe} komprimieren. Wird als
@var{Stufe} null angegeben, wird Kompression deaktiviert. Der Bereich von 1
bis 9 entspricht unterschiedlichen Kompressionsstufen: 1 ist am schnellsten,
während 9 am besten komprimiert (aber den Prozessor mehr auslastet). Der
Vorgabewert ist 3.

Normalerweise ist die Kompression mit @code{lzip} wesentlich besser als bei
@code{gzip}, dafür wird der Prozessor geringfügig stärker ausgelastet; siehe
@uref{https://nongnu.org/lzip/lzip_benchmark.html,Vergleichswerte auf dem
Webauftritt von lzip}.

Wenn @option{--cache} nicht übergeben wird, werden Daten dynamisch immer
erst dann komprimiert, wenn sie abgeschickt werden; komprimierte Datenströme
landen in keinem Zwischenspeicher. Um also die Auslastung der Maschine, auf
der @command{guix publish} läuft, zu reduzieren, kann es eine gute Idee
sein, eine niedrige Kompressionsstufe zu wählen, @command{guix publish}
einen Proxy mit Zwischenspeicher (einen „Caching Proxy“) voranzuschalten,
oder @option{--cache} zu benutzen. @option{--cache} zu benutzen, hat den
Vorteil, dass @command{guix publish} damit eine
@code{Content-Length}-HTTP-Kopfzeile seinen Antworten beifügen kann.

Wenn diese Befehlszeilenoption mehrfach angegeben wird, wird jedes Substitut
mit allen ausgewählten Methoden komprimiert und jede davon wird bei Anfragen
mitgeteilt. Das ist nützlich, weil Benutzer, bei denen nicht alle
Kompressionsmethoden unterstützt werden, die passende wählen können.

@item --cache=@var{Verzeichnis}
@itemx -c @var{Verzeichnis}
Archive und Metadaten (@code{.narinfo}-URLs) in das @var{Verzeichnis}
zwischenspeichern und nur solche Archive versenden, die im Zwischenspeicher
vorliegen.

Wird diese Befehlszeilenoption weggelassen, dann werden Archive und
Metadaten „dynamisch“ erst auf eine Anfrage hin erzeugt. Dadurch kann die
verfügbare Bandbreite reduziert werden, besonders wenn Kompression aktiviert
ist, weil die Operation dann durch die Prozessorleistung beschränkt sein
kann. Noch ein Nachteil des voreingestellten Modus ist, dass die Länge der
Archive nicht im Voraus bekannt ist, @command{guix publish} also keine
@code{Content-Length}-HTTP-Kopfzeile an seine Antworten anfügt, wodurch
Clients nicht wissen können, welche Datenmenge noch heruntergeladen werden
muss.

Im Gegensatz dazu liefert, wenn @option{--cache} benutzt wird, die erste
Anfrage nach einem Store-Objekt (über dessen @code{.narinfo}-URL) den
Fehlercode 404, und im Hintergrund wird ein Prozess gestartet, der das
Archiv in den Zwischenspeicher einlagert (auf Englisch sagen wir „@dfn{bake}
the archive“), d.h.@: seine @code{.narinfo} wird berechnet und das Archiv,
falls nötig, komprimiert. Sobald das Archiv im @var{Verzeichnis}
zwischengespeichert wurde, werden nachfolgende Anfragen erfolgreich sein und
direkt aus dem Zwischenspeicher bedient, der garantiert, dass Clients
optimale Bandbreite genießen.

Der Prozess zum Einlagern wird durch Worker-Threads umgesetzt. Der Vorgabe
entsprechend wird dazu pro Prozessorkern ein Thread erzeugt, aber dieses
Verhalten kann angepasst werden. Siehe @option{--workers} weiter unten.

Wird @option{--ttl} verwendet, werden zwischengespeicherte Einträge
automatisch gelöscht, sobald die dabei angegebene Zeit abgelaufen ist.

@item --workers=@var{N}
Wird @option{--cache} benutzt, wird die Reservierung von @var{N}
Worker-Threads angefragt, um Archive einzulagern.

@item --ttl=@var{ttl}
@code{Cache-Control}-HTTP-Kopfzeilen erzeugen, die eine Time-to-live (TTL)
von @var{ttl} signalisieren. Für @var{ttl} muss eine Dauer (mit dem
Anfangsbuchstaben der Maßeinheit der Dauer im Englischen) angegeben werden:
@code{5d} bedeutet 5 Tage, @code{1m} bedeutet 1 Monat und so weiter.

Das ermöglicht es Guix, Substitutinformationen @var{ttl} lang
zwischenzuspeichern. Beachten Sie allerdings, dass @code{guix publish}
selbst @emph{nicht} garantiert, dass die davon angebotenen Store-Objekte so
lange verfügbar bleiben, wie es die @var{ttl} vorsieht.

Des Weiteren können bei Nutzung von @option{--cache} die
zwischengespeicherten Einträge gelöscht werden, wenn auf sie @var{ttl} lang
nicht zugegriffen wurde und kein ihnen entsprechendes Objekt mehr im Store
existiert.

@item --nar-path=@var{Pfad}
Den @var{Pfad} als Präfix für die URLs von „nar“-Dateien benutzen (siehe
@ref{Aufruf von guix archive, normalized archives}).

Vorgegeben ist, dass Nars unter einer URL mit
@code{/nar/gzip/…-coreutils-8.25} angeboten werden. Mit dieser
Befehlszeilenoption können Sie den @code{/nar}-Teil durch den angegebenen
@var{Pfad} ersetzen.

@item --public-key=@var{Datei}
@itemx --private-key=@var{Datei}
Die angegebenen @var{Datei}en als das Paar aus öffentlichem und privatem
Schlüssel zum Signieren veröffentlichter Store-Objekte benutzen.

Die Dateien müssen demselben Schlüsselpaar entsprechen (der private
Schlüssel wird zum Signieren benutzt, der öffentliche Schlüssel wird
lediglich in den Metadaten der Signatur aufgeführt). Die Dateien müssen
Schlüssel im kanonischen („canonical“) S-Ausdruck-Format enthalten, wie es
von @command{guix archive --generate-key} erzeugt wird (siehe @ref{Aufruf von guix archive}). Vorgegeben ist, dass @file{/etc/guix/signing-key.pub} und
@file{/etc/guix/signing-key.sec} benutzt werden.

@item --repl[=@var{Port}]
@itemx -r [@var{Port}]
Einen Guile-REPL-Server (siehe @ref{REPL Servers,,, guile, GNU Guile
Reference Manual}) auf diesem @var{Port} starten (37146 ist
voreingestellt). Dies kann zur Fehlersuche auf einem laufenden
„@command{guix publish}“-Server benutzt werden.
@end table

@command{guix publish} auf einem „Guix System“-System zu aktivieren ist ein
Einzeiler: Instanziieren Sie einfach einen
@code{guix-publish-service-type}-Dienst im @code{services}-Feld Ihres
@code{operating-system}-Objekts zur Betriebssystemdeklaration (siehe
@ref{guix-publish-service-type, @code{guix-publish-service-type}}).

Falls Sie Guix aber auf einer „Fremddistribution“ laufen lassen, folgen Sie
folgenden Anweisungen:

@itemize
@item
Wenn Ihre Wirtsdistribution systemd als „init“-System benutzt:

@example
# ln -s ~root/.guix-profile/lib/systemd/system/guix-publish.service \
        /etc/systemd/system/
# systemctl start guix-publish && systemctl enable guix-publish
@end example

@item
Wenn Ihre Wirts-Distribution als „init“-System Upstart verwendet:

@example
# ln -s ~root/.guix-profile/lib/upstart/system/guix-publish.conf /etc/init/
# start guix-publish
@end example

@item
Verfahren Sie andernfalls auf die gleiche Art für das „init“-System, das
Ihre Distribution verwendet.
@end itemize

@node Aufruf von guix challenge
@section @command{guix challenge} aufrufen

@cindex Reproduzierbare Erstellungen
@cindex verifizierbare Erstellungen
@cindex @command{guix challenge}
@cindex Anfechten
Entsprechen die von diesem Server gelieferten Binärdateien tatsächlich dem
Quellcode, aus dem sie angeblich erzeugt wurden? Ist ein
Paketerstellungsprozess deterministisch? Diese Fragen versucht @command{guix
challenge} zu beantworten.

Die erste Frage ist offensichtlich wichtig: Bevor man einen Substitutserver
benutzt (siehe @ref{Substitute}), @emph{verifiziert} man besser, dass er
die richtigen Binärdateien liefert, d.h.@: man @emph{fechtet sie an}. Die
letzte Frage macht die erste möglich: Wenn Paketerstellungen deterministisch
sind, müssten voneinander unabhängige Erstellungen genau dasselbe Ergebnis
liefern, Bit für Bit; wenn ein Server mit einer anderen Binärdatei als der
lokal erstellten Binärdatei antwortet, ist diese entweder beschädigt oder
bösartig.

Wir wissen, dass die in @file{/gnu/store}-Dateinamen auftauchende
Hash-Prüfsumme der Hash aller Eingaben des Prozesses ist, mit dem die Datei
oder das Verzeichnis erstellt wurde — Compiler, Bibliotheken,
Erstellungsskripts und so weiter (siehe @ref{Einführung}). Wenn wir von
deterministischen Erstellungen ausgehen, sollte ein Store-Dateiname also auf
genau eine Erstellungsausgabe abgebildet werden. Mit @command{guix
challenge} prüft man, ob es tatsächlich eine eindeutige Abbildung gibt,
indem die Erstellungsausgaben mehrerer unabhängiger Erstellungen jedes
angegebenen Store-Objekts verglichen werden.

Die Ausgabe des Befehls sieht so aus:

@smallexample
$ guix challenge --substitute-urls="https://@value{SUBSTITUTE-SERVER} https://guix.example.org"
Liste der Substitute von „https://@value{SUBSTITUTE-SERVER}“ wird aktualisiert …@: 100.0%
Liste der Substitute von „https://guix.example.org“ wird aktualisiert …@: 100.0%
Inhalt von /gnu/store/…-openssl-1.0.2d verschieden:
  lokale Prüfsumme: 0725l22r5jnzazaacncwsvp9kgf42266ayyp814v7djxs7nk963q
  https://@value{SUBSTITUTE-SERVER}/nar/…-openssl-1.0.2d: 0725l22r5jnzazaacncwsvp9kgf42266ayyp814v7djxs7nk963q
  https://guix.example.org/nar/…-openssl-1.0.2d: 1zy4fmaaqcnjrzzajkdn3f5gmjk754b43qkq47llbyak9z0qjyim
  Diese Dateien unterscheiden sich:
    /lib/libcrypto.so.1.1
    /lib/libssl.so.1.1

Inhalt von /gnu/store/…-git-2.5.0 verschieden:
  lokale Prüfsumme: 00p3bmryhjxrhpn2gxs2fy0a15lnip05l97205pgbk5ra395hyha
  https://@value{SUBSTITUTE-SERVER}/nar/…-git-2.5.0: 069nb85bv4d4a6slrwjdy8v1cn4cwspm3kdbmyb81d6zckj3nq9f
  https://guix.example.org/nar/…-git-2.5.0: 0mdqa9w1p6cmli6976v4wi0sw9r4p5prkj7lzfd1877wk11c9c73
  Diese Datei unterscheidet sich:
    /libexec/git-core/git-fsck

Inhalt von /gnu/store/…-pius-2.1.1 verschieden:
  lokale Prüfsumme: 0k4v3m9z1zp8xzzizb7d8kjj72f9172xv078sq4wl73vnq9ig3ax
  https://@value{SUBSTITUTE-SERVER}/nar/…-pius-2.1.1: 0k4v3m9z1zp8xzzizb7d8kjj72f9172xv078sq4wl73vnq9ig3ax
  https://guix.example.org/nar/…-pius-2.1.1: 1cy25x1a4fzq5rk0pmvc8xhwyffnqz95h2bpvqsz2mpvlbccy0gs
  Diese Datei unterscheidet sich:
    /share/man/man1/pius.1.gz

…

6,406 Store-Objekte wurden analysiert:
  — 4,749 (74.1%) waren identisch
  — 525 (8.2%) unterscheiden sich
  — 1,132 (17.7%) blieben ergebnislos
@end smallexample

@noindent
In diesem Beispiel wird mit @command{guix challenge} zuerst die Menge lokal
erstellter Ableitungen im Store ermittelt — im Gegensatz zu von einem
Substitserver heruntergeladenen Store-Objekten — und dann werden alle
Substitutserver angefragt. Diejenigen Store-Objekte, bei denen der Server
ein anderes Ergebnis berechnet hat als die lokale Erstellung, werden
gemeldet.

@cindex Nichtdeterminismus, in Paketerstellungen
Nehmen wir zum Beispiel an, @code{guix.example.org} gibt uns immer eine
verschiedene Antwort, aber @code{@value{SUBSTITUTE-SERVER}} stimmt mit
lokalen Erstellungen überein, @emph{außer} im Fall von Git. Das könnte ein
Hinweis sein, dass der Erstellungsprozess von Git nichtdeterministisch ist;
das bedeutet, seine Ausgabe variiert abhängig von verschiedenen Umständen,
die Guix nicht vollends kontrollieren kann, obwohl es Pakete in isolierten
Umgebungen erstellt (siehe @ref{Funktionalitäten}). Zu den häufigsten Quellen von
Nichtdeterminismus gehören das Einsetzen von Zeitstempeln innerhalb der
Erstellungsgebnisse, das Einsetzen von Zufallszahlen und von Auflistungen
eines Verzeichnisinhalts sortiert nach der Inode-Nummer. Siehe
@uref{https://reproducible-builds.org/docs/} für mehr Informationen.

Um herauszufinden, was mit dieser Git-Binärdatei nicht stimmt, ist es am
leichtesten, einfach diesen Befehl auszuführen:

@example
guix challenge git \
  --diff=diffoscope \
  --substitute-urls="https://@value{SUBSTITUTE-SERVER} https://guix.example.org"
@end example

Dadurch wird @command{diffoscope} automatisch aufgerufen, um detaillierte
Informationen über sich unterscheidende Dateien anzuzeigen.

Alternatively, we can do something along these lines (@pxref{Aufruf von guix archive}):

@example
$ wget -q -O - https://@value{SUBSTITUTE-SERVER}/nar/lzip/@dots{}-git-2.5.0 \
   | lzip -d | guix archive -x /tmp/git
$ diff -ur --no-dereference /gnu/store/@dots{}-git.2.5.0 /tmp/git
@end example

Dieser Befehl zeigt die Unterschiede zwischen den Dateien, die sich aus der
lokalen Erstellung ergeben, und den Dateien, die sich aus der Erstellung auf
@code{@value{SUBSTITUTE-SERVER}} ergeben (siehe @ref{Overview, Comparing and
Merging Files,, diffutils, Comparing and Merging Files}). Der Befehl
@command{diff} funktioniert großartig für Textdateien. Wenn sich
Binärdateien unterscheiden, ist @uref{https://diffoscope.org/, Diffoscope}
die bessere Wahl: Es ist ein hilfreiches Werkzeug, das Unterschiede in allen
Arten von Dateien visualisiert.

Sobald Sie mit dieser Arbeit fertig sind, können Sie erkennen, ob die
Unterschiede aufgrund eines nichtdeterministischen Erstellungsprozesses oder
wegen einem bösartigen Server zustande kommen. Wir geben uns Mühe, Quellen
von Nichtdeterminismus in Paketen zu entfernen, damit Substitute leichter
verifiziert werden können, aber natürlich ist an diesem Prozess nicht nur
Guix, sondern ein großer Teil der Freie-Software-Gemeinschaft beteiligt. In
der Zwischenzeit ist @command{guix challenge} eines der Werkzeuge, die das
Problem anzugehen helfen.

Wenn Sie ein Paket für Guix schreiben, ermutigen wir Sie, zu überprüfen, ob
@code{@value{SUBSTITUTE-SERVER}} und andere Substitutserver dasselbe
Erstellungsergebnis bekommen, das Sie bekommen haben. Das geht so:

@example
$ guix challenge @var{Paket}
@end example

@noindent
Dabei wird mit @var{Paket} eine Paketspezifikation wie @code{guile@@2.0}
oder @code{glibc:debug} bezeichnet.

Die allgemeine Syntax lautet:

@example
guix challenge @var{Optionen} [@var{Pakete}…]
@end example

When a difference is found between the hash of a locally-built item and that
of a server-provided substitute, or among substitutes provided by different
servers, the command displays it as in the example above and its exit code
is 2 (other non-zero exit codes denote other kinds of errors).

Die eine, wichtige Befehlszeilenoption ist:

@table @code

@item --substitute-urls=@var{URLs}
Die @var{URLs} als durch Leerraumzeichen getrennte Liste von
Substitut-Quell-URLs benutzen. mit denen verglichen wird.

@item --diff=@var{Modus}
Wenn sich Dateien unterscheiden, diese Unterschiede entsprechend dem
@var{Modus} anzeigen. Dieser kann einer der folgenden sein:

@table @asis
@item @code{simple} (die Vorgabe)
Zeige die Liste sich unterscheidender Dateien.

@item @code{diffoscope}
@itemx @var{Befehl}
@uref{https://diffoscope.org/, Diffoscope} aufrufen und ihm zwei
Verzeichnisse mit verschiedenem Inhalt übergeben.

Wenn der @var{Befehl} ein absoluter Dateiname ist, wird der @var{Befehl}
anstelle von Diffoscope ausgeführt.

@item @code{none}
Keine näheren Details zu Unterschieden anzeigen.
@end table

Thus, unless @option{--diff=none} is passed, @command{guix challenge}
downloads the store items from the given substitute servers so that it can
compare them.

@item --verbose
@itemx -v
Details auch zu Übereinstimmungen (deren Inhalt identisch ist) ausgeben,
zusätzlich zu Informationen über Unterschiede.

@end table

@node Aufruf von guix copy
@section @command{guix copy} aufrufen

@cindex Kopieren, von Store-Objekten, über SSH
@cindex SSH, Kopieren von Store-Objekten
@cindex Store-Objekte zwischen Maschinen teilen
@cindex Übertragen von Store-Objekten zwischen Maschinen
Der Befehl @command{guix copy} kopiert Objekte aus dem Store einer Maschine
in den Store einer anderen Maschine mittels einer Secure-Shell-Verbindung
(kurz SSH-Verbindung)@footnote{Dieser Befehl steht nur dann zur Verfügung,
wenn Guile-SSH gefunden werden kann. Siehe @ref{Voraussetzungen} für
Details.}. Zum Beispiel kopiert der folgende Befehl das Paket
@code{coreutils}, das Profil des Benutzers und all deren Abhängigkeiten auf
den anderen @var{Rechner}, dazu meldet sich Guix als @var{Benutzer} an:

@example
guix copy --to=@var{Benutzer}@@@var{Rechner} \
          coreutils `readlink -f ~/.guix-profile`
@end example

Wenn manche der zu kopierenden Objekte schon auf dem anderen @var{Rechner}
vorliegen, werden sie tatsächlich @emph{nicht} übertragen.

Der folgende Befehl bezieht @code{libreoffice} und @code{gimp} von dem
@var{Rechner}, vorausgesetzt sie sind dort verfügbar:

@example
guix copy --from=@var{host} libreoffice gimp
@end example

Die SSH-Verbindung wird mit dem Guile-SSH-Client hergestellt, der mit
OpenSSH kompatibel ist: Er berücksichtigt @file{~/.ssh/known_hosts} und
@file{~/.ssh/config} und verwendet den SSH-Agenten zur Authentifizierung.

Der Schlüssel, mit dem gesendete Objekte signiert sind, muss von der
entfernten Maschine akzeptiert werden. Ebenso muss der Schlüssel, mit dem
die Objekte signiert sind, die Sie von der entfernten Maschine empfangen, in
Ihrer Datei @file{/etc/guix/acl} eingetragen sein, damit Ihr Daemon sie
akzeptiert. Siehe @ref{Aufruf von guix archive} für mehr Informationen über
die Authentifizierung von Store-Objekten.

Die allgemeine Syntax lautet:

@example
guix copy [--to=@var{Spezifikation}|--from=@var{Spezifikation}] @var{Objekte}…
@end example

Sie müssen immer eine der folgenden Befehlszeilenoptionen angeben:

@table @code
@item --to=@var{Spezifikation}
@itemx --from=@var{Spezifikation}
Gibt den Rechner (den „Host“) an, an den oder von dem gesendet
bzw. empfangen wird. Die @var{Spezifikation} muss eine SSH-Spezifikation
sein wie @code{example.org}, @code{charlie@@example.org} oder
@code{charlie@@example.org:2222}.
@end table

Die @var{Objekte} können entweder Paketnamen wie @code{gimp} oder
Store-Objekte wie @file{/gnu/store/…-idutils-4.6} sein.

Wenn ein zu sendendes Paket mit Namen angegeben wird, wird es erst erstellt,
falls es nicht im Store vorliegt, außer @option{--dry-run} wurde angegeben
wurde. Alle gemeinsamen Erstellungsoptionen werden unterstützt (siehe
@ref{Gemeinsame Erstellungsoptionen}).


@node Aufruf von guix container
@section @command{guix container} aufrufen
@cindex container
@cindex @command{guix container}
@quotation Anmerkung
Dieses Werkzeug ist noch experimentell, Stand Version @value{VERSION}. Die
Schnittstelle wird sich in Zukunft grundlegend verändern.
@end quotation

Der Zweck von @command{guix container} ist, in einer isolierten Umgebung
(gemeinhin als „Container“ bezeichnet) laufende Prozesse zu manipulieren,
die typischerweise durch die Befehle @command{guix environment} (siehe
@ref{Aufruf von guix environment}) und @command{guix system container} (siehe
@ref{Aufruf von guix system}) erzeugt werden.

Die allgemeine Syntax lautet:

@example
guix container @var{Aktion} @var{Optionen}…
@end example

Mit @var{Aktion} wird die Operation angegeben, die in der isolierten
Umgebung durchgeführt werden soll, und mit @var{Optionen} werden die
kontextabhängigen Argumente an die Aktion angegeben.

Folgende Aktionen sind verfügbar:

@table @code
@item exec
Führt einen Befehl im Kontext der laufenden isolierten Umgebung aus.

Die Syntax ist:

@example
guix container exec @var{PID} @var{Programm} @var{Argumente}…
@end example

@var{PID} gibt die Prozess-ID der laufenden isolierten Umgebung an. Als
@var{Programm} muss eine ausführbare Datei im Wurzeldateisystem der
isolierten Umgebung angegeben werden. Die @var{Argumente} sind die
zusätzlichen Befehlszeilenoptionen, die an das @var{Programm} übergeben
werden.

Der folgende Befehl startet eine interaktive Anmelde-Shell innerhalb einer
isolierten Guix-Systemumgebung, gestartet durch @command{guix system
container}, dessen Prozess-ID 9001 ist:

@example
guix container exec 9001 /run/current-system/profile/bin/bash --login
@end example

Beachten Sie, dass die @var{PID} nicht der Elternprozess der isolierten
Umgebung sein darf, sondern PID 1 in der isolierten Umgebung oder einer
seiner Kindprozesse sein muss.

@end table

@node Aufruf von guix weather
@section @command{guix weather} aufrufen

Manchmal werden Sie schlecht gelaunt sein, weil es zu wenige Substitute gibt
und die Pakete bei Ihnen selbst erstellt werden müssen (siehe
@ref{Substitute}). Der Befehl @command{guix weather} zeigt einen Bericht
über die Verfügbarkeit von Substituten auf den angegebenen Servern an, damit
Sie sich eine Vorstellung davon machen können, wie es heute um Ihre Laune
bestellt sein wird. Manchmal bekommt man als Nutzer so hilfreiche
Informationen, aber in erster Linie nützt der Befehl den Leuten, die
@command{guix publish} benutzen (siehe @ref{Aufruf von guix publish}).

@cindex Statistik, für Substitute
@cindex Verfügbarkeit von Substituten
@cindex Substitutverfügbarkeit
@cindex Wetter, Substitutverfügbarkeit
Hier ist ein Beispiel für einen Aufruf davon:

@example
$ guix weather --substitute-urls=https://guix.example.org
5.872 Paketableitungen für x86_64-linux berechnen …
Nach 6.128 Store-Objekten von https://guix.example.org suchen …
updating list of substitutes from 'https://guix.example.org'... 100.0%
https://guix.example.org
  43,4% Substitute verfügbar (2.658 von 6.128)
  7.032,5 MiB an Nars (komprimiert)
  19.824,2 MiB auf der Platte (unkomprimiert)
  0,030 Sekunden pro Anfrage (182,9 Sekunden insgesamt)
  33,5 Anfragen pro Sekunde

  9,8% (342 von 3.470) der fehlenden Objekte sind in der Warteschlange
  Mindestens 867 Erstellungen in der Warteschlange
      x86_64-linux: 518 (59,7%)
      i686-linux: 221 (25,5%)
      aarch64-linux: 128 (14,8%)
  Erstellungsgeschwindigkeit: 23,41 Erstellungen pro Stunde
      x86_64-linux: 11,16 Erstellungen pro Stunde
      i686-linux: 6,03 Erstellungen pro Stunde
      aarch64-linux: 6,41 Erstellungen pro Stunde
@end example

@cindex Kontinuierliche Integration, Statistik
Wie Sie sehen können, wird der Anteil unter allen Paketen angezeigt, für die
auf dem Server Substitute verfügbar sind — unabhängig davon, ob Substitute
aktiviert sind, und unabhängig davon, ob der signierende Schlüssel des
Servers autorisiert ist. Es wird auch über die Größe der komprimierten
Archive (die „Nars“) berichtet, die vom Server angeboten werden, sowie über
die Größe, die die zugehörigen Store-Objekte im Store belegen würden (unter
der Annahme, dass Deduplizierung abgeschaltet ist) und über den Durchsatz
des Servers. Der zweite Teil sind Statistiken zur Kontinuierlichen
Integration (englisch „Continuous Integration“, kurz CI), wenn der Server
dies unterstützt. Des Weiteren kann @command{guix weather}, wenn es mit der
Befehlszeilenoption @option{--coverage} aufgerufen wird, „wichtige“
Paketsubstitute, die auf dem Server fehlen, auflisten (siehe unten).

Dazu werden mit @command{guix weather} Anfragen über HTTP(S) zu Metadaten
(@dfn{Narinfos}) für alle relevanten Store-Objekte gestellt. Wie
@command{guix challenge} werden die Signaturen auf den Substituten
ignoriert, was harmlos ist, weil der Befehl nur Statistiken sammelt und
keine Substitute installieren kann.

Die allgemeine Syntax lautet:

@example
guix weather @var{Optionen}… [@var{Pakete}…]
@end example

Wenn keine @var{Pakete} angegeben werden, prüft @command{guix weather} für
@emph{alle} Pakete bzw.@: für die Pakete mit @option{--manifest} angegebenen
Manifest, ob Substitute zur Verfügung stehen. Ansonsten wird es nur für die
angegebenen Pakete geprüft. Es ist auch möglich, die Suche mit
@option{--system} auf bestimmte Systemtypen einzuschränken. Der Rückgabewert
von @command{guix weather} ist @emph{nicht} null, wenn weniger als 100%
Substitute verfügbar sind.

Die verfügbaren Befehlszeilenoptionen folgen.

@table @code
@item --substitute-urls=@var{URLs}
@var{URLs} ist eine leerzeichengetrennte Liste anzufragender
Substitutserver-URLs. Wird diese Befehlszeilenoption weggelassen, wird die
vorgegebene Menge an Substitutservern angefragt.

@item --system=@var{System}
@itemx -s @var{System}
Substitute für das @var{System} anfragen — z.B.@: für
@code{aarch64-linux}. Diese Befehlszeilenoption kann mehrmals angegeben
werden, wodurch @command{guix weather} die Substitute für mehrere
Systemtypen anfragt.

@item --manifest=@var{Datei}
Anstatt die Substitute für alle Pakete anzufragen, werden nur die in der
@var{Datei} angegebenen Pakete erfragt. Die @var{Datei} muss ein
@dfn{Manifest} enthalten, wie bei der Befehlszeilenoption @code{-m} von
@command{guix package} (siehe @ref{Aufruf von guix package}).

Wenn diese Befehlszeilenoption mehrmals wiederholt angegeben wird, werden
die Manifeste aneinandergehängt.

@item --coverage[=@var{Anzahl}]
@itemx -c [@var{Anzahl}]
Einen Bericht über die Substitutabdeckung für Pakete ausgeben, d.h.@: Pakete
mit mindestens @var{Anzahl}-vielen Abhängigen (voreingestellt mindestens
null) anzeigen, für die keine Substitute verfügbar sind. Die abhängigen
Pakete werden selbst nicht aufgeführt: Wenn @var{b} von @var{a} abhängt und
Substitute für @var{a} fehlen, wird nur @var{a} aufgeführt, obwohl dann in
der Regel auch die Substitute für @var{b} fehlen. Das Ergebnis sieht so aus:

@example
$ guix weather --substitute-urls=@value{SUBSTITUTE-URL} -c 10
8.983 Paketableitungen für x86_64-linux berechnen …
Nach 9.343 Store-Objekten von @value{SUBSTITUTE-URL} suchen …
Liste der Substitute von „@value{SUBSTITUTE-URL}“ wird aktualisiert …@: 100.0%
@value{SUBSTITUTE-URL}
  64.7% Substitute verfügbar (6.047 von 9.343)
…
2502 Pakete fehlen auf „https://ci.guix.de.info“ für „x86_64-linux“, darunter sind:
    58  kcoreaddons@@5.49.0      /gnu/store/…-kcoreaddons-5.49.0
    46  qgpgme@@1.11.1           /gnu/store/…-qgpgme-1.11.1
    37  perl-http-cookiejar@@0.008  /gnu/store/…-perl-http-cookiejar-0.008
    …
@end example

Was man hier in diesem Beispiel sehen kann, ist, dass es für
@code{kcoreaddons} und vermutlich die 58 Pakete, die davon abhängen, auf
@code{ci.guix.de.info} keine Substitute gibt; Gleiches gilt für @code{qgpgme}
und die 46 Pakete, die davon abhängen.

Wenn Sie ein Guix-Entwickler sind oder sich um diese Erstellungsfarm
kümmern, wollen Sie sich diese Pakete vielleicht genauer anschauen. Es kann
sein, dass sie schlicht nie erfolgreich erstellt werden können.

@item --display-missing
Eine Liste derjenigen Store-Objekte anzeigen, für die @emph{keine}
Substitute verfügbar sind.
@end table

@node Aufruf von guix processes
@section @command{guix processes} aufrufen

Der Befehl @command{guix processes} kann sich für Entwickler und
Systemadministratoren als nützlich erweisen, besonders auf Maschinen mit
mehreren Nutzern und auf Erstellungsfarmen. Damit werden die aktuellen
Sitzungen (also Verbindungen zum Daemon) sowie Informationen über die
beteiligten Prozesse aufgelistet@footnote{Entfernte Sitzungen, wenn
@command{guix-daemon} mit @option{--listen} unter Angabe eines TCP-Endpunkts
gestartet wurde, werden @emph{nicht} aufgelistet.}. Hier ist ein Beispiel
für die davon gelieferten Informationen:

@example
$ sudo guix processes
SessionPID: 19002
ClientPID: 19090
ClientCommand: guix environment --ad-hoc python

SessionPID: 19402
ClientPID: 19367
ClientCommand: guix publish -u guix-publish -p 3000 -C 9 …

SessionPID: 19444
ClientPID: 19419
ClientCommand: cuirass --cache-directory /var/cache/cuirass …
LockHeld: /gnu/store/…-perl-ipc-cmd-0.96.lock
LockHeld: /gnu/store/…-python-six-bootstrap-1.11.0.lock
LockHeld: /gnu/store/…-libjpeg-turbo-2.0.0.lock
ChildProcess: 20495: guix offload x86_64-linux 7200 1 28800
ChildProcess: 27733: guix offload x86_64-linux 7200 1 28800
ChildProcess: 27793: guix offload x86_64-linux 7200 1 28800
@end example

In diesem Beispiel sehen wir, dass @command{guix-daemon} drei Clients hat:
@command{guix environment}, @command{guix publish} und das Werkzeug Cuirass
zur Kontinuierlichen Integration. Deren Prozesskennung (PID) ist jeweils im
@code{ClientPID}-Feld zu sehen. Das Feld @code{SessionPID} zeigt die PID des
@command{guix-daemon}-Unterprozesses dieser bestimmten Sitzung.

The @code{LockHeld} fields show which store items are currently locked by
this session, which corresponds to store items being built or substituted
(the @code{LockHeld} field is not displayed when @command{guix processes} is
not running as root).  Last, by looking at the @code{ChildProcess} field, we
understand that these three builds are being offloaded (@pxref{Auslagern des Daemons einrichten}).

Die Ausgabe ist im Recutils-Format, damit wir den praktischen
@command{recsel}-Befehl benutzen können, um uns interessierende Sitzungen
auszuwählen (siehe @ref{Selection Expressions,,, recutils, GNU recutils
manual}). Zum Beispiel zeigt dieser Befehl die Befehlszeile und PID des
Clients an, der die Erstellung des Perl-Pakets ausgelöst hat:

@example
$ sudo guix processes | \
    recsel -p ClientPID,ClientCommand -e 'LockHeld ~ "perl"'
ClientPID: 19419
ClientCommand: cuirass --cache-directory /var/cache/cuirass …
@end example

@node Systemkonfiguration
@chapter Systemkonfiguration

@cindex Systemkonfiguration
Guix System unterstützt einen Mechanismus zur konsistenten Konfiguration des
gesamten Systems. Damit meinen wir, dass alle Aspekte der globalen
Systemkonfiguration an einem Ort stehen, d.h.@: die zur Verfügung gestellten
Systemdienste, die Zeitzone und Einstellungen zur Locale (also die Anpassung
an regionale Gepflogenheiten und Sprachen) sowie Benutzerkonten. Sie alle
werden an derselben Stelle deklariert. So eine @dfn{Systemkonfiguration}
kann @dfn{instanziiert}, also umgesetzt, werden.

@c Yes, we're talking of Puppet, Chef, & co. here.  ↑
Einer der Vorteile, die ganze Systemkonfiguration unter die Kontrolle von
Guix zu stellen, ist, dass so transaktionelle Systemaktualisierungen möglich
werden und dass diese rückgängig gemacht werden können, wenn das
aktualisierte System nicht richtig funktioniert (siehe @ref{Funktionalitäten}). Ein
anderer Vorteil ist, dass dieselbe Systemkonfiguration leicht auf einer
anderen Maschine oder zu einem späteren Zeitpunkt benutzt werden kann, ohne
dazu eine weitere Schicht administrativer Werkzeuge über den systemeigenen
Werkzeugen einsetzen zu müssen.

In diesem Abschnitt wird dieser Mechanismus beschrieben. Zunächst betrachten
wir ihn aus der Perspektive eines Administrators. Dabei wird erklärt, wie
das System konfiguriert und instanziiert werden kann. Dann folgt eine
Demonstration, wie der Mechanismus erweitert werden kann, etwa um neue
Systemdienste zu unterstützen.

@menu
* Das Konfigurationssystem nutzen::  Ihr GNU-System anpassen.
* „operating-system“-Referenz::  Details der 
                                       Betriebssystem-Deklarationen.
* Dateisysteme::             Die Dateisystemeinbindungen konfigurieren.
* Zugeordnete Geräte::      Näheres zu blockorientierten Speichermedien.
* Benutzerkonten::           Benutzerkonten festlegen.
* Tastaturbelegung::         Wie das System Tastendrücke interpretiert.
* Locales::                  Sprache und kulturelle Konventionen.
* Dienste::                  Systemdienste festlegen.
* Setuid-Programme::         Mit Administratorrechten startende Programme.
* X.509-Zertifikate::        HTTPS-Server authentifizieren.
* Name Service Switch::      Den Name Service Switch von libc konfigurieren.
* Initiale RAM-Disk::        Linux-libre hochfahren.
* Bootloader-Konfiguration::  Den Bootloader konfigurieren.
* Aufruf von guix system::   Instanziierung einer Systemkonfiguration.
* Aufruf von guix deploy::   Eine Systemkonfiguration auf einen entfernten 
                               Rechner aufspielen.
* Guix in einer VM starten::  Wie man „Guix System“ in einer virtuellen 
                                Maschine startet.
* Dienste definieren::       Neue Dienstdefinitionen hinzufügen.
@end menu

@node Das Konfigurationssystem nutzen
@section Das Konfigurationssystem nutzen

Das Betriebssystem können Sie konfigurieren, indem Sie eine
@code{operating-system}-Deklaration in einer Datei speichern, die Sie dann
dem Befehl @command{guix system} übergeben (siehe @ref{Aufruf von guix system}). Eine einfache Konfiguration mit den vorgegebenen Systemdiensten
und dem vorgegebenen Linux-Libre als Kernel und mit einer initialen RAM-Disk
und einem Bootloader sieht so aus:

@findex operating-system
@lisp
@include os-config-bare-bones.texi
@end lisp

Dieses Beispiel sollte selbsterklärend sein. Manche der Felder oben, wie
etwa @code{host-name} und @code{bootloader}, müssen angegeben werden. Andere
sind optional, wie etwa @code{packages} und @code{services}, sind optional;
werden sie nicht angegeben, nehmen sie einen Vorgabewert an.

Im Folgenden werden die Effekte von einigen der wichtigsten Feldern
erläutert (siehe @ref{„operating-system“-Referenz} für Details zu allen
verfügbaren Feldern), dann wird beschrieben, wie man das Betriebssystem mit
@command{guix system} @dfn{instanziieren} kann.

@unnumberedsubsec Bootloader

@cindex Legacy-Boot, auf Intel-Maschinen
@cindex BIOS-Boot, auf Intel-Maschinen
@cindex UEFI-Boot
@cindex EFI-Boot
Das @code{bootloader}-Feld beschreibt, mit welcher Methode Ihr System
„gebootet“ werden soll. Maschinen, die auf Intel-Prozessoren basieren,
können im alten „Legacy“-BIOS-Modus gebootet werden, wie es im obigen
Beispiel der Fall wäre. Neuere Maschinen benutzen stattdessen das
@dfn{Unified Extensible Firmware Interface} (UEFI) zum Booten. In diesem
Fall sollte das @code{bootloader}-Feld in etwa so aussehen:

@lisp
(bootloader-configuration
  (bootloader grub-efi-bootloader)
  (target "/boot/efi"))
@end lisp

Siehe den Abschnitt @ref{Bootloader-Konfiguration} für weitere Informationen
zu den verfügbaren Konfigurationsoptionen.

@unnumberedsubsec global sichtbare Pakete

@vindex %base-packages
The @code{packages} field lists packages that will be globally visible on
the system, for all user accounts---i.e., in every user's @env{PATH}
environment variable---in addition to the per-user profiles (@pxref{Aufruf von guix package}).  The @code{%base-packages} variable provides all the tools
one would expect for basic user and administrator tasks---including the GNU
Core Utilities, the GNU Networking Utilities, the GNU Zile lightweight text
editor, @command{find}, @command{grep}, etc.  The example above adds
GNU@tie{}Screen to those, taken from the @code{(gnu packages screen)} module
(@pxref{Paketmodule}).  The @code{(list package output)} syntax can be
used to add a specific output of a package:

@lisp
(use-modules (gnu packages))
(use-modules (gnu packages dns))

(operating-system
  ;; …
  (packages (cons (list bind "utils")
                  %base-packages)))
@end lisp

@findex specification->package
Sich auf Pakete anhand ihres Variablennamens zu beziehen, wie oben bei
@code{bind}, hat den Vorteil, dass der Name eindeutig ist; Tippfehler werden
direkt als „unbound variables“ gemeldet. Der Nachteil ist, dass man wissen
muss, in welchem Modul ein Paket definiert wird, um die Zeile mit
@code{use-package-modules} entsprechend zu ergänzen. Um dies zu vermeiden,
kann man auch die Prozedur @code{specification->package} aus dem Modul
@code{(gnu packages)} aufrufen, welche das einem angegebenen Namen oder
Name-Versions-Paar zu Grunde liegende Paket liefert:

@lisp
(use-modules (gnu packages))

(operating-system
  ;; …
  (packages (append (map specification->package
                         '("tcpdump" "htop" "gnupg@@2.0"))
                    %base-packages)))
@end lisp

@unnumberedsubsec Systemdienste

@cindex services
@vindex %base-services
Das Feld @code{services} listet @dfn{Systemdienste} auf, die zur Verfügung
stehen sollen, wenn das System startet (siehe @ref{Dienste}). Die
@code{operating-system}-Deklaration oben legt fest, dass wir neben den
grundlegenden Basis-Diensten auch wollen, dass der
OpenSSH-Secure-Shell-Daemon auf Port 2222 lauscht (siehe @ref{Netzwerkdienste, @code{openssh-service-type}}). Intern sorgt der
@code{openssh-service-type} dafür, dass @code{sshd} mit den richtigen
Befehlszeilenoptionen aufgerufen wird, je nach Systemkonfiguration werden
auch für dessen Betrieb nötige Konfigurationsdateien erstellt (siehe
@ref{Dienste definieren}).

@cindex Anpassung, von Diensten
@findex modify-services
Gelegentlich werden Sie die Basis-Dienste nicht einfach so, wie sie sind,
benutzen, sondern anpassen wollen. Benutzen Sie @code{modify-services}
(siehe @ref{Service-Referenz, @code{modify-services}}), um die Liste der
Basis-Dienste zu modifizieren.

Wenn Sie zum Beispiel @code{guix-daemon} und Mingetty (das Programm, womit
Sie sich auf der Konsole anmelden) in der @code{%base-services}-Liste
modifizieren möchten (siehe @ref{Basisdienste, @code{%base-services}}),
schreiben Sie das Folgende in Ihre Betriebssystemdeklaration:

@lisp
(define %my-services
  ;; Meine ganz eigene Liste von Diensten.
  (modify-services %base-services
    (guix-service-type config =>
                       (guix-configuration
                        (inherit config)
                        (use-substitutes? #f)
                        (extra-options '("--gc-keep-derivations"))))
    (mingetty-service-type config =>
                           (mingetty-configuration
                            (inherit config)))))

(operating-system
  ;; …
  (services %my-services))
@end lisp

Dadurch ändert sich die Konfiguration — d.h.@: die Dienst-Parameter — der
@code{guix-service-type}-Instanz und die aller
@code{mingetty-service-type}-Instanzen in der
@code{%base-services}-Liste. Das funktioniert so: Zunächst arrangieren wir,
dass die ursprüngliche Konfiguration an den Bezeichner @code{config} im
@var{Rumpf} gebunden wird, dann schreiben wir den @var{Rumpf}, damit er zur
gewünschten Konfiguration ausgewertet wird. Beachten Sie insbesondere, wie
wir mit @code{inherit} eine neue Konfiguration erzeugen, die dieselben Werte
wie die alte Konfiguration hat, aber mit ein paar Modifikationen.

@cindex verschlüsselte Partition
Die Konfiguration für typische Nutzung auf Heim- und Arbeitsrechnern, mit
einer verschlüsselten Partition für das Wurzeldateisystem, einem
X11-Anzeigeserver, GNOME und Xfce (Benutzer können im Anmeldebildschirm
auswählen, welche dieser Arbeitsumgebungen sie möchten, indem sie die Taste
@kbd{F1} drücken), Netzwerkverwaltung, Verwaltungswerkzeugen für den
Energieverbrauch, und Weiteres, würde so aussehen:

@lisp
@include os-config-desktop.texi
@end lisp

Ein grafisches System mit einer Auswahl an leichtgewichtigen
Fenster-Managern statt voll ausgestatteten Arbeitsumgebungen würde so
aussehen:

@lisp
@include os-config-lightweight-desktop.texi
@end lisp

Dieses Beispiel bezieht sich auf das Dateisystem hinter @file{/boot/efi}
über dessen UUID, @code{1234-ABCD}. Schreiben Sie statt dieser UUID die
richtige UUID für Ihr System, wie sie der Befehl @command{blkid} liefert.

Im Abschnitt @ref{Desktop-Dienste} finden Sie eine genaue Liste der unter
@code{%desktop-services} angebotenen Dienste. Der Abschnitt @ref{X.509-Zertifikate} hat Hintergrundinformationen über das @code{nss-certs}-Paket,
das hier benutzt wird.

Beachten Sie, dass @code{%desktop-services} nur eine Liste von die Dienste
repräsentierenden service-Objekten ist. Wenn Sie Dienste daraus entfernen
möchten, können Sie dazu die Prozeduren zum Filtern von Listen benutzen
(siehe @ref{SRFI-1 Filtering and Partitioning,,, guile, GNU Guile Reference
Manual}). Beispielsweise liefert der folgende Ausdruck eine Liste mit allen
Diensten von @code{%desktop-services} außer dem Avahi-Dienst.

@lisp
(remove (lambda (service)
          (eq? (service-kind service) avahi-service-type))
        %desktop-services)
@end lisp

@unnumberedsubsec Das System instanziieren

Angenommen, Sie haben die @code{operating-system}-Deklaration in einer Datei
@file{my-system-config.scm} gespeichert, dann instanziiert der Befehl
@command{guix system reconfigure my-system-config.scm} diese Konfiguration
und macht sie zum voreingestellten GRUB-Boot-Eintrag (siehe @ref{Aufruf von guix system}).

Der normale Weg, die Systemkonfiguration nachträglich zu ändern, ist, die
Datei zu aktualisieren und @command{guix system reconfigure} erneut
auszuführen. Man sollte nie die Dateien in @file{/etc} bearbeiten oder den
Systemzustand mit Befehlen wie @command{useradd} oder @command{grub-install}
verändern. Tatsächlich müssen Sie das ausdrücklich vermeiden, sonst verfällt
nicht nur Ihre Garantie, sondern Sie können Ihr System auch nicht mehr auf
eine alte Version des Systems zurücksetzen, falls das jemals notwendig wird.

@cindex Zurücksetzen, des Betriebssystems
Zurücksetzen bezieht sich hierbei darauf, dass jedes Mal, wenn Sie
@command{guix system reconfigure} ausführen, eine neue @dfn{Generation} des
Systems erzeugt wird — ohne vorherige Generationen zu verändern. Alte
Systemgenerationen bekommen einen Eintrag im Boot-Menü des Bootloaders,
womit Sie alte Generationen beim Starten des Rechners auswählen können, wenn
mit der neuesten Generation etwas nicht stimmt. Eine beruhigende
Vorstellung, oder? Der Befehl @command{guix system list-generations} führt
die auf der Platte verfügbaren Systemgenerationen auf. Es ist auch möglich,
das System mit den Befehlen @command{guix system roll-back} und
@command{guix system switch-generation} zurückzusetzen.

Obwohl der Befehl @command{guix system reconfigure} vorherige Generationen
nicht verändern wird, müssen Sie Acht geben, dass wenn die momentan aktuelle
Generation nicht die neueste ist (z.B.@: nach einem Aufruf von @command{guix
system roll-back}), weil @command{guix system reconfigure} alle neueren
Generationen überschreibt (siehe @ref{Aufruf von guix system}).

@unnumberedsubsec Die Programmierschnittstelle

Auf der Ebene von Scheme wird der Großteil der
@code{operating-system}-Deklaration mit der folgenden monadischen Prozedur
instanziiert (siehe @ref{Die Store-Monade}):

@deffn {Monadische Prozedur} operating-system-derivation os
Liefert eine Ableitung, mit der ein @code{operating-system}-Objekt @var{os}
erstellt wird (siehe @ref{Ableitungen}).

Die Ausgabe der Ableitung ist ein einzelnes Verzeichnis mit Verweisen auf
alle Pakete, Konfigurationsdateien und andere unterstützenden Dateien, die
nötig sind, um @var{os} zu instanziieren.
@end deffn

Diese Prozedur wird vom Modul @code{(gnu system)} angeboten. Zusammen mit
@code{(gnu services)} (siehe @ref{Dienste}) deckt dieses Modul den Kern von
„Guix System“ ab. Schauen Sie es sich mal an!


@node „operating-system“-Referenz
@section @code{operating-system}-Referenz

Dieser Abschnitt fasst alle Optionen zusammen, die für
@code{operating-system}-Deklarationen zur Verfügung stehen (siehe @ref{Das Konfigurationssystem nutzen}).

@deftp {Datentyp} operating-system
Der die Betriebssystemkonfiguration repräsentierende Datentyp. Damit meinen
wir die globale Konfiguration des Systems und nicht die, die sich nur auf
einzelne Nutzer bezieht (siehe @ref{Das Konfigurationssystem nutzen}).

@table @asis
@item @code{kernel} (default: @code{linux-libre})
The package object of the operating system kernel to use@footnote{Currently
only the Linux-libre kernel is fully supported.  Using GNU@tie{}mach in
combination with a @code{hurd} is experimental and only available when
building a vm-image.}.

@cindex hurd
@item @code{hurd} (default: @code{#f})
The hurd to be started by the kernel.  This is required to build an
experimental vm-image for the Hurd and requires using @code{kernel}
GNU@tie{}mach as well as other specific operating system overrides.

@item @code{kernel-loadable-modules} (Vorgabe: '())
Eine Liste von Objekten (normalerweise Pakete), aus denen Kernel-Module
geladen werden können, zum Beispiel @code{(list ddcci-driver-linux)}.

@item @code{kernel-arguments} (default: @code{%default-kernel-arguments})
Eine Liste aus Zeichenketten oder G-Ausdrücken, die für zusätzliche
Argumente an den Kernel stehen, die ihm auf seiner Befehlszeile übergeben
werden — wie z.B.@: @code{("console=ttyS0")}.

@item @code{bootloader}
Das Konfigurationsobjekt für den Bootloader, mit dem das System gestartet
wird. Siehe @ref{Bootloader-Konfiguration}.

@item @code{label}
Diese Bezeichnung (eine Zeichenkette) wird für den Menüeintrag im Bootloader
verwendet. Die Vorgabe ist eine Bezeichnung, die den Namen des Kernels und
seine Version enthält.

@item @code{keyboard-layout} (Vorgabe: @code{#f})
Dieses Feld gibt an, welche Tastaturbelegung auf der Konsole benutzt werden
soll. Es kann entweder auf @code{#f} gesetzt sein, damit die voreingestellte
Tastaturbelegung benutzt wird (in der Regel ist diese „US English“), oder
ein @code{<keyboard-layout>}-Verbundsobjekt sein.

Diese Tastaturbelegung wird benutzt, sobald der Kernel gebootet wurde. Diese
Tastaturbelegung wird zum Beispiel auch verwendet, wenn Sie eine Passphrase
eintippen, falls sich Ihr Wurzeldateisystem auf einem mit
@code{luks-device-mapping} zugeordneten Gerät befindet (siehe @ref{Zugeordnete Geräte}).

@quotation Anmerkung
Damit wird @emph{nicht} angegeben, welche Tastaturbelegung der Bootloader
benutzt, und auch nicht, welche der grafische Anzeigeserver verwendet. Siehe
@ref{Bootloader-Konfiguration} für Informationen darüber, wie Sie die
Tastaturbelegung des Bootloaders angeben können. Siehe @ref{X Window} für
Informationen darüber, wie Sie die Tastaturbelegung angeben können, die das
X-Fenstersystem verwendet.
@end quotation

@item @code{initrd-modules} (Vorgabe: @code{%base-initrd-modules})
@cindex initrd
@cindex initiale RAM-Disk
Die Liste der Linux-Kernel-Module, die in der initialen RAM-Disk zur
Verfügung stehen sollen. Siehe @ref{Initiale RAM-Disk}.

@item @code{initrd} (Vorgabe: @code{base-initrd})
Eine Prozedur, die eine initiale RAM-Disk für den Linux-Kernel
liefert. Dieses Feld gibt es, damit auch sehr systemnahe Anpassungen
vorgenommen werden können, aber für die normale Nutzung sollte man es kaum
brauchen. Siehe @ref{Initiale RAM-Disk}.

@item @code{firmware} (Vorgabe: @code{%base-firmware})
@cindex Firmware
Eine Liste der Firmware-Pakete, die vom Betriebssystem-Kernel geladen werden
können.

Vorgegeben ist, dass für Atheros- und Broadcom-basierte WLAN-Geräte nötige
Firmware geladen werden kann (genauer jeweils die Linux-libre-Module
@code{ath9k} und @code{b43-open}). Siehe den Abschnitt @ref{Hardware-Überlegungen} für mehr Informationen zu unterstützter Hardware.

@item @code{host-name}
Der Hostname

@item @code{hosts-file}
@cindex hosts-Datei
Ein dateiartiges Objekt (siehe @ref{G-Ausdrücke, dateiartige Objekte}),
das für @file{/etc/hosts} benutzt werden soll (siehe @ref{Host Names,,,
libc, The GNU C Library Reference Manual}). Der Vorgabewert ist eine Datei
mit Einträgen für @code{localhost} und @var{host-name}.

@item @code{mapped-devices} (Vorgabe: @code{'()})
Eine Liste zugeordneter Geräte („mapped devices“). Siehe @ref{Zugeordnete Geräte}.

@item @code{file-systems}
Eine Liste von Dateisystemen. Siehe @ref{Dateisysteme}.

@item @code{swap-devices} (Vorgabe: @code{'()})
@cindex Swap-Geräte
Eine Liste von Zeichenketten, die Geräte identifizieren oder als
„Swap-Speicher“ genutzte Dateien identifizieren (siehe @ref{Memory
Concepts,,, libc, The GNU C Library Reference Manual}). Beispiele wären etwa
@code{'("/dev/sda3")} oder @code{'("/swapdatei")}. Es ist möglich, eine
Swap-Datei auf dem Dateisystem eines zugeordneten Geräts anzugeben, sofern
auch die Gerätezuordnung und das Dateisystem mit angegeben werden. Siehe
@ref{Zugeordnete Geräte} und @ref{Dateisysteme}.

@item @code{users} (Vorgabe: @code{%base-user-accounts})
@itemx @code{groups} (Vorgabe: @code{%base-groups})
Liste der Benutzerkonten und Benutzergruppen. Siehe @ref{Benutzerkonten}.

Wenn in der @code{users}-Liste kein Benutzerkonto mit der UID-Kennung@tie{}0
aufgeführt wird, wird automatisch für den Administrator ein
„root“-Benutzerkonto mit UID-Kennung@tie{}0 hinzugefügt.

@item @code{skeletons} (Vorgabe: @code{(default-skeletons)})
Eine Liste von Tupeln aus je einem Ziel-Dateinamen und einem dateiähnlichen
Objekt (siehe @ref{G-Ausdrücke, dateiartige Objekte}). Diese Objekte
werden als Skeleton-Dateien im Persönlichen Verzeichnis („Home“-Verzeichnis)
jedes neuen Benutzerkontos angelegt.

Ein gültiger Wert könnte zum Beispiel so aussehen:

@lisp
`((".bashrc" ,(plain-file "bashrc" "echo Hallo\n"))
  (".guile" ,(plain-file "guile"
                         "(use-modules (ice-9 readline))
                          (activate-readline)")))
@end lisp

@item @code{issue} (Vorgabe: @code{%default-issue})
Eine Zeichenkette, die als Inhalt der Datei @file{/etc/issue} verwendet
werden soll, der jedes Mal angezeigt wird, wenn sich ein Nutzer auf einer
Textkonsole anmeldet.

@item @code{packages} (Vorgabe: @code{%base-packages})
Die Menge der Pakete, die ins globale Profil installiert werden sollen,
welches unter @file{/run/current-system/profile} zu finden ist.

Die vorgegebene Paketmenge umfasst zum Kern des Systems gehörende Werkzeuge
(„core utilities“). Es ist empfehlenswert, nicht zum Kern gehörende
Werkzeuge („non-core“) stattdessen in Nutzerprofile zu installieren (siehe
@ref{Aufruf von guix package}).

@item @code{timezone}
Eine Zeichenkette, die die Zeitzone bezeichnet, wie z.B.@:
@code{"Europe/Berlin"}.

Mit dem Befehl @command{tzselect} können Sie herausfinden, welche
Zeichenkette der Zeitzone Ihrer Region entspricht. Wenn Sie eine ungültige
Zeichenkette angeben, schlägt @command{guix system} fehl.

@item @code{locale} (Vorgabe: @code{"en_US.utf8"})
Der Name der als Voreinstellung zu verwendenden Locale (siehe @ref{Locale
Names,,, libc, The GNU C Library Reference Manual}). Siehe @ref{Locales} für
weitere Informationen.

@item @code{locale-definitions} (Vorgabe: @code{%default-locale-definitions})
Die Liste der Locale-Definitionen, die kompiliert werden sollen und dann im
laufenden System benutzt werden können. Siehe @ref{Locales}.

@item @code{locale-libcs} (Vorgabe: @code{(list @var{glibc})})
Die Liste der GNU-libc-Pakete, deren Locale-Daten und -Werkzeuge zum
Erzeugen der Locale-Definitionen verwendet werden sollen. Siehe
@ref{Locales} für eine Erläuterung der Kompatibilitätsauswirkungen,
deretwegen man diese Option benutzen wollen könnte.

@item @code{name-service-switch} (Vorgabe: @code{%default-nss})
Die Konfiguration des Name Service Switch (NSS) der libc — ein
@code{<name-service-switch>}-Objekt. Siehe @ref{Name Service Switch} für
Details.

@item @code{services} (Vorgabe: @code{%base-services})
Eine Liste von „service“-Objekten, die die Systemdienste
repräsentieren. Siehe @ref{Dienste}.

@cindex essenzielle Dienste
@item @code{essential-services} (Vorgabe: …)
Die Liste „essenzieller Dienste“ — d.h.@: Dinge wie Instanzen von
@code{system-service-type} und @code{host-name-service-type} (siehe
@ref{Service-Referenz}), die aus der Betriebssystemdefinition an sich
abgeleitet werden. Als normaler Benutzer sollten Sie dieses Feld
@emph{niemals} ändern müssen.

@item @code{pam-services} (Vorgabe: @code{(base-pam-services)})
@cindex PAM
@cindex Pluggable Authentication Modules
@c FIXME: Add xref to PAM services section.
Dienste für @dfn{Pluggable Authentication Modules} (PAM) von Linux.

@item @code{setuid-programs} (default: @code{%setuid-programs})
Eine Liste von Zeichenketten liefernden G-Ausdrücken, die setuid-Programme
bezeichnen. Siehe @ref{Setuid-Programme}.

@item @code{sudoers-file} (default: @code{%sudoers-specification})
@cindex sudoers-Datei
Der Inhalt der Datei @file{/etc/sudoers} als ein dateiähnliches Objekt
(siehe @ref{G-Ausdrücke, @code{local-file} und @code{plain-file}}).

Diese Datei gibt an, welche Nutzer den Befehl @command{sudo} benutzen
dürfen, was sie damit tun und welche Berechtigungen sie so erhalten
können. Die Vorgabe ist, dass nur der Administratornutzer @code{root} und
Mitglieder der Benutzergruppe @code{wheel} den @code{sudo}-Befehl verwenden
dürfen.

@end table

@deffn {Scheme-Syntax} this-operating-system
Wenn dies im @emph{lexikalischen Geltungsbereich} der Definition eines
Feldes im Betriebssystem steht, bezieht sich dieser Bezeichner auf das
Betriebssystem, das gerade definiert wird.

Das folgende Beispiel zeigt, wie man auf das Betriebssystem, das gerade
definiert wird, verweist, während man die Definition des @code{label}-Felds
schreibt:

@lisp
(use-modules (gnu) (guix))

(operating-system
  ;; …
  (label (package-full-name
          (operating-system-kernel this-operating-system))))
@end lisp

Es ist ein Fehler, außerhalb einer Betriebssystemdefinition auf
@code{this-operating-system} zu verweisen.
@end deffn

@end deftp

@node Dateisysteme
@section Dateisysteme

Die Liste der Dateisysteme, die eingebunden werden sollen, steht im
@code{file-systems}-Feld der Betriebssystemdeklaration (siehe @ref{Das Konfigurationssystem nutzen}). Jedes Dateisystem wird mit der
@code{file-system}-Form deklariert, etwa so:

@lisp
(file-system
  (mount-point "/home")
  (device "/dev/sda3")
  (type "ext4"))
@end lisp

Wie immer müssen manche Felder angegeben werden — die, die im Beispiel oben
stehen —, während andere optional sind. Die Felder werden nun beschrieben.

@deftp {Datentyp} file-system
Objekte dieses Typs repräsentieren einzubindende Dateisysteme. Sie weisen
folgende Komponenten auf:

@table @asis
@item @code{type}
Eine Zeichenkette, die den Typ des Dateisystems spezifiziert, z.B.@:
@code{"ext4"}.

@item @code{mount-point}
Der Einhängepunkt, d.h.@: der Pfad, an dem das Dateisystem eingebunden
werden soll.

@item @code{device}
Hiermit wird die „Quelle“ des Dateisystems bezeichnet. Sie kann eines von
drei Dingen sein: die Bezeichnung („Labels“) eines Dateisystems, die
UUID-Kennung des Dateisystems oder der Name eines @file{/dev}-Knotens. Mit
Bezeichnungen und UUIDs kann man Dateisysteme benennen, ohne den Gerätenamen
festzuschreiben@footnote{Beachten Sie: Obwohl es verführerisch ist, mit
@file{/dev/disk/by-uuid} und ähnlichen Gerätenamen dasselbe Resultat
bekommen zu wollen, raten wir davon ab: Diese speziellen Gerätenamen werden
erst vom udev-Daemon erzeugt und sind, wenn die Geräte eingebunden werden,
vielleicht noch nicht verfügbar.}.

@findex file-system-label
Dateisystem-Bezeichnungen („Labels“) werden mit der Prozedur
@code{file-system-label} erzeugt und UUID-Kennungen werden mit @code{uuid}
erzeugt, während Knoten in @file{/dev} mit ihrem Pfad als einfache
Zeichenketten aufgeführt werden. Hier ist ein Beispiel, wie wir ein
Dateisystem anhand seiner Bezeichnung aufführen, wie sie vom Befehl
@command{e2label} angezeigt wird:

@lisp
(file-system
  (mount-point "/home")
  (type "ext4")
  (device (file-system-label "my-home")))
@end lisp

@findex uuid
UUID-Kennungen werden mit der @code{uuid}-Form von ihrer Darstellung als
Zeichenkette (wie sie vom Befehl @command{tune2fs -l} angezeigt wird)
konvertiert@footnote{Die @code{uuid}-Form nimmt 16-Byte-UUIDs entgegen, wie
sie in @uref{https://tools.ietf.org/html/rfc4122, RFC@tie{}4122} definiert
sind. Diese Form der UUID wird unter anderem von der ext2-Familie von
Dateisystemen verwendet, sie unterscheidet sich jedoch zum Beispiel von den
„UUID“ genannten Kennungen, wie man sie bei FAT-Dateisystemen findet.} wie
hier:

@lisp
(file-system
  (mount-point "/home")
  (type "ext4")
  (device (uuid "4dab5feb-d176-45de-b287-9b0a6e4c01cb")))
@end lisp

Wenn die Quelle eines Dateisystems ein zugeordnetes Gerät (siehe @ref{Zugeordnete Geräte}) ist, @emph{muss} sich das @code{device}-Feld auf den zugeordneten
Gerätenamen beziehen — z.B.@: @file{"/dev/mapper/root-partition"}. Das ist
nötig, damit das System weiß, dass das Einbinden des Dateisystems davon
abhängt, die entsprechende Gerätezuordnung hergestellt zu haben.

@item @code{flags} (Vorgabe: @code{'()})
Eine Liste von Symbolen, die Einbinde-Flags („mount flags“)
bezeichnen. Erkannt werden unter anderem @code{read-only},
@code{bind-mount}, @code{no-dev} (Zugang zu besonderen Dateien verweigern),
@code{no-suid} (setuid- und setgid-Bits ignorieren), @code{no-atime}
(Dateizugriffs-Zeitstempel @emph{nicht} aktualisieren), @code{strict-atime}
(Dateizugriffs-Zeitstempel immer aktualisieren), @code{lazy-time}
(Zeitstempel nur auf zwischengespeicherten Datei-Inodes im Arbeitsspeicher
aktualisieren) und @code{no-exec} (Programmausführungen verweigern). Siehe
@ref{Mount-Unmount-Remount,,, libc, The GNU C Library Reference Manual} für
mehr Informationen zu diesen Einbinde-Optionen.

@item @code{options} (Vorgabe: @code{#f})
This is either @code{#f}, or a string denoting mount options passed to the
file system driver.  @xref{Mount-Unmount-Remount,,, libc, The GNU C Library
Reference Manual}, for details and run @command{man 8 mount} for options for
various file systems.  Note that the @code{file-system-options->alist} and
@code{alist->file-system-options} procedures from @code{(gnu system
file-systems)} can be used to convert file system options given as an
association list to the string representation, and vice-versa.

@item @code{mount?} (Vorgabe: @code{#t})
Dieser Wert zeigt an, ob das Dateisystem automatisch eingebunden werden
soll, wenn das System gestartet wird. Ist der Wert @code{#f}, dann erhält
das Dateisystem nur einen Eintrag in der Datei @file{/etc/fstab} (welche vom
@command{mount}-Befehl zum Einbinden gelesen wird), es wird aber nicht
automatisch eingebunden.

@item @code{needed-for-boot?} (Vorgabe: @code{#f})
Dieser boolesche Wert gibt an, ob das Dateisystem zum Hochfahren des Systems
notwendig ist. In diesem Fall wird das Dateisystem eingebunden, wenn die
initiale RAM-Disk (initrd) geladen wird. Für zum Beispiel das
Wurzeldateisystem ist dies ohnehin immer der Fall.

@item @code{check?} (Vorgabe: @code{#t})
Dieser boolesche Wert sagt aus, ob das Dateisystem vor dem Einbinden auf
Fehler hin geprüft werden soll.

@item @code{create-mount-point?} (Vorgabe: @code{#f})
Steht dies auf wahr, wird der Einhängepunkt vor dem Einbinden erstellt, wenn
er noch nicht existiert.

@item @code{dependencies} (Vorgabe: @code{'()})
Dies ist eine Liste von @code{<file-system>}- oder
@code{<mapped-device>}-Objekten, die Dateisysteme repräsentieren, die vor
diesem Dateisystem eingebunden oder zugeordnet werden müssen (und nach
diesem ausgehängt oder geschlossen werden müssen).

Betrachten Sie zum Beispiel eine Hierarchie von Einbindungen:
@file{/sys/fs/cgroup} ist eine Abhängigkeit von @file{/sys/fs/cgroup/cpu}
und @file{/sys/fs/cgroup/memory}.

Ein weiteres Beispiel ist ein Dateisystem, was von einem zugeordneten Gerät
abhängt, zum Beispiel zur Verschlüsselung einer Partition (siehe @ref{Zugeordnete Geräte}).
@end table
@end deftp

Das Modul @code{(gnu system file-systems)} exportiert die folgenden
nützlichen Variablen.

@defvr {Scheme-Variable} %base-file-systems
These are essential file systems that are required on normal systems, such
as @code{%pseudo-terminal-file-system} and @code{%immutable-store} (see
below).  Operating system declarations should always contain at least these.
@end defvr

@defvr {Scheme-Variable} %pseudo-terminal-file-system
Das als @file{/dev/pts} einzubindende Dateisystem. Es unterstützt über
@code{openpty} und ähnliche Funktionen erstellte @dfn{Pseudo-Terminals}
(siehe @ref{Pseudo-Terminals,,, libc, The GNU C Library Reference
Manual}). Pseudo-Terminals werden von Terminal-Emulatoren wie
@command{xterm} benutzt.
@end defvr

@defvr {Scheme-Variable} %shared-memory-file-system
Dieses Dateisystem wird als @file{/dev/shm} eingebunden, um Speicher
zwischen Prozessen teilen zu können (siehe @ref{Memory-mapped I/O,
@code{shm_open},, libc, The GNU C Library Reference Manual}).
@end defvr

@defvr {Scheme-Variable} %immutable-store
Dieses Dateisystem vollzieht einen „bind mount“ des @file{/gnu/store}, um
ihn für alle Nutzer einschließlich des Administratornutzers @code{root} nur
lesbar zu machen, d.h.@: Schreibrechte zu entziehen. Dadurch kann als
@code{root} ausgeführte Software, oder der Systemadministrator, nicht aus
Versehen den Store modifizieren.

Der Daemon kann weiterhin in den Store schreiben, indem er ihn selbst mit
Schreibrechten in seinem eigenen „Namensraum“ einbindet.
@end defvr

@defvr {Scheme-Variable} %binary-format-file-system
Das @code{binfmt_misc}-Dateisystem, durch das beliebige Dateitypen als
ausführbare Dateien auf der Anwendungsebene (dem User Space) zugänglich
gemacht werden können. Es setzt voraus, dass das Kernel-Modul
@code{binfmt.ko} geladen wurde.
@end defvr

@defvr {Scheme-Variable} %fuse-control-file-system
Das @code{fusectl}-Dateisystem, womit „unprivilegierte“ Nutzer ohne
besondere Berechtigungen im User Space FUSE-Dateisysteme einbinden und
aushängen können. Dazu muss das Kernel-Modul @code{fuse.ko} geladen sein.
@end defvr

@node Btrfs file system
@subsection Btrfs file system

The Btrfs has special features, such as subvolumes, that merit being
explained in more details.  The following section attempts to cover basic as
well as complex uses of a Btrfs file system with the Guix System.

In its simplest usage, a Btrfs file system can be described, for example,
by:

@lisp
(file-system
  (mount-point "/home")
  (type "btrfs")
  (device (file-system-label "my-home")))
@end lisp

The example below is more complex, as it makes use of a Btrfs subvolume,
named @code{rootfs}.  The parent Btrfs file system is labeled
@code{my-btrfs-pool}, and is located on an encrypted device (hence the
dependency on @code{mapped-devices}):

@lisp
(file-system
  (device (file-system-label "my-btrfs-pool"))
  (mount-point "/")
  (type "btrfs")
  (options "subvol=rootfs")
  (dependencies mapped-devices))
@end lisp

Some bootloaders, for example GRUB, only mount a Btrfs partition at its top
level during the early boot, and rely on their configuration to refer to the
correct subvolume path within that top level.  The bootloaders operating in
this way typically produce their configuration on a running system where the
Btrfs partitions are already mounted and where the subvolume information is
readily available.  As an example, @command{grub-mkconfig}, the
configuration generator command shipped with GRUB, reads
@file{/proc/self/mountinfo} to determine the top-level path of a subvolume.

The Guix System produces a bootloader configuration using the operating
system configuration as its sole input; it is therefore necessary to extract
the subvolume name on which @file{/gnu/store} lives (if any)  from that
operating system configuration.  To better illustrate, consider a subvolume
named 'rootfs' which contains the root file system data.  In such situation,
the GRUB bootloader would only see the top level of the root Btrfs
partition, e.g.:

@example
/                   (top level)
├── rootfs          (subvolume directory)
    ├── gnu         (normal directory)
        ├── store   (normal directory)
[...]
@end example

Thus, the subvolume name must be prepended to the @file{/gnu/store} path of
the kernel, initrd binaries and any other files referred to in the GRUB
configuration that must be found during the early boot.

The next example shows a nested hierarchy of subvolumes and directories:

@example
/                   (top level)
├── rootfs          (subvolume)
    ├── gnu         (normal directory)
        ├── store   (subvolume)
[...]
@end example

This scenario would work without mounting the 'store' subvolume.  Mounting
'rootfs' is sufficient, since the subvolume name matches its intended mount
point in the file system hierarchy.  Alternatively, the 'store' subvolume
could be referred to by setting the @code{subvol} option to either
@code{/rootfs/gnu/store} or @code{rootfs/gnu/store}.

Finally, a more contrived example of nested subvolumes:

@example
/                           (top level)
├── root-snapshots          (subvolume)
    ├── root-current        (subvolume)
        ├── guix-store      (subvolume)
[...]
@end example

Here, the 'guix-store' subvolume doesn't match its intended mount point, so
it is necessary to mount it.  The subvolume must be fully specified, by
passing its file name to the @code{subvol} option.  To illustrate, the
'guix-store' subvolume could be mounted on @file{/gnu/store} by using a file
system declaration such as:

@lisp
(file-system
  (device (file-system-label "btrfs-pool-1"))
  (mount-point "/gnu/store")
  (type "btrfs")
  (options "subvol=root-snapshots/root-current/guix-store,\
compress-force=zstd,space_cache=v2"))
@end lisp

@node Zugeordnete Geräte
@section Zugeordnete Geräte

@cindex Gerätezuordnung
@cindex zugeordnete Geräte
Der Linux-Kernel unterstützt das Konzept der @dfn{Gerätezuordnung}: Ein
blockorientiertes Gerät wie eine Festplattenpartition kann einem neuen Gerät
@dfn{zugeordnet} werden, gewöhnlich unter @code{/dev/mapper/}, wobei das
neue Gerät durchlaufende Daten zusätzlicher Verarbeitung unterzogen
werden@footnote{Beachten Sie, dass mit GNU@tie{}Hurd kein Unterschied
zwischen dem Konzept eines „zugeordneten Geräts“ und dem eines Dateisystems
besteht: Dort werden bei beiden Ein- und Ausgabeoperationen auf eine Datei
in Operationen auf dessen Hintergrundspeicher @emph{übersetzt}. Hurd
implementiert zugeordnete Geräte genau wie Dateisysteme mit dem generischen
@dfn{Übersetzer}-Mechanismus (siehe @ref{Translators,,, hurd, The GNU Hurd
Reference Manual}).}. Ein typisches Beispiel ist eine Gerätezuordnung zur
Verschlüsselung: Jeder Schreibzugriff auf das zugeordnete Gerät wird
transparent verschlüsselt und jeder Lesezugriff ebenso entschlüsselt. Guix
erweitert dieses Konzept, indem es darunter jedes Gerät und jede Menge von
Geräten versteht, die auf irgendeine Weise @dfn{umgewandelt} wird, um ein
neues Gerät zu bilden; zum Beispiel entstehen auch RAID-Geräte aus einem
@dfn{Verbund} mehrerer anderer Geräte, wie etwa Festplatten oder Partition
zu einem einzelnen Gerät, das sich wie eine Partition verhält. Ein weiteres
Beispiel, das noch nicht in Guix implementiert wurde, sind „LVM logical
volumes“.

Zugeordnete Geräte werden mittels einer @code{mapped-device}-Form
deklariert, die wie folgt definiert ist; Beispiele folgen weiter unten.

@deftp {Datentyp} mapped-device
Objekte dieses Typs repräsentieren Gerätezuordnungen, die gemacht werden,
wenn das System hochfährt.

@table @code
@item source
Es handelt sich entweder um eine Zeichenkette, die den Namen eines
zuzuordnenden blockorientierten Geräts angibt, wie @code{"/dev/sda3"}, oder
um eine Liste solcher Zeichenketten, sofern mehrere Geräts zu einem neuen
Gerät verbunden werden.

@item target
Diese Zeichenkette gibt den Namen des neuen zugeordneten Geräts an. Bei
Kernel-Zuordnern, wie verschlüsselten Geräten vom Typ
@code{luks-device-mapping}, wird durch Angabe von @code{"my-partition"} ein
Gerät @code{"/dev/mapper/my-partition"} erzeugt. Bei RAID-Geräten vom Typ
@code{raid-device-mapping} muss der Gerätename als voller Pfad wie zum
Beispiel @code{"/dev/md0"} angegeben werden.

@item type
Dies muss ein @code{mapped-device-kind}-Objekt sein, das angibt, wie die
Quelle @var{source} dem Ziel @var{target} zugeordnet wird.
@end table
@end deftp

@defvr {Scheme-Variable} luks-device-mapping
Hiermit wird ein blockorientiertes Gerät mit LUKS verschlüsselt, mit Hilfe
des Befehls @command{cryptsetup} aus dem gleichnamigen Paket. Dazu wird das
Linux-Kernel-Modul @code{dm-crypt} vorausgesetzt.
@end defvr

@defvr {Scheme-Variable} raid-device-mapping
Dies definiert ein RAID-Gerät, das mit dem Befehl @code{mdadm} aus dem
gleichnamigen Paket als Verbund zusammengestellt wird. Es setzt voraus, dass
das Linux-Kernel-Modul für das entsprechende RAID-Level geladen ist, z.B.@:
@code{raid456} für RAID-4, RAID-5 oder RAID-6, oder @code{raid10} für
RAID-10.
@end defvr

@cindex Laufwerksverschlüsselung
@cindex LUKS
Das folgende Beispiel gibt eine Zuordnung von @file{/dev/sda3} auf
@file{/dev/mapper/home} mit LUKS an — dem
@url{https://gitlab.com/cryptsetup/cryptsetup,Linux Unified Key Setup},
einem Standardmechanismus zur Plattenverschlüsselung. Das Gerät
@file{/dev/mapper/home} kann dann als @code{device} einer
@code{file-system}-Deklaration benutzt werden (siehe @ref{Dateisysteme}).

@lisp
(mapped-device
  (source "/dev/sda3")
  (target "home")
  (type luks-device-mapping))
@end lisp

Um nicht davon abhängig zu sein, wie Ihre Geräte nummeriert werden, können
Sie auch die LUKS-UUID (@dfn{unique identifier}, d.h.@: den eindeutigen
Bezeichner) des Quellgeräts auf der Befehlszeile ermitteln:

@example
cryptsetup luksUUID /dev/sda3
@end example

und wie folgt benutzen:

@lisp
(mapped-device
  (source (uuid "cb67fc72-0d54-4c88-9d4b-b225f30b0f44"))
  (target "home")
  (type luks-device-mapping))
@end lisp

@cindex Swap-Verschlüsselung
Es ist auch wünschenswert, Swap-Speicher zu verschlüsseln, da in den
Swap-Speicher sensible Daten ausgelagert werden können. Eine Möglichkeit
ist, eine Swap-Datei auf einem mit LUKS-Verschlüsselung zugeordneten
Dateisystem zu verwenden. Dann wird die Swap-Datei verschlüsselt, weil das
ganze Gerät verschlüsselt wird. Ein Beispiel finden Sie im Abschnitt
@ref{Vor der Installation,,Disk Partitioning}.

Ein RAID-Gerät als Verbund der Partitionen @file{/dev/sda1} und
@file{/dev/sdb1} kann wie folgt deklariert werden:

@lisp
(mapped-device
  (source (list "/dev/sda1" "/dev/sdb1"))
  (target "/dev/md0")
  (type raid-device-mapping))
@end lisp

Das Gerät @file{/dev/md0} kann als @code{device} in einer
@code{file-system}-Deklaration dienen (siehe @ref{Dateisysteme}). Beachten
Sie, dass das RAID-Level dabei nicht angegeben werden muss; es wird während
der initialen Erstellung und Formatierung des RAID-Geräts festgelegt und
später automatisch bestimmt.


@node Benutzerkonten
@section Benutzerkonten

@cindex Benutzer
@cindex Konten
@cindex Benutzerkonten
Benutzerkonten und Gruppen werden allein durch die
@code{operating-system}-Deklaration des Betriebssystems verwaltet. Sie
werden mit den @code{user-account}- und @code{user-group}-Formen angegeben:

@lisp
(user-account
  (name "alice")
  (group "users")
  (supplementary-groups '("wheel"   ;zur sudo-Nutzung usw. berechtigen
                          "audio"   ;Soundkarte
                          "video"   ;Videogeräte wie Webcams
                          "cdrom")) ;die gute alte CD-ROM
  (comment "Bobs Schwester")
  (home-directory "/home/alice"))
@end lisp

Beim Hochfahren oder nach Abschluss von @command{guix system reconfigure}
stellt das System sicher, dass nur die in der
@code{operating-system}-Deklaration angegebenen Benutzerkonten und Gruppen
existieren, mit genau den angegebenen Eigenschaften. Daher gehen durch
direkten Aufruf von Befehlen wie @command{useradd} erwirkte Erstellungen
oder Modifikationen von Konten oder Gruppen verloren, sobald rekonfiguriert
oder neugestartet wird. So wird sichergestellt, dass das System genau so
funktioniert, wie es deklariert wurde.

@deftp {Datentyp} user-account
Objekte dieses Typs repräsentieren Benutzerkonten. Darin können folgende
Komponenten aufgeführt werden:

@table @asis
@item @code{name}
Der Name des Benutzerkontos.

@item @code{group}
@cindex Gruppen
Dies ist der Name (als Zeichenkette) oder die Bezeichnung (als Zahl) der
Benutzergruppe, zu der dieses Konto gehört.

@item @code{supplementary-groups} (Vorgabe: @code{'()})
Dies kann optional als Liste von Gruppennamen angegeben werden, zu denen
dieses Konto auch gehört.

@item @code{uid} (Vorgabe: @code{#f})
Dies ist entweder der Benutzeridentifikator dieses Kontos (seine „User ID“)
als Zahl oder @code{#f}. Bei Letzterem wird vom System automatisch eine Zahl
gewählt, wenn das Benutzerkonto erstellt wird.

@item @code{comment} (Vorgabe: @code{""})
Ein Kommentar zu dem Konto, wie etwa der vollständige Name des
Kontoinhabers.

@item @code{home-directory}
Der Name des Persönlichen Verzeichnisses („Home“-Verzeichnis) für dieses
Konto.

@item @code{create-home-directory?} (Vorgabe: @code{#t})
Zeigt an, ob das Persönliche Verzeichnis für das Konto automatisch erstellt
werden soll, falls es noch nicht existiert.

@item @code{shell} (Vorgabe: Bash)
Ein G-Ausdruck, der den Dateinamen des Programms angibt, das dem Benutzer
als Shell dienen soll (siehe @ref{G-Ausdrücke}).

@item @code{system?} (Vorgabe: @code{#f})
Dieser boolesche Wert zeigt an, ob das Konto ein „System“-Benutzerkonto
ist. Systemkonten werden manchmal anders behandelt, zum Beispiel werden sie
auf grafischen Anmeldebildschirmen nicht aufgeführt.

@anchor{user-account-password}
@cindex Passwort, für Benutzerkonten
@item @code{password} (Vorgabe: @code{#f})
Normalerweise lassen Sie dieses Feld auf @code{#f} und initialisieren
Benutzerpasswörter als @code{root} mit dem @command{passwd}-Befehl. Die
Benutzer lässt man ihr eigenes Passwort dann mit @command{passwd}
ändern. Mit @command{passwd} festgelegte Passwörter bleiben natürlich beim
Neustarten und beim Rekonfigurieren erhalten.

Wenn Sie aber @emph{doch} ein anfängliches Passwort für ein Konto
voreinstellen möchten, muss dieses Feld hier das verschlüsselte Passwort als
Zeichenkette enthalten. Sie können dazu die Prozedur @code{crypt} benutzen.

@lisp
(user-account
  (name "charlie")
  (group "users")

  ;; Ein mit SHA-512 gehashtes initiales Passwort.
  (password (crypt "InitialPassword!" "$6$abc")))
@end lisp

@quotation Anmerkung
Der Hash dieses initialen Passworts wird in einer Datei im @file{/gnu/store}
abgelegt, auf die alle Benutzer Lesezugriff haben, daher ist Vorsicht
geboten, wenn Sie diese Methode verwenden.
@end quotation

Siehe @ref{Passphrase Storage,,, libc, The GNU C Library Reference Manual}
für weitere Informationen über Passwortverschlüsselung und
@ref{Encryption,,, guile, GNU Guile Reference Manual} für Informationen über
die Prozedur @code{crypt} in Guile.

@end table
@end deftp

@cindex Gruppen
Benutzergruppen-Deklarationen sind noch einfacher aufgebaut:

@lisp
(user-group (name "students"))
@end lisp

@deftp {Datentyp} user-group
Dieser Typ gibt, nun ja, eine Benutzergruppe an. Es gibt darin nur ein paar
Felder:

@table @asis
@item @code{name}
Der Name der Gruppe.

@item @code{id} (Vorgabe: @code{#f})
Der Gruppenbezeichner (eine Zahl). Wird er als @code{#f} angegeben, wird
automatisch eine neue Zahl reserviert, wenn die Gruppe erstellt wird.

@item @code{system?} (Vorgabe: @code{#f})
Dieser boolesche Wert gibt an, ob es sich um eine „System“-Gruppe
handelt. Systemgruppen sind solche mit einer kleinen Zahl als Bezeichner.

@item @code{password} (Vorgabe: @code{#f})
Wie, Benutzergruppen können ein Passwort haben? Nun ja, anscheinend
schon. Wenn es nicht auf @code{#f} steht, gibt dieses Feld das Passwort der
Gruppe an.

@end table
@end deftp

Um Ihnen das Leben zu erleichtern, gibt es eine Variable, worin alle
grundlegenden Benutzergruppen aufgeführt sind, die man erwarten könnte:

@defvr {Scheme-Variable} %base-groups
Die Liste von Basis-Benutzergruppen, von denen Benutzer und/oder Pakete
erwarten könnten, dass sie auf dem System existieren. Dazu gehören Gruppen
wie „root“, „wheel“ und „users“, sowie Gruppen, um den Zugriff auf bestimmte
Geräte einzuschränken, wie „audio“, „disk“ und „cdrom“.
@end defvr

@defvr {Scheme-Variable} %base-user-accounts
Diese Liste enthält Basis-Systembenutzerkonten, von denen Programme erwarten
können, dass sie auf einem GNU/Linux-System existieren, wie das Konto
„nobody“.

Beachten Sie, dass das Konto „root“ für den Administratornutzer nicht
dazugehört. Es ist ein Sonderfall und wird automatisch erzeugt, egal ob es
spezifiziert wurde oder nicht.
@end defvr

@node Tastaturbelegung
@section Tastaturbelegung

@cindex Tastaturbelegung
@cindex Keymap
Um anzugeben, was jede Taste auf Ihrer Tastatur tut, müssen Sie angeben,
welche @dfn{Tastaturbelegung} das Betriebssystem benutzen soll. Wenn nichts
angegeben wird, ist die „US English“-QWERTY-Tastaturbelegung für
PC-Tastaturen mit 105 Tasten voreingestellt. Allerdings bevorzugen Deutsch
sprechende Nutzer meistens die deutsche QWERTZ-Tastaturbelegung, Französisch
sprechende haben lieber die AZERTY-Belegung und so weiter; Hacker wollen
vielleicht Dvorak oder Bépo als Tastaturbelegung benutzen oder sogar eigene
Anpassungen bei manchen Tasten vornehmen. Dieser Abschnitt erklärt, wie das
geht.

@cindex Tastaturbelegung, Definition
Die Informationen über Ihre Tastaturbelegung werden an drei Stellen
gebraucht:

@itemize
@item
Der @emph{Bootloader} muss auslesen können, welche Tastaturbelegung Sie
benutzen möchten (siehe @ref{Bootloader-Konfiguration,
@code{keyboard-layout}}). Das ist praktisch, wenn Sie zum Beispiel die
Passphrase Ihrer verschlüsselten Wurzelpartition mit der richtigen
Tastaturbelegung eintippen wollen.

@item
Der @emph{Kernel des Betriebssystems}, Linux, braucht die Information, damit
die Konsole richtig eingestellt ist (siehe @ref{„operating-system“-Referenz,
@code{keyboard-layout}}).

@item
Der @emph{grafische Anzeigeserver}, meistens ist das Xorg, hat auch seine
eigene Konfiguration der Tastaturbelegung (siehe @ref{X Window,
@code{keyboard-layout}}).
@end itemize

Mit Guix können Sie alle drei Komponenten separat konfigurieren, aber zum
Glück können Sie damit auch dieselbe Konfiguration der Tastaturbelegung für
alle drei benutzen.

@cindex XKB, Tastaturbelegungen
Tastaturbelegungen werden durch Verbundsobjekte repräsentiert, die mit der
Prozedur @code{keyboard-layout} aus dem Modul @code{(gnu system keyboard)}
angelegt werden. Entsprechend der „X-Keyboard“-Erweiterung (XKB) verfügt
jede Tastaturbelegung über vier Attribute: einen Namen (oft ist das ein
Sprachkürzel wie „fi“ für Finnisch oder „jp“ für Japanisch), ein optionaler
Variantenname, ein optionaler Tastaturmodellname und eine möglicherweise
leere Liste zusätzlicher Optionen. In den meisten Fällen interessiert Sie
nur der Name der Tastaturbelegung. Hier sind ein paar Beispiele:

@lisp
;; Die deutsche QWERTZ-Belegung. Hierbei nehmen wir
;; ein Standard-"pc105"-Tastaturmodell an.
(keyboard-layout "de")

;; Die Bépo-Variante der französischen Belegung.
(keyboard-layout "fr" "bepo")

;; Die katalanische Tastaturbelegung.
(keyboard-layout "es" "cat")

;; Arabische Tastaturbelegung. "Alt-Umschalt" wechselt auf US-Amerikanisch.
(keyboard-layout "ar,us" #:options '("grp:alt_shift_toggle"))

;; Die lateinamerikanisch-spanische Tastaturbelegung. Des Weiteren
;; wird die Feststelltaste (auf Englisch "Caps Lock") als eine
;; weitere Steuerungstaste (auf Englisch "Ctrl") festgelegt und
;; die Menütaste soll als eine "Compose"-Taste herhalten, mit der
;; Buchstaben mit Diakritika geschrieben werden können.
(keyboard-layout "latam"
                 #:options '("ctrl:nocaps" "compose:menu"))

;; Die russische Tastaturbelegung für eine ThinkPad-Tastatur.
(keyboard-layout "ru" #:model "thinkpad")

;; Die Tastaturbelegung "US international", d.h. die US-Belegung
;; mit Tottasten zur Eingabe von Buchstaben mit Diakritika. Hier
;; wird die Belegung für eine Apple-MacBook-Tastatur gewählt.
(keyboard-layout "us" "intl" #:model "macbook78")
@end lisp

Im Verzeichnis @file{share/X11/xkb} des @code{xkeyboard-config}-Pakets
finden Sie eine vollständige Liste der unterstützten Tastaturbelegungen,
Varianten und Modelle.

@cindex Tastaturbelegung, Konfiguration
Sagen wir, Sie würden gerne die türkische Tastaturbelegung für Ihr gesamtes
System — Bootloader, Konsole und Xorg — verwenden. Dann würde Ihre
Systemkonfiguration so aussehen:

@findex set-xorg-configuration
@lisp
;; Die türkische Tastaturbelegung für Bootloader, Konsole und Xorg
;; benutzen.

(operating-system
  ;; …
  (keyboard-layout (keyboard-layout "tr"))  ;für die Konsole
  (bootloader (bootloader-configuration
                (bootloader grub-efi-bootloader)
                (target "/boot/efi")
                (keyboard-layout keyboard-layout))) ;für GRUB
  (services (cons (set-xorg-configuration
                    (xorg-configuration             ;für Xorg
                      (keyboard-layout keyboard-layout)))
                  %desktop-services)))
@end lisp

Im obigen Beispiel beziehen wir uns für GRUB und Xorg einfach auf das
@code{keyboard-layout}-Feld, was wir darüber definiert haben, wir könnten
aber auch eine andere Tastaturbelegung angeben. Die Prozedur
@code{set-xorg-configuration} kommuniziert an die grafische
Anmeldeverwaltung (d.h.@: nach Vorgabe an GDM), welche Xorg-Konfiguration
verwendet werden soll.

Wir haben uns bisher damit auseinandergesetzt, wie die @emph{Voreinstellung}
für die Tastaturbelegung ausgewählt werden kann, die das System annimmt,
wenn es startet, aber zur Laufzeit kann sie geändert werden:

@itemize
@item
Wenn Sie GNOME benutzen, können Sie in den Einstellungen dazu einen Eintrag
„Region und Sprache“ finden, in dem Sie eine oder mehrere Tastaturbelegungen
auswählen können.

@item
Unter Xorg können Sie den Befehl @command{setxkbmap} (aus dem gleichnamigen
Paket) zum Anpassen der momentan aktiven Tastaturbelegung benutzen. Zum
Beispiel würden Sie so die Belegung auf US Dvorak wechseln:

@example
setxkbmap us dvorak
@end example

@item
Mit dem Befehl @code{loadkeys} ändern Sie die für die Linux-Konsole geltende
Tastaturbelegung. Allerdings ist zu beachten, dass @code{loadkeys}
@emph{nicht} die Kategorisierung der Tastaturbelegungen von XKB benutzt. Der
Befehl, um die französische Bépo-Belegung zu laden, wäre folgender:

@example
loadkeys fr-bepo
@end example
@end itemize

@node Locales
@section Locales

@cindex Locale
Eine @dfn{Locale} legt die kulturellen Konventionen einer bestimmten Sprache
und Region auf der Welt fest (siehe @ref{Locales,,, libc, The GNU C Library
Reference Manual}). Jede Locale hat einen Namen, der typischerweise von der
Form @code{@var{Sprache}_@var{Gebiet}.@var{Kodierung}} — z.B.@: benennt
@code{fr_LU.utf8} die Locale für französische Sprache mit den kulturellen
Konventionen aus Luxemburg unter Verwendung der UTF-8-Kodierung.

@cindex Locale-Definition
Normalerweise werden Sie eine standardmäßig zu verwendende Locale für die
Maschine vorgeben wollen, indem Sie das @code{locale}-Feld der
@code{operating-system}-Deklaration verwenden (siehe @ref{„operating-system“-Referenz, @code{locale}}).

Die ausgewählte Locale wird automatisch zu den dem System bekannten
@dfn{Locale-Definitionen} hinzugefügt, falls nötig, und ihre Kodierung wird
aus dem Namen hergeleitet — z.B.@: wird angenommen, dass @code{bo_CN.utf8}
als Kodierung @code{UTF-8} verwendet. Zusätzliche Locale-Definitionen können
im Feld @code{locale-definitions} vom @code{operating-system} festgelegt
werden — das ist zum Beispiel dann nützlich, wenn die Kodierung nicht aus
dem Locale-Namen hergeleitet werden konnte. Die vorgegebene Menge an
Locale-Definitionen enthält manche weit verbreiteten Locales, aber um Platz
zu sparen, nicht alle verfügbaren Locales.

Um zum Beispiel die nordfriesische Locale für Deutschland hinzuzufügen,
könnte der Wert des Feldes wie folgt aussehen:

@lisp
(cons (locale-definition
        (name "fy_DE.utf8") (source "fy_DE"))
      %default-locale-definitions)
@end lisp

Um Platz zu sparen, könnte man auch wollen, dass @code{locale-definitions}
nur die tatsächlich benutzen Locales aufführt, wie etwa:

@lisp
(list (locale-definition
        (name "ja_JP.eucjp") (source "ja_JP")
        (charset "EUC-JP")))
@end lisp

@vindex LOCPATH
The compiled locale definitions are available at
@file{/run/current-system/locale/X.Y}, where @code{X.Y} is the libc version,
which is the default location where the GNU@tie{}libc provided by Guix looks
for locale data.  This can be overridden using the @env{LOCPATH} environment
variable (@pxref{locales-and-locpath, @env{LOCPATH} and locale packages}).

Die @code{locale-definition}-Form wird vom Modul @code{(gnu system locale)}
zur Verfügung gestellt.  Details folgen unten.

@deftp {Datentyp} locale-definition
Dies ist der Datentyp einer Locale-Definition.

@table @asis

@item @code{name}
Der Name der Locale. Siehe @ref{Locale Names,,, libc, The GNU C Library
Reference Manual} für mehr Informationen zu Locale-Namen.

@item @code{source}
Der Name der Quelle der Locale. Typischerweise ist das der Teil
@code{@var{Sprache}_@var{Gebiet}} des Locale-Namens.

@item @code{charset} (Vorgabe: @code{"UTF-8"})
Der „Zeichensatz“ oder das „Code set“, d.h.@: die Kodierung dieser Locale,
@uref{https://www.iana.org/assignments/character-sets, wie die IANA sie
definiert}.

@end table
@end deftp

@defvr {Scheme-Variable} %default-locale-definitions
Eine Liste häufig benutzter UTF-8-Locales, die als Vorgabewert des
@code{locale-definitions}-Feldes in @code{operating-system}-Deklarationen
benutzt wird.

@cindex Locale-Name
@cindex Normalisiertes Codeset in Locale-Namen
Diese Locale-Definitionen benutzen das @dfn{normalisierte Codeset} für den
Teil des Namens, der nach dem Punkt steht (siehe @ref{Using gettextized
software, normalized codeset,, libc, The GNU C Library Reference
Manual}). Zum Beispiel ist @code{uk_UA.utf8} enthalten, dagegen ist etwa
@code{uk_UA.UTF-8} darin @emph{nicht} enthalten.
@end defvr

@subsection Kompatibilität der Locale-Daten

@cindex Inkompatibilität, von Locale-Daten
@code{operating-system}-Deklarationen verfügen über ein
@code{locale-libcs}-Feld, um die GNU@tie{}libc-Pakete anzugeben, die zum
Kompilieren von Locale-Deklarationen verwendet werden sollen (siehe
@ref{„operating-system“-Referenz}). „Was interessiert mich das?“, könnten Sie
fragen. Naja, leider ist das binäre Format der Locale-Daten von einer
libc-Version auf die nächste manchmal nicht miteinander kompatibel.

@c See <https://sourceware.org/ml/libc-alpha/2015-09/msg00575.html>
@c and <https://lists.gnu.org/archive/html/guix-devel/2015-08/msg00737.html>.
For instance, a program linked against libc version 2.21 is unable to read
locale data produced with libc 2.22; worse, that program @emph{aborts}
instead of simply ignoring the incompatible locale data@footnote{Versions
2.23 and later of GNU@tie{}libc will simply skip the incompatible locale
data, which is already an improvement.}.  Similarly, a program linked
against libc 2.22 can read most, but not all, of the locale data from libc
2.21 (specifically, @env{LC_COLLATE} data is incompatible); thus calls to
@code{setlocale} may fail, but programs will not abort.

Das „Problem“ mit Guix ist, dass Nutzer viel Freiheit genießen: Sie können
wählen, ob und wann sie die Software in ihren Profilen aktualisieren und
benutzen vielleicht eine andere libc-Version als sie der Systemadministrator
benutzt hat, um die systemweiten Locale-Daten zu erstellen.

Fortunately, unprivileged users can also install their own locale data and
define @env{GUIX_LOCPATH} accordingly (@pxref{locales-and-locpath,
@env{GUIX_LOCPATH} and locale packages}).

Trotzdem ist es am besten, wenn die systemweiten Locale-Daten unter
@file{/run/current-system/locale} für alle libc-Versionen erstellt werden,
die auf dem System noch benutzt werden, damit alle Programme auf sie
zugreifen können — was auf einem Mehrbenutzersystem ganz besonders wichtig
ist. Dazu kann der Administrator des Systems mehrere libc-Pakete im
@code{locale-libcs}-Feld vom @code{operating-system} angeben:

@lisp
(use-package-modules base)

(operating-system
  ;; …
  (locale-libcs (list glibc-2.21 (canonical-package glibc))))
@end lisp

Mit diesem Beispiel ergäbe sich ein System, was Locale-Definitionen sowohl
für libc 2.21 als auch die aktuelle Version von libc in
@file{/run/current-system/locale} hat.


@node Dienste
@section Dienste

@cindex Systemdienste
Ein wichtiger Bestandteil des Schreibens einer
@code{operating-system}-Deklaration ist das Auflisten der
@dfn{Systemdienste} und ihrer Konfiguration (siehe @ref{Das Konfigurationssystem nutzen}). Systemdienste sind typischerweise im Hintergrund
laufende Daemon-Programme, die beim Hochfahren des Systems gestartet werden,
oder andere Aktionen, die zu dieser Zeit durchgeführt werden müssen — wie
das Konfigurieren des Netzwerkzugangs.

Guix hat eine weit gefasste Definition, was ein „Dienst“ ist (siehe
@ref{Dienstkompositionen}), aber viele Dienste sind solche, die von
GNU@tie{}Shepherd verwaltet werden (siehe @ref{Shepherd-Dienste}). Auf
einem laufenden System kann der @command{herd}-Befehl benutzt werden, um
verfügbare Dienste aufzulisten, ihren Status anzuzeigen, sie zu starten und
zu stoppen oder andere angebotene Operationen durchzuführen (siehe @ref{Jump
Start,,, shepherd, The GNU Shepherd Manual}). Zum Beispiel:

@example
# herd status
@end example

Dieser Befehl, durchgeführt als @code{root}, listet die momentan definierten
Dienste auf. Der Befehl @command{herd doc} fasst kurz zusammen, was ein
gegebener Dienst ist und welche Aktionen mit ihm assoziiert sind:

@example
# herd doc nscd
Run libc's name service cache daemon (nscd).

# herd doc nscd action invalidate
invalidate: Invalidate the given cache--e.g., 'hosts' for host name lookups.
@end example

Die Unterbefehle @command{start}, @command{stop} und @command{restart} haben
die Wirkung, die man erwarten würde. Zum Beispiel kann mit folgenden
Befehlen der nscd-Dienst angehalten und der Xorg-Anzeigeserver neu gestartet
werden:

@example
# herd stop nscd
Service nscd has been stopped.
# herd restart xorg-server
Service xorg-server has been stopped.
Service xorg-server has been started.
@end example

Die folgenden Abschnitte dokumentieren die verfügbaren Dienste, die in einer
@code{operating-system}-Deklaration benutzt werden können, angefangen mit
den Diensten im Kern des Systems („core services“)

@menu
* Basisdienste::             Essenzielle Systemdienste.
* Geplante Auftragsausführung::  Der mcron-Dienst.
* Log-Rotation::             Der rottlog-Dienst.
* Netzwerkdienste::          Netzwerkeinrichtung, SSH-Daemon etc.
* X Window::                 Grafische Anzeige.
* Druckdienste::             Unterstützung für lokale und entfernte 
                               Drucker.
* Desktop-Dienste::          D-Bus- und Desktop-Dienste.
* Tondienste::               Dienste für ALSA und Pulseaudio.
* Datenbankdienste::         SQL-Datenbanken, Schlüssel-Wert-Speicher etc.
* Mail-Dienste::             IMAP, POP3, SMTP und so weiter.
* Kurznachrichtendienste::   Dienste für Kurznachrichten.
* Telefondienste::           Telefoniedienste.
* Systemüberwachungsdienste::  Dienste zur Systemüberwachung.
* Kerberos-Dienste::         Kerberos-Dienste.
* LDAP-Dienste::             LDAP-Dienste.
* Web-Dienste::              Web-Server.
* Zertifikatsdienste::       TLS-Zertifikate via Let’s Encrypt.
* DNS-Dienste::              DNS-Daemons.
* VPN-Dienste::              VPN-Daemons.
* Network File System::      Dienste mit Bezug zum Netzwerkdateisystem.
* Kontinuierliche Integration::  Der Cuirass-Dienst.
* Dienste zur Stromverbrauchsverwaltung::  Den Akku schonen.
* Audio-Dienste::            Der MPD.
* Virtualisierungsdienste::  Dienste für virtuelle Maschinen.
* Versionskontrolldienste::  Entfernten Zugang zu Git-Repositorys bieten.
* Spieldienste::             Spielserver.
* PAM-Einbindedienst::       Dienst, um Datenträger beim Anmelden 
                               einzubinden.
* Guix-Dienste::             Dienste, die speziell mit Guix zu tun haben.
* Linux-Dienste::            Dienste nur für Systeme mit Linux-Kernel.
* Hurd Services::            Services specific for a Hurd System.
* Verschiedene Dienste::     Andere Dienste.
@end menu

@node Basisdienste
@subsection Basisdienste

Das Modul @code{(gnu services base)} stellt Definitionen für Basis-Dienste
zur Verfügung, von denen man erwartet, dass das System sie anbietet. Im
Folgenden sind die von diesem Modul exportierten Dienste aufgeführt.

@defvr {Scheme-Variable} %base-services
Diese Variable enthält eine Liste von Basis-Diensten, die man auf einem
System vorzufinden erwartet (siehe @ref{Diensttypen und Dienste} für
weitere Informationen zu Dienstobjekten): ein Anmeldungsdienst (mingetty)
auf jeder Konsole (jedem „tty“), syslogd, den Name Service Cache Daemon
(nscd) von libc, die udev-Geräteverwaltung und weitere.

Dies ist der Vorgabewert für das @code{services}-Feld für die Dienste von
@code{operating-system}-Deklarationen. Normalerweise werden Sie, wenn Sie
ein Betriebssystem anpassen, Dienste an die @code{%base-services}-Liste
anhängen, wie hier gezeigt:

@lisp
(append (list (service avahi-service-type)
              (service openssh-service-type))
        %base-services)
@end lisp
@end defvr

@defvr {Scheme-Variable} special-files-service-type
Dieser Dienst richtet „besondere Dateien“ wie @file{/bin/sh} ein; eine
Instanz des Dienstes ist Teil der @code{%base-services}.

Der mit @code{special-files-service-type}-Diensten assoziierte Wert muss
eine Liste von Tupeln sein, deren erstes Element eine „besondere Datei“ und
deren zweites Element deren Zielpfad ist. Der Vorgabewert ist:

@cindex @file{/bin/sh}
@cindex @file{sh}, in @file{/bin}
@lisp
`(("/bin/sh" ,(file-append bash "/bin/sh")))
@end lisp

@cindex @file{/usr/bin/env}
@cindex @file{env}, in @file{/usr/bin}
Wenn Sie zum Beispiel auch @code{/usr/bin/env} zu Ihrem System hinzufügen
möchten, können Sie den Wert ändern auf:

@lisp
`(("/bin/sh" ,(file-append bash "/bin/sh"))
  ("/usr/bin/env" ,(file-append coreutils "/bin/env")))
@end lisp

Since this is part of @code{%base-services}, you can use
@code{modify-services} to customize the set of special files (@pxref{Service-Referenz, @code{modify-services}}).  But the simple way to add a special
file is @i{via} the @code{extra-special-file} procedure (see below).
@end defvr

@deffn {Scheme-Prozedur} extra-special-file @var{Datei} @var{Ziel}
Das @var{Ziel} als „besondere Datei“ @var{Datei} verwenden.

Beispielsweise können Sie die folgenden Zeilen in das @code{services}-Feld
Ihrer Betriebssystemdeklaration einfügen für eine symbolische Verknüpfung
@file{/usr/bin/env}:

@lisp
(extra-special-file "/usr/bin/env"
                    (file-append coreutils "/bin/env"))
@end lisp
@end deffn

@deffn {Scheme-Prozedur} host-name-service @var{Name}
Liefert einen Dienst, der den Rechnernamen (den „Host“-Namen des Rechners)
als @var{Name} festlegt.
@end deffn

@defvr {Scheme-Variable} console-font-service-type
Installiert die angegebenen Schriftarten auf den festgelegten TTYs (auf dem
Linux-Kernel werden Schriftarten für jede virtuelle Konsole einzeln
festgelegt). Als Wert nimmt dieser Dienst eine Liste von Paaren aus TTY und
Schriftart. Als Schriftart kann der Name einer vom @code{kbd}-Paket zur
Verfügung gestellten Schriftart oder ein beliebiges gültiges Argument für
@command{setfont} dienen. Ein Beispiel:

@lisp
`(("tty1" . "LatGrkCyr-8x16")
  ("tty2" . ,(file-append
                font-tamzen
                "/share/kbd/consolefonts/TamzenForPowerline10x20.psf"))
  ("tty3" . ,(file-append
                font-terminus
                "/share/consolefonts/ter-132n"))) ; für HiDPI
@end lisp
@end defvr

@deffn {Scheme-Prozedur} login-service @var{Konfiguration}
Liefert einen Dienst, der die Benutzeranmeldung möglich macht. Dazu
verwendet er die angegebene @var{Konfiguration}, ein
@code{<login-configuration>}-Objekt, das unter anderem die beim Anmelden
angezeigte Mitteilung des Tages („Message of the Day“) festlegt.
@end deffn

@deftp {Datentyp} login-configuration
Dies ist der Datentyp, der die Anmeldekonfiguration repräsentiert.

@table @asis

@item @code{motd}
@cindex Message of the Day
Ein dateiartiges Objekt, das die „Message of the Day“ enthält.

@item @code{allow-empty-passwords?} (Vorgabe: @code{#t})
Leere Passwörter standardmäßig zulassen, damit sich neue Anwender anmelden
können, direkt nachdem das Benutzerkonto „root“ für den Administrator
angelegt wurde.

@end table
@end deftp

@deffn {Scheme-Prozedur} mingetty-service @var{Konfiguration}
Liefert einen Dienst, der mingetty nach den Vorgaben der @var{Konfiguration}
ausführt, einem @code{<mingetty-configuration>}-Objekt, das unter anderem
die Konsole (das „tty“) festlegt, auf der mingetty laufen soll.
@end deffn

@deftp {Datentyp} mingetty-configuration
Dieser Datentyp repräsentiert die Konfiguration von Mingetty, der
vorgegebenen Implementierung zur Anmeldung auf einer virtuellen Konsole.

@table @asis

@item @code{tty}
Der Name der Konsole, auf der diese Mingetty-Instanz läuft — z.B.@:
@code{"tty1"}.

@item @code{auto-login} (Vorgabe: @code{#f})
Steht dieses Feld auf wahr, muss es eine Zeichenkette sein, die den
Benutzernamen angibt, als der man vom System automatisch angemeldet
wird. Ist es @code{#f}, so muss zur Anmeldung ein Benutzername und ein
Passwort eingegeben werden.

@item @code{login-program} (Vorgabe: @code{#f})
Dies muss entweder @code{#f} sein, dann wird das voreingestellte
Anmeldeprogramm benutzt (@command{login} aus dem Shadow-Werkzeugsatz) oder
der Name des Anmeldeprogramms als G-Ausdruck.

@item @code{login-pause?} (Vorgabe: @code{#f})
Ist es auf @code{#t} gesetzt, sorgt es in Verbindung mit @var{auto-login}
dafür, dass der Benutzer eine Taste drücken muss, ehe eine Anmelde-Shell
gestartet wird.

@item @code{mingetty} (Vorgabe: @var{mingetty})
Welches Mingetty-Paket benutzt werden soll.

@end table
@end deftp

@deffn {Scheme-Prozedur} agetty-service @var{Konfiguration}
Liefert einen Dienst, um agetty entsprechend der @var{Konfiguration}
auszuführen, welche ein @code{<agetty-configuration>}-Objekt sein muss, das
unter anderem festlegt, auf welchem tty es laufen soll.
@end deffn

@deftp {Datentyp} agetty-configuration
Dies ist der Datentyp, der die Konfiguration von agetty repräsentiert, was
Anmeldungen auf einer virtuellen oder seriellen Konsole implementiert. Siehe
die Handbuchseite @code{agetty(8)} für mehr Informationen.

@table @asis

@item @code{tty}
The name of the console this agetty runs on, as a string---e.g.,
@code{"ttyS0"}.  This argument is optional, it will default to a reasonable
default serial port used by the kernel Linux.

Hierzu wird, wenn in der Kernel-Befehlszeile ein Wert für eine Option namens
@code{agetty.tty} festgelegt wurde, der Gerätename daraus für agetty
extrahiert und benutzt.

Andernfalls wird agetty, falls auf der Kernel-Befehlszeile eine Option
@code{console} mit einem tty vorkommt, den daraus extrahierten Gerätenamen
der seriellen Schnittstelle benutzen.

In beiden Fällen wird agetty nichts an den anderen Einstellungen für
serielle Geräte verändern (Baud-Rate etc.), in der Hoffnung, dass Linux sie
auf die korrekten Werte festgelegt hat.

@item @code{baud-rate} (Vorgabe: @code{#f})
Eine Zeichenkette, die aus einer kommagetrennten Liste von einer oder
mehreren Baud-Raten besteht, absteigend sortiert.

@item @code{term} (Vorgabe: @code{#f})
A string containing the value used for the @env{TERM} environment variable.

@item @code{eight-bits?} (Vorgabe: @code{#f})
Steht dies auf @code{#t}, wird angenommen, dass das tty 8-Bit-korrekt ist,
so dass die Paritätserkennung abgeschaltet wird.

@item @code{auto-login} (Vorgabe: @code{#f})
Wird hier ein Anmeldename als eine Zeichenkette übergeben, wird der
angegebene Nutzer automatisch angemeldet, ohne nach einem Anmeldenamen oder
Passwort zu fragen.

@item @code{no-reset?} (Vorgabe: @code{#f})
Steht dies auf @code{#t}, werden die Cflags des Terminals (d.h.@: dessen
Steuermodi) nicht zurückgesetzt.

@item @code{host} (Vorgabe: @code{#f})
This accepts a string containing the ``login_host'', which will be written
into the @file{/var/run/utmpx} file.

@item @code{remote?} (Vorgabe: @code{#f})
Ist dies auf @code{#t} gesetzt, wird in Verbindung mit @var{host} eine
Befehlszeilenoption @code{-r} für einen falschen Rechnernamen („Fakehost“)
in der Befehlszeile des mit @var{login-program} angegebenen Anmeldeprogramms
übergeben.

@item @code{flow-control?} (Vorgabe: @code{#f})
Ist dies auf @code{#t} gesetzt, wird Hardware-Flusssteuerung (RTS/CTS)
aktiviert.

@item @code{no-issue?} (Vorgabe: @code{#f})
Ist dies auf @code{#t} gesetzt, wird der Inhalt der Datei @file{/etc/issue}
@emph{nicht} angezeigt, bevor die Anmeldeaufforderung zu sehen ist.

@item @code{init-string} (Vorgabe: @code{#f})
Dies akzeptiert eine Zeichenkette, die zum tty oder zum Modem zuerst vor
allem anderen gesendet wird. Es kann benutzt werden, um ein Modem zu
initialisieren.

@item @code{no-clear?} (Vorgabe: @code{#f})
Ist dies auf @code{#t} gesetzt, wird agetty den Bildschirm @emph{nicht}
löschen, bevor es die Anmeldeaufforderung anzeigt.

@item @code{login-program} (Vorgabe: (file-append shadow "/bin/login"))
Hier muss entweder ein G-Ausdruck mit dem Namen eines Anmeldeprogramms
übergeben werden, oder dieses Feld wird nicht gesetzt, so dass als
Vorgabewert das Programm @command{login} aus dem Shadow-Werkzeugsatz
verwendet wird.

@item @code{local-line} (Vorgabe: @code{#f})
Steuert den Leitungsschalter CLOCAL. Hierfür wird eines von drei Symbolen
als Argument akzeptiert, @code{'auto}, @code{'always} oder
@code{'never}. Für @code{#f} wählt agetty als Vorgabewert @code{'auto}.

@item @code{extract-baud?} (Vorgabe: @code{#f})
Ist dies auf @code{#t} gesetzt, so wird agetty angewiesen, die Baud-Rate aus
den Statusmeldungen mancher Arten von Modem abzulesen.

@item @code{skip-login?} (Vorgabe: @code{#f})
Ist dies auf @code{#t} gesetzt, wird der Benutzer nicht aufgefordert, einen
Anmeldenamen einzugeben. Dies kann zusammen mit dem @var{login-program}-Feld
benutzt werden, um nicht standardkonforme Anmeldesysteme zu benutzen.

@item @code{no-newline?} (Vorgabe: @code{#f})
Ist dies auf @code{#t} gesetzt, wird @emph{kein} Zeilenumbruch ausgegeben,
bevor die Datei @file{/etc/issue} ausgegeben wird.

@c Is this dangerous only when used with login-program, or always?
@item @code{login-options} (Vorgabe: @code{#f})
Dieses Feld akzeptiert eine Zeichenkette mit den Befehlszeilenoptionen für
das Anmeldeprogramm. Beachten Sie, dass bei einem selbst gewählten
@var{login-program} ein böswilliger Nutzer versuchen könnte, als
Anmeldenamen etwas mit eingebetteten Befehlszeilenoptionen anzugeben, die
vom Anmeldeprogramm interpretiert werden könnten.

@item @code{login-pause} (Vorgabe: @code{#f})
Ist dies auf @code{#t} gesetzt, wird auf das Drücken einer beliebigen Taste
gewartet, bevor die Anmeldeaufforderung angezeigt wird. Hiermit kann in
Verbindung mit @var{auto-login} weniger Speicher verbraucht werden, indem
man Shells erst erzeugt, wenn sie benötigt werden.

@item @code{chroot} (Vorgabe: @code{#f})
Wechselt die Wurzel des Dateisystems auf das angegebene Verzeichnis. Dieses
Feld akzeptiert einen Verzeichnispfad als Zeichenkette.

@item @code{hangup?} (Vorgabe: @code{#f})
Mit dem Linux-Systemaufruf @code{vhangup} auf dem angegebenen Terminal
virtuell auflegen.

@item @code{keep-baud?} (Vorgabe: @code{#f})
Ist dies auf @code{#t} gesetzt, wird versucht, die bestehende Baud-Rate
beizubehalten. Die Baud-Raten aus dem Feld @var{baud-rate} werden benutzt,
wenn agetty ein @key{BREAK}-Zeichen empfängt.

@item @code{timeout} (Vorgabe: @code{#f})
Ist dies auf einen ganzzahligen Wert gesetzt, wird terminiert, falls kein
Benutzername innerhalb von @var{timeout} Sekunden eingelesen werden konnte.

@item @code{detect-case?} (Vorgabe: @code{#f})
Ist dies auf @code{#t} gesetzt, wird Unterstützung für die Erkennung von
Terminals aktiviert, die nur Großschreibung beherrschen. Mit dieser
Einstellung wird, wenn ein Anmeldename nur aus Großbuchstaben besteht,
dieser als Anzeichen dafür aufgefasst, dass das Terminal nur Großbuchstaben
beherrscht, und einige Umwandlungen von Groß- in Kleinbuchstaben
aktiviert. Beachten Sie, dass dabei @emph{keine} Unicode-Zeichen unterstützt
werden.

@item @code{wait-cr?} (Vorgabe: @code{#f})
Wenn dies auf @code{#t} gesetzt ist, wird gewartet, bis der Benutzer oder
das Modem einen Wagenrücklauf („Carriage Return“) oder einen Zeilenvorschub
(„Linefeed“) absendet, ehe @file{/etc/issue} oder eine Anmeldeaufforderung
angezeigt wird. Dies wird typischerweise zusammen mit dem Feld
@var{init-string} benutzt.

@item @code{no-hints?} (Vorgabe: @code{#f})
Ist es auf @code{#t} gesetzt, werden @emph{keine} Hinweise zu den
Feststelltasten Num-Taste, Umschaltsperre („Caps Lock“) und Rollen-Taste
(„Scroll Lock“) angezeigt.

@item @code{no-hostname?} (Vorgabe: @code{#f})
Das vorgegebene Verhalten ist, den Rechnernamen auszugeben. Ist dieses Feld
auf @code{#t} gesetzt, wird überhaupt kein Rechnername angezeigt.

@item @code{long-hostname?} (Vorgabe: @code{#f})
Das vorgegebene Verhalten ist, den Rechnernamen nur bis zu seinem ersten
Punkt anzuzeigen. Ist dieses Feld auf @code{#t} gesetzt, wird der
vollständige Rechnername (der „Fully Qualified Hostname“), wie ihn
@code{gethostname} oder @code{getaddrinfo} liefern, angezeigt.

@item @code{erase-characters} (Vorgabe: @code{#f})
Dieses Feld akzeptiert eine Zeichenkette aus Zeichen, die auch als Rücktaste
(zum Löschen) interpretiert werden sollen, wenn der Benutzer seinen
Anmeldenamen eintippt.

@item @code{kill-characters} (Vorgabe: @code{#f})
This option accepts a string that should be interpreted to mean ``ignore all
previous characters'' (also called a ``kill'' character) when the user types
their login name.

@item @code{chdir} (Vorgabe: @code{#f})
Dieses Feld akzeptiert eine Zeichenkette, die einen Verzeichnispfad angibt,
zu dem vor der Anmeldung gewechselt wird.

@item @code{delay} (Vorgabe: @code{#f})
Dieses Feld akzeptiert eine ganze Zahl mit der Anzahl Sekunden, die gewartet
werden soll, bis ein tty geöffnet und die Anmeldeaufforderung angezeigt
wird.

@item @code{nice} (Vorgabe: @code{#f})
Dieses Feld akzeptiert eine ganze Zahl mit dem „nice“-Wert, mit dem das
Anmeldeprogramm ausgeführt werden soll.

@item @code{extra-options} (Vorgabe: @code{'()})
This option provides an ``escape hatch'' for the user to provide arbitrary
command-line arguments to @command{agetty} as a list of strings.

@end table
@end deftp

@deffn {Scheme-Prozedur} kmscon-service-type @var{Konfiguration}
Liefert einen Dienst, um
@uref{https://www.freedesktop.org/wiki/Software/kmscon,kmscon} entsprechend
der @var{Konfiguration} auszuführen. Diese ist ein
@code{<kmscon-configuration>}-Objekt, das unter anderem angibt, auf welchem
tty es ausgeführt werden soll.
@end deffn

@deftp {Datentyp} kmscon-configuration
Dieser Datentyp repräsentiert die Konfiguration von Kmscon, die das Anmelden
auf virtuellen Konsolen ermöglicht.

@table @asis

@item @code{virtual-terminal}
Der Name der Konsole, auf der diese Kmscon läuft — z.B.@: @code{"tty1"}.

@item @code{login-program} (Vorgabe: @code{#~(string-append #$shadow "/bin/login")})
Ein G-Ausdruck, der den Namen des Anmeldeprogramms angibt. Als Vorgabe wird
das Anmeldeprogramm @command{login} aus dem Shadow-Werkzeugsatz verwendet.

@item @code{login-arguments} (Vorgabe: @code{'("-p")})
Eine Liste der Argumente, die an @command{login} übergeben werden sollen.

@item @code{auto-login} (Vorgabe: @code{#f})
Wird hier ein Anmeldename als eine Zeichenkette übergeben, wird der
angegebene Nutzer automatisch angemeldet, ohne nach einem Anmeldenamen oder
Passwort zu fragen.

@item @code{hardware-acceleration?} (Vorgabe: #f)
Ob Hardware-Beschleunigung verwendet werden soll.

@item @code{kmscon} (Vorgabe: @var{kmscon})
Das Kmscon-Paket, das benutzt werden soll.

@end table
@end deftp

@cindex Name Service Cache Daemon
@cindex nscd
@deffn {Scheme-Prozedur} nscd-service [@var{Konfiguration}] [#:glibc glibc] @
                [#:name-services '()] Liefert einen Dienst, der den Name Service Cache
Daemon (nscd) von libc mit der angegebenen @var{Konfiguration} ausführt —
diese muss ein @code{<nscd-configuration>}-Objekt sein. Siehe @ref{Name Service Switch} für ein Beispiel.

Der Einfachheit halber bietet der Shepherd-Dienst für nscd die folgenden
Aktionen an:

@table @code
@item invalidate
@cindex Zwischenspeicher ungültig machen, nscd
@cindex nscd, Ungültigmachen des Zwischenspeichers
Dies macht den angegebenen Zwischenspeicher ungültig. Wenn Sie zum Beispiel:

@example
herd invalidate nscd hosts
@end example

@noindent
ausführen, wird der Zwischenspeicher für die Auflösung von Rechnernamen (von
„Host“-Namen) des nscd ungültig.

@item statistics
Wenn Sie @command{herd statistics nscd} ausführen, werden Ihnen
Informationen angezeigt, welche Ihnen Informationen über den nscd-Zustand
und die Zwischenspeicher angezeigt.
@end table

@end deffn

@defvr {Scheme-Variable} %nscd-default-configuration
This is the default @code{<nscd-configuration>} value (see below) used by
@code{nscd-service}.  It uses the caches defined by
@code{%nscd-default-caches}; see below.
@end defvr

@deftp {Datentyp} nscd-configuration
Dieser Datentyp repräsentiert die Konfiguration des Name Service Caching
Daemon (kurz „nscd“).

@table @asis

@item @code{name-services} (Vorgabe: @code{'()})
Liste von Paketen, die @dfn{Namensdienste} bezeichnen, die für den nscd
sichtbar sein müssen, z.B.@: @code{(list @var{nss-mdns})}.

@item @code{glibc} (Vorgabe: @var{glibc})
Ein Paket-Objekt, das die GNU-C-Bibliothek angibt, woraus der
@command{nscd}-Befehl genommen werden soll.

@item @code{log-file} (Vorgabe: @code{"/var/log/nscd.log"})
Name der nscd-Protokolldatei. Hierhin werden Ausgaben zur Fehlersuche
geschrieben, falls @code{debug-level} echt positiv ist.

@item @code{debug-level} (Vorgabe: @code{0})
Eine ganze Zahl, die den Detailgrad der Ausgabe zur Fehlersuche
angibt. Größere Zahlen bewirken eine ausführlichere Ausgabe.

@item @code{caches} (default: @code{%nscd-default-caches})
Liste der @code{<nscd-cache>}-Objekte, die repräsentieren, was alles
zwischengespeichert werden soll; siehe unten.

@end table
@end deftp

@deftp {Datentyp} nscd-cache
Ein Datentyp, der eine Zwischenspeicher-Datenbank von nscd mitsamt ihren
Parametern definiert.

@table @asis

@item @code{Datenbank}
Dies ist ein Symbol, was den Namen der Datenbank repräsentiert, die
zwischengespeichert werden soll. Gültige Werte sind @code{passwd},
@code{group}, @code{hosts} und @code{services}, womit jeweils die
entsprechende NSS-Datenbank bezeichnet wird (siehe @ref{NSS Basics,,, libc,
The GNU C Library Reference Manual}).

@item @code{positive-time-to-live}
@itemx @code{negative-time-to-live} (Vorgabe: @code{20})
Eine Zahl, die für die Anzahl an Sekunden steht, die ein erfolgreiches
(positives) oder erfolgloses (negatives) Nachschlageresultat im
Zwischenspeicher verbleibt.

@item @code{check-files?} (Vorgabe: @code{#t})
Ob auf Änderungen an den der @var{database} entsprechenden Dateien reagiert
werden soll.

Wenn @var{database} zum Beispiel @code{hosts} ist, wird, wenn dieses Feld
gesetzt ist, nscd Änderungen an @file{/etc/hosts} beobachten und
berücksichtigen.

@item @code{persistent?} (Vorgabe: @code{#t})
Ob der Zwischenspeicher dauerhaft auf der Platte gespeichert werden soll.

@item @code{shared?} (Vorgabe: @code{#t})
Ob der Zwischenspeicher zwischen den Nutzern geteilt werden soll.

@item @code{max-database-size} (Vorgabe: 32@tie{}MiB)
Die Maximalgröße des Datenbank-Zwischenspeichers in Bytes.

@c XXX: 'suggested-size' and 'auto-propagate?' seem to be expert
@c settings, so leave them out.

@end table
@end deftp

@defvr {Scheme-Variable} %nscd-default-caches
Liste von @code{<nscd-cache>}-Objekten, die von der vorgegebenen
@code{nscd-configuration} benutzt werden (siehe oben).

Damit wird dauerhaftes und aggressives Zwischenspeichern beim Nachschlagen
von Dienst- und Rechnernamen („Host“-Namen) aktiviert. Letzteres verbessert
die Leistungsfähigkeit beim Nachschlagen von Rechnernamen, sorgt für mehr
Widerstandsfähigkeit gegenüber unverlässlichen Namens-Servern und bietet
außerdem einen besseren Datenschutz — oftmals befindet sich das Ergebnis
einer Anfrage nach einem Rechnernamen bereits im lokalen Zwischenspeicher
und externe Namens-Server müssen nicht miteinbezogen werden.
@end defvr

@anchor{syslog-configuration-type}
@cindex syslog
@cindex Protokollierung
@deftp {Datentyp} syslog-configuration
Dieser Datentyp repräsentiert die Konfiguration des syslog-Daemons.

@table @asis
@item @code{syslogd} (Vorgabe: @code{#~(string-append #$inetutils "/libexec/syslogd")})
Welcher Syslog-Daemon benutzt werden soll.

@item @code{config-file} (Vorgabe: @code{%default-syslog.conf})
Die zu benutzende syslog-Konfigurationsdatei.

@end table
@end deftp

@anchor{syslog-service}
@cindex syslog
@deffn {Scheme-Prozedur} syslog-service @var{Konfiguration}
Liefert einen Dienst, der einen syslog-Daemon entsprechend der
@var{Konfiguration} ausführt.

Siehe @ref{syslogd invocation,,, inetutils, GNU Inetutils} für weitere
Informationen über die Syntax der Konfiguration.
@end deffn

@defvr {Scheme-Variable} guix-service-type
Dies ist der Typ für den Dienst, der den Erstellungs-Daemon
@command{guix-daemon} ausführt (siehe @ref{Aufruf des guix-daemon}). Als Wert
muss ein @code{guix-configuration}-Verbundsobjekt verwendet werden, wie
unten beschrieben.
@end defvr

@anchor{guix-configuration-type}
@deftp {Datentyp} guix-configuration
Dieser Datentyp repräsentiert die Konfiguration des Erstellungs-Daemons von
Guix. Siehe @ref{Aufruf des guix-daemon} für weitere Informationen.

@table @asis
@item @code{guix} (Vorgabe: @var{guix})
Das zu verwendende Guix-Paket.

@item @code{build-group} (Vorgabe: @code{"guixbuild"})
Der Name der Gruppe, zu der die Erstellungs-Benutzerkonten gehören.

@item @code{build-accounts} (Vorgabe: @code{10})
Die Anzahl zu erzeugender Erstellungs-Benutzerkonten.

@item @code{authorize-key?} (Vorgabe: @code{#t})
@cindex Substitute, deren Autorisierung
Ob die unter @code{authorized-keys} aufgelisteten Substitutschlüssel
autorisiert werden sollen — vorgegeben ist, den von
@code{@value{SUBSTITUTE-SERVER}} zu autorisieren (siehe @ref{Substitute}).

@vindex %default-authorized-guix-keys
@item @code{authorized-keys} (Vorgabe: @code{%default-authorized-guix-keys})
Die Liste der Dateien mit autorisierten Schlüsseln, d.h.@: eine Liste von
Zeichenketten als G-Ausdrücke (siehe @ref{Aufruf von guix archive}). Der
vorgegebene Inhalt ist der Schlüssel von @code{@value{SUBSTITUTE-SERVER}}
(siehe @ref{Substitute}).

@item @code{use-substitutes?} (Vorgabe: @code{#t})
Ob Substitute benutzt werden sollen.

@item @code{substitute-urls} (Vorgabe: @code{%default-substitute-urls})
Die Liste der URLs, auf denen nach Substituten gesucht wird, wenn nicht
anders angegeben.

@item @code{max-silent-time} (Vorgabe: @code{0})
@itemx @code{timeout} (Vorgabe: @code{0})
Die Anzahl an Sekunden, die jeweils nichts in die Ausgabe geschrieben werden
darf bzw. die es insgesamt dauern darf, bis ein Erstellungsprozess
abgebrochen wird. Beim Wert null wird nie abgebrochen.

@item @code{log-compression} (Vorgabe: @code{'bzip2})
Die für Erstellungsprotokolle zu benutzende Kompressionsmethode — entweder
@code{gzip}, @code{bzip2} oder @code{none}.

@item @code{extra-options} (Vorgabe: @code{'()})
Eine Liste zusätzlicher Befehlszeilenoptionen zu @command{guix-daemon}.

@item @code{log-file} (Vorgabe: @code{"/var/log/guix-daemon.log"})
Die Datei, in die die Standardausgabe und die Standardfehlerausgabe von
@command{guix-daemon} geschrieben werden.

@cindex HTTP-Proxy, für @code{guix-daemon}
@cindex Proxy, für HTTP-Zugriffe durch @code{guix-daemon}
@item @code{http-proxy} (Vorgabe: @code{#f})
Die URL des für das Herunterladen von Ableitungen mit fester Ausgabe und von
Substituten zu verwendenden HTTP- und HTTPS-Proxys.

Sie können den für den Daemon benutzten Proxy auch zur Laufzeit ändern,
indem Sie die @code{set-http-proxy}-Aktion aufrufen, wodurch er neu
gestartet wird.

@example
herd set-http-proxy guix-daemon http://localhost:8118
@end example

Um die Proxy-Einstellungen zu löschen, führen Sie dies aus:

@example
herd set-http-proxy guix-daemon
@end example

@item @code{tmpdir} (Vorgabe: @code{#f})
Ein Verzeichnispfad, der angibt, wo @command{guix-daemon} seine Erstellungen
durchführt.

@end table
@end deftp

@deffn {Scheme-Prozedur} udev-service [#:udev @var{eudev} #:rules @code{'()}]
Run @var{udev}, which populates the @file{/dev} directory dynamically.  udev
rules can be provided as a list of files through the @var{rules} variable.
The procedures @code{udev-rule}, @code{udev-rules-service} and
@code{file->udev-rule} from @code{(gnu services base)} simplify the creation
of such rule files.

Der Befehl @command{herd rules udev} liefert, wenn er als
Administratornutzer „root“ ausgeführt wird, Namen und Verzeichnis von allen
aktiven udev-Regeln.
@end deffn

@deffn {Scheme-Prozedur} udev-rule [@var{Dateiname} @var{Inhalt}]
Liefert eine udev-Regeldatei mit dem angegebenen @var{Dateiname}n, in der
die vom Literal @var{Inhalt} definierten Regeln stehen.

Im folgenden Beispiel wird eine Regel für ein USB-Gerät definiert und in der
Datei @file{90-usb-ding.rules} gespeichert. Mit der Regel wird ein Skript
ausgeführt, sobald ein USB-Gerät mit der angegebenen Produktkennung erkannt
wird.

@lisp
(define %beispiel-udev-rule
  (udev-rule
    "90-usb-ding.rules"
    (string-append "ACTION==\"add\", SUBSYSTEM==\"usb\", "
                   "ATTR@{product@}==\"Beispiel\", "
                   "RUN+=\"/pfad/zum/skript\"")))
@end lisp
@end deffn

@deffn {Scheme Procedure} udev-rules-service [@var{name} @var{rules}] @
               [#:groups @var{groups}] Return a service that extends
@code{udev-service-type } with @var{rules} and @code{account-service-type}
with @var{groups} as system groups.  This works by creating a singleton
service type @code{@var{name}-udev-rules}, of which the returned service is
an instance.

Here we show how it can be used to extend @code{udev-service-type} with the
previously defined rule @code{%example-udev-rule}.

@lisp
(operating-system
 ;; @dots{}
 (services
   (cons (udev-rules-service 'usb-thing %example-udev-rule)
         %desktop-services)))
@end lisp
@end deffn

@deffn {Scheme-Prozedur} file->udev-rule [@var{Dateiname} @var{Datei}]
Liefert eine udev-Datei mit dem angegebenen @var{Dateiname}n, in der alle in
der @var{Datei}, einem dateiartigen Objekt, definierten Regeln stehen.

Folgendes Beispiel stellt dar, wie wir eine bestehende Regeldatei verwenden
können.

@lisp
(use-modules (guix download)     ;für url-fetch
             (guix packages)     ;für origin
             …)

(define %android-udev-rules
  (file->udev-rule
    "51-android-udev.rules"
    (let ((version "20170910"))
      (origin
       (method url-fetch)
       (uri (string-append "https://raw.githubusercontent.com/M0Rf30/"
                           "android-udev-rules/" version "/51-android.rules"))
       (sha256
        (base32 "0lmmagpyb6xsq6zcr2w1cyx9qmjqmajkvrdbhjx32gqf1d9is003"))))))
@end lisp
@end deffn

Zusätzlich können Guix-Paketdefinitionen unter den @var{rules} aufgeführt
werden, um die udev-Regeln um diejenigen Definitionen zu ergänzen, die im
Unterverzeichnis @file{lib/udev/rules.d} des jeweiligen Pakets aufgeführt
sind. Statt des bisherigen Beispiels zu @var{file->udev-rule} hätten wir
also auch das Paket @var{android-udev-rules} benutzen können, das in Guix im
Modul @code{(gnu packages android)} vorhanden ist.

The following example shows how to use the @var{android-udev-rules} package
so that the Android tool @command{adb} can detect devices without root
privileges.  It also details how to create the @code{adbusers} group, which
is required for the proper functioning of the rules defined within the
@code{android-udev-rules} package.  To create such a group, we must define
it both as part of the @code{supplementary-groups} of our
@code{user-account} declaration, as well as in the @var{groups} of the
@code{udev-rules-service} procedure.

@lisp
(use-modules (gnu packages android)  ;für android-udev-rules
             (gnu system shadow)     ;für user-group
             …)

(operating-system
  ;; @dots{}
  (users (cons (user-account
                ;; @dots{}
                (supplementary-groups
                 '("adbusers"   ;for adb
                   "wheel" "netdev" "audio" "video")))))
  ;; @dots{}
  (services
    (cons (udev-rules-service 'android android-udev-rules
                              #:groups '("adbusers"))
          %desktop-services)))
@end lisp

@defvr {Scheme-Variable} urandom-seed-service-type
Save some entropy in @code{%random-seed-file} to seed @file{/dev/urandom}
when rebooting.  It also tries to seed @file{/dev/urandom} from
@file{/dev/hwrng} while booting, if @file{/dev/hwrng} exists and is
readable.
@end defvr

@defvr {Scheme-Variable} %random-seed-file
Der Name der Datei, in der einige zufällige Bytes vom
@var{urandom-seed-service} abgespeichert werden, um sie nach einem Neustart
von dort als Startwert für @file{/dev/urandom} auslesen zu können. Als
Vorgabe wird @file{/var/lib/random-seed} verwendet.
@end defvr

@cindex Maus
@cindex gpm
@defvr {Scheme-Variable} gpm-service-type
Dieser Typ wird für den Dienst verwendet, der GPM ausführt, den
@dfn{General-Purpose Mouse Daemon}, welcher zur Linux-Konsole
Mausunterstützung hinzufügt. GPM ermöglicht es seinen Benutzern, auch in der
Konsole die Maus zu benutzen und damit etwa Text auszuwählen, zu kopieren
und einzufügen.

Der Wert für Dienste dieses Typs muss eine @code{gpm-configuration} sein
(siehe unten). Dieser Dienst gehört @emph{nicht} zu den
@code{%base-services}.
@end defvr

@deftp {Datentyp} gpm-configuration
Repräsentiert die Konfiguration von GPM.

@table @asis
@item @code{options} (Vorgabe: @code{%default-gpm-options})
Befehlszeilenoptionen, die an @command{gpm} übergeben werden. Die
vorgegebenen Optionen weisen @command{gpm} an, auf Maus-Ereignisse auf der
Datei @file{/dev/input/mice} zu lauschen. Siehe @ref{Command Line,,, gpm,
gpm manual} für weitere Informationen.

@item @code{gpm} (Vorgabe: @code{gpm})
Das GPM-Paket, was benutzt werden soll.

@end table
@end deftp

@anchor{guix-publish-service-type}
@deffn {Scheme-Variable} guix-publish-service-type
Dies ist der Diensttyp für @command{guix publish} (siehe @ref{Aufruf von guix publish}). Sein Wert muss ein @code{guix-publish-configuration}-Objekt sein,
wie im Folgenden beschrieben.

Hierbei wird angenommen, dass @file{/etc/guix} bereits ein mit @command{guix
archive --generate-key} erzeugtes Schlüsselpaar zum Signieren enthält (siehe
@ref{Aufruf von guix archive}). Falls nicht, wird der Dienst beim Starten
fehlschlagen.
@end deffn

@deftp {Datentyp} guix-publish-configuration
Der Datentyp, der die Konfiguration des „@code{guix publish}“-Dienstes
repräsentiert.

@table @asis
@item @code{guix} (Vorgabe: @code{guix})
Das zu verwendende Guix-Paket.

@item @code{port} (Vorgabe: @code{80})
Der TCP-Port, auf dem auf Verbindungen gelauscht werden soll.

@item @code{host} (Vorgabe: @code{"localhost"})
Unter welcher Rechneradresse (welchem „Host“, also welcher
Netzwerkschnittstelle) auf Verbindungen gelauscht wird. Benutzen Sie
@code{"0.0.0.0"}, wenn auf allen verfügbaren Netzwerkschnittstellen
gelauscht werden soll.

@item @code{compression} (Vorgabe: @code{'(("gzip" 3))})
Dies ist eine Liste von Tupeln aus Kompressionsmethode und -stufe, die zur
Kompression von Substituten benutzt werden. Um zum Beispiel alle Substitute
mit @emph{beiden}, sowohl lzip auf Stufe 7 und gzip auf Stufe 9, zu
komprimieren, schreiben Sie:

@lisp
'(("lzip" 7) ("gzip" 9))
@end lisp

Auf Stufe 9 ist das Kompressionsverhältnis am besten, auf Kosten von hoher
Prozessorauslastung, während auf Stufe 1 eine schnelle Kompression erreicht
wird.

Wird eine leere Liste angegeben, wird Kompression abgeschaltet.

@item @code{nar-path} (Vorgabe: @code{"nar"})
The URL path at which ``nars'' can be fetched.  @xref{Aufruf von guix publish,
@option{--nar-path}}, for details.

@item @code{cache} (Vorgabe: @code{#f})
Wenn dies @code{#f} ist, werden Archive nicht zwischengespeichert, sondern
erst bei einer Anfrage erzeugt. Andernfalls sollte dies der Name eines
Verzeichnisses sein — z.B.@: @code{"/var/cache/guix/publish"} —, in das
@command{guix publish} fertige Archive und Metadaten zwischenspeichern
soll. Siehe @ref{Aufruf von guix publish, @option{--cache}} für weitere
Informationen über die jeweiligen Vor- und Nachteile.

@item @code{workers} (Vorgabe: @code{#f})
Ist dies eine ganze Zahl, gibt es die Anzahl der Worker-Threads an, die zum
Zwischenspeichern benutzt werden; ist es @code{#f}, werden so viele benutzt,
wie es Prozessoren gibt. Siehe @ref{Aufruf von guix publish,
@option{--workers}} für mehr Informationen.

@item @code{ttl} (Vorgabe: @code{#f})
Wenn dies eine ganze Zahl ist, bezeichnet sie die @dfn{Time-to-live} als die
Anzahl der Sekunden, die heruntergeladene veröffentlichte Archive
zwischengespeichert werden dürfen. Siehe @ref{Aufruf von guix publish,
@option{--ttl}} für mehr Informationen.
@end table
@end deftp

@anchor{rngd-service}
@deffn {Scheme-Prozedur} rngd-service [#:rng-tools @var{rng-tools}] @
            [#:device "/dev/hwrng"] Liefert einen Dienst, der das
@command{rngd}-Programm aus den @var{rng-tools} benutzt, um das mit
@var{device} bezeichnete Gerät zum Entropie-Pool des Kernels
hinzuzufügen. Dieser Dienst wird fehlschlagen, falls das mit @var{device}
bezeichnete Gerät nicht existiert.
@end deffn

@anchor{pam-limits-service}
@cindex Sitzungs-Limits
@cindex ulimit
@cindex Priorität
@cindex Echtzeit
@cindex jackd
@deffn {Scheme-Prozedur} pam-limits-service [#:limits @code{'()}]

Liefert einen Dienst, der eine Konfigurationsdatei für das
@uref{http://linux-pam.org/Linux-PAM-html/sag-pam_limits.html,
@code{pam_limits}-Modul} installiert. Diese Prozedur nimmt optional eine
Liste von @code{pam-limits-entry}-Werten entgegen, die benutzt werden
können, um @code{ulimit}-Limits und nice-Prioritäten für Benutzersitzungen
festzulegen.

Die folgenden Limit-Definitionen setzen zwei harte und weiche Limits für
alle Anmeldesitzungen für Benutzer in der @code{realtime}-Gruppe.

@lisp
(pam-limits-service
 (list
  (pam-limits-entry "@@realtime" 'both 'rtprio 99)
  (pam-limits-entry "@@realtime" 'both 'memlock 'unlimited)))
@end lisp

Der erste Eintrag erhöht die maximale Echtzeit-Priorität für unprivilegierte
Prozesse ohne zusätzliche Berechtigungen; der zweite Eintrag hebt jegliche
Einschränkungen des maximalen Adressbereichs auf, der im Speicher reserviert
werden darf. Diese Einstellungen werden in dieser Form oft für
Echtzeit-Audio-Systeme verwendet.
@end deffn

@node Geplante Auftragsausführung
@subsection Geplante Auftragsausführung

@cindex cron
@cindex mcron
@cindex Planen von Aufträgen
Das Modul @code{(gnu services mcron)} enthält eine Schnittstelle zu
GNU@tie{}mcron, einem Daemon, der gemäß einem vorher festgelegten Zeitplan
Aufträge (sogenannte „Jobs“) ausführt (siehe @ref{Top,,, mcron,
GNU@tie{}mcron}). GNU@tie{}mcron ist ähnlich zum traditionellen
@command{cron}-Daemon aus Unix; der größte Unterschied ist, dass mcron in
Guile Scheme implementiert ist, wodurch einem viel Flexibilität bei der
Spezifikation von Aufträgen und ihren Aktionen offen steht.

Das folgende Beispiel definiert ein Betriebssystem, das täglich die Befehle
@command{updatedb} (siehe @ref{Invoking updatedb,,, find, Finding Files})
und @command{guix gc} (siehe @ref{Aufruf von guix gc}) ausführt sowie den
Befehl @command{mkid} im Namen eines „unprivilegierten“ Nutzers ohne
besondere Berechtigungen laufen lässt (siehe @ref{mkid invocation,,,
idutils, ID Database Utilities}). Zum Anlegen von Auftragsdefinitionen
benutzt es G-Ausdrücke, die dann an mcron übergeben werden (siehe
@ref{G-Ausdrücke}).

@lisp
(use-modules (guix) (gnu) (gnu services mcron))
(use-package-modules base idutils)

(define updatedb-job
  ;; 'updatedb' jeden Tag um 3 Uhr morgens ausführen. Hier schreiben wir
  ;; die vom Auftrag durchzuführende Aktion als eine Scheme-Prozedur.
  #~(job '(next-hour '(3))
         (lambda ()
           (execl (string-append #$findutils "/bin/updatedb")
                  "updatedb"
                  "--prunepaths=/tmp /var/tmp /gnu/store"))))

(define garbage-collector-job
  ;; Jeden Tag 5 Minuten nach Mitternacht Müll sammeln gehen.
  ;; Die Aktions des Auftrags ist ein Shell-Befehl.
  #~(job "5 0 * * *"            ;Vixie-cron-Syntax
         "guix gc -F 1G"))

(define idutils-job
  ;; Die Index-Datenbank des Benutzers "charlie" um 12:15 Uhr und
  ;; 19:15 Uhr aktualisieren. Dies wird aus seinem Persönlichen
  ;; Ordner heraus ausgeführt.
  #~(job '(next-minute-from (next-hour '(12 19)) '(15))
         (string-append #$idutils "/bin/mkid src")
         #:user "charlie"))

(operating-system
  ;; …
  (services (cons (service mcron-service-type
                           (mcron-configuration
                            (jobs (list garbage-collector-job
                                        updatedb-job
                                        idutils-job))))
                  %base-services)))
@end lisp

Wenn Sie einen komplexeren Auftrag mit Scheme-Code auf oberster Ebene
festlegen möchten, um zum Beispiel eine @code{use-modules}-Form einzuführen,
können Sie Ihren Code in ein separates Programm verschieben, indem Sie die
Prozedur @code{program-file} aus dem Modul @code{(guix gexp)} benutzen
(siehe @ref{G-Ausdrücke}). Das folgende Beispiel veranschaulicht dies.

@lisp
(define %batterie-alarm-auftrag
  ;; Piepsen, wenn die Akkuladung in Prozent unter %MIN-NIVEAU fällt.
  #~(job
     '(next-minute (range 0 60 1))
     #$(program-file
        "batterie-alarm.scm"
        (with-imported-modules (source-module-closure
                                '((guix build utils)))
          #~(begin
              (define %min-niveau 20)
              (use-modules (guix build utils)
                           (ice-9 popen)
                           (ice-9 regex)
                           (ice-9 textual-ports)
                           (srfi srfi-2))
              (setenv "LC_ALL" "C")     ;Ausgabe auf Englisch
              (and-let* ((input-pipe (open-pipe*
                                      OPEN_READ
                                      #$(file-append acpi "/bin/acpi")))
                         (ausgabe (get-string-all input-pipe))
                         (m (string-match "Discharging, ([0-9]+)%" ausgabe))
                         (niveau (string->number (match:substring m 1)))
                         ((< niveau %min-niveau)))
                (format #t "Warnung: Batterieladung nur noch (~a%)~%" niveau)
                (invoke #$(file-append beep "/bin/beep") "-r5")))))))
@end lisp

Siehe @ref{Guile Syntax, mcron job specifications,, mcron, GNU@tie{}mcron}
für weitere Informationen zu mcron-Auftragsspezifikationen. Nun folgt die
Referenz des mcron-Dienstes.

Wenn das System läuft, können Sie mit der Aktion @code{schedule} des
Dienstes visualisieren lassen, welche mcron-Aufträge als Nächstes ausgeführt
werden:

@example
# herd schedule mcron
@end example

@noindent
Das vorangehende Beispiel listet die nächsten fünf Aufgaben auf, die
ausgeführt werden, aber Sie können auch angeben, wieviele Aufgaben angezeigt
werden sollen:

@example
# herd schedule mcron 10
@end example

@defvr {Scheme-Variable} mcron-service-type
Dies ist der Diensttyp des @code{mcron}-Dienstes. Als Wert verwendet er ein
@code{mcron-configuration}-Objekt.

Dieser Diensttyp kann als Ziel einer Diensterweiterung verwendet werden, die
ihn mit zusätzlichen Auftragsspezifikationen versorgt (siehe @ref{Dienstkompositionen}). Mit anderen Worten ist es möglich, Dienste zu definieren, die
weitere mcron-Aufträge ausführen lassen.
@end defvr

@deftp {Datentyp} mcron-configuration
Datentyp, der die Konfiguration von mcron repräsentiert.

@table @asis
@item @code{mcron} (Vorgabe: @var{mcron})
Welches mcron-Paket benutzt werden soll.

@item @code{jobs}
Dies muss eine Liste von G-Ausdrücken sein (siehe @ref{G-Ausdrücke}), die
jeweils einer mcron-Auftragsspezifikation (der Spezifikation eines „Jobs“)
entsprechen (siehe @ref{Syntax, mcron job specifications,, mcron,
GNU@tie{}mcron}).
@end table
@end deftp


@node Log-Rotation
@subsection Log-Rotation

@cindex rottlog
@cindex Log-Rotation
@cindex Protokollierung
Protokolldateien wie die in @file{/var/log} neigen dazu, bis ins Unendliche
zu wachsen, deshalb ist es eine gute Idee, sie von Zeit zu Zeit zu
@dfn{rotieren} — d.h.@: ihren Inhalt in separaten Dateien zu archivieren,
welche optional auch komprimiert werden. Das Modul @code{(gnu services
admin)} stellt eine Schnittstelle zu GNU@tie{}Rot[t]log bereit, einem
Werkzeug, um Protokolldateien („Log“-Dateien) zu rotieren (siehe @ref{Top,,,
rottlog, GNU Rot[t]log Manual}).

Dieser Dienst ist Teil der @code{%base-services} und daher standardmäßig mit
seinen Vorgabeeinstellungen für übliche Log-Dateien aktiv. Das Beispiel
unten zeigt, wie Sie ihn um eine weitere @dfn{rotation} erweitern können,
wenn dies nötig wird (normalerweise kümmern sich darum schon die Dienste,
die die Log-Dateien erzeugen):

@lisp
(use-modules (guix) (gnu))
(use-service-modules admin)

(define my-log-files
  ;; Log-Dateien, die ich rotieren lassen will.
  '("/var/log/irgendein.log" "/var/log/noch-ein.log"))

(operating-system
  ;; …
  (services (cons (simple-service 'meinen-kram-rotieren
                                  rottlog-service-type
                                  (list (log-rotation
                                         (frequency 'daily)
                                         (files my-log-files))))
                  %base-services)))
@end lisp

@defvr {Scheme-Variable} rottlog-service-type
Dies ist der Typ des Rottlog-Dienstes, dessen Wert ein
@code{rottlog-configuration}-Objekt ist.

Andere Dienste können diesen Dienst um neue @code{log-rotation}-Objekte
erweitern (siehe unten), wodurch die Auswahl an zu rotierenden Dateien
ausgeweitet wird.

Dieser Diensttyp kann mcron-Aufträge definieren (siehe @ref{Geplante Auftragsausführung}), die den rottlog-Dienst ausführen.
@end defvr

@deftp {Datentyp} rottlog-configuration
Datentyp, der die Konfiguration von rottlog repräsentiert.

@table @asis
@item @code{rottlog} (Vorgabe: @code{rottlog})
Das Rottlog-Paket, das verwendet werden soll.

@item @code{rc-file} (Vorgabe: @code{(file-append rottlog "/etc/rc")})
Die zu benutzende Rottlog-Konfigurationsdatei (siehe @ref{Mandatory RC
Variables,,, rottlog, GNU Rot[t]log Manual}).

@item @code{rotations} (Vorgabe: @code{%default-rotations})
Eine Liste von @code{log-rotation}-Objekten, wie wir sie weiter unten
definieren.

@item @code{jobs}
Dies ist eine Liste von G-Ausdrücken. Jeder G-Ausdruck darin entspricht
einer mcron-Auftragsspezifikation (siehe @ref{Geplante Auftragsausführung}).
@end table
@end deftp

@deftp {Datentyp} log-rotation
Datentyp, der die Rotation einer Gruppe von Protokolldateien repräsentiert.

Um ein Beispiel aus dem Rottlog-Handbuch (siehe @ref{Period Related File
Examples,,, rottlog, GNU Rot[t]log Manual}) aufzugreifen: Eine Log-Rotation
kann auf folgende Art definiert werden:

@lisp
(log-rotation
  (frequency 'daily) ;täglich
  (files '("/var/log/apache/*"))
  (options '("storedir apache-archives"
             "rotate 6"
             "notifempty"
             "nocompress")))
@end lisp

Die Liste der Felder ist folgendermaßen aufgebaut:

@table @asis
@item @code{frequency} (Vorgabe: @code{'weekly})
Die Häufigkeit der Log-Rotation, dargestellt als englischsprachiges Symbol.

@item @code{files}
Die Liste der Dateien oder Glob-Muster für Dateien, die rotiert werden
sollen.

@item @code{options} (Vorgabe: @code{'()})
Die Liste der Rottlog-Optionen für diese Rotation (siehe @ref{Configuration
parameters,,, rottlog, GNU Rot[t]lg Manual}).

@item @code{post-rotate} (Vorgabe: @code{#f})
Entweder @code{#f} oder ein G-Ausdruck, der nach Abschluss der Rotation
einmal ausgeführt wird.
@end table
@end deftp

@defvr {Scheme-Variable} %default-rotations
Specifies weekly rotation of @code{%rotated-files} and of
@file{/var/log/guix-daemon.log}.
@end defvr

@defvr {Scheme-Variable} %rotated-files
Die Liste der von Syslog verwalteten Dateien, die rotiert werden
sollen. Vorgegeben ist @code{'("/var/log/messages" "/var/log/secure"
"/var/log/debug"  "/var/log/maillog")}.
@end defvr

@node Netzwerkdienste
@subsection Netzwerkdienste

Das Modul @code{(gnu services networking)} bietet Dienste zum Konfigurieren
des Netzwerks an.

@cindex DHCP, Netzwerkdienst
@defvr {Scheme-Variable} dhcp-client-service-type
Dies ist der Diensttyp für den Dienst, der @var{dhcp} ausführt, einen Client
für das „Dynamic Host Configuration Protocol“ (DHCP), der auf allen
Netzwerkschnittstellen außer „loopback“ läuft. Sein Wert ist das zu
verwendende DHCP-Client-Paket; vorgegeben ist @code{isc-dhcp}.
@end defvr

@deffn {Scheme-Prozedur} dhcpd-service-type
Dieser Diensttyp definiert einen Dienst, der einen DHCP-Daemon ausführt. Um
einen Dienst zu diesem Typ anzugeben, müssen Sie eine
@code{<dhcpd-configuration>} bereitstellen. Zum Beispiel so:

@lisp
(service dhcpd-service-type
         (dhcpd-configuration
          (config-file (local-file "my-dhcpd.conf"))
          (interfaces '("enp0s25"))))
@end lisp
@end deffn

@deftp {Datentyp} dhcpd-configuration
@table @asis
@item @code{package} (Vorgabe: @code{isc-dhcp})
Das Paket, das den DHCP-Daemon zur Verfügung stellt. Von diesem Paket wird
erwartet, dass es den Daemon unter dem Pfad @file{sbin/dhcpd} relativ zum
Verzeichnis der Paketausgabe bereitstellt. Das vorgegebene Paket ist
@uref{https://www.isc.org/products/DHCP, der DHCP-Server vom ISC}.
@item @code{config-file} (Vorgabe: @code{#f})
Die Konfigurationsdatei, die benutzt werden soll. Sie @emph{muss} angegeben
werden und wird an @code{dhcpd} mittels seiner Befehlszeilenoption
@code{-cf} übergeben. Ein beliebiges „dateiartiges“ Objekt kann dafür
angegeben werden (siehe @ref{G-Ausdrücke, dateiartige Objekte}). Siehe
@code{man dhcpd.conf} für Details, welcher Syntax die Konfigurationsdatei
genügen muss.
@item @code{version} (Vorgabe: @code{"4"})
Die DHCP-Version, die benutzt werden soll. Der ISC-DHCP-Server unterstützt
die Werte „4“, „6“ und „4o6“. Das Feld entspricht den Befehlszeilenoptionen
@code{-4}, @code{-6} und @code{-4o6} von @code{dhcpd}. Siehe @code{man
dhcpd} für Details.
@item @code{run-directory} (Vorgabe: @code{"/run/dhcpd"})
Das zu benutzende Laufzeit-Verzeichnis („run“-Verzeichnis). Wenn der Dienst
aktiviert wird, wird dieses Verzeichnis erzeugt, wenn es noch nicht
existiert.
@item @code{pid-file} (Vorgabe: @code{"/run/dhcpd/dhcpd.pid"})
Die zu benutzende PID-Datei. Dieses Feld entspricht der Befehlszeilenoption
@code{-pf} von @code{dhcpd}. Siehe @code{man dhcpd} für Details.
@item @code{interfaces} (Vorgabe: @code{'()})
Die Namen der Netzwerkschnittstelle, auf der dhcpd auf Broadcast-Nachrichten
lauscht. Wenn diese Liste nicht leer ist, werden ihre Elemente (diese müssen
Zeichenketten sein) an den @code{dhcpd}-Aufruf beim Starten des Daemons
angehängt. Es ist unter Umständen @emph{nicht} nötig, hier Schnittstellen
ausdrücklich anzugeben; siehe @code{man dhcpd} für Details.
@end table
@end deftp

@defvr {Scheme-Variable} static-networking-service-type
@c TODO Document <static-networking> data structures.
Dies ist der Typ für statisch konfigurierte Netzwerkschnittstellen.
@end defvr

@deffn {Scheme-Prozedur} static-networking-service @var{Schnittstelle} @var{IP} @
       [#:netmask #f] [#:gateway #f] [#:name-servers @code{'()}] @ [#:requirement
@code{'(udev)}] Liefert einen Dienst, der die @var{Schnittstelle} auf dieser
@var{IP}-Adresse startet. Wenn @var{netmask} wahr ist, wird es als
Netzwerkmaske benutzt. Wenn @var{gateway} wahr ist, muss es eine
Zeichenkette sein, die den voreingestellten Netzwerk-Zugang
(„Netzwerk-Gateway“) angibt. Als @var{requirement} („Anforderung“) können
Abhängigkeiten von anderen Diensten deklariert werden, die vor dem
Konfigurieren der Schnittstelle gestartet sein müssen.

Diese Prozedur kann mehrmals aufgerufen werden, einmal pro
Netzwerkschnittstelle, die Sie möchten. Intern funktioniert sie, indem sie
@code{static-networking-service-type} mit zusätzlichen
Netzwerkschnittstellen erweitert, um die sich der Dienst kümmern soll.

Zum Beispiel:

@lisp
(static-networking-service "eno1" "192.168.1.82"
                           #:gateway "192.168.1.2"
                           #:name-servers '("192.168.1.2"))
@end lisp
@end deffn

@cindex wicd
@cindex WLAN
@cindex WiFi
@cindex Netzwerkverwaltung
@deffn {Scheme-Prozedur} wicd-service [#:wicd @var{wicd}]
Liefert einen Dienst, der @url{https://launchpad.net/wicd,Wicd} ausführt,
einen Netzwerkverwaltungsdaemon, um ein einfacheres Einrichten
kabelgebundener und drahtloser Netzwerkanbindungen zu ermöglichen.

Dieser Dienst fügt das @var{wicd}-Paket zum globalen Profil hinzu und stellt
dadurch mehrere Befehle zur Verfügung, um mit dem Daemon zu interagieren und
Netzwerke einzurichten: @command{wicd-client}, eine grafische
Benutzeroberfläche, und die Benutzungsschnittstellen @command{wicd-cli} und
@command{wicd-curses}.
@end deffn

@cindex ModemManager

@defvr {Scheme-Variable} modem-manager-service-type
Dies ist der Diensttyp für den
@uref{https://wiki.gnome.org/Projects/ModemManager,
ModemManager-Dienst}. Der Wert dieses Diensttyps ist ein
@code{modem-manager-configuration}-Verbundsobjekt.

Dieser Dienst gehört zu den @code{%desktop-services} (siehe @ref{Desktop-Dienste}).
@end defvr

@deftp {Datentyp} modem-manager-configuration
Repräsentiert die Konfiguration vom ModemManager.

@table @asis
@item @code{modem-manager} (Vorgabe: @code{modem-manager})
Das ModemManager-Paket, was benutzt werden soll.

@end table
@end deftp

@cindex USB_ModeSwitch
@cindex Modeswitching

@defvr {Scheme-Variable} usb-modeswitch-service-type
Dies ist der Diensttyp für den
@uref{https://www.draisberghof.de/usb_modeswitch/,
USB_ModeSwitch-Dienst}. Der Wert dieses Diensttyps ist ein
@code{usb-modeswitch-configuration}-Verbundsobjekt.

Wenn sie eingesteckt werden, geben sich manche USB-Modems (und andere
USB-Geräte) zunächst als Nur-Lese-Speichermedien und nicht als Modem
aus. Sie müssen erst einem Moduswechsel („Modeswitching“) unterzogen werden,
bevor sie benutzt werden können. Der USB_ModeSwitch-Diensttyp installiert
udev-Regeln, um bei diesen Geräten automatisch ein Modeswitching
durchzuführen, wenn sie eingesteckt werden.

Dieser Dienst gehört zu den @code{%desktop-services} (siehe @ref{Desktop-Dienste}).
@end defvr

@deftp {Datentyp} usb-modeswitch-configuration
Der Datentyp, der die Konfiguration von USB_ModeSwitch repräsentiert.

@table @asis
@item @code{usb-modeswitch} (Vorgabe: @code{usb-modeswitch})
Das USB_ModeSwitch-Paket, das die Programmdateien für das Modeswitching
enthält.

@item @code{usb-modeswitch-data} (Vorgabe: @code{usb-modeswitch-data})
Das Paket, in dem die Gerätedaten und die udev-Regeldatei stehen, die
USB_ModeSwitch benutzt.

@item @code{config-file} (Vorgabe: @code{#~(string-append #$usb-modeswitch:dispatcher "/etc/usb_modeswitch.conf")})
Welche Konfigurationsdatei das USB_ModeSwitch-Aufrufprogramm („Dispatcher“)
benutzt. Nach Vorgabe wird die mit USB_ModeSwitch ausgelieferte
Konfigurationsdatei benutzt, die neben anderen Voreinstellungen die
Protokollierung nach @file{/var/log} abschaltet. Wenn @code{#f} festgelegt
wird, wird keine Konfigurationsdatei benutzt.

@end table
@end deftp

@cindex NetworkManager

@defvr {Scheme-Variable} network-manager-service-type
Dies ist der Diensttyp für den
@uref{https://wiki.gnome.org/Projects/NetworkManager,
NetworkManager-Dienst}. Der Wert dieses Diensttyps ist ein
@code{network-manager-configuration}-Verbundsobjekt.

Dieser Dienst gehört zu den @code{%desktop-services} (siehe @ref{Desktop-Dienste}).
@end defvr

@deftp {Datentyp} network-manager-configuration
Datentyp, der die Konfiguration von NetworkManager repräsentiert.

@table @asis
@item @code{network-manager} (Vorgabe: @code{network-manager})
Das zu verwendende NetworkManager-Paket.

@item @code{dns} (Vorgabe: @code{"default"})
Der Verarbeitungsmodus für DNS-Anfragen. Er hat Einfluss darauf, wie
NetworkManager mit der Konfigurationsdatei @code{resolv.conf} verfährt.

@table @samp
@item default
NetworkManager aktualisiert @code{resolv.conf}, damit sie die Nameserver
enthält, die von zur Zeit aktiven Verbindungen benutzt werden.

@item dnsmasq
NetworkManager führt @code{dnsmasq} als lokal zwischenspeichernden
Nameserver aus und aktualisiert @code{resolv.conf} so, dass es auf den
lokalen Nameserver verweist. Falls Sie mit einem VPN verbunden sind, wird
dafür eine getrennte DNS-Auflösung verwendet („Conditional Forwarding“).

Mit dieser Einstellung können Sie Ihre Netzwerkverbindung teilen. Wenn Sie
sie zum Beispiel mit einem anderen Laptop über ein Ethernet-Kabel teilen
möchten, können Sie @command{nm-connection-editor} öffnen und die Methode
der Ethernet-Verbindung für IPv4 und IPv6 auf „Gemeinsam mit anderen
Rechnern“ stellen und daraufhin die Verbindung neu herstellen (oder Ihren
Rechner neu starten).

Sie können so auch eine Verbindung vom Wirts- zum Gastsystem in virtuellen
Maschinen mit QEMU (siehe @ref{Guix in einer VM installieren}) herstellen, d.h.@:
eine „Host-to-Guest Connection“). Mit einer solchen
Wirt-nach-Gast-Verbindung können Sie z.B.@: von einem Webbrowser auf Ihrem
Wirtssystem auf einen Web-Server zugreifen, der auf der VM läuft (siehe
@ref{Web-Dienste}). Sie können sich damit auch über SSH mit der virtuellen
Maschine verbinden (siehe @ref{Netzwerkdienste,
@code{openssh-service-type}}). Um eine Wirt-nach-Gast-Verbindung
einzurichten, führen Sie einmal diesen Befehl aus:

@example
nmcli connection add type tun \
 connection.interface-name tap0 \
 tun.mode tap tun.owner $(id -u) \
 ipv4.method shared \
 ipv4.addresses 172.28.112.1/24
@end example

Danach geben Sie bei jedem Start Ihrer virtuellen QEMU-Maschine (siehe
@ref{Guix in einer VM starten}) die Befehlszeilenoption @option{-nic
tap,ifname=tap0,script=no,downscript=no} an @command{qemu-system-…} mit.

@item none
NetworkManager verändert @code{resolv.conf} nicht.
@end table

@item @code{vpn-plugins} (Vorgabe: @code{'()})
Dies ist die Liste der verfügbaren Plugins für virtuelle private Netzwerke
(VPN). Zum Beispiel kann das Paket @code{network-manager-openvpn} angegeben
werden, womit NetworkManager virtuelle private Netzwerke mit OpenVPN
verwalten kann.

@end table
@end deftp

@cindex Connman
@deffn {Scheme-Variable} connman-service-type
Mit diesem Diensttyp wird @url{https://01.org/connman,Connman} ausgeführt,
ein Programm zum Verwalten von Netzwerkverbindungen.

Sein Wert muss ein @code{connman-configuration}-Verbundsobjekt wie im
folgenden Beispiel sein:

@lisp
(service connman-service-type
         (connman-configuration
           (disable-vpn? #t)))
@end lisp

Weiter unten werden Details der @code{connman-configuration} erklärt.
@end deffn

@deftp {Datentyp} connman-configuration
Datentyp, der die Konfiguration von Connman repräsentiert.

@table @asis
@item @code{connman} (Vorgabe: @var{connman})
Das zu verwendende Connman-Paket.

@item @code{disable-vpn?} (Vorgabe: @code{#f})
Falls dies auf wahr gesetzt ist, wird Connmans VPN-Plugin deaktiviert.
@end table
@end deftp

@cindex WPA-Supplikant
@defvr {Scheme-Variable} wpa-supplicant-service-type
Dies ist der Diensttyp, um @url{https://w1.fi/wpa_supplicant/,WPA
Supplicant} auszuführen. Dabei handelt es sich um einen
Authentisierungsdaemon, der notwendig ist, um sich gegenüber verschlüsselten
WLAN- oder Ethernet-Netzwerken zu authentisieren.
@end defvr

@deftp {Datentyp} wpa-supplicant-configuration
Repräsentiert die Konfiguration des WPA-Supplikanten.

Sie hat folgende Parameter:

@table @asis
@item @code{wpa-supplicant} (Vorgabe: @code{wpa-supplicant})
Das WPA-Supplicant-Paket, was benutzt werden soll.

@item @code{dbus?} (Vorgabe: @code{#t})
Ob auf Anfragen auf D-Bus gelauscht werden soll.

@item @code{pid-file} (Vorgabe: @code{"/var/run/wpa_supplicant.pid"})
Wo die PID-Datei abgelegt wird.

@item @code{interface} (Vorgabe: @code{#f})
Wenn dieses Feld gesetzt ist, muss es den Namen einer Netzwerkschnittstelle
angeben, die von WPA Supplicant verwaltet werden soll.

@item @code{config-file} (Vorgabe: @code{#f})
Optionale Konfigurationsdatei.

@item @code{extra-options} (Vorgabe: @code{'()})
Liste zusätzlicher Befehlszeilenoptionen, die an den Daemon übergeben
werden.
@end table
@end deftp

@cindex hostapd service, for Wi-Fi access points
@cindex Wi-Fi access points, hostapd service
@defvr {Scheme Variable} hostapd-service-type
This is the service type to run the @uref{https://w1.fi/hostapd/, hostapd}
daemon to set up WiFi (IEEE 802.11) access points and authentication
servers.  Its associated value must be a @code{hostapd-configuration} as
shown below:

@lisp
;; Use wlan1 to run the access point for "My Network".
(service hostapd-service-type
         (hostapd-configuration
          (interface "wlan1")
          (ssid "My Network")
          (channel 12)))
@end lisp
@end defvr

@deftp {Data Type} hostapd-configuration
This data type represents the configuration of the hostapd service, with the
following fields:

@table @asis
@item @code{package} (default: @code{hostapd})
The hostapd package to use.

@item @code{interface} (default: @code{"wlan0"})
The network interface to run the WiFi access point.

@item @code{ssid}
The SSID (@dfn{service set identifier}), a string that identifies this
network.

@item @code{broadcast-ssid?} (default: @code{#t})
Whether to broadcast this SSID.

@item @code{channel} (default: @code{1})
The WiFi channel to use.

@item @code{driver} (default: @code{"nl80211"})
The driver interface type.  @code{"nl80211"} is used with all Linux mac80211
drivers.  Use @code{"none"} if building hostapd as a standalone RADIUS
server that does # not control any wireless/wired driver.

@item @code{extra-settings} (Vorgabe: @code{""})
Extra settings to append as-is to the hostapd configuration file.  See
@uref{https://w1.fi/cgit/hostap/plain/hostapd/hostapd.conf} for the
configuration file reference.
@end table
@end deftp

@defvr {Scheme Variable} simulated-wifi-service-type
This is the type of a service to simulate WiFi networking, which can be
useful in virtual machines for testing purposes.  The service loads the
Linux kernel
@uref{https://www.kernel.org/doc/html/latest/networking/mac80211_hwsim/mac80211_hwsim.html,
@code{mac80211_hwsim} module} and starts hostapd to create a pseudo WiFi
network that can be seen on @code{wlan0}, by default.

The service's value is a @code{hostapd-configuration} record.
@end defvr

@cindex iptables
@defvr {Scheme-Variable} iptables-service-type
Mit diesem Diensttyp wird eine iptables-Konfiguration eingerichtet. iptables
ist ein Rahmen für Netzwerkpaketfilter, der vom Linux-Kernel unterstützt
wird. Der Dienst unterstützt die Konfiguration von iptables für sowohl IPv4
als auch IPv6. Eine einfache Beispielkonfiguration, die alle eingehenden
Verbindungen verweigert, die nicht an den SSH-Port 22 gehen, können Sie hier
sehen:

@lisp
(service iptables-service-type
         (iptables-configuration
          (ipv4-rules (plain-file "iptables.rules" "*filter
:INPUT ACCEPT
:FORWARD ACCEPT
:OUTPUT ACCEPT
-A INPUT -p tcp --dport 22 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-port-unreachable
COMMIT
"))
          (ipv6-rules (plain-file "ip6tables.rules" "*filter
:INPUT ACCEPT
:FORWARD ACCEPT
:OUTPUT ACCEPT
-A INPUT -p tcp --dport 22 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp6-port-unreachable
COMMIT
"))))
@end lisp
@end defvr

@deftp {Datentyp} iptables-configuration
Repräsentiert die iptables-Konfiguration.

@table @asis
@item @code{iptables} (Vorgabe: @code{iptables})
Das zu benutzende iptables-Paket, das @code{iptables-restore} und
@code{ip6tables-restore} zur Verfügung stellt.
@item @code{ipv4-rules} (Vorgabe: @code{%iptables-accept-all-rules})
Die zu benutzenden iptables-Regeln. Diese werden an @code{iptables-restore}
übergeben. Als Regeln kann jedes „dateiartige“ Objekt angegeben werden
(siehe @ref{G-Ausdrücke, dateiartige Objekte}).
@item @code{ipv6-rules} (Vorgabe: @code{%iptables-accept-all-rules})
Die zu benutzenden ip6tables-Regeln. Diese werden an
@code{ip6tables-restore} übergeben. Als Regeln kann jedes „dateiartige“
Objekt angegeben werden (siehe @ref{G-Ausdrücke, dateiartige Objekte}).
@end table
@end deftp

@cindex nftables
@defvr {Scheme-Variable} nftables-service-type
Dieser Dienst richtet eine Konfiguration von nftables ein. nftables ist als
Projekt ein Teil von Netfilter mit dem Ziel, den bestehenden Aufbau aus
iptables, ip6tables, arptables und ebtables zu ersetzen. Es stellt einen
neuen Rahmen für Netzwerkpaketfilter bereit sowie ein neues Werkzeug
@command{nft} auf Anwendungsebene und eine Kompatibilitätsschicht für
iptables. Dieser Dienst wird zusammen mit @code{%default-nftables-ruleset}
ausgeliefert, einem vorgegebenen Satz von Regeln, der alle eingehenden
Verbindungen außer auf dem SSH-Port 22 ablehnt. Um ihn zu benutzen,
schreiben Sie einfach:

@lisp
(service nftables-service-type)
@end lisp
@end defvr

@deftp {Datentyp} nftables-configuration
Datentyp, der die nftables-Konfiguration repräsentiert.

@table @asis
@item @code{package} (Vorgabe: @code{nftables})
Das nftables-Paket, das @command{nft} zur Verfügung stellt.
@item @code{ruleset} (Vorgabe: @code{%default-nftables-ruleset})
Die zu benutzenden nftables-Regeln. Als Regeln kann jedes „dateiartige“
Objekt angegeben werden (siehe @ref{G-Ausdrücke, dateiartige Objekte}).
@end table
@end deftp

@cindex NTP (Network Time Protocol), Dienst
@cindex ntpd, Dienst für den Network-Time-Protocol-Daemon
@cindex Echtzeituhr
@defvr {Scheme-Variable} ntp-service-type
Dies ist der Typ des Dienstes, der den @command{ntpd}-Daemon für das
@uref{https://www.ntp.org, Network Time Protocol}, kurz NTP, ausführt. Mit
diesem Daemon wird die Systemuhr mit der Uhr auf den angegebenen NTP-Servern
synchronisiert.

Der Wert dieses Dienstes ist ein @code{ntpd-configuration}-Objekt, wie im
Folgenden beschrieben.
@end defvr

@deftp {Datentyp} ntp-configuration
Der Datentyp für die Dienstkonfiguration des NTP-Dienstes.

@table @asis
@item @code{servers} (Vorgabe: @code{%ntp-servers})
Dies ist die Liste der Server (@code{<ntp-server>}-Verbundsobjekte), mit
denen @command{ntpd} synchronisiert wird. Siehe die Definition des
@code{ntp-server}-Datentyps weiter unten.

@item @code{allow-large-adjustment?} (Vorgabe: @code{#t})
Hiermit wird festgelegt, ob @command{ntpd} die Uhr beim ersten Umstellen um
mehr als 1.000 Sekunden ändern darf.

@item @code{ntp} (Vorgabe: @code{ntp})
Das NTP-Paket, was benutzt werden soll.
@end table
@end deftp

@defvr {Scheme-Variable} %ntp-servers
Liste der Rechnernamen („Host“-Namen), die als vorgegebene NTP-Server
benutzt werden. Dabei handelt es sich um die Server des
@uref{https://www.ntppool.org/en/, NTP Pool Project}.
@end defvr

@deftp {Datentyp} ntp-server
Der Datentyp, der die Konfiguration eines NTP-Servers repräsentiert.

@table @asis
@item @code{type} (Vorgabe: @code{'server})
Die Art des NTP-Servers als Symbol, entweder @code{'pool}, @code{'server},
@code{'peer}, @code{'broadcast} oder @code{'manycastclient}.

@item @code{address}
Die Adresse des Servers als Zeichenkette.

@item @code{options}
NTPD-Optionen, die für diesen bestimmten Server gelten sollen, angegeben als
Liste von Optionsnamen und/oder Tupeln aus je Optionsname und -wert. Im
folgenden Beispiel wird ein Server definiert, der die Optionen
@option{iburst} und @option{prefer} sowie @option{version} 3 und eine
@option{maxpoll}-Zeit von 16 Sekunden benutzen soll.

@example
(ntp-server
 (type 'server)
 (address "ein.ntp.server.org")
 (options `(iburst (version 3) (maxpoll 16) prefer))))
@end example
@end table
@end deftp

@cindex OpenNTPD
@deffn {Scheme-Prozedur} openntpd-service-type
Hiermit wird @command{ntpd}, der Network-Time-Protocol-Daemon (NTP-Daemon),
ausgeführt, in seiner @uref{http://www.openntpd.org,
OpenNTPD-Implementierung}. Der Daemon sorgt dafür, dass die Systemuhr mit
den Uhren der eingestellten Server synchron bleibt.

@lisp
(service
 openntpd-service-type
 (openntpd-configuration
  (listen-on '("127.0.0.1" "::1"))
  (sensor '("udcf0 correction 70000"))
  (constraint-from '("www.gnu.org"))
  (constraints-from '("https://www.google.com/"))
  (allow-large-adjustment? #t)))

@end lisp
@end deffn

@defvr {Scheme-Variable} %openntpd-servers
This variable is a list of the server addresses defined in
@code{%ntp-servers}.
@end defvr

@deftp {Datentyp} openntpd-configuration
@table @asis
@item @code{openntpd} (Vorgabe: @code{(file-append openntpd "/sbin/ntpd")})
Das openntpd-Programm, das benutzt werden soll.
@item @code{listen-on} (Vorgabe: @code{'("127.0.0.1" "::1")})
Eine Liste von lokalen IP-Adressen oder Rechnernamen („Host“-Namen), auf
denen der ntpd-Daemon lauschen soll.
@item @code{query-from} (Vorgabe: @code{'()})
Eine Liste von lokalen IP-Adressen, die der ntpd-Daemon für ausgehende
Anfragen benutzen soll.
@item @code{sensor} (Vorgabe: @code{'()})
Hiermit geben Sie eine Liste von Zeitdifferenz-Sensorgeräten an, die ntpd
benutzen soll. @code{ntpd} wird auf jeden Sensor lauschen, der auch
tatsächlich existiert, und solche, die nicht existieren, ignorieren. Siehe
die @uref{https://man.openbsd.org/ntpd.conf, Dokumentation beim Anbieter}
für weitere Informationen.
@item @code{server} (Vorgabe: @code{'()})
Hiermit geben Sie eine Liste von IP-Adressen oder Rechnernamen von
NTP-Servern an, mit denen synchronisiert werden soll.
@item @code{servers} (default: @code{%openntp-servers})
Hiermit geben Sie eine Liste von IP-Adressen oder Rechnernamen von NTP-Pools
an, mit denen synchronisiert werden soll.
@item @code{constraint-from} (Vorgabe: @code{'()})
@code{ntpd} kann so eingestellt werden, dass es das Datum aus der
„Date“-Kopfzeile bei mit TLS übermittelten Anfragen an HTTPS-Server, denen
vertraut wird, ausliest. Diese Zeitinformation wird nicht für Genauigkeit
benutzt, sondern um mit authentifizierten Informationen die Auswirkungen
eines Man-in-the-Middle-Angriffs auf unauthentifizierte NTP-Kommunikation
einzuschränken. Geben Sie hierzu eine Liste von URLs, IP-Adressen oder
Rechnernamen („Host“-Namen) von HTTPS-Servern an, um eine solche
Beschränkung („Constraint“) einzurichten.
@item @code{constraints-from} (Vorgabe: @code{'()})
Wie bei @code{constraint-from} geben Sie auch hier eine Liste von URLs,
IP-Adressen oder Rechnernamen von HTTPS-Servern an, um eine Beschränkung
einzurichten. Falls der Rechnername zu mehreren IP-Adressen aufgelöst wird,
berechnet @code{ntpd} den Median von allen als Beschränkung.
@item @code{allow-large-adjustment?} (Vorgabe: @code{#f})
Legt fest, ob @code{ntpd} die Uhr beim ersten Umstellen um mehr als 180
Sekunden verstellen darf.
@end table
@end deftp

@cindex inetd
@deffn {Scheme-Variable} inetd-service-type
Dieser Dienst führt den @command{inetd}-Daemon aus (siehe @ref{inetd
invocation,,, inetutils, GNU Inetutils}). @command{inetd} lauscht auf
Verbindungen mit Internet-Sockets und startet bei Bedarf das entsprechende
Server-Programm, sobald eine Verbindung mit einem dieser Sockets hergestellt
wird.

Der Wert dieses Dienstes ist ein @code{inetd-configuration}-Objekt. Im
folgenden Beispiel wird der @command{inetd}-Daemon konfiguriert, um den
eingebauten @command{echo}-Dienst sowie einen SMTP-Dienst anzubieten, wobei
letzterer SMTP-Kommunikation über SSH an einen Server @code{smtp-server}
über einen vom @code{rechnername}n bezeichneten Zugang („Gateway“)
weiterleitet:

@lisp
(service
 inetd-service-type
 (inetd-configuration
  (entries (list
            (inetd-entry
             (name "echo")
             (socket-type 'stream)
             (protocol "tcp")
             (wait? #f)
             (user "root"))
            (inetd-entry
             (node "127.0.0.1")
             (name "smtp")
             (socket-type 'stream)
             (protocol "tcp")
             (wait? #f)
             (user "root")
             (program (file-append openssh "/bin/ssh"))
             (arguments
              '("ssh" "-qT" "-i" "/pfad/zum/ssh_schlüssel"
                "-W" "smtp-server:25" "benutzer@@rechnername")))))))
@end lisp

Siehe unten für mehr Details über @code{inetd-configuration}.
@end deffn

@deftp {Datentyp} inetd-configuration
Datentyp, der die Konfiguration von @command{inetd} repräsentiert.

@table @asis
@item @code{program} (Vorgabe: @code{(file-append inetutils "/libexec/inetd")})
Das @command{inetd}-Programm, das benutzt werden soll.

@item @code{entries} (Vorgabe: @code{'()})
Eine Liste von @command{inetd}-Diensteinträgen. Jeder Eintrag sollte von
einem @code{inetd-entry}-Konstruktor erzeugt werden.
@end table
@end deftp

@deftp {Datentyp} inetd-entry
Datentyp, der einen Eintrag in der @command{inetd}-Konfiguration
repräsentiert. Jeder Eintrag entspricht einem Socket, auf dem
@command{inetd} auf Anfragen lauscht.

@table @asis
@item @code{node} (Vorgabe: @code{#f})
Optional sollte hier als Zeichenkette eine kommagetrennte Liste lokaler
Adressen angegeben werden, die @command{inetd} benutzen soll, wenn er
stellvertretend für den angegebenen Dienst lauscht. Siehe @ref{Configuration
file,,, inetutils, GNU Inetutils} für eine vollständige Beschreibung aller
Optionen.
@item @code{name}
Eine Zeichenkette. Dieser Name muss einem Eintrag in @code{/etc/services}
entsprechen.
@item @code{socket-type}
Entweder @code{'stream}, @code{'dgram}, @code{'raw}, @code{'rdm} oder
@code{'seqpacket}.
@item @code{protocol}
Eine Zeichenkette, die einem Eintrag in @code{/etc/protocols} entsprechen
muss.
@item @code{wait?} (Vorgabe: @code{#t})
Ob @command{inetd} warten soll, bis der Server beendet ist, bevor es wieder
auf neue Anfragen an den Dienst lauscht.
@item @code{user}
Eine Zeichenkette mit dem Benutzernamen (und optional dem Gruppennamen) des
Benutzers, als der dieser Server ausgeführt werden soll. Der Gruppenname
kann als Suffix angegeben werden, getrennt durch einen Doppelpunkt oder
Punkt, d.h.@: @code{"benutzer"}, @code{"benutzer:gruppe"} oder
@code{"benutzer.gruppe"}.
@item @code{program} (Vorgabe: @code{"internal"})
Das Serverprogramm, das die Anfragen bedienen soll, oder @code{"internal"},
wenn @command{inetd} einen eingebauten Dienst verwenden soll.
@item @code{arguments} (Vorgabe: @code{'()})
Eine Liste von Zeichenketten oder dateiartigen Objekten, die dem
Serverprogramm als Argumente übergeben werden, angefangen mit dem nullten
Argument, d.h.@: dem Namen selbigen Serverprogramms. Bei in @command{inetd}
eingebauten Diensten muss dieser Eintrag auf @code{'()} oder
@code{'("internal")} gesetzt sein.
@end table

Siehe @ref{Configuration file,,, inetutils, GNU Inetutils} für eine mehr ins
Detail gehende Erörterung jedes Konfigurationsfeldes.
@end deftp

@cindex Tor
@defvr {Scheme-Variable} tor-service-type
Dies ist der Diensttyp für den Dienst, der den @uref{https://torproject.org,
Tor-Daemon} für anonyme Netzwerkrouten ausführt. Der Dienst benutzt für
seine Konfiguration ein
@code{<tor-configuration>}-Verbundsobjekt. Vorgegeben ist, dass der
Tor-Daemon als „unprivilegierter“ Nutzer @code{tor} ausgeführt wird, einem
Mitglied der @code{tor}-Benutzergruppe ohne besondere Berechtigungen.

@end defvr

@deftp {Datentyp} tor-configuration
@table @asis
@item @code{tor} (Vorgabe: @code{tor})
Das Paket, das den Tor-Daemon zur Verfügung stellt. Von diesem Paket wird
erwartet, dass es den Daemon unter dem Pfad @file{bin/tor} relativ zum
Ausgabeverzeichnis verfügbar macht. Das vorgegebene Paket ist die
Implementierung des @uref{https://www.torproject.org, Tor-Projekts}.

@item @code{config-file} (Vorgabe: @code{(plain-file "empty" "")})
Die Konfigurationsdatei, die benutzt werden soll. Sie wird an eine
vorgegebene Konfigurationsdatei angehängt und die sich daraus ergebende
Konfigurationsdatei wird dann an @code{tor} über dessen Befehlszeilenoption
@code{-f} übergeben. Hier kann jedes „dateiartige“ Objekt (siehe
@ref{G-Ausdrücke, dateiartige Objekte}) angegeben werden. Siehe @code{man
tor} für Details zur Syntax der Konfigurationsdatei.

@item @code{hidden-services} (Vorgabe: @code{'()})
Die Liste der zu benutzenden „versteckten Dienste“ als
@code{<hidden-service>}-Verbundsobjekte. Für jeden versteckten Dienst, den
Sie in dieser Liste eintragen, werden automatisch entsprechende
Einstellungen zur vorgefertigten Konfigurationsdatei hinzugefügt. Sie können
@code{<hidden-service>}-Verbundsobjekte bequem mit der unten beschriebenen
Prozedur @code{tor-hidden-service} erzeugen lassen.

@item @code{socks-socket-type} (Vorgabe: @code{'tcp})
Welche Art von Socket Tor für seinen SOCKS-Socket in der Voreinstellung
benutzen soll. Dafür muss entweder @code{'tcp} oder @code{'unix} angegeben
werden. Für @code{'tcp} wird Tor nach Voreinstellung auf dem TCP-Port 9050
auf der loopback-Schnittstelle (d.h.@: localhost) lauschen. Für @code{'unix}
wird Tor auf dem UNIX-Socket @file{/var/run/tor/socks-sock} lauschen, auf
den Mitglieder der @code{tor}-Benutzergruppe Schreibberechtigung erhalten.

Wenn Sie detailliertere Anpassungen am SOCKS-Socket vornehmen wollen,
belassen Sie @code{socks-socket-type} bei seinem vorgegebenen Wert
@code{'tcp} und benutzen Sie @code{config-file}, um diese Voreinstellung mit
Ihrer eigenen @code{SocksPort}-Option zu überspielen.
@end table
@end deftp

@cindex versteckter Dienst
@deffn {Scheme-Prozedur} tor-hidden-service @var{Name} @var{Zuordnung}
Hiermit wird ein neuer @dfn{versteckter Dienst} von Tor mit diesem
@var{Name}n definiert, der die @var{Zuordnung} herstellt. Die
@var{Zuordnung} ist eine Liste von Port-/Rechner-Tupeln wie hier:

@example
 '((22 "127.0.0.1:22")
   (80 "127.0.0.1:8080"))
@end example

In diesem Beispiel wird Port 22 des versteckten Dienstes an den ihm
zugeordneten lokalen Port 22 weitergeleitet und Port 80 wird an den lokalen
Port 8080 weitergeleitet.

Dadurch wird ein Verzeichnis @file{/var/lib/tor/hidden-services/@var{Name}}
erstellt, worin sich in der Datei @file{hostname} der
@code{.onion}-Rechnername („Host“-Name) des versteckten Dienstes befindet.

Siehe @uref{https://www.torproject.org/docs/tor-hidden-service.html.en, die
Dokumentation des Tor-Projekts} für weitere Informationen.
@end deffn

Das Modul @code{(gnu services rsync)} bietet die folgenden Dienste an:

Sie könnten einen rsync-Daemon einsetzen wollen, um Dateien verfügbar zu
machen, damit jeder (oder nur Sie) bestehende Dateien herunterladen oder
neue Dateien hochladen kann.

@deffn {Scheme-Variable} rsync-service-type
Dies ist der Diensttyp für den @uref{https://rsync.samba.org, rsync-Daemon},
er benutzt ein @command{rsync-configuration}-Verbundsobjekt wie in diesem
Beispiel:

@lisp
(service rsync-service-type)
@end lisp

Siehe unten für Details zur @code{rsync-configuration}.
@end deffn

@deftp {Datentyp} rsync-configuration
Datentyp, der die Konfiguration für den @code{rsync-service} repräsentiert.

@table @asis
@item @code{package} (Vorgabe: @var{rsync})
Zu benutzendes @code{rsync}-Paket.

@item @code{port-number} (Vorgabe: @code{873})
Der TCP-Port, auf dem @command{rsync} auf eingehende Verbindungen
lauscht. Wenn die Portnummer kleiner als @code{1024} ist, muss
@command{rsync} als Administratornutzer @code{root} und auch mit dieser
Benutzergruppe gestartet werden.

@item @code{pid-file} (Vorgabe: @code{"/var/run/rsyncd/rsyncd.pid"})
Der Name der Datei, in die @command{rsync} seine PID schreibt.

@item @code{lock-file} (Vorgabe: @code{"/var/run/rsyncd/rsyncd.lock"})
Der Name der Datei, die @command{rsync} als seine Sperrdatei verwendet.

@item @code{log-file} (Vorgabe: @code{"/var/log/rsyncd.log"})
Der Name der Datei, in die @command{rsync} seine Protokolle schreibt.

@item @code{use-chroot?} (Vorgabe: @var{#t})
Ob chroot auf das über @command{rsync} geteilte Verzeichnis angewandt werden
soll.

@item @code{share-path} (Vorgabe: @file{/srv/rsync})
Der Ort des Verzeichnisses, das @command{rsync} teilt, d.h.@: seine „Shared
Directory“.

@item @code{share-comment} (Vorgabe: @code{"Rsync share"})
Kommentar zum von @command{rsync} geteilten Verzeichnis.

@item @code{read-only?} (Vorgabe: @var{#f})
Bestimmt die Lese- und Schreibberechtigungen für das gemeinsame Verzeichnis.

@item @code{timeout} (Vorgabe: @code{300})
Ein-/Ausgabe-Zeitbeschränkung in Sekunden.

@item @code{user} (Vorgabe: @var{"root"})
Das Benutzerkonto, dem der @code{rsync}-Prozess gehören soll.

@item @code{group} (Vorgabe: @var{"root"})
Die Benutzergruppe des @code{rsync}-Prozesses.

@item @code{uid} (Vorgabe: @var{"rsyncd"})
Der Benutzername oder der Benutzeridentifikator (d.h.@: die „User-ID“), mit
dem Dateiübertragungen zum und vom Modul stattfinden sollen, wenn der Daemon
als Administratornutzer @code{root} läuft.

@item @code{gid} (Vorgabe: @var{"rsyncd"})
Benutzergruppenname oder Gruppenidentifikator („Group-ID“), mit dem auf das
Modul zugegriffen wird.

@end table
@end deftp

Des Weiteren bietet das Modul @code{(gnu services ssh)} die folgenden
Dienste an.
@cindex SSH
@cindex SSH-Server

@deffn {Scheme-Prozedur} lsh-service [#:host-key "/etc/lsh/host-key"] @
       [#:daemonic? #t] [#:interfaces '()] [#:port-number 22] @
[#:allow-empty-passwords? #f] [#:root-login? #f] @ [#:syslog-output? #t]
[#:x11-forwarding? #t] @ [#:tcp/ip-forwarding? #t]
[#:password-authentication? #t] @ [#:public-key-authentication? #t]
[#:initialize? #t] Das @command{lshd}-Programm auf dem @var{lsh}-Paket so
ausführen, dass es auf dem Port mit Portnummer @var{port-number}
lauscht. @var{host-key} muss eine Datei angeben, die den Wirtsschlüssel
enthält, die nur für den Administratornutzer lesbar sein darf.

Wenn @var{daemonic?} wahr ist, entkoppelt sich @command{lshd} vom Terminal,
auf dem er läuft, und schickt seine Protokolle an syslogd, außer
@var{syslog-output?} ist auf falsch gesetzt. Selbstverständlich hängt der
lsh-service dann auch von der Existenz eines syslogd-Dienstes ab. Wenn
@var{pid-file?} wahr ist, schreibt @command{lshd} seine PID in die Datei
namens @var{pid-file}.

Wenn @var{initialize?} wahr ist, wird der Startwert zur Verschlüsselung
ebenso wie der Wirtsschlüssel bei der Dienstaktivierung erstellt, falls sie
noch nicht existieren. Das kann lange dauern und Anwenderinteraktion kann
dabei erforderlich sein.

Wenn @var{initialize?} falsch ist, bleibt es dem Nutzer überlassen, den
Zufallsgenerator zu initialisieren (siehe @ref{lsh-make-seed,,, lsh, LSH
Manual}) und ein Schlüsselpaar zu erzeugen, dessen privater Schlüssel in der
mit @var{host-key} angegebenen Datei steht (siehe @ref{lshd basics,,, lsh,
LSH Manual}).

Wenn @var{interfaces} leer ist, lauscht lshd an allen Netzwerkschnittstellen
auf Verbindungen, andernfalls muss @var{interfaces} eine Liste von
Rechnernamen („Host“-Namen) oder Adressen bezeichnen.

@var{allow-empty-passwords?} gibt an, ob Anmeldungen mit leeren Passwörtern
akzeptiert werden sollen, und @var{root-login?} gibt an, ob Anmeldungen als
Administratornutzer „root“ akzeptiert werden sollen.

Die anderen Felder sollten selbsterklärend sein.
@end deffn

@cindex SSH
@cindex SSH-Server
@deffn {Scheme-Variable} openssh-service-type
Dies ist der Diensttyp für den @uref{http://www.openssh.org,
OpenSSH-Secure-Shell-Daemon}, @command{sshd}. Sein Wert muss ein
@code{openssh-configuration}-Verbundsobjekt wie in diesem Beispiel sein:

@lisp
(service openssh-service-type
         (openssh-configuration
           (x11-forwarding? #t)
           (permit-root-login 'without-password)
           (authorized-keys
             `(("alice" ,(local-file "alice.pub"))
               ("bob" ,(local-file "bob.pub"))))))
@end lisp

Siehe unten für Details zur @code{openssh-configuration}.

Dieser Dienst kann mit weiteren autorisierten Schlüsseln erweitert werden,
wie in diesem Beispiel:

@lisp
(service-extension openssh-service-type
                   (const `(("charlie"
                             ,(local-file "charlie.pub")))))
@end lisp
@end deffn

@deftp {Datentyp} openssh-configuration
Dies ist der Verbundstyp für die Konfiguration von OpenSSHs @command{sshd}.

@table @asis
@item @code{pid-file} (Vorgabe: @code{"/var/run/sshd.pid"})
Der Name der Datei, in die @command{sshd} seine PID schreibt.

@item @code{port-number} (Vorgabe: @code{22})
Der TCP-Port, auf dem @command{sshd} auf eingehende Verbindungen lauscht.

@item @code{permit-root-login} (Vorgabe: @code{#f})
Dieses Feld bestimmt, ob und wann Anmeldungen als Administratornutzer „root“
erlaubt sind. Wenn es @code{#f} ist, sind Anmeldungen als Administrator
gesperrt, bei @code{#t} sind sie erlaubt. Wird hier das Symbol
@code{'without-password} angegeben, dann sind Anmeldungen als Administrator
erlaubt, aber nur, wenn keine passwortbasierte Authentifizierung verwendet
wird.

@item @code{allow-empty-passwords?} (Vorgabe: @code{#f})
Wenn dies auf wahr gesetzt ist, können sich Nutzer, deren Passwort leer ist,
anmelden. Ist es falsch, können sie es nicht.

@item @code{password-authentication?} (Vorgabe: @code{#t})
Wenn dies wahr ist, können sich Benutzer mit ihrem Passwort anmelden. Wenn
es falsch ist, müssen sie andere Authentisierungsmethoden benutzen.

@item @code{public-key-authentication?} (Vorgabe: @code{#t})
Wenn dies wahr ist, können Benutzer zur Anmeldung mit ihrem öffentlichen
Schlüssel authentifiziert werden. Wenn es falsch ist, müssen sie andere
Authentisierungsmethoden benutzen.

Autorisierte öffentliche Schlüssel werden in @file{~/.ssh/authorized_keys}
gespeichert. Dies wird nur für Protokollversion 2 benutzt.

@item @code{x11-forwarding?} (Vorgabe: @code{#f})
Wenn dies auf wahr gesetzt ist, ist das Weiterleiten von Verbindungen an
grafische X11-Clients erlaubt — mit anderen Worten funktionieren dann die
@command{ssh}-Befehlszeilenoptionen @option{-X} und @option{-Y}.

@item @code{allow-agent-forwarding?} (Vorgabe: @code{#t})
Ob Weiterleitung an den SSH-Agenten zugelassen werden soll.

@item @code{allow-tcp-forwarding?} (Vorgabe: @code{#t})
Ob Weiterleitung von TCP-Kommunikation zugelassen werden soll.

@item @code{gateway-ports?} (Vorgabe: @code{#f})
Ob Ports als Zugang für eingehende Verbindungen („Gateway-Ports“)
weitergeleitet werden dürfen.

@item @code{challenge-response-authentication?} (Vorgabe: @code{#f})
Gibt an, ob „Challenge-Response“-Authentifizierung zugelassen wird (z.B.@:
über PAM).

@item @code{use-pam?} (Vorgabe: @code{#t})
Aktiviert die Pluggable-Authentication-Module-Schnittstelle. Wenn es auf
@code{#t} gesetzt ist, wird dadurch PAM-Authentisierung über
@code{challenge-response-authentication?} und
@code{password-authentication?} aktiviert, zusätzlich zur Verarbeitung von
PAM-Konten und Sitzungsmodulen für alle Authentisierungsarten.

Weil PAM-Challenge-Response-Authentisierung oft für dieselben Zwecke wie
Passwortauthentisierung eingesetzt wird, sollten Sie entweder
@code{challenge-response-authentication?} oder
@code{password-authentication?} deaktivieren.

@item @code{print-last-log?} (Vorgabe: @code{#t})
Hiermit wird angegeben, ob @command{sshd} Datum und Uhrzeit der letzten
Anmeldung anzeigen soll, wenn sich ein Benutzer interaktiv anmeldet.

@item @code{subsystems} (Vorgabe: @code{'(("sftp" "internal-sftp"))})
Hiermit werden externe Subsysteme konfiguriert (z.B.@: ein
Dateiübertragungsdaemon).

Diese werden als Liste von zweielementigen Listen angegeben, von denen jede
den Namen des Subsystems und einen Befehl (mit optionalen
Befehlszeilenargumenten) benennt, der bei einer Anfrage an das Subsystem
ausgeführt werden soll.

The command @command{internal-sftp} implements an in-process SFTP server.
Alternatively, one can specify the @command{sftp-server} command:
@lisp
(service openssh-service-type
         (openssh-configuration
          (subsystems
           `(("sftp" ,(file-append openssh "/libexec/sftp-server"))))))
@end lisp

@item @code{accepted-environment} (Vorgabe: @code{'()})
Eine Liste von Zeichenketten, die die Umgebungsvariablen benennen, die
exportiert werden dürfen.

Jede Zeichenkette wird zu einer eigenen Zeile in der
Konfigurationsdatei. Siehe die Option @code{AcceptEnv} in @code{man
sshd_config}.

This example allows ssh-clients to export the @env{COLORTERM} variable.  It
is set by terminal emulators, which support colors.  You can use it in your
shell's resource file to enable colors for the prompt and commands if this
variable is set.

@lisp
(service openssh-service-type
         (openssh-configuration
           (accepted-environment '("COLORTERM"))))
@end lisp

@item @code{authorized-keys} (Vorgabe: @code{'()})
@cindex Autorisierte Schlüssel, SSH
@cindex SSH, autorisierte Schlüssel
Dies ist die Liste der autorisierten Schlüssel. Jedes Element der Liste ist
ein Benutzername gefolgt von einem oder mehr dateiartigen Objekten, die
öffentliche SSH-Schlüssel repräsentieren. Zum Beispiel werden mit

@lisp
(openssh-configuration
  (authorized-keys
    `(("rekado" ,(local-file "rekado.pub"))
      ("chris" ,(local-file "chris.pub"))
      ("root" ,(local-file "rekado.pub") ,(local-file "chris.pub")))))
@end lisp

@noindent
die angegebenen öffentlichen Schlüssel für die Benutzerkonten @code{rekado},
@code{chris} und @code{root} registriert.

Weitere autorisierte Schlüssel können als @code{service-extension}
hinzugefügt werden.

Beachten Sie, dass das hier neben @file{~/.ssh/authorized_keys} @emph{ohne}
sich zu stören benutzt werden kann.

@item @code{log-level} (Vorgabe: @code{'info})
Dieses Symbol gibt die Stufe der Protokollierung an: @code{quiet}
(schweigsam), @code{fatal}, @code{error}, @code{info}, @code{verbose}
(ausführlich), @code{debug} (Fehlersuche) etc. Siehe die Handbuchseite für
@file{sshd_config} für die vollständige Liste der Stufenbezeichnungen.

@item @code{extra-content} (Vorgabe: @code{""})
Dieses Feld kann benutzt werden, um beliebigen Text an die
Konfigurationsdatei anzuhängen. Es ist besonders bei ausgeklügelten
Konfigurationen nützlich, die anders nicht ausgedrückt werden können. Zum
Beispiel würden mit dieser Konfiguration Anmeldungen als Administratornutzer
„root“ grundsätzlich untersagt, lediglich für eine bestimmte IP-Adresse
wären sie zugelassen:

@lisp
(openssh-configuration
  (extra-content "\
Match Address 192.168.0.1
  PermitRootLogin yes"))
@end lisp

@end table
@end deftp

@deffn {Scheme-Prozedur} dropbear-service [@var{Konfiguration}]
Den
@uref{https://matt.ucc.asn.au/dropbear/dropbear.html,Dropbear-SSH-Daemon}
mit der angegebenen @var{Konfiguration} ausführen, einem
@code{<dropbear-configuration>}-Objekt.

Wenn Sie zum Beispiel einen Dropbear-Dienst angeben möchten, der auf Port
1234 lauscht, dann fügen Sie diesen Aufruf ins @code{services}-Feld des
Betriebssystems ein:

@lisp
(dropbear-service (dropbear-configuration
                    (port-number 1234)))
@end lisp
@end deffn

@deftp {Datentyp} dropbear-configuration
Dieser Datentyp repräsentiert die Konfiguration eines Dropbear-SSH-Daemons.

@table @asis
@item @code{dropbear} (Vorgabe: @var{dropbear})
Das zu benutzende Dropbear-Paket.

@item @code{port-number} (Vorgabe: 22)
Die Portnummer des TCP-Ports, auf dem der Daemon auf eingehende Verbindungen
wartet.

@item @code{syslog-output?} (Vorgabe: @code{#t})
Ob eine Ausgabe für Syslog aktiviert sein soll.

@item @code{pid-file} (Vorgabe: @code{"/var/run/dropbear.pid"})
Der Dateiname der PID-Datei des Daemons.

@item @code{root-login?} (Vorgabe: @code{#f})
Ob Anmeldungen als Administratornutzer @code{root} möglich sein sollen.

@item @code{allow-empty-passwords?} (Vorgabe: @code{#f})
Ob leere Passwörter zugelassen sein sollen.

@item @code{password-authentication?} (Vorgabe: @code{#t})
Ob passwortbasierte Authentisierung zugelassen sein soll.
@end table
@end deftp

@cindex AutoSSH
@deffn {Scheme Variable} autossh-service-type
This is the type for the @uref{https://www.harding.motd.ca/autossh, AutoSSH}
program that runs a copy of @command{ssh} and monitors it, restarting it as
necessary should it die or stop passing traffic.  AutoSSH can be run
manually from the command-line by passing arguments to the binary
@command{autossh} from the package @code{autossh}, but it can also be run as
a Guix service.  This latter use case is documented here.

AutoSSH can be used to forward local traffic to a remote machine using an
SSH tunnel, and it respects the @file{~/.ssh/config} of the user it is run
as.

For example, to specify a service running autossh as the user @code{pino}
and forwarding all local connections to port @code{8081} to
@code{remote:8081} using an SSH tunnel, add this call to the operating
system's @code{services} field:

@lisp
(service autossh-service-type
         (autossh-configuration
          (user "pino")
          (ssh-options (list "-T" "-N" "-L" "8081:localhost:8081" "remote.net"))))
@end lisp
@end deffn

@deftp {Data Type} autossh-configuration
This data type represents the configuration of an AutoSSH service.

@table @asis

@item @code{user} (default @code{"autossh"})
The user as which the AutoSSH service is to be run.  This assumes that the
specified user exists.

@item @code{poll} (default @code{600})
Specifies the connection poll time in seconds.

@item @code{first-poll} (default @code{#f})
Specifies how many seconds AutoSSH waits before the first connection test.
After this first test, polling is resumed at the pace defined in
@code{poll}.  When set to @code{#f}, the first poll is not treated specially
and will also use the connection poll specified in @code{poll}.

@item @code{gate-time} (default @code{30})
Specifies how many seconds an SSH connection must be active before it is
considered successful.

@item @code{log-level} (default @code{1})
The log level, corresponding to the levels used by syslog---so @code{0} is
the most silent while @code{7} is the chattiest.

@item @code{max-start} (default @code{#f})
The maximum number of times SSH may be (re)started before AutoSSH exits.
When set to @code{#f}, no maximum is configured and AutoSSH may restart
indefinitely.

@item @code{message} (default @code{""})
The message to append to the echo message sent when testing connections.

@item @code{port} (default @code{"0"})
The ports used for monitoring the connection.  When set to @code{"0"},
monitoring is disabled.  When set to @code{"@var{n}"} where @var{n} is a
positive integer, ports @var{n} and @var{n}+1 are used for monitoring the
connection, such that port @var{n} is the base monitoring port and
@code{n+1} is the echo port.  When set to @code{"@var{n}:@var{m}"} where
@var{n} and @var{m} are positive integers, the ports @var{n} and @var{n}+1
are used for monitoring the connection, such that port @var{n} is the base
monitoring port and @var{m} is the echo port.

@item @code{ssh-options} (default @code{'()})
The list of command-line arguments to pass to @command{ssh} when it is run.
Options @option{-f} and @option{-M} are reserved for AutoSSH and may cause
undefined behaviour.

@end table
@end deftp

@defvr {Scheme-Variable} %facebook-host-aliases
Diese Variable enthält eine Zeichenkette, die Sie für @file{/etc/hosts}
benutzen können (siehe @ref{Host Names,,, libc, The GNU C Library Reference
Manual}). Jede Zeile enthält einen Eintrag, der einen bekannten Servernamen
des Facebook-Online-Dienstes — z.B.@: @code{www.facebook.com} — an den
lokalen Rechner umleitet — also an @code{127.0.0.1} oder dessen
IPv6-Gegenstück @code{::1}.

Normalerweise wird diese Variable im Feld @code{hosts-file} einer
@code{operating-system}-Betriebssystemdeklaration benutzt (siehe
@ref{„operating-system“-Referenz, @file{/etc/hosts}}):

@lisp
(use-modules (gnu) (guix))

(operating-system
  (host-name "mymachine")
  ;; …
  (hosts-file
    ;; Eine /etc/hosts-Datei, mit der "localhost" und
    ;; "mymachine" als Alias-Namen eingerichtet werden
    ;; und für die Facebook-Servernamen stattdessen
    ;; Alias-Namen benutzt werden.
    (plain-file "hosts"
                (string-append (local-host-aliases host-name)
                               %facebook-host-aliases))))
@end lisp

Dieser Mechanismus kann verhindern, dass lokal laufende Programme, wie
z.B.@: Web-Browser, auf Facebook zugreifen.
@end defvr

Das Modul @code{(gnu services avahi)} stellt die folgende Definition zur
Verfügung.

@defvr {Scheme-Variable} avahi-service-type
Dieser Dienst führt den @command{avahi-daemon} aus, einen systemweiten
mDNS-/DNS-SD-Anbieter, mit dem im lokalen Netzwerk befindliche Geräte
erkannt werden können („Service Discovery“) und Rechnernamen selbstständig
aufgelöst werden können („Zero-Configuration“) (siehe
@uref{https://avahi.org/}). Sein Wert muss ein
@code{zero-configuration}-Verbundsobjekt sein — siehe unten.

Dieser Dienst erweitert den Name Service Cache Daemon (nscd), damit er
@code{.local}-Rechnernamen mit
@uref{https://0pointer.de/lennart/projects/nss-mdns/, nss-mdns} auflösen
kann. Siehe @ref{Name Service Switch} für Informationen zur Auflösung von
Rechnernamen.

Des Weiteren wird das @var{avahi}-Paket zum Systemprofil hinzugefügt, damit
Befehle wie @command{avahi-browse} einfach benutzt werden können.
@end defvr

@deftp {Datentyp} avahi-configuration
Dieser Datentyp repräsentiert die Konfiguration von Avahi.

@table @asis

@item @code{host-name} (Vorgabe: @code{#f})
Wenn dies auf etwas anderes als @code{#f} gesetzt ist, wird es anderen als
Rechnername für diese Maschine mitgeteilt, andernfalls wird der tatsächliche
Rechnername anderen mitgeteilt.

@item @code{publish?} (Vorgabe: @code{#t})
Wenn es auf wahr gesetzt ist, dürfen Rechnernamen und Avahi-Dienste über das
Netzwerk mitgeteilt werden (als Broadcast).

@item @code{publish-workstation?} (Vorgabe: @code{#t})
Wenn es auf wahr gesetzt ist, teilt @command{avahi-daemon} den Rechnernamen
dieser Maschine und die IP-Adresse über mDNS auf dem lokalen Netzwerk
öffentlich mit. Um die auf Ihrem lokalen Netzwerk mitgeteilten Rechnernamen
zu sehen, können Sie das hier ausführen:

@example
avahi-browse _workstation._tcp
@end example

@item @code{wide-area?} (Vorgabe: @code{#f})
Wenn dies auf wahr gesetzt ist, ist DNS-SD über „Unicast DNS“ aktiviert.

@item @code{ipv4?} (Vorgabe: @code{#t})
@itemx @code{ipv6?} (Vorgabe: @code{#t})
Mit diesen Feldern wird festgelegt, ob IPv4-/IPv6-Sockets verwendet werden.

@item @code{domains-to-browse} (Vorgabe: @code{'()})
Dies ist eine Liste von Domänen, die durchsucht werden.
@end table
@end deftp

@deffn {Scheme-Variable} openvswitch-service-type
Dies ist der Diensttyp des @uref{https://www.openvswitch.org,
Open-vSwitch-Dienstes}, der als Wert ein
@code{openvswitch-configuration}-Objekt hat.
@end deffn

@deftp {Datentyp} openvswitch-configuration
Der Datentyp, der die Konfiguration von Open vSwitch repräsentiert, einem
auf mehreren Schichten arbeitenden („multilayer“) virtuellen Switch, der für
massenhafte Netzwerkautomatisierung durch programmatische Erweiterungen
eingesetzt werden kann.

@table @asis
@item @code{package} (Vorgabe: @var{openvswitch})
Das Paketobjekt vom Open vSwitch.

@end table
@end deftp

@defvr {Scheme-Variable} pagekite-service-type
Dies ist der Diensttyp für den @uref{https://memcached.org/,
PageKite-Dienst}, einem Angebot zur getunnelten Netzwerkumleitung, womit
bloß auf localhost lauschende Server öffentlich erreichbar gemacht werden
können. Mit PageKite werden die Server für andere erreichbar, selbst wenn
Ihre Maschine nur über eine restriktive Firewall oder eine
Netzwerkadressübersetzung („Network Address Translation“, NAT) ohne
Portweiterleitung mit dem Internet verbunden ist. Der Wert dieses Dienstes
ist ein @code{pagekite-configuration}-Verbundsobjekt.

Hier ist ein Beispiel, wodurch die lokal laufenden HTTP- und SSH-Daemons
zugänglich gemacht werden:

@lisp
(service pagekite-service-type
         (pagekite-configuration
           (kites '("http:@@kitename:localhost:80:@@kitesecret"
                    "raw/22:@@kitename:localhost:22:@@kitesecret"))
           (extra-file "/etc/pagekite.rc")))
@end lisp
@end defvr

@deftp {Datentyp} pagekite-configuration
Der Datentyp, der die Konfiguration von PageKite repräsentiert.

@table @asis
@item @code{package} (Vorgabe: @var{pagekite})
Paketobjekt von PageKite.

@item @code{kitename} (Vorgabe: @code{#f})
PageKite-Name, um sich gegenüber dem Vordergrundserver zu authentisieren.

@item @code{kitesecret} (Vorgabe: @code{#f})
Das gemeinsame Geheimnis, das eine Authentisierung gegenüber dem
Vordergrundserver ermöglicht. Wahrscheinlich sollten Sie es besser als Teil
von @code{extra-file} angeben.

@item @code{frontend} (Vorgabe: @code{#f})
Eine Verbindung zum angegebenen PageKite-Vordergrundserver herstellen statt
zu dem Dienst von @uref{https://pagekite.net,,pagekite.net}.

@item @code{kites} (Vorgabe: @code{'("http:@@kitename:localhost:80:@@kitesecret")})
Die Liste der zu benutzenden „Kites“ für Dienste. Nach Vorgabe wird der
HTTP-Server auf Port 80 nach außen hin zugänglich gemacht. Dienste sind im
Format @code{protokoll:kitename:rechnername:port:geheimnis} anzugeben.

@item @code{extra-file} (Vorgabe: @code{#f})
Eine Konfigurationsdatei, die zusätzlich eingelesen werden soll. Es wird
erwartet, dass Sie diese manuell erstellen. Benutzen Sie sie, wenn Sie
zusätzliche Optionen angeben möchten und um gemeinsame Geheimnisse abseits
von Guix’ Zuständigkeitsbereich zu verwalten.

@end table
@end deftp

@node X Window
@subsection X Window

@cindex X11
@cindex X Window System
@cindex Anmeldeverwaltung
Unterstützung für das grafische Anzeigesystem X Window — insbesondere Xorg —
wird vom Modul @code{(gnu services xorg)} zur Verfügung gestellt. Beachten
Sie, dass es @emph{keine} @code{xorg-service}-Prozedur gibt, sondern der
X-Server durch eine Software zur @dfn{Anmeldeverwaltung} gestartet wird (ein
„Login Manager“). Vorgegeben ist, dass zur Anzeigenverwaltung der GNOME
Display Manager (GDM) benutzt wird.

@cindex GDM
@cindex GNOME, Anmeldeverwaltung
GDM ermöglicht es seinen Nutzern natürlich auch, sich bei anderen
Fensterverwaltungssystemen und Arbeitsumgebungen als GNOME anzumelden. Wer
GNOME benutzt, kann Funktionalitäten wie eine automatische Bildschirmsperre
nur verwenden, wenn die Anmeldung über GDM läuft.

@cindex Fensterverwaltung
Um X11 zu benutzen, müssen Sie ein Programme zur @dfn{Fensterverwaltung}
(„Window-Manager“) oder mehrere davon installieren — zum Beispiel die Pakete
@code{windowmaker} oder @code{openbox} —, vorzugsweise indem Sie sie in das
@code{packages}-Feld Ihrer Betriebssystemdefinition eintragen (siehe
@ref{„operating-system“-Referenz, system-wide packages}).

@defvr {Scheme-Variable} gdm-service-type
This is the type for the @uref{https://wiki.gnome.org/Projects/GDM/, GNOME
Desktop Manager} (GDM), a program that manages graphical display servers and
handles graphical user logins.  Its value must be a @code{gdm-configuration}
(see below).

@cindex Sitzungstypen (X11)
@cindex X11-Sitzungstypen
GDM liest die in den @file{.desktop}-Dateien in
@file{/run/current-system/profile/share/xsessions} befindlichen
@dfn{Sitzungstypen} ein und stellt diese seinen Nutzern zur Auswahl auf dem
Anmeldebildschirm. Pakete wie @code{gnome}, @code{xfce} und @code{i3}
stellen @file{.desktop}-Dateien bereit; wenn diese Pakete zu den systemweit
verfügbaren Paketen hinzugefügt werden, werden diese automatisch auf dem
Anmeldebildschirm angezeigt.

Des Weiteren werden @file{~/.xsession}-Dateien berücksichtigt. Wenn es
vorhanden ist, muss @file{~/.xsession} eine ausführbare Datei sein, die ein
Programm zur Fensterverwaltung und/oder andere X-Clients startet.
@end defvr

@deftp {Datentyp} gdm-configuration
@table @asis
@item @code{auto-login?} (Vorgabe: @code{#f})
@itemx @code{default-user} (Vorgabe: @code{#f})
Wenn @code{auto-login?} falsch ist, zeigt GDM einen Anmeldebildschirm an.

Wenn @code{auto-login?} wahr ist, meldet GDM automatisch den in
@code{default-user} angegebenen voreingestellten Benutzer an.

@item @code{debug?} (Vorgabe: @code{#f})
Wenn es wahr ist, schreibt GDM Informationen zur Fehlersuche in sein
Protokoll.

@item @code{gnome-shell-assets} (Vorgabe: …)
Liste der GNOME-Shell-„Assets“, die GDM benötigt, d.h.@: Symbolthema,
Schriftarten etc.

@item @code{xorg-configuration} (Vorgabe: @code{(xorg-configuration)})
Xorg-Server für grafische Oberflächen konfigurieren.

@item @code{xsession} (Vorgabe: @code{(xinitrc)})
Das Skript, das vor dem Starten einer X-Sitzung ausgeführt werden soll.

@item @code{dbus-daemon} (Vorgabe: @code{dbus-daemon-wrapper})
Der Dateiname der ausführbaren Datei des @code{dbus-daemon}-Programms.

@item @code{gdm} (Vorgabe: @code{gdm})
Das GDM-Paket, was benutzt werden soll.
@end table
@end deftp

@defvr {Scheme-Variable} slim-service-type
Dies ist der Diensttyp für die schlanke grafische Anmeldungsverwaltung SLiM
für X11.

Wie GDM liest SLiM die in @file{.desktop}-Dateien beschriebenen
Sitzungstypen aus und ermöglicht es Nutzern, eine Sitzung darunter im
Anmeldebildschirm durch Drücken von @kbd{F1} auszuwählen. Auch
@file{~/.xsession}-Dateien können benutzt werden.

Anders als GDM wird durch SLiM die Benutzersitzung nicht auf einem anderen
virtuellen Terminal gestartet, nachdem man sich anmeldet. Die Folge davon
ist, dass man nur eine einzige grafische Sitzung starten kann. Wenn Sie
mehrere, gleichzeitig laufende grafische Sitzungen starten können möchten,
müssen Sie mehrere SLiM-Dienste zu ihren Systemdiensten hinzufügen. Das
folgende Beispiel zeigt, wie Sie den vorgegebenen GDM-Dienst durch zwei
SLiM-Dienste auf tty7 und tty8 ersetzen.

@lisp
(use-modules (gnu services)
             (gnu services desktop)
             (gnu services xorg)
             (srfi srfi-1))  ;für 'remove'

(operating-system
  ;; ...
  (services (cons* (service slim-service-type (slim-configuration
                                               (display ":0")
                                               (vt "vt7")))
                   (service slim-service-type (slim-configuration
                                               (display ":1")
                                               (vt "vt8")))
                   (remove (lambda (service)
                             (eq? (service-kind service) gdm-service-type))
                           %desktop-services))))
@end lisp

@end defvr

@deftp {Datentyp} slim-configuration
Datentyp, der die Konfiguration des @code{slim-service-type} repräsentiert.

@table @asis
@item @code{allow-empty-passwords?} (Vorgabe: @code{#t})
Ob Anmeldungen mit leeren Passwörtern möglich sein sollen.

@item @code{auto-login?} (Vorgabe: @code{#f})
@itemx @code{default-user} (Vorgabe: @code{""})
Wenn @code{auto-login?} falsch ist, zeigt SLiM einen Anmeldebildschirm an.

Wenn @code{auto-login?} wahr ist, meldet SLiM automatisch den in
@code{default-user} angegebenen voreingestellten Benutzer an.

@item @code{theme} (Vorgabe: @code{%default-slim-theme})
@itemx @code{theme-name} (Vorgabe: @code{%default-slim-theme-name})
Das grafische Thema, was benutzt werden soll, mit seinem Namen.

@item @code{auto-login-session} (Vorgabe: @code{#f})
Wenn es wahr ist, muss es den Namen der ausführbaren Datei angeben, die als
voreingestellte Sitzung gestartet werden soll — z.B.@: @code{(file-append
windowmaker "/bin/windowmaker")}.

Wenn es falsch ist, wird eine von einer der @file{.desktop}-Dateien in
@code{/run/current-system/profile} und @code{~/.guix-profile} beschriebenen
Sitzungen benutzt.

@quotation Anmerkung
Sie müssen mindestens ein Fensterverwaltungsprogramm in das Systemprofil
oder Ihr Benutzerprofil installieren, ansonsten können Sie sich, sofern
@code{auto-login-session} falsch ist, nicht anmelden.
@end quotation

@item @code{xorg-configuration} (Vorgabe: @code{(xorg-configuration)})
Xorg-Server für grafische Oberflächen konfigurieren.

@item @code{display} (Vorgabe: @code{":0"})
Die Anzeige, auf welcher der Xorg-Server für grafische Oberflächen gestartet
werden soll.

@item @code{vt} (Vorgabe: @code{"vt7"})
Das virtuelle Terminal, auf dem der Xorg-Server für grafische Oberflächen
gestartet werden soll.

@item @code{xauth} (Vorgabe: @code{xauth})
Das XAuth-Paket, das benutzt werden soll.

@item @code{shepherd} (Vorgabe: @code{shepherd})
Das Shepherd-Paket, das benutzt wird, wenn @command{halt} und
@command{reboot} aufgerufen werden.

@item @code{sessreg} (Vorgabe: @code{sessreg})
Das sessreg-Paket, das zum Registrieren der Sitzung benutzt werden soll.

@item @code{slim} (Vorgabe: @code{slim})
Das zu benutzende SLiM-Paket.
@end table
@end deftp

@defvr {Scheme-Variable} %default-theme
@defvrx {Scheme-Variable} %default-theme-name
Das vorgegebene Thema für das Aussehen von SLiM mit seinem Namen.
@end defvr


@deftp {Datentyp} sddm-configuration
This is the data type representing the SDDM service configuration.

@table @asis
@item @code{display-server} (Vorgabe: "x11")
Select display server to use for the greeter.  Valid values are @samp{"x11"}
or @samp{"wayland"}.

@item @code{numlock} (Vorgabe: "on")
Valid values are @samp{"on"}, @samp{"off"} or @samp{"none"}.

@item @code{halt-command} (Vorgabe: @code{#~(string-apppend #$shepherd "/sbin/halt")})
Der Befehl, der zum Anhalten des Systems ausgeführt wird.

@item @code{reboot-command} (Vorgabe: @code{#~(string-append #$shepherd "/sbin/reboot")})
Der Befehl, der zum Neustarten des Systems ausgeführt wird.

@item @code{theme} (Vorgabe: "maldives")
Theme to use.  Default themes provided by SDDM are @samp{"elarun"},
@samp{"maldives"} or @samp{"maya"}.

@item @code{themes-directory} (Vorgabe: "/run/current-system/profile/share/sddm/themes")
Verzeichnis, wo Themen gefunden werden können.

@item @code{faces-directory} (Vorgabe: "/run/current-system/profile/share/sddm/faces")
Verzeichnis, wo Avatarbilder gefunden werden können.<

@item @code{default-path} (Vorgabe: "/run/current-system/profile/bin")
Welcher PATH voreingestellt sein soll.

@item @code{minimum-uid} (Vorgabe: 1000)
Der kleinste Benutzeridentifikator (UID), mit dem Benutzer in SDDM angezeigt
werden und sich anmelden können.

@item @code{maximum-uid} (Vorgabe: 2000)
Der größte Benutzeridentifikator (UID), mit dem Benutzer in SDDM angezeigt
werden.<

@item @code{remember-last-user?} (Vorgabe: #t)
Den zuletzt ausgewählten Benutzer voreinstellen.

@item @code{remember-last-session?} (Vorgabe: #t)
Die zuletzt ausgewählte Sitzung voreinstellen.

@item @code{hide-users} (Vorgabe: "")
Benutzernamen, die in SDDM @emph{nicht} sichtbar sein sollen.

@item @code{hide-shells} (Vorgabe: @code{#~(string-append #$shadow "/sbin/nologin")})
Benutzerkonten, für die als Shell eine davon eingestellt ist, wird SDDM
@emph{nicht} anzeigen.

@item @code{session-command} (Vorgabe: @code{#~(string-append #$sddm "/share/sddm/scripts/wayland-session")})
Das Skript, das vor dem Starten einer Wayland-Sitzung ausgeführt werden
soll.

@item @code{sessions-directory} (Vorgabe: "/run/current-system/profile/share/wayland-sessions")
Verzeichnis, das nach .desktop-Dateien zum Starten von Wayland-Sitzungen
durchsucht wird.

@item @code{xorg-configuration} (Vorgabe: @code{(xorg-configuration)})
Xorg-Server für grafische Oberflächen konfigurieren.

@item @code{xauth-path} (Vorgabe: @code{#~(string-append #$xauth "/bin/xauth")})
Pfad von xauth.

@item @code{xephyr-path} (Vorgabe: @code{#~(string-append #$xorg-server "/bin/Xephyr")})
Pfad von Xephyr.

@item @code{xdisplay-start} (Vorgabe: @code{#~(string-append #$sddm "/share/sddm/scripts/Xsetup")})
Skript, das nach dem Starten vom Xorg-Server ausgeführt wird.

@item @code{xdisplay-stop} (Vorgabe: @code{#~(string-append #$sddm "/share/sddm/scripts/Xstop")})
Skript, das vor dem Stoppen vom Xorg-Server ausgeführt wird.

@item @code{xsession-command} (Vorgabe: @code{xinitrc})
Das Skript, das vor dem Starten einer X-Sitzung ausgeführt werden soll.

@item @code{xsessions-directory} (Vorgabe: "/run/current-system/profile/share/xsessions")
Verzeichnis, das nach .desktop-Dateien zum Starten von X-Sitzungen
durchsucht wird.<

@item @code{minimum-vt} (Vorgabe: 7)
Das kleinste virtuelle Terminal, das benutzt werden darf.

@item @code{auto-login-user} (Vorgabe: "")
Benutzer, der bei automatischer Anmeldung angemeldet wird.

@item @code{auto-login-session} (Vorgabe: "")
Desktop-Datei für die automatische Anmeldung.

@item @code{relogin?} (Vorgabe: #f)
Ob nach dem Abmelden neu angemeldet werden soll.

@end table
@end deftp

@cindex Anmeldeverwaltung
@cindex X11-Anmeldung
@defvr {Scheme-Variable} sddm-service-type
Dies ist der Typ des Dienstes, mit dem der
@uref{https://github.com/sddm/sddm,SDDM-Anzeigeserver} gestartet wird. Sein
Wert muss ein @code{sddm-configuration}-Verbundsobjekt sein (siehe unten).

Hier ist ein Beispiel für seine Verwendung:

@lisp
(service sddm-service-type
         (sddm-configuration
           (auto-login-user "alice")
           (auto-login-session "xfce.desktop")))
@end lisp
@end defvr

@deftp {Datentyp} sddm-configuration
Dieser Datentyp repräsentiert die Konfiguration der
SDDM-Anmeldeverwaltung. Die verfügbaren Felder sind:

@table @asis
@item @code{sddm} (Vorgabe: @code{sddm})
Das SDDM-Paket, was benutzt werden soll.

@item @code{display-server} (Vorgabe: @code{"x11"})
Hier muss entweder @code{"x11"} oder @code{"wayland"} angegeben werden.

@c FIXME: Add more fields.

@item @code{auto-login-user} (Vorgabe: @code{""})
Wenn es nicht leer ist, enthält dieses Feld das Benutzerkonto, mit dem man
automatisch angemeldet wird.

@item @code{auto-login-session} (Vorgabe: @code{""})
Wenn es nicht leer ist, gibt dieses Feld den Namen der @file{.desktop}-Datei
an, die bei automatischer Anmeldung für die Sitzung verwendet wird.
@end table
@end deftp

@cindex Xorg, Konfiguration
@deftp {Datentyp} xorg-configuration
Dieser Datentyp repräsentiert die Konfiguration des grafischen
Anzeigeservers Xorg. Beachten Sie, dass es keinen Xorg-Dienst gibt, sondern
der X-Server von einer „Anzeigenverwaltung“ wie GDM, SDDM oder SLiM
gestartet wird. Deswegen wird aus der Konfiguration dieser
Anzeigenverwaltungen ein @code{xorg-configuration}-Verbundsobjekt
konstruiert.

@table @asis
@item @code{modules} (Vorgabe: @code{%default-xorg-modules})
Dies ist eine Liste von @dfn{Modulpaketen}, die vom Xorg-Server geladen
werden — z.B.@: @code{xf86-video-vesa}, @code{xf86-input-keyboard} und so
weiter.

@item @code{fonts} (Vorgabe: @code{%default-xorg-fonts})
Dies ist eine Liste von Verzeichnissen mit Schriftarten, die zum
Schriftartensuchpfad („Font Path“) des Servers hinzugefügt werden.

@item @code{drivers} (Vorgabe: @code{'()})
Dies muss entweder die leere Liste sein — in diesem Fall wird durch Xorg
automatisch ein Grafiktreiber ausgewählt — oder eine Liste von Treibernamen,
die in dieser Reihenfolge durchprobiert werden — z.B.@: @code{("modesetting"
"vesa")}.

@item @code{resolutions} (Vorgabe: @code{'()})
Wenn @code{resolutions} die leere Liste ist, wird automatisch durch Xorg
eine passende Bildschirmauflösung gewählt. Andernfalls muss hier eine Liste
von Bildschirmauflösungen angegeben werden — z.B.@: @code{((1024 768) (640
480))}.

@cindex Tastaturbelegung, für Xorg
@cindex Keymap, für Xorg
@item @code{keyboard-layout} (Vorgabe: @code{#f})
Wenn es auf @code{#f} gesetzt ist, benutzt Xorg die voreingestellte
Tastaturbelegung, also normalerweise US English („QWERTY“) für eine
PC-Tastatur mit 105 Tasten.

Andernfalls muss hier ein @code{keyboard-layout}-Objekt stehen, das angibt,
welche Tastaturbelegung aktiv sein soll, während Xorg läuft. Siehe
@ref{Tastaturbelegung} für mehr Informationen, wie die Tastaturbelegung
angegeben werden kann.

@item @code{extra-config} (Vorgabe: @code{'()})
Dies ist eine Liste von Zeichenketten oder Objekten, die an die
Konfigurationsdatei angehängt werden. Mit ihnen wird zusätzlicher Text
wortwörtlich zur Konfigurationsdatei hinzugefügt.

@item @code{server} (Vorgabe: @code{xorg-server})
Dieses Paket stellt den Xorg-Server zur Verfügung.

@item @code{server-arguments} (Vorgabe: @code{%default-xorg-server-arguments})
Dies ist die Liste der Befehlszeilenargumente, die an den X-Server übergeben
werden. Die Vorgabe ist @code{-nolisten tcp}.
@end table
@end deftp

@deffn {Scheme-Prozedur} set-xorg-configuration @var{Konfiguration} @
  [@var{login-manager-service-type}] Benennt, welche @var{Konfiguration} die
Anmeldeverwaltung (vom Typ @var{login-manager-service-type}) benutzen soll,
als ein @code{<xorg-configuration>}-Verbundsobjekt.

Da die Xorg-Konfiguration in die Konfiguration der Anmeldeverwaltung
eingebettet ist — z.B.@: in einer @code{gdm-configuration} —, bietet diese
Prozedur eine Kurzschreibweise zum Ändern der Xorg-Konfiguration.
@end deffn

@deffn {Scheme-Prozedur} xorg-start-command [@var{Konfiguration}]
Hier wird ein @code{startx}-Skript geliefert, in welchem die Module,
Schriftarten usw.@: verfügbar sind, die in der @var{Konfiguration} angegeben
wurden. Das Ergebnis soll anstelle von @code{startx} benutzt werden.

Normalerweise wird der X-Server von der Anmeldeverwaltung gestartet.
@end deffn


@deffn {Scheme Procedure} screen-locker-service @var{Paket} [@var{Programm}]
Das @var{Paket} zur Menge der setuid-Programme hinzufügen, worin sich ein
Programm zum Sperren des Bildschirms oder ein Bildschirmschoner befinden
muss, der mit dem Befehl @var{Programm} gestartet wird, und einen
PAM-Eintrag dafür hinzufügen. Zum Beispiel macht

@lisp
(screen-locker-service xlockmore "xlock")
@end lisp

das gute alte XlockMore benutzbar.
@end deffn


@node Druckdienste
@subsection Druckdienste

@cindex Druckerunterstützung mit CUPS
Das Modul @code{(gnu services cups)} stellt eine Guix-Dienstdefinition für
den CUPS-Druckdienst zur Verfügung. Wenn Sie Druckerunterstützung zu einem
Guix-System hinzufügen möchten, dann fügen Sie einen
@code{cups-service}-Dienst in die Betriebssystemdefinition ein.

@deffn {Scheme-Variable} cups-service-type
Der Diensttyp für den CUPS-Druckserver. Als Wert muss eine gültige
CUPS-Konfiguration angegeben werden (siehe unten). Um die Voreinstellungen
zu verwenden, schreiben Sie einfach nur:
@lisp
(service cups-service-type)
@end lisp
@end deffn

Mit der CUPS-Konfiguration stellen Sie die grundlegenden Merkmale Ihrer
CUPS-Installation ein: Auf welcher Schnittstelle sie lauscht, wie mit einem
fehlgeschlagenen Druckauftrag umzugehen ist, wieviel in Protokolle
geschrieben werden soll und so weiter. Um einen Drucker hinzuzufügen, müssen
Sie jedoch die URL @url{http://localhost:631} besuchen oder ein Werkzeug wie
die Druckereinstellungsdienste von GNOME benutzen. Die Vorgabe ist, dass
beim Konfigurieren eines CUPS-Dienstes ein selbstsigniertes Zertifikat
erzeugt wird, um sichere Verbindungen mit dem Druckserver zu ermöglichen.

Nehmen wir an, Sie wollen die Weboberfläche von CUPS aktivieren und
Unterstützung für Epson-Drucker über das @code{escpr}-Paket und für
HP-Drucker über das @code{hplip-minimal}-Paket aktivieren. Sie können das
auf diese Weise gleich machen (dazu müssen Sie vorher angeben, dass das
Modul @code{(gnu packages cups)} benutzt werden soll):

@lisp
(service cups-service-type
         (cups-configuration
           (web-interface? #t)
           (extensions
             (list cups-filters escpr hplip-minimal))))
@end lisp

Anmerkung: Wenn Sie die Qt5-basierte grafische Benutzeroberfläche benutzen
möchten, die dem hplip-Paket beiliegt, sollten Sie das @code{hplip}-Paket
installieren, entweder in die Konfigurationsdatei Ihres Betriebssystems oder
für Ihr Benutzerkonto.

Im Folgenden sehen Sie die verfügbaren Konfigurationsparameter. Vor jeder
Parameterdefinition wird ihr Typ angegeben, zum Beispiel steht
@samp{Zeichenketten-Liste foo} für einen Parameter @code{foo}, der als Liste
von Zeichenketten angegeben werden muss. Sie können die Konfiguration aber
auch in einer einzigen Zeichenkette angeben, wenn Sie eine alte
@code{cupsd.conf}-Datei von einem anderen System weiterbenutzen möchten;
siehe das Abschnittsende für mehr Details.

@c The following documentation was initially generated by
@c (generate-documentation) in (gnu services cups).  Manually maintained
@c documentation is better, so we shouldn't hesitate to edit below as
@c needed.  However if the change you want to make to this documentation
@c can be done in an automated way, it's probably easier to change
@c (generate-documentation) than to make it below and have to deal with
@c the churn as CUPS updates.


Die verfügbaren @code{cups-configuration}-Felder sind:

@deftypevr {@code{cups-configuration}-Parameter} „package“ cups
Das CUPS-Paket.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} „package“-Liste extensions
Treiber und andere Erweiterungen für das CUPS-Paket.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} „files-configuration“ files-configuration
Konfiguration, wo Protokolle abgelegt werden sollen, welche Verzeichnisse
für Druckspoolerwarteschlangen benutzt werden sollen und ähnliche
Berechtigungen erfordernde Konfigurationsparameter.

Verfügbare Felder einer @code{files-configuration} sind:

@deftypevr {@code{files-configuration}-Parameter} Protokollpfad access-log
Hiermit wird der Dateiname des Zugriffsprotokolls („Access Log“)
festgelegt. Wenn ein leerer Name angegeben wird, wird kein Protokoll
erzeugt. Der Wert @code{stderr} lässt Protokolleinträge in die
Standardfehlerdatei schreiben, wenn das Druckplanungsprogramm im Vordergrund
läuft, oder an den Systemprotokolldaemon (also Syslog), wenn es im
Hintergrund läuft. Der Wert @code{syslog} bewirkt, dass Protokolleinträge an
den Systemprotokolldaemon geschickt werden. Der Servername darf in
Dateinamen als die Zeichenkette @code{%s} angegeben werden, so kann etwa
@code{/var/log/cups/%s-access_log} angegeben werden.

Die Vorgabe ist @samp{"/var/log/cups/access_log"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Dateiname cache-dir
Wo CUPS zwischengespeicherte Daten ablegen soll.

Die Vorgabe ist @samp{"/var/cache/cups"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Zeichenkette config-file-perm
Gibt die Berechtigungen für alle Konfigurationsdateien an, die das
Planungsprogramm schreibt.

Beachten Sie, dass auf die Berechtigungen der Datei printers.conf eine Maske
gelegt wird, wodurch Zugriffe nur durch das planende Benutzerkonto erlaubt
werden (in der Regel der Administratornutzer „root“). Der Grund dafür ist,
dass Druckergeräte-URIs manchmal sensible Authentisierungsdaten enthalten,
die nicht allgemein auf dem System bekannt sein sollten. Es gibt keine
Möglichkeit, diese Sicherheitsmaßnahme abzuschalten.

Die Vorgabe ist @samp{"0640"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Protokollpfad error-log
Hiermit wird der Dateiname des Fehlerprotokolls („Error Log“)
festgelegt. Wenn ein leerer Name angegeben wird, wird kein Fehlerprotokoll
erzeugt. Der Wert @code{stderr} lässt Protokolleinträge in die
Standardfehlerdatei schreiben, wenn das Planungsprogramm im Vordergrund
läuft, oder an den Systemprotokolldaemon (also Syslog), wenn es im
Hintergrund läuft. Der Wert @code{syslog} bewirkt, dass Protokolleinträge an
den Systemprotokolldaemon geschickt werden. Der Servername darf in
Dateinamen als die Zeichenkette @code{%s} angegeben werden, so kann etwa
@code{/var/log/cups/%s-error_log} angegeben werden.

Die Vorgabe ist @samp{"/var/log/cups/error_log"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Zeichenkette fatal-errors
Gibt an, bei welchen Fehlern das Druckplanungsprogramm terminieren soll. Die
Zeichenketten für die Arten sind:

@table @code
@item none
Keine Fehler führen zur Beendigung.

@item all
Jeder der im Folgenden aufgeführten Fehler terminiert den Druckplaner.

@item browse
Fehler bei der Suche während der Initialisierung terminieren den
Druckplaner, zum Beispiel wenn keine Verbindung zum DNS-SD-Daemon aufgebaut
werden kann.

@item config
Syntaxfehler in der Konfigurationsdatei terminieren den Druckplaner.

@item listen
Fehler beim Lauschen oder Portfehler (entsprechend der Direktiven „Listen“
oder „Port“) terminieren den Druckplaner; ausgenommen sind Fehler bei IPv6
auf Loopback- oder @code{any}-Adressen.

@item log
Fehler beim Erzeugen von Protokolldateien terminieren den Druckplaner.

@item permissions
Falsche Zugriffsberechtigungen auf zum Starten benötigten Dateien
terminieren den Druckplaner, zum Beispiel wenn auf gemeinsame
TLS-Zertifikats- und Schlüsseldateien von allen lesend zugegriffen werden
kann.
@end table

Die Vorgabe ist @samp{"all -browse"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Boolescher-Ausdruck file-device?
Gibt an, welches Pseudogerät für neue Druckerwarteschlangen benutzt werden
kann. Die URI @uref{file:///dev/null} wird immer zugelassen.

Vorgegeben ist @samp{#f}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Zeichenkette group
Gibt Namen oder Identifikator der Benutzergruppe an, die zum Ausführen von
externen Programmen verwendet wird.

Die Vorgabe ist @samp{"lp"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Zeichenkette log-file-perm
Gibt die Berechtigungen für alle Protokolldateien an, die das
Planungsprogramm schreibt.

Die Vorgabe ist @samp{"0644"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} log-location page-log
Hiermit wird der Dateiname des Seitenprotokolls („Page Log“)
festgelegt. Wenn ein leerer Name angegeben wird, wird kein Seitenprotokoll
erzeugt. Der Wert @code{stderr} lässt Protokolleinträge in die
Standardfehlerdatei schreiben, wenn das Planungsprogramm im Vordergrund
läuft, oder an den Systemprotokolldaemon (also Syslog), wenn es im
Hintergrund läuft. Der Wert @code{syslog} bewirkt, dass Protokolleinträge an
den Systemprotokolldaemon geschickt werden. Der Servername darf in
Dateinamen als die Zeichenkette @code{%s} angegeben werden, so kann etwa
@code{/var/log/cups/%s-page_log} angegeben werden.

Die Vorgabe ist @samp{"/var/log/cups/page_log"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Zeichenkette remote-root
Gibt den Benutzernamen an, der für unauthentifizierte Zugriffe durch Clients
verwendet wird, die sich als der Administratornutzer „root“
anmelden. Vorgegeben ist @code{remroot}.

Die Vorgabe ist @samp{"remroot"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Dateiname request-root
Gibt das Verzeichnis an, in dem Druckaufträge und andere Daten zu
HTTP-Anfragen abgelegt werden.

Die Vorgabe ist @samp{"/var/spool/cups"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Isolierung sandboxing
Gibt die Stufe der Sicherheitsisolierung („Sandboxing“) an, die auf
Druckfilter, Hintergrundsysteme (Backends) und andere Kindprozesse des
Planungsprogramms angewandt wird; entweder @code{relaxed} („locker“) oder
@code{strict} („strikt“). Diese Direktive wird zur Zeit nur auf macOS
benutzt/unterstützt.

Die Vorgabe ist @samp{strict}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Dateiname server-keychain
Specifies the location of TLS certificates and private keys.  CUPS will look
for public and private keys in this directory: @file{.crt} files for
PEM-encoded certificates and corresponding @file{.key} files for PEM-encoded
private keys.

Die Vorgabe ist @samp{"/etc/cups/ssl"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Dateiname server-root
Gibt das Verzeichnis an, das die Serverkonfigurationsdateien enthält.

Die Vorgabe ist @samp{"/etc/cups"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Boolescher-Ausdruck sync-on-close?
Gibt an, ob das Planungsprogramm fsync(2) aufrufen soll, nachdem es in
Konfigurations- oder Zustandsdateien geschrieben hat.

Vorgegeben ist @samp{#f}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste system-group
Gibt die Benutzergruppe(n) an, die als die @code{@@SYSTEM}-Gruppen für die
Authentisierung benutzt werden können.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Dateiname temp-dir
Gibt das Verzeichnis an, in das temporäre Dateien gespeichert werden.

Die Vorgabe ist @samp{"/var/spool/cups/tmp"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Zeichenkette user
Gibt den Benutzernamen oder -identifikator an, mit dessen Benutzerkonto
externe Programme ausgeführt werden.

Die Vorgabe ist @samp{"lp"}.
@end deftypevr

@deftypevr {@code{files-configuration}-Parameter} Zeichenkette set-env
Legt die angegebene Umgebungsvariable auf einen Wert (englisch „Value“)
fest, die an Kindprozesse übergeben wird.

Die Vorgabe ist @samp{"variable value"}.
@end deftypevr
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Zugriffsprotokollstufe access-log-level
Gibt an, mit welcher Detailstufe das Protokoll in der AccessLog-Datei
geführt wird. Bei der Stufe @code{config} wird protokolliert, wenn Drucker
und Klassen hinzugefügt, entfernt oder verändert werden, und wenn auf
Konfigurationsdateien zugegriffen oder sie aktualisiert werden. Bei der
Stufe @code{actions} wird protokolliert, wenn Druckaufträge eingereicht,
gehalten, freigegeben, geändert oder abgebrochen werden sowie alles, was bei
@code{config} Protokollierung auslöst. Bei der Stufe @code{all} wird jede
Anfrage protokolliert.

Die Vorgabe ist @samp{actions}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Boolescher-Ausdruck auto-purge-jobs?
Gibt an, ob Daten über den Auftragsverlauf automatisch gelöscht werden
sollen, wenn Sie nicht mehr zur Berechnung von Druckkontingenten benötigt
werden.

Vorgegeben ist @samp{#f}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Kommagetrennte-Zeichenketten-Liste browse-dns-sd-sub-types
Gibt eine Liste von DNS-SD-Subtypen an, die anderen für jeden geteilten
Drucker mitgeteilt werden sollen. Zum Beispiel wird bei @samp{"_cups"
"_print"} den Netzwerk-Clients mitgeteilt, dass sowohl Teilen zwischen CUPS
als auch IPP Everywhere unterstützt werden.

Die Vorgabe ist @samp{"_cups"}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Protokolle-zur-lokalen-Suche browse-local-protocols
Gibt an, welche Protokolle zum lokalen Teilen („Freigeben“) von Druckern
benutzt werden sollen.

Die Vorgabe ist @samp{dnssd}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Boolescher-Ausdruck browse-web-if?
Gibt an, ob die Weboberfläche von CUPS anderen mitgeteilt wird.

Vorgegeben ist @samp{#f}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Boolescher-Ausdruck browsing?
Gibt an, ob geteilte Drucker bei Druckersuchen mitgeteilt werden.

Vorgegeben ist @samp{#f}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Zeichenkette classification
Specifies the security classification of the server.  Any valid banner name
can be used, including @samp{"classified"}, @samp{"confidential"},
@samp{"secret"}, @samp{"topsecret"}, and @samp{"unclassified"}, or the
banner can be omitted to disable secure printing functions.

Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Boolescher-Ausdruck classify-override?
Gibt an, ob Nutzer bei einzelnen Druckaufträgen eine andere als die
voreingestellte Geheimhaltungsstufe (für das Deckblatt) vorgeben können,
indem sie die Option @code{job-sheets} einstellen.

Vorgegeben ist @samp{#f}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Voreingestelle-Authentifizierungsart default-auth-type
Gibt an, wie man nach Voreinstellung authentifiziert wird.

Die Vorgabe ist @samp{Basic}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Voreingestellte-Verschlüsselung default-encryption
Gibt an, ob für authentifizierte Anfragen Verschlüsselung benutzt wird.

Die Vorgabe ist @samp{Required}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Zeichenkette default-language
Gibt an, welche Sprache für Text und Weboberfläche voreingestellt benutzt
werden soll.

Die Vorgabe ist @samp{"en"}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Zeichenkette default-paper-size
Gibt das voreingestellte Papierformat für neue Druckwarteschlangen an. Bei
@samp{"Auto"} wird eine der Locale entsprechende Voreinstellung gewählt,
während bei @samp{"None"} kein Papierformat voreingestellt ist. Verfügbare
Formatbezeichnungen sind typischerweise @samp{"Letter"} oder @samp{"A4"}.

Die Vorgabe ist @samp{"Auto"}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Zeichenkette default-policy
Gibt die voreingestellte Zugriffsrichtlinie an, die benutzt werden soll.

Die Vorgabe ist @samp{"default"}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Boolescher-Ausdruck default-shared?
Gibt an, ob lokale Drucker nach Voreinstellung geteilt werden sollen.

Die Vorgabe ist @samp{#t}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl dirty-clean-interval
Gibt an, mit welcher Verzögerung Konfigurations- und Zustandsdateien
aktualisiert werden sollen. Der Wert 0 lässt die Aktualisierung so bald wie
möglich stattfinden, in der Regel nach ein paar Millisekunden.

Die Vorgabe ist @samp{30}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Fehlerrichtlinie error-policy
Gibt an, wie beim Auftreten eines Fehlers verfahren werden soll. Mögliche
Werte sind @code{abort-job}, wodurch der fehlgeschlagene Druckauftrag
verworfen wird, @code{retry-job}, wodurch der Druckauftrag später erneut
versucht wird, @code{retry-current-job}, wodurch der fehlgeschlagene
Druckauftrag sofort erneut versucht wird, und @code{stop-printer}, wodurch
der Drucker angehalten wird.

Die Vorgabe ist @samp{stop-printer}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl filter-limit
Gibt die Maximalkosten von Filtern an, die nebenläufig ausgeführt werden,
wodurch Probleme durch Platten-, Arbeitsspeicher- und
Prozessorressourcennutzung minimiert werden können. Eine Beschränkung von 0
deaktiviert die Filterbeschränkung. Ein durchschnittlicher Druck mit einem
Nicht-PostScript-Drucker erfordert eine Filterbeschränkung von mindestens
ungefähr 200. Ein PostScript-Drucker erfordert eine halb so hohe
Filterbeschränkung (100). Wird die Beschränkung unterhalb dieser
Schwellwerte angesetzt, kann das Planungsprogramm effektiv nur noch einen
einzelnen Druckauftrag gleichzeitig abarbeiten.

Die Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl filter-nice
Gibt die Planungspriorität von Filtern an, die zum Drucken eines
Druckauftrags ausgeführt werden. Der nice-Wert kann zwischen 0, der höchsten
Priorität, und 19, der niedrigsten Priorität, liegen.

Die Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Rechnernamensauflösungen host-name-lookups
Gibt an, ob inverse Namensauflösungen („Reverse Lookups“) bei sich
verbindenden Clients durchgeführt werden sollen. Die Einstellung
@code{double} lässt @code{cupsd} verifizieren, dass der anhand der Adresse
aufgelöste Rechnername zu einer der für den Rechnernamen zurückgelieferten
Adressen passt. „Double“-Namensauflösungen verhindern auch, dass sich
Clients mit unregistrierten Adressen mit Ihrem Server verbinden
können. Setzen Sie diese Option nur dann auf @code{#t} oder @code{double},
wenn es unbedingt notwendig ist.

Vorgegeben ist @samp{#f}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl job-kill-delay
Gibt die Anzahl an Sekunden an, wie lange vor dem Abwürgen der mit einem
abgebrochenen oder gehaltenen Druckauftrag assoziierten Filter- und
Hintergrundprozesse (dem „Backend“) gewartet wird.

Die Vorgabe ist @samp{30}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl job-retry-interval
Gibt das Zeitintervall zwischen erneuten Versuchen von Druckaufträgen in
Sekunden an. Dies wird in der Regel für Fax-Warteschlangen benutzt, kann
aber auch für normale Druckwarteschlangen benutzt werden, deren
Fehlerrichtlinie @code{retry-job} oder @code{retry-current-job} ist.

Die Vorgabe ist @samp{30}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl job-retry-limit
Gibt die Anzahl an, wie oft ein Druckauftrag erneut versucht wird. Dies wird
in der Regel für Fax-Warteschlangen benutzt, kann aber auch für normale
Druckwarteschlangen benutzt werden, deren Fehlerrichtlinie @code{retry-job}
oder @code{retry-current-job} ist.

Die Vorgabe ist @samp{5}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Boolescher-Ausdruck keep-alive?
Gibt an, ob HTTP-„keep-alive“ für Verbindungen unterstützt wird.

Die Vorgabe ist @samp{#t}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl keep-alive-timeout
Gibt an, wie lange eine Clientverbindung ohne Aktivität offen bleibt, in
Sekunden.

Die Vorgabe ist @samp{30}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl limit-request-body
Gibt die Maximalgröße von zu druckenden Dateien, IPP-Anfragen und
HTML-Formulardaten an. Eine Beschränkung von 0 deaktiviert die Beschränkung.

Die Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Mehrzeilige-Zeichenketten-Liste listen
Lauscht auf den angegebenen Schnittstellen auf Verbindungen. Gültige Werte
haben die Form @var{Adresse}:@var{Port}, wobei die @var{Adresse} entweder
eine von eckigen Klammern umschlossene IPv6-Adresse, eine IPv4-Adresse oder
@code{*} ist; letztere steht für alle Adressen. Werte können auch Dateinamen
lokaler UNIX-Sockets sein. Die Listen-Direktive ähnelt der Port-Direktive,
macht es aber möglich, den Zugriff für bestimmte Schnittstellen oder
Netzwerke einzuschränken.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl listen-back-log
Gibt die Anzahl ausstehender Verbindungen an, die möglich sein
soll. Normalerweise betrifft dies nur sehr ausgelastete Server, die die
MaxClients-Beschränkung erreicht haben. Es kann aber auch eine Rolle
spielen, wenn versucht wird, gleichzeitig sehr viele Verbindungen
herzustellen. Wenn die Beschränkung erreicht wird, sperrt das Betriebssystem
den Aufbau weiterer Verbindungen, bis das Druckplanungsprogramm die
ausstehenden akzeptieren konnte.

Die Vorgabe ist @samp{128}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} „location-access-controls“-Liste location-access-controls
Gibt eine Liste zusätzlicher Zugriffssteuerungen („Access Controls“) an.

Verfügbare @code{location-access-controls}-Felder sind:

@deftypevr {@code{location-access-controls}-Parameter} Dateiname path
Gibt den URI-Pfad an, für den die Zugriffssteuerung gilt.
@end deftypevr

@deftypevr {@code{location-access-controls}-Parameter} Zugriffssteuerungs-Liste access-controls
Zugriffssteuerungen für jeden Zugriff auf diesen Pfad, im selben Format wie
die @code{access-controls} bei @code{operation-access-control}.

Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{location-access-controls}-Parameter} „method-access-controls“-Liste method-access-controls
Zugriffssteuerungen für methodenspezifische Zugriffe auf diesen Pfad.

Die Vorgabe ist @samp{()}.

Verfügbare @code{method-access-controls}-Felder sind:

@deftypevr {@code{method-access-controls}-Parameter} Boolescher-Ausdruck reverse?
Falls dies @code{#t} ist, gelten die Zugriffssteuerungen für alle Methoden
außer den aufgelisteten Methoden. Andernfalls gelten sie nur für die
aufgelisteten Methoden.

Vorgegeben ist @samp{#f}.
@end deftypevr

@deftypevr {@code{method-access-controls}-Parameter} Methoden-Liste methods
Methoden, für die diese Zugriffssteuerung gilt.

Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{method-access-controls}-Parameter} Zugriffssteuerungs-Liste access-controls
Access control directives, as a list of strings.  Each string should be one
directive, such as @samp{"Order allow,deny"}.

Die Vorgabe ist @samp{()}.
@end deftypevr
@end deftypevr
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl log-debug-history
Gibt die Anzahl der Nachrichten zur Fehlersuche an, die für Protokolle
vorgehalten werden, wenn ein Fehler in einem Druckauftrag
auftritt. Nachrichten zur Fehlersuche werden unabhängig von der
LogLevel-Einstellung protokolliert.

Die Vorgabe ist @samp{100}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Protokollstufe log-level
Gibt die Stufe der Protokollierung in die ErrorLog-Datei an. Der Wert
@code{none} stoppt alle Protokollierung, während @code{debug2} alles
protokollieren lässt.

Die Vorgabe ist @samp{info}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Protokollzeitformat log-time-format
Gibt das Format von Datum und Uhrzeit in Protokolldateien an. Der Wert
@code{standard} lässt ganze Sekunden ins Protokoll schreiben, während bei
@code{usecs} Mikrosekunden protokolliert werden.

Die Vorgabe ist @samp{standard}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl max-clients
Gibt die Maximalzahl gleichzeitig bedienter Clients an, die vom Planer
zugelassen werden.

Die Vorgabe ist @samp{100}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl max-clients-per-host
Gibt die Maximalzahl gleichzeitiger Clients von derselben Adresse an, die
zugelassen werden.

Die Vorgabe ist @samp{100}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl max-copies
Gibt die Maximalzahl der Kopien an, die ein Nutzer vom selben Druckauftrag
ausdrucken lassen kann.

Die Vorgabe ist @samp{9999}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl max-hold-time
Gibt die maximale Zeitdauer an, die ein Druckauftrag im Haltezustand
@code{indefinite} bleiben darf, bevor er abgebrochen wird. Ein Wert von 0
deaktiviert ein Abbrechen gehaltener Druckaufträge.

Die Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl max-jobs
Gibt die Maximalzahl gleichzeitiger Druckaufträge an, die noch zugelassen
wird. Wenn Sie es auf 0 setzen, wird die Anzahl Druckaufträge @emph{nicht}
beschränkt.

Die Vorgabe ist @samp{500}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl max-jobs-per-printer
Gibt die Maximalzahl gleichzeitiger Druckaufträge an, die pro Drucker
zugelassen werden. Ein Wert von 0 lässt bis zu MaxJobs-viele Druckaufträge
pro Drucker zu.

Die Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl max-jobs-per-user
Gibt die Maximalzahl gleichzeitiger Druckaufträge an, die pro Benutzer
zugelassen werden. Ein Wert von 0 lässt bis zu MaxJobs-viele Druckaufträge
pro Benutzer zu.

Die Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl max-job-time
Specifies the maximum time a job may take to print before it is canceled, in
seconds.  Set to 0 to disable cancellation of ``stuck'' jobs.

Die Vorgabe ist @samp{10800}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl max-log-size
Gibt die Maximalgröße der Protokolldateien an, bevor sie rotiert werden, in
Bytes. Beim Wert 0 wird Protokollrotation deaktiviert.

Die Vorgabe ist @samp{1048576}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl multiple-operation-timeout
Gibt die maximale Zeitdauer an, wie lange es zwischen Dateien in einem
Druckauftrag mit mehreren Dateien dauern darf, in Sekunden.

Die Vorgabe ist @samp{300}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Zeichenkette page-log-format
Gibt das Format der Zeilen im PageLog-Seitenprotokoll an. Folgen, die mit
Prozentzeichen (@samp{%}) beginnen, werden durch die jeweils zugehörigen
Informationen ersetzt, während alle anderen Zeichen wortwörtlich übernommen
werden. Die folgenden Prozentfolgen werden erkannt:

@table @samp
@item %%
ein einzelnes Prozentzeichen einfügen

@item %@{name@}
den Wert des angegebenen IPP-Attributs einfügen

@item %C
die Anzahl der Kopien der aktuellen Seite einfügen

@item %P
die aktuelle Seitenzahl einfügen

@item %T
das aktuelle Datum und Uhrzeit im allgemeinen Protokollformat einfügen

@item %j
den Druckauftragsidentifikator („Job-ID“) einfügen

@item %p
den Druckernamen einfügen

@item %u
den Benutzernamen einfügen
@end table

Wird die leere Zeichenkette als Wert angegeben, wird Seitenprotokollierung
abgeschaltet. Die Zeichenkette @code{%p %u %j %T %P %C %@{job-billing@}
%@{job-originating-host-name@} %@{job-name@} %@{media@} %@{sides@}} erzeugt
ein Seitenprotokoll mit den üblichen Elementen.

Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Umgebungsvariable environment-variables
Übergibt die angegebene(n) Umgebungsvariable(n) an Kindprozesse, als Liste
von Zeichenketten.

Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} „policy-configuration“-Liste policies
Gibt die benannten Zugriffssteuerungsrichtlinien an.

Verfügbare @code{policy-configuration}-Felder sind:

@deftypevr {@code{policy-configuration}-Parameter} Zeichenkette name
Der Name der Richtlinie.
@end deftypevr

@deftypevr {@code{policy-configuration}-Parameter} Zeichenkette job-private-access
Gibt eine Zugriffsliste der privaten Werte eines Druckauftrags
an. @code{@@ACL} wird auf die Werte von requesting-user-name-allowed oder
requesting-user-name-denied des Druckers abgebildet. @code{@@OWNER} wird auf
den Besitzer des Druckauftrags abgebildet. @code{@@SYSTEM} wird auf die
Gruppen abgebildet, die im @code{system-group}-Feld der
@code{files-config}-Konfiguration aufgelistet sind, aus der die Datei
@code{cups-files.conf(5)} erzeugt wird. Zu den anderen möglichen Elementen
der Zugriffsliste gehören Namen bestimmer Benutzerkonten und
@code{@@@var{Benutzergruppe}}, was für Mitglieder einer bestimmten
Benutzergruppe steht. Die Zugriffsliste kann auch einfach als @code{all}
oder @code{default} festgelegt werden.

Die Vorgabe ist @samp{"@@OWNER @@SYSTEM"}.
@end deftypevr

@deftypevr {@code{policy-configuration}-Parameter} Zeichenkette job-private-values
Gibt die Liste der Druckauftragswerte an, die geschützt werden sollten, oder
@code{all}, @code{default} oder @code{none}.

Die Vorgabe ist @samp{"job-name job-originating-host-name
job-originating-user-name phone"}.
@end deftypevr

@deftypevr {@code{policy-configuration}-Parameter} Zeichenkette subscription-private-access
Gibt eine Zugriffsliste für die privaten Werte eines Abonnements
an. @code{@@ACL} wird auf die Werte von requesting-user-name-allowed oder
requesting-user-name-denied des Druckers abgebildet. @code{@@OWNER} wird auf
den Besitzer des Druckauftrags abgebildet. @code{@@SYSTEM} wird auf die
Gruppen abgebildet, die im @code{system-group}-Feld der
@code{files-config}-Konfiguration aufgelistet sind, aus der die Datei
@code{cups-files.conf(5)} erzeugt wird. Zu den anderen möglichen Elementen
der Zugriffsliste gehören Namen bestimmer Benutzerkonten und
@code{@@@var{Benutzergruppe}}, was für Mitglieder einer bestimmten
Benutzergruppe steht. Die Zugriffsliste kann auch einfach als @code{all}
oder @code{default} festgelegt werden.

Die Vorgabe ist @samp{"@@OWNER @@SYSTEM"}.
@end deftypevr

@deftypevr {@code{policy-configuration}-Parameter} Zeichenkette subscription-private-values
Gibt die Liste der Druckauftragswerte an, die geschützt werden sollten, oder
@code{all}, @code{default} oder @code{none}.

Die Vorgabe ist @samp{"notify-events notify-pull-method notify-recipient-uri
notify-subscriber-user-name notify-user-data"}.
@end deftypevr

@deftypevr {@code{policy-configuration}-Parameter} „operation-access-controls“-Liste access-controls
Zugriffssteuerung durch IPP-Betrieb.

Die Vorgabe ist @samp{()}.
@end deftypevr
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Boolescher-Ausdruck-oder-Nichtnegative-ganze-Zahl preserve-job-files
Gibt an, ob die Dateien eines Druckauftrags (Dokumente) erhalten bleiben,
nachdem ein Druckauftrag ausgedruckt wurde. Wenn eine Zahl angegeben wird,
bleiben die Dateien des Druckauftrags für die angegebene Zahl von Sekunden
nach dem Drucken erhalten. Ein boolescher Wert bestimmt ansonsten, ob sie
auf unbestimmte Zeit erhalten bleiben.

Die Vorgabe ist @samp{86400}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Boolescher-Ausdruck-oder-Nichtnegative-ganze-Zahl preserve-job-history
Gibt an, ob der Druckauftragsverlauf nach dem Drucken eines Druckauftrags
erhalten bleibt. Wenn eine Zahl angegeben wird, bleibt der
Druckauftragsverlauf für die angegebene Zahl von Sekunden nach dem Drucken
erhalten. Bei @code{#t} bleibt der Druckauftragsverlauf so lange erhalten,
bis die MaxJobs-Beschränkung erreicht wurde.

Die Vorgabe ist @samp{#t}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl reload-timeout
Gibt an, wie lange vor dem Neustart des Planungsprogramms auf den Abschluss
eines Druckauftrages gewartet wird.

Die Vorgabe ist @samp{30}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Zeichenkette rip-cache
Gibt die maximale Menge an genutztem Arbeitsspeicher für das Konvertieren
von Dokumenten in eine Rastergrafik (eine „Bitmap“) für einen Drucker an.

Die Vorgabe ist @samp{"128m"}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Zeichenkette server-admin
Gibt die E-Mail-Adresse des Serveradministrators an.

Die Vorgabe ist @samp{"root@@localhost.localdomain"}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Rechnernamens-Liste-oder-* server-alias
Die ServerAlias-Direktive wird zur Prüfung der HTTP-Host-Kopfzeile benutzt,
wenn sich Clients mit dem Planungsprogramm über externe Schnittstellen
verbinden. Wenn der besondere Name @code{*} benutzt wird, könnte Ihr System
möglicherweise bekannten browserbasierten DNS-Rebinding-Angriffen ausgesetzt
werden, selbst wenn auf die Angebote nur über eine Firewall zugegriffen
wird. Wenn alternative Namen nicht automatisch erkannt werden, empfehlen
wir, jeden alternativen Namen in der ServerAlias-Direktive aufzulisten,
statt @code{*} zu benutzen.

Die Vorgabe ist @samp{*}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Zeichenkette server-name
Gibt den vollständigen Rechnernamen („Fully-Qualified Host Name“) des
Servers an.

Die Vorgabe ist @samp{"localhost"}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Server-Tokens server-tokens
Gibt an, welche Informationen in der Server-Kopfzeile von HTTP-Antworten
vorkommen. @code{None} deaktiviert die Server-Kopfzeile. @code{ProductOnly}
liefert @code{CUPS}. @code{Major} liefert @code{CUPS 2}. @code{Minor}
liefert @code{CUPS 2.0}. @code{Minimal} liefert @code{CUPS 2.0.0}. @code{OS}
liefert @code{CUPS 2.0.0 (@var{uname})}, wobei @var{uname} die Ausgabe des
Befehls @code{uname} ist. @code{Full} liefert @code{CUPS 2.0.0 (@var{uname})
IPP/2.0}.

Die Vorgabe ist @samp{Minimal}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Mehrzeilige-Zeichenketten-Liste ssl-listen
Lauscht auf den angegebenen Schnittstellen auf verschlüsselte
Verbindungen. Gültige Werte haben die Form @var{Adresse}:@var{Port}, wobei
die @var{Adresse} entweder eine von eckigen Klammern umschlossene
IPv6-Adresse, eine IPv4-Adresse oder @code{*} ist; letztere steht für alle
Adressen.

Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} SSL-Optionen ssl-options
Legt Verschlüsselungsoptionen fest. Nach Vorgabe unterstützt CUPS nur
Verschlüsselung mit TLS v1.0 oder höher mit bekannten, sicheren „Cipher
Suites“. Es ist weniger sicher, Optionen mit @code{Allow} („erlauben“) zu
verwenden, und es erhöht die Sicherheit, Optionen mit @code{Deny}
(„verweigern“) zu benutzen. Die Option @code{AllowRC4} aktiviert die
128-Bit-RC4-Cipher-Suites, die manche alten Clients brauchen. Die Option
@code{AllowSSL3} aktiviert SSL v3.0, das manche alte Clients brauchen, die
TLS v1.0 nicht implementieren. Die Option @code{DenyCBC} deaktiviert alle
CBC-Cipher-Suites. Die Option @code{DenyTLS1.0} deaktiviert Unterstützung
für TLS v1.0 — dadurch wird TLS v1.1 zur kleinsten noch unterstützten
Protokollversion.

Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Boolescher-Ausdruck strict-conformance?
Gibt an, ob das Druckplanungsprogramm von Clients fordert, dass sie sich
strikt an die IPP-Spezifikationen halten.

Vorgegeben ist @samp{#f}.
@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Nichtnegative-ganze-Zahl timeout
Gibt die Zeitbeschränkung für HTTP-Anfragen an, in Sekunden.

Die Vorgabe ist @samp{300}.

@end deftypevr

@deftypevr {@code{cups-configuration}-Parameter} Boolescher-Ausdruck web-interface?
Gibt an, ob die Weboberfläche zur Verfügung gestellt wird.

Vorgegeben ist @samp{#f}.
@end deftypevr

Mittlerweile denken Sie wahrscheinlich: „Ich bitte dich, Guix-Handbuch, ich
mag dich, aber kannst du jetzt bitte mit den Konfigurationsoptionen
aufhören?“ Damit hätten Sie recht. Allerdings sollte ein weitere Punkt noch
erwähnt werden: Vielleicht haben Sie eine bestehende @code{cupsd.conf}, die
Sie verwenden möchten. In diesem Fall können Sie eine
@code{opaque-cups-configuration} als die Konfiguration eines
@code{cups-service-type} übergeben.

Verfügbare @code{opaque-cups-configuration}-Felder sind:

@deftypevr {@code{opaque-cups-configuration}-Parameter} „package“ cups
Das CUPS-Paket.
@end deftypevr

@deftypevr {@code{opaque-cups-configuration}-Parameter} Zeichenkette cupsd.conf
Der Inhalt der Datei @code{cupsd.conf} als eine Zeichenkette.
@end deftypevr

@deftypevr {@code{opaque-cups-configuration}-Parameter} Zeichenkette cups-files.conf
Der Inhalt der Datei @code{cups-files.conf} als eine Zeichenkette.
@end deftypevr

Wenn Ihre @code{cupsd.conf} und @code{cups-files.conf} zum Beispiel in
Zeichenketten mit dem entsprechenden Namen definiert sind, könnten Sie auf
diese Weise einen CUPS-Dienst instanziieren:

@lisp
(service cups-service-type
         (opaque-cups-configuration
           (cupsd.conf cupsd.conf)
           (cups-files.conf cups-files.conf)))
@end lisp


@node Desktop-Dienste
@subsection Desktop-Dienste

Das Modul @code{(gnu services desktop)} stellt Dienste zur Verfügung, die
meistens bei „Desktop“-Einrichtungen für grafische Nutzung praktisch sind —
also auf einer Maschine mit einem grafischem Anzeigeserver, vielleicht mit
einer grafischen Benutzeroberfläche, usw. Im Modul werden auch Dienste
definiert, die bestimmte Arbeitsumgebungen wie GNOME, Xfce oder MATE
bereitstellen.

Um es einfacher zu machen, definiert das Modul auch eine Variable mit
denjenigen Diensten, die man auf einer Maschine mit einer grafischen
Umgebung und Netzwerkunterstützung erwarten würde:

@defvr {Scheme-Variable} %desktop-services
Dies ist eine Liste von Diensten, die @code{%base-services} ergänzt und
weitere Dienste hinzufügt oder bestehende anpasst, um für eine normale
„Desktop“-Nutzung geeignet zu sein.

Insbesondere wird eine grafische Anmeldeverwaltung hinzugefügt (siehe @ref{X Window, @code{gdm-service-type}}), ebenso Programme zur Bildschirmsperre,
ein Werkzeug zur Netzwerkverwaltung (siehe @ref{Netzwerkdienste,
@code{network-manager-service-type}}) mit Unterstützung für Modems (siehe
@ref{Netzwerkdienste, @code{modem-manager-service-type}}),
Energieverbrauchs- und Farbverwaltungsdienste, Anmeldungs- und
Sitzungsverwaltung über @code{elogind}, der Berechtigungsdienst Polkit, der
Ortungsdienst GeoClue, der AccountsService-Daemon, mit dem autorisierte
Benutzer Systempasswörter ändern können, ein NTP-Client (siehe
@ref{Netzwerkdienste}) und der Avahi-Daemon. Außerdem wird der Name
Service Switch konfiguriert, damit er @code{nss-mdns} benutzt (siehe
@ref{Name Service Switch, mDNS}).
@end defvr

Die @code{%desktop-services}-Variable kann als das @code{services}-Feld
einer @code{operating-system}-Deklaration genutzt werden (siehe
@ref{„operating-system“-Referenz, @code{services}}).

Daneben können die Prozeduren @code{gnome-desktop-service-type},
@code{xfce-desktop-service}, @code{mate-desktop-service-type} und
@code{enlightenment-desktop-service-type} jeweils GNOME, Xfce, MATE und/oder
Enlightenment zu einem System hinzufügen. „GNOME hinzufügen“ bedeutet, dass
Dienste auf Systemebene wie z.B.@: Hilfsprogramme zur Anpassung der
Hintergrundbeleuchtung und des Energieverbrauchs zum System hinzugefügt
werden und @code{polkit} und @code{dbus} entsprechend erweitert werden,
wodurch GNOME mit erhöhten Berechtigungen auf eine begrenzte Zahl von
speziellen Systemschnittstellen zugreifen kann. Zusätzlich bedeutet das
Hinzufügen eines durch @code{gnome-desktop-service-type} erzeugten Dienstes,
dass das GNOME-Metapaket ins Systemprofil eingefügt wird. Genauso wird beim
Einfügen des Xfce-Dienstes nicht nur das @code{xfce}-Metapaket zum
Systemprofil hinzugefügt, sondern dem Thunar-Dateiverwaltungsprogramm wird
auch die Berechtigung gegeben, ein Fenster mit Administratorrechten zu
öffnen, wenn der Benutzer sich mit dem Administratorpasswort über die
standardmäßige grafische Oberfläche von Polkit authentisiert. „MATE
hinzufügen“ bedeutet, dass @code{polkit} und @code{dbus} entsprechend
erweitert werden, wodurch MATE mit erhöhten Berechtigungen auf eine
begrenzte Zahl von speziellen Systemschnittstellen zugreifen
kann. Zusätzlich bedeutet das Hinzufügen eines durch
@code{mate-desktop-service-type} erzeugten Dienstes, dass das MATE-Metapaket
ins Systemprofil eingefügt wird. „Enlightenment hinzufügen“ bedeutet, dass
@code{dbus} entsprechend erweitert wird und mehrere Binärdateien von
Enlightenment als setuid eingerichtet werden, wodurch das Programm zum
Sperren des Bildschirms und andere Funktionen von Enlightenment wie erwartet
funktionieren.

Die Arbeitsumgebungen in Guix benutzen standardmäßig den
Xorg-Anzeigeserver. Falls Sie das neuere Anzeigeserverprotokoll namens
Wayland benutzen möchten, müssen Sie den Dienst @code{sddm-service} anstelle
von GDM für die grafische Anmeldeverwaltung einrichten. Dann sollten Sie in
SDDM die Sitzung  „GNOME (Wayland)“ auswählen. Alternativ können Sie auch
versuchen, GNOME mit Wayland manuell aus einer Konsole (TTY) mit dem Befehl
„XDG_SESSION_TYPE=wayland exec dbus-run-session gnome-session“ zu
starten. Derzeit wird Wayland nur von GNOME unterstützt.

@defvr {Scheme-Variable} gnome-desktop-service-type
This is the type of the service that adds the @uref{https://www.gnome.org,
GNOME} desktop environment.  Its value is a
@code{gnome-desktop-configuration} object (see below).

Dieser Dienst fügt das @code{gnome}-Paket zum Systemprofil hinzu und
erweitert Polkit um die von @code{gnome-settings-daemon} benötigten
Aktionen.
@end defvr

@deftp {Datentyp} gnome-desktop-configuration
Verbundsobjekt für die Konfiguration der GNOME-Arbeitsumgebung.

@table @asis
@item @code{gnome} (Vorgabe: @code{gnome})
Welches GNOME-Paket benutzt werden soll.
@end table
@end deftp

@defvr {Scheme-Variable} xfce-desktop-service-type
This is the type of a service to run the @uref{Xfce, https://xfce.org/}
desktop environment.  Its value is an @code{xfce-desktop-configuration}
object (see below).

Dieser Dienst fügt das Paket @code{xfce} zum Systemprofil hinzu und
erweitert Polkit, damit @code{thunar} befähigt wird, das Dateisystem aus
einer Benutzersitzung heraus mit Administratorrechten zu bearbeiten, nachdem
sich der Benutzer mit dem Administratorpasswort authentisiert hat.
@end defvr

@deftp {Datentyp} xfce-desktop-configuration
Verbundstyp für Einstellungen zur Xfce-Arbeitsumgebung.

@table @asis
@item @code{xfce} (Vorgabe: @code{xfce})
Das Xfce-Paket, was benutzt werden soll.
@end table
@end deftp

@deffn {Scheme-Variable} mate-desktop-service-type
This is the type of the service that runs the
@uref{https://mate-desktop.org/, MATE desktop environment}.  Its value is a
@code{mate-desktop-configuration} object (see below).

Dieser Dienst fügt das Paket @code{mate} ins Systemprofil ein und erweitert
Polkit um die Aktionen aus dem @code{mate-settings-daemon}.
@end deffn

@deftp {Datentyp} mate-desktop-configuration
Verbundstyp für die Einstellungen der MATE-Arbeitsumgebung.

@table @asis
@item @code{mate} (Vorgabe: @code{mate})
Das MATE-Paket, was benutzt werden soll.
@end table
@end deftp

@deffn {Scheme-Variable} enlightenment-desktop-service-type
Liefert einen Dienst, der das @code{enlightenment}-Paket zum Systemprofil
hinzufügt und D-Bus mit den Aktionen aus @code{efl} erweitert.
@end deffn

@deftp {Datentyp} enlightenment-desktop-service-configuration
@table @asis
@item @code{enlightenment} (Vorgabe: @code{enlightenment})
Das Enlightenment-Paket, was benutzt werden soll.
@end table
@end deftp

Weil die Desktopdienste GNOME, Xfce und MATE so viele Pakete ins System
mitnehmen, gehören diese nicht zu den Vorgaben in der
@code{%desktop-services}-Variablen. Um GNOME, Xfce oder MATE hinzuzufügen,
benutzen Sie einfach @code{cons} zum Anhängen an die
@code{%desktop-services} im @code{services}-Feld Ihrer
@code{operating-system}-Deklaration:

@lisp
(use-modules (gnu))
(use-service-modules desktop)
(operating-system
  …
  ;; cons* adds items to the list given as its last argument.
  (services (cons* (service gnome-desktop-service-type)
                   (service xfce-desktop-service)
                   %desktop-services))
  …)
@end lisp

Diese Arbeitsumgebungen stehen dann im grafischen Anmeldefenster zur
Auswahl.

Die eigentlichen Dienstdefinitionen, die in @code{%desktop-services} stehen
und durch @code{(gnu services dbus)} und @code{(gnu services desktop)} zur
Verfügung gestellt werden, werden im Folgenden beschrieben.

@deffn {Scheme-Prozedur} dbus-service [#:dbus @var{dbus}] [#:services '()]
Liefert einen Dienst, der den „Systembus“ mit @var{dbus} ausführt, mit
Unterstützung für die als @var{services} übergebenen Dienste.

@uref{https://dbus.freedesktop.org/, D-Bus} ist eine Einrichtung zur
Interprozesskommunikation. Deren Systembus wird benutzt, damit Systemdienste
miteinander kommunizieren können und damit sie bei systemweiten Ereignissen
benachrichtigt werden können.

Als @var{services} muss eine Liste von Paketen übergeben werden, die ein
Verzeichnis @file{etc/dbus-1/system.d} mit zusätzlichen
D-Bus-Konfigurations- und Richtliniendateien enthalten. Damit zum Beispiel
der Avahi-Daemon den Systembus benutzen kann, muss @var{services} gleich
@code{(list avahi)} sein.
@end deffn

@deffn {Scheme-Prozedur} elogind-service [#:config @var{Konfiguration}]
Liefert einen Dienst, der den Anmelde- und Sitzungsdaemon @code{elogind}
ausführt. @uref{https://github.com/elogind/elogind, Elogind} stellt eine
D-Bus-Schnittstelle bereit, über die ausgelesen werden kann, welche Benutzer
angemeldet sind und welche Sitzungen sie geöffnet haben, und außerdem das
System in Bereitschaft versetzt werden kann, der Bereitschaftsmodus
unterdrückt werden kann, das System neu gestartet werden kann und anderes.

Die meisten Energieereignisse auf Systemebene in einem Rechner werden von
elogind behandelt, wie etwa ein Versetzen des Systems in Bereitschaft, wenn
der Rechner zugeklappt wird, oder ein Herunterfahren beim Drücken des
Stromschalters.

Das @var{config}-Schlüsselwort gibt die Konfiguration für elogind an und
sollte das Ergebnis eines Aufrufs von @code{(elogind-configuration
(@var{Parameter} @var{Wert})...)} sein. Verfügbare Parameter und ihre
Vorgabewerte sind:

@table @code
@item kill-user-processes?
@code{#f}
@item kill-only-users
@code{()}
@item kill-exclude-users
@code{("root")}
@item inhibit-delay-max-seconds
@code{5}
@item handle-power-key
@code{poweroff}
@item handle-suspend-key
@code{suspend}
@item handle-hibernate-key
@code{hibernate}
@item handle-lid-switch
@code{suspend}
@item handle-lid-switch-docked
@code{ignore}
@item power-key-ignore-inhibited?
@code{#f}
@item suspend-key-ignore-inhibited?
@code{#f}
@item hibernate-key-ignore-inhibited?
@code{#f}
@item lid-switch-ignore-inhibited?
@code{#t}
@item holdoff-timeout-seconds
@code{30}
@item idle-action
@code{ignore}
@item idle-action-seconds
@code{(* 30 60)}
@item runtime-directory-size-percent
@code{10}
@item runtime-directory-size
@code{#f}
@item remove-ipc?
@code{#t}
@item suspend-state
@code{("mem" "standby" "freeze")}
@item suspend-mode
@code{()}
@item hibernate-state
@code{("disk")}
@item hibernate-mode
@code{("platform" "shutdown")}
@item hybrid-sleep-state
@code{("disk")}
@item hybrid-sleep-mode
@code{("suspend" "platform" "shutdown")}
@end table
@end deffn

@deffn {Scheme-Prozedur} accountsservice-service @
       [#:accountsservice @var{accountsservice}] Liefert einen Dienst, der
AccountsService ausführt. Dabei handelt es sich um einen Systemdienst, mit
dem verfügbare Benutzerkonten aufgelistet und deren Passwörter geändert
werden können, und Ähnliches. AccountsService arbeitet mit PolicyKit
zusammen, um es Benutzern ohne besondere Berechtigungen zu ermöglichen, ihre
Systemkonfiguration zu ändern. Siehe
@uref{https://www.freedesktop.org/wiki/Software/AccountsService/, den
Webauftritt von AccountsService} für weitere Informationen.

Das Schlüsselwortargument @var{accountsservice} gibt das
@code{accountsservice}-Paket an, das als Dienst verfügbar gemacht wird.
@end deffn

@deffn {Scheme-Prozedur} polkit-service @
                         [#:polkit @var{polkit}] Liefert einen Dienst, der
@uref{https://www.freedesktop.org/wiki/Software/polkit/, Polkit als Dienst
zur Verwaltung von Berechtigungen} ausführt, wodurch Systemadministratoren
auf strukturierte Weise den Zugang zu „privilegierten“ Operationen gewähren
können, die erweiterte Berechtigungen erfordern. Indem der Polkit-Dienst
angefragt wird, kann eine mit Berechtigungen ausgestattete Systemkomponente
die Information erhalten, ob normalen Benutzern Berechtigungen gewährt
werden dürfen. Zum Beispiel kann einer normalen Nutzerin die Berechtigung
gegeben werden, das System in den Bereitschaftsmodus zu versetzen, unter der
Voraussetzung, dass sie lokal vor Ort angemeldet ist.
@end deffn

@defvr {Scheme-Variable} polkit-wheel-service
Dieser Dienst richtet die @code{wheel}-Benutzergruppe als Administratoren
für den Polkit-Dienst ein. Der Zweck davon ist, dass Benutzer in der
@code{wheel}-Benutzergruppe nach ihren eigenen Passwörtern gefragt werden
statt dem Passwort des Administratornutzers @code{root}, wenn sie
administrative Tätigkeiten durchführen, ähnlich dem, wie sich @code{sudo}
verhält.
@end defvr

@defvr {Scheme-Variable} upower-service-type
Typ des Dienstes, der @uref{https://upower.freedesktop.org/,
@command{upowerd}} ausführt, ein Programm zur systemweiten Überwachung des
Energieverbrauchs und der Akkuladung. Er hat die angegebenen
Konfigurationseinstellungen.

Er implementiert die D-Bus-Schnittstelle
@code{org.freedesktop.UPower}. Insbesondere wird UPower auch von GNOME
benutzt.
@end defvr

@deftp {Datentyp} upower-configuration
Repräsentiert die Konfiguration von UPower.

@table @asis

@item @code{upower} (Vorgabe: @var{upower})
Das Paket, das für @code{upower} benutzt werden soll.

@item @code{watts-up-pro?} (Vorgabe: @code{#f})
Aktiviert das Watts-Up-Pro-Gerät.

@item @code{poll-batteries?} (Vorgabe: @code{#t})
Aktiviert das regelmäßige Abfragen des Kernels bezüglich Änderungen am Stand
der Akku-Ladung.

@item @code{ignore-lid?} (Vorgabe: @code{#f})
Ignorieren, ob der Rechner zugeklappt ist. Das kann gewünscht sein, wenn
Auf- und Zuklappen nicht richtig erkannt werden.

@item @code{use-percentage-for-policy?} (Vorgabe: @code{#f})
Ob sich die Richtlinie am Akku-Ladestand in Prozent orientieren soll. Die
Vorgabe ist, sich an der verbleibenden Zeit zu orientieren. Wenn Sie sie auf
@code{#t} ändern, dient der Prozentstand als Orientierung.

@item @code{percentage-low} (Vorgabe: @code{10})
Wenn @code{use-percentage-for-policy?} auf @code{#t} gesetzt ist, wird
hiermit der Prozentstand festgelegt, ab dem der Akku-Ladestand als niedrig
gilt.

@item @code{percentage-critical} (Vorgabe: @code{3})
Wenn @code{use-percentage-for-policy?} auf @code{#t} gesetzt ist, wird
hiermit der Prozentstand festgelegt, ab dem der Akku-Ladestand als kritisch
gilt.

@item @code{percentage-action} (Vorgabe: @code{2})
Wenn @code{use-percentage-for-policy?} auf @code{#t} gesetzt ist, wird
hiermit der Prozentstand festgelegt, ab dem Maßnahmen eingeleitet werden.

@item @code{time-low} (Vorgabe: @code{1200})
Wenn @code{use-percentage-for-policy?} auf @code{#f} gesetzt ist, wird
hiermit die verbleibende Zeit in Sekunden festgelegt, ab der der
Akku-Ladestand als niedrig gilt.

@item @code{time-critical} (Vorgabe: @code{300})
Wenn @code{use-percentage-for-policy?} auf @code{#f} gesetzt ist, wird
hiermit die verbleibende Zeit in Sekunden festgelegt, ab der der
Akku-Ladestand als kritisch gilt.

@item @code{time-action} (Vorgabe: @code{120})
Wenn @code{use-percentage-for-policy?} auf @code{#f} gesetzt ist, wird
hiermit die verbleibende Zeit in Sekunden festgelegt, ab der Maßnahmen
eingeleitet werden.

@item @code{critical-power-action} (Vorgabe: @code{'hybrid-sleep})
Welche Maßnahme eingeleitet wird, wenn die @code{percentage-action} oder
@code{time-action} erreicht wurde (je nachdem, wie
@code{use-percentage-for-policy?} eingestellt wurde).

Mögliche Werte sind:

@itemize @bullet
@item
@code{'power-off}

@item
@code{'hibernate}

@item
@code{'hybrid-sleep}.
@end itemize

@end table
@end deftp

@deffn {Scheme-Prozedur} udisks-service [#:udisks @var{udisks}]
Liefert einen Dienst für @uref{https://udisks.freedesktop.org/docs/latest/,
UDisks}, einen Daemon zur @dfn{Datenträgerverwaltung}, der
Benutzeroberflächen mit Benachrichtigungen und Möglichkeiten zum Einbinden
und Aushängen von Datenträgern versorgt. Zu den Programmen, die mit UDisks
kommunizieren, gehört der Befehl @command{udisksctl}, der Teil von UDisks
ist, sowie GNOME Disks.
@end deffn

@deffn {Scheme-Variable} colord-service-type
Dies ist der Typ des Dienstes, der @command{colord} ausführt. Dabei handelt
es sich um einen Systemdienst mit einer D-Bus-Schnittstelle, um die
Farbprofile von Ein- und Ausgabegeräten wie Bildschirmen oder Scannern zu
verwalten. Insbesondere wird colord vom grafischen
GNOME-Farbverwaltungswerkzeug benutzt. Siehe
@uref{https://www.freedesktop.org/software/colord/, den Webauftritt von
colord} für weitere Informationen.
@end deffn

@deffn {Scheme-Prozedur} geoclue-application Name [#:allowed? #t] [#:system? #f] [#:users '()]
Liefert eine Konfiguration, mit der eine Anwendung auf Ortungsdaten von
GeoClue zugreifen kann. Als @var{Name} wird die Desktop-ID der Anwendung
angegeben, ohne die Pfadkomponente mit @code{.desktop}-Endung. Wenn
@var{allowed?} wahr ist, hat die Anwendung standardmäßig Zugriff auf
Ortungsinformationen. Der boolesche Wert @var{system?} zeigt an, ob die
Anwendung eine Systemkomponente ist oder nicht. Zum Schluss wird für
@var{users} eine Liste von Benutzeridentifikatoren (UIDs) aller
Benutzerkonten angegeben, für die diese Anwendung Zugriff auf
Ortungsinformationen gewährt bekommt. Eine leere Benutzerliste bedeutet,
dass dies für alle Benutzer gewährt wird.
@end deffn

@cindex Scanner, Zugriff auf
@deffn {Scheme-Prozedur} sane-service-type
Mit diesem Dienst wird Zugriff auf Scanner über
@uref{http://www.sane-project.org, SANE} möglich, indem er die nötigen
udev-Regeln installiert.
@end deffn

@defvr {Scheme-Variable} %standard-geoclue-applications
Die Standardliste wohlbekannter GeoClue-Anwendungskonfigurationen, mit der
das GNOME-Werkzeug für Datum und Uhrzeit die Berechtigung bekommt, den
aktuellen Ort abzufragen, um die Zeitzone festzulegen, und die Webbrowser
IceCat und Epiphany Ortsinformationen abfragen dürfen. IceCat und Epiphany
fragen beide zuerst beim Benutzer nach, bevor sie einer Webseite gestatten,
den Ort des Benutzer abzufragen.
@end defvr

@deffn {Scheme-Prozedur} geoclue-service [#:colord @var{colord}] @
                         [#:whitelist '()] @ [#:wifi-geolocation-url
"https://location.services.mozilla.com/v1/geolocate?key=geoclue"] @
[#:submit-data? #f] [#:wifi-submission-url
"https://location.services.mozilla.com/v1/submit?key=geoclue"] @
[#:submission-nick "geoclue"] @ [#:applications
%standard-geoclue-applications] Liefert einen Dienst, der den Ortungsdienst
GeoClue ausführt. Dieser Dienst bietet eine D-Bus-Schnittstelle an, mit der
Anwendungen Zugriff auf den physischen Ort eines Benutzers anfragen können,
und optional Informationen in Online-Ortsdatenbanken eintragen können. Siehe
@uref{https://wiki.freedesktop.org/www/Software/GeoClue/, den Webauftritt
von GeoClue} für weitere Informationen.
@end deffn

@deffn {Scheme-Prozedur} bluetooth-service [#:bluez @var{bluez}] @
       [@w{#:auto-enable? #f}] Liefert einen Dienst, der den
@command{bluetoothd}-Daemon ausführt, welcher alle Bluetooth-Geräte
verwaltet, und eine Reihe von D-Bus-Schnittstellen zur Verfügung
stellt. Wenn AUTO-ENABLE? wahr ist, wird die Bluetooth-Steuerung automatisch
beim Hochfahren gestartet, was sich als nützlich erweisen kann, wenn man
eine Bluetooth-Tastatur oder -Maus benutzt.

Benutzer müssen zur @code{lp}-Benutzergruppe gehören, damit sie Zugriff auf
den D-Bus-Dienst bekommen.
@end deffn

@defvr {Scheme-Variable} gnome-keyring-service-type
This is the type of the service that adds the
@uref{https://wiki.gnome.org/Projects/GnomeKeyring, GNOME Keyring}.  Its
value is a @code{gnome-keyring-configuration} object (see below).

Dieser Dienst fügt das @code{gnome-keyring}-Paket zum Systemprofil hinzu und
erweitert PAM um Einträge zur Nutzung von @code{pam_gnome_keyring.so},
wodurch der Schlüsselbund von Nutzern entsperrt wird, wenn sie sich
anmelden, und passwd auch das Passwort des Schlüsselbunds festlegt.
@end defvr

@deftp {Datentyp} gnome-keyring-configuration
Verbundsobjekt für die Konfiguration des GNOME-Schlüsselbunddienstes.

@table @asis
@item @code{keyring} (Vorgabe: @code{gnome-keyring})
Welches GNOME-Schlüsselbunddienst-Paket benutzt werden soll.

@item @code{pam-services}
Eine Liste von Paaren aus @code{(@var{Dienst} . @var{Typ})}, die zu
erweiternde PAM-Dienste bezeichnen. Dabei steht @var{Dienst} für den Namen
eines bestehenden Dienstes, der erweitert werden soll, und als @var{Typ}
kann @code{login} oder @code{passwd} angegeben werden.

Wenn @code{login} angegeben wird, wird ein optionales
@code{pam_gnome_keyring.so} zum Auth-Block ohne Argumente und zum
Session-Block mit @code{auto_start} hinzugefügt. Wenn @code{passwd}
angegeben wird, wird ein optionales @code{pam_gnome_keyring.so} zum
Password-Block ohne Argumente hinzugefügt.

Der vorgegebene Inhalt ist „gdm-password“ mit dem Wert @code{login} und
„passwd“ mit dem Wert @code{passwd}.
@end table
@end deftp


@node Tondienste
@subsection Tondienste

@cindex Sound-Unterstützung
@cindex ALSA
@cindex PulseAudio, Sound-Unterstützung

Das Modul @code{(gnu services sound)} stellt einen Dienst zur Verfügung, um
das Advanced-Linux-Sound-Architecture-System (ALSA) zu konfigurieren, so
dass PulseAudio als bevorzugter ALSA-Ausgabetreiber benutzt wird.

@deffn {Scheme-Variable} alsa-service-type
Dies ist der Typ des Dienstes für das als @uref{https://alsa-project.org/,
Advanced Linux Sound Architecture (ALSA)} bekannte System, das die
Konfigurationsdatei @file{/etc/asound.conf} erzeugt. Der Wert für diesen
Diensttyp ist ein @command{alsa-configuration}-Verbundsobjekt wie in diesem
Beispiel:

@lisp
(service alsa-service-type)
@end lisp

Siehe die folgenden Details zur @code{alsa-configuration}.
@end deffn

@deftp {Datentyp} alsa-configuration
Repräsentiert die Konfiguration für den Dienst @code{alsa-service}.

@table @asis
@item @code{alsa-plugins} (Vorgabe: @var{alsa-plugins})
@code{alsa-plugins}-Paket, was benutzt werden soll.

@item @code{pulseaudio?} (Vorgabe: @var{#t})
Ob ALSA-Anwendungen transparent den @uref{https://www.pulseaudio.org/,
PulseAudio-Audioserver} benutzen sollen.

Wenn PulseAudio benutzt wird, können Sie gleichzeitig mehrere Anwendungen
mit Tonausgabe ausführen und sie unter anderem mit @command{pavucontrol}
einzeln einstellen.

@item @code{extra-options} (Vorgabe: @var{""})
Die Zeichenkette, die an die Datei @file{/etc/asound.conf} angehängt werden
soll.

@end table
@end deftp

Wenn einzelne Benutzer von ALSAs Systemkonfiguration abweichende
Einstellungen vornehmen möchten, können Sie das mit der Konfigurationsdatei
@file{~/.asoundrc} tun:

@example
# In Guix müssen wir den absoluten Pfad von Plugins angeben.
pcm_type.jack @{
  lib "/home/alice/.guix-profile/lib/alsa-lib/libasound_module_pcm_jack.so"
@}

# ALSA an jack weiterleiten:
# <http://jackaudio.org/faq/routing_alsa.html>.
pcm.rawjack @{
  type jack
  playback_ports @{
    0 system:playback_1
    1 system:playback_2
  @}

  capture_ports @{
    0 system:capture_1
    1 system:capture_2
  @}
@}

pcm.!default @{
  type plug
  slave @{
    pcm "rawjack"
  @}
@}
@end example

Siehe @uref{https://www.alsa-project.org/main/index.php/Asoundrc} für die
Details.

@deffn {Scheme-Variable} pulseaudio-service-type
Dies ist der Diensttyp für den @url{https://www.pulseaudio.org/,
PulseAudio-Soundserver}. Mit ihm können die Voreinstellungen systemweit
abgeändert werden. Dazu benutzen Sie eine @code{pulseaudio-configuration},
siehe unten.

@quotation Warnung
This service overrides per-user configuration files.  If you want PulseAudio
to honor configuraton files in @file{~/.config/pulse} you have to unset the
environment variables @env{PULSE_CONFIG} and @env{PULSE_CLIENTCONFIG} in
your @file{~/.bash_profile}.
@end quotation

@quotation Warnung
Dieser Dienst sorgt alleine noch nicht dafür, dass auf ihrer Maschine das
@code{pulseaudio}-Paket vorliegt. Er fügt bloß Konfigurationsdateien dafür
hinzu, wie im Folgenden beschrieben. Für den (zugegebenermaßen
unwahrscheinlichen) Fall, dass Ihnen ein @code{pulseaudio}-Paket fehlt,
möchten Sie es vielleicht durch den oben genannten @code{alsa-service-type}
aktivieren.
@end quotation
@end deffn

@deftp {Datentyp} pulseaudio-configuration
Repräsentiert die Konfiguration für den Dienst @code{pulseaudio-service}.

@table @asis
@item @var{client-conf} (Vorgabe: @code{'()})
Eine Liste der Einstellungen, die in @file{client.conf} vorgenommen
werden. Hierfür wird eine Liste von entweder Zeichenketten oder
Symbol-Wert-Paaren akzeptiert. Eine Zeichenkette wird so, wie sie ist,
eingefügt, mit einem Zeilenumbruch danach. Ein Paar wird als „Schlüssel =
Wert“ formatiert, auch hier gefolgt von einem Zeilenumbruch.

@item @var{daemon-conf} (Vorgabe: @code{'((flat-volumes . no))})
Eine Liste der Einstellungen, die in @file{daemon.conf} vorgenommen werden,
im gleichen Format wie @var{client-conf}.

@item @var{script-file} (Vorgabe: @code{(file-append pulseaudio "/etc/pulse/default.pa")})
Welche Skriptdatei als @file{default.pa} verwendet werden soll.

@item @var{system-script-file} (Vorgabe: @code{(file-append pulseaudio "/etc/pulse/system.pa")})
Welche Skriptdatei als @file{system.pa} verwendet werden soll.
@end table
@end deftp

@deffn {Scheme-Variable} ladspa-service-type
Der Diensttyp für den Dienst, der die @var{LADSPA_PATH}-Variable festlegt,
damit sie beachtende Programme, z.B.@: PulseAudio, LADSPA-Plugins laden
können.

Das folgende Beispiel wird den Dienst so einrichten, dass Module aus dem
@code{swh-plugins}-Paket aktiviert werden:

@lisp
(service ladspa-service-type
         (ladspa-configuration (plugins (list swh-plugins))))
@end lisp

Siehe @uref{http://plugin.org.uk/ladspa-swh/docs/ladspa-swh.html} für die
Details.

@end deffn

@node Datenbankdienste
@subsection Datenbankdienste

@cindex Datenbank
@cindex SQL
Das Modul @code{(gnu services databases)} stellt die folgenden Dienste zur
Verfügung.

@deffn {Scheme-Prozedur} postgresql-service [#:postgresql postgresql] @
       [#:config-file] [#:data-directory "/var/lib/postgresql/data"] @ [#:port
5432] [#:locale "en_US.utf8"] [#:extension-packages '()] Liefert einen
Dienst, der @var{postgresql}, den PostgreSQL-Datenbankserver, ausführt.

Der PostgreSQL-Daemon lädt seine Laufzeitkonfiguration aus der bei
@var{config-file} angegebenen Konfigurationsdatei, erzeugt einen
Datenbankverbund mit der angegebenen @var{locale} als voreingestellte
Locale, gespeichert im bei @var{data-directory} angegebenen Verzeichnis. Er
lauscht dann auf dem @var{port}.

@cindex PostgreSQL-Erweiterungspakete
Zusätzliche Erweiterungen werden aus den unter @var{extension-packages}
aufgeführten Paketen geladen. Erweiterungen sind zur Laufzeit verfügbar. Zum
Beispiel kann ein Nutzer den postgresql-service-Dienst wie in diesem
Beispiel konfigurieren, um eine geografische Datenbank mit Hilfe der
@code{postgis}-Erweiterung zu erzeugen:

@cindex postgis
@lisp
(use-package-modules databases geo)

(operating-system
  …
  ;; postgresql wird benötigt, um „psql“ auszuführen, aber postgis ist
  ;; für den Betrieb nicht unbedingt notwendig.
  (packages (cons* postgresql %base-packages))
  (services
    (cons*
      (postgresql-service #:extension-packages (list postgis))
      %base-services)))
@end lisp

Dann wird die Erweiterung sichtbar und Sie können eine leere geografische
Datenbak auf diese Weise initialisieren:

@example
psql -U postgres
> create database postgistest;
> \connect postgistest;
> create extension postgis;
> create extension postgis_topology;
@end example

Es ist nicht notwendig, dieses Feld für contrib-Erweiterungen wie hstore
oder dblink hinzuzufügen, weil sie bereits durch postgresql geladen werden
können. Dieses Feld wird nur benötigt, um Erweiterungen hinzuzufügen, die
von anderen Paketen zur Verfügung gestellt werden.
@end deffn

@deffn {Scheme-Prozedur} mysql-service [#:config (mysql-configuration)]
Liefert einen Dienst, der @command{mysqld}, den Datenbankserver von MySQL
oder MariaDB, ausführt.

Als optionales @var{config}-Argument wird die Konfiguration für
@command{mysqld} angegeben, die ein @code{<mysql-configuration>}-Objekt sein
sollte.
@end deffn

@deftp {Datentyp} mysql-configuration
Der Datentyp, der die Konfiguration des @var{mysql-service} repräsentiert.

@table @asis
@item @code{mysql} (Vorgabe: @var{mariadb})
Das Paketobjekt des MySQL-Datenbankservers; es kann entweder @var{mariadb}
oder @var{mysql} sein.

Für MySQL wird bei der Aktivierung des Dienstes ein temporäres
Administratorpasswort („root“-Passwort) angezeigt. Für MariaDB ist das
„root“-Passwort leer.

@item @code{port} (Vorgabe: @code{3306})
Der TCP-Port, auf dem der Datenbankserver auf eingehende Verbindungen
lauscht.
@end table
@end deftp

@defvr {Scheme-Variable} memcached-service-type
Dies ist der Diensttyp für den @uref{https://memcached.org/,
Memcached-Dienst}, der einen verteilten Zwischenspeicher im Arbeitsspeicher
(einen „In-Memory-Cache“) zur Verfügung stellt. Der Wert dieses Dienstes ist
ein @code{memcached-configuration}-Objekt.
@end defvr

@lisp
(service memcached-service-type)
@end lisp

@deftp {Datentyp} memcached-configuration
Der Datentyp, der die Konfiguration von memcached repräsentiert.

@table @asis
@item @code{memcached} (Vorgabe: @code{memcached})
Das Memcached-Paket, das benutzt werden soll.

@item @code{interfaces} (Vorgabe: @code{'("0.0.0.0")})
Auf welchen Netzwerkschnittstellen gelauscht werden soll.

@item @code{tcp-port} (Vorgabe: @code{11211})
Der Port, auf dem Verbindungen akzeptiert werden.

@item @code{udp-port} (Vorgabe: @code{11211})
Der Port, auf dem UDP-Verbindungen akzeptiert werden. Ist der Wert 0, wird
@emph{nicht} auf einem UDP-Socket gelauscht.

@item @code{additional-options} (Vorgabe: @code{'()})
Zusätzliche Befehlszeilenoptionen, die an @code{memcached} übergeben werden.
@end table
@end deftp

@defvr {Scheme-Variable} mongodb-service-type
Dies ist der Diensttyp für @uref{https://www.mongodb.com/, MongoDB}. Der
Wert dieses Diensttyps ist ein @code{mongodb-configuration}-Objekt.
@end defvr

@lisp
(service mongodb-service-type)
@end lisp

@deftp {Datentyp} mongodb-configuration
Der Datentyp, der die Konfiguration von mongodb repräsentiert.

@table @asis
@item @code{mongodb} (Vorgabe: @code{mongodb})
Das zu benutzende MongoDB-Paket.

@item @code{config-file} (Vorgabe: @code{%default-mongodb-configuration-file})
Die Konfigurationsdatei für MongoDB.

@item @code{data-directory} (Vorgabe: @code{"/var/lib/mongodb"})
Dieser Wert wird benutzt, um das Verzeichnis so zu erstellen, dass es
existiert und zum Benutzer mongodb gehört. Es sollte mit dem Verzeichnis
übereinstimmen, das in der Konfigurationsdatei von MongoDB als
„data-directory“ angegeben wird.
@end table
@end deftp

@defvr {Scheme-Variable} redis-service-type
Dies ist der Diensttyp für den Schlüssel-/Wert-Speicher
@uref{https://redis.io/, Redis}, dessen Wert ein
@code{redis-configuration}-Objekt ist.
@end defvr

@deftp {Datentyp} redis-configuration
Der Datentyp, der die Konfiguration von redis repräsentiert.

@table @asis
@item @code{redis} (Vorgabe: @code{redis})
Das zu benutzende Redis-Paket.

@item @code{bind} (Vorgabe: @code{"127.0.0.1"})
Die Netzwerkschnittstelle, auf der gelauscht wird.

@item @code{port} (Vorgabe: @code{6379})
Der Port, auf dem Verbindungen akzeptiert werden. Ist der Wert 0, wird das
Lauschen auf einem TCP-Socket deaktiviert.

@item @code{working-directory} (Vorgabe: @code{"/var/lib/redis"})
Das Verzeichnis, in dem die Datenbank und damit zu tun habende Dateien
gespeichert werden.
@end table
@end deftp

@node Mail-Dienste
@subsection Mail-Dienste

@cindex Mail
@cindex email
Das Modul @code{(gnu services mail)} stellt Guix-Dienstdefinitionen für
E-Mail-Dienste zur Verfügung: IMAP-, POP3- und LMTP-Server sowie Mail
Transport Agents (MTAs). Jede Menge Akronyme! Auf diese Dienste wird in den
folgenden Unterabschnitten im Detail eingegangen.

@subsubheading Dovecot-Dienst

@deffn {Scheme-Prozedur} dovecot-service [#:config (dovecot-configuration)]
Liefert einen Dienst, der den IMAP-/POP3-/LMTP-Mailserver Dovecot ausführt.
@end deffn

Normalerweise muss für Dovecot nicht viel eingestellt werden; das
vorgegebene Konfigurationsobjekt, das mit @code{(dovecot-configuration)}
erzeugt wird, wird genügen, wenn Ihre Mails in @code{~/Maildir} gespeichert
werden. Ein selbstsigniertes Zertifikat wird für durch TLS geschützte
Verbindungen generiert, aber Dovecot lauscht nach Vorgabe auch auf
unverschlüsselten Ports. Es gibt jedoch eine Reihe von Optionen, die
Mail-Administratoren unter Umständen ändern müssen, was Guix — wie auch bei
anderen Diensten — mit einer einheitlichen Scheme-Schnittstelle möglich
macht.

Um zum Beispiel anzugeben, dass sich Mails in @code{maildir~/.mail}
befinden, würde man den Dovecot-Dienst wie folgt instanziieren:

@lisp
(dovecot-service #:config
                 (dovecot-configuration
                  (mail-location "maildir:~/.mail")))
@end lisp

Im Folgenden sehen Sie die verfügbaren Konfigurationsparameter. Jeder
Parameterdefinition ist ihr Typ vorangestellt; zum Beispiel bedeutet
@samp{Zeichenketten-Liste foo}, dass der Parameter @code{foo} als eine Liste
von Zeichenketten angegeben werden sollte. Es ist auch möglich, die
Konfiguration als Zeichenkette anzugeben, wenn Sie eine alte
@code{dovecot.conf}-Datei haben, die Sie von einem anderen System übernehmen
möchten; am Ende finden Sie mehr Details dazu.

@c The following documentation was initially generated by
@c (generate-documentation) in (gnu services mail).  Manually maintained
@c documentation is better, so we shouldn't hesitate to edit below as
@c needed.  However if the change you want to make to this documentation
@c can be done in an automated way, it's probably easier to change
@c (generate-documentation) than to make it below and have to deal with
@c the churn as dovecot updates.

Verfügbare @code{dovecot-configuration}-Felder sind:

@deftypevr {@code{dovecot-configuration}-Parameter} „package“ dovecot
Das Dovecot-Paket.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Kommagetrennte-Zeichenketten-Liste listen
Eine Liste der IPs oder der Rechnernamen („Hosts“), auf denen auf
Verbindungen gelauscht wird. @samp{*} bedeutet, auf allen
IPv4-Schnittstellen zu lauschen; @samp{::} lässt auf allen
IPv6-Schnittstellen lauschen. Wenn Sie nicht der Vorgabe entsprechende Ports
oder komplexere Einstellungen festlegen möchten, sollten Sie die Adress- und
Portfelder des @samp{inet-listener} beim jeweiligen Dienst anpassen, für den
Sie sich interessieren.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} „protocol-configuration“-Liste protocols
Die Liste der Protokolle, die angeboten werden sollen. Zu den verfügbaren
Protokollen gehören @samp{imap}, @samp{pop3} und @samp{lmtp}.

Verfügbare @code{protocol-configuration}-Felder sind:

@deftypevr {@code{protocol-configuration}-Parameter} Zeichenkette name
Der Name des Protokolls.
@end deftypevr

@deftypevr {@code{protocol-configuration}-Parameter} Zeichenkette auth-socket-path
Der Pfad des UNIX-Sockets zum Hauptauthentifizierungsserver, um Benutzer zu
finden. Er wird von imap (für geteilte Benutzer) und lda benutzt. Die
Vorgabe ist @samp{"/var/run/dovecot/auth-userdb"}.
@end deftypevr

@deftypevr {@code{protocol-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste mail-plugins
Leerzeichengetrennte Liste der zu ladenden Plugins.
@end deftypevr

@deftypevr {@code{protocol-configuration}-Parameter} Nichtnegative-ganze-Zahl mail-max-userip-connections
Die Maximalzahl der IMAP-Verbindungen, die jeder Nutzer von derselben
IP-Adresse aus benutzen kann. @emph{Anmerkung}: Beim Vergleichen des
Benutzernamens wird Groß- und Kleinschreibung unterschieden. Die Vorgabe ist
@samp{10}.
@end deftypevr

@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} „service-configuration“-Liste services
Die Liste der zu aktivierenden Dienste. Zu den verfügbaren Diensten gehören
@samp{imap}, @samp{imap-login}, @samp{pop3}, @samp{pop3-login}, @samp{auth}
und @samp{lmtp}.

Verfügbare @code{service-configuration}-Felder sind:

@deftypevr {@code{service-configuration}-Parameter} Zeichenkette kind
Die Dienstart (englisch „kind“). Zu den gültigen Werten gehören
@code{director}, @code{imap-login}, @code{pop3-login}, @code{lmtp},
@code{imap}, @code{pop3}, @code{auth}, @code{auth-worker}, @code{dict},
@code{tcpwrap}, @code{quota-warning} oder alles andere.
@end deftypevr

@deftypevr {@code{service-configuration}-Parameter} „listener-configuration“-Liste listeners
„Listener“ für den Dienst, also Lauscher auf neue Verbindungen. Als Listener
kann entweder eine @code{unix-listener-configuration}, eine
@code{fifo-listener-configuration} oder eine
@code{inet-listener-configuration} angegeben werden. Die Vorgabe ist
@samp{()}.

Verfügbare @code{unix-listener-configuration}-Felder sind:

@deftypevr {@code{unix-listener-configuration}-Parameter} Zeichenkette path
Der Pfad zur Datei, relativ zum Feld @code{base-dir}. Er wird auch als der
Abschnittsname verwendet.
@end deftypevr

@deftypevr {@code{unix-listener-configuration}-Parameter} Zeichenkette mode
Der Zugriffsmodus des Sockets. Die Vorgabe ist @samp{"0600"}.
@end deftypevr

@deftypevr {@code{unix-listener-configuration}-Parameter} Zeichenkette user
Der Benutzer, dem der Socket gehört. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{unix-listener-configuration}-Parameter} Zeichenkette group
Die Gruppe, der der Socket gehört. Die Vorgabe ist @samp{""}.
@end deftypevr


Verfügbare @code{fifo-listener-configuration}-Felder sind:

@deftypevr {@code{fifo-listener-configuration}-Parameter} Zeichenkette path
Der Pfad zur Datei, relativ zum Feld @code{base-dir}. Er wird auch als der
Abschnittsname verwendet.
@end deftypevr

@deftypevr {@code{fifo-listener-configuration}-Parameter} Zeichenkette mode
Der Zugriffsmodus des Sockets. Die Vorgabe ist @samp{"0600"}.
@end deftypevr

@deftypevr {@code{fifo-listener-configuration}-Parameter} Zeichenkette user
Der Benutzer, dem der Socket gehört. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{fifo-listener-configuration}-Parameter} Zeichenkette group
Die Gruppe, der der Socket gehört. Die Vorgabe ist @samp{""}.
@end deftypevr


Verfügbare @code{inet-listener-configuration}-Felder sind:

@deftypevr {@code{inet-listener-configuration}-Parameter} Zeichenkette protocol
Das Protokoll, auf das gelauscht wird.
@end deftypevr

@deftypevr {@code{inet-listener-configuration}-Parameter} Zeichenkette address
Die Adresse, auf der gelauscht wird. Bleibt das Feld leer, wird auf allen
Adressen gelauscht. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{inet-listener-configuration}-Parameter} Nichtnegative-ganze-Zahl port
Der Port, auf dem gelauscht werden soll.
@end deftypevr

@deftypevr {@code{inet-listener-configuration}-Parameter} Boolescher-Ausdruck ssl?
Ob für diesen Dienst SSL benutzt werden kann: @samp{yes} für ja, @samp{no}
für nein oder @samp{required} für „verpflichtend“. Die Vorgabe ist
@samp{#t}.
@end deftypevr

@end deftypevr

@deftypevr {@code{service-configuration}-Parameter} Nichtnegative-ganze-Zahl client-limit
Die maximale Anzahl gleichzeitiger Verbindungen mit Clients pro
Prozess. Sobald diese Anzahl von Verbindungen eingegangen ist, bewirkt das
Eingehen der nächsten Verbindung, dass Dovecot einen weiteren Prozess
startet. Ist sie auf 0 gesetzt, benutzt Dovecot stattdessen
@code{default-client-limit}.

Die Vorgabe ist @samp{0}.

@end deftypevr

@deftypevr {@code{service-configuration}-Parameter} Nichtnegative-ganze-Zahl service-count
Die Anzahl Verbindungen, die behandelt werden, bevor ein neuer Prozess
gestartet wird. Typischerweise sind die einzig sinnvollen Werte 0
(unbeschränkt) oder 1. 1 ist sicherer, aber 0 ist schneller. Siehe
<doc/wiki/LoginProcess.txt>. Die Vorgabe ist @samp{1}.

@end deftypevr

@deftypevr {@code{service-configuration}-Parameter} Nichtnegative-ganze-Zahl process-limit
Die maximale Anzahl von Prozessen, die für diesen Dienst existieren
können. Wenn sie auf 0 gesetzt ist, benutzt Dovecot stattdessen
@code{default-process-limit}.

Die Vorgabe ist @samp{0}.

@end deftypevr

@deftypevr {@code{service-configuration}-Parameter} Nichtnegative-ganze-Zahl process-min-avail
Die Anzahl der Prozesse, mit denen immer auf neue Verbindungen gewartet
wird. Die Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{service-configuration}-Parameter} Nichtnegative-ganze-Zahl vsz-limit
Wenn Sie @samp{service-count 0} festlegen, müssen Sie hierfür wahrscheinlich
eine größere Zahl wählen. Die Vorgabe ist @samp{256000000}.
@end deftypevr

@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} dict-configuration dict
Die Wörterbuchkonfiguration, wie sie der
@code{dict-configuration}-Konstruktor erzeugt.

Verfügbare @code{dict-configuration}-Felder sind:

@deftypevr {@code{dict-configuration}-Parameter} Formlose-Felder entries
Eine Liste von Schlüssel-Wert-Paaren, die in diesem Wörterbuch enthalten
sein sollen. Die Vorgabe ist @samp{()}.
@end deftypevr

@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} „passdb-configuration“-Liste passdbs
Eine Liste von Passwortdatenbankkonfigurationen, die jeweils mit dem
@code{passdb-configuration}-Konstruktor erzeugt werden.

Verfügbare @code{passdb-configuration}-Felder sind:

@deftypevr {@code{passdb-configuration}-Parameter} Zeichenkette driver
Der Treiber, den die Passwortdatenbank benutzen soll. Zu den gültigen Werten
gehören @samp{pam}, @samp{passwd}, @samp{shadow}, @samp{bsdauth} und
@samp{static}. Die Vorgabe ist @samp{"pam"}.
@end deftypevr

@deftypevr {@code{passdb-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste args
Leerzeichengetrennte Liste der Argumente an den
Passwortdatenbanktreiber. Die Vorgabe ist @samp{""}.
@end deftypevr

@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} „userdb-configuration“-Liste userdbs
Liste der Benutzerdatenbankkonfigurationen, die jeweils mit dem
@code{userdb-configuration}-Konstruktor erzeugt werden.

Verfügbare @code{userdb-configuration}-Felder sind:

@deftypevr {@code{userdb-configuration}-Parameter} Zeichenkette driver
Der Treiber, den die Benutzerdatenbank benutzen soll. Zu den gültigen Werten
gehören @samp{passwd} und @samp{static}. Die Vorgabe ist @samp{"passwd"}.
@end deftypevr

@deftypevr {@code{userdb-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste args
Leerzeichengetrennte Liste der Argumente an den
Benutzerdatenbanktreiber. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{userdb-configuration}-Parameter} Formlose-Argumente override-fields
Einträge, die Vorrang vor den Feldern aus passwd haben. Die Vorgabe ist
@samp{()}.
@end deftypevr

@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} „plugin-configuration“ plugin-configuration
Die Plugin-Konfiguration, die vom @code{plugin-configuration}-Konstruktor
erzeugt wird.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} „namespace-configuration“-Liste namespaces
Liste der Namensräume. Jedes Objekt in der Liste wird durch den
@code{namespace-configuration}-Konstruktor erzeugt.

Verfügbare @code{namespace-configuration}-Felder sind:

@deftypevr {@code{namespace-configuration}-Parameter} Zeichenkette name
Der Name dieses Namensraums.
@end deftypevr

@deftypevr {@code{namespace-configuration}-Parameter} Zeichenkette type
Namensraum-Typ: @samp{private}, @samp{shared} oder @samp{public}. Die
Vorgabe ist @samp{"private"}.
@end deftypevr

@deftypevr {@code{namespace-configuration}-Parameter} Zeichenkette separator
Welche Trennzeichen in der Hierarchie von Namensräumen benutzt werden
sollen. Sie sollten denselben Trenner für alle Namensräume benutzen, sonst
führt es zu Verwirrung bei manchen Clients. Meistens ist @samp{/} eine gute
Wahl, die Voreinstellung ist allerdings abhängig vom darunterliegenden
Mail-Speicher-Format. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{namespace-configuration}-Parameter} Zeichenkette prefix
Das Präfix, das für Zugang auf diesen Namensraum angegeben werden muss. Es
muss für jeden Namensraum ein anderes gewählt werden. Ein Beispiel ist
@samp{Public/}. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{namespace-configuration}-Parameter} Zeichenkette location
Der physische Ort, an dem sich dieses Postfach („Mailbox“) befindet. Das
Format ist dasselbe wie beim Mail-Ort („mail location“), der auch als
Voreinstellung hierfür benutzt wird. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{namespace-configuration}-Parameter} Boolescher-Ausdruck inbox?
Es kann nur eine INBOX geben; hiermit wird festgelegt, zu welchem Namensraum
sie gehört. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{namespace-configuration}-Parameter} Boolescher-Ausdruck hidden?
Wenn der Namensraum versteckt ist, wird er Clients gegenüber @emph{nicht}
über die NAMESPACE-Erweiterung mitgeteilt. Wahrscheinlich möchten Sie auch
@samp{list? #f} festlegen. Das ist in erster Linie dann nützlich, wenn Sie
von einem anderen Server mit anderen Namensräumen umziehen, die Sie ersetzen
möchten, die aber trotzdem noch weiterhin funktionieren sollen. Zum Beispiel
können Sie versteckte Namensräume mit Präfixen @samp{~/mail/},
@samp{~%u/mail/} und @samp{mail/} anlegen. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{namespace-configuration}-Parameter} Boolescher-Ausdruck list?
Ob die Postfächer („Mailboxes“) unter diesem Namensraum mit dem LIST-Befehl
angezeigt werden können. Dadurch wird der Namensraum für Clients sichtbar,
die die NAMESPACE-Erweiterung nicht unterstützen. Mit dem besonderen Wert
@code{children} werden auch Kind-Postfächer aufgelistet, aber das
Namensraumpräfix verborgen. Die Vorgabe ist @samp{#t}.
@end deftypevr

@deftypevr {@code{namespace-configuration}-Parameter} Boolescher-Ausdruck subscriptions?
Die Abonnements werden im Namensraum selbst behandelt. Wenn es auf @code{#f}
gesetzt ist, werden sie im Elternnamensraum behandelt. Das leere Präfix
sollte hier immer @code{#t} haben. Die Vorgabe ist @samp{#t}.
@end deftypevr

@deftypevr {@code{namespace-configuration}-Parameter} „mailbox-configuration“-Liste mailboxes
Die Liste der in diesem Namensraum vordefinierten Postfächer. Die Vorgabe
ist @samp{()}.

Verfügbare @code{mailbox-configuration}-Felder sind:

@deftypevr {@code{mailbox-configuration}-Parameter} Zeichenkette name
Der Name dieses Postfachs (dieser „Mailbox“).
@end deftypevr

@deftypevr {@code{mailbox-configuration}-Parameter} Zeichenkette auto
Bei @samp{create} wird dieses Postfach automatisch erzeugt. Bei
@samp{subscribe} wird dieses Postfach sowohl automatisch erzeugt als auch
automatisch abonniert. Die Vorgabe ist @samp{"no"}.
@end deftypevr

@deftypevr {@code{mailbox-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste special-use
Liste der @code{SPECIAL-USE}-Attribute von IMAP, wie sie im RFC 6154
festgelegt wurden. Gültige Werte sind @code{\All}, @code{\Archive},
@code{\Drafts}, @code{\Flagged}, @code{\Junk}, @code{\Sent} und
@code{\Trash}. Die Vorgabe ist @samp{()}.
@end deftypevr

@end deftypevr

@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Dateiname base-dir
Das Basisverzeichnis, in dem Laufzeitdaten gespeichert werden. Die Vorgabe
ist @samp{"/var/run/dovecot/"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette login-greeting
Begrüßungsnachricht für Clients. Die Vorgabe ist @samp{"Dovecot ready."}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste login-trusted-networks
Die Liste der Netzwerkbereiche, denen vertraut wird. Für Verbindungen von
diesen IP-Adressen können abweichende IP-Adressen und Ports angegeben werden
(zur Protokollierung und zur
Authentifizierung). @samp{disable-plaintext-auth} wird für diese Netzwerke
außerdem ignoriert. Normalerweise würden Sie hier Ihre IMAP-Proxy-Server
eintragen. Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste login-access-sockets
Die Liste der Sockets zur Zugriffsprüfung beim Anmelden (z.B.@:
tcpwrap). Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck verbose-proctitle?
Ausführlichere Prozessnamen anzeigen (mit „ps“). Nach Voreinstellung werden
Benutzername und IP-Adresse angezeigt. Die Einstellung ist nützlich, wenn
man sehen können will, wer tatsächlich IMAP-Prozesse benutzt (z.B.@:
gemeinsam genutzte Postfächer oder wenn derselbe Benutzeridentifikator/„UID“
für mehrere Konten benutzt wird). Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck shutdown-clients?
Ob alle Prozesse abgewürgt werden sollen, wenn der Haupt-Dovecot-Prozess
terminiert. Ist dies auf @code{#f} gesetzt, kann Dovecot aktualisiert
werden, ohne dass bestehende Client-Verbindungen zwangsweise geschlossen
werden (jedoch kann das problematisch sein, wenn die Aktualisierung z.B.@:
eine Sicherheitslücke schließen soll). Die Vorgabe ist @samp{#t}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl doveadm-worker-count
Ist dies @emph{nicht} null, werden Mail-Befehle über die angegebene Anzahl
von Verbindungen an den doveadm-Server geschickt, statt sie direkt im selben
Prozess auszuführen. Die Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette doveadm-socket-path
Der UNIX-Socket oder das „Host:Port“-Paar, mit dem Verbindungen zum
doveadm-Server hergestellt werden. Die Vorgabe ist @samp{"doveadm-server"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste import-environment
Die Liste der Umgebungsvariablen, die beim Starten von Dovecot erhalten
bleiben und allen Kindprozessen davon mitgegeben werden. Sie können auch
„Schlüssel=Wert“-Paare angeben, um wie immer bestimmte Zuweisungen
festzulegen.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck disable-plaintext-auth?
Deaktiviert den LOGIN-Befehl und alle anderen
Klartext-Authentisierungsverfahren, solange kein SSL/TLS benutzt wird (die
LOGINDISABLED-Capability). Beachten Sie, dass, wenn die entfernte IP-Adresse
mit der lokalen IP-Adresse identisch ist (Sie sich also vom selben Rechner
aus verbinden), die Verbindung als sicher aufgefasst und
Klartext-Authentisierung möglich ist. Siehe auch die
„ssl=required“-Einstellung. Die Vorgabe ist @samp{#t}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl auth-cache-size
Die Größe des Zwischenspeichers für Authentifizierungen (z.B.@:
@samp{#e10e6}). Bei 0 ist er deaktiviert. Beachten Sie, dass für bsdauth,
PAM und vpopmail die Einstellung @samp{cache-key} festgelegt sein muss,
damit ein Zwischenspeicher benutzt wird. Die Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette auth-cache-ttl
Wie lange Daten im Zwischenspeicher gültig bleiben („Time to live“). Nachdem
die TTL ausläuft, wird der zwischengespeicherte Eintrag nicht mehr benutzt,
@emph{außer} wenn eine Auflösung über die Hauptdatenbank zu einem internen
Fehler führt. Dovecot versucht zudem, Passwortänderungen automatisch zu
behandeln: Wenn die letzte Authentisierung erfolgreich war, diese jetzt aber
nicht, wird der Zwischenspeicher @emph{nicht} benutzt. Derzeit funktioniert
dies nur bei Klartext-Authentisierung. Die Vorgabe ist @samp{"1 hour"} für 1
Stunde.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette auth-cache-negative-ttl
TTL beim Zwischenspeichern negativer Ergebnisse („negative Hits“, z.B.@:
wenn der Benutzer nicht gefunden wurde oder das Passwort nicht stimmt). 0
deaktiviert das Zwischenspeichern davon vollständig. Die Vorgabe ist
@samp{"1 hour"} für 1 Stunde.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste auth-realms
Die Liste der Administrationsbereiche („Realms“) für
SASL-Authentisierungsmechanismen, die solche benötigen. Sie können dieses
Feld leer lassen, wenn Sie @emph{keine} Unterstützung für mehrere
Administrationsbereiche wollen. Viele Clients benutzen den ersten hier
aufgelisteten Administrationsbereich, also sollte der als Voreinstellung
gewünschte Bereich vorne stehen. Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette auth-default-realm
Der voreingestellte Administrationsbereich bzw.@: die Domain, falls keiner
angegeben wurde. Dies wird sowohl für SASL-Administrationsbereiche als auch
zum Anhängen von @@domain an den Benutzernamen bei Klartextanmeldungen
benutzt. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette auth-username-chars
Die Liste der in Benutzernamen zulässigen Zeichen. Wenn der vom Benutzer
angegebene Benutzername ein hier nicht aufgelistetes Zeichen enthält, wird
die Authentisierung automatisch abgelehnt. Dies dient bloß als eine weitere
Überprüfung, um zu gewährleisten, dass mögliche Schwachstellen bei der
Maskierung von Anführungszeichen in SQL-/LDAP-Datenbanken nicht ausgenutzt
werden können. Wenn Sie alle Zeichen zulassen möchten, setzen Sie dieses
Feld auf eine leere Zeichenkette. Die Vorgabe ist
@samp{"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890.-_@@"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette auth-username-translation
Wie Zeichen in Benutzernamen ersetzt werden sollen, bevor der Name mit
Datenbanken aufgelöst wird. Der Wert besteht aus einer Reihe von Angaben,
welches Zeichen durch welches zu ersetzen ist. Zum Beispiel werden für
@samp{#@@/@@} die Zeichen @samp{#} und @samp{/} beide durch @samp{@@}
ersetzt. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette auth-username-format
Formatierungsanweisungen, die auf jeden Benutzernamen angewandt werden,
bevor er mit einer Datenbank aufgelöst wird. Sie können hierzu die
Standardvariablen verwenden, z.B.@: würde %Lu den Benutzernamen in
Kleinbuchstaben umschreiben („lowercase“), %n würde den Domainnamen
weglassen, wenn einer angegeben wurde, und @samp{%n-AT-%d} würde alle
@samp{@@} durch @samp{-AT-} ersetzen. Diese Übersetzung wird durchgeführt,
nachdem die Änderungen aus @samp{auth-username-translation} angewandt
wurden. Die Vorgabe ist @samp{"%Lu"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette auth-master-user-separator
Wenn Sie es für „Master“-Benutzer erlauben möchten, sich durch Angeben des
Master-Benutzernamens als Teil einer normalen Benutzernamens-Zeichenkette
als jemand anders anzumelden (also ohne Verwendung der Unterstützung davon
durch den SASL-Mechanismus), können Sie hier die Trennzeichen dazwischen
angeben. Das Format ist dann
<Benutzername><Trenner><Master-Benutzername>. UW-IMAP benutzt @samp{*} als
Trennzeichen, also könnte das eine gute Wahl sein. Die Vorgabe ist
@samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette auth-anonymous-username
Der Benutzername, der verwendet wird, wenn sich Benutzer mit dem
SASL-Mechanismus „ANONYMOUS“ anmelden. Die Vorgabe ist @samp{"anonymous"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl auth-worker-max-count
Die maximale Anzahl von dovecot-auth-Arbeiterprozessen. Diese werden
benutzt, um blockierende Anfragen an die Passwortdatenbank („passdb“) und an
die Benutzerdatenbank („userdb“) zu stellen (z.B.@: MySQL und PAM). Sie
werden automatisch erzeugt und gelöscht, je nachdem, wann sie gebraucht
werden. Die Vorgabe ist @samp{30}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette auth-gssapi-hostname
Der Rechnername, der in GSSAPI-Prinzipalnamen benutzt wird. Nach
Voreinstellung wird der durch gethostname() zurückgelieferte Name
verwendet. Benutzen Sie @samp{$ALL} (mit Anführungszeichen), damit alle
Einträge in der Schlüsseltabelle („Keytab“) akzeptiert werden. Die Vorgabe
ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette auth-krb5-keytab
Kerberos-Schlüsseltabelle („Keytab“), die für den GSSAPI-Mechanismus benutzt
werden soll. Wenn sie nicht angegeben wird, wird die Voreinstellung des
Systems benutzt (in der Regel @file{/etc/krb5.keytab}). Eventuell müssen Sie
den Auth-Dienst als Administratornutzer „root“ ausführen lassen, um
Lesezugriffe auf diese Datei zu ermöglichen. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck auth-use-winbind?
NTLM-Authentifizierung und GSS-SPNEGO-Authentifizierung mit dem
winbind-Daemon und dem @samp{ntlm-auth}-Hilfsprogramm von Samba
durchführen. Siehe <doc/wiki/Authentication/Mechanisms/Winbind.txt>. Die
Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Dateiname auth-winbind-helper-path
Der Pfad zur Binärdatei @samp{ntlm-auth} von Samba. Die Vorgabe ist
@samp{"/usr/bin/ntlm_auth"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette auth-failure-delay
Die Zeit, wie lange vor der Antwort auf eine fehlgeschlagene Authentisierung
gewartet wird. Die Vorgabe ist @samp{"2 secs"} für 2 Sekunden.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck auth-ssl-require-client-cert?
Es wird ein gültiges SSL-Client-Zertifikat verlangt, andernfalls schlägt die
Authentisierung fehl. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck auth-ssl-username-from-cert?
Ob der Benutzername aus dem SSL-Zertifikat des Clients ausgelesen werden
soll, indem @code{X509_NAME_get_text_by_NID()} benutzt wird, um den
Distinguished Name („DN“) als Gebräuchlicher Name („CommonName“) des
Zertifikatinhabers („Subject“) auszulesen. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste auth-mechanisms
Die Liste der erwünschten Authentisierungsmechanismen. Unterstützte
Mechanismen sind: @samp{plain}, @samp{login}, @samp{digest-md5},
@samp{cram-md5}, @samp{ntlm}, @samp{rpa}, @samp{apop}, @samp{anonymous},
@samp{gssapi}, @samp{otp}, @samp{skey} und
@samp{gss-spnego}. @emph{Anmerkung}: Siehe auch die Einstellung zu
@samp{disable-plaintext-auth}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste director-servers
Die Liste der IP-Adressen oder Rechnernamen („Hostnames“) für alle
Direktorserver, einschließlich dieses Servers selbst. Ports können wie in
„IP:Port“ angegeben werden. Der voreingestellte Port ist derselbe wie der,
der beim @samp{inet-listener} des Direktordienstes benutzt wird. Die Vorgabe
ist @samp{()}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste director-mail-servers
Die Liste der IP-Adressen oder Rechnernamen („Hostnames“), um alle
Hintergrund-Mailserver zu erreichen. Auch Bereiche können angegeben werden,
wie 10.0.0.10-10.0.0.30. Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette director-user-expire
Wie lange Benutzer zum selben Server weitergeleitet werden, sobald dieser
keine Verbindungen mehr hat. Die Vorgabe ist @samp{"15 min"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette director-username-hash
Wie der Benutzername umgeschrieben wird, bevor er gehasht wird. Zu den
sinnvollen Werten gehören %Ln, wenn der Nutzer sich mit oder ohne @@domain
anmelden kann, oder %Ld, wenn Postfächer innerhalb der Domain gemeinsam
genutzt werden. Die Vorgabe ist @samp{"%Lu"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette log-path
Die Protokolldatei, die für Fehlermeldungen benutzt werden soll. Bei
@samp{syslog} wird das Protokoll an syslog geschrieben, bei
@samp{/dev/stderr} an die Standardfehlerausgabe. Die Vorgabe ist
@samp{"syslog"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette info-log-path
Die Protokolldatei, die für Informationsmeldungen benutzt werden soll. Die
Voreinstellung ist @samp{log-path}. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette debug-log-path
Die Protokolldatei, die für Meldungen zur Fehlersuche benutzt werden
soll. Die Voreinstellung ist @samp{info-log-path}. Die Vorgabe ist
@samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette syslog-facility
Als welche Syslog-Einrichtung Protokolle an Syslog übermittelt werden
sollen. Falls Sie @samp{mail} hierbei @emph{nicht} benutzen wollen, eignen
sich normalerweise local0–local7. Andere Standardeinrichtungen werden auch
unterstützt. Die Vorgabe ist @samp{"mail"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck auth-verbose?
Ob gescheiterte Anmeldeversuche und die Gründe, warum diese nicht
erfolgreich waren, protokolliert werden sollen. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette auth-verbose-passwords
Ob bei falschen Passwörtern das versuchte falsche Passwort ins Protokoll
geschrieben werden soll. Gültige Werte sind "no" („nein“), "plain" (als
Klartext) und "sha1". Den SHA1-Hash zu speichern kann nützlich sein, um zu
erkennen, wenn jemand versucht, sehr viele Passwörter durchzuprobieren (ein
„Brute-Force“-Angriff) oder ob Benutzer einfach nur dasselbe Passwort immer
wieder probieren. Sie können auch nur die ersten n Zeichen des Wertes
protokollieren, indem Sie ":n" anhängen (z.B.@: sha1:6). Die Vorgabe ist
@samp{"no"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck auth-debug?
Ob zur Fehlersuche noch ausführlichere Protokolle geschrieben werden
sollen. Zum Beispiel werden SQL-Anfragen protokolliert. Die Vorgabe ist
@samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck auth-debug-passwords?
Ob bei falschen Passwörtern das versuchte falsche Passwort und das benutzte
Passwortschema ins Protokoll geschrieben werden soll, damit das Problem
untersucht werden kann. Wenn dies aktiviert wird, wird auch
@samp{auth-debug} aktiviert. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck mail-debug?
Ob die Fehlersuche beim Mail-Prozess ermöglicht werden soll. Dies kann Ihnen
dabei helfen, herauszufinden, warum Dovecot Ihre E-Mails nicht findet. Die
Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck verbose-ssl?
SSL-Fehler auf Protokollebene anzeigen. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette log-timestamp
Das Präfix für jede Zeile, die ins Protokoll geschrieben wird. %-Codes sind
im Format von strftime(3). Die Vorgabe ist @samp{"\"%b %d %H:%M:%S \""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste login-log-format-elements
Eine Liste der Elemente, die protokolliert werden sollen. Die Elemente,
deren Variablenwerte nicht leer sind, werden zu einer kommagetrennten
Zeichenkette zusammengefügt.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette login-log-format
Das Format des Anmeldeprogramms. %s umfasst die Zeichenkette
@samp{login-log-format-elements}, %$ enthält die Daten, die man
protokollieren lassen möchte. Die Vorgabe ist @samp{"%$: %s"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mail-log-prefix
Das Präfix, das Protokollen für Mailprozesse vorangestellt wird. Siehe
doc/wiki/Variables.txt für eine Liste der benutzbaren Variablen. Die Vorgabe
ist @samp{"\"%s(%u)<%@{pid@}><%@{session@}>: \""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette deliver-log-format
Welches Format zur Protokollierung von Mailzustellungen verwendet werden
soll. Sie können die folgenden Variablen benutzen:
@table @code
@item %$
Zustellungsstatusnachricht (z.B.@: @samp{saved to INBOX})
@item %m
Nachrichtenidentifikator („Message-ID“)
@item %s
Betreff („Subject“)
@item %f
Absendeadresse („From“)
@item %p
Physische Größe
@item %w
Virtuelle Größe.
@end table
Die Vorgabe ist @samp{"msgid=%m: %$"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mail-location
Wo die Postfächer (die „Mailboxes“) der Benutzer gespeichert sind. Die
Vorgabe ist die leere Zeichenkette, was bedeutet, dass Dovecot die
Postfächer automatisch zu finden versucht. Das funktioniert nur, wenn der
Nutzer bereits E-Mails gespeichert hat, also sollten Sie Dovecot den
vollständigen Pfad mitteilen.

If you're using mbox, giving a path to the INBOX file (e.g.@:
@file{/var/mail/%u}) isn't enough.  You'll also need to tell Dovecot where
the other mailboxes are kept.  This is called the @emph{root mail
directory}, and it must be the first path given in the @samp{mail-location}
setting.

There are a few special variables you can use, e.g.:

@table @samp
@item %u
Benutzername
@item %n
Benutzerteil in Benutzer@@Domain; sonst dasselbe wie %u, wenn es keine
Domain gibt
@item %d
Domainteil in Benutzer@@Domain; sonst leer, wenn es keine Domain gibt
@item %h
Persönliches Verzeichnis
@end table

Siehe doc/wiki/Variables.txt für die vollständige Liste. Einige Beispiele:
@table @samp
@item maildir:~/Maildir
@item mbox:~/mail:INBOX=/var/mail/%u
@item mbox:/var/mail/%d/%1n/%n:INDEX=/var/indexes/%d/%1n/%
@end table
Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mail-uid
Systembenutzer und -gruppe, die benutzt werden sollen, um auf Mails
zuzugreifen. Wenn Sie mehrere Benutzerkonten verwenden, kann auch die
Benutzerdatenbank „userdb“ vorrangig verwendet werden, indem sie zu
Benutzer- oder Gruppenidentifikatoren (UIDs und GIDs) auflöst. Sie können
hier Zahlen oder Namen angeben. Siehe <doc/wiki/UserIds.txt>. Die Vorgabe
ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mail-gid

Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mail-privileged-group
Group to enable temporarily for privileged operations.  Currently this is
used only with INBOX when either its initial creation or dotlocking fails.
Typically this is set to @samp{"mail"} to give access to @file{/var/mail}.
Defaults to @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mail-access-groups
Grant access to these supplementary groups for mail processes.  Typically
these are used to set up access to shared mailboxes.  Note that it may be
dangerous to set these if users can create symlinks (e.g.@: if @samp{mail}
group is set here, @code{ln -s /var/mail ~/mail/var} could allow a user to
delete others' mailboxes, or @code{ln -s /secret/shared/box ~/mail/mybox}
would allow reading it).  Defaults to @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck mail-full-filesystem-access?
Allow full file system access to clients.  There's no access checks other
than what the operating system does for the active UID/GID.  It works with
both maildir and mboxes, allowing you to prefix mailboxes names with e.g.@:
@file{/path/} or @file{~user/}.  Defaults to @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck mmap-disable?
Don't use @code{mmap()} at all.  This is required if you store indexes to
shared file systems (NFS or clustered file system).  Defaults to @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck dotlock-use-excl?
Ob sich Dovecot darauf verlassen kann, dass @samp{O_EXCL} funktioniert, wenn
es Sperrdateien als „Dotlock“ erstellt. NFS unterstützt @samp{O_EXCL} seit
Version 3, also sollte es heutzutage kein Problem mehr sein, dies als
Voreinstellung zu benutzen. Die Vorgabe ist @samp{#t}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mail-fsync
Wann fsync() oder fdatasync() aufgerufen werden soll:
@table @code
@item optimized
Wann immer es nötig ist, um keine wichtigen Daten zu verlieren
@item always
Useful with e.g.@: NFS when @code{write()}s are delayed
@item never
Niemals benutzen (ist am schnellsten, aber Abstürze können zu Datenverlusten
führen)
@end table
Die Vorgabe ist @samp{"optimized"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck mail-nfs-storage?
Mails werden in NFS gespeichert. Setzen Sie dies auf ja, damit Dovecot
NFS-Zwischenspeicher zurückschreiben kann, wann immer es nötig ist. Wenn Sie
nur einen einzigen Mail-Server benutzen, brauchen Sie es @emph{nicht}. Die
Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck mail-nfs-index?
Ob die Index-Dateien für Mails auch in NFS gespeichert sind. Wenn dies auf
ja gesetzt ist, muss @samp{mmap-disable? #t} und @samp{fsync-disable? #f}
gesetzt sein. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette lock-method
Die Sperrmethode für Indexdateien. Die Alternativen sind fcntl, flock und
dotlock. Bei Dotlocking werden ein paar Tricks benutzt, die mehr Plattenein-
und -ausgaben als andere Sperrmethoden zur Folge haben. Für NFS-Benutzer
gilt: flock funktioniert nicht, also denken Sie bitte daran,
@samp{mmap-disable} zu ändern. Die Vorgabe ist @samp{"fcntl"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Dateiname mail-temp-dir
Das Verzeichnis, in dem LDA/LMTP zwischenzeitlich eingehende E-Mails >128 kB
speichert. Die Vorgabe ist @samp{"/tmp"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl first-valid-uid
Der Bereich, in dem die Benutzerkennungen („UIDs“) von sich bei Dovecot
anmeldenden Benutzern liegen müssen. Das dient hauptsächlich dazu,
sicherzustellen, dass sich Anwender nicht mit den Benutzerkonten von Daemons
oder sonstigen Systembenutzerkonten anmelden können. Beachten Sie, dass eine
Anmeldung als Administrator „root“ grundsätzlich vom Code des
Dovecot-Programms verboten wird und selbst dann @emph{nicht} möglich ist,
wenn Sie @samp{first-valid-uid} auf 0 setzen. Die Vorgabe ist @samp{500}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl last-valid-uid

Die Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl first-valid-gid
Der Bereich, in dem die Gruppenkennungen („GIDs“) von sich bei Dovecot
anmeldenden Benutzern liegen müssen. Benutzerkonten, deren primäre Gruppe
keine gültige GID hat, können sich nicht anmelden. Wenn das Benutzerkonto zu
zusätzlichen Gruppen mit ungültiger GID gehört, werden diese
Gruppen-Berechtigungen von Dovecot wieder abgegeben. Die Vorgabe ist
@samp{1}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl last-valid-gid

Die Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl mail-max-keyword-length
Die maximale zulässige Länge eines Mail-Schlüsselwort-Namens. Sie wirkt sich
nur aus, wenn Sie neue Schlüsselwörter anzulegen versuchen. Die Vorgabe ist
@samp{50}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Doppelpunktgetrennte-Dateinamen-Liste valid-chroot-dirs
List of directories under which chrooting is allowed for mail processes
(i.e.@: @file{/var/mail} will allow chrooting to @file{/var/mail/foo/bar}
too).  This setting doesn't affect @samp{login-chroot} @samp{mail-chroot} or
auth chroot settings.  If this setting is empty, @samp{/./} in home dirs are
ignored.  WARNING: Never add directories here which local users can modify,
that may lead to root exploit.  Usually this should be done only if you
don't allow shell access for users.  <doc/wiki/Chrooting.txt>.  Defaults to
@samp{()}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mail-chroot
Default chroot directory for mail processes.  This can be overridden for
specific users in user database by giving @samp{/./} in user's home
directory (e.g.@: @samp{/home/./user} chroots into @file{/home}).  Note that
usually there is no real need to do chrooting, Dovecot doesn't allow users
to access files outside their mail directory anyway.  If your home
directories are prefixed with the chroot directory, append @samp{/.} to
@samp{mail-chroot}.  <doc/wiki/Chrooting.txt>.  Defaults to @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Dateiname auth-socket-path
Der UNIX-Socket-Pfad, unter dem der Hauptauthentifizierungsserver zu finden
ist, mit dem Nutzer gefunden werden können. Er wird von IMAP (für gemeinsame
Benutzerkonten) und von LDA benutzt. Die Vorgabe ist
@samp{"/var/run/dovecot/auth-userdb"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Dateiname mail-plugin-dir
Das Verzeichnis, in dem Mailplugins zu finden sind. Die Vorgabe ist
@samp{"/usr/lib/dovecot"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste mail-plugins
Die Liste der Plugins, die für alle Dienste geladen werden sollen. Plugins,
die nur für IMAP, LDA, etc.@: gedacht sind, werden in ihren eigenen
.conf-Dateien zu dieser Liste hinzugefügt. Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl mail-cache-min-mail-count
Die kleinste Anzahl an Mails in einem Postfach, bevor Aktualisierungen an
der Zwischenspeicherdatei vorgenommen werden. Damit kann das Verhalten von
Dovecot optimiert werden, um weniger Schreibzugriffe auf die Platte
durchzuführen, wofür allerdings mehr Lesezugriffe notwendig werden. Die
Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mailbox-idle-check-interval
Während der IDLE-Befehl läuft, wird ab und zu im Postfach (der „Mailbox“)
nachgeschaut, ob es neue Mails oder andere Änderungen gibt. Mit dieser
Einstellung wird festgelegt, wie lange zwischen diesen Überprüfungen
höchstens gewartet wird. Dovecot kann auch dnotify, inotify und kqueue
benutzen, um sofort über Änderungen informiert zu werden. Die Vorgabe ist
@samp{"30 secs"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck mail-save-crlf?
Ob Mails mit CR+LF-Kodierung für Zeilenumbrüche statt einfacher LF
gespeichert werden sollen. Dadurch wird das Versenden dieser Mails den
Prozessor weniger beanspruchen, dies gilt besonders für den Systemaufruf
sendfile() unter Linux und FreeBSD. Allerdings werden auch ein bisschen mehr
Ein- und Ausgaben auf der Platte notwendig, wodurch es insgesamt langsamer
werden könnte. Beachten Sie außerdem, dass andere Software, die die
mboxes/maildirs ausliest, mit den CRs falsch umgehen und Probleme
verursachen könnte. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck maildir-stat-dirs?
Nach Voreinstellung liefert der LIST-Befehl alle Einträge im Mailverzeichnis
(„Maildir“), die mit einem Punkt beginnen. Wenn diese Option aktiviert wird,
liefert Dovecot nur solche Einträge, die für Verzeichnisse stehen. Dazu wird
auf jedem Eintrag stat() aufgerufen, wodurch mehr Ein- und Ausgaben auf der
Platte anfallen. (Bei Systemen, die einen Struktureintrag
@samp{dirent->d_type} machen, ist diese Überprüfung unnötig, daher werden
dort nur Verzeichnisse geliefert, egal was hier eingestellt ist.) Die
Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck maildir-copy-with-hardlinks?
Ob zum Kopieren einer Nachricht statt einer Kopie so weit möglich harte
Verknüpfungen („Hard Links“) verwendet werden sollen. Dadurch wird das
System wesentlich weniger ausgelastet und Nebenwirkungen sind
unwahrscheinlich. Die Vorgabe ist @samp{#t}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck maildir-very-dirty-syncs?
Ob Dovecot annehmen darf, dass es der einzige MUA ist, der auf Maildir
zugreift. Dann wird das cur/-Verzeichnis nur bei unerwarteten Änderungen an
seiner mtime durchsucht oder wenn die Mail sonst nicht gefunden werden
kann. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste mbox-read-locks
Welche Sperrmethoden zum Sperren des mbox-Postfachs (der „Mailbox“) benutzt
werden. Es stehen vier Methoden zur Auswahl:

@table @code
@item dotlock
Hier wird eine Datei namens <Postfach>.lock erzeugt. Es handelt sich um die
älteste und am ehesten mit NFS verwendbare Lösung. Wenn Sie ein Verzeichnis
wie /var/mail/ benutzen, müssen die Benutzer Schreibzugriff darauf haben.
@item dotlock-try
Genau wie dotlock, aber wenn es mangels Berechtigungen fehlschlägt oder
nicht genug Plattenplatz verfügbar ist, wird einfach nicht gesperrt.
@item fcntl
Benutzen Sie diese Einstellung wenn möglich. Sie funktioniert auch mit NFS,
sofern lockd benutzt wird.
@item flock
Existiert vielleicht nicht auf allen Systemen. Funktioniert nicht mit NFS.
@item lockf
Existiert vielleicht nicht auf allen Systemen. Funktioniert nicht mit NFS.
@end table

Sie können mehrere Sperrmethoden angeben; wenn ja, dann ist deren
Reihenfolge entscheidend, um Verklemmungen („Deadlocks“) zu vermeiden, wenn
andere MTAs/MUAs auch mehrere Sperrmethoden benutzen. Manche Betriebssysteme
erlauben es nicht, manche davon gleichzeitig zu benutzen.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste mbox-write-locks

@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mbox-lock-timeout
Wie lange höchstens auf Sperren (irgendeiner Art) gewartet wird, bevor
abgebrochen wird. Die Vorgabe ist @samp{"5 mins"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mbox-dotlock-change-timeout
Wenn eine Dotlock-Sperrdatei existiert, das Postfach (die „Mailbox“) aber
auf keine Weise geändert wurde, wird die Sperrdatei nach der hier
angegebenen Zeit außer Kraft gesetzt. Die Vorgabe ist @samp{"2 mins"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck mbox-dirty-syncs?
Wenn sich das mbox-Postfach unerwartet ändert, müssen wir es gänzlich neu
einlesen, um herauszufinden, was sich geändert hat. Wenn die mbox groß ist,
kann das viel Zeit in Anspruch nehmen. Weil es sich bei der Änderung
meistens nur um eine neu angefügte Mail handelt, wäre es schneller, nur die
neuen Mails zu lesen. Wenn diese Einstellung hier aktiviert ist, arbeitet
Dovecot nach dem eben beschriebenen Prinzip, liest aber doch die ganze
mbox-Datei neu ein, sobald es etwas nicht wie erwartet vorfindet. Der
einzige wirkliche Nachteil bei dieser Einstellung ist, dass es Dovecot nicht
sofort erkennt, wenn ein anderer MUA die Statusindikatoren („Flags“)
ändert. Beachten Sie, dass eine komplette Synchronisation bei den Befehlen
SELECT, EXAMINE, EXPUNGE und CHECK durchgeführt wird. Die Vorgabe ist
@samp{#t}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck mbox-very-dirty-syncs?
Wie @samp{mbox-dirty-syncs}, aber ohne dass komplette Synchronisationen
selbst bei den Befehlen SELECT, EXAMINE, EXPUNGE oder CHECK durchgeführt
werden. Wenn dies hier aktiviert ist, wird @samp{mbox-dirty-syncs}
ignoriert. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck mbox-lazy-writes?
Ob das Schreiben von mbox-Kopfzeilen hinausgezögert wird, bis eine komplette
Schreibsynchronisation durchgeführt wird (bei den Befehlen EXPUNGE und
CHECK, und beim Schließen des Postfachs, d.h.@: der „Mailbox“). Das wird
besonders nützlich, wenn Clients POP3 verwenden, wo es oft vorkommt, dass
die Clients alle Mails löschen. Der Nachteil ist, dass Dovecots Änderungen
nicht sofort für andere MUAs sichtbar werden. Die Vorgabe ist @samp{#t}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl mbox-min-index-size
Wenn die Größe des mbox-Postfaches kleiner als die angegebene Größe (z.B.@:
100k) ist, werden keine Index-Dateien geschrieben. Wenn bereits eine
Index-Datei existiert, wird sie weiterhin gelesen und nur nicht
aktualisiert. Die Vorgabe ist @samp{0}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl mdbox-rotate-size
Die maximale Größe der dbox-Datei, bis sie rotiert wird. Die Vorgabe ist
@samp{10000000}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mdbox-rotate-interval
Das maximale Alter der dbox-Datei, bis sie rotiert wird. Typischerweise wird
es in Tagen angegeben. Der Tag beginnt um Mitternacht, also steht 1d für
heute, 2d für gestern, etc. 0 heißt, die Überprüfung ist abgeschaltet. Die
Vorgabe ist @samp{"1d"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck mdbox-preallocate-space?
Ob beim Erstellen neuer mdbox-Postfachdateien gleich am Anfang eine Datei
der Größe @samp{mdbox-rotate-size} vorab angelegt werden soll. Diese
Einstellung funktioniert derzeit nur mit Linux auf manchen Dateisystemen
(ext4, xfs). Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mail-attachment-dir
Postfächer in den Formaten sdbox und mdbox unterstützen es, Mail-Anhänge in
externen Dateien zu speichern, wodurch sie mit Einzelinstanz-Speicherung
(„Single-Instance Storage“) dedupliziert werden können. Andere
Hintergrundsysteme („Backends“) bieten dafür noch keine Unterstützung.

@emph{Warnung}: Diese Funktionalität wurde noch nicht ausgiebig
getestet. Benutzen Sie sie auf eigene Gefahr.

Das Wurzelverzeichnis, in dem Mail-Anhänge gespeichert werden. Wenn es leer
gelassen wird, ist es deaktiviert. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl mail-attachment-min-size
Anhänge, die kleiner sind als hier angegeben, werden @emph{nicht} extern
gespeichert. Es ist auch möglich, ein Plugin zu schreiben, das externes
Speichern bestimmter Anhänge deaktiviert. Die Vorgabe ist @samp{128000}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mail-attachment-fs
Ein Dateisystemhintergrundprogramm, mit dem Anhänge gespeichert werden:
@table @code
@item posix
Dovecot führt keine Einzelinstanzspeicherung durch (aber das Dateisystem
kann so leichter selbst deduplizieren)
@item sis posix
Einzelinstanzspeicherung wird durch einen sofortigen Byte-für-Byte-Vergleich
beim Speichern umgesetzt
@item sis-queue posix
Einzelinstanzspeicherung mit verzögertem Vergleich und Deduplizierung.
@end table
Die Vorgabe ist @samp{"sis posix"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette mail-attachment-hash
Welches Hash-Format die Dateinamen von Anhängen bestimmt. Sie können
beliebigen Text und Variable beifügen: @code{%@{md4@}}, @code{%@{md5@}},
@code{%@{sha1@}}, @code{%@{sha256@}}, @code{%@{sha512@}},
@code{%@{size@}}. Es können auch nur Teile der Variablen benutzt werden,
z.B.@: liefert @code{%@{sha256:80@}} nur die ersten 80 Bits. Die Vorgabe ist
@samp{"%@{sha1@}"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl default-process-limit

Die Vorgabe ist @samp{100}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl default-client-limit

Die Vorgabe ist @samp{1000}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl default-vsz-limit
Die vorgegebene Beschränkung der VSZ („Virtual Memory Size“, virtuelle
Speichergröße) für Dienstprozesse. Dies ist hauptsächlich dafür gedacht,
Prozessen, die ein Speicherleck aufweisen, rechtzeitig Einhalt zu gebieten
und sie abzuwürgen, bevor sie allen Speicher aufbrauchen. Die Vorgabe ist
@samp{256000000}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette default-login-user
Der Anmeldebenutzer, der intern von Anmeldeprozessen benutzt wird. Der
Anmeldebenutzer ist derjenige Benutzer im Dovecot-System, dem am wenigsten
Vertrauen zugeschrieben wird. Er sollte auf überhaupt nichts Zugriff
haben. Die Vorgabe ist @samp{"dovenull"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette default-internal-user
Der interne Benutzer, der von Prozessen ohne besondere Berechtigungen
benutzt wird. Er sollte sich vom Anmeldebenutzer unterscheiden, damit
Anmeldeprozesse keine anderen Prozesse stören können. Die Vorgabe ist
@samp{"dovecot"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette ssl?
SSL/TLS-Unterstützung: yes für ja, no für nein, oder required, wenn SSL/TLS
verpflichtend benutzt werden muss. Siehe <doc/wiki/SSL.txt>. Die Vorgabe ist
@samp{"required"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette ssl-cert
Das PEM-kodierte X.509-SSL/TLS-Zertifikat (der öffentliche Schlüssel). Die
Vorgabe ist @samp{"</etc/dovecot/default.pem"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette ssl-key
Der PEM-kodierte private Schlüssel für SSL/TLS. Der Schlüssel wird geöffnet,
bevor Administratorrechte abgegeben werden, damit niemand außer dem
Administratornutzer „root“ Lesezugriff auf die Schlüsseldatei hat. Die
Vorgabe ist @samp{"</etc/dovecot/private/default.pem"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette ssl-key-password
Wenn die Schlüsseldatei passwortgeschützt ist, geben Sie hier das Passwort
an. Alternativ können Sie es angeben, wenn sie Dovecot starten, indem Sie es
mit dem Parameter -p übergeben. Da die Konfigurationsdatei oftmals allgemein
lesbar ist, möchten Sie es vielleicht in einer anderen Datei ablegen. Die
Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette ssl-ca
Die PEM-kodierte Zertifikatsautorität, die als vertrauenswürdig eingestuft
wird. Legen Sie sie nur dann fest, wenn Sie @samp{ssl-verify-client-cert?
#t} setzen möchten. Die Datei sollte das oder die Zertifikat(e) der
Zertifikatsautorität („Certificate Authority“, kurz CA) enthalten, gefolgt
von den entsprechenden Zertifikatsperrlisten (CRLs), z.B.@: @samp{ssl-ca
</etc/ssl/certs/ca.pem}. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck ssl-require-crl?
Ob die Prüfung der Client-Zertifikate gegen die Zertifikatsperrlisten (CRLs)
erfolgreich sein muss. Die Vorgabe ist @samp{#t}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck ssl-verify-client-cert?
Ob der Client gebeten wird, ein Zertifikat zu schicken. Wenn Sie es auch
verpflichtend machen wollen, setzen Sie @samp{auth-ssl-require-client-cert?
#t} im Autorisierungsabschnitt. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette ssl-cert-username-field
Welches Feld im Zertifikat den Benutzernamen angibt. In der Regel wählt man
den Gebräuchlichen Namen „commonName“ oder den Eindeutigen Identifikator
„x500UniqueIdentifier“ als Benutzernamen, wenn man Client-Zertifikate
benutzt. Sie müssen dann auch @samp{auth-ssl-username-from-cert? #t}
setzen. Die Vorgabe ist @samp{"commonName"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette ssl-min-protocol
Die kleinste Version des SSL-Protokolls, die noch akzeptiert werden
soll. Die Vorgabe ist @samp{"TLSv1"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette ssl-cipher-list
Welche SSL-Ciphers benutzt werden dürfen. Die Vorgabe ist
@samp{"ALL:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW@@STRENGTH"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette ssl-crypto-device
Das SSL-Verschlüsselungsgerät („Crypto Device“), das benutzt werden
soll. Gültige Werte bekommen Sie gezeigt, wenn Sie „openssl engine“
ausführen. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette postmaster-address
An welche Adresse Mails versandt werden sollen, die über die Zurückweisung
einer Mail informieren. %d wird zur Domain des Empfängers umgeschrieben. Die
Vorgabe ist @samp{"postmaster@@%d"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette hostname
Der Rechnername, der an mehreren Stellen in versandten E-Mails (z.B.@: im
Nachrichtenidentifikator „Message-Id“) und in LMTP-Antworten benutzt
wird. Die Voreinstellung entspricht dem wirklichen Rechnernamen des
Systems. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck quota-full-tempfail?
Ob bei einem Nutzer, der sein Kontingent überschreitet, ein temporärer
Fehler gemeldet werden soll, statt Nachrichten zurück zu versenden (zu
„bouncen“). Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Dateiname sendmail-path
Welche Binärdatei zum Versenden von Mails benutzt werden soll. Die Vorgabe
ist @samp{"/usr/sbin/sendmail"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette submission-host
Wenn dieses Feld nicht leer ist, werden Mails an den SMTP-Server auf dem
angegebenen „Rechner[:Port]“ statt an sendmail geschickt. Die Vothabe ist
@samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette rejection-subject
Die Betreffkopfzeile („Subject:“), die für Mails benutzt werden soll, die
über die Zurückweisung einer Mail informieren. Sie können dieselben
Variablen wie beim hierunter beschriebenen Zurückweisungsgrund
@samp{rejection-reason} benutzen. Die Vorgabe ist @samp{"Rejected: %s"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette rejection-reason
Die menschenlesbare Fehlermeldung in Mails, die über die Zurückweisung einer
Mail informieren. Sie können diese Variablen benutzen:

@table @code
@item %n
CRLF-Zeilenumbruch
@item %r
Begründung („Reason“)
@item %s
Ursprünglicher Betreff („Subject“)
@item %t
Empfänger („To“)
@end table
Die Vorgabe ist @samp{"Your message to <%t> was automatically
rejected:%n%r"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette recipient-delimiter
Trennzeichen zwischen dem eigentlichen Lokalteil („local-part“) und
Detailangaben in der E-Mail-Adresse. Die Vorgabe ist @samp{"+"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette lda-original-recipient-header
Aus welcher Kopfzeile die Adresse des Ursprünglichen Empfängers (SMTPs „RCPT
TO:“-Adresse) genommen wird, wenn sie nicht anderweitig eingetragen
ist. Wird die Befehlszeilenoption @option{-a} von dovecot-lda angegeben, hat
sie Vorrang vor diesem Feld. Oft wird die Kopfzeile X-Original-To hierfür
verwendet. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck lda-mailbox-autocreate?
Ob ein nicht existierendes Postfach (eine „Mailbox“) automatisch erzeugt
werden soll, wenn eine Mail darin abgespeichert wird. Die Vorgabe ist
@samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Boolescher-Ausdruck lda-mailbox-autosubscribe?
Ob automatisch erzeugte Postfächer („Mailboxes“) auch automatisch abonniert
werden sollen. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Nichtnegative-ganze-Zahl imap-max-line-length
Die maximale Länge einer IMAP-Befehlszeile. Manche Clients erzeugen sehr
lange Befehlszeilen bei riesigen Postfächern, daher müssen Sie diesen Wert
gegebenenfalls anheben, wenn Sie Fehlermeldungen wie „Too long argument“
oder „IMAP command line too large“ häufig sehen. Die Vorgabe ist
@samp{64000}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette imap-logout-format
Formatzeichenkette für das Abmelden bei IMAP:
@table @code
@item %i
Gesamtzahl vom Client empfangener Bytes
@item %o
Gesamtzahl zum Client versandter Bytes
@end table
Siehe @file{doc/wiki/Variables.txt} für eine Liste aller Variablen, die Sie
benutzen können. Die Vorgabe ist @samp{"in=%i out=%o deleted=%@{deleted@}
expunged=%@{expunged@} trashed=%@{trashed@} hdr_count=%@{fetch_hdr_count@}
hdr_bytes=%@{fetch_hdr_bytes@} body_count=%@{fetch_body_count@}
body_bytes=%@{fetch_body_bytes@}"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette imap-capability
Ersetzt die Antworten auf IMAP-CAPABILITY-Anfragen. Wenn der Wert mit „+“
beginnt, werden die angegebenen Capabilitys zu den voreingestellten
hinzugefügt (z.B.@: +XFOO XBAR). Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette imap-idle-notify-interval
Wie lange zwischen „OK Still here“-Benachrichtigungen gewartet wird, wenn
der Client auf IDLE steht. Die Vorgabe ist @samp{"2 mins"}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette imap-id-send
ID-Feldnamen und -werte, die an Clients versandt werden sollen. Wenn * als
der Wert angegeben wird, benutzt Dovecot dafür den voreingestellten
Wert. Die folgenden Felder verfügen derzeit über voreingestellte Werte:
name, version, os, os-version, support-url, support-email. Die Vorgabe ist
@samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette imap-id-log
Welche vom Client übermittelten ID-Felder protokolliert werden. * bedeutet
alle. Die Vorgabe ist @samp{""}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste imap-client-workarounds
Maßnahmen, um verschiedene Fehler in Clients zu umgehen:

@table @code
@item delay-newmail
Benachrichtigungen über neue Mails mit EXISTS/RECENT nur als Antwort auf
NOOP- und CHECK-Befehle versenden. Manche Clients ignorieren diese
ansonsten, zum Beispiel OSX Mail (<v2.1). Outlook Express verhält sich noch
problematischer, denn ohne diese Maßnahme können dem Anwender
Fehlermeldungen wie „Die Nachricht steht nicht mehr auf dem Server zur
Verfügung“ („Message no longer in server“) angezeigt werden. Beachten Sie,
dass OE6 auch mit dieser Maßnahme immer noch Probleme macht, wenn die
Synchronisation auf „nur Kopfzeilen“ („Headers Only“) eingestellt ist.

@item tb-extra-mailbox-sep
Thunderbird kommt aus irgendeinem Grund durcheinander bei LAYOUT=fs (mbox
und dbox) und fügt überzählige @samp{/}-Suffixe an Postfachnamen
(„Mailbox“-Namen) an. Mit dieser Maßnahme ignoriert Dovecot zusätzliche
@samp{/}, statt sie als ungültige Postfachnamen zu behandeln.

@item tb-lsub-flags
Ob \Noselect-Flags für LSUB-Antworten mit LAYOUT=fs (z.B.@: mbox) geliefert
werden. Dadurch merkt Thunderbird, dass man Postfächer nicht auswählen kann,
und zeigt sie ausgegraut an, statt erst nach einiger Zeit eine Fehlermeldung
einzublenden, sie seien nicht auswählbar.
@end table
Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{dovecot-configuration}-Parameter} Zeichenkette imap-urlauth-host
Welcher Rechner in vom Client übermittelten URLAUTH-URLs zugelassen
wird. Bei „*“ wird jeder zugelassen. Die Vorgabe ist @samp{""}.
@end deftypevr


Uff! Das waren viele Konfigurationsoptionen. Das Schöne daran ist aber, dass
Guix eine vollständige Schnittstelle für alles bietet, was man in Dovecots
Konfigurationssprache ausdrücken kann. Damit kann man Konfigurationen nicht
nur auf schöne Art aufschreiben, sondern kann auch reflektiven Code
schreiben, der Konfigurationen aus Scheme heraus auslesen und umschreiben
kann.

Vielleicht haben Sie aber auch einfach schon eine @code{dovecot.conf}, die
Sie mit Guix zum Laufen bringen möchten. In diesem Fall können Sie eine
@code{opaque-dovecot-configuration} im @code{#:config}-Parameter an
@code{dovecot-service} übergeben. Wie der Name schon sagt, bietet eine opake
Konfiguration keinerlei Unterstützung für Reflexion.

Verfügbare @code{opaque-dovecot-configuration}-Felder sind:

@deftypevr {@code{opaque-dovecot-configuration}-Parameter} „package“ dovecot
Das Dovecot-Paket.
@end deftypevr

@deftypevr {@code{opaque-dovecot-configuration}-Parameter} Zeichenkette string
Der Inhalt der @code{dovecot.conf} als eine Zeichenkette.
@end deftypevr

Wenn Ihre @code{dovecot.conf} zum Beispiel nur aus der leeren Zeichenkette
bestünde, könnten Sie einen Dovecot-Dienst wie folgt instanziieren:

@lisp
(dovecot-service #:config
                 (opaque-dovecot-configuration
                  (string "")))
@end lisp

@subsubheading OpenSMTPD-Dienst

@deffn {Scheme-Variable} opensmtpd-service-type
Dies ist der Diensttyp des @uref{https://www.opensmtpd.org,
OpenSMTPD-Dienstes}, dessen Wert ein @code{opensmtpd-configuration}-Objekt
sein sollte, wie in diesem Beispiel:

@lisp
(service opensmtpd-service-type
         (opensmtpd-configuration
           (config-file (local-file "./my-smtpd.conf"))))
@end lisp
@end deffn

@deftp {Datentyp} opensmtpd-configuration
Datentyp, der die Konfiguration von opensmtpd repräsentiert.

@table @asis
@item @code{package} (Vorgabe: @var{opensmtpd})
Das Paketobjekt des SMTP-Servers OpenSMTPD.

@item @code{config-file} (Vorgabe: @code{%default-opensmtpd-file})
Ein dateiartiges Objekt der OpenSMTPD-Konfigurationsdatei, die benutzt
werden soll. Nach Vorgabe lauscht OpenSMTPD auf der
Loopback-Netzwerkschnittstelle und ist so eingerichtet, dass Mail von
Nutzern und Daemons auf der lokalen Maschine sowie E-Mails an entfernte
Server versandt werden können. Führen Sie @command{man smtpd.conf} aus, wenn
Sie mehr erfahren möchten.

@end table
@end deftp

@subsubheading Exim-Dienst

@cindex Mail Transfer Agent (MTA)
@cindex MTA (Mail Transfer Agent)
@cindex SMTP

@deffn {Scheme-Variable} exim-service-type
Dies ist der Diensttyp für den Mail Transfer Agent (MTA) namens
@uref{https://exim.org, Exim}, dessen Wert ein
@code{exim-configuration}-Objekt sein sollte, wie in diesem Beispiel:

@lisp
(service exim-service-type
         (exim-configuration
           (config-file (local-file "./my-exim.conf"))))
@end lisp
@end deffn

Um einen Dienst vom Typ @code{exim-service-type} zu benutzen, müssen Sie
auch einen Dienst @code{mail-aliases-service-type} in Ihrer
@code{operating-system}-Deklaration stehen haben (selbst wenn darin keine
Alias-Namen eingerichtet sind).

@deftp {Datentyp} exim-configuration
Der Datentyp, der die Konfiguration von Exim repräsentiert.

@table @asis
@item @code{package} (Vorgabe: @var{exim})
Das Paketobjekt des Exim-Servers.

@item @code{config-file} (Vorgabe: @code{#f})
Ein dateiartiges Objekt der Exim-Konfigurationsdatei. Wenn sein Wert
@code{#f} ist, wird die vorgegebene Konfigurationsdatei aus dem als
@code{package} angegebenen Paket benutzt. Die sich ergebende
Konfigurationsdatei wird geladen, nachdem die Konfigurationsvariablen
@code{exim_user} und @code{exim_group} gesetzt wurden.

@end table
@end deftp

@subsubheading Getmail-Dienst

@cindex IMAP
@cindex POP

@deffn {Scheme-Variable} getmail-service-type
Dies ist der Diensttyp des Mail-Retrievers
@uref{http://pyropus.ca/software/getmail/, Getmail}, der als Wert ein
@code{getmail-configuration}-Objekt hat.
@end deffn

Verfügbare @code{getmail-configuration}-Felder sind:

@deftypevr {@code{getmail-configuration}-Parameter} Zeichenkette name
Ein Symbol, das den getmail-Dienst identifiziert.

Die Vorgabe ist @samp{"unset"}.

@end deftypevr

@deftypevr {@code{getmail-configuration}-Parameter} „package“ package
Das getmail-Paket, das benutzt werden soll.

@end deftypevr

@deftypevr {@code{getmail-configuration}-Parameter} Zeichenkette user
Das Benutzerkonto, mit dem getmail ausgeführt wird.

Die Vorgabe ist @samp{"getmail"}.

@end deftypevr

@deftypevr {@code{getmail-configuration}-Parameter} Zeichenkette group
Die Benutzergruppe, mit der getmail ausgeführt wird.

Die Vorgabe ist @samp{"getmail"}.

@end deftypevr

@deftypevr {@code{getmail-configuration}-Parameter} Zeichenkette directory
Welches getmail-Verzeichnis benutzt werden soll.

Die Vorgabe ist @samp{"/var/lib/getmail/default"}.

@end deftypevr

@deftypevr {@code{getmail-configuration}-Parameter} „getmail-configuration-file“ rcfile
Die zu benutzende getmail-Konfigurationsdatei.

Verfügbare @code{getmail-configuration-file}-Felder sind:

@deftypevr {@code{getmail-configuration-file}-Parameter} „getmail-retriever-configuration“ retriever
Von welchem E-Mail-Konto Mails bezogen werden sollen und wie auf dieses
zugegriffen werden kann.

Verfügbare @code{getmail-retriever-configuration}-Felder sind:

@deftypevr {@code{getmail-retriever-configuration}-Parameter} Zeichenkette type
Welche Art von Mail-Retriever benutzt werden soll. Zu den gültigen Werten
gehören @samp{passwd} und @samp{static}.

Die Vorgabe ist @samp{"SimpleIMAPSSLRetriever"}.

@end deftypevr

@deftypevr {@code{getmail-retriever-configuration}-Parameter} Zeichenkette server
Der Benutzername, mit dem man sich beim Mailserver anmeldet.

Die Vorgabe ist @samp{unset}.

@end deftypevr

@deftypevr {@code{getmail-retriever-configuration}-Parameter} Zeichenkette username
Der Benutzername, mit dem man sich beim Mailserver anmeldet.

Die Vorgabe ist @samp{unset}.

@end deftypevr

@deftypevr {@code{getmail-retriever-configuration}-Parameter} Nichtnegative-ganze-Zahl port
Die Portnummer, mit der eine Verbindung hergestellt wird.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{getmail-retriever-configuration}-Parameter} Zeichenkette password
Einträge, die Vorrang vor den Feldern aus passwd haben.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{getmail-retriever-configuration}-Parameter} Liste password-command
Einträge, die Vorrang vor den Feldern aus passwd haben.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{getmail-retriever-configuration}-Parameter} Zeichenkette keyfile
Der Schlüssel im PEM-Format, der für das Aufbauen der TLS-Verbindung genutzt
werden soll.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{getmail-retriever-configuration}-Parameter} Zeichenkette certfile
Die Zertifikatsdatei im PEM-Format, die für das Aufbauen der TLS-Verbindung
genutzt werden soll.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{getmail-retriever-configuration}-Parameter} Zeichenkette ca-certs
Welche Zertifikate von Zertifikatsautoritäten („CA Certificates“) benutzt
werden sollen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{getmail-retriever-configuration}-Parameter} Parameter-Assoziative-Liste extra-parameters
Weitere Parameter für den Retriever.

Die Vorgabe ist @samp{()}.

@end deftypevr

@end deftypevr

@deftypevr {@code{getmail-configuration-file}-Parameter} „getmail-destination-configuration“ destination
Was mit geholten Nachrichten geschehen soll.

Verfügbare @code{getmail-destination-configuration}-Felder sind:

@deftypevr {@code{getmail-destination-configuration}-Parameter} Zeichenkette type
Die Art des Empfängers der Mail. Zu den gültigen Werten gehören
@samp{Maildir}, @samp{Mboxrd} und @samp{MDA_external}.

Die Vorgabe ist @samp{unset}.

@end deftypevr

@deftypevr {@code{getmail-destination-configuration}-Parameter} Zeichenkette-oder-Dateiartiges-Objekt path
Entspricht der path-Option für den Mailempfänger („Destination“). Was
hiermit bewirkt wird, hängt von der gewählten Empfängerart ab.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{getmail-destination-configuration}-Parameter} Parameter-Assoziative-Liste extra-parameters
Weitere Empfängerparameter.

Die Vorgabe ist @samp{()}.

@end deftypevr

@end deftypevr

@deftypevr {@code{getmail-configuration-file}-Parameter} „getmail-options-configuration“ options
getmail konfigurieren.

Verfügbare @code{getmail-options-configuration}-Felder sind:

@deftypevr {@code{getmail-options-configuration}-Parameter} Nichtnegative-ganze-Zahl verbose
Wenn es auf @samp{0} gesetzt ist, wird getmail nur Warnungen und Fehler
ausgeben. Ein Wert von @samp{1} bedeutet, dass Meldungen über das Holen und
Löschen von Nachrichten ausgegeben werden. Wenn es auf @samp{2} gesetzt ist,
wird getmail Meldungen über jede durchgeführte Aktion ausgeben.

Die Vorgabe ist @samp{1}.

@end deftypevr

@deftypevr {@code{getmail-options-configuration}-Parameter} Boolescher-Ausdruck read-all
Wenn es auf wahr gesetzt ist, wird getmail alle verfügbaren Nachrichten
holen. Andernfalls wird es nur solche Nachrichten holen, die es nicht
bereits gesehen hat.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{getmail-options-configuration}-Parameter} Boolescher-Ausdruck delete
Wenn es auf wahr gesetzt ist, werden Mitteilungen vom Server gelöscht,
nachdem sie erfolgreich geholt und zugestellt wurden. Andernfalls werden
Nachrichten auf dem Server gelassen.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{getmail-options-configuration}-Parameter} Nichtnegative-ganze-Zahl delete-after
Getmail wird nach der hier angegebenen Anzahl von Tagen Nachrichten löschen,
die es gesehen hat, wenn sie zugestellt wurden. Dadurch werden Nachrichten
diese Anzahl von Tagen lang auf dem Server gelassen, nachdem sie zugestellt
wurden. Ein Wert von @samp{0} deaktiviert diese Funktionalität.

Die Vorgabe ist @samp{0}.

@end deftypevr

@deftypevr {@code{getmail-options-configuration}-Parameter} Nichtnegative-ganze-Zahl delete-bigger-than
Nachrichten, die größer als die angegebene Anzahl von Bytes sind, nach dem
Holen löschen, selbst wenn die Optionen delete und delete-after abgeschaltet
sind. Ein Wert von @samp{0} deaktiviert diese Funktionalität.

Die Vorgabe ist @samp{0}.

@end deftypevr

@deftypevr {@code{getmail-options-configuration}-Parameter} Nichtnegative-ganze-Zahl max-bytes-per-session
Nachrichten, die höchstens die angegebene Anzahl von Bytes groß sind, vor
dem Beenden der Serversitzung von dort holen. Ein Wert von @samp{0}
deaktiviert diese Funktionalität.

Die Vorgabe ist @samp{0}.

@end deftypevr

@deftypevr {@code{getmail-options-configuration}-Parameter} Nichtnegative-ganze-Zahl max-message-size
@emph{Keine} Nachrichten holen, deren Größe die angegebene Anzahl von Bytes
überschreitet. Ein Wert von @samp{0} deaktiviert diese Funktionalität.

Die Vorgabe ist @samp{0}.

@end deftypevr

@deftypevr {@code{getmail-options-configuration}-Parameter} Boolescher-Ausdruck delivered-to
Wenn dies auf wahr gesetzt ist, fügt getmail eine Delivered-To-Kopfzeile an
die Nachrichten an.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{getmail-options-configuration}-Parameter} Boolescher-Ausdruck received
Wenn dies gesetzt ist, fügt getmail eine Received-Kopfzeile an die
Nachrichten an.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{getmail-options-configuration}-Parameter} Zeichenkette message-log
Getmail wird seine Aktionen in die genannte Datei protokollieren. Wenn als
Wert @samp{""} angegeben wird, wird diese Funktionalität deaktiviert.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{getmail-options-configuration}-Parameter} Boolescher-Ausdruck message-log-syslog
Wenn es auf wahr gesetzt ist, wird getmail ein Protokoll seiner Aktionen an
den Systemprotokolldienst übergeben.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{getmail-options-configuration}-Parameter} Boolescher-Ausdruck message-log-verbose
Wenn dies auf wahr gesetzt ist, wird getmail Informationen über @emph{nicht}
geholte Nachrichten und den jeweiligen Grund dafür sowie Anfang und Ende des
Holvorgangs in Informationszeilen protokollieren.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{getmail-options-configuration}-Parameter} Parameter-Assoziative-Liste extra-parameters
Weitere geltende Optionen.

Die Vorgabe ist @samp{()}.

@end deftypevr

@end deftypevr

@end deftypevr

@deftypevr {@code{getmail-configuration}-Parameter} Liste idle
Eine Liste der Postfächer, für die getmail beim Server auf
Benachrichtigungen wegen neuer Mails warten soll. Diese Funktionalität setzt
voraus, dass der Server die IDLE-Erweiterung unterstützt.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{getmail-configuration}-Parameter} Liste environment-variables
Umgebungsvariable, die für getmail gelten sollen.

Die Vorgabe ist @samp{()}.

@end deftypevr

@subsubheading Dienst für Mail-Alias-Namen

@cindex E-Mail-Alias-Namen
@cindex Alias-Namen, für E-Mail-Adressen

@deffn {Scheme-Variable} mail-aliases-service-type
Das ist der Typ des Dienstes, der @code{/etc/aliases} zur Verfügung stellt,
wo festgelegt wird, wie Mail-Nachrichten an Benutzer des Systems geliefert
werden.

@lisp
(service mail-aliases-service-type
         '(("postmaster" "bob")
           ("bob" "bob@@example.com" "bob@@example2.com")))
@end lisp
@end deffn

Die Konfiguration für einen Dienst vom Typ @code{mail-aliases-service-type}
ist eine assoziative Liste, die angibt, wie beim System ankommende
Mail-Nachrichten zuzustellen sind. Jeder Eintrag hat die Form @code{(Alias
Adressen ...)}, wobei das @code{Alias} den lokalen Alias-Namen angibt und
@code{Adressen} angibt, wo die Mail-Nachrichten für diesen Benutzer ankommen
sollen.

Die Alias-Namen müssen nicht als Benutzerkonten auf dem lokalen System
existieren. Im Beispiel oben muss es also keinen Eintrag für
@code{postmaster} unter den @code{user-accounts} in der
@code{operating-system}-Deklaration geben, um die @code{postmaster}-Mails an
@code{bob} weiterzuleiten (von wo diese dann an @code{bob@@example.com} und
@code{bob@@example2.com} weitergeschickt würden).

@subsubheading GNU-Mailutils-IMAP4-Daemon
@cindex GNU-Mailutils-IMAP4-Daemon

@deffn {Scheme-Variable} imap4d-service-type
Dies ist der Diensttyp für den IMAP4-Daemon aus den GNU Mailutils (siehe
@ref{imap4d,,, mailutils, GNU Mailutils Manual}), dessen Wert ein
@code{imap4d-configuration}-Objekt sein sollte, wie in diesem Beispiel:

@lisp
(service imap4d-service-type
         (imap4d-configuration
           (config-file (local-file "imap4d.conf"))))
@end lisp
@end deffn

@deftp {Datentyp} imap4d-configuration
Datentyp, der die Konfiguration von @command{imap4d} repräsentiert.

@table @asis
@item @code{package} (Vorgabe: @code{mailutils})
Das Paket, das @command{imap4d} zur Verfügung stellt.

@item @code{config-file} (Vorgabe: @code{%default-imap4d-config-file})
Datei-artiges Objekt der zu nutzenden Konfigurationsdatei. Nach Vorgabe
lauscht IMAP4D auf TCP-Port 143 vom lokalen Rechner @code{localhost}. Siehe
@ref{Conf-imap4d,,, mailutils, GNU Mailutils Manual} für Details.

@end table
@end deftp

@node Kurznachrichtendienste
@subsection Kurznachrichtendienste

@cindex Messaging
@cindex Jabber
@cindex XMPP
Das Modul @code{(gnu services messaging)} stellt Guix-Dienstdefinitionen für
Kurznachrichtendienste, d.h.@: „Instant Messaging“, zur Verfügung. Zur Zeit
wird hier nur Prosody unterstützt.

@subsubheading Prosody-Dienst

@deffn {Scheme-Variable} prosody-service-type
Dies ist der Diensttyp für den @uref{https://prosody.im,
XMPP-Kommunikationsserver Prosody}. Sein Wert muss ein
@code{prosody-configuration}-Verbundsobjekt wie in diesem Beispiel sein:

@lisp
(service prosody-service-type
         (prosody-configuration
          (modules-enabled (cons* "groups" "mam" %default-modules-enabled))
          (int-components
           (list
            (int-component-configuration
             (hostname "conference.example.net")
             (plugin "muc")
             (mod-muc (mod-muc-configuration)))))
          (virtualhosts
           (list
            (virtualhost-configuration
             (domain "example.net"))))))
@end lisp

Siehe im Folgenden Details über die @code{prosody-configuration}.

@end deffn

Prosody kann mit den Vorgabeeinstellungen ohne viel weitere Konfiguration
benutzt werden. Nur ein @code{virtualhosts}-Feld wird gebraucht: Es legt die
Domain fest, um die sich Prosody kümmert.

Sie können die Korrektheit der generierten Konfigurationsdatei überprüfen,
indem Sie den Befehl @code{prosodyctl check} ausführen.

Prosodyctl hilft auch dabei, Zertifikate aus dem
@code{letsencrypt}-Verzeichnis zu importieren, so dass das
@code{prosody}-Benutzerkonto auf sie Zugriff hat. Siehe
@url{https://prosody.im/doc/letsencrypt}.

@example
prosodyctl --root cert import /etc/letsencrypt/live
@end example

Im Folgenden finden Sie die verfügbaren Konfigurationsparameter. Jeder
Parameterdefinition ist ihr Typ vorangestellt; zum Beispiel bedeutet
@samp{Zeichenketten-Liste foo}, dass der Parameter @code{foo} als Liste von
Zeichenketten angegeben werden sollte. Typangaben, die mit
@code{Vielleicht-} beginnen, stehen für Parameter, die in
@code{prosody.cfg.lua} nicht vorkommen, falls deren Wert als
@code{'disabled} („deaktiviert“) angegeben wurde.

Sie können die Konfiguration auch als eine Zeichenkette festlegen, wenn Sie
über eine alte @code{prosody.cfg.lua}-Datei verfügen, die Sie von einem
anderen System übernehmen möchten; siehe das Ende dieses Abschnitts für
Details.

Der Typ @code{Dateiobjekt} bezeichnet hierbei entweder ein dateiartiges
Objekt (siehe @ref{G-Ausdrücke, dateiartige Objekte}) oder einen
Dateinamen.

@c The following documentation was initially generated by
@c (generate-documentation) in (gnu services messaging).  Manually maintained
@c documentation is better, so we shouldn't hesitate to edit below as
@c needed.  However if the change you want to make to this documentation
@c can be done in an automated way, it's probably easier to change
@c (generate-documentation) than to make it below and have to deal with
@c the churn as Prosody updates.

Verfügbare @code{prosody-configuration}-Felder sind:

@deftypevr {@code{prosody-configuration}-Parameter} „package“ prosody
Das Prosody-Paket.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Dateiname data-path
Der Ort, wo sich Prosodys Verzeichnis zum Speichern von Daten befinden
soll. Siehe @url{https://prosody.im/doc/configure}. Die Vorgabe ist
@samp{"/var/lib/prosody"}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Dateiobjekt-Liste plugin-paths
Zusätzliche Plugin-Verzeichnisse. Plugins werden der Reihe nach in allen
festgelegten Pfaden gesucht. Siehe
@url{https://prosody.im/doc/plugins_directory}. Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Dateiname certificates
Jeder virtuellte Rechner und jede Komponente braucht ein Zertifikat, mit dem
Clients und Server ihre Identität sicher verifizieren können. Prosody lädt
automatisch Zertifikate bzw.@: Schlüssel aus dem hier angegebenen
Verzeichnis. Die Vorgabe ist @samp{"/etc/prosody/certs"}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Zeichenketten-Liste admins
Dies ist eine Liste der Benutzerkonten, die auf diesem Server
Administratoren sind. Beachten Sie, dass Sie die Benutzerkonten noch separat
als Nutzer erzeugen lassen müssen. Siehe @url{https://prosody.im/doc/admins}
and @url{https://prosody.im/doc/creating_accounts}. Ein Beispiel:
@code{(admins '("user1@@example.com" "user2@@example.net"))} Die Vorgabe ist
@samp{()}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Boolescher-Ausdruck use-libevent?
Die Nutzung von libevent aktivieren, damit bessere Leistungsfähigkeit auch
unter hoher Last gewährleistet wird. Siehe
@url{https://prosody.im/doc/libevent}. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Modul-Liste modules-enabled
Die Liste der Module, die Prosody beim Starten lädt. Es sucht nach
@code{mod_modulename.lua} im Plugin-Verzeichnis, also sollten Sie
sicherstellen, dass es dort auch existiert. Dokumentation über Module können
Sie hier finden: @url{https://prosody.im/doc/modules}. Die Vorgabe ist
@samp{("roster" "saslauth" "tls" "dialback" "disco" "carbons" "private"
"blocklist" "vcard" "version" "uptime" "time" "ping" "pep" "register"
"admin_adhoc")}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Zeichenketten-Liste modules-disabled
@samp{"offline"}, @samp{"c2s"} und @samp{"s2s"} werden automatisch geladen,
aber wenn Sie sie deaktivieren möchten, tragen Sie sie einfach in die Liste
ein. Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Dateiobjekt groups-file
Der Pfad zu einer Textdatei, in der gemeinsame Gruppen definiert
werden. Wenn dieser Pfad leer ist, dann tut @samp{mod_groups} nichts. Siehe
@url{https://prosody.im/doc/modules/mod_groups}. Die Vorgabe ist
@samp{"/var/lib/prosody/sharedgroups.txt"}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Boolescher-Ausdruck allow-registration?
Ob nach Voreinstellung @emph{keine} neuen Benutzerkonten angelegt werden
können, aus Sicherheitsgründen. Siehe
@url{https://prosody.im/doc/creating_accounts}. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Vielleicht-„ssl-configuration“ ssl
Dies ist der Teil der Einstellungen, der mit SSL/TLS zu tun hat. Der
Großteil davon ist deaktiviert, damit die Voreinstellungen von Prosody
verwendet werden. Wenn Sie diese Optionen hier nicht völlig verstehen,
sollten Sie sie @emph{nicht} in Ihrer Konfiguration verwenden. Es passiert
leicht, dass Sie die Sicherheit Ihres Servers absenken, indem Sie sie falsch
benutzen. Siehe @url{https://prosody.im/doc/advanced_ssl_config}.

Verfügbare @code{ssl-configuration}-Felder sind:

@deftypevr {@code{ssl-configuration}-Parameter} Vielleicht-Zeichenkette protocol
Dadurch wird entschieden, was für ein Handshake benutzt wird.
@end deftypevr

@deftypevr {@code{ssl-configuration}-Parameter} Vielleicht-Dateiname key
Der Pfad zur Datei mit Ihrem privaten Schlüssel.
@end deftypevr

@deftypevr {@code{ssl-configuration}-Parameter} Vielleicht-Dateiname certificate
Der Pfad zur Datei mit Ihrem Zertifikat.
@end deftypevr

@deftypevr {@code{ssl-configuration}-Parameter} Dateiobjekt capath
Der Pfad zum Verzeichnis, das die Wurzelzertifikate enthält, die Prosody zur
Verifikation der Zertifikate entfernter Server benutzen soll. Die Vorgabe
ist @samp{\"/etc/ssl/certs\"}.
@end deftypevr

@deftypevr {@code{ssl-configuration}-Parameter} Vielleicht-Dateiobjekt cafile
Der Pfad zu einer Datei, in der Wurzelzertifikate enthalten sind, denen
Prosody vertrauen soll. Er verhält sich ähnlich wie @code{capath}, aber alle
Zertifikate stehen hintereinander in der Datei.
@end deftypevr

@deftypevr {@code{ssl-configuration}-Parameter} Vielleicht-Zeichenketten-Liste verify
Eine Liste von Verifikationsoptionen. (Die meisten bilden auf die
@code{set_verify()}-Flags von OpenSSL ab.)
@end deftypevr

@deftypevr {@code{ssl-configuration}-Parameter} Vielleicht-Zeichenketten-Liste options
Eine Liste allgemeiner Optionen, die mit SSL/TLS zu tun haben. Diese bilden
auf OpenSSLs @code{set_options()} ab. Eine vollständige Liste der in LuaSec
verfügbaren Optionen finden Sie im Quellcode von LuaSec.
@end deftypevr

@deftypevr {@code{ssl-configuration}-Parameter} Vielleicht-Nichtnegative-ganze-Zahl depth
Wie lange eine Kette von Zertifikatsautoritäten („Certificate Authorities“)
nach einem passenden Wurzelzertifikat durchsucht wird, dem vertraut wird.
@end deftypevr

@deftypevr {@code{ssl-configuration}-Parameter} Vielleicht-Zeichenkette ciphers
Eine Zeichenkette mit OpenSSL-Ciphers. Damit wird ausgewählt, welche Ciphers
Prosody seinen Clients anbietet, und in welcher Reihenfolge.
@end deftypevr

@deftypevr {@code{ssl-configuration}-Parameter} Vielleicht-Dateiname dhparam
Ein Pfad zu einer Datei, in der Parameter für
Diffie-Hellman-Schlüsselaustausche stehen. Sie können so eine Datei mit
diesem Befehl erzeugen: @code{openssl dhparam -out
/etc/prosody/certs/dh-2048.pem 2048}
@end deftypevr

@deftypevr {@code{ssl-configuration}-Parameter} Vielleicht-Zeichenkette curve
Die Kurve, die für Diffie-Hellman mit elliptischen Kurven verwendet werden
soll. Prosodys Voreinstellung ist @samp{"secp384r1"}.
@end deftypevr

@deftypevr {@code{ssl-configuration}-Parameter} Vielleicht-Zeichenketten-Liste verifyext
A list of ``extra'' verification options.
@end deftypevr

@deftypevr {@code{ssl-configuration}-Parameter} Vielleicht-Zeichenkette password
Das Passwort fÜr verschlüsselte private Schlüssel.
@end deftypevr

@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Boolescher-Ausdruck c2s-require-encryption?
Ob alle Verbindungen von Client zu Server zwangsweise verschlüsselt sein
müssen. Siehe @url{https://prosody.im/doc/modules/mod_tls}. Die Vorgabe ist
@samp{#f}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Zeichenketten-Liste disable-sasl-mechanisms
Welche Mechanismen angeboten werden. Siehe
@url{https://prosody.im/doc/modules/mod_saslauth}. Die Vorgabe ist
@samp{("DIGEST-MD5")}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Boolescher-Ausdruck s2s-require-encryption?
Ob alle Verbindungen von Server zu Server zwangsweise verschlüsselt sein
müssen. Siehe @url{https://prosody.im/doc/modules/mod_tls}. Die Vorgabe ist
@samp{#f}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Boolescher-Ausdruck s2s-secure-auth?
Ob Verschlüsselung und Zertifikatsauthentifizierung verpflichtend
durchgeführt werden müssen. Das bietet das ideale Maß an Sicherheit, jedoch
müssen dann auch die Server, mit denen Sie kommunizieren, Verschlüsselung
unterstützen @emph{und} gültige Zertifikate vorweisen, denen Sie auch
vertrauen. Siehe @url{https://prosody.im/doc/s2s#security}. Die Vorgabe ist
@samp{#f}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Zeichenketten-Liste s2s-insecure-domains
Viele Server bieten keine Unterstützung für Verschlüsselung oder ihre
Zertifikate sind ungültig oder selbstsigniert. Hier können Sie Domains
eintragen, die von der Pflicht zur Authentisierung mit Zertifikaten
ausgenommen werden. Diese werden dann über DNS authentifiziert. Siehe
@url{https://prosody.im/doc/s2s#security}. Die Vorgabe ist @samp{()}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Zeichenketten-Liste s2s-secure-domains
Selbst wenn Sie @code{s2s-secure-auth?} deaktiviert lassen, können Sie noch
immer gültige Zertifikate bei manchen Domains verlangen, indem Sie diese
hier auflisten. Siehe @url{https://prosody.im/doc/s2s#security}. Die Vorgabe
ist @samp{()}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Zeichenkette authentication
Wählen Sie aus, welcher Hintergrunddienst („Provider“) zur Authentifizierung
benutzt werden soll. Das vorgegebene System speichert Passwörter im Klartext
ab und benutzt dafür den in Prosody eingestellten Datenspeicher, um
Authentifizierungsdaten zu speichern. Wenn Sie Ihrem Server kein Vertrauen
entgegenbringen, siehe
@url{https://prosody.im/doc/modules/mod_auth_internal_hashed} für
Informationen, wie Sie den gehashten Hintergrunddienst benutzen. Siehe auch
@url{https://prosody.im/doc/authentication}. Die Vorgabe ist
@samp{"internal_plain"}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Vielleicht-Zeichenkette log
Hiermit werden die Protokollierungsoptionen festgelegt. Fortgeschrittene
Protokollierungskonfigurationen werden vom Prosody-Dienst noch nicht
unterstützt. Siehe @url{https://prosody.im/doc/logging}. Die Vorgabe ist
@samp{"*syslog"}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Dateiname pidfile
Die Datei, in der Prosodys Prozessidentifikator („PID“) abgelegt wird. Siehe
@url{https://prosody.im/doc/modules/mod_posix}. Die Vorgabe ist
@samp{"/var/run/prosody/prosody.pid"}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Vielleicht-Nichtnegative-ganze-Zahl http-max-content-size
Die maximal zulässige Größe des HTTP-Rumpfs (in Bytes).
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Vielleicht-Zeichenkette http-external-url
Manche Module machen auf verschiedene Arten ihre eigene URL verfügbar. Diese
URL setzt sich aus dem benutzten Protokoll, Rechnernamen und Port
zusammen. Wenn Prosody hinter einem Proxy ausgeführt wird, ist die
öffentliche URL stattdessen die @code{http-external-url}. Siehe
@url{https://prosody.im/doc/http#external_url}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} „virtualhost-configuration“-Liste virtualhosts
Der Name eines Rechners („Host“) in Prosody bezeichnet eine Domain, auf der
Benutzerkonten angelegt werden können. Wenn Sie zum Beispiel möchten, dass
Nutzer Adressen haben wie @samp{"john.smith@@example.com"}, dann müssen Sie
einen Rechnernamen @samp{"example.com"} hinzufügen. Alle Optionen in dieser
Liste gelten nur für diesen Rechnernamen.

Note: the name @emph{virtual} host is used in configuration to avoid
confusion with the actual physical host that Prosody is installed on.  A
single Prosody instance can serve many domains, each one defined as a
VirtualHost entry in Prosody's configuration.  Conversely a server that
hosts a single domain would have just one VirtualHost entry.

Siehe @url{https://prosody.im/doc/configure#virtual_host_settings}.

Verfügbare @code{virtualhost-configuration}-Felder sind:

Alle folgenden Felder, wie sie auch die @code{prosody-configuration} hat:
@code{admins}, @code{use-libevent?}, @code{modules-enabled},
@code{modules-disabled}, @code{groups-file}, @code{allow-registration?},
@code{ssl}, @code{c2s-require-encryption?}, @code{disable-sasl-mechanisms},
@code{s2s-require-encryption?}, @code{s2s-secure-auth?},
@code{s2s-insecure-domains}, @code{s2s-secure-domains},
@code{authentication}, @code{log}, @code{http-max-content-size},
@code{http-external-url}, @code{raw-content}, und außerdem:
@deftypevr {@code{virtualhost-configuration}-Parameter} Zeichenkette domain
Die Domain, auf der man Prosody erreichen soll.
@end deftypevr

@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} „int-component-configuration“-Liste int-components
Komponenten sind zusätzliche Dienste auf einem Server, die Clients zur
Verfügung stehen. Sie sind normalerweise auf einer Subdomain des
Hauptservers verfügbar (wie zum Beispiel
@samp{"mycomponent.example.com"}). Beispiele für Komponenten könnten Server
für Chaträume, Benutzerverzeichnisse oder Zugänge („Gateways“) zu anderen
Protokollen sein.

Interne Komponenten werden über Prosody-spezifische Plugins
implementiert. Um eine interne Komponente hinzuzufügen, tragen Sie einfach
das @code{hostname}-Feld für den Rechnernamen und die Plugins ein, die Sie
für die Komponente benutzen möchten.

Siehe @url{https://prosody.im/doc/components}. Die Vorgabe ist @samp{()}.

Verfügbare @code{int-component-configuration}-Felder sind:

Alle folgenden Felder, wie sie auch die @code{prosody-configuration} hat:
@code{admins}, @code{use-libevent?}, @code{modules-enabled},
@code{modules-disabled}, @code{groups-file}, @code{allow-registration?},
@code{ssl}, @code{c2s-require-encryption?}, @code{disable-sasl-mechanisms},
@code{s2s-require-encryption?}, @code{s2s-secure-auth?},
@code{s2s-insecure-domains}, @code{s2s-secure-domains},
@code{authentication}, @code{log}, @code{http-max-content-size},
@code{http-external-url}, @code{raw-content}, und außerdem:
@deftypevr {@code{int-component-configuration}-Parameter} Zeichenkette hostname
Der Rechnername für diese Komponente.
@end deftypevr

@deftypevr {@code{int-component-configuration}-Parameter} Zeichenkette plugin
Das Plugin, das Sie für diese Komponente benutzen möchten.
@end deftypevr

@deftypevr {@code{int-component-configuration}-Parameter} Vielleicht-„mod-muc-configuration“ mod-muc
Multi-User Chat (MUC) ist der Name von Prosodys Modul, womit Sie
Chaträume/Konferenzen für XMPP-Benutzer anbieten lassen können.

General information on setting up and using multi-user chatrooms can be
found in the ``Chatrooms'' documentation
(@url{https://prosody.im/doc/chatrooms}), which you should read if you are
new to XMPP chatrooms.

Siehe auch @url{https://prosody.im/doc/modules/mod_muc}.

Verfügbare @code{mod-muc-configuration}-Felder sind:

@deftypevr {@code{mod-muc-configuration}-Parameter} Zeichenkette name
Der Name, der in Antworten auf die Diensteermittlung benutzt. Die Vorgabe
ist @samp{"Prosody Chatrooms"}.
@end deftypevr

@deftypevr {@code{mod-muc-configuration}-Parameter} Zeichenkette-oder-Boolescher-Ausdruck restrict-room-creation
Für @samp{#t} können nur Administratoren neue Chaträume anlegen. Andernfalls
kann jeder einen Raum anlegen. Der Wert @samp{"local"} schränkt das Anlegen
neuer Räume auf solche Nutzer ein, die zur Eltern-Domain des Dienstes
gehören. Z.B.@: kann @samp{user@@example.com} Räume auf
@samp{rooms.example.com} anlegen. Für den Wert @samp{"admin"} können nur
Dienstadministratoren Chaträume anlegen. Die Vorgabe ist @samp{#f}.
@end deftypevr

@deftypevr {@code{mod-muc-configuration}-Parameter} Nichtnegative-ganze-Zahl max-history-messages
Die Maximalzahl der Nachrichten aus dem Chat-Verlauf, die an ein Mitglied
nachversandt werden, das gerade erst dem Raum beigetreten ist. Die Vorgabe
ist @samp{20}.
@end deftypevr

@end deftypevr

@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} „ext-component-configuration“-Liste ext-components
Externe Komponenten benutzen XEP-0114, das von den meisten eigenständigen
Komponenten unterstützt wird. Um eine externe Komponente hinzuzufügen,
tragen Sie einfach den Rechnernamen ins @code{hostname}-Feld ein. Siehe
@url{https://prosody.im/doc/components}. Die Vorgabe ist @samp{()}.

Verfügbare @code{ext-component-configuration}-Felder sind:

Alle folgenden Felder, wie sie auch die @code{prosody-configuration} hat:
@code{admins}, @code{use-libevent?}, @code{modules-enabled},
@code{modules-disabled}, @code{groups-file}, @code{allow-registration?},
@code{ssl}, @code{c2s-require-encryption?}, @code{disable-sasl-mechanisms},
@code{s2s-require-encryption?}, @code{s2s-secure-auth?},
@code{s2s-insecure-domains}, @code{s2s-secure-domains},
@code{authentication}, @code{log}, @code{http-max-content-size},
@code{http-external-url}, @code{raw-content}, und außerdem:
@deftypevr {@code{ext-component-configuration}-Parameter} Zeichenkette component-secret
Das Passwort, das die Komponente für die Anmeldung benutzt.
@end deftypevr

@deftypevr {@code{ext-component-configuration}-Parameter} Zeichenkette hostname
Der Rechnername für diese Komponente.
@end deftypevr

@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Nichtnegative-ganze-Zahl-Liste component-ports
Der/Die Port(s), wo Prosody auf Verbindungen zu Komponenten lauscht. Die
Vorgabe ist @samp{(5347)}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Zeichenkette component-interface
Die Schnittstelle, auf der Prosody auf Verbindungen zu Komponenten
lauscht. Die Vorgabe ist @samp{"127.0.0.1"}.
@end deftypevr

@deftypevr {@code{prosody-configuration}-Parameter} Vielleicht-Roher-Inhalt raw-content
„Roher Inhalt“, der so, wie er ist, an die Konfigurationsdatei angefügt
wird.
@end deftypevr

Möglicherweise möchten Sie einfach nur eine bestehende
@code{prosody.cfg.lua} zum Laufen bringen. In diesem Fall können Sie ein
@code{opaque-prosody-configuration}-Verbundsobjekt als der Wert des
@code{prosody-service-type} übergeben. Wie der Name schon sagt, bietet eine
opake Konfiguration keinerlei Unterstützung für Reflexion. Verfügbare
@code{opaque-prosody-configuration}-Felder sind:

@deftypevr {@code{opaque-prosody-configuration}-Parameter} „package“ prosody
Das Prosody-Paket.
@end deftypevr

@deftypevr {@code{opaque-prosody-configuration}-Parameter} Zeichenkette prosody.cfg.lua
Der Inhalt, der als @code{prosody.cfg.lua} benutzt werden soll.
@end deftypevr

Wenn Ihre @code{prosody.cfg.lua} zum Beispiel nur aus der leeren
Zeichenkette bestünde, könnten Sie einen Prosody-Dienst wie folgt
instanziieren:

@lisp
(service prosody-service-type
         (opaque-prosody-configuration
          (prosody.cfg.lua "")))
@end lisp

@c end of Prosody auto-generated documentation

@subsubheading BitlBee-Dienst

@cindex IRC (Internet Relay Chat)
@cindex IRC-Zugang („Gateway“)
@url{https://bitlbee.org,BitlBee} ist ein Zugang („Gateway“), der eine
IRC-Schnittstelle für verschiedene Kurznachrichtenprotokolle wie XMPP
verfügbar macht.

@defvr {Scheme-Variable} bitlbee-service-type
Dies ist der Diensttyp für den
@url{https://bitlbee.org,BitlBee-IRC-Zugangsdaemon} (englisch „IRC Gateway
Daemon“). Sein Wert ist eine @code{bitlbee-configuration} (siehe unten).

Damit BitlBee auf Port 6667 vom lokalen Rechner („localhost“) lauscht, fügen
Sie diese Zeile zu Ihrem „services“-Feld hinzu:

@lisp
(service bitlbee-service-type)
@end lisp
@end defvr

@deftp {Datentyp} bitlbee-configuration
Dies ist die Konfiguration für BitlBee. Sie hat folgende Felder:

@table @asis
@item @code{interface} (Vorgabe: @code{"127.0.0.1"})
@itemx @code{port} (Vorgabe: @code{6667})
Lauscht auf der Netzwerkschnittstelle, die der als @var{interface}
angegebenen IP-Adresse entspricht, auf dem angegebenen @var{port}.

Wenn als @var{interface} @code{127.0.0.1} angegeben wurde, können sich nur
lokale Clients verbinden; bei @code{0.0.0.0} können die Verbindungen von
jeder Netzwerkschnittstelle aus hergestellt werden.

@item @code{bitlbee} (Vorgabe: @code{bitlbee})
Das zu benutzende BitlBee-Paket.

@item @code{plugins} (Vorgabe: @code{'()})
Die Liste zu verwendender Plugin-Pakete — z.B.@: @code{bitlbee-discord}.

@item @code{extra-settings} (Vorgabe: @code{""})
Ein Konfigurationsschnipsel, das wortwörtlich in die
BitlBee-Konfigurationsdatei eingefügt wird.
@end table
@end deftp

@subsubheading Quassel-Dienst

@cindex IRC (Internet Relay Chat)
@url{https://quassel-irc.org/,Quassel} ist ein verteilter IRC-Client, was
bedeutet, dass sich ein oder mehr Clients mit dem zentralen Kern verbinden
und die Verbindung wieder trennen können.

@defvr {Scheme-Variable} quassel-service-type
Dies ist der Diensttyp für den Daemon zum IRC-Hintergrundsystem („Backend“)
@url{https://quassel-irc.org/,Quassel}. Sein Wert ist eine
@code{quassel-configuration} (siehe unten).
@end defvr

@deftp {Datentyp} quassel-configuration
Die Konfiguration für Quassel mit den folgenden Feldern:

@table @asis
@item @code{quassel} (Vorgabe: @code{quassel})
Das zu verwendende Quassel-Paket.

@item @code{interface} (Vorgabe: @code{"::,0.0.0.0"})
@item @code{port} (Vorgabe: @code{4242})
Lauscht auf der/den Netzwerkschnittstelle(n), die den in der kommagetrennten
@var{interface}-Liste festgelegten IPv4- oder IPv6-Schnittstellen
entsprechen, auf dem angegebenen @var{port}.

@item @code{loglevel} (Vorgabe: @code{"Info"})
Die gewünschte Detailstufe der Protokollierung. Akzeptiert werden die Werte
Debug (ausführlich zur Fehlersuche), Info, Warning (nur Warnungen und
Fehler) und Error (nur Fehler).
@end table
@end deftp

@node Telefondienste
@subsection Telefondienste

@cindex Murmur (VoIP-Internettelefonie-Server)
@cindex Internettelefonie-Server (VoIP)
Dieser Abschnitt beschreibt, wie Sie einen Murmur-Server einrichten und
ausführen. Murmur ist der Server zur Internettelefonie-Suite
@uref{https://mumble.info, Mumble} für „Voice over IP“ (VoIP).

@deftp {Datentyp} murmur-configuration
Der Diensttyp für den Murmur-Server. Eine Beispielkonfiguration kann so
aussehen:

@lisp
(service murmur-service-type
         (murmur-configuration
          (welcome-text
            "Willkommen zu diesem mit Guix betriebenen Mumble-Server!")
          (cert-required? #t) ;Anmeldungen mit Textpasswort deaktivieren
          (ssl-cert "/etc/letsencrypt/live/mumble.example.com/fullchain.pem")
          (ssl-key "/etc/letsencrypt/live/mumble.example.com/privkey.pem")))
@end lisp

Nachdem Sie Ihr System rekonfiguriert haben, können Sie das Passwort des
Murmur-Administratornutzers @code{SuperUser} mit Hilfe des Befehls von Hand
festlegen, der Ihnen in Murmurs Aktivierungsphase angezeigt wird.

Es wird empfohlen, ein normales Mumble-Benutzerkonto zu registrieren und mit
Administrator- oder Moderatorrechten auszustatten. Sie können auch das
Clientprogramm @code{mumble} benutzen, um sich als neuer normaler Benutzer
anzumelden und zu registrieren, und sich dann abmelden. Im nächsten Schritt
melden Sie sich mit dem Benutzernamen @code{SuperUser} mit dem vorher
festgelegten @code{SuperUser}-Passwort an und statten Ihren registrierten
Mumble-Benutzer mit Administrator- oder Moderatorrechten aus oder erzeugen
ein paar Kanäle.

Verfügbare @code{murmur-configuration}-Felder sind:

@table @asis
@item @code{package} (Vorgabe: @code{mumble})
Das Paket, das @code{bin/murmurd} enthält.

@item @code{user} (Vorgabe: @code{"murmur"})
Der Benutzer, der den Murmur-Server ausführt.

@item @code{group} (Vorgabe: @code{"murmur"})
Die Gruppe des Benutzers, der den Murmur-Server ausführt.

@item @code{port} (Vorgabe: @code{64738})
Der Port, auf dem der Server lauschen wird.

@item @code{welcome-text} (Vorgabe: @code{""})
Der Willkommenstext, der an Clients geschickt wird, sobald sie eine
Verbindung aufgebaut haben.

@item @code{server-password} (Vorgabe: @code{""})
Das Passwort, das Clients eingeben müssen, um sich verbinden zu können.

@item @code{max-users} (Vorgabe: @code{100})
Die Maximalzahl von Nutzern, die gleichzeitig mit dem Server verbunden sein
können.

@item @code{max-user-bandwidth} (Vorgabe: @code{#f})
Wieviele Stimmdaten ein Benutzer pro Sekunde versenden kann.

@item @code{database-file} (Vorgabe: @code{"/var/lib/murmur/db.sqlite"})
Der Dateiname der SQLite-Datenbank. Das Benutzerkonto für den Dienst wird
Besitzer des Verzeichnisses.

@item @code{log-file} (Vorgabe: @code{"/var/log/murmur/murmur.log"})
Der Dateiname der Protokolldatei. Das Benutzerkonto für den Dienst wird
Besitzer des Verzeichnisses.

@item @code{autoban-attempts} (Vorgabe: @code{10})
Wie oft sich ein Benutzer innerhalb des in @code{autoban-timeframe}
angegebenen Zeitrahmens verbinden kann, ohne automatisch für die in
@code{autoban-time} angegebene Zeit vom Server verbannt zu werden.

@item @code{autoban-timeframe} (Vorgabe: @code{120})
Der Zeitrahmen für automatisches Bannen in Sekunden.

@item @code{autoban-time} (Vorgabe: @code{300})
Wie lange in Sekunden ein Client gebannt wird, wenn er die
Autobann-Beschränkungen überschreitet.

@item @code{opus-threshold} (Vorgabe: @code{100})
Der Prozentanteil der Clients, die Opus unterstützen müssen, bevor der
Opus-Audiocodec verwendet wird.

@item @code{channel-nesting-limit} (Vorgabe: @code{10})
Wie tief Kanäle höchstens ineinander verschachtelt sein können.

@item @code{channelname-regex} (Vorgabe: @code{#f})
Eine Zeichenkette in Form eines regulären Ausdrucks von Qt, zu dem
Kanalnamen passen müssen.

@item @code{username-regex} (Vorgabe: @code{#f})
Eine Zeichenkette in Form eines regulären Ausdrucks von Qt, zu dem
Nutzernamen passen müssen.

@item @code{text-message-length} (Vorgabe: @code{5000})
Wieviele Bytes ein Benutzer höchstens in einer Textchatnachricht verschicken
kann.

@item @code{image-message-length} (Vorgabe: @code{(* 128 1024)})
Wieviele Bytes ein Benutzer höchstens in einer Bildnachricht verschicken
kann.

@item @code{cert-required?} (Vorgabe: @code{#f})
Falls dies auf @code{#t} gesetzt ist, werden Clients abgelehnt, die sich
bloß mit Passwörtern authentisieren. Benutzer müssen den
Zertifikatsassistenten abgeschlossen haben, bevor sie sich verbinden können.

@item @code{remember-channel?} (Vorgabe: @code{#f})
Ob sich Murmur für jeden Nutzer den Kanal merken soll, auf dem er sich
zuletzt befunden hat, als er die Verbindung getrennt hat, so dass er wieder
auf dem gemerkten Kanal landet, wenn er dem Server wieder beitritt.

@item @code{allow-html?} (Vorgabe: @code{#f})
Ob HTML in Textnachrichten, Nutzerkommentaren und Kanalbeschreibungen
zugelassen wird.

@item @code{allow-ping?} (Vorgabe: @code{#f})
Wenn es auf wahr gesetzt ist, wird an nicht angemeldete Anwender die
momentane Benutzerzahl, die maximale Benutzerzahl und die maximale
Bandbreite pro Benutzer übermittelt. Im Mumble-Client werden diese
Informationen im Verbinden-Dialog angezeigt.

Wenn diese Einstellung deaktiviert ist, wird der Server nicht in der
öffentlichen Serverliste aufgeführt.

@item @code{bonjour?} (Vorgabe: @code{#f})
Ob der Server im lokalen Netzwerk anderen über das Bonjour-Protokoll
mitgeteilt werden soll.

@item @code{send-version?} (Vorgabe: @code{#f})
Ob die Murmur-Serverversion Clients gegenüber in Ping-Anfragen mitgeteilt
werden soll.

@item @code{log-days} (Vorgabe: @code{31})
Murmur führt in der Datenbank Protokolle, auf die über entfernte
Prozeduraufrufe („Remote Procedure Calls“, kurz RPC) zugegriffen werden
kann. Nach Vorgabe bleiben diese 31 Tage lang erhalten, aber sie können
diese Einstellung auf 0 setzen, damit sie ewig gespeichert werden, oder auf
-1, um @emph{keine} Protokolle in die Datenbank zu schreiben.

@item @code{obfuscate-ips?} (Vorgabe: @code{#t})
Ob IP-Adressen in Protokollen anonymisiert werden sollen, um die
Privatsphäre von Nutzern zu schützen.

@item @code{ssl-cert} (Vorgabe: @code{#f})
Der Dateiname des SSL-/TLS-Zertifikats, das für verschlüsselte Verbindungen
benutzt werden soll.

@lisp
(ssl-cert "/etc/letsencrypt/live/example.com/fullchain.pem")
@end lisp
@item @code{ssl-key} (Vorgabe: @code{#f})
Dateipfad zum privaten Schlüssel für SSL, was für verschlüsselte
Verbindungen benutzt wird.
@lisp
(ssl-key "/etc/letsencrypt/live/example.com/privkey.pem")
@end lisp

@item @code{ssl-dh-params} (Vorgabe: @code{#f})
Dateiname einer PEM-kodierten Datei mit Diffie-Hellman-Parametern für die
SSL-/TLS-Verschlüsselung. Alternativ setzen Sie ihn auf
@code{"@@ffdhe2048"}, @code{"@@ffdhe3072"}, @code{"@@ffdhe4096"},
@code{"@@ffdhe6144"} oder @code{"@@ffdhe8192"}, wodurch die mitgelieferten
Parameter aus RFC 7919 genutzt werden.

@item @code{ssl-ciphers} (Vorgabe: @code{#f})
Die Option @code{ssl-ciphers} wählt aus, welche Cipher-Suites zur Verwendung
in SSL/TLS verfügbar sein sollen.

Diese Option wird in der
@uref{https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT,
OpenSSL-Notation für Cipher-Listen} angegeben.

Es wird empfohlen, dass Sie Ihre Cipher-Zeichenkette mit „openssl ciphers
<Zeichenkette>“ prüfen, bevor Sie sie hier einsetzen, um ein Gefühl dafür zu
bekommen, was für eine Cipher-Suite sie damit bekommen. Nachdem Sie diese
Option festgelegt haben, wird empfohlen, dass Sie Ihr Murmur-Protokoll
durchsehen und sicherstellen, dass Murmur auch wirklich die Cipher-Suites
benutzt, die Sie erwarten.

Beachten Sie: Änderungen hieran können die Rückwärtskompatibilität Ihres
Murmur-Servers beeinträchtigen; dadurch kann es für ältere Mumblie-Clients
unmöglich werden, sich damit zu verbinden.

@item @code{public-registration} (Vorgabe: @code{#f})
Hier muss ein
@code{<murmur-public-registration-configuration>}-Verbundsobjekt oder
@code{#f} angegeben werden.

Sie können Ihren Server optional in die öffentliche Serverliste eintragen
lassen, die der Mumble-Client @code{mumble} beim Start anzeigt. Sie können
Ihren Server nicht registrieren, wenn Sie ein @code{server-password}
festgelegt oder @code{allow-ping} auf @code{#f} gesetzt haben.

Es könnte ein paar Stunden dauern, bis er in der öffentlichen Liste zu
finden ist.

@item @code{file} (Vorgabe: @code{#f})
Optional kann hier eine vorrangig benutzte alternative Konfiguration
festgelegt werden.
@end table
@end deftp

@deftp {Datentyp} murmur-public-registration-configuration
Konfiguration für das öffentliche Registrieren eines Murmur-Dienstes.

@table @asis
@item @code{name}
Dies ist ein Anzeigename für Ihren Server. Er ist nicht zu verwechseln mit
dem Rechnernamen („Hostname“).

@item @code{password}
Ein Passwort, um Ihre Registrierung zu identifizieren. Nachfolgende
Aktualisierungen müssen dasselbe Passwort benutzen. Verlieren Sie Ihr
Passwort nicht.

@item @code{url}
Dies sollte ein Link mit @code{http://} oder @code{https://} auf Ihren
Webauftritt sein.

@item @code{hostname} (Vorgabe: @code{#f})
Nach Vorgabe wird Ihr Server über seine IP-Adresse aufgeführt. Wenn dies
gesetzt ist, wird er stattdessen mit diesem Rechnernamen verknüpft.
@end table
@end deftp



@node Systemüberwachungsdienste
@subsection Systemüberwachungsdienste

@subsubheading Tailon-Dienst

@uref{https://tailon.readthedocs.io/, Tailon} ist eine Web-Anwendung, um
Protokolldateien zu betrachten und zu durchsuchen.

Das folgende Beispiel zeigt, wie Sie den Dienst mit den Vorgabewerten
konfigurieren. Nach Vorgabe kann auf Tailon auf Port 8080 zugegriffen werden
(@code{http://localhost:8080}).

@lisp
(service tailon-service-type)
@end lisp

Im folgenden Beispiel werden mehr Anpassungen an der Tailon-Konfiguration
vorgenommen: @command{sed} gehört dort auch zur Liste der erlaubten Befehle
dazu.

@lisp
(service tailon-service-type
         (tailon-configuration
           (config-file
             (tailon-configuration-file
               (allowed-commands '("tail" "grep" "awk" "sed"))))))
@end lisp


@deftp {Datentyp} tailon-configuration
Der Datentyp, der die Konfiguration von Tailon repräsentiert. Dieser Typ
verfügt über die folgenden Parameter:

@table @asis
@item @code{config-file} (Vorgabe: @code{(tailon-configuration-file)})
Die Konfigurationsdatei, die für Tailon benutzt werden soll. Als Wert kann
ein @dfn{tailon-configuration-file}-Verbundsobjekt oder ein beliebiger
G-Ausdruck dienen (siehe @ref{G-Ausdrücke}).

Um zum Beispiel stattdessen eine lokale Datei zu benutzen, kann von der
Funktion @code{local-file} Gebrauch gemacht werden.

@lisp
(service tailon-service-type
         (tailon-configuration
           (config-file (local-file "./my-tailon.conf"))))
@end lisp

@item @code{package} (Vorgabe: @code{tailon})
Das tailon-Paket, das benutzt werden soll.

@end table
@end deftp

@deftp {Datentyp} tailon-configuration-file
Datentyp, der die Konfigurationsoptionen für Tailon repräsentiert. Dieser
Typ verfügt über die folgenden Parameter:

@table @asis
@item @code{files} (Vorgabe: @code{(list "/var/log")})
Die Liste der anzuzeigenden Dateien. In der Liste dürfen Zeichenketten
stehen, die jeweils für eine einzelne Datei oder ein Verzeichnis stehen,
oder auch Listen, deren erstes Element den Namen eines Unterbereichs angibt
und deren übrige Elemente die Dateien oder Verzeichnisse in diesem
Unterbereich benennen.

@item @code{bind} (Vorgabe: @code{"localhost:8080"})
Adresse und Port, an die sich Tailon binden soll.

@item @code{relative-root} (Vorgabe: @code{#f})
Welcher URL-Pfad für Tailon benutzt werden soll. Wenn Sie hierfür @code{#f}
angeben, wird kein Pfad benutzt.

@item @code{allow-transfers?} (Vorgabe: @code{#t})
Ob es möglich sein soll, die Protokolldateien über die Weboberfläche
herunterzuladen.

@item @code{follow-names?} (Vorgabe: @code{#t})
Ob noch nicht existierende Dateien „getailt“ werden können.

@item @code{tail-lines} (Vorgabe: @code{200})
Wieviele Zeilen am Anfang aus jeder Datei gelesen werden.

@item @code{allowed-commands} (Vorgabe: @code{(list "tail" "grep" "awk")})
Welche Befehle ausgeführt werden dürfen. Nach Vorgabe wird @code{sed}
@emph{nicht} erlaubt.

@item @code{debug?} (Vorgabe: @code{#f})
Legen Sie @code{debug?} als @code{#t} fest, um Nachrichten zur Fehlersuche
anzuzeigen.

@item @code{wrap-lines} (Vorgabe: @code{#t})
Ob lange Zeilen nach der Anfangseinstellung in der Weboberfläche umgebrochen
werden sollen. Setzen Sie es auf @code{#t}, werden Zeilen in der
Anfangseinstellung umgebrochen (die Vorgabe), bei @code{#f} werden sie
anfänglich nicht umgebrochen.

@item @code{http-auth} (Vorgabe: @code{#f})
Welcher HTTP-Authentifizierungstyp benutzt werden soll. Setzen Sie dies auf
@code{#f}, damit sich Benutzer nicht authentisieren müssen (die
Vorgabe). Unterstützte Werte sind @code{"digest"} oder @code{"basic"}.

@item @code{users} (Vorgabe: @code{#f})
Wenn HTTP-Authentifizierung aktiviert ist (siehe @code{http-auth}), wird der
Zugriff nur gewährt, nachdem die hier angegebenen Zugangsinformationen
eingegeben wurden. Um Nutzer hinzuzufügen, geben Sie hier eine Liste von
Paaren an, deren erstes Element jeweils der Benutzername und deren zweites
Element das Passwort ist.

@lisp
(tailon-configuration-file
  (http-auth "basic")
  (users     '(("benutzer1" . "passwort1")
               ("benutzer2" . "passwort2"))))
@end lisp

@end table
@end deftp


@subsubheading Darkstat-Dienst
@cindex darkstat
Darkstat ist ein Netzwerkanalyseprogramm, das Pakete im Datenverkehr
aufzeichnet, Statistiken zur Netzwerknutzung berechnet und über HTTP
Berichte dazu bereitstellt.

@defvar {Scheme-Variable} darkstat-service-type
Dies ist der Diensttyp für den @uref{https://unix4lyfe.org/darkstat/,
darkstat-Dienst}. Sein Wert muss ein
@code{darkstat-configuration}-Verbundsobjekt sein, wie in diesem Beispiel:

@lisp
(service darkstat-service-type
         (darkstat-configuration
           (interface "eno1")))
@end lisp
@end defvar

@deftp {Datentyp} darkstat-configuration
Datentyp, der die Konfiguration von @command{darkstat} repräsentiert.

@table @asis
@item @code{package} (Vorgabe: @code{darkstat})
Welches darkstat-Paket verwendet werden soll.

@item @code{interface}
Datenverkehr an der angegebenen Netzwerkschnittstelle mitschneiden.

@item @code{port} (Vorgabe: @code{"667"})
Bindet die Weboberfläche an den angegebenen Port.

@item @code{bind-address} (Vorgabe: @code{"127.0.0.1"})
Bindet die Weboberfläche an die angegebene Adresse.

@item @code{base} (Vorgabe: @code{"/"})
Geben Sie den Pfad der Basis-URL an. Das kann nützlich sein, wenn auf
@command{darkstat} über einen inversen Proxy („Reverse Proxy“) zugegriffen
wird.

@end table
@end deftp

@subsubheading Prometheus-Node-Exporter-Dienst

@cindex prometheus-node-exporter
Der Prometheus-„Node-Exporter“ stellt Statistiken über Hardware und
Betriebssystem für das Prometheus-Systemüberwachungssystem bereit, die vom
Linux-Kernel geliefert werden. Dieser Dienst sollte auf allen physischen
Netzwerkknoten und virtuellen Maschinen installiert werden, für die eine
Überwachung ihrer Statistiken gewünscht wird.

@defvar {Scheme-Variable} prometheus-node-exporter-service-type
Dies ist der Diensttyp für den
@uref{https://github.com/prometheus/node_exporter/,
„prometheus-node-exporter“-Dienst}. Sein Wert muss ein
@code{prometheus-node-exporter-configuration}-Verbundsobjekt wie in diesem
Beispiel sein:

@lisp
(service prometheus-node-exporter-service-type
         (prometheus-node-exporter-configuration
           (web-listen-address ":9100")))
@end lisp
@end defvar

@deftp {Datentyp} prometheus-node-exporter-configuration
Repräsentiert die Konfiguration von @command{node_exporter}.

@table @asis
@item @code{package} (Vorgabe: @code{go-github-com-prometheus-node-exporter})
Das Paket für den prometheus-node-exporter, was benutzt werden soll.

@item @code{web-listen-address} (Vorgabe: @code{":9100"})
Bindet die Weboberfläche an die angegebene Adresse.

@end table
@end deftp

@subsubheading Zabbix-Server
@cindex Zabbix, Zabbix-Server
Zabbix stellt Metriken zur Systemüberwachung zur Verfügung, unter anderem
die Netzwerk- und Prozessorauslastung sowie den Plattenplatzverbrauch, und
bietet dabei:

@itemize
@item Hohe Leistungsfähigkeit und hohe Kapazität (hunderttausende Geräte können überwacht werden).
@item Automatische Erkennung von Servern, Netzwerkgeräten und -schnittstellen.
@item Systemnahe Erkennung, wodurch automatisch mit der Überwachung neuer Objekte, Dateisysteme, Netzwerkschnittstellen und anderer Dinge begonnen werden kann.
@item Verteilte Überwachung mit zentralisierter Web-Administrierbarkeit.
@item Native Hochleistungsagenten.
@item Berichte zum SLA und über ITIL-KPI-Metriken.
@item Überblickssicht (geschäftlich) auf die überwachten Ressourcen über benutzerdefinierte visuelle Konsolenbildschirme und Dashboards.
@item Entfernte Befehlsausführung über Zabbix-Proxys.
@end itemize

@c %start of fragment

Verfügbare @code{zabbix-server-configuration}-Felder sind:

@deftypevr {@code{zabbix-server-configuration}-Parameter} „package“ zabbix-server
Das zabbix-server-Paket.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Zeichenkette user
Das Benutzerkonto, mit dem der Zabbix-Server ausgeführt wird.

Die Vorgabe ist @samp{"zabbix"}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Gruppe group
Die Gruppe, mit der der Zabbix-Server ausgeführt wird.

Die Vorgabe ist @samp{"zabbix"}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Zeichenkette db-host
Rechnername der Datenbank.

Die Vorgabe ist @samp{"127.0.0.1"}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Zeichenkette db-name
Datenbankname.

Die Vorgabe ist @samp{"zabbix"}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Zeichenkette db-user
Benutzerkonto der Datenbank.

Die Vorgabe ist @samp{"zabbix"}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Zeichenkette db-password
Das Datenbankpasswort. Bitte benutzen Sie stattdessen @code{include-files}
mit @code{DBPassword=SECRET} in einer angegebenen Datei.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Zahl db-port
Datenbank-Portnummer.

Die Vorgabe ist @samp{5432}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Zeichenkette log-type
Gibt an, wohin Protokollnachrichten geschrieben werden.

@itemize @bullet
@item
@code{system} - Syslog.

@item
@code{file} - Die im @code{log-file}-Parameter angegebene Datei.

@item
@code{console} - Standardausgabe.

@end itemize

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Zeichenkette log-file
Protokolldateiname für den @code{file}-Parameter von @code{log-type}.

Die Vorgabe ist @samp{"/var/log/zabbix/server.log"}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Zeichenkette pid-file
Name der PID-Datei.

Die Vorgabe ist @samp{"/var/run/zabbix/zabbix_server.pid"}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Zeichenkette ssl-ca-location
Der Ort mit den Dateien über die Zertifikatsautoritäten (Certificate
Authoritys, CAs) zur Prüfung der SSL-Serverzertifikate.

Die Vorgabe ist @samp{"/etc/ssl/certs/ca-certificates.crt"}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Zeichenkette ssl-cert-location
Der Ort mit den SSL-Client-Zertifikaten.

Die Vorgabe ist @samp{"/etc/ssl/certs"}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Zeichenkette extra-options
Zusätzliche Optionen werden an die Zabbix-Server-Konfigurationsdatei
angehängt.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{zabbix-server-configuration}-Parameter} Einzubindende-Dateien include-files
Sie können einzelne Dateien oder alle Dateien in einem Verzeichnis in die
Konfigurationsdatei einbinden.

Die Vorgabe ist @samp{()}.

@end deftypevr

@c %end of fragment

@subsubheading Zabbix-Agent
@cindex Zabbix, Zabbix-Agent

Der Zabbix-Agent sammelt Informationen für den Zabbix-Server.

@c %start of fragment

Verfügbare @code{zabbix-agent-configuration}-Felder sind:

@deftypevr {@code{zabbix-agent-configuration}-Parameter} „package“ zabbix-agent
Das zabbix-agent-Paket.

@end deftypevr

@deftypevr {@code{zabbix-agent-configuration}-Parameter} Zeichenkette user
Das Benutzerkonto, mit dem der Zabbix-Agent ausgeführt wird.

Die Vorgabe ist @samp{"zabbix"}.

@end deftypevr

@deftypevr {@code{zabbix-agent-configuration}-Parameter} Gruppe group
Die Gruppe, mit der der Zabbix-Agent ausgeführt wird.

Die Vorgabe ist @samp{"zabbix"}.

@end deftypevr

@deftypevr {@code{zabbix-agent-configuration}-Parameter} Zeichenkette hostname
Der eindeutige Rechnername in richtiger Groß-/Kleinschreibung, der für
aktive Überprüfungen benötigt wird und dem im Server eingestellten
Rechnernamen entsprechen muss.

Die Vorgabe ist @samp{"Zabbix server"}.

@end deftypevr

@deftypevr {@code{zabbix-agent-configuration}-Parameter} Zeichenkette log-type
Gibt an, wohin Protokollnachrichten geschrieben werden.

@itemize @bullet
@item
@code{system} - Syslog.

@item
@code{file} - Die im @code{log-file}-Parameter angegebene Datei.

@item
@code{console} - Standardausgabe.

@end itemize

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{zabbix-agent-configuration}-Parameter} Zeichenkette log-file
Protokolldateiname für den @code{file}-Parameter von @code{log-type}.

Die Vorgabe ist @samp{"/var/log/zabbix/agent.log"}.

@end deftypevr

@deftypevr {@code{zabbix-agent-configuration}-Parameter} Zeichenkette pid-file
Name der PID-Datei.

Die Vorgabe ist @samp{"/var/run/zabbix/zabbix_agent.pid"}.

@end deftypevr

@deftypevr {@code{zabbix-agent-configuration}-Parameter} Liste server
Die Liste der IP-Adressen, optional in CIDR-Notation angegeben, oder die
Rechnernamen von Zabbix-Servern und Zabbix-Proxys. Eingehende Verbindungen
werden nur dann angenommen, wenn sie von hier angegebenen Rechnern stammen.

Die Vorgabe ist @samp{("127.0.0.1")}.

@end deftypevr

@deftypevr {@code{zabbix-agent-configuration}-Parameter} Liste server-active
Die Liste aus IP:Port-Paaren (oder Rechnername:Port-Paaren) von
Zabbix-Servern und Zabbix-Proxys für aktive Überprüfungen. Wenn kein Port
angegeben wurde, wird der Vorgabeport benutzt. Wenn dieser Parameter
@emph{nicht} angegeben wird, werden aktive Überprüfungen deaktiviert.

Die Vorgabe ist @samp{("127.0.0.1")}.

@end deftypevr

@deftypevr {@code{zabbix-agent-configuration}-Parameter} Zeichenkette extra-options
Zusätzliche Optionen werden an die Zabbix-Server-Konfigurationsdatei
angehängt.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{zabbix-agent-configuration}-Parameter} Einzubindende-Dateien include-files
Sie können einzelne Dateien oder alle Dateien in einem Verzeichnis in die
Konfigurationsdatei einbinden.

Die Vorgabe ist @samp{()}.

@end deftypevr

@c %end of fragment

@subsubheading Zabbix-Frontend
@cindex Zabbix, Zabbix-Frontend

Dieser Dienst stellt eine Weboberfläche als Vordergrundsystem
(@dfn{Frontend}) für den Zabbix-Server zur Verfügung.

@c %start of fragment

Verfügbare @code{zabbix-front-end-configuration}-Felder sind:

@deftypevr {@code{zabbix-front-end-configuration}-Parameter} „nginx-server-configuration“-Liste nginx
NGINX-Konfiguration.

@end deftypevr

@deftypevr {@code{zabbix-front-end-configuration}-Parameter} Zeichenkette db-host
Rechnername der Datenbank.

Die Vorgabe ist @samp{"localhost"}.

@end deftypevr

@deftypevr {@code{zabbix-front-end-configuration}-Parameter} Zahl db-port
Datenbank-Portnummer.

Die Vorgabe ist @samp{5432}.

@end deftypevr

@deftypevr {@code{zabbix-front-end-configuration}-Parameter} Zeichenkette db-name
Datenbankname.

Die Vorgabe ist @samp{"zabbix"}.

@end deftypevr

@deftypevr {@code{zabbix-front-end-configuration}-Parameter} Zeichenkette db-user
Benutzerkonto der Datenbank.

Die Vorgabe ist @samp{"zabbix"}.

@end deftypevr

@deftypevr {@code{zabbix-front-end-configuration}-Parameter} Zeichenkette db-password
Das Datenbankpasswort. Bitte benutzen Sie stattdessen @code{db-secret-file}.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{zabbix-front-end-configuration}-Parameter} Zeichenkette db-secret-file
Die Datei mit den Geheimnis-Informationen, die an die
@file{zabbix.conf.php}-Datei angehängt wird. Diese Datei enthält
Zugangsdaten für die Nutzung durch das Zabbix-Frontend. Es wird von Ihnen
erwartet, dass Sie sie manuell erzeugen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{zabbix-front-end-configuration}-Parameter} Zeichenkette zabbix-host
Zabbix-Server-Rechnername.

Die Vorgabe ist @samp{"localhost"}.

@end deftypevr

@deftypevr {@code{zabbix-front-end-configuration}-Parameter} Zahl zabbix-port
Zabbix-Server-Port.

Die Vorgabe ist @samp{10051}.

@end deftypevr


@c %end of fragment

@node Kerberos-Dienste
@subsection Kerberos-Dienste
@cindex Kerberos

Das @code{(gnu services kerberos)}-Modul stellt Dienste zur Verfügung, die
mit dem Authentifizierungsprotokoll @dfn{Kerberos} zu tun haben.

@subsubheading Krb5-Dienst

Programme, die eine Kerberos-Clientbibliothek benutzen, erwarten meist, dass
sich eine Konfigurationsdatei in @file{/etc/krb5.conf} befindet. Dieser
Dienst erzeugt eine solche Datei aus einer Definition, die in der
Betriebssystemdeklaration angegebenen wurde. Durch ihn wird kein Daemon
gestartet.

Keine „Schlüsseltabellen“-Dateien werden durch diesen Dienst zur Verfügung
gestellt — Sie müssen sie ausdrücklich selbst anlegen. Dieser Dienst
funktioniert bekanntermaßen mit der MIT-Clientbibliothek
@code{mit-krb5}. Andere Implementierungen wurden nicht getestet.

@defvr {Scheme-Variable} krb5-service-type
Ein Diensttyp für Kerberos-5-Clients.
@end defvr

@noindent
Hier ist ein Beispiel, wie man ihn benutzt:
@lisp
(service krb5-service-type
         (krb5-configuration
          (default-realm "EXAMPLE.COM")
          (allow-weak-crypto? #t)
          (realms (list
                   (krb5-realm
                    (name "EXAMPLE.COM")
                    (admin-server "groucho.example.com")
                    (kdc "karl.example.com"))
                   (krb5-realm
                    (name "ARGRX.EDU")
                    (admin-server "kerb-admin.argrx.edu")
                    (kdc "keys.argrx.edu"))))))
@end lisp

@noindent
Dieses Beispiel stellt eine Client-Konfiguration für Kerberos@tie{}5 zur
Verfügung, mit der:
@itemize
@item Zwei Administrationsbereiche erkannt werden, nämlich: „EXAMPLE.COM“
und „ARGRX.EDU“, die beide verschiedene Administrationsserver und
Schlüsselverteilungszentren haben,
@item als Vorgabe der Administrationsbereich „EXAMPLE.COM“ verwendet wird,
falls der Administrationsbereich von Clients nicht ausdrücklich angegeben
wurde, und
@item auch Dienste angenommen werden, die nur Verschlüsselungstypen unterstützen, die bekanntermaßen schwach sind.
@end itemize

Die Typen @code{krb5-realm} und @code{krb5-configuration} haben viele
Felder. Hier werden nur die am häufigsten benutzten beschrieben. Eine
vollständige Liste und jeweils detailliertere Erklärungen finden Sie in der
Dokumentation von
@uref{https://web.mit.edu/kerberos/krb5-devel/doc/admin/conf_files/krb5_conf.html,,krb5.conf}
vom MIT.


@deftp {Datentyp} krb5-realm
@cindex Administrationsbereich, Kerberos
@table @asis
@item @code{name}
Dieses Feld enthält eine Zeichenkette, die den Namen des
Administrationsbereichs bezeichnet. Üblich ist, den vollständigen DNS-Namen
(„Fully Qualified DNS Name“) Ihrer Organisation nur in Großbuchstaben zu
benutzen.

@item @code{admin-server}
Dieses Feld enthält eine Zeichenkette, die den Rechner benennt, auf dem der
Administrationsserver läuft.

@item @code{kdc}
Dieses Feld enthält eine Zeichenkette, die das Schlüsselverteilungszentrum
für den Administrationsbereich angibt.
@end table
@end deftp

@deftp {Datentyp} krb5-configuration

@table @asis
@item @code{allow-weak-crypto?} (Vorgabe: @code{#f})
Wenn diese Option auf @code{#t} gesetzt ist, werden auch Dienste akzeptiert,
die nur Verschlüsselungsalgorithmen anbieten, die bekanntermaßen schwach
sind.

@item @code{default-realm} (Vorgabe: @code{#f})
Dieses Feld sollte eine Zeichenkette enthalten, die den voreingestellten
Kerberos-Administrationsbereich für den Client angibt. Sie sollten in diesem
Feld den Namen Ihres Kerberos-Administrationsbereichs eintragen. Wenn der
Wert @code{#f} ist, dann muss ein Administrationsbereich mit jedem
Kerberos-Prinzipal zusammen angegeben werden, wenn Programme wie
@command{kinit} aufgerufen werden.

@item @code{realms}
Hierin sollte eine nichtleere Liste von je einem @code{krb5-realm}-Objekt
pro Administrationsbereich stehen, auf den Clients zugreifen
können. Normalerweise hat einer davon ein @code{name}-Feld, das mit dem
@code{default-realm}-Feld übereinstimmt.
@end table
@end deftp


@subsubheading PAM-krb5-Dienst
@cindex pam-krb5

Der @code{pam-krb5}-Dienst ermöglicht es, bei der Anmeldung und
Passwortverwaltung Benutzer über Kerberos zu authentifizieren. Sie brauchen
diesen Dienst, damit Anwendungen, die PAM benutzen können, Nutzer über
Kerberos authentifizieren können.

@defvr {Scheme-Variable} pam-krb5-service-type
Ein Diensttyp für das PAM-Modul zu Kerberos@tie{}5.
@end defvr

@deftp {Datentyp} pam-krb5-configuration
Der Datentyp, der die Konfiguration des PAM-Moduls für Kerberos 5
repräsentiert. Dieser Typ hat die folgenden Parameter:
@table @asis
@item @code{pam-krb5} (Vorgabe: @code{pam-krb5})
Das pam-krb5-Paket, das benutzt werden soll.

@item @code{minimum-uid} (Vorgabe: @code{1000})
Der kleinste Benutzeridentifikator (UID), für den Authentifizierung über
Kerberos versucht werden soll. Lokale Benutzerkonten mit niedrigeren
Zahlwerten können sich nicht authentisieren und bekommen dazu keine Meldung
angezeigt.
@end table
@end deftp


@node LDAP-Dienste
@subsection LDAP-Dienste
@cindex LDAP
@cindex nslcd, LDAP-Dienst

Das Modul @code{(gnu services authentication)} stellt den Diensttyp
@code{nslcd-service-type} zur Verfügung, mit dem sich Benutzer gegenüber
einem LDAP-Server authentisieren können. Sie möchten dabei wahrscheinlich
nicht nur den Dienst konfigurieren, sondern auch @code{ldap} als einen
Namensdienst („Name Service“) für den Name Service Switch hinzufügen. Siehe
@ref{Name Service Switch} für Details.

Hier ist ein Beispiel für eine einfache Betriebssystemdeklaration mit einer
der Vorgabe entsprechenden Konfiguration des @code{nslcd-service-type} und
einer Konfiguration des Name Service Switch, die den
@code{ldap}-Namensdienst zuletzt prüft:

@lisp
(use-service-modules authentication)
(use-modules (gnu system nss))
...
(operating-system
  ...
  (services
    (cons*
      (service nslcd-service-type)
      (service dhcp-client-service-type)
      %base-services))
  (name-service-switch
   (let ((services (list (name-service (name "db"))
                         (name-service (name "files"))
                         (name-service (name "ldap")))))
     (name-service-switch
      (inherit %mdns-host-lookup-nss)
      (password services)
      (shadow   services)
      (group    services)
      (netgroup services)
      (gshadow  services)))))
@end lisp

@c %start of generated documentation for nslcd-configuration

Verfügbare @code{nslcd-configuration}-Felder sind:

@deftypevr {@code{nslcd-configuration}-Parameter} „package“ nss-pam-ldapd
Das @code{nss-pam-ldapd}-Paket, was benutzt werden soll.

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zahl threads
Die Anzahl zu startender Threads, die Anfragen bearbeiten und LDAP-Abfragen
durchführen können. Jeder Thread öffnet eine separate Verbindung zum
LDAP-Server. Die Vorgabe ist, 5 Threads zu starten.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Zeichenkette uid
Gibt den Benutzeridentifikator an, unter dem der Daemon ausgeführt werden
soll.

Die Vorgabe ist @samp{"nslcd"}.

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Zeichenkette gid
Gibt den Gruppenidentifikator an, unter dem der Daemon ausgeführt werden
soll.

Die Vorgabe ist @samp{"nslcd"}.

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Protokolleinstellung log
This option controls the way logging is done via a list containing SCHEME
and LEVEL.  The SCHEME argument may either be the symbols @samp{none} or
@samp{syslog}, or an absolute file name.  The LEVEL argument is optional and
specifies the log level.  The log level may be one of the following symbols:
@samp{crit}, @samp{error}, @samp{warning}, @samp{notice}, @samp{info} or
@samp{debug}.  All messages with the specified log level or higher are
logged.

Die Vorgabe ist @samp{("/var/log/nslcd" info)}.

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Liste uri
Die Liste der LDAP-Server-URIs. Normalerweise wird nur der erste Server
benutzt; nachfolgende Server dienen als Ersatz.

Die Vorgabe ist @samp{("ldap://localhost:389/")}.

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette ldap-version
Die zu benutzende Version des LDAP-Protokolls. Nach Vorgabe wird die höchste
Version benutzt, die von der LDAP-Bibliothek unterstützt wird.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette binddn
Gibt den „Distinguished Name“ an, der an den Verzeichnisserver („Directory
Server“) gebunden wird, um Einträge aufzulösen. Nach Vorgabe wird anonym
gebunden.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette bindpw
Gibt die Zugangsinformationen an, mit denen gebunden wird. Diese Einstellung
ist nur dann wirksam, wenn sie mit binddn benutzt wird.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette rootpwmoddn
Gibt den „Distinguished Name“ an, der benutzt wird, wenn der
Administratornutzer „root“ versucht, das Passwort eines Benutzers mit Hilfe
des PAM-Moduls zu verändern.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette rootpwmodpw
Gibt die Zugangsinformationen an, die benutzt werden, wenn der
Administratornutzer „root“ versucht, das Passwort eines Benutzers zu
verändern. Diese Einstellung ist nur dann wirksam, wenn sie mit rootpwmoddn
benutzt wird.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette sasl-mech
Gibt an, welcher SASL-Mechanismus benutzt werden soll, um Authentifizierung
über SASL durchzuführen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette sasl-realm
Gibt den SASL-Administrationsbereich an, um Authentifizierungen über SASL
durchzuführen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette sasl-authcid
Gibt die Authentisierungsidentität an, um Authentifizierungen über SASL
durchzuführen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette sasl-authzid
Gibt die Autorisierungsidentität an, um Authentifizierungen über SASL
durchzuführen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Boolescher-Ausdruck sasl-canonicalize?
Legt fest, ob der kanonische Rechnername („Hostname“) des LDAP-Servers
ermittelt werden soll. Wenn ja, wird die LDAP-Bibliothek eine inverse
Auflösung („Reverse Lookup“) des Rechnernamens durchführen. Die Vorgabe ist,
es der LDAP-Bibliothek zu überlassen, ob eine solche Überprüfung
durchgeführt wird.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette krb5-ccname
Legt den Namen für den Zwischenspeicher der GSS-API-Kerberos-Zugangsdaten
fest.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Zeichenkette base
Basis für die Verzeichnissuche.

Vorgegeben ist @samp{"dc=example,dc=com"}.

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Suchbereichs-Einstellung scope
Legt den Suchbereich fest als subtree (Teilbaum), onelevel (eine Ebene),
base (Basis) oder children (Kinder). Die Vorgabe für den Suchbereich ist
subtree; base ist fast nie geeignet für Namensdienstauflösungen; children
wird nicht auf allen Servern unterstützt.

Die Vorgabe ist @samp{(subtree)}.

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Deref-Einstellung deref
Legt die Richtlinie für das Dereferenzieren von Alias-Namen fest. Die
vorgegebene Richtlinie ist, Alias-Namen niemals zu dereferenzieren.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Boolescher-Ausdruck referrals
Gibt an, ob Verweise („Referrals“) automatisch verfolgt werden sollen. Das
vorgegebene Verhalten ist, sie zu verfolgen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Liste-von-Abbildungseinträgen maps
Diese Option ermöglicht es, eigene Attribute bei der Auflösung anstelle der
vorgegebenen RFC-2307-Attribute zu verwenden. Es ist eine Liste von
Abbildungen („Maps“), von denen jede aus dem Namen der Abbildung, dem
abzubildenden RFC-2307-Attribut und einem Anfrageausdruck besteht, mit dem
es anhand des Verzeichnisses aufgelöst wird.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Liste-von-Filtereinträgen filters
Eine Liste von Filtern, von denen jeder aus dem Namen einer Abbildung, auf
die sich der Filter auswirkt, und einem LDAP-Suchfilter-Ausdruck besteht.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zahl bind-timelimit
Gibt die Zeitbeschränkung in Sekunden an, wie lange eine Verbindung zum
Verzeichnisserver dauern darf. Die Vorgabe ist 10 Sekunden.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zahl timelimit
Gibt die Zeitbeschränkung (in Sekunden) an, wie lange auf eine Antwort vom
LDAP-Server gewartet wird. Ein Wert von null, was die Vorgabe ist, bewirkt,
dass beliebig lange gewartet wird, bis Suchen abgeschlossen sind.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zahl idle-timelimit
Gibt an, wie lange bei Inaktivität gewartet wird (in Sekunden), bis die
Verbindung zum LDAP-Server geschlossen wird. Die Vorgabe ist, dass es zu
keiner Zeitüberschreitung bei Verbindungen kommen kann.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zahl reconnect-sleeptime
Gibt die Anzahl an Sekunden an, wie lange „schlafend“ gewartet wird, wenn zu
@emph{keinem} LDAP-Server eine Verbindung hergestellt werden kann. Die
Vorgabe ist, zwischen dem ersten Fehlversuch und dem ersten neuen Versuch
1@tie{}Sekunde zu warten.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zahl reconnect-retrytime
Gibt an, nach wieviel Zeit der LDAP-Server als dauerhaft nicht verfügbar
angesehen wird. Sobald dieser Fall eintritt, wird eine Verbindungsaufnahme
nur noch einmal pro weiterem Ablauf dieser Zeitperiode versucht. Der
Vorgabewert beträgt 10@tie{}Sekunden.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-SSL-Einstellung ssl
Gibt an, ob SSL/TLS benutzt werden soll oder nicht (die Vorgabe ist, es
@emph{nicht} zu benutzen). Wenn 'start-tls angegeben wird, dann wird
StartTLS statt schlichtem LDAP über SSL benutzt.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-„tls-reqcert“-Einstellung tls-reqcert
Gibt an, welche Überprüfungen auf einem vom Server empfangenen Zertifikat
durchgeführt werden sollen. Die Bedeutung der Werte wird auf der
Handbuchseite zu ldap.conf(5) beschrieben.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette tls-cacertdir
Gibt das Verzeichnis an, das X.509-Zertifikate zur Authentifikation von
Kommunikationspartnern enthält. Dieser Parameter wird ignoriert, wenn Sie
GnuTLS benutzen lassen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette tls-cacertfile
Gibt den Dateipfad zu dem X.509-Zertifikat zur Authentifikation von
Kommunikationspartnern an.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette tls-randfile
Gibt den Pfad zu einer Entropiequelle an. Dieser Parameter wird ignoriert,
wenn Sie GnuTLS benutzen lassen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette tls-ciphers
Gibt als eine Zeichenkette an, welche Ciphers für TLS benutzt werden sollen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette tls-cert
Gibt den Pfad zu der Datei an, die das lokale Zertifikat zur
TLS-Authentisierung als Client enthält.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette tls-key
Gibt den Pfad zu der Datei an, die den privaten Schlüssel zur
TLS-Authentisierung als Client enthält.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zahl pagesize
Geben Sie hier eine Zahl größer als 0 an, um beim LDAP-Server seitenweise
Antworten anzufordern, entsprechend RFC2696. Die Vorgabe (0) fordert alle
Ergebnisse auf einmal an.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-„ignore-users“-Einstellung nss-initgroups-ignoreusers
Diese Einstellung verhindert, dass für die angegebenen Benutzer die
Gruppenmitgliedschaft über LDAP aufgelöst wird. Alternativ kann der Wert
'all-local verwendet werden. Für diesen Wert erzeugt nslcd eine vollständige
Liste aller Nicht-LDAP-Benutzer, wenn es startet.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zahl nss-min-uid
Diese Einstellung lässt sicherstellen, dass LDAP-Benutzer, deren numerischer
Benutzeridentifikator kleiner als der angegebene Wert ist, ignoriert werden.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zahl nss-uid-offset
Diese Einstellung gibt einen Versatz an, der auf den numerischen
Benutzeridentifikator jedes LDAP-Nutzers aufaddiert wird. Damit können
Konflikte zwischen den Benutzeridentifikatoren lokaler Benutzerkonten und
LDAP vermieden werden.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zahl nss-gid-offset
Diese Einstellung gibt einen Versatz an, der auf den numerischen
Gruppenidentifikator jedes LDAP-Nutzers aufaddiert wird. Damit können
Konflikte zwischen den Gruppenidentifikatoren lokaler Gruppen und LDAP
vermieden werden.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Boolescher-Ausdruck nss-nested-groups
Wenn diese Einstellung aktiviert ist, können die Attribute einer Gruppe auch
wieder Verweise auf eine andere Gruppe sein. Attribute darin verschachtelter
(„nested“) Gruppen werden für die Gruppe auf höherer Ebene ebenfalls
zurückgeliefert und Elterngruppen werden zurückgeliefert, wenn nach den
Gruppen eines bestimmten Nutzers gesucht wird. Die Vorgabe ist, keine
zusätzlichen Suchen nach verschachtelten Gruppen durchzuführen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Boolescher-Ausdruck nss-getgrent-skipmembers
Wenn diese Einstellung aktiviert ist, wird die Liste der Gruppenmitglieder
beim Auflösen von Gruppen nicht angefragt. Zu welchen Gruppen ein Benutzer
gehört, kann weiterhin angefragt werden, damit dem Benutzer bei der
Anmeldung wahrscheinlich dennoch die richtigen Gruppen zugeordnet werden.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Boolescher-Ausdruck nss-disable-enumeration
Wenn diese Einstellung aktiviert ist, scheitern Funktionen, die alle
Benutzer-/Gruppeneinträge aus dem Verzeichnis zu laden versuchen. Dadurch
kann die Auslastung von LDAP-Servern wesentlich reduziert werden, wenn es
eine große Anzahl von Benutzern und/oder Gruppen gibt. Diese Einstellung
wird für die meisten Konfigurationen @emph{nicht} empfohlen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette validnames
Mit dieser Einstellung kann festgelegt werden, wie Benutzer- und
Gruppennamen vom System geprüft werden. Das angegebene Muster wird zur
Prüfung aller Benutzer- und Gruppennamen benutzt, die über LDAP angefragt
und zurückgeliefert werden.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Boolescher-Ausdruck ignorecase
Hiermit wird festgelegt, ob bei Suchen nach passenden Einträgen @emph{nicht}
auf Groß- und Kleinschreibung geachtet wird. Wenn Sie dies aktivieren,
könnte es zu Sicherheitslücken kommen, mit denen Autorisierungen umgangen
(„Authorization Bypass“) oder der nscd-Zwischenspeicher vergiftet werden
kann („Cache Poisoning“), was gezielte Überlastungen ermöglichen würde
(„Denial of Service“).

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Boolescher-Ausdruck pam-authc-ppolicy
Mit dieser Einstellung wird festgelegt, ob Passwortrichtliniensteuerung vom
LDAP-Server angefragt und behandelt wird, wenn Nutzer authentifiziert
werden.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette pam-authc-search
Nach Vorgabe führt nslcd eine LDAP-Suche nach jeder BIND-Operation (zur
Authentisierung) durch, um sicherzustellen, dass die BIND-Operation
erfolgreich durchgeführt wurde. Die vorgegebene Suche ist eine einfache
Überprüfung, ob der DN eines Benutzers existiert. Hier kann ein Suchfilter
angegeben werden, der stattdessen benutzt werden soll. Er sollte mindestens
einen Eintrag liefern.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette pam-authz-search
Diese Einstellung ermöglicht flexible Feineinstellungen an der
durchzuführenden Autorisierungsprüfung. Der angegebene Suchfilter wird
ausgeführt, woraufhin Zugriff gewährt wird, wenn mindestens ein Eintrag
passt, andernfall wird der Zugriff verweigert.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Vielleicht-Zeichenkette pam-password-prohibit-message
Wenn diese Einstellung festgelegt wurde, werden Passwortänderungen über
pam_ldap abgelehnt und dem Anwender wird stattdessen die festgelegte
Nachricht gezeigt. Die Nachricht kann benutzt werden, um den Anwender auf
alternative Methoden aufmerksam zu machen, wie er sein Passwort ändern kann.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{nslcd-configuration}-Parameter} Liste pam-services
Die Liste der PAM-Dienstnamen, für die eine LDAP-Authentisierung als
ausreichend gilt.

Die Vorgabe ist @samp{()}.

@end deftypevr

@c %end of generated documentation for nslcd-configuration


@node Web-Dienste
@subsection Web-Dienste

@cindex Web
@cindex WWW
@cindex HTTP
Das Modul @code{(gnu services web)} stellt den Apache-HTTP-Server, den
nginx-Webserver und auch einen fastcgi-Wrapperdienst bereit.

@subsubheading Apache-HTTP-Server

@deffn {Scheme-Variable} httpd-service-type
Diensttyp für den @uref{https://httpd.apache.org/,Apache-HTTP-Server}
@dfn{httpd}. Der Wert dieses Diensttyps ist ein
@code{httpd-configuration}-Verbund.

Es folgt ein einfaches Beispiel der Konfiguration.

@lisp
(service httpd-service-type
         (httpd-configuration
           (config
             (httpd-config-file
               (server-name "www.example.com")
               (document-root "/srv/http/www.example.com")))))
@end lisp

Andere Dienste können den @code{httpd-service-type} auch erweitern, um etwas
zur Konfiguration hinzuzufügen.

@lisp
(simple-service 'www.example.com-server httpd-service-type
                (list
                  (httpd-virtualhost
                    "*:80"
                    (list (string-join '("ServerName www.example.com"
                                          "DocumentRoot /srv/http/www.example.com")
                                       "\n")))))
@end lisp
@end deffn

Nun folgt eine Beschreibung der Verbundstypen @code{httpd-configuration},
@code{httpd-module}, @code{httpd-config-file} und @code{httpd-virtualhost}.

@deffn {Datentyp} httpd-configuration
Dieser Datentyp repräsentiert die Konfiguration des httpd-Dienstes.

@table @asis
@item @code{package} (Vorgabe: @code{httpd})
Das zu benutzende httpd-Paket.

@item @code{pid-file} (Vorgabe: @code{"/var/run/httpd"})
Die vom Shepherd-Dienst benutzte PID-Datei.

@item @code{config} (Vorgabe: @code{(httpd-config-file)})
Die vom httpd-Dienst zu benutzende Konfigurationsdatei. Vorgegeben ist ein
@code{httpd-config-file}-Verbundsobjekt, aber als Wert kann auch ein anderer
G-Ausdruck benutzt werden, der eine Datei erzeugt, zum Beispiel ein
@code{plain-file}. Es kann auch eine Datei außerhalb des Stores mit einer
Zeichenkette angegeben werden.

@end table
@end deffn

@deffn {Datentyp} httpd-module
Dieser Datentyp steht für ein Modul des httpd-Dienstes.

@table @asis
@item @code{name}
Der Name des Moduls.

@item @code{file}
Die Datei, in der das Modul steht. Sie kann relativ zum benutzten
httpd-Paket oder als absoluter Pfad einer Datei oder als ein G-Ausdruck für
eine Datei im Store angegeben werden, zum Beispiel @code{(file-append
mod-wsgi "/modules/mod_wsgi.so")}.

@end table
@end deffn

@defvr {Scheme-Variable} %default-httpd-modules
Eine vorgegebene Liste von @code{httpd-module}-Objekten.
@end defvr

@deffn {Datentyp} httpd-config-file
Dieser Datentyp repräsentiert eine Konfigurationsdatei für den httpd-Dienst.

@table @asis
@item @code{modules} (Vorgabe: @code{%default-httpd-modules})
Welche Module geladen werden sollen. Zusätzliche Module können hier
eingetragen werden oder durch eine zusätzliche Konfigurationsangabe geladen
werden.

Um zum Beispiel Anfragen nach PHP-Dateien zu behandeln, können Sie das Modul
@code{mod_proxy_fcgi} von Apache zusammen mit @code{php-fpm-service-type}
benutzen:

@lisp
(service httpd-service-type
         (httpd-configuration
          (config
           (httpd-config-file
            (modules (cons*
                      (httpd-module
                       (name "proxy_module")
                       (file "modules/mod_proxy.so"))
                      (httpd-module
                       (name "proxy_fcgi_module")
                       (file "modules/mod_proxy_fcgi.so"))
                      %default-httpd-modules))
            (extra-config (list "\
<FilesMatch \\.php$>
    SetHandler \"proxy:unix:/var/run/php-fpm.sock|fcgi://localhost/\"
</FilesMatch>"))))))
(service php-fpm-service-type
         (php-fpm-configuration
          (socket "/var/run/php-fpm.sock")
          (socket-group "httpd")))
@end lisp

@item @code{server-root} (Vorgabe: @code{httpd})
Die @code{ServerRoot} in der Konfigurationsdatei, vorgegeben ist das
httpd-Paket. Direktiven wie @code{Include} und @code{LoadModule} werden
relativ zur ServerRoot interpretiert.

@item @code{server-name} (Vorgabe: @code{#f})
Der @code{ServerName} in der Konfigurationsdatei, mit dem das Anfrageschema
(Request Scheme), der Rechnername (Hostname) und Port angegeben wird, mit
denen sich der Server identifiziert.

Es muss nicht als Teil der Server-Konfiguration festgelegt werden, sondern
kann auch in virtuellen Rechnern (Virtual Hosts) festgelegt
werden. Vorgegeben ist @code{#f}, wodurch kein @code{ServerName} festgelegt
wird.

@item @code{document-root} (Vorgabe: @code{"/srv/http"})
Das @code{DocumentRoot}-Verzeichnis, in dem sich die Dateien befinden, die
man vom Server abrufen kann.

@item @code{listen} (Vorgabe: @code{'("80")})
Die Liste der Werte für die @code{Listen}-Direktive in der
Konfigurationsdatei. Als Wert sollte eine Liste von Zeichenketten angegeben
werden, die jeweils die Portnummer, auf der gelauscht wird, und optional
auch die zu benutzende IP-Adresse und das Protokoll angeben.

@item @code{pid-file} (Vorgabe: @code{"/var/run/httpd"})
Hiermit wird die PID-Datei als @code{PidFile}-Direktive angegeben. Der Wert
sollte mit der @code{pid-file}-Datei in der @code{httpd-configuration}
übereinstimmen, damit der Shepherd-Dienst richtig konfiguriert ist.

@item @code{error-log} (Vorgabe: @code{"/var/log/httpd/error_log"})
Der Ort, an den der Server mit der @code{ErrorLog}-Direktive
Fehlerprotokolle schreibt.

@item @code{user} (Vorgabe: @code{"httpd"})
Der Benutzer, als der der Server durch die @code{User}-Direktive Anfragen
beantwortet.

@item @code{group} (Vorgabe: @code{"httpd"})
Die Gruppe, mit der der Server durch die @code{Group}-Direktive Anfragen
beantwortet.

@item @code{extra-config} (Vorgabe: @code{(list "TypesConfig etc/httpd/mime.types")})
Eine flache Liste von Zeichenketten und G-Ausdrücken, die am Ende der
Konfigurationsdatei hinzugefügt werden.

Alle Werte, mit denen dieser Dienst erweitert wird, werden an die Liste
angehängt.

@end table
@end deffn

@deffn {Datentyp} httpd-virtualhost
Dieser Datentyp repräsentiert einen Konfigurationsblock für einen virtuellen
Rechner (Virtual Host) des httpd-Dienstes.

Sie sollten zur zusätzlichen Konfiguration extra-config des httpd-Dienstes
hinzugefügt werden.

@lisp
(simple-service 'www.example.com-server httpd-service-type
                (list
                  (httpd-virtualhost
                    "*:80"
                    (list (string-join '("ServerName www.example.com"
                                          "DocumentRoot /srv/http/www.example.com")
                                       "\n")))))
@end lisp

@table @asis
@item @code{addresses-and-ports}
Adressen und Ports für die @code{VirtualHost}-Direktive.

@item @code{contents}
Der Inhalt der @code{VirtualHost}-Direktive. Er sollte als Liste von
Zeichenketten und G-Ausdrücken angegeben werden.

@end table
@end deffn

@subsubheading NGINX

@deffn {Scheme-Variable} nginx-service-type
Diensttyp für den @uref{https://nginx.org/,NGinx-Webserver}. Der Wert des
Dienstes ist ein @code{<nginx-configuration>}-Verbundsobjekt.

Es folgt ein einfaches Beispiel der Konfiguration.

@lisp
(service nginx-service-type
         (nginx-configuration
           (server-blocks
             (list (nginx-server-configuration
                     (server-name '("www.example.com"))
                     (root "/srv/http/www.example.com"))))))
@end lisp

Außer durch direktes Hinzufügen von Server-Blöcken zur Dienstkonfiguration
kann der Dienst auch durch andere Dienste erweitert werden, um Server-Blöcke
hinzuzufügen, wie man im folgenden Beispiel sieht:

@lisp
(simple-service 'my-extra-server nginx-service-type
                (list (nginx-server-configuration
                        (root "/srv/http/extra-website")
                        (try-files (list "$uri" "$uri/index.html")))))
@end lisp
@end deffn

Beim Starten hat @command{nginx} seine Konfigurationsdatei noch nicht
gelesen und benutzt eine vorgegebene Datei, um Fehlermeldungen zu
protokollieren. Wenn er seine Konfigurationsdatei nicht laden kann, landen
Fehlermeldungen also dort. Nachdem die Konfigurationsdatei geladen ist,
werden Fehlerprotokolle nach Voreinstellung in die Datei geschrieben, die in
der Konfiguration angegeben ist. In unserem Fall können Sie Fehlermeldungen
beim Starten in @file{/var/run/nginx/logs/error.log} finden und nachdem die
Konfiguration eingelesen wurde, finden Sie sie in
@file{/var/log/nginx/error.log}. Letzterer Ort kann mit der
Konfigurationsoption @var{log-directory} geändert werden.

@deffn {Datentyp} nginx-configuration
Dieser Datentyp repräsentiert die Konfiguration von NGinx. Ein Teil der
Konfiguration kann hierüber und über die anderen zu Ihrer Verfügung
stehenden Verbundstypen geschehen, alternativ können Sie eine
Konfigurationsdatei mitgeben.

@table @asis
@item @code{nginx} (Vorgabe: @code{nginx})
Das zu benutzende nginx-Paket.

@item @code{log-directory} (Vorgabe: @code{"/var/log/nginx"})
In welches Verzeichnis NGinx Protokolldateien schreiben wird.

@item @code{run-directory} (Vorgabe: @code{"/var/run/nginx"})
In welchem Verzeichnis NGinx eine PID-Datei anlegen und temporäre Dateien
ablegen wird.

@item @code{server-blocks} (Vorgabe: @code{'()})
Eine Liste von @dfn{Server-Blöcken}, die in der erzeugten
Konfigurationsdatei stehen sollen. Die Elemente davon sollten den Typ
@code{<nginx-server-configuration>} haben.

Im folgenden Beispiel wäre NGinx so eingerichtet, dass Anfragen an
@code{www.example.com} mit Dateien aus dem Verzeichnis
@code{/srv/http/www.example.com} beantwortet werden, ohne HTTPS zu benutzen.
@lisp
(service nginx-service-type
         (nginx-configuration
           (server-blocks
             (list (nginx-server-configuration
                     (server-name '("www.example.com"))
                     (root "/srv/http/www.example.com"))))))
@end lisp

@item @code{upstream-blocks} (Vorgabe: @code{'()})
Eine Liste von @dfn{Upstream-Blöcken}, die in der erzeugten
Konfigurationsdatei stehen sollen. Ihre Elemente sollten den Typ
@code{<nginx-upstream-configuration>} haben.

Upstreams als @code{upstream-blocks} zu konfigurieren, kann hilfreich sein,
wenn es mit @code{locations} in @code{<nginx-server-configuration>}
verbunden wird. Das folgende Beispiel erzeugt eine Server-Konfiguration mit
einer Location-Konfiguration, bei der Anfragen als Proxy entsprechend einer
Upstream-Konfiguration weitergeleitet werden, wodurch zwei Server diese
beantworten können.

@lisp
(service
  nginx-service-type
  (nginx-configuration
    (server-blocks
      (list (nginx-server-configuration
              (server-name '("www.example.com"))
              (root "/srv/http/www.example.com")
              (locations
                (list
                  (nginx-location-configuration
                  (uri "/path1")
                  (body '("proxy_pass http://server-proxy;"))))))))
    (upstream-blocks
      (list (nginx-upstream-configuration
              (name "server-proxy")
              (servers (list "server1.example.com"
                             "server2.example.com")))))))
@end lisp

@item @code{file} (Vorgabe: @code{#f})
Wenn eine Konfigurationsdatei als @var{file} angegeben wird, dann wird diese
benutzt und @emph{keine} Konfigurationsdatei anhand der angegebenen
@code{log-directory}, @code{run-directory}, @code{server-blocks} und
@code{upstream-blocks} erzeugt. Trotzdem sollten diese Argumente bei einer
richtigen Konfiguration mit denen in der Datei @var{file} übereinstimmen,
damit die Verzeichnisse bei Aktivierung des Dienstes erzeugt werden.

Das kann nützlich sein, wenn Sie schon eine bestehende Konfigurationsdatei
haben oder das, was Sie brauchen, nicht mit anderen Teilen eines
nginx-configuration-Verbundsobjekts umgesetzt werden kann.

@item @code{server-names-hash-bucket-size} (Vorgabe: @code{#f})
Größe der Behälter (englisch „Buckets“) für die Hashtabelle der Servernamen;
vorgegeben ist @code{#f}, wodurch die Größe der Cache-Lines des Prozessors
verwendet wird.

@item @code{server-names-hash-bucket-max-size} (Vorgabe: @code{#f})
Maximale Behältergröße für die Hashtabelle der Servernamen.

@item @code{modules} (Vorgabe: @code{'()})
Die Liste zu ladender dynamisch gebundener Module für nginx. Die dynamischen
Module sollten als Liste von Dateinamen ladbarer Module angegeben
werden. Zum Beispiel:

@lisp
(modules
 (list
  (file-append nginx-accept-language-module "\
/etc/nginx/modules/ngx_http_accept_language_module.so")))
@end lisp

@item @code{global-directives} (Vorgabe: @code{'((events . ()))})
Assoziative Liste von globalen Direktiven für die oberste Ebene der
nginx-Konfiguration. Als Werte können wiederum assoziative Listen angegeben
werden.

@lisp
(global-directives
 `((worker_processes . 16)
   (pcre_jit . on)
   (events . ((worker_connections . 1024)))))
@end lisp

@item @code{extra-content} (Vorgabe: @code{""})
Zusätzlicher Inhalt des @code{http}-Blocks. Er sollte eine Zeichenkette oder
ein zeichenkettenwertiger G-Ausdruck.

@end table
@end deffn

@deftp {Datentyp} nginx-server-configuration
Der Datentyp, der die Konfiguration eines nginx-Serverblocks
repräsentiert. Dieser Typ hat die folgenden Parameter:

@table @asis
@item @code{listen} (Vorgabe: @code{'("80" "443 ssl")})
Jede @code{listen}-Direktive legt Adresse und Port für eine IP fest oder
gibt einen Unix-Socket an, auf dem der Server Anfragen beantwortet. Es
können entweder sowohl Adresse als auch Port oder nur die Adresse oder nur
der Port angegeben werden. Als Adresse kann auch ein Rechnername
(„Hostname“) angegeben werden, zum Beispiel:

@lisp
'("127.0.0.1:8000" "127.0.0.1" "8000" "*:8000" "localhost:8000")
@end lisp

@item @code{server-name} (Vorgabe: @code{(list 'default)})
Eine Liste von Servernamen, die dieser Server repräsentiert. @code{'default}
repräsentiert den voreingestellten Server, der für Verbindungen verwendet
wird, die zu keinem anderen Server passen.

@item @code{root} (Vorgabe: @code{"/srv/http"})
Wurzelverzeichnis des Webauftritts, der über nginx abgerufen werden kann.

@item @code{locations} (Vorgabe: @code{'()})
Eine Liste von @dfn{nginx-location-configuration}- oder
@dfn{nginx-named-location-configuration}-Verbundsobjekten, die innerhalb des
Serverblocks benutzt werden.

@item @code{index} (Vorgabe: @code{(list "index.html")})
Index-Dateien, mit denen Anfragen nach einem Verzeichnis beantwortet
werden. Wenn @emph{keine} davon gefunden wird, antwortet Nginx mit der Liste
der Dateien im Verzeichnis.

@item @code{try-files} (Vorgabe: @code{'()})
Eine Liste der Dateien, bei denen in der angegebenen Reihenfolge geprüft
wird, ob sie existieren. @code{nginx} beantwortet die Anfrage mit der ersten
Datei, die es findet.

@item @code{ssl-certificate} (Vorgabe: @code{#f})
Wo das Zertifikat für sichere Verbindungen gespeichert ist. Sie sollten es
auf @code{#f} setzen, wenn Sie kein Zertifikat haben oder kein HTTPS
benutzen möchten.

@item @code{ssl-certificate-key} (Vorgabe: @code{#f})
Wo der private Schlüssel für sichere Verbindungen gespeichert ist. Sie
sollten ihn auf @code{#f} setzen, wenn Sie keinen Schlüssel haben oder kein
HTTPS benutzen möchten.

@item @code{server-tokens?} (Vorgabe: @code{#f})
Ob der Server Informationen über seine Konfiguration bei Antworten beilegen
soll.

@item @code{raw-content} (Vorgabe: @code{'()})
Eine Liste von Zeilen, die unverändert in den Serverblock eingefügt werden.

@end table
@end deftp

@deftp {Datentyp} nginx-upstream-configuration
Der Datentyp, der die Konfiguration eines nginx-@code{upstream}-Blocks
repräsentiert. Dieser Typ hat folgende Parameter:

@table @asis
@item @code{name}
Der Name dieser Servergruppe.

@item @code{servers}
Gibt die Adressen der Server in der Gruppe an. Die Adresse kann als
IP-Adresse (z.B.@: @samp{127.0.0.1}), Domänenname (z.B.@:
@samp{backend1.example.com}) oder als Pfad eines Unix-Sockets mit dem
vorangestellten Präfix @samp{unix:} angegeben werden. Wenn Adressen eine
IP-Adresse oder einen Domänennamen benutzen, ist der voreingestellte Port
80, aber ein abweichender Port kann auch explizit angegeben werden.

@end table
@end deftp

@deftp {Datentyp} nginx-location-configuration
Der Datentyp, der die Konfiguration eines nginx-@code{location}-Blocks
angibt. Der Typ hat die folgenden Parameter:

@table @asis
@item @code{uri}
Die URI, die auf diesen Block passt.

@anchor{nginx-location-configuration body}
@item @code{body}
Der Rumpf des location-Blocks, der als eine Liste von Zeichenketten
angegeben werden muss. Er kann viele Konfigurationsdirektiven enthalten, zum
Beispiel können Anfragen an eine Upstream-Servergruppe weitergeleitet
werden, die mit einem @code{nginx-upstream-configuration}-Block angegeben
wurde, indem diese Direktive im Rumpf angegeben wird: @samp{(list
"proxy_pass http://upstream-name;")}.

@end table
@end deftp

@deftp {Datentyp} nginx-named-location-configuration
Der Datentyp repräsentiert die Konfiguration eines mit Namen versehenen
nginx-location-Blocks („Named Location Block“). Ein mit Namen versehener
location-Block wird zur Umleitung von Anfragen benutzt und nicht für die
normale Anfrageverarbeitung. Dieser Typ hat die folgenden Parameter:

@table @asis
@item @code{name}
Der Name, mit dem dieser location-Block identifiziert wird.

@item @code{body}
Siehe @ref{nginx-location-configuration body}, weil der Rumpf („Body“) eines
mit Namen versehenen location-Blocks wie ein
@code{nginx-location-configuration body} benutzt werden kann. Eine
Einschränkung ist, dass der Rumpf eines mit Namen versehenen location-Blocks
keine location-Blöcke enthalten kann.

@end table
@end deftp

@subsubheading Varnish Cache
@cindex Varnish
Varnish ist ein schneller zwischenspeichernder Server, der zwischen
Web-Anwendungen und deren Endbenutzern sitzt. Er leitet Anfragen von Clients
weiter und lagert die URLs, auf die zugegriffen wird, in einen
Zwischenspeicher ein, damit bei mehreren Anfragen auf dieselbe Ressource nur
eine Anfrage an die Hintergrundanwendung gestellt wird.

@defvr {Scheme-Variable} varnish-service-type
Diensttyp für den Varnish-Daemon.
@end defvr

@deftp {Datentyp} varnish-configuration
Der Datentyp, der die Konfiguration des @code{varnish}-Dienstes
repräsentiert. Dieser Typ hat die folgenden Parameter:

@table @asis
@item @code{package} (Vorgabe: @code{varnish})
Das Varnish-Paket, was benutzt werden soll.

@item @code{name} (Vorgabe: @code{"default"})
Ein Name für diese Varnish-Instanz. Varnish wird ein Verzeichnis in
@file{/var/varnish/} mit diesem Namen erzeugen und dort temporäre Dateien
speichern. Wenn der Name mit einem Schrägstrich beginnt, wird er als
absoluter Verzeichnispfad interpretiert.

Übergeben Sie die Befehlszeilenoption @code{-n} an andere Varnish-Programme,
um sich mit der Instanz diesen Namens zu verbinden, z.B.@:
@command{varnishncsa -n default}.

@item @code{backend} (Vorgabe: @code{"localhost:8080"})
Welcher Hintergrunddienst benutzt werden soll. Diese Option wird ignoriert,
wenn @code{vcl} gesetzt ist.

@item @code{vcl} (Vorgabe: #f)
Das @dfn{VCL}-Programm (in der Varnish Configuration Language), das
ausgeführt werden soll. Ist dies auf @code{#f} gesetzt, fungiert Varnish als
Proxy für den Hintergrunddienst @code{backend} mit der voreingestellten
Konfiguration. Andernfalls muss dies ein dateiartiges Objekt mit gültiger
VCL-Syntax sein.

@c Varnish does not support HTTPS, so keep this URL to avoid confusion.
Um zum Beispiel mit VCL einen Spiegelserver für
@url{https://www.gnu.org,www.gnu.org} einzurichten, können Sie so etwas
benutzen:

@lisp
(define %gnu-mirror
  (plain-file "gnu.vcl"
              "vcl 4.1;
backend gnu @{ .host = \"www.gnu.org\"; @}"))

(operating-system
  ;; @dots{}
  (services (cons (service varnish-service-type
                           (varnish-configuration
                            (listen '(":80"))
                            (vcl %gnu-mirror)))
                  %base-services)))
@end lisp

Die Konfiguration einer bereits laufenden Varnish-Instanz kann mit dem
Programm @command{varnishadm} eingesehen und verändert werden.

Ziehen Sie die @url{https://varnish-cache.org/docs/,Varnish User Guide} und
das @url{https://book.varnish-software.com/4.0/,Varnish Book} zu Rate, wenn
Sie eine umfassende Dokumentation zu Varnish und seiner
Konfigurationssprache suchen.

@item @code{listen} (Vorgabe: @code{'("localhost:80")})
Liste der Adressen, auf denen Varnish lauschen soll.

@item @code{storage} (Vorgabe: @code{'("malloc,128m")})
Liste der Speicher-Hintergrunddienste („Storage Backends“), die von der VCL
aus benutzt werden können.

@item @code{parameters} (Vorgabe: @code{'()})
Liste der Laufzeitparameter von der Form @code{'(("Parameter" . "Wert"))}.

@item @code{extra-options} (Vorgabe: @code{'()})
Zusätzliche Argumente, die an den @command{varnishd}-Prozess übergeben
werden.

@end table
@end deftp

@subsubheading Patchwork
@cindex Patchwork
Patchwork ist ein System, um eingereichten Patches zu folgen. Es kann an
eine Mailing-Liste geschickte Patches sammeln und auf einer Web-Oberfläche
anzeigen.

@defvr {Scheme-Variable} patchwork-service-type
Diensttyp für Patchwork.
@end defvr

Es folgt ein Minimalbeispiel für einen Patchwork-Dienst, der auf der Domain
@code{patchwork.example.com} läuft.

@lisp
(service patchwork-service-type
         (patchwork-configuration
          (domain "patchwork.example.com")
          (settings-module
           (patchwork-settings-module
            (allowed-hosts (list domain))
            (default-from-email "patchwork@@patchwork.example.com")))
          (getmail-retriever-config
           (getmail-retriever-configuration
            (type "SimpleIMAPSSLRetriever")
            (server "imap.example.com")
            (port 993)
            (username "patchwork")
            (password-command
             (list (file-append coreutils "/bin/cat")
                   "/etc/getmail-patchwork-imap-password"))
            (extra-parameters
            '((mailboxes . ("Patches"))))))))

@end lisp

Der Patchwork-Dienst wird über drei Verbundsobjekte konfiguriert. Die
@code{<patchwork-configuration>} hat mit der Konfiguration von Patchwork
innerhalb des HTTPD-Dienstes zu tun.

Das @code{settings-module}-Feld innerhalb des
@code{<patchwork-configuration>}-Verbundsobjekts kann mit einem
@code{<patchwork-settings-module>}-Verbundsobjekt ausgefüllt werden, das ein
im Guix-Store angelegtes Einstellungsmodul beschreibt.

Für das @code{database-configuration}-Feld innerhalb des
@code{<patchwork-settings-module>} muss eine
@code{<patchwork-database-configuration>} benutzt werden.

@deftp {Datentyp} patchwork-configuration
Der Datentyp, der die Konfiguration des Patchwork-Dienstes
repräsentiert. Dieser Typ hat die folgenden Parameter:

@table @asis
@item @code{patchwork} (Vorgabe: @code{patchwork})
Welches Patchwork-Paket benutzt werden soll.

@item @code{domain}
Welche Domain für Patchwork benutzt werden soll. Sie findet Verwendung in
Patchworks virtuellen Rechner („Virtual Host“) für den HTTPD-Dienst.

@item @code{settings-module}
Das durch Patchwork benutzte Einstellungsmodul. Als eine Django-Anwendung
wird Patchwork mit einem Python-Modul konfiguriert, das die Einstellungen
speichert. Es kann entweder eine Instanz des
@code{<patchwork-settings-module>}-Verbundstyps sein, ein beliebiges anderes
Verbundsobjekt sein, das die Einstellungen im Store repräsentiert, oder ein
Verzeichnis außerhalb des Stores.

@item @code{static-path}  (Vorgabe: @code{"/static/"})
Der Pfad, auf dem der HTTPD-Dienst die statischen Dateien anbieten soll.

@item @code{getmail-retriever-config}
Das durch Patchwork benutzte
getmail-retriever-configuration-Verbundsobjekt. Getmail wird mit diesem Wert
konfiguriert. Die Mitteilungen werden mit Patchwork als Empfänger
zugestellt.

@end table
@end deftp

@deftp {Datentyp} patchwork-settings-module
Der Datentyp, der das Einstellungsmodul für Patchwork repräsentiert. Manche
dieser Einstellungen haben direkt mit Patchwork zu tun, andere beziehen sich
auf Django, dem Web-Framework auf dem Patchwork aufsetzt, oder dessen
Django-Rest-Framework-Bibliothek. Dieser Typ verfügt über die folgenden
Parameter:

@table @asis
@item @code{database-configuration} (Vorgabe: @code{(patchwork-database-configuration)})
Die für Patchwork benutzten Datenbankverbindungseinstellungen. Siehe den
@code{<patchwork-database-configuration>}-Verbundstyp für weitere
Informationen.

@item @code{secret-key-file} (Vorgabe: @code{"/etc/patchwork/django-secret-key"})
Patchwork benutzt als eine Django-Webanwendung einen geheimen Schlüssel, um
Werte kryptographisch zu signieren. Diese Datei sollte einen einzigartigen,
unvorhersehbaren Wert enthalten.

Wenn diese Datei nicht existiert, wird sie erzeugt und ein zufälliger Wert
wird durch den Shepherd-Dienst für patchwork-setup hineingeschrieben.

Diese Einstellung bezieht sich auf Django.

@item @code{allowed-hosts}
Eine Liste zulässiger Netzwerkschnittstellen (Hosts), auf denen dieser
Patchwork-Dienst antwortet. Sie sollte wenigstens die im
@code{<patchwork-configuration>}-Verbundsobjekt genannte Domain enthalten.

Dies ist eine Django-Einstellung.

@item @code{default-from-email}
Die E-Mail-Adresse, von der aus Patchwork nach Voreinstellung E-Mails
verschicken soll.

Dies ist eine Patchwork-Einstellung.

@item @code{static-url} (Vorgabe: @code{#f})
Die URL, über die statische Dokumente angeboten werden. Es kann eine
teilweise URL oder eine vollständige URL angegeben werden, aber sie muss auf
@code{/} enden.

Wenn der Vorgabewert benutzt wird, wird der @code{static-path}-Wert aus dem
@code{<patchwork-configuration>}-Verbundsobjekt benutzt.

Dies ist eine Django-Einstellung.

@item @code{admins} (Vorgabe: @code{'()})
Die E-Mail-Adressen, an die Details zu auftretenden Fehlern versendet
werden. Jeder Wert sollte eine zweielementige Liste mit dem Namen und der
E-Mail-Adresse sein.

Dies ist eine Django-Einstellung.

@item @code{debug?} (Vorgabe: @code{#f})
Ob Patchwork im Fehlersuchmodus („Debug Mode“) ausgeführt werden soll. Wenn
dies auf @code{#t} steht, werden detaillierte Fehlermeldungen angezeigt.

Dies ist eine Django-Einstellung.

@item @code{enable-rest-api?} (Vorgabe: @code{#t})
Ob Patchworks REST-Programmschnittstelle („REST-API“) aktiviert werden soll.

Dies ist eine Patchwork-Einstellung.

@item @code{enable-xmlrpc?} (Vorgabe: @code{#t})
Ob die XML-Programmschnittstelle für entfernte Prozeduraufrufe
(„XML-RPC-API“) aktiviert werden soll.

Dies ist eine Patchwork-Einstellung.

@item @code{force-https-links?} (Vorgabe: @code{#t})
Ob auf den Webseiten von Patchwork die Verweise auf andere Seiten HTTPS
verwenden sollen.

Dies ist eine Patchwork-Einstellung.

@item @code{extra-settings} (Vorgabe: @code{""})
Zusätzlicher Code, der am Ende des Patchwork-Einstellungsmoduls platziert
werden soll.

@end table
@end deftp

@deftp {Datentyp} patchwork-database-configuration
Der Datentyp, der die Datenbankkonfiguration für Patchwork repräsentiert.

@table @asis
@item @code{engine} (Vorgabe: @code{"django.db.backends.postgresql_psycopg2"})
Welcher Datenbanktreiber („Engine“) benutzt werden soll.

@item @code{name} (Vorgabe: @code{"patchwork"})
Der Name der zu benutzenden Datenbank.

@item @code{user} (Vorgabe: @code{"httpd"})
Der Benutzer, als der sich Patchwork mit der Datenbank verbindet.

@item @code{password} (Vorgabe: @code{""})
Das Passwort, das zum Herstellen einer Verbindung zur Datenbank verwendet
werden soll.

@item @code{host} (Vorgabe: @code{""})
Der Rechner, mit dem die Datenbankverbindung hergestellt wird.

@item @code{port} (Vorgabe: @code{""})
Der Port, auf dem sich Patchwork mit der Datenbank verbindet.

@end table
@end deftp

@subsubheading Mumi

@cindex Mumi, Weboberfläche für Debbugs
@cindex Debbugs, Mumi-Weboberfläche
@uref{https://git.elephly.net/gitweb.cgi?p=software/mumi.git, Mumi} ist eine
Weboberfläche für Debbugs, einem System, um Fehlerberichte zu
verwalten. Nach Vorgabe zeigt es @uref{https://bugs.gnu.org, die bei GNU
angebotene Debbugs-Instanz}. Mumi ist ein Web-Server, er lädt aber auch
E-Mails von Debbugs herunter und indiziert diese.

@defvr {Scheme-Variable} mumi-service-type
Dies ist der Diensttyp für Mumi.
@end defvr

@deftp {Datentyp} mumi-configuration
Der Datentyp, der die Konfiguration des Mumi-Dienstes repräsentiert. Dieser
Typ hat die folgenden Felder:

@table @asis
@item @code{mumi} (Vorgabe: @code{mumi})
Das zu verwendende Mumi-Paket.

@item @code{mailer?} (Vorgabe: @code{#true})
Ob die Komponente zum Mailversand aktiviert sein soll oder nicht.

@item @code{mumi-configuration-sender}
Die E-Mail-Adresse, die bei Kommentaren als Absender angegeben wird.

@item @code{mumi-configuration-smtp}
Eine URI, um die SMTP-Einstellungen für Mailutils einzurichten. Hierfür
könnte etwas wie @code{sendmail:///path/to/bin/msmtp} angegeben werden, oder
eine beliebige andere URI, die von Mailutils unterstützt wird. Siehe
@ref{SMTP Mailboxes, SMTP Mailboxes,, mailutils, GNU@tie{}Mailutils}.

@end table
@end deftp


@subsubheading FastCGI
@cindex fastcgi
@cindex fcgiwrap
FastCGI ist eine Schnittstelle zwischen den Anwendungen im Vordergrund
(„Front-End“) und Hintergrund („Back-End“) eines Webdienstes. Die Rolle, die
es ausübt, ist nicht mehr ganz aktuell, weil neue Webdienste im Allgemeinen
einfach über HTTP zwischen Vorder- und Hintergrund kommunizieren
sollten. Allerdings gibt es eine Menge von Hintergrunddiensten wie PHP oder
den optimierten Git-Repository-Zugang über HTTP, welche FastCGI benutzen,
also wird es auch in Guix unterstützt.

Um FastCGI zu benutzen, konfigurieren Sie den Webserver im Vordergrund
(z.B.@: nginx) so, dass er eine Teilmenge der Anfragen an die
fastcgi-Hintergrundanwendung weiterleitet, dass auf einem lokalen TCP- oder
Unix-Socket lauscht. Ein dazwischenliegendes @code{fcgiwrap}-Programm sitzt
zwischen dem eigentlichen Hintergrundprozess und dem Webserver. Vom
Vordergrund wird angezeigt, welches Hintergrundprogramm ausgeführt werden
soll. Diese Informationen werden an den @code{fcgiwrap}-Prozess übermittelt.

@defvr {Scheme-Variable} fcgiwrap-service-type
Ein Diensttyp für den @code{fcgiwrap}-FastCGI-Proxy.
@end defvr

@deftp {Datentyp} fcgiwrap-configuration
Der Datentyp, der die Konfiguration des @code{fcgiwrap}-Dienstes
repräsentiert. Dieser Typ hat die folgenden Parameter:
@table @asis
@item @code{package} (Vorgabe: @code{fcgiwrap})
Welches fcgiwrap-Paket benutzt werden soll.

@item @code{socket} (Vorgabe: @code{tcp:127.0.0.1:9000})
Der Socket, auf dem der @code{fcgiwrap}-Prozess lauschen soll, als eine
Zeichenkette. Gültige Werte für @var{socket} wären unter anderem
@code{unix:@var{/pfad/zum/unix/socket}},
@code{tcp:@var{vier.teile.gepunkt.et}:@var{Port}} und
@code{tcp6:[@var{IPv6-Adresse}]:Port}.

@item @code{user} (Vorgabe: @code{fcgiwrap})
@itemx @code{group} (Vorgabe: @code{fcgiwrap})
Die Benutzerkonten- und Gruppennamen als Zeichenketten, unter denen der
@code{fcgiwrap}-Prozess ausgeführt werden soll. Der @code{fastcgi}-Dienst
wird sicherstellen, dass, wenn der Nutzer den Benutzer- oder Gruppennamen
@code{fcgiwrap} verlangt, der entsprechende Benutzer und/oder Gruppe auch
auf dem System existiert.

Es ist möglich, einen FastCGI-gestützten Webdienst so zu konfigurieren, dass
er HTTP-Authentisierungsinformationen vom Vordergrundserver an das
Hintergrundsystem weiterreicht und es @code{fcgiwrap} möglich macht, den
Hintergrundprozess als ein entsprechender lokaler Nutzer auszuführen. Um dem
Hintergrundsystem diese Funktionalität anzubieten, lassen Sie
@code{fcgiwrap} als der Administratornutzer @code{root} mit selbiger Gruppe
ausführen. Beachten Sie, dass die Funktionalität auch auf dem
Vordergrundsystem erst eingerichtet werden muss.
@end table
@end deftp

@cindex php-fpm
PHP-FPM (FastCGI Process Manager) ist eine alternative
PHP-FastCGI-Implementierung, die über einige zusätzliche Funktionalitäten
verfügt, die für Webauftritte jeder Größe nützlich sind.

Zu diesen Funktionalitäten gehören:
@itemize @bullet
@item Prozesserzeugung nach Bedarf
@item Grundlegende Statistiken (ähnlich wie Apaches mod_status)
@item Fortschrittliche Prozessverwaltung mit sanftem Stoppen und Starten
@item Die Möglichkeit, Arbeiter-Threads mit verschiedenen UIDs, GIDs, Chroot- oder Umgebungseinstellungen zu starten
und mit verschiedener php.ini (als Ersatz für safe_mode)
@item Protokollierung der Standard- und Standardfehlerausgabe
@item Neustart im Notfall einer ungewollten Zerstörung des Befehlscode-Zwischenspeichers
@item Unterstützung für beschleunigtes Hochladen
@item Unterstützung für „langsames Protokollieren“ („slowlog“)
@item Verbesserungen gegenüber FastCGI, wie z.B.@: fastcgi_finish_request() —
eine besondere Funktion, um eine Anfrage fertig abzuarbeiten und alle Daten
zu Ende zu verarbeiten, während etwas Zeitintensives abläuft
(Videokonvertierung, Statistikverarbeitung usw.)
@end itemize
…@: und vieles mehr.

@defvr {Scheme-Variable} php-fpm-service-type
Ein Diensttyp für @code{php-fpm}.
@end defvr

@deftp {Datentyp} php-fpm-configuration
Datentyp für die Konfiguration des php-fpm-Dienstes.
@table @asis
@item @code{php} (Vorgabe: @code{php})
Das zu benutzende PHP-Paket.
@item @code{socket} (Vorgabe: @code{(string-append "/var/run/php" (version-major (package-version php)) "-fpm.sock")})
Die Adresse, auf der FastCGI-Anfragen angenommen werden. Gültige Syntax
hierfür ist:
@table @asis
@item @code{"ip.ad.res.se:Port"}
Lässt auf einem TCP-Socket auf der angegebenen Adresse auf dem angegebenen
Port lauschen.
@item @code{"port"}
Lässt auf einem TCP-Socket auf allen Adressen auf dem angegebenen Port
lauschen.
@item @code{"/pfad/zum/unix/socket"}
Lässt auf einem Unix-Socket lauschen.
@end table

@item @code{user} (Vorgabe: @code{php-fpm})
Der Benutzer, dem die PHP-Arbeiterprozesse gehören werden.
@item @code{group} (Vorgabe: @code{php-fpm})
Die Gruppe für die Arbeiterprozesse.
@item @code{socket-user} (Vorgabe: @code{php-fpm})
Der Benutzer, der mit dem php-fpm-Socket kommunizieren kann.
@item @code{socket-group} (Vorgabe: @code{nginx})
Die Gruppe, die mit dem php-fpm-Socket kommunizieren kann.
@item @code{pid-file} (Vorgabe: @code{(string-append "/var/run/php" (version-major (package-version php)) "-fpm.pid")})
Der Prozessidentifikator des php-fpm-Prozesses wird in diese Datei
geschrieben, sobald der Dienst gestartet wurde.
@item @code{log-file} (Vorgabe: @code{(string-append "/var/log/php" (version-major (package-version php)) "-fpm.log")})
Wohin das Protokoll für den php-fpm-Hauptprozess geschrieben wird.
@item @code{process-manager} (Vorgabe: @code{(php-fpm-dynamic-process-manager-configuration)})
Detaillierte Einstellungen für die php-fpm-Prozessverwaltung. Sie müssen
eines der Folgenden sein:
@table @asis
@item @code{<php-fpm-dynamic-process-manager-configuration>}
@item @code{<php-fpm-static-process-manager-configuration>}
@item @code{<php-fpm-on-demand-process-manager-configuration>}
@end table
@item @code{display-errors} (Vorgabe: @code{#f})
Legt fest, ob PHP-Fehler und Warnungen an Clients geschickt und in ihren
Browsern angezeigt werden. Dies ist nützlich für lokale PHP-Entwicklung,
aber ein Sicherheitsrisiko für öffentliche Webauftritte, weil
Fehlermeldungen Passwörter und Passwortdaten offenlegen können.
@item @code{timezone} (Vorgabe: @code{#f})
Legt den Parameter @code{php_admin_value[date.timezone]} fest.
@item @code{workers-logfile} (Vorgabe: @code{(string-append "/var/log/php" (version-major (package-version php)) "-fpm.www.log")})
In dieser Datei werden @code{stderr}-Ausgaben von PHP-Arbeiterprozessen
protokolliert. Das Feld kann auf @code{#f} gesetzt werden, damit nicht
protokolliert wird.
@item @code{file} (Vorgabe: @code{#f})
Optional kann hier ein vorrangig benutzter Ersatz für die gesamte
Konfigurationsdatei angegeben werden. Sie können dafür die
@code{mixed-text-file}-Funktion oder einen absoluten Dateipfad verwenden.
@end table
@end deftp

@deftp {Datentyp} php-fpm-dynamic-process-manager-configuration
Datentyp für die @emph{dynamische} Prozessverwaltung durch php-fpm. Bei der
@emph{dynamischen} Prozessverwaltung bleiben Arbeiterprozesse nach Abschluss
ihrer Aufgabe weiterhin erhalten, solange die konfigurierten Beschränkungen
eingehalten werden.
@table @asis
@item @code{max-children} (Vorgabe: @code{5})
Die maximale Anzahl an Arbeiterprozessen.
@item @code{start-servers} (Vorgabe: @code{2})
Wieviele Arbeiterprozesse gleich zu Beginn gestartet werden sollen.
@item @code{min-spare-servers} (Vorgabe: @code{1})
Wieviele untätige Arbeiterprozesse mindestens weiterhin vorgehalten bleiben
sollen.
@item @code{max-spare-servers} (Vorgabe: @code{3})
Wieviele untätige Arbeiterprozesse höchstens weiterhin vorgehalten bleiben
sollen.
@end table
@end deftp

@deftp {Datentyp} php-fpm-static-process-manager-configuration
Datentyp für die @emph{statische} Prozessverwaltung durch php-fpm. Bei der
@emph{statischen} Prozessverwaltung wird eine unveränderliche Anzahl an
Arbeiterprozessen erzeugt.
@table @asis
@item @code{max-children} (Vorgabe: @code{5})
Die maximale Anzahl an Arbeiterprozessen.
@end table
@end deftp

@deftp {Datentyp} php-fpm-on-demand-process-manager-configuration
Datentyp für die Prozessverwaltung @emph{nach Bedarf} durch php-fpm. Bei der
Prozessverwaltung @emph{nach Bedarf} werden Arbeiterprozesse erst erzeugt,
wenn Anfragen vorliegen.
@table @asis
@item @code{max-children} (Vorgabe: @code{5})
Die maximale Anzahl an Arbeiterprozessen.
@item @code{process-idle-timeout} (Vorgabe: @code{10})
Die Zeit in Sekunden, nach der ein Prozess ohne Anfragen abgewürgt wird.
@end table
@end deftp


@deffn {Scheme Procedure} nginx-php-location @
       [#:nginx-package nginx] @ [socket (string-append "/var/run/php" @
(version-major (package-version php)) @ "-fpm.sock")] Eine Hilfsfunktion,
mit der in kurzer Zeit PHP zu einer @code{nginx-server-configuration}
hinzugefügt werden kann.
@end deffn

Eine einfache Art, die Dienste für nginx mit PHP einzurichten, kann so
aussehen:
@lisp
(services (cons* (service dhcp-client-service-type)
                 (service php-fpm-service-type)
                 (service nginx-service-type
                          (nginx-server-configuration
                           (server-name '("example.com"))
                           (root "/srv/http/")
                           (locations
                            (list (nginx-php-location)))
                           (listen '("80"))
                           (ssl-certificate #f)
                           (ssl-certificate-key #f)))
                 %base-services))
@end lisp

@cindex cat-avatar-generator
Der Cat Avatar Generator („Katzenavatargenerator“) ist ein einfacher Dienst,
um die Nutzung von php-fpm in @code{Nginx} zu demonstrieren. Mit ihm können
Katzenavatarbilder aus einem Startwert („Seed“) heraus erzeugt werden, zum
Beispiel aus dem Hash der E-Mail-Adresse eines Benutzers.

@deffn {Scheme-Prozedur} cat-avatar-generator-service @
       [#:cache-dir "/var/cache/cat-avatar-generator"] @ [#:package
cat-avatar-generator] @ [#:configuration (nginx-server-configuration)]
Liefert ein nginx-server-configuration-Objekt, das von der in
@code{configuration} angegebenen Konfiguration erbt. Es erweitert die
Nginx-Konfiguration, indem es einen Server-Block hinzufügt, der die in
@code{package} angegebene Version vom cat-avatar-generator anbietet. Bei der
Ausführung wird dem cat-avatar-generator Zugriff auf sein in
@code{cache-dir} angegebenes Zwischenspeicherverzeichnis gewährt.
@end deffn

Eine einfache Konfiguration des cat-avatar-generator kann so aussehen:
@lisp
(services (cons* (cat-avatar-generator-service
                  #:configuration
                  (nginx-server-configuration
                    (server-name '("example.com"))))
                 ...
                 %base-services))
@end lisp

@subsubheading Hpcguix-web

@cindex hpcguix-web
Das Programm @uref{https://github.com/UMCUGenetics/hpcguix-web/,
hpcguix-web} ist eine anpassbare Weboberfläche, um Guix-Pakete zu suchen. Am
Anfang war es für Nutzer von Hochleistungs-Rechenclustern gedacht
(„High-Performance Computing“, kurz HPC).

@defvr {Scheme-Variable} hpcguix-web-service-type
Der Diensttyp für @code{hpcguix-web}.
@end defvr

@deftp {Datentyp} hpcguix-web-configuration
Datentyp für die Konfiguration des hpcguix-web-Dienstes.

@table @asis
@item @code{specs}
Ein G-Ausdruck (siehe @ref{G-Ausdrücke}), der die Konfiguration des
hpcguix-web-Dienstes festlegt. In dieser Spezifikation („Spec“) sollten vor
allem diese Sachen angegeben werden:

@table @asis
@item @code{title-prefix} (Vorgabe: @code{"hpcguix | "})
Das Präfix der Webseitentitel.

@item @code{guix-command} (Vorgabe: @code{"guix"})
Der @command{guix}-Befehl.

@item @code{package-filter-proc} (Vorgabe: @code{(const #t)})
Eine Prozedur, die festlegt, wie anzuzeigende Pakete gefiltert werden.

@item @code{package-page-extension-proc} (Vorgabe: @code{(const '())})
Erweiterungspaket für @code{hpcguix-web}.

@item @code{menu} (Vorgabe: @code{'()})
Zusätzlicher Eintrag auf der Menüseite.

@item @code{channels} (Vorgabe: @code{%default-channels})
Liste der Kanäle, aus denen die Paketliste erstellt wird (siehe
@ref{Kanäle}).

@item @code{package-list-expiration} (Vorgabe: @code{(* 12 3600)})
Nach wieviel Zeit in Sekunden die Paketliste aus den neuesten Instanzen der
angegebenen Kanäle neu erzeugt wird.
@end table

Siehe das Repository von hpcguix-web für ein
@uref{https://github.com/UMCUGenetics/hpcguix-web/blob/master/hpcweb-configuration.scm,
vollständiges Beispiel}.

@item @code{package} (Vorgabe: @code{hpcguix-web})
Das hpcguix-web-Paket, was benutzt werden soll.
@end table
@end deftp

Eine typische Deklaration eines hpcguix-web-Dienstes sieht so aus:

@lisp
(service hpcguix-web-service-type
         (hpcguix-web-configuration
          (specs
           #~(define site-config
               (hpcweb-configuration
                (title-prefix "Guix-HPC - ")
                (menu '(("/about" "ABOUT"))))))))
@end lisp

@quotation Anmerkung
Der hpcguix-web-Dienst aktualisiert die Liste der Pakete, die er
veröffentlicht, periodisch, indem er die Kanäle über einen Git-„Pull“
lädt. Dazu muss er auf X.509-Zertifikate zugreifen, damit Git-Server
authentifiziert werden können, wenn mit diesen über HTTPS kommuniziert wird,
wofür der Dienst davon ausgeht, dass sich jene Zertifikate in
@file{/etc/ssl/certs} befinden.

Stellen Sie also sicher, dass @code{nss-certs} oder ein anderes
Zertifikatspaket im @code{packages}-Feld ihrer Konfiguration steht. Siehe
@ref{X.509-Zertifikate} für weitere Informationen zu X.509-Zertifikaten.
@end quotation

@node Zertifikatsdienste
@subsection Zertifikatsdienste

@cindex Web
@cindex HTTP, HTTPS
@cindex Let's Encrypt
@cindex TLS-Zertifikate
Das Modul @code{(gnu services certbot)} stellt einen Dienst zur Verfügung,
um automatisch ein gültiges TLS-Zertifikat von der Zertifikatsautorität
Let’s Encrypt zu beziehen. Mit diesen Zertifikaten können Informationen
sicher über HTTPS oder andere TLS-basierte Protokolle übertragen werden, im
Wissen, dass der Client die Authentizität des Servers überprüfen wird
können.

@url{https://letsencrypt.org/, Let’s Encrypt} macht das
@code{certbot}-Werkzeug verfügbar, mit dem der Zertifizierungsvorgang
automatisiert werden kann. Das Werkzeug erzeugt zunächst auf sichere Weise
einen Schlüssel auf dem Server und stellt dann eine Anfrage an die
Let’s-Encrypt-Zertifikatsautorität („Certificate Authority“, kurz CA), den
Schlüssel zu signieren. Die Zertifikatsautorität prüft mit einem
Challenge-Response-Protokoll, dass die Anfrage auch wirklich vom fraglichen
Rechner (auch „Host“ genannt) kommt, wozu der Server über HTTP seine Antwort
geben muss. Wenn dieses Protokoll erfolgreich befolgt wurde, signiert die
Zertifikatsautorität den Schlüssel, woraus sich ein Zertifikat
ergibt. Dieses Zertifikat ist eine begrenzte Zeit lang gültig, daher muss
der Server für eine andauernde Bereitstellung von TLS-Leistungen immer
wieder neu der Zertifikatsautorität eine Bitte um die Erneuerung der
Signatur zukommen lassen.

Mit dem certbot-Dienst wird dieser Prozess automatisiert. Er sorgt dafür,
dass am Anfang Schlüssel erzeugt werden und eine erste
Zertifizierungsanfrage an den Dienst von Let’s Encrypt gestellt
wird. Weiterhin ist das Challenge-/Response-Verfahren per Web-Server
integriert. Das Zertifikat wird auf die Platte geschrieben und automatisch
periodisch erneuert und bei der Erneuerung anfallende Aufgaben werden
erledigt (z.B.@: das Neuladen von Diensten und das Kopieren von Schlüsseln
mit entsprechenden Berechtigungen).

Certbot wird zweimal täglich zu einer zufälligen Minute der Stunde
ausgeführt. Es tut so lange nichts, bis eine Erneuerung Ihrer Zertifikate
fällig wird oder sie gesperrt wurden, durch regelmäßige Ausführung bekommen
Sie aber die Chance, dass Ihr Server am Netz bleibt, wenn Let’s Encrypt eine
Sperrung aus irgendeinem Grund anordnet.

Durch die Nutzung dieses Dienstes stimmen Sie dem „ACME Subscriber
Agreement“ zu, das Sie hier finden::
@url{https://acme-v01.api.letsencrypt.org/directory}.

@defvr {Scheme-Variable} certbot-service-type
Ein Diensttyp für den @code{certbot}-Client für Let’s Encrypt. Sein Wert
muss ein @code{certbot-configuration}-Verbundsobjekt wie in diesem Beispiel
sein:

@lisp
(define %nginx-deploy-hook
  (program-file
   "nginx-deploy-hook"
   #~(let ((pid (call-with-input-file "/var/run/nginx/pid" read)))
       (kill pid SIGHUP))))

(service certbot-service-type
         (certbot-configuration
          (email "foo@@example.net")
          (certificates
           (list
            (certificate-configuration
             (domains '("example.net" "www.example.net"))
             (deploy-hook %nginx-deploy-hook))
            (certificate-configuration
             (domains '("bar.example.net")))))))
@end lisp

Siehe unten für Details zur @code{certbot-configuration}.
@end defvr

@deftp {Datentyp} certbot-configuration
Datentyp, der die Konfiguration des @code{certbot}-Dienstes
repräsentiert. Dieser Typ verfügt über die folgenden Parameter:

@table @asis
@item @code{package} (Vorgabe: @code{certbot})
Das certbot-Paket, das benutzt werden soll.

@item @code{webroot} (Vorgabe: @code{/var/www})
Das Verzeichnis, aus dem heraus die Dateien für den
Challenge-/Response-Prozess von Let’s Encrypt angeboten werden sollen.

@item @code{certificates} (Vorgabe: @code{()})
Eine Liste der @code{certificates-configuration}-Objekte, für die
Zertifikate und Anfragesignaturen erzeugt werden. Für jedes Zertifikat gibt
es einen @code{name}-Eintrag und mehrere @code{domains}.

@item @code{email}
Die E-Mail-Adresse, die für die Registrierung, als Kontaktadresse bei der
Wiederherstellung und für wichtige Kontenbenachrichtigungen angegeben werden
@emph{muss}.

@item @code{server} (Vorgabe: @code{#f})
Optional eine andere URL des ACME-Servers. Wenn sie festgelegt wird, ersetzt
sie die Voreinstellung von Certbot, nämlich die URL des
Let’s-Encrypt-Servers.

@item @code{rsa-key-size} (Vorgabe: @code{2048})
Wie groß der RSA-Schlüssel sein soll.

@item @code{default-location} (Vorgabe: @i{siehe unten})
Die vorgegebene @code{nginx-location-configuration}. Weil @code{certbot}
„Challenges“ und „Responses“ anbieten muss, muss durch ihn ein Web-Server
ausgeführt werden können. Das tut er, indem er den @code{nginx}-Webdienst
mit einer @code{nginx-server-configuration} erweitert, die auf den
@var{domains} auf Port 80 lauscht und eine
@code{nginx-location-configuration} für den URI-Pfad-Teilraum
@code{/.well-known/} umfasst, der von Let’s Encrypt benutzt wird. Siehe
@ref{Web-Dienste} für mehr Informationen über diese
nginx-Konfigurationsdatentypen.

Anfragen an andere URL-Pfade werden mit der @code{default-location}
abgeglichen. Wenn sie angegeben wurde, wird sie zu jeder
@code{nginx-server-configuration} hinzugefügt.

Nach Vorgabe stellt die @code{default-location} eine Weiterleitung von
@code{http://@var{domain}/…} nach @code{https://@var{domain}/…} her. Sie
müssen dann nur noch festlegen, was Sie auf Ihrem Webauftritt über
@code{https} anbieten wollen.

Übergeben Sie @code{#f}, um keine @code{default-location} vorzugeben.
@end table
@end deftp

@deftp {Datentyp} certificate-configuration
Der Datentyp, der die Konfiguration eines Zertifikats repräsentiert. Dieser
Typ hat die folgenden Parameter:

@table @asis
@item @code{name} (Vorgabe: @i{siehe unten})
Dieser Name wird vom Certbot intern zum Aufräumen und in Dateipfaden
benutzt; er hat keinen Einfluss auf den Inhalt des erzeugten Zertifikats. Um
Zertifikatsnamen einzusehen, führen Sie @code{certbot certificates} aus.

Die Vorgabe ist die erste angegebene Domain.

@item @code{domains} (Vorgabe: @code{()})
Die erste angegebene Domain wird als Name des Zertifikatseigentümers
(„Subject CN“) benutzt und alle Domains werden als alternative Namen
(„Subject Alternative Names“) auf dem Zertifikat stehen.

@item @code{challenge} (Vorgabe: @code{#f})
Welche Art von Challenge durch den Certbot ausgeführt wird. Wenn @code{#f}
angegeben wird, wird die HTTP-Challenge voreingestellt. Wenn ein Wert
angegeben wird, wird das Plugin benutzt, das auch bei manuellen Ausführungen
benutzt wird (siehe @code{authentication-hook}, @code{cleanup-hook} und die
Dokumentation unter @url{https://certbot.eff.org/docs/using.html#hooks}),
und Let’s Encrypt wird dazu berechtigt, die öffentliche IP-Adresse der
anfordernden Maschine in seinem Protokoll zu speichern.

@item @code{authentication-hook} (Vorgabe: @code{#f})
Welcher Befehl in einer Shell zum Antworten auf eine Zertifikats-„Challenge“
einmalig ausgeführt wird. Für diesen Befehl wird die Shell-Variable
@code{$CERTBOT_DOMAIN} die Domain enthalten, für die sich der Certbot
authentisiert, @code{$CERTBOT_VALIDATION} enthält die
Validierungs-Zeichenkette und @code{$CERTBOT_TOKEN} enthält den Dateinamen
der bei einer HTTP-01-Challenge angefragten Ressource.

@item @code{cleanup-hook} (Vorgabe: @code{#f})
Welcher Befehl in einer Shell für jede Zertifikat-„Challenge“ einmalig
ausgeführt wird, die vom @code{auth-hook} beantwortet wurde. Für diesen
Befehl bleiben die Shell-Variablen weiterhin verfügbar, die im
@code{auth-hook}-Skript zur Verfügung standen, und außerdem wird
@code{$CERTBOT_AUTH_OUTPUT} die Standardausgabe des @code{auth-hook}-Skripts
enthalten.

@item @code{deploy-hook} (Vorgabe: @code{#f})
Welcher Befehl in einer Shell für jedes erfolgreich ausgestellte Zertifikat
einmalig ausgeführt wird. Bei diesem Befehl wird die Shell-Variable
@code{$RENEWED_LINEAGE} auf das Unterverzeichnis für die aktuelle
Konfiguration zeigen (zum Beispiel
@samp{"/etc/letsencrypt/live/example.com"}), in dem sich die neuen
Zertifikate und Schlüssel befinden. Die Shell-Variable
@code{$RENEWED_DOMAINS} wird eine leerzeichengetrennte Liste der erneuerten
Zertifikatsdomänen enthalten (zum Beispiel @samp{"example.com
www.example.com"}.

@end table
@end deftp

Für jede @code{certificate-configuration} wird das Zertifikat in
@code{/etc/letsencrypt/live/@var{name}/fullchain.pem} und der Schlüssel in
@code{/etc/letsencrypt/live/@var{name}/privkey.pem} gespeichert.
@node DNS-Dienste
@subsection DNS-Dienste
@cindex DNS (Domain Name System)
@cindex Domain Name System (DNS)

Das Modul @code{(gnu services dns)} stellt Dienste zur Verfügung, die mit
dem @dfn{Domain Name System} (DNS) zu tun haben. Es bietet einen
Server-Dienst an, mit dem ein @emph{autoritativer} DNS-Server für mehrere
Zonen betrieben werden kann, jeweils als untergeordneter „Slave“ oder als
„Master“. Dieser Dienst benutzt @uref{https://www.knot-dns.cz/, Knot
DNS}. Außerdem wird ein zwischenspeichernder und weiterleitender DNS-Server
für das LAN bereitgestellt, der
@uref{http://www.thekelleys.org.uk/dnsmasq/doc.html, dnsmasq} benutzt.

@subsubheading Knot-Dienst

Eine Beispielkonfiguration eines autoritativen Servers für zwei Zonen, eine
„Master“, eine „Slave“, wäre:

@lisp
(define-zone-entries example.org.zone
;; Name TTL Class Type Data
  ("@@"  ""  "IN"  "A"  "127.0.0.1")
  ("@@"  ""  "IN"  "NS" "ns")
  ("ns" ""  "IN"  "A"  "127.0.0.1"))

(define master-zone
  (knot-zone-configuration
    (domain "example.org")
    (zone (zone-file
            (origin "example.org")
            (entries example.org.zone)))))

(define slave-zone
  (knot-zone-configuration
    (domain "plop.org")
    (dnssec-policy "default")
    (master (list "plop-master"))))

(define plop-master
  (knot-remote-configuration
    (id "plop-master")
    (address (list "208.76.58.171"))))

(operating-system
  ;; ...
  (services (cons* (service knot-service-type
                     (knot-configuration
                       (remotes (list plop-master))
                       (zones (list master-zone slave-zone))))
                   ;; ...
                   %base-services)))
@end lisp

@deffn {Scheme-Variable} knot-service-type
Dies ist der Diensttyp für den Knot-DNS-Server.

Knot DNS ist ein autoritativer DNS-Server, das heißt, er kann mehrere Zonen
bedienen, also mehrere Domainnamen, die Sie von einem Registrar kaufen
würden. Dieser Server ist kein „Resolver“,  er dient also nur zur Auflösung
von Namen, für die er autoritativ ist. Dieser Server kann so konfiguriert
werden, dass er Zonen als „Master“-Server oder als „Slave“-Server
bereitstellt, je nachdem, wie er für die jeweilige Zone eingestellt
ist. Server für „Slave“-Zonen erhalten ihre Daten von „Master“-Servern und
stellen mit ihnen einen autoritativen Server zur Verfügung. Für einen
„Resolver“ macht es keinen Unterschied, ob er Namen auflöst, indem er einen
„Master“ oder einen „Slave“ danach fragt.

Die folgenden Datentypen werden benutzt, um den Knot-DNS-Server zu
konfigurieren:
@end deffn

@deftp {Datentyp} knot-key-configuration
Datentyp, der einen Schlüssel repräsentiert. Dieser Typ hat die folgenden
Parameter:

@table @asis
@item @code{id} (Vorgabe: @code{""})
Ein Identifikator, mit dem sich andere Konfigurationsfelder auf diesen
Schlüssel beziehen können. IDs müssen eindeutig sein und dürfen @emph{nicht}
leer sein.

@item @code{algorithm} (Vorgabe: @code{#f})
Der Algorithmus, der benutzt werden soll. Wählen Sie zwischen @code{#f},
@code{'hmac-md5}, @code{'hmac-sha1}, @code{'hmac-sha224},
@code{'hmac-sha256}, @code{'hmac-sha384} und @code{'hmac-sha512}.

@item @code{secret} (Vorgabe: @code{""})
Was dabei der geheime Schlüssel sein soll.

@end table
@end deftp

@deftp {Datentyp} knot-acl-configuration
Datentyp, der die Konfiguration einer Zugriffssteuerungsliste („Access
Control List“, ACL) repräsentiert. Dieser Typ hat die folgenden Parameter:

@table @asis
@item @code{id} (Vorgabe: @code{""})
Ein Identifikator, mit dem sich andere Konfigurationsfelder auf diesen
Schlüssel beziehen können. IDs müssen eindeutig sein und dürfen @emph{nicht}
leer sein.

@item @code{address} (Vorgabe: @code{'()})
Eine geordnete Liste aus IP-Adresse, Netzwerk-Subnetzen oder
Netzwerkbereichen, die jeweils als Zeichenketten angegeben werden. Die
Anfrage muss zu einem davon passen. Ein leerer Wert bedeutet, dass die
Adresse nicht passen muss.

@item @code{key} (Vorgabe: @code{'()})
Eine geordnete Liste von Referenzen auf Schlüssel, die jeweils als
Zeichenketten angegeben werden. Die Zeichenkette muss zu einem
Schlüsselidentifikator passen, der in einem der
@code{knot-key-configuration}-Objekte definiert wurde. Wenn kein Schlüssel
angegeben wird, bedeutet das, dass kein Schlüssel zu dieser
Zugriffssteuerungsliste passen muss.

@item @code{action} (Vorgabe: @code{'()})
Eine geordete Liste der Aktionen, die von dieser Zugriffssteuerungsliste
zugelassen oder gesperrt werden. Mögliche Werte sind Listen aus null oder
mehr Elementen, die jeweils @code{'transfer}, @code{'notify} oder
@code{'update} sind.

@item @code{deny?} (Vorgabe: @code{#f})
Wenn dies auf wahr steht, werden mit der Zugriffssteuerungsliste
Einschränkungen festgelegt, d.h.@: aufgelistet Aktionen werden
gesperrt. Steht es auf falsch, werden aufgelistete Aktionen zugelassen.

@end table
@end deftp

@deftp {Datentyp} zone-entry
Datentyp, der einen Eintrag in einer Zonendatei repräsentiert. Dieser Typ
verfügt über die folgenden Parameter:

@table @asis
@item @code{name} (Vorgabe: @code{"@@"})
Der Name des Eintrags. @code{"@@"} bezieht sich auf den Ursprung der
Zone. Namen sind relativ zum Ursprung der Zone. Zum Beispiel bezieht sich in
einer Zone @code{example.org} der Eintrag @code{"ns.example.org"}
tatsächlich auf @code{ns.example.org.example.org}. Namen, die auf einen
Punkt enden, sind absolut. Das bedeutet, dass sich @code{"ns.example.org."}
auf @code{ns.example.org} bezieht.

@item @code{ttl} (Vorgabe: @code{""})
Wie lange dieser Eintrag zwischengespeichert werden darf, d.h.@: seine
„Time-To-Live“ (TTL). Ist sie nicht festgelegt, wird die voreingestellte TTL
benutzt.

@item @code{class} (Vorgabe: @code{"IN"})
Welche Klasse der Eintrag hat. Derzeit unterstützt Knot nur @code{"IN"} und
teilweise @code{"CH"}.

@item @code{type} (Vorgabe: @code{"A"})
Der Typ des Eintrags. Zu den üblichen Typen gehören A (für eine
IPv4-Adresse), AAAA (für eine IPv6-Adresse), NS (der Namens-Server) und MX
(„Mail eXchange“ für E-Mails). Viele andere Typen sind auch definiert.

@item @code{data} (Vorgabe: @code{""})
Die Daten, die im Eintrag stehen, zum Beispiel eine IP-Adresse bei einem
A-Eintrag oder ein Domain-Name bei einem NS-Eintrag. Bedenken Sie, dass
Domain-Namen relativ zum Ursprung angegeben werden, außer wenn sie auf einen
Punkt enden.

@end table
@end deftp

@deftp {Datentyp} zone-file
Datentyp, der den Inhalt einer Zonendatei repräsentiert. Dieser Typ verfügt
über die folgenden Parameter:

@table @asis
@item @code{entries} (Vorgabe: @code{'()})
Die Liste der Einträge. Für den SOA-Eintrag wird automatisch gesorgt, also
müssen Sie ihn nicht zur Liste der Einträge hinzufügen. In der Liste sollte
vermutlich ein Eintrag für Ihren primären autoritativen DNS-Server
stehen. Abgesehen vom direkten Aufzählen der Einträge können Sie
@code{define-zone-entries} verwenden, um ein Objekt zu definieren, worin
eine Liste von Einträgen leichter angegeben werden kann, und was sie dann im
@code{entries}-Feld des @code{zone-file} angeben können.

@item @code{origin} (Vorgabe: @code{""})
Der Name Ihrer Zone. Dieser Parameter darf nicht leer sein.

@item @code{ns} (Vorgabe: @code{"ns"})
Die Domain Ihres primären autoritativen DNS-Servers. Der Name wird relativ
zum Ursprung angegeben, außer wenn er auf einen Punkt endet. Dieser primäre
DNS-Server @emph{muss} verpflichtend einem NS-Eintrag in der Zone
entsprechen, dem eine IP-Adresse in der Liste der Einträge zugeordnet werden
muss.

@item @code{mail} (Vorgabe: @code{"hostmaster"})
Eine E-Mail-Adresse, unter der man Sie als für diese Zone Verantwortlichen
(„Besitzer“/„Owner“) kontaktieren kann. Sie wird zu @code{<mail>@@<origin>}
umgeschrieben.

@item @code{serial} (Vorgabe: @code{1})
Die Seriennummer der Zone. Da sie von sowohl „Slaves“ als auch „Resolvern“
benutzt wird, um bei Änderungen auf dem Laufenden zu bleiben, ist es
notwendig, dass sie @emph{niemals} kleiner gemacht wird. Erhöhen Sie sie,
wann immer Sie eine Änderung an Ihrer Zone durchführen.

@item @code{refresh} (Vorgabe: @code{(* 2 24 3600)})
Die Häufigkeit, wie oft Slaves eine Zonenübertragung („Zone Transfer“)
durchführen. Als Wert wird eine Anzahl von Sekunden angegeben. Sie kann über
eine Multiplikation oder mit @code{(string->duration)} angegeben werden.

@item @code{retry} (Vorgabe: @code{(* 15 60)})
Nach welcher Zeitperiode ein Slave versuchen wird, Kontakt mit seinem Master
aufzunehmen, wenn er ihn beim ersten Mal nicht erreichen kann.

@item @code{expiry} (Vorgabe: @code{(* 14 24 3600)})
Die Voreinstellung, welche TTL für Einträge verwendet werden
soll. Bestehende Einträge werden für höchstens diese Zeitspanne als korrekt
angesehen. Nach Ablauf dieser Zeitspanne werden „Resolver“ ihren
Zwischenspeicher als ungültig markieren und erneut prüfen, ob der Eintrag
noch existiert.

@item @code{nx} (Vorgabe: @code{3600})
Die voreingestellte TTL der @emph{nicht} existierenden Einträge. Sie stellt
normalerweise eine kurze Verzögerung dar, weil Sie möchten, dass neue
Domains für jeden schnell erkannt werden.

@end table
@end deftp

@deftp {Datentyp} knot-remote-configuration
Datentyp, der die Konfiguration eines entfernten Servers („Remote“)
repräsentiert. Dieser Typ verfügt über die folgenden Parameter:

@table @asis
@item @code{id} (Vorgabe: @code{""})
Ein Identifikator, mit dem man sich in anderen Konfigurationsfeldern auf
diesen entfernten Server („Remote“) beziehen kann. IDs müssen eindeutig sein
und dürfen @emph{nicht} leer sein.

@item @code{address} (Vorgabe: @code{'()})
Eine geordnete Liste der Empfänger-IP-Adressen. Adressen werden der Reihe
nach durchprobiert. Optional kann eine Portnummer nach dem Trennzeichen @@
angegeben werden, zum Beispiel als @code{(list "1.2.3.4"
"2.3.4.5@@53")}. Die Vorgabe ist 53.

@item @code{via} (Vorgabe: @code{'()})
Eine geordnete Liste der Quell-IP-Adressen. Eine leere Liste wird Knot eine
sinnvolle Quell-IP-Adresse auswählen lassen. Optional kann eine Portnummer
nach dem Trennzeichen @@ angegeben werden. Die Vorgabe wird zufällig
ausgewählt.

@item @code{key} (Vorgabe: @code{#f})
Ein Verweis auf einen Schlüssel („Key“), also eine Zeichenkette, die den
Identifikator eines Schlüssels enthält, der in einem
@code{knot-key-configuration}-Feld festgelegt wurde.

@end table
@end deftp

@deftp {Datentyp} knot-keystore-configuration
Datentyp, der einen Schlüsselspeicher („Keystore“) repräsentiert, um
DNSSEC-Schlüssel zu fassen. Dieser Typ verfügt über die folgenden Parameter:

@table @asis
@item @code{id} (Vorgabe: @code{""})
Der Identifikator des Schlüsselspeichers. Er darf nicht leer gelassen
werden.

@item @code{backend} (Vorgabe: @code{'pem})
Die Art von Hintergrundspeicher, in dem Schlüssel eingetragen werden. Sie
kann @code{'pem} oder @code{'pkcs11} sein.

@item @code{config} (Vorgabe: @code{"/var/lib/knot/keys/keys"})
Die Zeichenkette mit der Konfiguration des Hintergrundspeichers. Ein
Beispiel für die PKCS#11 ist @code{"pkcs11:token=knot;pin-value=1234
/gnu/store/…/lib/pkcs11/libsofthsm2.so"}. Für pem als Hintergrundspeicher
repräsentiert die Zeichenkette einen Pfad im Dateisystem.

@end table
@end deftp

@deftp {Datentyp} knot-policy-configuration
Datentyp, der die DNSSEC-Richtlinie repräsentiert. Knot DNS kann Ihre Zonen
automatisch signieren. Der Dienst kann Ihre Schlüssel automatisch erzeugen
und verwalten oder Schlüssel benutzen, die Sie selbst erzeugen.

DNSSEC wird in der Regel mit zwei Schlüsseln implementiert: Ein Schlüssel,
mit dem Schlüssel signiert werden („Key Signing Key“, KSK), signiert den
zweiten Schlüssel, einen Schlüssel, der Zonen signiert („Zone Signing Key“,
ZSK), mit dem die Zone signiert wird. Damit er als vertrauenswürdig
angesehen wird, muss der KSK in der Elternzone stehen (meistens ist das eine
Top-Level-Domain). Wenn Ihr Registrar DNSSEC unterstützt, müssen Sie ihm den
Hash Ihres KSK übermitteln, damit er einen DS-Eintrag für Ihre Zone
hinzufügen kann. Das passiert nicht automatisch und muss jedes Mal
wiederholt werden, wenn Sie Ihren KSK ändern.

Die Richtlinie legt auch fest, wie lange Ihre Schlüssel gültig
bleiben. Normalerweise kann der ZSK leicht geändert werden und benutzt
kryptografisch schwächere Funktionen (also niedrigere Parameter), damit
Einträge schnell signiert werden können, wodurch man sie oft verändern
kann. Der KSK setzt jedoch eine manuelle Interaktion mit dem Registrar
voraus, also werden sie weniger oft geändert und verwenden stärkere
Parameter, weil mit ihnen nur ein einziger Eintrag signiert wird.

Dieser Typ verfügt über die folgenden Parameter:

@table @asis
@item @code{id} (Vorgabe: @code{""})
Der Identifikator der Richtlinie. Er darf nicht leer sein.

@item @code{keystore} (Vorgabe: @code{"default"})
Eine Referenz auf einen Schlüsselspeicher („Keystore“), also eine
Zeichenkette, die den Identifikator eines Schlüsselspeichers enthält, der in
einem @code{knot-keystore-configuration}-Feld gespeichert ist. Der
Identifikator @code{"default"} sorgt dafür, dass der vorgegebene
Schlüsselspeicher verwendet wird (eine KASP-Datenbank, die durch diesen
Dienst eingerichtet wurde).

@item @code{manual?} (Vorgabe: @code{#f})
Ob Schlüssel manuell verwaltet werden sollen; andernfalls werden sie
automatisch verwaltet.

@item @code{single-type-signing?} (Vorgabe: @code{#f})
Wenn es auf @code{#t} steht, werden dieselben Schlüssel als KSK und ZSK
verwendet („Single-Type Signing Scheme“).

@item @code{algorithm} (Vorgabe: @code{"ecdsap256sha256"})
Ein Algorithmus für zum Signieren verwendete Schlüssel und ausgestellte
Signaturen.

@item @code{ksk-size} (Vorgabe: @code{256})
Die Länge des KSK. Beachten Sie, dass dieser Wert für den vorgegebenen
Algorithmus korrekt ist, aber für andere Algorithmen @emph{nicht} sicher
wäre.

@item @code{zsk-size} (Vorgabe: @code{256})
Die Länge des ZSK. Beachten Sie, dass dieser Wert für den vorgegebenen
Algorithmus korrekt ist, aber für andere Algorithmen @emph{nicht} sicher
wäre.

@item @code{dnskey-ttl} (Vorgabe: @code{'default})
Der TTL-Wert für DNSKEY-Einträge, die die Wurzel der Zone betreffen. Der
besondere Wert @code{'default} bedeutet, dass dieselbe TTL wie für den
SOA-Eintrag der Zone verwendet wird.

@item @code{zsk-lifetime} (Vorgabe: @code{(* 30 24 3600)})
Die Zeitspanne zwischen der Veröffentlichung eines ZSK und dem Anfang des
nächsten Schlüsselübergangs („Key Rollover“).

@item @code{propagation-delay} (Vorgabe: @code{(* 24 3600)})
Eine zusätzliche Verlängerung, die bei jedem Schritt im Schlüsselübergang
(„Key Rollover“) gewartet wird. Dieser Wert sollte hoch genug sein, damit in
dieser Zeit Daten vom Master-Server alle Slaves erreichen.

@item @code{rrsig-lifetime} (Vorgabe: @code{(* 14 24 3600)})
Wie lange neu ausgestellte Signaturen gültig bleiben.

@item @code{rrsig-refresh} (Vorgabe: @code{(* 7 24 3600)})
Wie lange im Voraus vor einem Auslaufen der Signatur diese Signatur erneuert
werden soll.

@item @code{nsec3?} (Vorgabe: @code{#f})
Ist es auf @code{#t} gesetzt, wird NSEC3 statt NSEC benutzt.

@item @code{nsec3-iterations} (Vorgabe: @code{5})
Wie oft zusätzlich gehasht werden soll.

@item @code{nsec3-salt-length} (Vorgabe: @code{8})
Wie lange das kryptografische „Salt“ sein soll, als Anzahl von Oktetten. Es
wird vor dem Hashen an den Namen des ursprünglichen Besitzers angehängt.

@item @code{nsec3-salt-lifetime} (Vorgabe: @code{(* 30 24 3600)})
Wie lange das neu ausgestellte Salt-Feld gültig bleiben soll.

@end table
@end deftp

@deftp {Datentyp} knot-zone-configuration
Datentyp, der eine durch Knot verfügbar gemachte Zone repräsentiert. Dieser
Typ verfügt über die folgenden Parameter:

@table @asis
@item @code{domain} (Vorgabe: @code{""})
Die Domain, die durch diese Konfiguration zur Verfügung gestellt wird. Sie
darf nicht leer sein.

@item @code{file} (Vorgabe: @code{""})
Die Datei, in der diese Zone abgespeichert wird. Dieser Parameter wird bei
Master-Zonen ignoriert. Bleibt er leer, wird die vom Domain-Namen abhängige
Voreinstellung benutzt.

@item @code{zone} (Vorgabe: @code{(zone-file)})
Der Inhalt der Zonendatei. Dieser Parameter wird bei Slave-Zonen
ignoriert. Er muss ein Verbundsobjekt vom Typ @code{zone-file} enthalten.

@item @code{master} (Vorgabe: @code{'()})
Eine Liste von als „Master“ geltenden entfernten Servern. Ist sie leer, ist
diese Zone ein Master, sonst ein Slave. Es handelt sich um eine Liste von
Identifikatoren entfernter Server („Remotes“).

@item @code{ddns-master} (Vorgabe: @code{#f})
Der vorrangige „Master“. Ist dies leer, wird hierfür der erste Master aus
der Liste der Master benutzt.

@item @code{notify} (Vorgabe: @code{'()})
Eine Liste der Identifikatoren von entfernten Slave-Servern („Remotes“).

@item @code{acl} (Vorgabe: @code{'()})
Eine Liste von Identifikatoren von Zugriffssteuerungslisten.

@item @code{semantic-checks?} (Vorgabe: @code{#f})
Wenn dies festgelegt ist, werden für die Zone mehr semantische Überprüfungen
durchgeführt.

@item @code{disable-any?} (Vorgabe: @code{#f})
Wenn dies gesetzt ist, werden Anfragen vom Typ ANY gesperrt.

@item @code{zonefile-sync} (Vorgabe: @code{0})
Wie lange nach einer Änderung der im Arbeitsspeicher zwischengespeicherten
Daten gewartet wird, bis die Daten auf die Platte geschrieben werden. Bei 0
werden sie sofort synchronisiert.

@item @code{zonefile-load} (Vorgabe: @code{#f})
Wie die in der Zonendatei gespeicherten Daten benutzt werden, wenn die Zone
geladen wird. Mögliche Werte sind:

@itemize
@item @code{#f} sorgt dafür, dass nach der Voreinstellung von Knot verfahren wird,
@item @code{'none} bewirkt, dass die Zonendatei überhaupt nicht benutzt wird,
@item @code{'difference} lässt den Unterschied zwischen den bereits vorliegenden
Daten und dem gespeicherten Inhalt der Zone berechnen, welcher dann zum
vorliegenden Zoneninhalt hinzugenommen wird,
@item @code{'difference-no-serial} für dasselbe wie bei @code{'difference},
aber die SOA-Seriennummer in der Zonendatei wird ignoriert und der Server
kümmert sich automatisch darum.
@item @code{'whole} lässt den ganzen Inhalt der Zone aus der Zonendatei auslesen.
@end itemize

@item @code{journal-content} (Vorgabe: @code{#f})
Wie in den Aufzeichnungen die Zone und Änderungen daran gespeichert werden
sollen. Mögliche Werte sind @code{'none}, um keine Aufzeichnungen zu führen,
@code{'changes}, um Änderungen zu speichern, und @code{'all}, wodurch der
gesamte Inhalt gespeichert wird. Für @code{#f} wird dieser Wert nicht
gesetzt, so dass der in Knot voreingestellte Wert benutzt wird.

@item @code{max-journal-usage} (Vorgabe: @code{#f})
Die maximale Größe, die Aufzeichnungen für die Wiederherstellbarkeit
(„Journal“) auf der Platte einnehmen können. Für @code{#f} wird dieser Wert
nicht gesetzt, so dass der in Knot voreingestellte Wert benutzt wird.

@item @code{max-journal-depth} (Vorgabe: @code{#f})
Wieviele Aufzeichnungen höchstens im Änderungsverlauf gespeichert
werden. Für @code{#f} wird dieser Wert nicht gesetzt, so dass der in Knot
voreingestellte Wert benutzt wird.

@item @code{max-zone-size} (Vorgabe: @code{#f})
Die maximale Größe der Zonendatei. Diese Beschränkung wird auf eingehende
Übertragungen und Aktualisierungen angewandt. Für @code{#f} wird dieser Wert
nicht gesetzt, so dass der in Knot voreingestellte Wert benutzt wird.

@item @code{dnssec-policy} (Vorgabe: @code{#f})
Ein Verweis auf ein @code{knot-policy-configuration}-Verbundsobjekt oder der
besondere Name @code{"default"}, um die Voreinstellung von Knot zu
verwenden. Wenn dies als der Wert @code{#f} angegeben wurde, findet in
dieser Zone kein Signieren mit DNSSEC statt.

@item @code{serial-policy} (Vorgabe: @code{'increment})
Eine Richtlinie; entweder @code{'increment} (Seriennummer hochzählen) oder
@code{'unixtime} (Unix-Zeitstempel verwenden).

@end table
@end deftp

@deftp {Datentyp} knot-configuration
Datentyp, der die Konfiguration von Knot repräsentiert. Dieser Typ verfügt
über die folgenden Parameter:

@table @asis
@item @code{knot} (Vorgabe: @code{knot})
Das Knot-Paket.

@item @code{run-directory} (Vorgabe: @code{"/var/run/knot"})
Das Laufzeit-Verzeichnis („run“-Verzeichnis). In diesem Verzeichnis werden
die PID-Datei mit dem Prozessidentifikator und Sockets gespeichert.

@item @code{includes} (Vorgabe: @code{'()})
Eine flache Liste von Zeichenketten oder dateiartigen Objekten, die oben in
der Konfigurationsdatei eingebunden werden müssen.

@cindex Geheimnisse, Knot-Dienst
Hiermit können Geheimnisse abseits von Guix’ Zuständigkeitsbereich
gespeichert werden. Zum Beispiel können Sie geheime Schlüssel so in einer
externen Datei speichern, die nicht von Guix verwaltet und daher auch nicht
von jedem in @file{/gnu/store} ausgelesen werden kann — Sie können etwa Ihre
geheime Schlüsselkonfiguration in @file{/etc/knot/secrets.conf} speichern
und diese Datei dann zu Ihrer @code{includes}-Liste hinzufügen.

Sie können mit dem Schlüsselverwaltungsprogramm @code{keymgr} aus dem
Knot-Paket einen geheimen TSIG-Schlüssel erzeugen lassen (für
@code{nsupdate} und Zonentransfers). Beachten Sie, dass das Paket
@emph{nicht} automatisch durch den Dienst installiert wird. Das folgende
Beispiel zeigt, wie man einen neuen TSIG-Schlüssel erzeugen lässt:

@example
keymgr -t meingeheimnis > /etc/knot/secrets.conf
chmod 600 /etc/knot/secrets.conf
@end example

Außerdem sollten Sie bedenken, dass der erzeugte Schlüssel den Namen
@var{meingeheimnis} bekommt, dieser Name also auch im @var{key}-Feld des
@code{knot-acl-configuration}-Verbundsobjekts und an anderen Stellen
verwendet werden muss, wo auf den Schlüssel verwiesen wird.

Sie können die @code{includes} auch benutzen, um von der Guix-Schnittstelle
nicht unterstützte Einstellungen festzulegen.

@item @code{listen-v4} (Vorgabe: @code{"0.0.0.0"})
Eine IP-Adresse, auf der gelauscht werden soll.

@item @code{listen-v6} (Vorgabe: @code{"::"})
Eine IP-Adresse, auf der gelauscht werden soll.

@item @code{listen-port} (Vorgabe: @code{53})
Ein Port, auf dem gelauscht werden soll.

@item @code{keys} (Vorgabe: @code{'()})
Die Liste der @code{knot-key-configuration}-Objekte, die von dieser
Konfiguration benutzt werden sollen.

@item @code{acls} (Vorgabe: @code{'()})
Die Liste der @code{knot-acl-configuration}-Objekte, die von dieser
Konfiguration benutzt werden sollen.

@item @code{remotes} (Vorgabe: @code{'()})
Die Liste der @code{knot-remote-configuration}-Objekte, die von dieser
Konfiguration benutzt werden sollen.

@item @code{zones} (Vorgabe: @code{'()})
Die Liste der @code{knot-zone-configuration}-Objekte, die von dieser
Konfiguration benutzt werden sollen.

@end table
@end deftp

@subsubheading Knot-Resolver-Dienst

@deffn {Scheme-Variable} knot-resolver-service-type
Dies ist der Diensttyp des Knot-Resolver-Dienstes, dessen Wert ein
@code{knot-resolver-configuration}-Objekt wie in diesem Beispiel sein
sollte:

@lisp
(service knot-resolver-service-type
         (knot-resolver-configuration
           (kresd-config-file (plain-file "kresd.conf" "
net.listen('192.168.0.1', 5353)
user('knot-resolver', 'knot-resolver')
modules = @{ 'hints > iterate', 'stats', 'predict' @}
cache.size = 100 * MB
"))))
@end lisp

Weitere Informationen finden Sie in seinem
@url{https://knot-resolver.readthedocs.org/en/stable/daemon.html#configuration,
Handbuch}.
@end deffn

@deftp {Datentyp} knot-resolver-configuration
Der Datentyp, der die Konfiguration von knot-resolver repräsentiert.

@table @asis
@item @code{package} (Vorgabe: @var{knot-resolver})
Das Paketobjekt des Knot-DNS-Resolvers.

@item @code{kresd-config-file} (Vorgabe: %kresd.conf)
Datei-artiges Objekt der zu nutzenden kresd-Konfigurationsdatei. Nach
Vorgabe lauscht der Knot-Resolver auf @code{127.0.0.1} und @code{::1}.

@item @code{garbage-collection-interval} (Vorgabe: 1000)
Wieviele Millisekunden @code{kres-cache-gc} zwischen Bereinigungen seines
Zwischenspeichers wartet.

@end table
@end deftp


@subsubheading Dnsmasq-Dienst

@deffn {Scheme-Variable} dnsmasq-service-type
Dies ist der Diensttyp des dnsmasq-Dienstes, dessen Wert ein
@code{dnsmasq-configuration}-Objekt wie in diesem Beispiel sein sollte:

@lisp
(service dnsmasq-service-type
         (dnsmasq-configuration
           (no-resolv? #t)
           (servers '("192.168.1.1"))))
@end lisp
@end deffn

@deftp {Datentyp} dnsmasq-configuration
Repräsentiert die dnsmasq-Konfiguration.

@table @asis
@item @code{package} (Vorgabe: @var{dnsmasq})
Paketobjekt des dnsmasq-Servers.

@item @code{no-hosts?} (Vorgabe: @code{#f})
Ist es auf wahr gesetzt, werden keine Rechnernamen („Hostnames“) aus
/etc/hosts ausgelesen.

@item @code{port} (Vorgabe: @code{53})
Der Port, auf dem gelauscht werden soll. Wird dies auf null gesetzt, werden
keinerlei DNS-Anfragen beantwortet und es bleiben nur DHCP- und/oder
TFTP-Funktionen.

@item @code{local-service?} (Vorgabe: @code{#t})
DNS-Anfragen nur von Rechnern akzeptieren, deren Adresse auf einem lokalen
Subnetz liegt, d.h.@: einem Subnetz, für dem auf dem Server eine
Schnittstelle existiert.

@item @code{listen-addresses} (Vorgabe: @code{'()})
Lässt auf den angegebenen IP-Adressen lauschen.

@item @code{resolv-file} (Vorgabe: @code{"/etc/resolv.conf"})
Aus welcher Datei die IP-Adresse der zu verwendenden Namensserver gelesen
werden sollen.

@item @code{no-resolv?} (Vorgabe: @code{#f})
Wenn es auf wahr steht, wird das @var{resolv-file} nicht gelesen.

@item @code{servers} (Vorgabe: @code{'()})
Geben Sie die IP-Adresse von anzufragenden Servern direkt an.

@item @code{addresses} (default: @code{'()})
For each entry, specify an IP address to return for any host in the given
domains.  Queries in the domains are never forwarded and always replied to
with the specified IP address.

This is useful for redirecting hosts locally, for example:

@lisp
(service dnsmasq-service-type
         (dnsmasq-configuration
           (addresses
             '(; Redirect to a local web-server.
               "/example.org/127.0.0.1"
               ; Redirect subdomain to a specific IP.
               "/subdomain.example.org/192.168.1.42"))))
@end lisp

Note that rules in @file{/etc/hosts} take precedence over this.

@item @code{cache-size} (Vorgabe: @code{150})
Bestimmt die Größe des Zwischenspeichers von dnsmasq. Wird die
Zwischenspeichergröße auf null festgelegt, wird kein Zwischenspeicher
benutzt.

@item @code{negative-cache?} (Vorgabe: @code{#t})
Ist dies auf falsch gesetzt, werden Negativergebnisse nicht
zwischengespeichert.

@end table
@end deftp

@subsubheading ddclient-Dienst

@cindex ddclient
Der im Folgenden beschriebene ddclient-Dienst führt den ddclient-Daemon aus,
der dafür sorgt, dass DNS-Einträge für Dienstanbieter wie
@uref{https://dyn.com/dns/, Dyn} automatisch aktualisiert werden.

Das folgende Beispiel zeigt, wie man den Dienst mit seiner
Vorgabekonfiguration instanziiert:

@lisp
(service ddclient-service-type)
@end lisp

Note that ddclient needs to access credentials that are stored in a
@dfn{secret file}, by default @file{/etc/ddclient/secrets} (see
@code{secret-file} below).  You are expected to create this file manually,
in an ``out-of-band'' fashion (you @emph{could} make this file part of the
service configuration, for instance by using @code{plain-file}, but it will
be world-readable @i{via} @file{/gnu/store}).  See the examples in the
@file{share/ddclient} directory of the @code{ddclient} package.

@c %start of fragment

Verfügbare @code{ddclient-configuration}-Felder sind:

@deftypevr {@code{ddclient-configuration}-Parameter} „package“ ddclient
Das ddclient-Paket.

@end deftypevr

@deftypevr {@code{ddclient-configuration}-Parameter} Ganze-Zahl daemon
Nach wieviel Zeit ddclient erneut versuchen wird, IP und Domain-Namen zu
überprüfen.

Die Vorgabe ist @samp{300}.

@end deftypevr

@deftypevr {@code{ddclient-configuration}-Parameter} Boolescher-Ausdruck syslog
Ob die Ausgabe an Syslog gehen soll.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{ddclient-configuration}-Parameter} Zeichenkette mail
An welchen Benutzer Mitteilungen gemailt werden sollen.

Die Vorgabe ist @samp{"root"}.

@end deftypevr

@deftypevr {@code{ddclient-configuration}-Parameter} Zeichenkette mail-failure
Den Nutzer per Mail bei fehlgeschlagenen Aktualisierungen benachrichtigen.

Die Vorgabe ist @samp{"root"}.

@end deftypevr

@deftypevr {@code{ddclient-configuration}-Parameter} Zeichenkette pid
PID-Datei für den ddclient.

Die Vorgabe ist @samp{"/var/run/ddclient/ddclient.pid"}.

@end deftypevr

@deftypevr {@code{ddclient-configuration}-Parameter} Boolescher-Ausdruck ssl
SSL-Unterstützung aktivieren.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{ddclient-configuration}-Parameter} Zeichenkette user
Gibt den Namen oder Identifikator des Benutzerkontos an, unter dem das
ddclient-Programm laufen soll.

Die Vorgabe ist @samp{"ddclient"}.

@end deftypevr

@deftypevr {@code{ddclient-configuration}-Parameter} Zeichenkette group
Die Gruppe des Benutzers, mit dem das ddclient-Programm läuft.

Die Vorgabe ist @samp{"ddclient"}.

@end deftypevr

@deftypevr {@code{ddclient-configuration}-Parameter} Zeichenkette secret-file
Die Geheimnisdatei („Secret File“), die an die erzeugte
@file{ddclient.conf}-Datei angehängt wird. Diese Datei enthält die
Zugangsdaten, die ddclient benutzen soll. Es wird erwartet, dass Sie sie
manuell erzeugen.

Die Vorgabe ist @samp{"/etc/ddclient/secrets.conf"}.

@end deftypevr

@deftypevr {@code{ddclient-configuration}-Parameter} Liste extra-options
Zusätzliche Einstellungsoptionen, die an die @file{ddclient.conf}-Datei
angehängt werden.

Die Vorgabe ist @samp{()}.

@end deftypevr


@c %end of fragment


@node VPN-Dienste
@subsection VPN-Dienste
@cindex VPN (Virtual Private Network)
@cindex Virtual Private Network (VPN)

Das Modul @code{(gnu services vpn)} stellt Dienste zur Verfügung, die mit
@dfn{Virtual Private Networks} (VPNs) zu tun haben. Darin wird ein
@emph{Client}-Dienst angeboten, mit dem sich Ihre Maschine mit einem VPN
verbinden kann, sowie ein @emph{Server}-Dienst, mit dem Sie auf Ihrer
Maschine ein VPN betreiben können. Beide Dienste benutzen
@uref{https://openvpn.net/, OpenVPN}.

@deffn {Scheme-Prozedur} openvpn-client-service @
       [#:config (openvpn-client-configuration)]

Liefert einen Dienst, der den VPN-Daemon @command{openvpn} als Client
ausführt.
@end deffn

@deffn {Scheme-Prozedur} openvpn-server-service @
       [#:config (openvpn-server-configuration)]

Liefert einen Dienst, der den VPN-Daemon @command{openvpn} als Server
ausführt.

Beide können zeitgleich laufen gelassen werden.
@end deffn

@c %automatically generated documentation

Verfügbare @code{openvpn-client-configuration}-Felder sind:

@deftypevr {@code{openvpn-client-configuration}-Parameter} „package“ openvpn
Das OpenVPN-Paket.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Zeichenkette pid-file
Die Datei für den Prozessidentifikator („PID“) von OpenVPN.

Die Vorgabe ist @samp{"/var/run/openvpn/openvpn.pid"}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Protokoll proto
Das Protokoll (UDP oder TCP), das benutzt werden soll, um einen
Kommunikationskanal zwischen Clients und Servern herzustellen.

Die Vorgabe ist @samp{udp}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Gerät dev
Der Gerätetyp, mit dem die VPN-Verbindung repräsentiert werden soll.

Die Vorgabe ist @samp{tun}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Zeichenkette ca
Die Zertifikatsautorität, mit der Verbindungen geprüft werden.

Die Vorgabe ist @samp{"/etc/openvpn/ca.crt"}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Zeichenkette cert
Das Zertifikat der Maschine, auf der der Daemon läuft. Es sollte von der in
@code{ca} angegebenen Zertifikatsautorität signiert sein.

Die Vorgabe ist @samp{"/etc/openvpn/client.crt"}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Zeichenkette key
Der Schlüssel der Maschine, auf der der Daemon läuft. Er muss der Schlüssel
zum in @code{cert} angegebenen Zertifikat sein.

Die Vorgabe ist @samp{"/etc/openvpn/client.key"}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Boolescher-Ausdruck comp-lzo?
Ob der Kompressionsalgorithmus lzo benutzt werden soll.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Boolescher-Ausdruck persist-key?
Die Schlüsseldateien nach Auftreten von SIGUSR1 oder --ping-restart
@emph{nicht} erneut einlesen.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Boolescher-Ausdruck persist-tun?
Nach dem Auftreten von SIGUSR1 oder --ping-restart TUN/TAP-Geräte
@emph{nicht} schließen und wieder öffnen und auch keine Start-/Stop-Skripte
ausführen.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Boolescher-Ausdruck fast-io?
(Experimentell) Schreibzugriffe durch Datenverkehr bei TUN/TAP/UDP
optimieren, indem ein Aufruf von poll/epoll/select vor der Schreiboperation
eingespart wird.

Vorgegeben ist @samp{#f}.
@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Zahl verbosity
Ausführlichkeitsstufe.

Die Vorgabe ist @samp{3}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} „tls-auth“-Clienteinstellung tls-auth
Eine weitere HMAC-Authentifizierung zusätzlich zum TLS-Steuerungskanal
einsetzen, um das System vor gezielten Überlastungsangriffen („Denial of
Service“) zu schützen.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Vielleicht-Zeichenkette auth-user-pass
Beim Server eine Authentisierung über Benutzername/Passwort durchführen. Die
Option nimmt eine Datei, welche Benutzername und Passwort auf zwei Zeilen
enthält. Benutzen Sie dafür @emph{kein} dateiartiges Objekt, weil es in den
Store eingelagert würde, wo es jeder Benutzer einsehen könnte.

Der Vorgabewert ist @samp{'disabled} (d.h.@: deaktiviert).
@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Schlüsselprüfung verify-key-usage?
Ob sichergestellt werden soll, dass das Server-Zertifikat auch über eine
Erweiterung („Extension“) verfügt, dass es für die Nutzung als Server gültig
ist.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} bind bind?
Ob an immer dieselbe, feste lokale Portnummer gebunden wird.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} Erneut-Auflösen resolv-retry?
Ob, wenn die Server-Adresse nicht aufgelöst werden konnte, die Auflösung
erneut versucht wird.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{openvpn-client-configuration}-Parameter} „openvpn-remote-configuration“-Liste remote
Eine Liste entfernter Servern, mit denen eine Verbindung hergestellt werden
soll.

Die Vorgabe ist @samp{()}.

Verfügbare @code{openvpn-remote-configuration}-Felder sind:

@deftypevr {@code{openvpn-remote-configuration}-Parameter} Zeichenkette name
Der Servername.

Die Vorgabe ist @samp{"my-server"}.

@end deftypevr

@deftypevr {@code{openvpn-remote-configuration}-Parameter} Zahl port
Die Portnummer, auf der der Server lauscht.

Die Vorgabe ist @samp{1194}.

@end deftypevr

@end deftypevr
@c %end of automatic openvpn-client documentation

@c %automatically generated documentation

Verfügbare @code{openvpn-server-configuration}-Felder sind:

@deftypevr {@code{openvpn-server-configuration}-Parameter} „package“ openvpn
Das OpenVPN-Paket.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Zeichenkette pid-file
Die Datei für den Prozessidentifikator („PID“) von OpenVPN.

Die Vorgabe ist @samp{"/var/run/openvpn/openvpn.pid"}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Protokoll proto
Das Protokoll (UDP oder TCP), das benutzt werden soll, um einen
Kommunikationskanal zwischen Clients und Servern herzustellen.

Die Vorgabe ist @samp{udp}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Gerät dev
Der Gerätetyp, mit dem die VPN-Verbindung repräsentiert werden soll.

Die Vorgabe ist @samp{tun}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Zeichenkette ca
Die Zertifikatsautorität, mit der Verbindungen geprüft werden.

Die Vorgabe ist @samp{"/etc/openvpn/ca.crt"}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Zeichenkette cert
Das Zertifikat der Maschine, auf der der Daemon läuft. Es sollte von der in
@code{ca} angegebenen Zertifikatsautorität signiert sein.

Die Vorgabe ist @samp{"/etc/openvpn/client.crt"}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Zeichenkette key
Der Schlüssel der Maschine, auf der der Daemon läuft. Er muss der Schlüssel
zum in @code{cert} angegebenen Zertifikat sein.

Die Vorgabe ist @samp{"/etc/openvpn/client.key"}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Boolescher-Ausdruck comp-lzo?
Ob der Kompressionsalgorithmus lzo benutzt werden soll.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Boolescher-Ausdruck persist-key?
Die Schlüsseldateien nach Auftreten von SIGUSR1 oder --ping-restart
@emph{nicht} erneut einlesen.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Boolescher-Ausdruck persist-tun?
Nach dem Auftreten von SIGUSR1 oder --ping-restart TUN/TAP-Geräte
@emph{nicht} schließen und wieder öffnen und auch keine Start-/Stop-Skripte
ausführen.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Boolescher-Ausdruck fast-io?
(Experimentell) Schreibzugriffe durch Datenverkehr bei TUN/TAP/UDP
optimieren, indem ein Aufruf von poll/epoll/select vor der Schreiboperation
eingespart wird.

Vorgegeben ist @samp{#f}.
@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Zahl verbosity
Ausführlichkeitsstufe.

Die Vorgabe ist @samp{3}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} „tls-auth“-Servereinstellung tls-auth
Eine weitere HMAC-Authentifizierung zusätzlich zum TLS-Steuerungskanal
einsetzen, um das System vor gezielten Überlastungsangriffen („Denial of
Service“) zu schützen.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Zahl port
Gibt die Portnummer an, auf der der Server lauscht.

Die Vorgabe ist @samp{1194}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} IP-und-Maske server
Eine IP-Adresse gefolgt von deren Maske, die das Subnetz im virtuellen
Netzwerk angibt.

Die Vorgabe ist @samp{"10.8.0.0 255.255.255.0"}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} cidr6 server-ipv6
Eine CIDR-Notation, mit der das IPv6-Subnetz im virtuellen Netzwerk
angegeben wird.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Zeichenkette dh
Die Datei mit den Diffie-Hellman-Parametern.

Die Vorgabe ist @samp{"/etc/openvpn/dh2048.pem"}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Zeichenkette ifconfig-pool-persist
Die Datei, in der Client-IPs eingetragen werden.

Die Vorgabe ist @samp{"/etc/openvpn/ipp.txt"}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Zugang redirect-gateway?
Wenn dies auf wahr steht, fungiert der Server als Zugang („Gateway“) für
seine Clients.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Boolescher-Ausdruck client-to-client?
Wenn dies auf wahr steht, ist es zugelassen, dass Clients untereinander
innerhalb des VPNs kommunizieren.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Aufrechterhaltung keepalive
Lässt ping-artige Nachrichtigen in beide Richtungen über die Leitung
übertragen, damit beide Seiten bemerken, wenn der Kommunikationspartner
offline geht. Für @code{keepalive} muss ein Paar angegeben werden. Das erste
Element ist die Periode, nach der das Pingsignal wieder gesendet werden
soll, und das zweite ist eine Zeitbegrenzung, in der eines ankommen muss,
damit die andere Seite nicht als offline gilt.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Zahl max-clients
Wieviele Clients es höchstens geben kann.

Die Vorgabe ist @samp{100}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} Zeichenkette status
Die Datei für einen Zustandsbericht („Status File“). Diese Datei enthält
einen kurzen Bericht über die momentane Verbindung. Sie wird jede Minute
gekürzt und neu geschrieben.

Die Vorgabe ist @samp{"/var/run/openvpn/status"}.

@end deftypevr

@deftypevr {@code{openvpn-server-configuration}-Parameter} „openvpn-ccd-configuration“-Liste client-config-dir
Die Liste der Konfigurationen für einige Clients.

Die Vorgabe ist @samp{()}.

Verfügbare @code{openvpn-ccd-configuration}-Felder sind:

@deftypevr {@code{openvpn-ccd-configuration}-Parameter} Zeichenkette name
Der Client-Name.

Die Vorgabe ist @samp{"client"}.

@end deftypevr

@deftypevr {@code{openvpn-ccd-configuration}-Parameter} IP-und-Maske iroute
Das eigene Netzwerk des Clients.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{openvpn-ccd-configuration}-Parameter} IP-und-Maske ifconfig-push
VPN-IP-Adresse des Clients.

Vorgegeben ist @samp{#f}.

@end deftypevr

@end deftypevr


@c %end of automatic openvpn-server documentation


@node Network File System
@subsection Network File System
@cindex NFS

Das Modul @code{(gnu services nfs)} stellt die folgenden Dienste zur
Verfügung, die meistens dazu benutzt werden, Verzeichnisbäume als
Netzwerkdateisysteme, englisch @dfn{Network File Systems} (NFS), einzubinden
oder an andere zu exportieren.

Obwohl man auch die einzelnen Komponenten eines Network-File-System-Dienstes
separat einrichten kann, raten wir dazu, einen NFS-Server mittels
@code{nfs-service-type} zu konfigurieren.

@subsubheading NFS-Dienst
@cindex NFS, Server

Der NFS-Dienst sorgt dafür, dass alle NFS-Komponentendienste, die
Konfiguration des NFS-Kernels und Dateisysteme eingerichtet werden, und er
installiert an den von NFS erwarteten Orten Konfigurationsdateien.

@defvr {Scheme-Variable} nfs-service-type
Ein Diensttyp für einen vollständigen NFS-Server.
@end defvr

@deftp {Datentyp} nfs-configuration
Dieser Datentyp repräsentiert die Konfiguration des NFS-Dienstes und all
seiner Subsysteme.

Er hat folgende Parameter:
@table @asis
@item @code{nfs-utils} (Vorgabe: @code{nfs-utils})
Das nfs-utils-Paket, was benutzt werden soll.

@item @code{nfs-versions} (Vorgabe: @code{'("4.2" "4.1" "4.0")})
Wenn eine Liste von Zeichenketten angegeben wird, beschränkt sich der
@command{rpc.nfsd}-Daemon auf die Unterstützung der angegebenen Versionen
des NFS-Protokolls.

@item @code{exports} (Vorgabe: @code{'()})
Diese Liste von Verzeichnissen soll der NFS-Server exportieren. Jeder
Eintrag ist eine Liste, die zwei Elemente enthält: den Namen eines
Verzeichnisses und eine Zeichenkette mit allen Optionen. Ein Beispiel, wo
das Verzeichnis @file{/export} an alle NFS-Clients nur mit Lesezugriff
freigegeben wird, sieht so aus:

@lisp
(nfs-configuration
 (exports
  '(("/export"
     "*(ro,insecure,no_subtree_check,crossmnt,fsid=0)"))))
@end lisp

@item @code{rpcmountd-port} (Vorgabe: @code{#f})
Welchen Netzwerk-Port der @command{rpc.mountd}-Daemon benutzen soll.

@item @code{rpcstatd-port} (Vorgabe: @code{#f})
Welchen Netzwerk-Port der @command{rpc.statd}-Daemon benutzen soll.

@item @code{rpcbind} (Vorgabe: @code{rpcbind})
Das rpcbind-Paket, das benutzt werden soll.

@item @code{idmap-domain} (Vorgabe: @code{"localdomain"})
Der lokale NFSv4-Domainname.

@item @code{nfsd-port} (Vorgabe: @code{2049})
Welchen Netzwerk-Port der @command{nfsd}-Daemon benutzen soll.

@item @code{nfsd-threads} (Vorgabe: @code{8})
Wieviele Threads der @command{rpc.statd}-Daemon benutzen soll.

@item @code{pipefs-directory} (Vorgabe: @code{"/var/lib/nfs/rpc_pipefs"})
Das Verzeichnis, unter dem das Pipefs-Dateisystem eingebunden wurde.

@item @code{debug} (Vorgabe: @code{'()"})
Eine Liste der Subsysteme, für die Informationen zur Fehlersuche
bereitgestellt werden sollen, als Liste von Symbolen. Jedes der folgenden
Symbole ist gültig: @code{nfsd}, @code{nfs}, @code{rpc}, @code{idmap},
@code{statd} oder @code{mountd}.
@end table
@end deftp

Wenn Sie keinen vollständigen NFS-Dienst benötigen oder ihn selbst
einrichten wollen, können Sie stattdessen die im Folgenden dokumentierten
Komponentendienste benutzen.

@subsubheading RPC-Bind-Dienst
@cindex rpcbind

Mit dem RPC-Bind-Dienst können Programmnummern auf universelle Adressen
abgebildet werden. Viele Dienste, die mit dem NFS zu tun haben, benutzen
diese Funktion, daher wird sie automatisch gestartet, sobald ein davon
abhängiger Dienst startet.

@defvr {Scheme-Variable} rpcbind-service-type
Ein Diensttyp für den RPC-Portplaner-Daemon („Portmapper“).
@end defvr


@deftp {Datentyp} rpcbind-configuration
Datentyp, der die Konfiguration des RPC-Bind-Dienstes repräsentiert. Dieser
Typ verfügt über die folgenden Parameter:
@table @asis
@item @code{rpcbind} (Vorgabe: @code{rpcbind})
Das rpcbind-Paket, das benutzt werden soll.

@item @code{warm-start?} (Vorgabe: @code{#t})
Wenn dieser Parameter @code{#t} ist, wird der Daemon beim Starten eine
Zustandsdatei („State File“) lesen, aus der er die von der vorherigen
Instanz gespeicherten Zustandsinformationen wiederherstellt.
@end table
@end deftp


@subsubheading Pipefs-Pseudodateisystem
@cindex pipefs
@cindex rpc_pipefs

Mit dem Pipefs-Dateisystem können NFS-bezogene Daten zwischen dem Kernel und
Programmen auf der Anwendungsebene (dem „User Space“) übertragen werden.

@defvr {Scheme-Variable} pipefs-service-type
Ein Diensttyp für das Pseudodateisystem „Pipefs“.
@end defvr

@deftp {Datentyp} pipefs-configuration
Datentyp, der die Konfiguration des Pipefs-Pseudodateisystemdienstes
repräsentiert. Dieser Typ verfügt über die folgenden Parameter:
@table @asis
@item @code{mount-point} (Vorgabe: @code{"/var/lib/nfs/rpc_pipefs"})
Das Verzeichnis, unter dem das Dateisystem eingebunden werden soll.
@end table
@end deftp


@subsubheading GSS-Daemon-Dienst
@cindex GSSD
@cindex GSS
@cindex Global Security System

Der Daemon des @dfn{Global Security System} (GSS) ermöglicht starke
Informationssicherheit für RPC-basierte Protokolle. Vor dem Austausch von
Anfragen über entfernte Prozeduraufrufe („Remote Procedure Calls“, kurz RPC)
muss ein RPC-Client einen Sicherheitskontext („Security Context“)
herstellen. Typischerweise wird dazu der @command{kinit}-Befehl von Kerberos
benutzt, oder er wird automatisch bei der Anmeldung über PAM-Dienste
hergestellt (siehe @ref{Kerberos-Dienste}).

@defvr {Scheme-Variable} gss-service-type
Ein Diensttyp für den Daemon des Global Security System (GSS).
@end defvr

@deftp {Datentyp} gss-configuration
Datentyp, der die Konfiguration des GSS-Daemon-Dienstes
repräsentiert. Dieser Typ verfügt über die folgenden Parameter:
@table @asis
@item @code{nfs-utils} (Vorgabe: @code{nfs-utils})
Das Paket, in dem der Befehl @command{rpc.gssd} gesucht werden soll.

@item @code{pipefs-directory} (Vorgabe: @code{"/var/lib/nfs/rpc_pipefs"})
Das Verzeichnis, unter dem das Pipefs-Dateisystem eingebunden wurde.

@end table
@end deftp


@subsubheading IDMAP-Daemon-Dienst
@cindex idmapd
@cindex Name-Mapper

Der idmap-Daemon-Dienst ermöglicht eine Abbildung zwischen
Benutzeridentifikatoren und Benutzernamen. Er wird in der Regel dafür
benötigt, auf über NFSv4 eingebundene Dateisysteme zuzugreifen.

@defvr {Scheme-Variable} idmap-service-type
Ein Diensttyp für den Identity-Mapper-Daemon (IDMAP).
@end defvr

@deftp {Datentyp} idmap-configuration
Datentyp, der die Konfiguration des IDMAP-Daemon-Dienstes
repräsentiert. Dieser Typ verfügt über die folgenden Parameter:
@table @asis
@item @code{nfs-utils} (Vorgabe: @code{nfs-utils})
Das Paket, in dem der Befehl @command{rpc.idmapd} gesucht werden soll.

@item @code{pipefs-directory} (Vorgabe: @code{"/var/lib/nfs/rpc_pipefs"})
Das Verzeichnis, unter dem das Pipefs-Dateisystem eingebunden wurde.

@item @code{domain} (Vorgabe: @code{#f})
Der lokale NFSv4-Domain-Name. Für ihn muss eine Zeichenkette oder @code{#f}
angegeben werden. Wenn @code{#f} angegeben wird, benutzt der Daemon den
vollständigen Domain-Namen („Fully Qualified Domain Name“) des Rechners.

@item @code{verbosity} (Vorgabe: @code{0})
Die Ausführlichkeitsstufe des Daemons.

@end table
@end deftp

@node Kontinuierliche Integration
@subsection Kontinuierliche Integration

@cindex Kontinuierliche Integration
@uref{https://git.savannah.gnu.org/cgit/guix/guix-cuirass.git, Cuirass} ist
ein Werkzeug zur kontinuierlichen Integration für Guix. Es kann sowohl bei
der Entwicklung helfen als auch beim Anbieten von Substituten für andere
(siehe @ref{Substitute}).

Das Modul @code{(gnu services cuirass)} stellt den folgenden Dienst zur
Verfügung:

@defvr {Scheme-Prozedur} cuirass-service-type
Der Diensttyp des Cuirass-Dienstes. Sein Wert muss ein
@code{cuirass-configuration}-Verbundsobjekt sein, wie im Folgenden
beschrieben.
@end defvr

To add build jobs, you have to set the @code{specifications} field of the
configuration.  Here is an example of a service that polls the Guix
repository and builds the packages from a manifest.  Some of the packages
are defined in the @code{"custom-packages"} input, which is the equivalent
of @env{GUIX_PACKAGE_PATH}.

@lisp
(define %cuirass-specs
  #~(list
     '((#:name . "my-manifest")
       (#:load-path-inputs . ("guix"))
       (#:package-path-inputs . ("eigene-pakete"))
       (#:proc-input . "guix")
       (#:proc-file . "build-aux/cuirass/gnu-system.scm")
       (#:proc . cuirass-jobs)
       (#:proc-args . ((subset . "manifests")
                       (systems . ("x86_64-linux"))
                       (manifests . (("config" . "guix/manifest.scm")))))
       (#:inputs . (((#:name . "guix")
                     (#:url . "git://git.savannah.gnu.org/guix.git")
                     (#:load-path . ".")
                     (#:branch . "master")
                     (#:no-compile? . #t))
                    ((#:name . "config")
                     (#:url . "https://git.example.org/config.git")
                     (#:load-path . ".")
                     (#:branch . "master")
                     (#:no-compile? . #t))
                    ((#:name . "eigene-pakete")
                     (#:url . "https://git.example.org/eigene-pakete.git")
                     (#:load-path . ".")
                     (#:branch . "master")
                     (#:no-compile? . #t)))))))

(service cuirass-service-type
         (cuirass-configuration
          (specifications %cuirass-specs)))
@end lisp

Die Informationen, die sich auf Erstellungsaufträge beziehen, werden direkt
in deren Spezifikation festgelegt, aber globale Einstellungen des
@command{cuirass}-Prozesses sind über andere Felder der
@code{cuirass-configuration} zugänglich.

@deftp {Datentyp} cuirass-configuration
Datentyp, der die Konfiguration von Cuirass repräsentiert.

@table @asis
@item @code{log-file} (Vorgabe: @code{"/var/log/cuirass.log"})
An welchen Ort die Protokolldatei geschrieben wird.

@item @code{web-log-file} (Vorgabe: @code{"/var/log/cuirass-web.log"})
An welchem Ort die Protokolldatei der Weboberfläche gespeichert wird.

@item @code{cache-directory} (Vorgabe: @code{"/var/cache/cuirass"})
Ort, wo Repositorys zwischengespeichert werden.

@item @code{user} (Vorgabe: @code{"cuirass"})
Besitzer des @code{cuirass}-Prozesses.

@item @code{group} (Vorgabe: @code{"cuirass"})
Gruppe des Besitzers des @code{cuirass}-Prozesses.

@item @code{interval} (Vorgabe: @code{60})
Anzahl der Sekunden, bevor ein Repository wieder neu geladen wird und danach
Cuirass-Aufträge behandelt werden.

@item @code{database} (Vorgabe: @code{"/var/lib/cuirass/cuirass.db"})
An welchem Ort sich die sqlite-Datenbank befinden soll, die die
Erstellungsergebnisse und bisher hinzugefügte Spezifikationen speichert.

@item @code{ttl} (Vorgabe: @code{(* 30 24 3600)})
Gibt an, wieviele Sekunden für Erstellungsergebnisse registrierte
Müllsammlerwurzeln gültig bleiben („Time-to-live“, kurz TTL). Dadurch werden
Erstellungsergebnisse für mindestens @var{ttl}-viele Sekunden geschützt.

@item @code{port} (Vortrag: @code{8081})
Portnummer, die vom HTTP-Server benutzt wird.

@item @code{host} (Vorgabe: @code{"localhost"})
Auf der Netzwerkschnittstelle für den Rechnernamen @var{host} lauschen. Nach
Vorgabe werden Verbindungen vom lokalen Rechner @code{localhost} akzeptiert.

@item @code{specifications} (Vorgabe: @code{#~'()})
Ein G-Ausdruck (siehe @ref{G-Ausdrücke}), der zu einer Liste von
Spezifikationen ausgewertet wird, wobei jede Spezifikation eine assoziative
Liste ist (siehe @ref{Associations Lists,,, guile, GNU Guile Reference
Manual}), deren Schlüssel Schlüsselwörter sind („Keywords“ wie z.B.@:
@code{#:beispiel-für-ein-schlüsselwort}), wie im Beispiel oben gezeigt.

@item @code{use-substitutes?} (Vorgabe: @code{#f})
Hierdurch wird zugelassen, Substitute zu benutzen, damit @emph{nicht} jede
Abhängigkeit eines Auftrags erst aus ihrem Quellcode heraus erstellt werden
muss.

@item @code{one-shot?} (Vorgabe: @code{#f})
Spezifikationen nur einmal auswerten und Ableitungen nur einmal erstellen.

@item @code{fallback?} (Vorgabe: @code{#f})
Pakete lokal erstellen, wenn das Substituieren einer vorerstellten
Binärdatei fehlschlägt.

@item @code{extra-options} (Vorgabe: @code{'()})
Zusätzliche Befehlszeilenoptionen, die beim Ausführen des Cuirass-Prozesses
mitgegeben werden sollen.

@item @code{cuirass} (Vorgabe: @code{cuirass})
Das Cuirass-Paket, das benutzt werden soll.
@end table
@end deftp

@node Dienste zur Stromverbrauchsverwaltung
@subsection Dienste zur Stromverbrauchsverwaltung

@cindex TLP
@cindex Stromverbrauch mit TLP verwalten
@subsubheading TLP-Daemon

Das Modul @code{(gnu services pm)} stellt eine Guix-Dienstdefinition für das
Linux-Werkzeug TLP zur Stromverbrauchsverwaltung zur Verfügung.

TLP macht mehrere Stromspar-Modi auf Anwendungsebene („User Space“) und im
Kernel verfügbar. Im Gegensatz zum @code{upower-service} handelt es sich um
kein passives Werkzeug zur Überwachung, sondern TLP passt selbst jedes Mal
Einstellungen an, wenn eine neue Stromquelle erkannt wird. Mehr
Informationen finden Sie auf der @uref{https://linrunner.de/en/tlp/tlp.html,
TLP-Homepage}.

@deffn {Scheme-Variable} tlp-service-type
Der Diensttyp für das TLP-Werkzeug. Sein Wert sollte eine gültige
TLP-Konfiguration sein (siehe unten). Um die Vorgabeeinstellungen zu
verwenden, schreiben Sie einfach:
@lisp
(service tlp-service-type)
@end lisp
@end deffn

Um die Vorgaben für TLP zu benutzen, müssen Sie also nur wenig in die
Konfiguration schreiben, aber Sie können die meisten TLP-Parameter über die
@code{tlp-configuration} anpassen.

Im Folgenden ist jeder Parameterdefinition ihr Typ vorangestellt. Zum
Beispiel bedeutet @samp{Boolescher-Ausdruck foo}, dass der Parameter
@code{foo} als boolescher Ausdruck festgelegt werden sollte.  Typen, die mit
@code{Vielleicht-} beginnen, bezeichnen Parameter, die nicht in der
TLP-Konfigurationsdatei vorkommen, wenn @code{'disabled} als ihr Wert
angegeben wurde.

@c The following documentation was initially generated by
@c (generate-tlp-documentation) in (gnu services pm).  Manually maintained
@c documentation is better, so we shouldn't hesitate to edit below as
@c needed.  However if the change you want to make to this documentation
@c can be done in an automated way, it's probably easier to change
@c (generate-documentation) than to make it below and have to deal with
@c the churn as TLP updates.

Verfügbare @code{tlp-configuration}-Felder sind:

@deftypevr {@code{tlp-configuration}-Parameter} „package“ tlp
Das TLP-Paket.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Boolescher-Ausdruck tlp-enable?
Setzen Sie dies auf wahr, wenn Sie TLP aktivieren möchten.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette tlp-default-mode
Der vorgegebene Modus, wenn keine Stromversorgung gefunden werden
kann. Angegeben werden können AC (am Stromnetz) und BAT (Batterie/Akku).

Die Vorgabe ist @samp{"AC"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Nichtnegative-ganze-Zahl disk-idle-secs-on-ac
Die Anzahl an Sekunden, die der Linux-Kernel warten muss, bis er sich mit
dem Plattenspeicher synchronisiert, wenn die Stromversorgung auf AC steht.

Die Vorgabe ist @samp{0}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Nichtnegative-ganze-Zahl disk-idle-secs-on-bat
Wie @code{disk-idle-ac}, aber für den BAT-Modus.

Die Vorgabe ist @samp{2}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Nichtnegative-ganze-Zahl max-lost-work-secs-on-ac
Periodizität, mit der im Zwischenspeicher geänderte Speicherseiten („Dirty
Pages“) synchronisiert werden („Cache Flush“), ausgedrückt in Sekunden.

Die Vorgabe ist @samp{15}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Nichtnegative-ganze-Zahl max-lost-work-secs-on-bat
Wie @code{max-lost-work-secs-on-ac}, aber für den BAT-Modus.

Die Vorgabe ist @samp{60}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Leerzeichengetrennte-Zeichenketten-Liste cpu-scaling-governor-on-ac
Regulator der Frequenzskalierung der CPUs („Frequency Scaling Governor“) im
AC-Modus. Beim intel_pstate-Treiber stehen powersave (stromsparend) und
performance (leistungsfähig) zur Auswahl. Beim acpi-cpufreq-Treiber stehen
ondemand, powersave, performance und conservative zur Auswahl.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Leerzeichengetrennte-Zeichenketten-Liste cpu-scaling-governor-on-bat
Wie @code{cpu-scaling-governor-on-ac}, aber für den BAT-Modus.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Nichtnegative-ganze-Zahl cpu-scaling-min-freq-on-ac
Legt die minimale verfügbare Frequenz für den Skalierungsregulator im
AC-Modus fest.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Nichtnegative-ganze-Zahl cpu-scaling-max-freq-on-ac
Legt die maximale verfügbare Frequenz für den Skalierungsregulator im
AC-Modus fest.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Nichtnegative-ganze-Zahl cpu-scaling-min-freq-on-bat
Legt die minimale verfügbare Frequenz für den Skalierungsregulator im
BAT-Modus fest.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Nichtnegative-ganze-Zahl cpu-scaling-max-freq-on-bat
Legt die maximale verfügbare Frequenz für den Skalierungsregulator im
BAT-Modus fest.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Nichtnegative-ganze-Zahl cpu-min-perf-on-ac
Beschränkt den minimalen Leistungszustand („P-State“), um die
Stromverteilung („Power Dissipation“) der CPU im AC-Modus zu
regulieren. Werte können als Prozentsatz bezüglich der verfügbaren Leistung
angegeben werden.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Nichtnegative-ganze-Zahl cpu-max-perf-on-ac
Beschränkt den maximalen Leistungszustand („P-State“), um die
Stromverteilung („Power Dissipation“) der CPU im AC-Modus zu
regulieren. Werte können als Prozentsatz bezüglich der verfügbaren Leistung
angegeben werden.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Nichtnegative-ganze-Zahl cpu-min-perf-on-bat
Wie @code{cpu-min-perf-on-ac} im BAT-Modus.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Nichtnegative-ganze-Zahl cpu-max-perf-on-bat
Wie @code{cpu-max-perf-on-ac} im BAT-Modus.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Boolescher-Ausdruck cpu-boost-on-ac?
Die CPU-Turbo-Boost-Funktionen im AC-Modus aktivieren.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Boolescher-Ausdruck cpu-boost-on-bat?
Wie @code{cpu-boost-on-ac?} im BAT-Modus.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Boolescher-Ausdruck sched-powersave-on-ac?
Dem Linux-Kernel erlauben, die Anzahl benutzter CPU-Kerne und Hyperthreads
anzupassen, wenn er unter leichter Last steht.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Boolescher-Ausdruck sched-powersave-on-bat?
Wie @code{sched-powersave-on-ac?}, aber für den BAT-Modus.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Boolescher-Ausdruck nmi-watchdog?
Ob die rechtzeitige Behandlung nichtmaskierbarer Unterbrechungen durch den
„NMI-Watchdog“ des Linux-Kernels überprüft werden soll.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Zeichenkette phc-controls
Auf Linux-Kernels, auf die der PHC-Patch angewandt wurde, wird hierdurch die
Prozessorspannung angepasst. Ein Beispielwert wäre @samp{"F:V F:V F:V F:V"}.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette energy-perf-policy-on-ac
Legt das Verhältnis von Prozessorleistung zu Stromsparsamkeit im AC-Modus
fest. Angegeben werden können performance (hohe Leistung), normal, powersave
(wenig Stromverbrauch).

Die Vorgabe ist @samp{"performance"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette energy-perf-policy-on-bat
Wie @code{energy-perf-policy-ac}, aber für den BAT-Modus.

Die Vorgabe ist @samp{"powersave"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste disks-devices
Festplattengeräte.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste disk-apm-level-on-ac
Stufe für das „Advanced Power Management“ auf Festplatten.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste disk-apm-level-on-bat
Wie @code{disk-apm-bat}, aber für den BAT-Modus.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Leerzeichengetrennte-Zeichenketten-Liste disk-spindown-timeout-on-ac
Zeitspanne, bis die Festplatte inaktiv wird (ein „Spin-Down“). Für jede
deklarierte Festplatte muss hier je ein Wert angegeben werden.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Leerzeichengetrennte-Zeichenketten-Liste disk-spindown-timeout-on-bat
Wie @code{disk-spindown-timeout-on-ac}, aber für den BAT-Modus.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Leerzeichengetrennte-Zeichenketten-Liste disk-iosched
Ein-/Ausgaben-Planungsprogramm für Plattengeräte auswählen. Für jede
deklarierte Festplatte muss ein Wert angegeben werden. Möglich sind zum
Beispiel cfq, deadline und noop.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette sata-linkpwr-on-ac
Stufe des „Aggressive Link Power Management“ (ALPM) für SATA. Angegeben
werden können min_power (wenigster Stromverbrauch), medium_power (mittlerer
Stromverbrauch), max_performance (maximale Leistung).

Die Vorgabe ist @samp{"max_performance"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette sata-linkpwr-on-bat
Wie @code{sata-linkpwr-ac}, aber für den BAT-Modus.

Die Vorgabe ist @samp{"min_power"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Zeichenkette sata-linkpwr-blacklist
Bestimmte SATA-Geräte („SATA-Host-Devices“) vom Link Power Management
ausschließen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-An-Aus-Boolescher-Ausdruck ahci-runtime-pm-on-ac?
Verwaltung des Stromverbrauchs zur Laufzeit für AHCI-Steuerungseinheiten
(„Controller“) und AHCI-Platten im AC-Modus aktivieren.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-An-Aus-Boolescher-Ausdruck ahci-runtime-pm-on-bat?
Wie @code{ahci-runtime-pm-on-ac} im BAT-Modus.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Nichtnegative-ganze-Zahl ahci-runtime-pm-timeout
Nach wievielen Sekunden der Inaktivität die Platten in den Ruhezustand gehen
(„Suspended“).

Die Vorgabe ist @samp{15}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette pcie-aspm-on-ac
Stufe des „PCI Express Active State Power Management“. Zur Auswahl stehen
default (Voreinstellung), performance (hohe Leistung), powersave (wenig
Stromverbrauch).

Die Vorgabe ist @samp{"performance"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette pcie-aspm-on-bat
Wie @code{pcie-aspm-ac}, aber für den BAT-Modus.

Die Vorgabe ist @samp{"powersave"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette radeon-power-profile-on-ac
Taktgeschwindigkeitsstufe („Clock Speed Level“) für Radeon-Grafik. Zur
Auswahl stehen low (niedrig), mid (mittel), high (hoch), auto (automatisch),
default (Voreinstellung).

Die Vorgabe ist @samp{"high"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette radeon-power-profile-on-bat
Wie @code{radeon-power-ac}, aber für den BAT-Modus.

Die Vorgabe ist @samp{"low"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette radeon-dpm-state-on-ac
Methode für die dynamische Energieverwaltung („Dynamic Power Management“,
DPM) auf Radeon. Zur Auswahl stehen battery (Batterie), performance
(Leistung).

Die Vorgabe ist @samp{"performance"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette radeon-dpm-state-on-bat
Wie @code{radeon-dpm-state-ac}, aber für den BAT-Modus.

Die Vorgabe ist @samp{"battery"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette radeon-dpm-perf-level-on-ac
Leistungsstufe („Performance Level“) des Radeon-DPM. Zur Auswahl stehen auto
(automatisch), low (niedrig), high (hoch).

Die Voreinstellung ist @samp{"auto"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette radeon-dpm-perf-level-on-bat
Wie @code{radeon-dpm-perf-ac}, aber für den BAT-Modus.

Die Voreinstellung ist @samp{"auto"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} An-Aus-Boolescher-Ausdruck wifi-pwr-on-ac?
WLAN-Stromsparmodus.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} An-Aus-Boolescher-Ausdruck wifi-pwr-on-bat?
Wie @code{wifi-power-ac?}, aber für den BAT-Modus.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Ja-Nein-Boolescher-Ausdruck wol-disable?
Rechnerstart nach Netzwerkanforderung („Wake on LAN“) deaktivieren.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Nichtnegative-ganze-Zahl sound-power-save-on-ac
Nach wievielen Sekunden der Stromsparmodus für die Audioverarbeitung auf
Intel-HDA- und AC97-Geräten aktiviert wird. Ein Wert von 0 deaktiviert den
Stromsparmodus.

Die Vorgabe ist @samp{0}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Nichtnegative-ganze-Zahl sound-power-save-on-bat
Wie @code{sound-powersave-ac}, aber für den BAT-Modus.

Die Vorgabe ist @samp{1}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Ja-Nein-Boolescher-Ausdruck sound-power-save-controller?
Steuerungseinheit („Controller“) im Stromsparmodus auf Intel-HDA-Geräten
deaktivieren.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Boolescher-Ausdruck bay-poweroff-on-bat?
Optisches Laufwerk in einer UltraBay/MediaBay im BAT-Modus
aktivieren. Laufwerke können erneut gestartet werden, indem Sie den Hebel
zum Auswerfen lösen (und wieder einsetzen) oder, auf neueren Modellen, indem
Sie den Knopf zum Auswerfen des eingelegten Datenträgers drücken.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette bay-device
Name des Geräts für das optische Laufwerk, das gestartet werden soll.

Die Vorgabe ist @samp{"sr0"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette runtime-pm-on-ac
Laufzeitenergieverwaltung („Runtime Power Management“) von
PCI(e)-Bus-Geräten. Zur Auswahl stehen on (angeschaltet) und auto
(automatisch).

Die Vorgabe ist @samp{"on"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Zeichenkette runtime-pm-on-bat
Wie @code{runtime-pm-ac}, aber für den BAT-Modus.

Die Voreinstellung ist @samp{"auto"}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Boolescher-Ausdruck runtime-pm-all?
Runtime Power Management for all PCI(e) bus devices, except blacklisted
ones.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Leerzeichengetrennte-Zeichenketten-Liste runtime-pm-blacklist
Die angegebenen PCI(e)-Geräteadressen von der Laufzeitenergieverwaltung
(„Runtime Power Management“) ausnehmen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Leerzeichengetrennte-Zeichenketten-Liste runtime-pm-driver-blacklist
PCI(e)-Geräte von der Laufzeitenergieverwaltung („Runtime Power Management“)
ausnehmen, wenn sie den angegebenen Treibern zugeordnet sind.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Boolescher-Ausdruck usb-autosuspend?
USB-Geräte automatisch in den Ruhezustand versetzen („USB-Autosuspend“).

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Zeichenkette usb-blacklist
Die angegebenen Geräte vom USB-Autosuspend ausnehmen.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Boolescher-Ausdruck usb-blacklist-wwan?
WWAN-Geräte vom USB-Autosuspend ausnehmen.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Zeichenkette usb-whitelist
Für die angegebenen Geräte USB-Autosuspend aktivieren, selbst wenn
Autosuspend durch den Treiber oder wegen @code{usb-blacklist-wwan?}
deaktiviert werden würde.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Vielleicht-Boolescher-Ausdruck usb-autosuspend-disable-on-shutdown?
USB-Autosuspend vor dem Herunterfahren aktivieren.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{tlp-configuration}-Parameter} Boolescher-Ausdruck restore-device-state-on-startup?
Zustand von funkfähigen Geräten (Bluetooth, WLAN, WWAN) vom letzten
Herunterfahren beim Hochfahren des Systems wiederherstellen.

Vorgegeben ist @samp{#f}.

@end deftypevr

@cindex thermald
@cindex CPU-Frequenzskalierung mit Thermald
@subsubheading Thermald-Daemon

Das Modul @code{(gnu services pm)} stellt eine Schnittstelle zu Thermald zur
Verfügung, einem Dienst zur CPU-Frequenzskalierung („CPU Frequency
Scaling“), mit dem Überhitzung verhindert wird.

@defvr {Scheme-Variable} thermald-service-type
Dies ist der Diensttyp für @uref{https://01.org/linux-thermal-daemon/,
Thermald}, den @dfn{Linux Thermal Daemon}, der für die Hitzeregulierung von
Prozessoren zuständig ist. Er ändert deren thermischen Zustand („Thermal
State“) und verhindert, dass sie überhitzen.
@end defvr

@deftp {Datentyp} thermald-configuration
Datentyp, der die Konfiguration des @code{thermald-service-type}
repräsentiert.

@table @asis
@item @code{ignore-cpuid-check?} (Vorgabe: @code{#f})
Ergebnis der Prüfung per CPUID auf unterstützte Prozessormodelle ignorieren.

@item @code{thermald} (Vorgabe: @var{thermald})
Paketobjekt von thermald.

@end table
@end deftp

@node Audio-Dienste
@subsection Audio-Dienste

Das Modul @code{(gnu services audio)} stellt einen Dienst zur Verfügung, um
MPD (den Music Player Daemon) zu starten.

@cindex mpd
@subsubheading Music Player Daemon

Der Music Player Daemon (MPD) ist ein Dienst, der Musik abspielen kann und
der dabei vom lokalen Rechner oder über das Netzwerk durch verschiedene
Clients angesteuert werden kann.

Das folgende Beispiel zeigt, wie man @code{mpd} als Benutzer @code{"bob"}
auf Port @code{6666} ausführen könnte. Dabei wird Pulseaudio zur Ausgabe
verwendet.

@lisp
(service mpd-service-type
         (mpd-configuration
          (user "bob")
          (port "6666")))
@end lisp

@defvr {Scheme-Variable} mpd-service-type
Der Diensttyp für @command{mpd}.
@end defvr

@deftp {Datentyp} mpd-configuration
Datentyp, der die Konfiguration von @command{mpd} repräsentiert.

@table @asis
@item @code{user} (Vorgabe: @code{"mpd"})
Das Benutzerkonto, mit dem mpd ausgeführt wird.

@item @code{music-dir} (Vorgabe: @code{"~/Music"})
Das Verzeichis, in dem nach Musikdateien gesucht wird.

@item @code{playlist-dir} (Vorgabe: @code{"~/.mpd/playlists"})
Das Verzeichnis, um Wiedergabelisten („Playlists“) zu speichern.

@item @code{db-file} (Vorgabe: @code{"~/.mpd/tag_cache"})
Der Ort, an dem die Musikdatenbank gespeichert wird.

@item @code{state-file} (Vorgabe: @code{"~/.mpd/state"})
Der Ort, an dem die Datei mit dem aktuellen Zustand von MPD gespeichert
wird.

@item @code{sticker-file} (Vorgabe: @code{"~/.mpd/sticker.sql"})
Der Ort, an dem die Sticker-Datenbank gespeichert wird.

@item @code{port} (Vorgabe: @code{"6600"})
Der Port, auf dem mpd ausgeführt wird.

@item @code{address} (Vorgabe: @code{"any"})
Die Adresse, an die sich mpd binden wird. Um einen Unix-Socket zu benutzen,
kann hier ein absoluter Pfad angegeben werden.

@item @code{outputs} (Vorgabe: @code{"(list (mpd-output))"})
Welche Tonausgaben MPD benutzen kann. Vorgegeben ist eine einzelne Ausgabe,
die Pulseaudio benutzt.

@end table
@end deftp

@deftp {Datentyp} mpd-output
Datentyp, der eine Tonausgabe von @command{mpd} repräsentiert.

@table @asis
@item @code{name} (Vorgabe: @code{"MPD"})
Der Name der Tonausgabe.

@item @code{type} (Vorgabe: @code{"pulse"})
Der Typ der Tonausgabe.

@item @code{enabled?} (Vorgabe: @code{#t})
Gibt an, ob diese Tonausgabe aktiviert sein soll, wenn MPD gestartet
wird. Vorgegeben ist, alle Tonausgaben zu aktivieren. Das entspricht der
Voreinstellung, wenn keine Zustandsdatei existiert; mit Zustandsdatei wird
der Zustand von früher wiederhergestellt.

@item @code{tags?} (Vorgabe: @code{#t})
Wenn es auf @code{#f} steht, sendet MPD keine Tags an diese Ausgabe. Dies
wird nur berücksichtigt, wenn das Ausgabe-Plugin Tags empfangen kann, wie
beim @code{httpd}-Ausgabe-Plugin.

@item @code{always-on?} (Vorgabe: @code{#f})
Wenn es auf @code{#t} steht, versucht MPD, diese Tonausgabe immer offen zu
lassen. Das kann bei Streaming-Servern helfen, wo man @emph{nicht} will,
dass die Verbindung zu allen Zuhörern abbricht, nur weil das Abspielen aus
irgendeinem Grund angehalten wurde.

@item @code{mixer-type}
Für dieses Feld wird ein Symbol akzeptiert, das das für diese Tonausgabe zu
benutzende Mischpult („Mixer“) bezeichnet. Zur Wahl stehen das
@code{hardware}-Mischpult, das @code{software}-Mischpult, das
@code{null}-Mischpult oder kein Mischpult (@code{none}). Mit dem
@code{null}-Mischpult kann die Lautstärke eingestellt werden, aber ohne
Auswirkung; das kann als Trick benutzt werden, um ein externes Mischpult zu
implementieren.

@item @code{extra-options} (Vorgabe: @code{'()})
Eine assoziative Liste, die Optionssymbole auf Zeichenketten abbildet. Sie
wird an die Tonausgabenkonfiguration angehängt.

@end table
@end deftp

Das folgende Beispiel zeigt eine Konfiguration von @code{mpd}, die eine
HTTP-Audiostreaming-Tonausgabe anbietet.

@lisp
(service mpd-service-type
         (mpd-configuration
           (outputs
             (list (mpd-output
                     (name "streaming")
                     (type "httpd")
                     (mixer-type 'null)
                     (extra-options
                      `((encoder . "vorbis")
                        (port    . "8080"))))))))
@end lisp


@node Virtualisierungsdienste
@subsection Virtualisierungsdienste

Das Modul @code{(gnu services virtualization)} bietet Dienste für die
Daemons von libvirt und virtlog, sowie andere virtualisierungsbezogene
Dienste.

@subsubheading Libvirt-Daemon
@code{libvirtd} ist die serverseitige Daemon-Komponente des libvirt-Systems
zur Virtualisierungsverwaltung. Dieser Daemon läuft auf als Wirt dienenden
Servern und führt anfallende Verwaltungsaufgaben für virtualisierte Gäste
durch.

@deffn {Scheme-Variable} libvirt-service-type
Dies ist der Diensttyp des @uref{https://libvirt.org, libvirt-Daemons}. Sein
Wert muss ein @code{libvirt-configuration}-Verbundsobjekt sein.

@lisp
(service libvirt-service-type
         (libvirt-configuration
          (unix-sock-group "libvirt")
          (tls-port "16555")))
@end lisp
@end deffn

@c Auto-generated with (generate-libvirt-documentation)
Verfügbare @code{libvirt-configuration}-Felder sind:

@deftypevr {@code{libvirt-configuration}-Parameter} „package“ libvirt
Libvirt-Paket.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Boolescher-Ausdruck listen-tls?
Option zum Lauschen auf sichere TLS-Verbindungen über den öffentlichen
TCP/IP-Port. @code{listen} muss gesetzt sein, damit dies eine Wirkung hat.

Bevor Sie diese Funktionalität nutzen können, muss eine Zertifikatsautorität
eingerichtet worden sein und Server-Zertifikate ausgestellt worden sein.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Boolescher-Ausdruck listen-tcp?
Auf unverschlüsselte TCP-Verbindungen auf dem öffentlichen TCP/IP-Port
lauschen. @code{listen} muss gesetzt sein, damit dies eine Wirkung hat.

Nach Voreinstellung kann auf dem TCP-Socket nur gelauscht werden, wenn
SASL-Authentifizierung möglich ist. Nur solche SASL-Mechanismen, die
Datenverschlüsselung unterstützen, sind zugelassen. Das sind DIGEST_MD5 und
GSSAPI (Kerberos5)

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette tls-port
Der Port, um sichere TLS-Verbindungen zu akzeptieren. Dies kann eine
Portnummer oder ein Dienstname sein.

Die Vorgabe ist @samp{"16514"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette tcp-port
Der Port, um unsichere TCP-Verbindungen zu akzeptieren. Dies kann eine
Portnummer oder ein Dienstname sein.

Die Vorgabe ist @samp{"16509"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette listen-addr
IP-Adresse oder Rechnername („Hostname“), der für von Clients ausgehende
Verbindungen benutzt wird.

Die Vorgabe ist @samp{"0.0.0.0"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Boolescher-Ausdruck mdns-adv?
Einstellung, ob der libvirt-Dienst mDNS-Mitteilungen sendet.

Dies kann alternativ für alle Dienste auf einem Rechner deaktiviert werden,
indem man den Avahi-Daemon anhält.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette mdns-name
Der voreingestellte Name in mDNS-Mitteilungen. Er muss auf dem direkten
Broadcast-Netzwerk eindeutig sein.

Die Vorgabe ist @samp{"Virtualization Host <Rechnername>"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette unix-sock-group
Besitzergruppe des UNIX-Sockets. Diese Einstellung kann benutzt werden, um
einer als vertrauenswürdig geltenden Gruppe von Benutzern Zugriff auf
Verwaltungsfunktionen zu gewähren, ohne dass diese als Administratornutzer
root ausgeführt werden müssen.

Die Vorgabe ist @samp{"root"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette unix-sock-ro-perms
UNIX-Socket-Berechtigungen für den Socket nur mit Lesezugriff („read
only“). Dies wird nur zur Überwachung des Zustands der VM benutzt.

Die Vorgabe ist @samp{"0777"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette unix-sock-rw-perms
UNIX-Socket-Berechtigungen für den Socket mit Schreib- und Lesezugriff
(„read/write“). Nach Vorgabe kann nur der Administratornutzer root
zugreifen. Wenn auf dem Socket PolicyKit aktiviert ist, wird die Vorgabe
geändert, dass jeder zugreifen kann (z.B.@: zu 0777)

Die Vorgabe ist @samp{"0770"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette unix-sock-admin-perms
UNIX-Socket-Berechtigungen für den Administrator-Socket. Nach Vorgabg hat
nur der Besitzer (der Administratornutzer root) hierauf Zugriff; ändern Sie
es nur, wenn Sie sicher wissen, wer dann alles Zugriff bekommt.

Die Vorgabe ist @samp{"0777"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette unix-sock-dir
Das Verzeichnis, in dem Sockets gefunden werden können bzw. erstellt werden.

Die Vorgabe ist @samp{"/var/run/libvirt"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette auth-unix-ro
Authentifizierungsschema für nur lesbare UNIX-Sockets. Nach Vorgabe
gestatten es die Socket-Berechtigungen jedem Nutzer, sich zu verbinden.

Die Vorgabe ist @samp{"polkit"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette auth-unix-rw
Authentifizierungsschema für UNIX-Sockets mit Schreib- und Lesezugriff. Nach
Vorgabe erlauben die Socket-Berechtigungen nur dem Administratornutzer root
Zugriff. Wenn libvirt mit Unterstützung für PolicyKit kompiliert wurde, ist
die Vorgabe, Authentifizierung über „polkit“ durchzuführen.

Die Vorgabe ist @samp{"polkit"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette auth-tcp
Authentifizierungsschema für TCP-Sockets. Wenn Sie SASL nicht aktivieren,
dann wird alle TCP-Kommunikation im Klartext verschickt. Tun Sie dies
@emph{nicht}, außer Sie benutzen libvirt nur als Entwickler oder zum Testen.

Die Vorgabe ist @samp{"sasl"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette auth-tls
Authentifizierungsschema für TLS-Sockets. Für TLS-Sockets wird bereits durch
die TLS-Schicht Verschlüsselung bereitgestellt und eingeschränkte
Authentifizierung wird über Zertifikate durchgeführt.

Es ist möglich, auch hier den SASL-Authentifizierungsmechanismus anzuwenden,
indem Sie für diese Option „sasl“ eintragen.

Die Vorgabe ist @samp{"none"}, d.h.@: keine zusätzliche Authentifizierung.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Optional-nichtleere-Liste access-drivers
Welche Schemata zur Zugriffskontrolle auf Programmierschnittstellen (APIs)
benutzt werden.

Nach Vorgabe kann ein authentifizierter Nutzer auf alle
Programmierschnittstellen zugreifen. Zugriffstreiber können dies
einschränken.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette key-file
Pfad zur Schlüsseldatei für den Server. Wenn er auf eine leere Zeichenkette
gesetzt ist, dann wird kein privater Schlüssel geladen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette cert-file
Pfad zur Zertifikatsdatei für den Server. Wenn er auf eine leere
Zeichenkette gesetzt ist, dann wird kein Zertifikat geladen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette ca-file
Pfad zur Datei mit dem Zertifikat der Zertifikatsautorität. Wenn er auf eine
leere Zeichenkette gesetzt ist, dann wird kein Zertifikat der
Zertifikatsautorität geladen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette crl-file
Pfad zur Zertifikatssperrliste („Certificate Revocation List“). Wenn er auf
eine leere Zeichenkette gesetzt ist, dann wird keine Zertifikatssperrliste
geladen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Boolescher-Ausdruck tls-no-sanity-cert
Keine Überprüfung unseres eigenen Serverzertifikats durchführen.

Beim Start vom libvirtd prüft dieser, ob bei seinem eigenen Zertifikat alles
in Ordnung ist.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Boolescher-Ausdruck tls-no-verify-cert
Keine Überprüfung von Clientzertifikaten durchführen.

Die Überprüfung des Zertifikats eines Clients ist der primäre
Authentifizierungsmechanismus. Jeder Client, der kein von der
Zertifikatsautorität signiertes Zertifikat vorweist, wird abgelehnt.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Optional-nichtleere-Liste tls-allowed-dn-list
Liste der erlaubten Einträge für den „Distinguished Name“ bei x509.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Optional-nichtleere-Liste sasl-allowed-usernames
Liste der erlaubten Einträge für SASL-Benutzernamen. Wie Benutzernamen
aussehen müssen, ist abhängig vom jeweiligen SASL-Mechanismus.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette tls-priority
Override the compile time default TLS priority string.  The default is
usually @samp{"NORMAL"} unless overridden at build time.  Only set this is
it is desired for libvirt to deviate from the global default settings.

Die Vorgabe @samp{"NORMAL"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl max-clients
Maximalzahl gleichzeitiger Client-Verbindungen, die für alle Sockets
zusammen zugelassen werden sollen.

Die Vorgabe ist @samp{5000}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl max-queued-clients
Maximale Länge der Warteschlange für Verbindungen, die darauf warten, vom
Daemon angenommen zu werden. Beachten Sie, dass sich manche Protokolle, die
Neuübertragung unterstützen, danach richten könnten, damit ein erneuter
Verbindungsversuch angenommen wird.

Die Vorgabe ist @samp{1000}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl max-anonymous-clients
Maximale Länge der Warteschlange für Clients, die angenommen wurden, aber
noch nicht authentifiziert wurden. Setzen Sie dies auf null, um diese
Funktionalität abzuschalten.

Die Vorgabe ist @samp{20}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl min-workers
Anzahl an Arbeiter-Threads, die am Anfang gestartet werden sollen.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl max-workers
Maximale Anzahl an Arbeiter-Threads.

Wenn die Anzahl aktiver Clients die @code{min-workers} übersteigt, werden
weitere Threads erzeugt, bis die max_workers-Beschränkung erreicht
wurde. Typischerweise würden Sie für max_workers die maximale Anzahl
zugelassener Clients angeben.

Die Vorgabe ist @samp{20}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl prio-workers
Die Anzahl priorisierter Arbeiter-Threads. Wenn alle Arbeiter aus diesem
Pool festhängen, können manche, mit hoher Priorität versehene Aufrufe
(speziell domainDestroy) in diesem Pool hier ausgeführt werden.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl max-requests
Wieviele nebenläufige RPC-Aufrufe global ausgeführt werden können.

Die Vorgabe ist @samp{20}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl max-client-requests
Wieviele nebenläufige Anfragen von einer einzelnen Client-Verbindung
ausgehen können. Um zu verhindern, dass ein einzelner Client den gesamten
Server für sich beansprucht, sollte der Wert hier nur einen kleinen Teil der
globalen max_requests- und max_workers-Parameter ausmachen.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl admin-min-workers
Wie bei @code{min-workers}, aber für die Administratorschnittstelle.

Die Vorgabe ist @samp{1}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl admin-max-workers
Wie bei @code{max-workers}, aber für die Administratorschnittstelle.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl admin-max-clients
Wie bei @code{max-clients}, aber für die Administratorschnittstelle.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl admin-max-queued-clients
Wie bei @code{max-queued-clients}, aber für die Administratorschnittstelle.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl admin-max-client-requests
Wie bei @code{max-client-requests}, aber für die Administratorschnittstelle.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl log-level
Protokollstufe. 4 für Fehler, 3 für Warnungen, 2 für Informationen, 1 zur
Fehlersuche.

Die Vorgabe ist @samp{3}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette log-filters
Protokollfilter.

Ein Filter ermöglicht es, für eine bestimmte Kategorie von Protokollen eine
andere Protokollierungsstufe festzulegen. Filter müssen eines der folgenden
Formate haben:

@itemize @bullet
@item
x:Name

@item
x:+Name

@end itemize

where @code{name} is a string which is matched against the category given in
the @code{VIR_LOG_INIT()} at the top of each libvirt source file, e.g.,
@samp{"remote"}, @samp{"qemu"}, or @samp{"util.json"} (the name in the
filter can be a substring of the full category name, in order to match
multiple similar categories), the optional @samp{"+"} prefix tells libvirt
to log stack trace for each message matching name, and @code{x} is the
minimal level where matching messages should be logged:

@itemize @bullet
@item
1: Fehlersuche („DEBUG“)

@item
2: Informationen („INFO“)

@item
3: Warnungen („WARNING“)

@item
4: Fehler („ERROR“)

@end itemize

Mehrere Filter können in einer einzelnen Filteranweisung definiert werden;
sie müssen nur durch Leerzeichen voneinander getrennt werden.

Die Vorgabe ist @samp{"3:remote 4:event"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette log-outputs
Ausgaben für die Protokollierung.

Eine Ausgabe ist einer der Orte, wohin Informationen aus der Protokollierung
gespeichert werden. Eine Ausgabe kann auf eine der folgenden Arten angegeben
werden:

@table @code
@item x:stderr
Protokolle werden auf der Standardausgabe („Stderr“) ausgegeben.

@item x:syslog:Name
Syslog wird zur Ausgabe benutzt. Der Name dient dabei als Identifikator für
libvirt-Protokolle.

@item x:file:Dateipfad
Protokolle werden in die Datei unter dem angegebenen Dateipfad ausgegeben.

@item x:journald
Die Ausgabe läuft über das journald-Protokollsystem.

@end table

In allen Fällen steht das x vorne für die kleinste Stufe und wirkt als
Filter.

@itemize @bullet
@item
1: Fehlersuche („DEBUG“)

@item
2: Informationen („INFO“)

@item
3: Warnungen („WARNING“)

@item
4: Fehler („ERROR“)

@end itemize

Mehrere Ausgaben können definiert werden, dazu müssen sie nur durch
Leerzeichen getrennt hier angegeben werden.

Die Vorgabe ist @samp{"3:stderr"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl audit-level
Ermöglicht Anpassungen am Auditierungs-Subsystem.

@itemize @bullet
@item
0: Jegliche Auditierung deaktivieren.

@item
1: Auditierung nur aktivieren, wenn sie beim Wirtssystem aktiviert ist.

@item
2: Auditierung aktivieren. Beenden, wenn das Wirtssystem Auditierung
deaktiviert hat.

@end itemize

Die Vorgabe ist @samp{1}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Boolescher-Ausdruck audit-logging
Audit-Nachrichten über die Protokollinfrastruktur von libvirt versenden.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Optional-nichtleere-Zeichenkette host-uuid
Für das Wirtssystem zu verwendende UUID. Bei der UUID dürfen nicht alle
Ziffern gleich sein.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Zeichenkette host-uuid-source
Die Quelle, von der die UUID des Wirtssystems genommen wird.

@itemize @bullet
@item
@code{smbios}: Die UUID von @code{dmidecode -s system-uuid} holen.

@item
@code{machine-id}: Die UUID aus @code{/etc/machine-id} holen.

@end itemize

Falls @code{dmidecode} keine gültige UUID liefert, wird eine temporäre UUID
generiert.

Die Vorgabe ist @samp{"smbios"}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl keepalive-interval
Einem Client wird eine Nachricht zum Aufrechterhalten der Verbindung
gesendet, nachdem @code{keepalive_interval} Sekunden lang keine Aktivität
stattgefunden hat. Damit kann überprüft werden, ob der Client noch
antwortet. Wird dieses Feld auf -1 gesetzt, wird libvirtd niemals
Aufrechterhaltungsanfragen senden; Clients können diese aber weiterhin dem
Daemon schicken und er wird auf diese antworten.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl keepalive-count
Wieviele Aufrechterhaltungsnachrichten höchstens zum Client geschickt werden
dürfen, ohne dass eine Antwort zurückgekommen ist, bevor die Verbindung als
abgebrochen gilt.

Mit anderen Worten wird die Verbindung ungefähr dann automatisch
geschlossen, wenn @code{keepalive_interval * (keepalive_count + 1)} Sekunden
seit der letzten vom Client empfangenen Nachricht vergangen sind. Wenn
@code{keepalive-count} auf 0 gesetzt wurde, werden Verbindungen dann
automatisch geschlossen, wenn @code{keepalive-interval} Sekunden der
Inaktivität vorausgegangen sind, ohne dass eine Aufrechterhaltungsnachricht
versandt wurde.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl admin-keepalive-interval
Wie oben, aber für die Administratorschnittstelle.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl admin-keepalive-count
Wie oben, aber für die Administratorschnittstelle.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{libvirt-configuration}-Parameter} Ganze-Zahl ovs-timeout
Zeitbeschränkung für Aufrufe über Open vSwitch.

Das Werkzeug @code{ovs-vsctl} wird zur Konfiguration benutzt; die dort
eingestellte Zeitbeschränkung ist nach Voreinstellung auf 5 Sekunden
festgelegt, um zu verhindern, dass libvirt durch unbegrenztes Warten
blockiert werden kann.

Die Vorgabe ist @samp{5}.

@end deftypevr

@c %end of autogenerated docs

@subsubheading Virtlog-Daemon
Der virtlogd-Dienst ist eine serverseitige Daemon-Komponente von libvirt,
die benutzt wird, um Protokolle der Konsolen von virtuellen Maschinen zu
verwalten.

Dieser Daemon wird von libvirt-Clientanwendungen nicht direkt benutzt,
sondern wird an deren Stelle vom @code{libvirtd} aufgerufen. Indem die
Protokolle in einem eigenständigen Daemon vorgehalten werden, kann der
eigentliche @code{libvirtd}-Daemon neu gestartet werden, ohne dass man
riskiert, Protokolle zu verlieren. Der @code{virtlogd}-Daemon hat die
Fähigkeit, sich selbst erneut mit exec() zu starten, wenn er @code{SIGUSR1}
empfängt, damit Aktualisierungen ohne Ausfall möglich sind.

@deffn {Scheme-Variable} virtlog-service-type
Dies ist der Diensttyp des virtlog-Daemons. Sein Wert muss eine
@code{virtlog-configuration} sein.

@lisp
(service virtlog-service-type
         (virtlog-configuration
          (max-clients 1000)))
@end lisp
@end deffn

@deftypevr {@code{virtlog-configuration}-Parameter} Ganze-Zahl log-level
Protokollstufe. 4 für Fehler, 3 für Warnungen, 2 für Informationen, 1 zur
Fehlersuche.

Die Vorgabe ist @samp{3}.

@end deftypevr

@deftypevr {@code{virtlog-configuration}-Parameter} Zeichenkette log-filters
Protokollfilter.

Ein Filter ermöglicht es, für eine bestimmte Kategorie von Protokollen eine
andere Protokollierungsstufe festzulegen. Filter müssen eines der folgenden
Formate haben:

@itemize @bullet
@item
x:Name

@item
x:+Name

@end itemize

wobei @code{Name} eine Zeichenkette ist, die zu einer in der
Umgebungsvariablen @code{VIR_LOG_INIT()} am Anfang jeder Quelldatei von
libvirt angegebenen Kategorie passen muss, z.B.@: „remote“, „qemu“ oder
„util.json“ (der Name im Filter kann auch nur ein Teil des vollständigen
Kategoriennamens sein, wodurch mehrere, ähnliche passende Kategoriennamen
möglich sind). Das optionale Präfix „+“ bedeutet, dass libvirt eine
Rückverfolgung (d.h.@: ein „Stack Trace“) für jede zum Namen passende
Nachricht ins Protokoll schreiben soll. @code{x} benennt jeweils die
kleinste Stufe, deren passende Nachrichten protokolliert werden sollen.

@itemize @bullet
@item
1: Fehlersuche („DEBUG“)

@item
2: Informationen („INFO“)

@item
3: Warnungen („WARNING“)

@item
4: Fehler („ERROR“)

@end itemize

Mehrere Filter können in einer einzelnen Filteranweisung definiert werden;
sie müssen nur durch Leerzeichen voneinander getrennt werden.

Die Vorgabe ist @samp{"3:remote 4:event"}.

@end deftypevr

@deftypevr {@code{virtlog-configuration}-Parameter} Zeichenkette log-outputs
Ausgaben für die Protokollierung.

Als Ausgabe bezeichnen wir einen der Orte, an denen Protokollinformationen
gespeichert werden. Eine Ausgabe wird auf eine der folgenden Arten
angegeben:

@table @code
@item x:stderr
Protokolle werden auf der Standardausgabe („Stderr“) ausgegeben.

@item x:syslog:Name
Syslog wird zur Ausgabe benutzt. Der Name dient dabei als Identifikator für
libvirt-Protokolle.

@item x:file:Dateipfad
Protokolle werden in die Datei unter dem angegebenen Dateipfad ausgegeben.

@item x:journald
Die Ausgabe läuft über das journald-Protokollsystem.

@end table

In allen Fällen steht das x vorne für die kleinste Stufe und wirkt als
Filter.

@itemize @bullet
@item
1: Fehlersuche („DEBUG“)

@item
2: Informationen („INFO“)

@item
3: Warnungen („WARNING“)

@item
4: Fehler („ERROR“)

@end itemize

Mehrere Ausgaben können definiert werden, dazu müssen sie nur durch
Leerzeichen getrennt hier angegeben werden.

Die Vorgabe ist @samp{"3:stderr"}.

@end deftypevr

@deftypevr {@code{virtlog-configuration}-Parameter} Ganze-Zahl max-clients
Maximalzahl gleichzeitiger Client-Verbindungen, die für alle Sockets
zusammen zugelassen werden sollen.

Die Vorgabe ist @samp{1024}.

@end deftypevr

@deftypevr {@code{virtlog-configuration}-Parameter} Ganze-Zahl max-size
Wie groß eine Protokolldatei werden darf, bevor eine neue begonnen wird.

Die Vorgabe ist @samp{2MB}.

@end deftypevr

@deftypevr {@code{virtlog-configuration}-Parameter} Ganze-Zahl max-backups
Wieviele Dateien mit Sicherungskopien gespeichert bleiben sollen.

Die Vorgabe ist @samp{3}.

@end deftypevr

@subsubheading Transparente Emulation mit QEMU

@cindex Emulation
@cindex @code{binfmt_misc}
Mit @code{qemu-binfmt-service-type} wird transparente Emulation von
Programm-Binärdateien, die für unterschiedliche Architekturen erstellt
wurden, ermöglicht. Z.B.@: können Sie ein ARMv7-Programm „einfach so“
transparent auf einer x86_64-Maschine ausführen. Dazu wird der
@uref{https://www.qemu.org, QEMU-Emulator} mit der
@code{binfmt_misc}-Funktionalität des Kernels Linux kombiniert.

@defvr {Scheme-Variable} qemu-binfmt-service-type
Dies ist der Diensttyp des QEMU/binfmt-Dienstes für transparente
Emulation. Sein Wert muss ein @code{qemu-binfmt-configuration}-Objekt sein,
das das QEMU-Paket angibt, das benutzt werden soll, sowie die Architektur,
die wir emulieren möchten.

@lisp
(service qemu-binfmt-service-type
         (qemu-binfmt-configuration
           (platforms (lookup-qemu-platforms "arm" "aarch64"))))
@end lisp

In diesem Beispiel aktivieren wir transparente Emulation für die Plattformen
ARM und aarch64. Wenn wir @code{herd stop qemu-binfmt} ausführen, wird diese
abgeschaltet, und mit @code{herd start qemu-binfmt} wird sie wieder aktiv
(siehe @ref{Invoking herd, the @command{herd} command,, shepherd, The GNU
Shepherd Manual}).
@end defvr

@deftp {Datentyp} qemu-binfmt-configuration
Dies ist die Konfiguration des @code{qemu-binfmt}-Dienstes.

@table @asis
@item @code{platforms} (Vorgabe: @code{'()})
Die Liste der emulierten QEMU-Plattformen. Jeder Eintrag muss ein
@dfn{Plattformobjekt} sein, wie @code{lookup-qemu-platforms} eines
zurückliefert (siehe unten).

@item @code{guix-support?} (Vorgabe: @code{#f})
When it is true, QEMU and all its dependencies are added to the build
environment of @command{guix-daemon} (@pxref{Aufruf des guix-daemon,
@option{--chroot-directory} option}).  This allows the @code{binfmt_misc}
handlers to be used within the build environment, which in turn means that
you can transparently build programs for another architecture.

Wenn wir zum Beispiel annehmen, Sie arbeiten auf einer x86_64-Maschine und
haben diesen Dienst eingerichtet:

@lisp
(service qemu-binfmt-service-type
         (qemu-binfmt-configuration
           (platforms (lookup-qemu-platforms "arm"))
           (guix-support? #t)))
@end lisp

Dann können Sie das hier ausführen:

@example
guix build -s armhf-linux inkscape
@end example

@noindent
und alles verhält sich so, als würden Sie Inkscape für ARMv7 @emph{wie
„nativ“ auf einem ARM-Rechner erstellen}, wozu QEMU transparent benutzt
wird, um den ARMv7-Prozessor zu emulieren. Das ist ganz schön praktisch,
wenn Sie testen wollen, ob ein Paket für eine Architektur erstellt werden
kann, die Ihnen nicht zur Verfügung steht.

@item @code{qemu} (Vorgabe: @code{qemu})
Das QEMU-Paket, das benutzt werden soll.
@end table
@end deftp

@deffn {Scheme-Prozedur} lookup-qemu-platforms @var{Plattformen}…
Liefert die Liste der QEMU-Plattformobjekte, die den @var{Plattformen}…
entsprechen. @var{Plattformen} muss eine Liste von Zeichenketten sein, die
den Namen der Plattformen entsprechen, wie z.B.@: @code{"arm"},
@code{"sparc"}, @code{"mips64el"} und so weiter.
@end deffn

@deffn {Scheme-Prozedur} qemu-platform? @var{Objekt}
Liefert wahr, wenn das @var{Objekt} ein Plattformobjekt ist.
@end deffn

@deffn {Scheme-Prozedur} qemu-platform-name @var{Plattform}
Liefert den Namen der @var{Plattform}, also eine Zeichenkette wie z.B.@:
@code{"arm"}.
@end deffn

@node Versionskontrolldienste
@subsection Versionskontrolldienste

Das Modul @code{(gnu services version-control)} stellt einen Dienst zur
Verfügung, der einen Fernzugriff auf lokale Git-Repositorys
ermöglicht. Dafür gibt es drei Möglichkeiten: den @code{git-daemon-service},
der Zugang zu Repositorys über das ungesicherte, TCP-basierte
@code{git://}-Protokoll gewährt, das Erweitern des @code{nginx}-Webservers,
um ihn als Proxy für Anfragen an das @code{git-http-backend} einzusetzen,
oder mit dem @code{cgit-service-type} eine Weboberfläche zur Verfügung zu
stellen.

@deffn {Scheme-Prozedur} git-daemon-service [#:config (git-daemon-configuration)]

Liefert einen Dienst, der @command{git daemon} ausführt. Der Befehl startet
den Git-Daemon, einen einfachen TCP-Server, um Repositorys über das
Git-Protokoll für anonymen Zugriff zugänglich zu machen.

The optional @var{config} argument should be a
@code{<git-daemon-configuration>} object, by default it allows read-only
access to exported@footnote{By creating the magic file
@file{git-daemon-export-ok} in the repository directory.} repositories under
@file{/srv/git}.

@end deffn

@deftp {Datentyp} git-daemon-configuration
Datentyp, der die Konfiguration für @code{git-daemon-service} repräsentiert.

@table @asis
@item @code{package} (Vorgabe: @var{git})
Paketobjekt des verteilten Versionskontrollsystems Git.

@item @code{export-all?} (Vorgabe: @var{#f})
Ob Zugriff auf alle Git-Repositorys gewährt werden soll, selbst wenn keine
@file{git-daemon-export-ok}-Datei in ihrem Verzeichnis gefunden wird.

@item @code{base-path} (Vorgabe: @file{/srv/git})
Ob alle Pfadanfragen behandelt werden sollen, als wären sie relativ zum
angegebenen Pfad. Wenn Sie den Git-Daemon mit @var{(base-path "/srv/git")}
auf example.com ausführen und später versuchen,
@code{git://example.com/hello.git} zu pullen, wird der Git-Daemon den Pfad
als @code{/srv/git/hello.git} interpretieren.

@item @code{user-path} (Vorgabe: @var{#f})
Ob die @code{~benutzerkonto}-Notation in Anfragen verwendet werden
darf. Wird hier die leere Zeichenkette angegeben, werden Anfragen an
@code{git://host/~alice/foo} als Anfragen verstanden, auf das
@code{foo}-Repository im Persönlichen Verzeichnis des
@code{alice}-Benutzerkontos verstanden. Wird @var{(user-path "pfad")}
angegeben, wird dieselbe Anfrage als eine Anfrage verstanden, auf das
@code{pfad/foo}-Repository im Persönlichen Verzeichnis des
@code{alice}-Benutzerkontos zuzugreifen.

@item @code{listen} (Vorgabe: @var{'()})
Ob auf bestimmte IP-Adressen oder Rechnernamen („Hostnames“) gelauscht
werden soll. Vorgegeben ist auf allen.

@item @code{port} (Vorgabe: @var{#f})
Ob auf einer alternativen Portnummer gelauscht werden soll. Vorgegeben ist
9418.

@item @code{whitelist} (Vorgabe: @var{'()})
Wenn dies nicht leer gelassen wird, wird nur der Zugriff auf die
aufgelisteten Verzeichnisse gewährt.

@item @code{extra-options} (Vorgabe: @var{'()})
Zusätzliche Befehlszeilenoptionen, die dem @code{git daemon} mitgegeben
werden sollen. Bitte führen Sie @command{man git-daemon} aus, um weitere
Informationen zu erhalten.

@end table
@end deftp

Zugriffe über das @code{git://}-Protokoll werden nicht authentifiziert. Wenn
Sie von einem Repository pullen, dass Sie über @code{git://} geholt haben,
wissen Sie nicht, ob die empfangenen Daten modifiziert wurden oder auch nur
vom angegebenen Rechner kommen, und Ihre Verbindung kann abgehört werden. Es
ist besser, eine authentifizierte und verschlüsselte Übertragungsart zu
verwenden, zum Beispiel @code{https}. Obwohl Git es Ihnen ermöglicht,
Repositorys über schlichte dateibasierte Webserver anzubieten, gibt es ein
schnelleres Protokoll, das vom @code{git-http-backend}-Programm
implementiert wird. Dieses Programm dient als Hintergrundsystem für einen
ordentlichen Git-Webdienst. Es wurde so konstruiert, dass es über einen
FastCGI-Proxy abrufbar ist. Siehe @ref{Web-Dienste} für weitere
Informationen, wie Sie den benötigten @code{fcgiwrap}-Daemon ausführen.

Guix hat einen separaten Konfigurationsdatentyp, um Git-Repositorys über
HTTP anzubieten.

@deftp {Datentyp} git-http-configuration
Data type representing the configuration for a future
@code{git-http-service-type}; can currently be used to configure Nginx
trough @code{git-http-nginx-location-configuration}.

@table @asis
@item @code{package} (Vorgabe: @var{git})
Paketobjekt des verteilten Versionskontrollsystems Git.

@item @code{git-root} (Vorgabe: @file{/srv/git})
Das Verzeichnis, das die Git-Repositorys enthält, die der Allgemeinheit
zugänglich gemacht werden sollen.

@item @code{export-all?} (Vorgabe: @var{#f})
Ob alle Git-Repositorys in @var{git-root} zugänglich gemacht werden sollen,
selbst wenn keine @file{git-daemon-export-ok}-Datei in ihrem Verzeichnis
gefunden wird.

@item @code{uri-path} (Vorgabe: @file{/git/})
Präfix für Pfade beim Git-Zugriff. Beim vorgegebenen Präfix @code{/git/}
wird @code{http://@var{server}/git/@var{repo}.git} auf
@code{/srv/git/@var{repo}.git} abgebildet. Anfragen, deren URI-Pfade nicht
mit dem Präfix beginnen, werden nicht an die Git-Instanz weitergereicht.

@item @code{fcgiwrap-socket} (Vorgabe: @code{127.0.0.1:9000})
Der Socket, auf dem der @code{fcgiwrap}-Daemon lauscht. Siehe @ref{Web-Dienste}.
@end table
@end deftp

Es gibt zur Zeit keinen @code{git-http-service-type}, stattdessen können Sie
eine @code{nginx-location-configuration} aus einer
@code{git-http-configuration} heraus erstellen und als Location zu einem
Webserver hinzufügen.

@deffn {Scheme-Prozedur} git-http-nginx-location-configuration @
       [config=(git-http-configuration)] Eine @code{nginx-location-configuration}
berechnen, die der angegebenen Git-HTTP-Konfiguration entspricht. Ein
Beispiel für eine nginx-Dienstdefinition, um das vorgegebene
@file{/srv/git}-Verzeichnis über HTTPS anzubieten, könnte so aussehen:

@lisp
(service nginx-service-type
         (nginx-configuration
          (server-blocks
           (list
            (nginx-server-configuration
             (listen '("443 ssl"))
             (server-name "git.mein-rechner.org")
             (ssl-certificate
              "/etc/letsencrypt/live/git.mein-rechner.org/fullchain.pem")
             (ssl-certificate-key
              "/etc/letsencrypt/live/git.mein-rechner.org/privkey.pem")
             (locations
              (list
               (git-http-nginx-location-configuration
                (git-http-configuration (uri-path "/"))))))))))
@end lisp

Für dieses Beispiel nehmen wir an, dass Sie Ihr TLS-Zertifikat über Let’s
Encrypt beziehen. Siehe @ref{Zertifikatsdienste}. Der vorgegebene
@code{certbot}-Dienst leitet alle HTTP-Anfragen nach
@code{git.mein-rechner.org} auf HTTPS um. Zu Ihren Systemdiensten werden Sie
auch einen @code{fcgiwrap}-Proxy hinzufügen müssen. Siehe @ref{Web-Dienste}.
@end deffn

@subsubheading Cgit-Dienst

@cindex Cgit-Dienst
@cindex Git, Weboberfläche
@uref{https://git.zx2c4.com/cgit/, Cgit} ist eine in C geschriebene
Weboberfläche als Vordergrundsystem für Git-Repositorys.

Im folgenden Beispiel wird der Dienst mit den vorgegebenen Werten
eingerichtet. Nach Vorgabe kann auf Cgit auf Port 80 unter
@code{http://localhost:80} zugegriffen werden.

@lisp
(service cgit-service-type)
@end lisp

Der Typ @code{Dateiobjekt} bezeichnet entweder ein dateiartiges Objekt
(siehe @ref{G-Ausdrücke, dateiartige Objekte}) oder eine Zeichenkette.

@c %start of fragment

Verfügbare @code{cgit-configuration}-Felder sind:

@deftypevr {@code{cgit-configuration}-Parameter} „package“ package
Das CGIT-Paket.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} „nginx-server-configuration-list“ nginx
NGINX-Konfiguration.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Dateiobjekt about-filter
Gibt einen Befehl an, der zur Formatierung des Inhalts der Übersichtsseiten
aufgerufen wird (sowohl auf oberster Ebene und für jedes Repository).

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette agefile
Gibt einen Pfad relativ zu jedem Repository-Pfad an, unter dem eine Datei
gespeichert sein kann, die Datum und Uhrzeit des jüngsten Commits im
Repository angibt.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Dateiobjekt auth-filter
Gibt einen Befehl an, der aufgerufen wird, um Benutzer zu authentifizieren.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette branch-sort
Wenn diese Option auf @samp{age} gesetzt wurde, wird die Liste der
Branch-Referenzen nach Datum sortiert, und wenn sie auf @samp{name} gesetzt
wurde, wird nach dem Branch-Namen sortiert.

Die Vorgabe ist @samp{"name"}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette cache-root
Pfad, unter dem Cgit-Zwischenspeichereinträge abgelegt werden.

Die Vorgabe ist @samp{"/var/cache/cgit"}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl cache-static-ttl
Zahl, die angibt, wieviele Minuten die Zwischenspeicherungen für
Repository-Seiten mit fester SHA1-Summe gültig bleiben, auf die zugegriffen
wird („Time-to-live“).

Die Vorgabe ist @samp{-1}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl cache-dynamic-ttl
Zahl, die angibt, wieviele Minuten die Zwischenspeicherungen für
Repository-Seiten mit veränderlicher SHA1-Summe gültig bleiben, auf die
zugegriffen wird.<

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl cache-repo-ttl
Zahl, die angibt, wieviele Minuten die Zwischenspeicherungen für die
Übersichtsseiten („summary“) von Repositorys gültig bleiben.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl cache-root-ttl
Zahl, die angibt, wieviele Minuten die Zwischenspeicherung der Seite mit dem
Repository-Index gültig bleibt.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl cache-scanrc-ttl
Zahl, die angibt, wieviele Minuten die Zwischenspeicherung des Ergebnisses
einer Suche in einem Pfad nach Git-Repositorys gültig bleibt.

Die Vorgabe ist @samp{15}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl cache-about-ttl
Zahl, die angibt, wieviele Minuten die Zwischenspeicherungen für die
Beschreibungsseiten („about“) von Repositorys gültig bleiben.

Die Vorgabe ist @samp{15}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl cache-snapshot-ttl
Zahl, die angibt, wieviele Minuten die Zwischenspeicherungen für die
Snapshots von Repositorys gültig bleiben.

Die Vorgabe ist @samp{5}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl cache-size
Wieviele Einträge der Cgit-Zwischenspeicher höchstens haben kann. Wird
@samp{0} festgelegt, wird @emph{nicht} zwischengespeichert.

Die Vorgabe ist @samp{0}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck case-sensitive-sort?
Ob beim Sortieren von Objekten in der Repository-Liste die
Groß-/Kleinschreibung beachtet werden soll.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Liste clone-prefix
Liste gemeinsamer Präfixe, von denen ein Repository geklont werden
kann. D.h.@: dass, wenn eines mit einer Repository-URL kombiniert wird, eine
gültige URL zum Klonen des Repositorys entsteht.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Liste clone-url
Liste von Schablonen, aus denen eine @code{clone-url} entsteht.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Dateiobjekt commit-filter
Befehl, mit dem Commit-Nachrichten formatiert werden.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette commit-sort
Wenn diese Option als @samp{date} festgelegt wird, wird das Commit-Log
streng nach Datum geordnet. Wenn sie auf @samp{topo} gesetzt ist, wird es
streng topologisch geordnet.

Defaults to @samp{"git log"}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Dateiobjekt css
URL, die angibt, welches CSS-Dokument von jeder Cgit-Seite eingebunden
werden soll.

Die Vorgabe ist @samp{"/share/cgit/cgit.css"}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Dateiobjekt email-filter
Gibt einen Befehl an, um die Namen und E-Mail-Adressen der Commiter, Autoren
und Tagger zu formatieren, die an verschiedenen Stellen in der Oberfläche
von Cgit vorkommen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck embedded?
Wenn diese Option auf @samp{#t} gesetzt ist, wird Cgit ein HTML-Fragment
erzeugen, das für die Einbettung in andere HTML-Seiten geeignet ist.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-commit-graph?
Wenn diese Option auf @samp{#t} gesetzt ist, wird Cgit den Graphen der
Commit-Historie links von den Commit-Nachrichten auf den Commit-Log-Seiten
mit ASCII-Zeichen darstellen.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-filter-overrides?
Wenn diese Option auf @samp{#t} gesetzt ist, können alle Filtereinstellungen
durch die cgitrc-Dateien für das jeweilige Repository geändert werden.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-follow-links?
Wenn diese Option auf @samp{#t} gesetzt ist, können Benutzer in der
Log-Ansicht einer Datei folgen („--follow“).

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-http-clone?
Wenn es auf @samp{#t} gesetzt ist, kann Cgit als Endpunkt für eine
Dumb-HTTP-Übertragung mit „git clone“ benutzt werden.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-index-links?
Wenn diese Option auf @samp{#t} gesetzt ist, legt Cgit für jedes Repository
zusätzlich Hyperlinks „summary“, „commit“, „tree“ im Repository-Index an.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-index-owner?
Wenn diese Option auf @samp{#t} gesetzt ist, zeigt Cgit den Besitzer für
jedes Repository im Repository-Index an.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-log-filecount?
Wenn diese Option auf @samp{#t} gesetzt ist, zeigt Cgit für jeden Commit auf
den Repository-Log-Seiten die geänderten Dateien an.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-log-linecount?
Wenn diese Option auf @samp{#t} gesetzt ist, zeigt Cgit für jeden Commit auf
den Repository-Log-Seiten die Anzahl der hinzugefügten und entfernten Zeilen
an.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-remote-branches?
Wenn diese Option auf @samp{#t} gesetzt ist, zeigt Cgit unter den „summary“-
und „ref“-Seiten entfernte Branches an.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-subject-links?
Wenn diese Option auf @samp{#t} gesetzt ist, zeigt Cgit für Links auf
Eltern-Commits die Betreffzeile des Eltern-Commits als Linktext in der
Commit-Ansicht an.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-html-serving?
Flag which, when set to @samp{#t}, will make cgit use the subject of the
parent commit as link text when generating links to parent commits in commit
view.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-tree-linenumbers?
Wenn diese Option auf @samp{#t} gesetzt ist, zeigt Cgit für jeden Blob aus
reinem Text Links auf dessen Zeilennummern in der Baumansicht („tree“) an.

Die Vorgabe ist @samp{#t}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck enable-git-config?
Flag which, when set to @samp{#f}, will allow cgit to use Git config to set
any repo specific settings.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration} parameter} file-object favicon
URL, auf der ein Cgit-Symbol für die Anzeige in einem Webbrowser zu finden
ist.

Die Vorgabe ist @samp{"/favicon.ico"}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette footer
Der Inhalt der für diese Option angegebenen Datei wird wortwörtlich am Ende
jeder Seite eingefügt (d.h.@: er ersetzt die vorgegebene Mitteilung
„generated by …“).

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette head-include
Der Inhalt der für diese Option angegebenen Datei wird wortwörtlich im
HTML-HEAD-Bereich jeder Seite eingefügt.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette header
Der Inhalt der für diese Option angegebenen Datei wird wortwörtlich am
Anfang jeder Seite eingefügt.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Dateiobjekt include
Der Name einer Konfigurationsdatei, deren Inhalt eingefügt werden soll,
bevor die übrige hier angegebene Konfiguration eingelesen wird.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette index-header
Der Inhalt der mit dieser Option angegebenen Datei wird wortwörtlich
oberhalb des Repository-Index eingefügt.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette index-info
Der Inhalt der mit dieser Option angegebenen Datei wird wortwörtlich
unterhalb der Überschrift auf jeder Repository-Index-Seite eingefügt.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck local-time?
Wenn diese Option auf @samp{#t} gesetzt ist, gibt Cgit die Zeitstempel von
Commits und Tags in der Zeitzone des Servers an.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration} parameter} file-object logo
URL, unter der ein Bild zu finden ist, das auf allen Cgit-Seiten als Logo zu
sehen sein wird.

Die Vorgabe ist @samp{"/share/cgit/cgit.png"}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette logo-link
URL, die geladen wird, wenn jemand auf das Logo-Bild klickt.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Dateiobjekt owner-filter
Befehl, der aufgerufen wird, um die Besitzerspalte auf der Hauptseite zu
formatieren.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl max-atom-items
Anzahl der Objekte, die in der Atom-Feed-Ansicht angezeigt werden sollen.

Die Vorgabe ist @samp{10}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl max-commit-count
Anzahl der Einträge, die in der Log-Ansicht pro Seite angezeigt werden
sollen.

Die Vorgabe ist @samp{50}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl max-message-length
Anzahl der Zeichen, die in der Log-Ansicht von jeder Commit-Nachricht
angezeigt werden sollen.

Die Vorgabe ist @samp{80}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl max-repo-count
Gibt an, wieviele Einträge auf jeder Seite der Repository-Index-Seiten
stehen.

Die Vorgabe ist @samp{50}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl max-repodesc-length
Gibt die maximale Anzahl der Zeichen an, die von jeder
Repository-Beschreibung auf den Repository-Index-Seiten angezeigt werden
sollen.

Die Vorgabe ist @samp{80}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl max-blob-size
Gibt die maximale Größe eines Blobs in Kilobytes an, für den HTML angezeigt
werden soll.

Die Vorgabe ist @samp{0}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette max-stats
Maximaler Zeitraum für Statistiken. Gültige Werte sind @samp{week} (Woche),
@samp{month} (Monat), @samp{quarter} (Quartal) und @samp{year} (Jahr).

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Mimetype-Assoziative-Liste mimetype
Mimetype je für die angegebene Dateinamenserweiterung.

Die Vorgabe ist @samp{((gif "image/gif") (html "text/html") (jpg
"image/jpeg") (jpeg "image/jpeg") (pdf "application/pdf") (png "image/png")
(svg "image/svg+xml"))}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Dateiobjekt mimetype-file
Gibt an, welche Datei zur automatischen Auflösung des Mimetypes benutzt
werden soll.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette module-link
Text, der als Formatzeichenkette für einen Hyperlink benutzt wird, wenn in
einer Verzeichnisauflistung ein Submodul ausgegeben wird.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck nocache?
Wenn dies auf @samp{#t} gesetzt ist, wird nicht zwischengespeichert.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck noplainemail?
Wenn dies auf @samp{#t} gesetzt ist, werden keine vollen E-Mail-Adressen
angezeigt.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck noheader?
Wenn diese Option auf @samp{#t} gesetzt ist, wird Cgit die
Standardseitenkopf auf allen Seiten weglassen.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Projektliste project-list
Eine Liste der Unterverzeichnisse innerhalb des mit
@code{repository-directory} festgelegten Verzeichnisses, relativ dazu
angegeben, die als Git-Repositorys geladen werden sollen. Eine leere Liste
bedeutet, dass alle Unterverzeichnisse geladen werden.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Dateiobjekt readme
Text, der als voreingestellter Wert für @code{cgit-repo-readme} benutzt
wird.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck remove-suffix?
Wenn es auf @code{#t} gesetzt ist und @code{repository-directory} aktiviert
ist, wird, wenn Repositorys mit einem Suffix von @code{.git} gefunden
werden, dieses Suffix von der URL und dem Namen weggelassen.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl renamelimit
Maximale Anzahl der Dateien, die bei der Erkennung von Umbenennungen
berücksichtigt werden.

Die Vorgabe ist @samp{-1}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette repository-sort
Auf welche Art Repositorys in jedem Abschnitt sortiert werden.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Robots-Liste robots
Text, der als Inhalt des @code{robots}-Meta-Tags dienen soll.

Die Vorgabe ist @samp{("noindex" "nofollow")}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette root-desc
Welcher Text unterhalb der Überschrift auf Repository-Index-Seiten
ausgegeben wird.

Die Vorgabe ist @samp{"a fast webinterface for the git dscm"}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette root-readme
The content of the file specified with this option will be included verbatim
below the ``about'' link on the repository index page.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette root-title
Welcher Text als Überschrift auf Repository-Index-Seiten ausgegeben werden
soll.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck scan-hidden-path
If set to @samp{#t} and repository-directory is enabled,
repository-directory will recurse into directories whose name starts with a
period.  Otherwise, repository-directory will stay away from such
directories, considered as ``hidden''.  Note that this does not apply to the
@file{.git} directory in non-bare repos.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Liste snapshots
Dieser Text gibt an, für welche Snapshot-Formate Cgit Links erzeugt.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Repository-Verzeichnis repository-directory
Der Name des Verzeichnisses, in dem nach Repositorys gesucht wird (wird als
@code{scan-path} in die Einstellungen übernommen).

Die Vorgabe ist @samp{"/srv/git"}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette section
Der Name des aktuellen Abschnitts („section“) für Repositorys — alle später
definierten Repositorys werden den aktuellen Abschnittsnamen erben.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette section-sort
Wenn diese Option auf @samp{#t} gesetzt wird, werden die Abschnitte in
Repository-Auflistungen nach Namen sortiert.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl section-from-path
Wenn diese Zahl vor „repository-directory“ definiert wurde, gibt sie an,
wieviele Pfadelemente jedes Repository-Pfads für den Abschnittsnamen
voreingestellt verwendet werden.

Die Vorgabe ist @samp{0}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Boolescher-Ausdruck side-by-side-diffs?
Wenn es auf @samp{#t} gesetzt ist, werden Diffs nach Voreinstellung in
Nebeneinanderdarstellung („side by side“) statt als zusammengeführte
„Unidiffs“ angezeigt.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Dateiobjekt source-filter
Gibt einen Befehl an, der aufgerufen wird, um Klartext-Blobs in der
Baumansicht („tree“) zu formatieren.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl summary-branches
Specifies the number of branches to display in the repository ``summary''
view.

Die Vorgabe ist @samp{10}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl summary-log
Specifies the number of log entries to display in the repository ``summary''
view.

Die Vorgabe ist @samp{10}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Ganze-Zahl summary-tags
Specifies the number of tags to display in the repository ``summary'' view.

Die Vorgabe ist @samp{10}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette strict-export
Wenn dieser Dateiname angegeben wird, muss eine Datei diesen Namens in einem
Repository enthalten sein, damit es angezeigt wird.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Zeichenkette virtual-root
Wird diese URL angegeben, wird sie als Wurzel für alle Cgit-Links verwendet.

Die Vorgabe ist @samp{"/"}.

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} „repository-cgit-configuration“-Liste repositories
Eine Liste von @dfn{cgit-repo}-Verbundsobjekten, die innerhalb der
Konfiguration benutzt werden sollen.

Die Vorgabe ist @samp{()}.

Verfügbare @code{repository-cgit-configuration}-Felder sind:

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Liste snapshots
Eine Maske, die für dieses Repository auf die Snapshots gelegt wird, für die
Cgit Links erzeugt. Dadurch kann die globale Einstellung  @code{snapshots}
eingeschränkt werden.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Dateiobjekt source-filter
Die Voreinstellung für @code{source-filter} ersetzen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette url
Die relative URL, mit der auf das Repository zugegriffen wird.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Dateiobjekt about-filter
Die Voreinstellung für @code{about-filter} ersetzen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette branch-sort
Wenn diese Option auf @samp{age} gesetzt wurde, wird die Liste der
Branch-Referenzen nach Datum sortiert, und wenn sie auf @samp{name} gesetzt
wurde, wird nach dem Branch-Namen sortiert.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Liste clone-url
Eine Liste von URLs, von denen das Repository geklont werden kann.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Dateiobjekt commit-filter
Die Voreinstellung für @code{commit-filter} ersetzen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Dateiobjekt commit-sort
Wenn diese Option als @samp{date} festgelegt wird, wird das Commit-Log
streng nach Datum geordnet. Wenn sie auf @samp{topo} gesetzt ist, wird es
streng topologisch geordnet.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette defbranch
The name of the default branch for this repository.  If no such branch
exists in the repository, the first branch name (when sorted) is used as
default instead.  By default branch pointed to by HEAD, or ``master'' if
there is no suitable HEAD.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette desc
Der Wert, der als Repository-Beschreibung angezeigt werden soll.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette homepage
Der Wert, der als Repository-Homepage angezeigt werden soll.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Dateiobjekt email-filter
Die Voreinstellung für @code{email-filter} ersetzen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Vielleicht-Repo-Boolescher-Ausdruck enable-commit-graph?
Eine Option, mit der die globale Einstellung für @code{enable-commit-graph?}
deaktiviert werden kann.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Vielleicht-Repo-Boolescher-Ausdruck enable-log-filecount?
Eine Option, mit der die globale Einstellung für
@code{enable-log-filecount?} deaktiviert werden kann.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Vielleicht-Repo-Boolescher-Ausdruck enable-log-linecount?
Eine Option, mit der die globale Einstellung für
@code{enable-log-linecount?} deaktiviert werden kann.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Vielleicht-Repo-Boolescher-Ausdruck enable-remote-branches?
Wenn diese Option auf @samp{#t} gesetzt ist, zeigt Cgit unter den „summary“-
und „ref“-Seiten entfernte Branches an.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Vielleicht-Repo-Boolescher-Ausdruck enable-subject-links?
Eine Option, mit der die globale Einstellung für
@code{enable-subject-links?} deaktiviert werden kann.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Vielleicht-Repo-Boolescher-Ausdruck enable-html-serving?
Eine Option, mit der die globale Einstellung für @code{enable-html-serving?}
deaktiviert werden kann.

Der Vorgabewert ist @samp{disabled} (d.h.@: deaktiviert).

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Boolescher-Ausdruck hide?
Wenn diese Option auf @code{#t} gesetzt ist, wird das Repository im
Repository-Index verborgen.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Boolescher-Ausdruck ignore?
Wenn diese Option auf @code{#t} gesetzt ist, wird das Repository ignoriert.

Vorgegeben ist @samp{#f}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Dateiobjekt logo
URL, unter der ein Bild zu finden ist, das auf allen Seiten dieses
Repositorys als Logo zu sehen sein wird.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette logo-link
URL, die geladen wird, wenn jemand auf das Logo-Bild klickt.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Dateiobjekt owner-filter
Die Voreinstellung für @code{owner-filter} ersetzen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette module-link
Text, der als Formatzeichenkette für einen Hyperlink benutzt wird, wenn in
einer Verzeichnisauflistung ein Submodul ausgegeben wird. Die Argumente für
diese Formatzeichenkette sind Pfad und SHA1 des Submodul-Commits.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} module-link-Pfad module-link-path
Text, der als Formatzeichenkette für einen Hyperlink benutzt wird, wenn in
einer Verzeichnisauflistung ein Submodul mit dem angegebenen
Unterverzeichnispfad ausgegeben wird.

Die Vorgabe ist @samp{()}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette max-stats
Die Voreinstellung für den maximalen Zeitraum für Statistiken ersetzen.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette name
Welcher Wert als Repository-Name angezeigt werden soll.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette owner
Ein Wert, um den Besitzer des Repositorys zu identifizieren.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette path
Ein absoluter Pfad zum Repository-Verzeichnis.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette readme
A path (relative to repo) which specifies a file to include verbatim as the
``About'' page for this repo.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Zeichenkette section
Der Name des aktuellen Abschnitts („section“) für Repositorys — alle später
definierten Repositorys werden den aktuellen Abschnittsnamen erben.

Die Vorgabe ist @samp{""}.

@end deftypevr

@deftypevr {@code{repository-cgit-configuration}-Parameter} Repo-Liste extra-options
Zusätzliche Optionen werden an die cgitrc-Datei angehängt.

Die Vorgabe ist @samp{()}.

@end deftypevr

@end deftypevr

@deftypevr {@code{cgit-configuration}-Parameter} Liste extra-options
Zusätzliche Optionen werden an die cgitrc-Datei angehängt.

Die Vorgabe ist @samp{()}.

@end deftypevr


@c %end of fragment

Aber es könnte auch sein, dass Sie schon eine @code{cgitrc} haben und zum
Laufen bringen wollen. In diesem Fall können Sie eine
@code{opaque-cgit-configuration} als Verbundsobjekt an
@code{cgit-service-type} übergeben. Wie der Name schon sagt, bietet eine
opake Konfiguration keinerlei Unterstützung für Reflexion.

Verfügbare @code{opaque-cgit-configuration}-Felder sind:

@deftypevr {@code{opaque-cgit-configuration}-Parameter} „package“ cgit
Das cgit-Paket.
@end deftypevr

@deftypevr {@code{opaque-cgit-configuration}-Parameter} Zeichenkette string
Der Inhalt für @code{cgitrc} als eine Zeichenkette.
@end deftypevr

Wenn zum Beispiel Ihre @code{cgitrc} nur aus der leeren Zeichenkette
bestehen soll, könnten Sie einen Cgit-Dienst auf diese Weise instanziieren:

@lisp
(service cgit-service-type
         (opaque-cgit-configuration
          (cgitrc "")))
@end lisp

@subsubheading Gitolite-Dienst

@cindex Gitolite-Dienst
@cindex Git, Server anbieten („hosten“)
@uref{https://gitolite.com/gitolite/, Gitolite} ist ein Werkzeug, um
Git-Repositorys anderen auf einem zentralen Server anzubieten.

Gitolite kann mehrere Nutzer mit mehreren Repositorys bedienen und
unterstützt flexible Konfigurationsmöglichkeiten der Berechtigungen der
Repository-Nutzer.

Das folgende Beispiel richtet Gitolite für den voreingestellten
@code{git}-Benutzer und den angegebenen öffentlichen SSH-Schlüssel ein.

@lisp
(service gitolite-service-type
         (gitolite-configuration
           (admin-pubkey (plain-file
                           "ihrname.pub"
                           "ssh-rsa AAAA… guix@@example.com"))))
@end lisp

Sie konfigurieren Gitolite, indem Sie ein besonderes Admin-Repository
anpassen. Sie können es zum Beispiel klonen, indem Sie, wenn Sie Gitolite
auf @code{example.com} eingerichtet haben, den folgenden Befehl zum Klonen
des Admin-Repositorys ausführen:

@example
git clone git@@example.com:gitolite-admin
@end example

Wenn der Gitolite-Dienst aktiviert wird, wird der mitgegebene
@code{admin-pubkey} ins @file{keydir}-Verzeichnis vom
„gitolite-admin“-Repository eingefügt. Wenn sich dadurch das Repository
ändert, wird die Änderung mit der Commit-Nachricht „gitolite setup by GNU
Guix“ commitet.

@deftp {Datentyp} gitolite-configuration
Repräsentiert die Konfiguration vom @code{gitolite-service-type}.

@table @asis
@item @code{package} (Vorgabe: @var{gitolite})
Welches Gitolite-Paket benutzt werden soll.

@item @code{user} (Vorgabe: @var{git})
Welches Benutzerkonto für Gitolite benutzt werden soll. Mit diesem Benutzer
werden Sie über SSH auf Gitolite zugreifen.

@item @code{group} (Vorgabe: @var{git})
Gruppe für Gitolite.

@item @code{home-directory} (Vorgabe: @var{"/var/lib/gitolite"})
Das Verzeichnis, in dem die Gitolite-Konfiguration und Repositorys
gespeichert werden sollen.

@item @code{rc-file} (Vorgabe: @var{(gitolite-rc-file)})
Ein dateiartiges Objekt (siehe @ref{G-Ausdrücke, dateiartige Objekte}),
das die Konfiguration für Gitolite repräsentiert.

@item @code{admin-pubkey} (Vorgabe: @var{#f})
Ein dateiartiges Objekt (siehe @ref{G-Ausdrücke, dateiartige Objekte}),
mit dem Gitolite eingerichtet werden kann. Er wird in das
@file{keydir}-Verzeichnis im „gitolite-admin“-Repository eingefügt.

Um einen SSH-Schlüssel als Zeichenkette anzugeben, benutzen Sie die
@code{plain-file}-Funktion.

@lisp
(plain-file "ihrname.pub" "ssh-rsa AAAA… guix@@example.com")
@end lisp

@end table
@end deftp

@deftp {Datentyp} gitolite-rc-file
Repräsentiert die Gitolie-RC-Datei.

@table @asis
@item @code{umask} (Vorgabe: @code{#o0077})
Dies legt fest, welche Berechtigungen Gitolite an die Repositorys und deren
Inhalt vergibt.

Für einen Wert wie @code{#o0027} wird die Gruppe, die Gitolite benutzt (nach
Vorgabe: @code{git}) Lesezugriff erhalten. Das ist nötig, wenn Sie Gitolite
mit Software wie Cgit oder Gitweb kombinieren.

@item @code{git-config-keys} (Vorgabe: @code{""})
Gitolite allows you to set git config values using the @samp{config}
keyword. This setting allows control over the config keys to accept.

@item @code{roles} (Vorgabe: @code{'(("READERS" . 1) ("WRITERS" . ))})
Legt fest, welche Rollennamen für Nutzer möglich sind, wenn Sie den Befehl
perms ausführen.

@item @code{enable} (Vorgabe: @code{'("help" "desc" "info" "perms" "writable" "ssh-authkeys" "git-config" "daemon" "gitweb")})
Diese Einstellung legt die innerhalb von Gitolite zur Verfügung gestellten
Befehle fest.

@end table
@end deftp


@node Spieldienste
@subsection Spieldienste

@subsubheading „The Battle for Wesnoth“-Dienst
@cindex wesnothd
@uref{https://wesnoth.org, The Battle for Wesnoth} ist ein in einer
Fantasy-Welt angesiedeltes, rundenbasiertes, taktisches Strategiespiel. Es
verfügt über mehrere Einzelspielerkampagnen und Mehrspielerspiele (über das
Netzwerk und lokal).

@defvar {Scheme-Variable} wesnothd-service-type
Diensttyp für den wesnothd-Dienst. Als Wert muss ein
@code{wesnothd-configuration}-Objekt benutzt werden. Um wesnothd mit seiner
Vorgabekonfiguration auszuführen, instanziieren Sie es als:

@lisp
(service wesnothd-service-type)
@end lisp
@end defvar

@deftp {Datentyp} wesnothd-configuration
Datentyp, der die Konfiguration von @command{wesnothd} repräsentiert.

@table @asis
@item @code{package} (Vorgabe: @code{wesnoth-server})
Das Paket, das für den Wesnoth-Server benutzt werden soll.

@item @code{port} (Vorgabe: @code{15000})
Der Port, an den der Server gebunden wird.
@end table
@end deftp


@node PAM-Einbindedienst
@subsection PAM-Einbindedienst
@cindex pam-mount

Das Modul @code{(gnu services pam-mount)} stellt einen Dienst zur Verfügung,
mit dem Benutzer Datenträger beim Anmelden einbinden können. Damit sollte es
möglich sein, jedes vom System unterstützte Datenträgerformat einzubinden.

@defvar {Scheme-Variable} pam-mount-service-type
Diensttyp für PAM-Einbindeunterstützung.
@end defvar

@deftp {Datentyp} pam-mount-configuration
Datentyp, der die Konfiguration für PAM-Einbindungen („PAM Mount“)
repräsentiert.

Sie hat folgende Parameter:

@table @asis
@item @code{rules}
Die Konfigurationsregeln, um @file{/etc/security/pam_mount.conf.xml} zu
erzeugen.

Die Konfigurationsregeln sind SXML-Elemente (siehe @ref{SXML,,, guile, GNU
Guile Reference Manual}) und nach Vorgabe wird für niemanden etwas beim
Anmelden eingebunden:

@lisp
`((debug (@@ (enable "0")))
  (mntoptions (@@ (allow ,(string-join
                          '("nosuid" "nodev" "loop"
                            "encryption" "fsck" "nonempty"
                            "allow_root" "allow_other")
                          ","))))
  (mntoptions (@@ (require "nosuid,nodev")))
  (logout (@@ (wait "0")
             (hup "0")
             (term "no")
             (kill "no")))
  (mkmountpoint (@@ (enable "1")
                   (remove "true"))))
@end lisp

Some @code{volume} elements must be added to automatically mount volumes at
login.  Here's an example allowing the user @code{alice} to mount her
encrypted @env{HOME} directory and allowing the user @code{bob} to mount the
partition where he stores his data:

@lisp
(define pam-mount-rules
`((debug (@@ (enable "0")))
            (volume (@@ (user "alice")
                       (fstype "crypt")
                       (path "/dev/sda2")
                       (mountpoint "/home/alice")))
            (volume (@@ (user "bob")
                       (fstype "auto")
                       (path "/dev/sdb3")
                       (mountpoint "/home/bob/data")
                       (options "defaults,autodefrag,compress")))
            (mntoptions (@@ (allow ,(string-join
                                    '("nosuid" "nodev" "loop"
                                      "encryption" "fsck" "nonempty"
                                      "allow_root" "allow_other")
                                    ","))))
            (mntoptions (@@ (require "nosuid,nodev")))
            (logout (@@ (wait "0")
                       (hup "0")
                       (term "no")
                       (kill "no")))
            (mkmountpoint (@@ (enable "1")
                             (remove "true")))))

(service pam-mount-service-type
         (pam-mount-configuration
           (rules pam-mount-rules)))
@end lisp

Die vollständige Liste möglicher Optionen finden Sie in der Handbuchseite
(„man page“) für
@uref{http://pam-mount.sourceforge.net/pam_mount.conf.5.html,
pam_mount.conf}.
@end table
@end deftp


@node Guix-Dienste
@subsection Guix-Dienste

@subsubheading Guix-Datendienst
Der @uref{http://data.guix.gnu.org,Guix-Datendienst} („Guix Data Service“)
verarbeitet und speichert Daten über GNU Guix und stellt diese zur
Verfügung. Dazu gehören Informationen über Pakete, Ableitungen sowie durch
Linting erkannte Paketfehler.

Die Daten werden in einer PostgreSQL-Datenbank gespeichert und stehen über
eine Weboberfläche zur Verfügung.

@defvar {Scheme-Variable} guix-data-service-type
Diensttyp für den Guix-Datendienst. Sein Wert muss ein
@code{guix-data-service-configuration}-Objekt sein. Der Dienst kann optional
den getmail-Dienst erweitern und die guix-commits-Mailing-Liste benutzen, um
bei Änderungen am Guix-Git-Repository auf dem Laufenden zu bleiben.
@end defvar

@deftp {Datentyp} guix-data-service-configuration
Der Datentyp, der die Konfiguration des Guix-Datendienstes repräsentiert.

@table @asis
@item @code{package} (Vorgabe: @code{guix-data-service})
Das zu verwendende Guix-Datendienst-Paket.

@item @code{user} (Vorgabe: @code{"guix-data-service"})
Das Systembenutzerkonto, mit dem der Dienst ausgeführt wird.

@item @code{group} (Vorgabe: @code{"guix-data-service"})
Die Systembenutzergruppe, mit der der Dienst ausgeführt wird.

@item @code{port} (Vorgabe: @code{8765})
Der Port, an den der Webdienst gebunden wird.

@item @code{host} (Vorgabe: @code{"127.0.0.1"})
Die Netzwerkschnittstelle („Host“), an die der Webdienst gebunden wird.

@item @code{getmail-idle-mailboxes} (Vorgabe: @code{#f})
Wenn es festgelegt ist, wird es als Liste der Postfächer („Mailboxes“)
eingerichtet, die der getmail-Dienst beobachtet.

@item @code{commits-getmail-retriever-configuration} (Vorgabe: @code{#f})
Wenn es festgelegt ist, bezeichnet dies das
@code{getmail-retriever-configuration}-Objekt, mit dem getmail eingerichtet
wird, um E-Mails von der „guix-commits“-Mailing-Liste zu beziehen.

@item @code{extra-options} (Vorgabe: @var{'()})
Zusätzliche Befehlszeilenoptionen für @code{guix-data-service}.

@item @code{extra-process-jobs-options} (Vorgabe: @var{'()})
Zusätzliche Befehlszeilenoptionen für @code{guix-data-service-process-jobs}.

@end table
@end deftp

@node Linux-Dienste
@subsection Linux-Dienste

@cindex OOM
@cindex Out-Of-Memory-Killer
@cindex earlyoom
@cindex Early-Out-Of-Memory-Daemon
@subsubheading Early-OOM-Dienst

@uref{https://github.com/rfjakob/earlyoom,Early OOM}, auch bekannt als
Earlyoom, ist ein minimalistischer Out-Of-Memory-Daemon (OOM), um auf
Anwendungsebene („User Space“) Programme abzuwürgen, wenn einem der freie
Arbeitsspeicher ausgeht (ein „OOM-Killer“). Er stellt eine Alternative zum
im Kernel eingebauten OOM-Killer dar, mit der das System in einem solchen
Fall besser weiterhin auf Benutzereingaben reagieren kann und die
konfigurierbarer ist.

@deffn {Scheme-Variable} earlyoom-service-type
Der Diensttyp, um @command{earlyoom}, den Early-OOM-Daemon, auszuführen. Als
Wert muss ein @code{earlyoom-configuration}-Objekt angegeben werden, wie
unten beschrieben. So kann der Dienst mit seiner Vorgabekonfiguration
instanziieret werden:

@lisp
(service earlyoom-service-type)
@end lisp
@end deffn

@deftp {Datentyp} earlyoom-configuration
Dies ist das Verbundsobjekt mit der Konfiguration des
@code{earlyoom-service-type}.

@table @asis
@item @code{earlyoom} (Vorgabe: @var{earlyoom})
Das Earlyoom-Paket, das benutzt werden soll.

@item @code{minimum-available-memory} (Vorgabe: @code{10})
Der Schwellwert, wieviel Arbeitsspeicher mindestens @emph{verfügbar} bleiben
muss, in Prozent.

@item @code{minimum-free-swap} (Vorgabe: @code{10})
Der Schwellwert, wieviel Swap-Speicher mindestens frei bleiben muss, in
Prozent.

@item @code{prefer-regexp} (Vorgabe: @code{#f})
Ein regulärer Ausdruck (als eine Zeichenkette), der auf die Namen jener
Prozesse passt, die als Erste abgewürgt werden sollen.

@item @code{avoid-regexp} (Vorgabe: @code{#f})
Ein regulärer Ausdruck (als eine Zeichenkette), der auf die Namen jener
Prozesse passt, die @emph{nicht} abgewürgt werden sollen.<

@item @code{memory-report-interval} (Vorgabe: @code{0})
Das Intervall in Sekunden, in dem ein Bericht über den Speicher ausgegeben
werden soll. Nach Vorgabe ist es deaktiviert.

@item @code{ignore-positive-oom-score-adj?} (Vorgabe: @code{#f})
A boolean indicating whether the positive adjustments set in
@file{/proc/*/oom_score_adj}.

@item @code{show-debug-messages?} (Vorgabe: @code{#f})
Ein boolescher Ausdruck, der angibt, ob Nachrichten zur Fehlersuche
ausgegeben werden sollen. Die Protokolle werden unter
@file{/var/log/earlyoom.log} gespeichert.

@item @code{send-notification-command} (Vorgabe: @code{#f})
Hiermit kann ein eigener Befehl eingestellt werden, um Benachrichtigungen zu
senden.
@end table
@end deftp

@cindex modprobe
@cindex Kernelmodule laden
@subsubheading Kernelmodul-Ladedienst

Mit dem Kernelmodul-Ladedienst („Kernel Module Loader Service“) können Sie
veranlassen, dass hinzuladbare Kernelmodule beim Systemstart geladen
werden. Das bietet sich besonders für Module an, die nicht automatisch
geladen werden („Autoload“), sondern manuell geladen werden müssen, wie es
z.B.@: bei @code{ddcci} der Fall ist.

@deffn {Scheme-Variable} kernel-module-loader-service-type
Der Diensttyp, um hinzuladbare Kernelmodule beim Systemstart über
@command{modprobe} zu laden. Als Wert muss eine Liste von Zeichenketten
angegeben werden, die den Modulnamen entsprechen. Um zum Beispiel die durch
@code{ddcci-driver-linux} zur Verfügung gestellten Treiber zu laden und
dabei durch Übergabe bestimmter Parameter den Modus zur Fehlersuche zu
aktivieren, können Sie Folgendes benutzen:

@lisp
(use-modules (gnu) (gnu services))
(use-package-modules linux)
(use-service-modules linux)

(define ddcci-config
  (plain-file "ddcci.conf"
              "options ddcci dyndbg delay=120"))

(operating-system
  …
  (services (cons* (service kernel-module-loader-service-type
                            '("ddcci" "ddcci_backlight"))
                   (simple-service 'ddcci-config etc-service-type
                                   (list `("modprobe.d/ddcci.conf"
                                           ,ddcci-config)))
                   %base-services))
  (kernel-loadable-modules (list ddcci-driver-linux)))
@end lisp
@end deffn

@node Hurd Services
@subsection Hurd Services

@defvr {Scheme Variable} hurd-console-service-type
This service starts the fancy @code{VGA} console client on the Hurd.

The service's value is a @code{hurd-console-configuration} record.
@end defvr

@deftp {Data Type} hurd-console-configuration
This is the data type representing the configuration for the
hurd-console-service.

@table @asis
@item @code{hurd} (default: @var{hurd})
The Hurd package to use.
@end table
@end deftp

@deffn {Scheme Procedure} hurd-etc-service @var{os}
This service implements a minimal @code{etc-service}, adding some specifics
for the Hurd.

It is part of the @code{hurd-default-essential-services}.
@end deffn

@defvr {Scheme Variable} hurd-getty-service-type
This service starts a tty using the Hurd @code{getty} program.

The service's value is a @code{hurd-getty-configuration} record.
@end defvr

@deftp {Data Type} hurd-getty-configuration
This is the data type representing the configuration for the
hurd-getty-service.

@table @asis
@item @code{hurd} (default: @var{hurd})
The Hurd package to use.

@item @code{tty}
The name of the console this Getty runs on---e.g., @code{"tty1"}.

@item @code{baud-rate} (default: @code{38400})
An integer specifying the baud rate of the tty.

@end table
@end deftp

@node Verschiedene Dienste
@subsection Verschiedene Dienste

@cindex Fingerabdruck
@subsubheading Fingerabdrucklese-Dienst

Das Modul @code{(gnu services authentication)} stellt einen DBus-Dienst zur
Verfügung, mit dem Fingerabdrücke mit Hilfe eines Fingerabdrucksensors
gelesen und identifiziert werden können.

@defvr {Scheme-Variable} fprintd-service-type
Der Diensttyp für @command{fprintd}, mit dem Fingerabdrücke gelesen werden
können.

@lisp
(service fprintd-service-type)
@end lisp
@end defvr

@cindex sysctl
@subsubheading Systemsteuerungsdienst

Das Modul @code{(gnu services sysctl)} stellt einen Dienst zur Verfügung, um
Kernelparameter zur Boot-Zeit einzustellen.

@defvr {Scheme-Variable} sysctl-service-type
Der Diensttyp für @command{sysctl}, das Kernel-Parameter unter
@file{/proc/sys/} anpasst. Um IPv4-Weiterleitung („Forwarding“) zu
aktivieren, kann er auf diese Weise instanziiert werden:

@lisp
(service sysctl-service-type
         (sysctl-configuration
           (settings '(("net.ipv4.ip_forward" . "1")))))
@end lisp
@end defvr

@deftp {Datentyp} sysctl-configuration
Der Datentyp, der die Konfiguration von @command{sysctl} repräsentiert.

@table @asis
@item @code{sysctl} (Vorgabe: @code{(file-append procps "/sbin/sysctl"})
Die ausführbare Datei für @command{sysctl}, die benutzt werden soll.

@item @code{settings} (Vorgabe: @code{'()})
Eine assoziative Liste, die Kernel-Parameter und ihre Werte festlegt.
@end table
@end deftp

@cindex pcscd
@subsubheading PC/SC-Smart-Card-Daemon-Dienst

Das Modul @code{(gnu services security-token)} stellt den folgenden Dienst
zur Verfügung, um @command{pcscd} auszuführen, den
PC/SC-Smart-Card-Daemon. @command{pcscd} ist das Daemonprogramm für die
Rahmensysteme pcsc-lite und MuscleCard. Es handelt sich um einen
Ressourcenverwaltungsdienst, der die Kommunikation mit
Smart-Card-Lesegeräten, Smart Cards und kryptographischen Tokens steuert,
die mit dem System verbunden sind.

@defvr {Scheme-Variable} pcscd-service-type
Diensttyp für den @command{pcscd}-Dienst. Als Wert muss ein
@code{pcscd-configuration}-Objekt angegeben werden. Um pcscd mit seiner
Vorgabekonfiguration auszuführen, instanziieren Sie ihn als:

@lisp
(service pcscd-service-type)
@end lisp
@end defvr

@deftp {Datentyp} pcscd-configuration
Repräsentiert die Konfiguration von @command{pcscd}.

@table @asis
@item @code{pcsc-lite} (Vorgabe: @code{pcsc-lite})
Das „pcsc-lite“-Paket, das pcscd zur Verfügung stellt.
@item @code{usb-drivers} (Vorgabe: @code{(list ccid)})
Die Liste der Pakete, die USB-Treiber für pcscd zur Verfügung stellen. Es
wird erwartet, dass sich Treiber unter @file{pcsc/drivers} innerhalb des
Store-Verzeichnisses des Pakets befinden.
@end table
@end deftp

@cindex lirc
@subsubheading Lirc-Dienst

Das Modul @code{(gnu services lirc)} stellt den folgenden Dienst zur
Verfügung.

@deffn {Scheme-Prozedur} lirc-service [#:lirc lirc] @
       [#:device #f] [#:driver #f] [#:config-file #f] @ [#:extra-options '()]
Liefert einen Dienst, der @url{http://www.lirc.org,LIRC} ausführt, einen
Dienst zum Dekodieren von Infrarot-Signalen aus Fernbedienungen.

Optional können @var{device} (Gerät), @var{driver} (Treiber) und
@var{config-file} (Name der Konfigurationsdatei) festgelegt werden. Siehe
das Handbuch von @command{lircd} für Details.

Schließlich enthält @var{extra-options} eine Liste zusätzlicher
Befehlszeilenoptionen, die an @command{lircd} übergeben werden.
@end deffn

@cindex spice
@subsubheading Spice-Dienst

Das Modul @code{(gnu services spice)} stellt den folgenden Dienst bereit.

@deffn {Scheme-Prozedur} spice-vdagent-service [#:spice-vdagent]
Liefert einen Dienst, der @url{https://www.spice-space.org,VDAGENT}
ausführt, einen Daemon, um die Zwischenablage mit einer virtuellen Maschine
zu teilen und die Auflösung des Anzeigegeräts des Gastsystems umzustellen,
wenn sich die Größe des grafischen Konsolenfensters ändert.
@end deffn

@cindex inputattach
@subsubheading inputattach-Dienst

@cindex Tablett-Eingaben, für Xorg
@cindex Tastbildschirm-Eingaben, für Xorg
Der @uref{https://linuxwacom.github.io/, inputattach-Dienst} macht es Ihnen
möglich, Eingabegeräte wie Wacom-Tabletts, Tastbildschirme („Touchscreens“)
oder Joysticks mit dem Xorg-Anzeigeserver zu benutzen.

@deffn {Scheme-Variable} inputattach-service-type
Der Diensttyp für den Dienst, der @command{inputattach} auf einem Gerät
ausführt und Ereignisse davon weiterleitet.
@end deffn

@deftp {Datentyp} inputattach-configuration
@table @asis
@item @code{device-type} (Vorgabe: @code{"wacom"})
Der Typ des Geräts, mit dem eine Verbindung hergestellt werden soll. Führen
Sie @command{inputattach --help} aus dem @code{inputattach}-Paket aus, um
eine Liste unterstützter Gerätetypen zu sehen.

@item @code{device} (Vorgabe: @code{"/dev/ttyS0"})
Die Gerätedatei, um sich mit dem Gerät zu verbinden.

@item @code{baud-rate} (Vorgabe: @code{#f})
Welche Baudrate für die serielle Verbindung benutzt werden soll. Es sollte
eine Zahl oder @code{#f} angegeben werden.

@item @code{log-file} (Vorgabe: @code{#f})
Wenn es wahr ist, muss es der Name einer Datei sein, in die
Protokollnachrichten geschrieben werden sollen.
@end table
@end deftp

@subsubheading Dictionary Service
@cindex Wörterbuch
Das Modul @code{(gnu services dict)} stellt den folgenden Dienst zur
Verfügung:

@defvr {Scheme Variable} dicod-service-type
This is the type of the service that runs the @command{dicod} daemon, an
implementation of DICT server (@pxref{Dicod,,, dico, GNU Dico Manual}).
@end defvr

@deffn {Scheme-Prozedur} dicod-service [#:config (dicod-configuration)]
Liefert einen Dienst, der den @command{dicod}-Daemon ausführt. Dabei handelt
es sich um eine Implementierung eines DICT-Servers (siehe das @ref{Dicod,,,
dico, Handbuch von GNU Dico}).

Das optionale Argument @var{config} gibt die Konfiguration für
@command{dicod} an, welche ein @code{<dicod-configuration>}-Objekt sein
sollte. Nach Vorgabe wird als Wörterbuch das „GNU Collaborative
International Dictionary of English“ angeboten.

Sie können in Ihre @file{~/.dico}-Datei @command{open localhost} eintragen,
damit @code{localhost} zum voreingestellten Server des
@command{dico}-Clients wird (siehe das @ref{Initialization File,,, dico,
Handbuch von GNU Dico}).
@end deffn

@deftp {Datentyp} dicod-configuration
Der Datentyp, der die Konfiguration von dicod repräsentiert.

@table @asis
@item @code{dico} (Vorgabe: @var{dico})
Paketobjekt des GNU-Dico-Wörterbuchservers.

@item @code{interfaces} (Vorgabe: @var{'("localhost")})
Hierfür muss die Liste der IP-Adressen, Ports und möglicherweise auch
Socket-Dateinamen angegeben werden, auf die gelauscht werden soll (siehe
@ref{Server Settings, @code{listen} directive,, dico, Handbuch von GNU
Dico}).

@item @code{handlers} (Vorgabe: @var{'()})
Liste der @code{<dicod-handler>}-Objekte, die Handler (Modulinstanzen)
bezeichnen.

@item @code{databases} (Vorgabe: @var{(list %dicod-database:gcide)})
Liste der @code{<dicod-database>}-Objekte, die anzubietende Wörterbücher
bezeichnen.
@end table
@end deftp

@deftp {Datentyp} dicod-handler
Der Datentyp, der einen Wörterbuch-Handler (eine Modulinstanz)
repräsentiert.

@table @asis
@item @code{name}
Der Name des Handlers (der Modulinstanz).

@item @code{module} (Vorgabe: @var{#f})
Der Name des dicod-Moduls (der Instanz) des Handlers. Wenn er @code{#f} ist,
heißt das, das Modul hat denselben Namen wie der Handler (siehe
@ref{Module,,, dico, Handbuch von GNU Dico}).

@item @code{options}
Liste der Zeichenketten oder G-Ausdrücke, die die Argumente für den
Modul-Handler repräsentieren.
@end table
@end deftp

@deftp {Datentyp} dicod-database
Datentyp, der eine Wörterbuchdatenbank repräsentiert.

@table @asis
@item @code{name}
Der Name der Datenbank, der in DICT-Befehlen benutzt wird.

@item @code{handler}
Der Name des dicod-Handlers (der Modulinstanz), die von dieser Datenbank
benutzt wird (siehe @ref{Handlers,,, dico, Handbuch von GNU Dico}).

@item @code{complex?} (Vorgabe: @var{#f})
Ob die Datenbankkonfiguration komplex ist. In diesem Fall muss für die
komplexe Konfiguration auch ein entsprechendes @code{<dicod-handler>}-Objekt
existieren, ansonsten nicht.

@item @code{options}
Liste der Zeichenketten oder G-Ausdrücke, die die Argumente für die
Datenbank repräsentiert (siehe @ref{Databases,,, dico, Handbuch von GNU
Dico}).
@end table
@end deftp

@defvr {Scheme-Variable} %dicod-database:gcide
Ein @code{<dicod-database>}-Objekt, um das „GNU Collaborative International
Dictionary of English“ anzubieten. Dazu wird das @code{gcide}-Paket benutzt.
@end defvr

Im Folgenden sehen Sie eine Beispielkonfiguration für einen
@code{dicod-service}.

@lisp
(dicod-service #:config
  (dicod-configuration
   (handlers (list (dicod-handler
                    (name "wordnet")
                    (module "dictorg")
                    (options
                     (list #~(string-append "dbdir=" #$wordnet))))))
   (databases (list (dicod-database
                     (name "wordnet")
                     (complex? #t)
                     (handler "wordnet")
                     (options '("database=wn")))
                    %dicod-database:gcide))))
@end lisp

@cindex Docker
@subsubheading Docker-Dienst

Das Modul @code{(gnu services docker)} stellt die folgenden Dienste zur
Verfügung.

@defvr {Scheme-Variable} docker-service-type

Dies ist der Diensttyp des Dienstes, um @url{https://www.docker.com,Docker}
auszuführen, einen Daemon, der Anwendungsbündel in isolierten Umgebungen
ausführen kann (manchmal auch als „Container“ bezeichnet).

@end defvr

@deftp {Datentyp} docker-configuration
Dies ist der Datentyp, der die Konfiguration von Docker und Containerd
repräsentiert.

@table @asis

@item @code{package} (Vorgabe: @code{docker})
Das Docker-Paket, was benutzt werden soll.

@item @code{containerd} (Vorgabe: @var{containerd})
Das Containerd-Paket, was benutzt werden soll.

@end table
@end deftp

@cindex Audit
@subsubheading Auditd-Dienst

Das Modul @code{(gnu services auditd)} stellt den folgenden Dienst zur
Verfügung.

@defvr {Scheme-Variable} auditd-service-type

Dies ist der Diensttyp des Dienstes, mit dem
@url{https://people.redhat.com/sgrubb/audit/,auditd} ausgeführt wird, ein
Daemon, der sicherheitsrelevante Informationen auf Ihrem System sammelt.

Beispiele für Dinge, über die Informationen gesammelt werden sollen:

@enumerate
@item
Dateizugriffe
@item
Betriebssystemaufrufe („System Calls“)
@item
Aufgerufene Befehle
@item
Fehlgeschlagene Anmeldeversuche
@item
Filterung durch die Firewall
@item
Netzwerkzugriff
@end enumerate

@command{auditctl} aus dem @code{audit}-Paket kann benutzt werden, um zu
überwachende Ereignisse (bis zum nächsten Neustart) hinzuzufügen oder zu
entfernen. Um über Ereignisse dauerhaft Informationen sammeln zu lassen,
schreiben Sie die Befehlszeilenargumente für auditctl in
@file{/etc/audit/audit.rules}. @command{aureport} aus dem @code{audit}-Paket
kann benutzt werden, um einen Bericht über alle aufgezeichneten Ereignisse
anzuzeigen. Normalerweise speichert der Audit-Daemon Protokolle im
Verzeichnis @file{/var/log/audit}.

@end defvr

@deftp {Datentyp} auditd-configuration
Dies ist der Datentyp, der die Konfiguration von auditd repräsentiert.

@table @asis

@item @code{audit} (Vorgabe: @code{audit})
Das zu verwendende audit-Paket.

@end table
@end deftp

@defvr {Scheme-Variable} singularity-service-type
Dies ist der Diensttyp für den Dienst, mit dem Sie
@url{https://www.sylabs.io/singularity/, Singularity} ausführen können, ein
Docker-ähnliches Werkzeug, um Anwendungsbündel (auch bekannt als
„Container“) auszuführen. Der Wert für diesen Dienst ist das
Singularity-Paket, das benutzt werden soll.

Der Dienst installiert keinen Daemon, sondern er installiert Hilfsprogramme
als setuid-root (siehe @ref{Setuid-Programme}), damit auch „unprivilegierte“
Nutzer ohne besondere Berechtigungen @command{singularity run} und ähnliche
Befehle ausführen können.
@end defvr

@cindex Nix
@subsubheading Nix-Dienst

Das Modul @code{(gnu services nix)} stellt den folgenden Dienst zur
Verfügung:

@defvr {Scheme-Variable} nix-service-type

Dies ist der Diensttyp für den Dienst, der den Erstellungs-Daemon der
@url{https://nixos.org/nix/, Nix-Paketverwaltung} ausführt. Hier ist ein
Beispiel, wie man ihn benutzt:

@lisp
(use-modules (gnu))
(use-service-modules nix)
(use-package-modules package-management)

(operating-system
  ;; …
  (packages (append (list nix)
                    %base-packages))

  (services (append (list (service nix-service-type))
                    %base-services)))
@end lisp

Nach @command{guix system reconfigure} können Sie Nix für Ihr Benutzerkonto
konfigurieren:

@itemize
@item Fügen Sie einen Nix-Kanal ein und aktualisieren Sie ihn. Siehe
@url{https://nixos.org/nix/manual/, Nix Package Manager Guide}.

@item Erzeugen Sie eine symbolische Verknüpfung zu Ihrem Profil und aktivieren Sie das Nix-Profil:
@end itemize

@example
$ ln -s "/nix/var/nix/profiles/per-user/$USER/profile" ~/.nix-profile
$ source /run/current-system/profile/etc/profile.d/nix.sh
@end example

@end defvr

@node Setuid-Programme
@section Setuid-Programme

@cindex setuid-Programme
Some programs need to run with ``root'' privileges, even when they are
launched by unprivileged users.  A notorious example is the @command{passwd}
program, which users can run to change their password, and which needs to
access the @file{/etc/passwd} and @file{/etc/shadow} files---something
normally restricted to root, for obvious security reasons.  To address that,
these executables are @dfn{setuid-root}, meaning that they always run with
root privileges (@pxref{How Change Persona,,, libc, The GNU C Library
Reference Manual}, for more info about the setuid mechanism).

Der Store selbst kann @emph{keine} setuid-Programme enthalten: Das wäre eine
Sicherheitslücke, weil dann jeder Nutzer auf dem System Ableitungen
schreiben könnte, die in den Store solche Dateien einfügen würden (siehe
@ref{Der Store}). Wir benutzen also einen anderen Mechanismus: Statt auf den
ausführbaren Dateien im Store selbst deren setuid-Bit zu setzen, lassen wir
den Systemadministrator @emph{deklarieren}, welche Programme mit setuid-root
gestartet werden.

Das Feld @code{setuid-programs} einer @code{operating-system}-Deklaration
enthält eine Liste von G-Ausdrücken, die die Namen der Programme angeben,
die setuid-root sein sollen (siehe @ref{Das Konfigurationssystem nutzen}). Zum Beispiel kann das Programm @command{passwd}, was Teil des
Shadow-Pakets ist, durch diesen G-Ausdruck bezeichnet werden (siehe
@ref{G-Ausdrücke}):

@example
#~(string-append #$shadow "/bin/passwd")
@end example

Eine vorgegebene Menge von setuid-Programmen wird durch die Variable
@code{%setuid-programs} aus dem Modul @code{(gnu system)} definiert.

@defvr {Scheme-Variable} %setuid-programs
Eine Liste von G-Ausdrücken, die übliche Programme angeben, die setuid-root
sein müssen.

Die Liste enthält Befehle wie @command{passwd}, @command{ping}, @command{su}
und @command{sudo}.
@end defvr

Intern erzeugt Guix die eigentlichen setuid-Programme im Verzeichnis
@file{/run/setuid-programs}, wenn das System aktiviert wird. Die Dateien in
diesem Verzeichnis verweisen auf die „echten“ Binärdateien im Store.

@node X.509-Zertifikate
@section X.509-Zertifikate

@cindex HTTPS, Zertifikate
@cindex X.509-Zertifikate
@cindex TLS
Über HTTPS verfügbare Webserver (also HTTP mit gesicherter Transportschicht,
englisch „Transport-Layer Security“, kurz TLS) senden Client-Programmen ein
@dfn{X.509-Zertifikat}, mit dem der Client den Server dann
@emph{authentifizieren} kann. Dazu verifiziert der Client, dass das
Zertifikat des Servers von einer sogenannten Zertifizierungsstelle signiert
wurde (@dfn{Certificate Authority}, kurz CA). Damit er aber die Signatur der
Zertifizierungsstelle verifizieren kann, muss jeder Client das Zertifikat
der Zertifizierungsstelle besitzen.

Web-Browser wie GNU@tie{}IceCat liefern ihre eigenen CA-Zertifikate mit,
damit sie von Haus aus Zertifikate verifizieren können.

Den meisten anderen Programmen, die HTTPS sprechen können — @command{wget},
@command{git}, @command{w3m} etc.@: — muss allerdings erst mitgeteilt
werden, wo die CA-Zertifikate installiert sind.

@cindex @code{nss-certs}
In Guix müssen Sie dazu ein Paket, das Zertifikate enthält, in das
@code{packages}-Feld der @code{operating-system}-Deklaration des
Betriebssystems hinzufügen (siehe @ref{„operating-system“-Referenz}). Guix
liefert ein solches Paket mit, @code{nss-certs}, was als Teil von Mozillas
„Network Security Services“ angeboten wird.

Beachten Sie, dass es @emph{nicht} zu den @code{%base-packages} gehört, Sie
es also ausdrücklich hinzufügen müssen. Das Verzeichnis
@file{/etc/ssl/certs}, wo die meisten Anwendungen und Bibliotheken ihren
Voreinstellungen entsprechend nach Zertifikaten suchen, verweist auf die
global installierten Zertifikate.

Unprivileged users, including users of Guix on a foreign distro, can also
install their own certificate package in their profile.  A number of
environment variables need to be defined so that applications and libraries
know where to find them.  Namely, the OpenSSL library honors the
@env{SSL_CERT_DIR} and @env{SSL_CERT_FILE} variables.  Some applications add
their own environment variables; for instance, the Git version control
system honors the certificate bundle pointed to by the @env{GIT_SSL_CAINFO}
environment variable.  Thus, you would typically run something like:

@example
guix install nss-certs
export SSL_CERT_DIR="$HOME/.guix-profile/etc/ssl/certs"
export SSL_CERT_FILE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
export GIT_SSL_CAINFO="$SSL_CERT_FILE"
@end example

As another example, R requires the @env{CURL_CA_BUNDLE} environment variable
to point to a certificate bundle, so you would have to run something like
this:

@example
guix install nss-certs
export CURL_CA_BUNDLE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
@end example

Für andere Anwendungen möchten Sie die Namen der benötigten
Umgebungsvariablen vielleicht in deren Dokumentation nachschlagen.


@node Name Service Switch
@section Name Service Switch

@cindex Name Service Switch
@cindex NSS
Das Modul @code{(gnu system nss)} enthält Anbindungen für die Konfiguration
des @dfn{Name Service Switch} (NSS) der libc (siehe @ref{NSS Configuration
File,,, libc, The GNU C Library Reference Manual}). Kurz gesagt ist der NSS
ein Mechanismus, mit dem die libc um neue „Namens“-Auflösungsmethoden für
Systemdatenbanken erweitert werden kann; dazu gehören Rechnernamen (auch
bekannt als „Host“-Namen), Dienstnamen, Benutzerkonten und mehr (siehe
@ref{Name Service Switch, System Databases and Name Service Switch,, libc,
The GNU C Library Reference Manual}).

Die NSS-Konfiguration legt für jede Systemdatenbank fest, mit welcher
Methode der Name nachgeschlagen („aufgelöst“) werden kann und welche
Methoden zusammenhängen — z.B.@: unter welchen Umständen der NSS es mit der
nächsten Methode auf seiner Liste versuchen sollte. Die NSS-Konfiguration
wird im Feld @code{name-service-switch} von
@code{operating-system}-Deklarationen angegeben (siehe @ref{„operating-system“-Referenz, @code{name-service-switch}}).

@cindex nss-mdns
@cindex .local, Rechnernamensauflösung
Zum Beispiel konfigurieren die folgenden Deklarationen den NSS so, dass er
das @uref{https://0pointer.de/lennart/projects/nss-mdns/,
@code{nss-mdns}-Backend} benutzt, wodurch er auf @code{.local} endende
Rechnernamen über Multicast-DNS (mDNS) auflöst:

@lisp
(name-service-switch
   (hosts (list %files    ;zuerst in /etc/hosts nachschlagen

                ;; Wenn das keinen Erfolg hatte, es
                ;; mit 'mdns_minimal' versuchen.
                (name-service
                  (name "mdns_minimal")

                  ;; 'mdns_minimal' ist die Autorität für
                  ;; '.local'. Gibt es not-found ("nicht
                  ;; gefunden") zurück, müssen wir die
                  ;; nächsten Methoden gar nicht erst
                  ;; versuchen.
                  (reaction (lookup-specification
                             (not-found => return))))

                ;; Ansonsten benutzen wir DNS.
                (name-service
                  (name "dns"))

                ;; Ein letzter Versuch mit dem
                ;; "vollständigen" 'mdns'.
                (name-service
                  (name "mdns")))))
@end lisp

Keine Sorge: Die Variable @code{%mdns-host-lookup-nss} (siehe unten) enthält
diese Konfiguration bereits. Statt das alles selst einzutippen, können Sie
sie benutzen, wenn alles, was Sie möchten, eine funktionierende
Namensauflösung für @code{.local}-Rechner ist.

Beachten Sie dabei, dass es zusätzlich zum Festlegen des
@code{name-service-switch} in der @code{operating-system}-Deklaration auch
erforderlich ist, den @code{avahi-service-type} zu benutzen (siehe
@ref{Netzwerkdienste, @code{avahi-service-type}}). Es genügt auch, wenn
Sie die @code{%desktop-services} benutzen, weil er darin enthalten ist
(siehe @ref{Desktop-Dienste}). Dadurch wird @code{nss-mdns} für den Name
Service Cache Daemon nutzbar (siehe @ref{Basisdienste,
@code{nscd-service}}).

Um sich eine lange Konfiguration zu ersparen, können Sie auch einfach die
folgenden Variablen für typische NSS-Konfigurationen benutzen.

@defvr {Scheme-Variable} %default-nss
Die vorgegebene Konfiguration des Name Service Switch als ein
@code{name-service-switch}-Objekt.
@end defvr

@defvr {Scheme-Variable} %mdns-host-lookup-nss
Die Name-Service-Switch-Konfiguration mit Unterstützung für
Rechnernamensauflösung über „Multicast DNS“ (mDNS) für auf @code{.local}
endende Rechnernamen.
@end defvr

Im Folgenden finden Sie eine Referenz, wie eine
Name-Service-Switch-Konfiguration aussehen muss. Sie hat eine direkte
Entsprechung zum Konfigurationsdateiformat der C-Bibliothek, lesen Sie
weitere Informationen also bitte im Handbuch der C-Bibliothek nach (siehe
@ref{NSS Configuration File,,, libc, The GNU C Library Reference
Manual}). Gegenüber dem Konfigurationsdateiformat des libc-NSS bekommen Sie
mit unserer Syntax nicht nur ein warm umklammerndes Gefühl, sondern auch
eine statische Analyse: Wenn Sie Syntax- und Schreibfehler machen, werden
Sie darüber benachrichtigt, sobald Sie @command{guix system} aufrufen.

@deftp {Datentyp} name-service-switch

Der Datentyp, der die Konfiguration des Name Service Switch (NSS) der libc
repräsentiert. Jedes im Folgenden aufgeführte Feld repräsentiert eine der
unterstützten Systemdatenbanken.

@table @code
@item aliases
@itemx ethers
@itemx group
@itemx gshadow
@itemx hosts
@itemx initgroups
@itemx netgroup
@itemx networks
@itemx password
@itemx public-key
@itemx rpc
@itemx services
@itemx shadow
Das sind die Systemdatenbanken, um die sich NSS kümmern kann. Jedes dieser
Felder muss eine Liste aus @code{<name-service>}-Objekten sein (siehe
unten).
@end table
@end deftp

@deftp {Datentyp} name-service

Der einen eigentlichen Namensdienst repräsentierende Datentyp zusammen mit
der zugehörigen Auflösungsaktion.

@table @code
@item name
Eine Zeichenkette, die den Namensdienst bezeichnet (siehe @ref{Services in
the NSS configuration,,, libc, The GNU C Library Reference Manual}).

Beachten Sie, dass hier aufgeführte Namensdienste für den nscd sichtbar sein
müssen. Dazu übergeben Sie im Argument @code{#:name-services} des
@code{nscd-service} die Liste der Pakete, die die entsprechenden
Namensdienste anbieten (siehe @ref{Basisdienste, @code{nscd-service}}).

@item reaction
Eine mit Hilfe des Makros @code{lookup-specification} angegebene Aktion
(siehe @ref{Actions in the NSS configuration,,, libc, The GNU C Library
Reference Manual}). Zum Beispiel:

@lisp
(lookup-specification (unavailable => continue)
                      (success => return))
@end lisp
@end table
@end deftp

@node Initiale RAM-Disk
@section Initiale RAM-Disk

@cindex initrd
@cindex initiale RAM-Disk
Um ihn zu initialisieren (zu „bootstrappen“), wird für den Kernel
Linux-Libre eine @dfn{initiale RAM-Disk} angegeben (kurz @dfn{initrd}). Eine
initrd enthält ein temporäres Wurzeldateisystem sowie ein Skript zur
Initialisierung. Letzteres ist dafür zuständig, das echte Wurzeldateisystem
einzubinden und alle Kernel-Module zu laden, die dafür nötig sein könnten.

Mit dem Feld @code{initrd-modules} einer @code{operating-system}-Deklaration
können Sie angeben, welche Kernel-Module für Linux-libre in der initrd
verfügbar sein müssen. Insbesondere müssen hier die Module aufgeführt
werden, um die Festplatte zu betreiben, auf der sich Ihre Wurzelpartition
befindet — allerdings sollte der vorgegebene Wert der @code{initrd-modules}
in dem meisten Fällen genügen. Wenn Sie aber zum Beispiel das Kernel-Modul
@code{megaraid_sas} zusätzlich zu den vorgegebenen Modulen brauchen, um auf
Ihr Wurzeldateisystem zugreifen zu können, würden Sie das so schreiben:

@lisp
(operating-system
  ;; …
  (initrd-modules (cons "megaraid_sas" %base-initrd-modules)))
@end lisp

@defvr {Scheme-Variable} %base-initrd-modules
Der Vorgabewert für die Liste der Kernel-Module, die in der initrd enthalten
sein sollen.
@end defvr

Wenn Sie noch systemnähere Anpassungen durchführen wollen, können Sie im
Feld @code{initrd} einer @code{operating-system}-Deklaration angeben, was
für eine Art von initrd Sie benutzen möchten. Das Modul @code{(gnu system
linux-initrd)} enthält drei Arten, eine initrd zu erstellen: die abstrakte
Prozedur @code{base-initrd} und die systemnahen Prozeduren @code{raw-initrd}
und @code{expression->initrd}.

Mit der Prozedur @code{base-initrd} sollten Sie die häufigsten
Anwendungszwecke abdecken können. Wenn Sie zum Beispiel ein paar
Kernel-Module zur Boot-Zeit laden lassen möchten, können Sie das
@code{initrd}-Feld auf diese Art definieren:

@lisp
(initrd (lambda (file-systems . rest)
          ;; Eine gewöhnliche initrd, aber das Netzwerk wird
          ;; mit den Parametern initialisiert, die QEMU
          ;; standardmäßig erwartet.
          (apply base-initrd file-systems
                 #:qemu-networking? #t
                 rest)))
@end lisp

Die Prozedur @code{base-initrd} kann auch mit üblichen Anwendungszwecken
umgehen, um das System als QEMU-Gastsystem zu betreiben oder als ein
„Live“-System ohne ein dauerhaft gespeichertes Wurzeldateisystem.

Die Prozedur @code{base-initrd} baut auf der Prozedur @code{raw-initrd}
auf. Anders als @code{base-initrd} hat @code{raw-initrd} keinerlei
Zusatzfunktionalitäten: Es wird kein Versuch unternommen, für die initrd
notwendige Kernel-Module und Pakete automatisch
hinzuzunehmen. @code{raw-initrd} kann zum Beispiel benutzt werden, wenn ein
Nutzer eine eigene Konfiguration des Linux-Kernels verwendet und die
Standard-Kernel-Module, die mit @code{base-initrd} hinzugenommen würden,
nicht verfügbar sind.

Die initiale RAM-Disk, wie sie von @code{base-initrd} oder @code{raw-initrd}
erzeugt wird, richtet sich nach verschiedenen Optionen, die auf der
Kernel-Befehlszeile übergeben werden (also über GRUBs @code{linux}-Befehl
oder die @code{-append}-Befehlszeilenoption von QEMU). Erwähnt werden
sollten:

@table @code
@item --load=@var{boot}
Die initiale RAM-Disk eine Datei @var{boot}, in der ein Scheme-Programm
steht, laden lassen, nachdem das Wurzeldateisystem eingebunden wurde.

Guix übergibt mit dieser Befehlszeilenoption die Kontrolle an ein
Boot-Programm, das die Dienstaktivierungsprogramme ausführt und anschließend
den GNU@tie{}Shepherd startet, das Initialisierungssystem („init“-System)
von Guix System.

@item --root=@var{Wurzel}
Mount @var{root} as the root file system.  @var{root} can be a device name
like @code{/dev/sda1}, a file system label, or a file system UUID.  When
unspecified, the device name from the root file system of the operating
system declaration is used.

@item --system=@var{System}
@file{/run/booted-system} und @file{/run/current-system} auf das
@var{System} zeigen lassen.

@item modprobe.blacklist=@var{Module}…
@cindex Kernel-Module, Sperrliste
@cindex Sperrliste, von Kernel-Modulen
Die initiale RAM-Disk sowie den Befehl @command{modprobe} (aus dem
kmod-Paket) anweisen, das Laden der angegebenen @var{Module} zu
verweigern. Als @var{Module} muss eine kommagetrennte Liste von
Kernel-Modul-Namen angegeben werden — z.B.@: @code{usbkbd,9pnet}.

@item --repl
Eine Lese-Auswerten-Schreiben-Schleife (englisch „Read-Eval-Print Loop“,
kurz REPL) von der initialen RAM-Disk starten, bevor diese die Kernel-Module
zu laden versucht und das Wurzeldateisystem einbindet. Unsere
Marketingabteilung nennt das @dfn{boot-to-Guile}. Der Schemer in Ihnen wird
das lieben. Siehe @ref{Using Guile Interactively,,, guile, GNU Guile
Reference Manual} für mehr Informationen über die REPL von Guile.

@end table

Jetzt wo Sie wissen, was für Funktionalitäten eine durch @code{base-initrd}
und @code{raw-initrd} erzeugte initiale RAM-Disk so haben kann, möchten Sie
vielleicht auch wissen, wie man Sie benutzt und weiter anpasst:

@cindex initrd
@cindex initiale RAM-Disk
@deffn {Scheme-Prozedur} raw-initrd @var{Dateisysteme} @
       [#:linux-modules '()] [#:mapped-devices '()] @ [#:keyboard-layout #f] @
[#:helper-packages '()] [#:qemu-networking? #f] [#:volatile-root? #f] Return
a derivation that builds a raw initrd.  @var{file-systems} is a list of file
systems to be mounted by the initrd, possibly in addition to the root file
system specified on the kernel command line via @option{--root}.
@var{linux-modules} is a list of kernel modules to be loaded at boot time.
@var{mapped-devices} is a list of device mappings to realize before
@var{file-systems} are mounted (@pxref{Zugeordnete Geräte}).
@var{helper-packages} is a list of packages to be copied in the initrd. It
may include @code{e2fsck/static} or other packages needed by the initrd to
check the root file system.

Ist es auf einen wahren Wert gesetzt, dann muss @var{keyboard-layout} eine
Tastaturbelegung als @code{<keyboard-layout>}-Verbundsobjekt angeben, die
die gewünschte Tastaturbelegung für die Konsole bezeichnet. Sie wird
verwendet, noch bevor die Gerätezuordnungen in @var{mapped-devices}
hergestellt werden und bevor die Dateisysteme in @var{file-systems}
eingebunden werden, damit der Anwender dabei die gewollte Tastaturbelegung
beim Eingeben einer Passphrase und bei der Nutzung einer REPL verwenden
kann.

Wenn @var{qemu-networking?} wahr ist, wird eine Netzwerkverbindung mit den
Standard-QEMU-Parametern hergestellt. Wenn @var{virtio?} wahr ist, werden
zusätzliche Kernel-Module geladen, damit die initrd als ein QEMU-Gast
paravirtualisierte Ein-/Ausgabetreiber benutzen kann.

Wenn @var{volatile-root?} wahr ist, ist Schreiben auf das Wurzeldateisystem
möglich, aber Änderungen daran bleiben nicht erhalten.
@end deffn

@deffn {Scheme-Prozedur} base-initrd @var{Dateisysteme} @
       [#:mapped-devices '()] [#:keyboard-layout #f] @ [#:qemu-networking? #f]
[#:volatile-root? #f] @ [#:linux-modules '()] Return as a file-like object a
generic initrd, with kernel modules taken from @var{linux}.
@var{file-systems} is a list of file-systems to be mounted by the initrd,
possibly in addition to the root file system specified on the kernel command
line via @option{--root}.  @var{mapped-devices} is a list of device mappings
to realize before @var{file-systems} are mounted.

Ist es auf einen wahren Wert gesetzt, dann muss @var{keyboard-layout} eine
Tastaturbelegung als @code{<keyboard-layout>}-Verbundsobjekt angeben, die
die gewünschte Tastaturbelegung für die Konsole bezeichnet. Sie wird
verwendet, noch bevor die Gerätezuordnungen in @var{mapped-devices}
hergestellt werden und bevor die Dateisysteme in @var{file-systems}
eingebunden werden, damit der Anwender dabei die gewollte Tastaturbelegung
beim Eingeben einer Passphrase und bei der Nutzung einer REPL verwenden
kann.

@var{qemu-networking?} und @var{volatile-root?} verhalten sich wie bei
@code{raw-initrd}.

In die initrd werden automatisch alle Kernel-Module eingefügt, die für die
unter @var{file-systems} angegebenen Dateisysteme und die angegebenen
Optionen nötig sind. Zusätzliche Kernel-Module können unter den
@var{linux-modules} aufgeführt werden. Diese werden zur initrd hinzugefügt
und zur Boot-Zeit in der Reihenfolge geladen, in der sie angegeben wurden.
@end deffn

Selbstverständlich betten die hier erzeugten und benutzten initrds ein
statisch gebundenes Guile ein und das Initialisierungsprogramm ist ein
Guile-Programm. Dadurch haben wir viel Flexibilität. Die Prozedur
@code{expression->initrd} erstellt eine solche initrd für ein an sie
übergebenes Programm.

@deffn {Scheme-Prozedur} expression->initrd @var{G-Ausdruck} @
       [#:guile %guile-3.0-static-stripped] [#:name "guile-initrd"] Return as a
file-like object a Linux initrd (a gzipped cpio archive)  containing
@var{guile} and that evaluates @var{exp}, a G-expression, upon booting.  All
the derivations referenced by @var{exp} are automatically copied to the
initrd.
@end deffn

@node Bootloader-Konfiguration
@section Bootloader-Konfiguration

@cindex bootloader
@cindex Bootloader

Das Betriebssystem unterstützt mehrere Bootloader. Der gewünschte Bootloader
wird mit der @code{bootloader-configuration}-Deklaration konfiguriert. Alle
Felder dieser Struktur sind für alle Bootloader gleich außer dem einen Feld
@code{bootloader}, das angibt, welcher Bootloader konfiguriert und
installiert werden soll.

Manche der Bootloader setzen nicht alle Felder einer
@code{bootloader-configuration} um. Zum Beispiel ignoriert der
extlinux-Bootloader das @code{theme}-Feld, weil er keine eigenen Themen
unterstützt.

@deftp {Datentyp} bootloader-configuration
Der Typ der Deklaration einer Bootloader-Konfiguration.

@table @asis

@item @code{bootloader}
@cindex EFI, Bootloader
@cindex UEFI, Bootloader
@cindex BIOS, Bootloader
Der zu benutzende Bootloader als ein @code{bootloader}-Objekt. Zur Zeit
werden @code{grub-bootloader}, @code{grub-efi-bootloader},
@code{extlinux-bootloader} und @code{u-boot-bootloader} unterstützt.

@vindex grub-efi-bootloader
@code{grub-efi-bootloader} macht es möglich, auf modernen Systemen mit
@dfn{Unified Extensible Firmware Interface} (UEFI) zu booten. Sie sollten
das hier benutzen, wenn im Installationsabbild ein Verzeichnis
@file{/sys/firmware/efi} vorhanden ist, wenn Sie davon auf Ihrem System
booten.

@vindex grub-bootloader
Mit @code{grub-bootloader} können Sie vor allem auf Intel-basierten
Maschinen im alten „Legacy“-BIOS-Modus booten.

@cindex ARM, Bootloader
@cindex AArch64, Bootloader
Verfügbare Bootloader werden in den Modulen @code{(gnu bootloader …)}
beschrieben. Insbesondere enthält @code{(gnu bootloader u-boot)}
Definitionen für eine Vielzahl von ARM- und AArch64-Systemen, die den
@uref{https://www.denx.de/wiki/U-Boot/, U-Boot-Bootloader} benutzen.

@item @code{target}
Eine Zeichenkette, die angibt, auf welches Ziel der Bootloader installiert
werden soll.

Was das bedeutet, hängt vom jeweiligen Bootloader ab. Für
@code{grub-bootloader} sollte hier zum Beispiel ein Gerätename angegeben
werden, der vom @command{installer}-Befehl des Bootloaders verstanden wird,
etwa @code{/dev/sda} oder @code{(hd0)} (siehe @ref{Invoking grub-install,,,
grub, GNU GRUB Manual}). Für @code{grub-efi-bootloader} sollte der
Einhängepunkt des EFI-Dateisystems angegeben werden, in der Regel
@file{/boot/efi}.

@item @code{menu-entries} (Vorgabe: @code{()})
Eine möglicherweise leere Liste von @code{menu-entry}-Objekten (siehe
unten), die für Menüeinträge stehen, die im Bootloader-Menü auftauchen
sollen, zusätzlich zum aktuellen Systemeintrag und dem auf vorherige
Systemgenerationen verweisenden Eintrag.

@item @code{default-entry} (Vorgabe: @code{0})
Die Position des standardmäßig ausgewählten Bootmenü-Eintrags. An Position 0
steht der Eintrag der aktuellen Systemgeneration.

@item @code{timeout} (Vorgabe: @code{5})
Wieviele Sekunden lang im Menü auf eine Tastatureingabe gewartet wird, bevor
gebootet wird. 0 steht für sofortiges Booten, für -1 wird ohne
Zeitbeschränkung gewartet.

@cindex Tastaturbelegung, beim Bootloader
@item @code{keyboard-layout} (Vorgabe: @code{#f})
Wenn dies auf @code{#f} gesetzt ist, verwendet das Menü des Bootloaders
(falls vorhanden) die Vorgabe-Tastaturbelegung, normalerweise
US@tie{}English („qwerty“).

Andernfalls muss es ein @code{keyboard-layout}-Objekt sein (siehe
@ref{Tastaturbelegung}).

@quotation Anmerkung
Dieses Feld wird derzeit von Bootloadern außer @code{grub} und
@code{grub-efi} ignoriert.
@end quotation

@item @code{theme} (Vorgabe: @var{#f})
Ein Objekt für das im Bootloader anzuzeigende Thema. Wird kein Thema
angegeben, benutzen manche Bootloader vielleicht ein voreingestelltes Thema;
GRUB zumindest macht es so.

@item @code{terminal-outputs} (Vorgabe: @code{'(gfxterm)})
Die Ausgabeterminals, die für das Boot-Menü des Bootloaders benutzt werden,
als eine Liste von Symbolen. GRUB akzeptiert hier diese Werte:
@code{console}, @code{serial}, @code{serial_@{0–3@}}, @code{gfxterm},
@code{vga_text}, @code{mda_text}, @code{morse} und @code{pkmodem}. Dieses
Feld entspricht der GRUB-Variablen @code{GRUB_TERMINAL_OUTPUT} (siehe
@ref{Simple configuration,,, grub,Handbuch von GNU GRUB}).

@item @code{terminal-inputs} (Vorgabe: @code{'()})
Die Eingabeterminals, die für das Boot-Menü des Bootloaders benutzt werden,
als eine Liste von Symbolen. GRUB verwendet hier das zur Laufzeit bestimmte
Standardterminal. GRUB akzeptiert sonst diese Werte: @code{console},
@code{serial}, @code{serial_@{0-3@}}, @code{at_keyboard} und
@code{usb_keyboard}. Dieses Feld entspricht der GRUB-Variablen
@code{GRUB_TERMINAL_INPUT} (siehe @ref{Simple configuration,,, grub,Handbuch
von GNU GRUB}).

@item @code{serial-unit} (Vorgabe: @code{#f})
Die serielle Einheit, die der Bootloader benutzt, als eine ganze Zahl
zwischen 0 und 3, einschließlich. Für GRUB wird sie automatisch zur Laufzeit
ausgewählt; derzeit wählt GRUB die 0 aus, die COM1 entspricht (siehe
@ref{Serial terminal,,, grub,Handbuch von GNU GRUB}).

@item @code{serial-speed} (Vorgabe: @code{#f})
Die Geschwindigkeit der seriellen Schnittstelle als eine ganze Zahl. GRUB
bestimmt den Wert standardmäßig zur Laufzeit; derzeit wählt GRUB
9600@tie{}bps (siehe @ref{Serial terminal,,, grub,Handbuch von GNU GRUB}).
@end table

@end deftp

@cindex Dual-Boot
@cindex Bootmenü
Sollten Sie zusätzliche Bootmenü-Einträge über das oben beschriebene
@code{menu-entries}-Feld hinzufügen möchten, müssen Sie diese mit der
@code{menu-entry}-Form erzeugen. Stellen Sie sich zum Beispiel vor, Sie
wollten noch eine andere Distribution booten können (schwer vorstellbar!),
dann könnten Sie einen Menüeintrag wie den Folgenden definieren:

@lisp
(menu-entry
  (label "Die _andere_ Distribution")
  (linux "/boot/old/vmlinux-2.6.32")
  (linux-arguments '("root=/dev/sda2"))
  (initrd "/boot/old/initrd"))
@end lisp

Details finden Sie unten.

@deftp {Datentyp} menu-entry
Der Typ eines Eintrags im Bootloadermenü.

@table @asis

@item @code{label}
Die Beschriftung, die im Menü gezeigt werden soll — z.B.@: @code{"GNU"}.

@item @code{linux}
Das Linux-Kernel-Abbild, was gebootet werden soll, zum Beispiel:

@lisp
(file-append linux-libre "/bzImage")
@end lisp

Für GRUB kann hier auch ein Gerät ausdrücklich zum Dateipfad angegeben
werden, unter Verwendung von GRUBs Konventionen zur Gerätebenennung (siehe
@ref{Naming convention,,, grub, Handbuch von GNU GRUB}), zum Beispiel:

@example
"(hd0,msdos1)/boot/vmlinuz"
@end example

Wenn das Gerät auf diese Weise ausdrücklich angegeben wird, wird das
@code{device}-Feld gänzlich ignoriert.

@item @code{linux-arguments} (Vorgabe: @code{()})
Die Liste zusätzlicher Linux-Kernel-Befehlszeilenargumente — z.B.@:
@code{("console=ttyS0")}.

@item @code{initrd}
Ein G-Ausdruck oder eine Zeichenkette, die den Dateinamen der initialen
RAM-Disk angibt, die benutzt werden soll (siehe @ref{G-Ausdrücke}).
@item @code{device} (Vorgabe: @code{#f})
Das Gerät, auf dem Kernel und initrd zu finden sind — d.h.@: bei GRUB die
Wurzel (@dfn{root}) dieses Menüeintrags (siehe @ref{root,,, grub, Handbuch
von GNU GRUB}).

Dies kann eine Dateisystembezeichnung (als Zeichenkette), eine
Dateisystem-UUID (als Bytevektor, siehe @ref{Dateisysteme}) oder @code{#f}
sein, im letzten Fall wird der Bootloader auf dem Gerät suchen, das die vom
@code{linux}-Feld benannte Datei enthält (siehe @ref{search,,, grub,
Handbuch von GNU GRUB}). Ein vom Betriebssystem vergebener Gerätename wie
@file{/dev/sda1} ist aber @emph{nicht} erlaubt.

@end table
@end deftp

@cindex HDPI
@cindex HiDPI
@cindex Auflösung
@c FIXME: Write documentation once it's stable.
Zur Zeit lässt nur GRUB sein Aussehen durch Themen anpassen. GRUB-Themen
werden mit der @code{grub-theme}-Form erzeugt, die hier noch nicht
vollständig dokumentiert ist.

@deftp {Datentyp} grub-theme
Der Datentyp, der die Konfiguration des GRUB-Themas repräsentiert.

@table @asis
@item @code{gfxmode} (Vorgabe: @code{'("auto")})
Welcher @code{gfxmode} für GRUB eingestellt werden soll (als eine Liste von
Zeichenketten mit Bildschirmauflösungen, siehe @ref{gfxmode,,, grub,
Handbuch von GNU GRUB}).
@end table
@end deftp

@deffn {Scheme Procedure} grub-theme
Return the default GRUB theme used by the operating system if no
@code{theme} field is specified in @code{bootloader-configuration} record.

Es wird von einem feschen Hintergrundbild begleitet, das die Logos von GNU
und Guix zeigt.
@end deffn

Um zum Beispiel eine andere Auflösung als vorgegeben zu verwenden, würden
Sie so etwas schreiben:

@lisp
(bootloader
 (bootloader-configuration
 ;; @dots{}
 (theme (grub-theme
         (inherit (grub-theme))
         (gfxmode '("1024x786x32" "auto"))))))
@end lisp

@node Aufruf von guix system
@section @code{guix system} aufrufen

Sobald Sie eine Betriebssystemdeklaration geschrieben haben, wie wir sie in
den vorangehenden Abschnitten gesehen haben, kann diese @dfn{instanziiert}
werden, indem Sie den Befehl @command{guix system}
aufrufen. Zusammengefasst:

@example
guix system @var{Optionen}…@: @var{Aktion} @var{Datei}
@end example

@var{Datei} muss der Name einer Datei sein, in der eine
Betriebssystemdeklaration als @code{operating-system}-Objekt
steht. @var{Aktion} gibt an, wie das Betriebssystem instanziiert
wird. Derzeit werden folgende Werte dafür unterstützt:

@table @code
@item search
Verfügbare Diensttypendefinitionen anzeigen, die zum angegebenen regulären
Ausdruck passen, sortiert nach Relevanz:

@cindex HDPI
@cindex HiDPI
@cindex Auflösung
@example
$ guix system search console
name: console-fonts
location: gnu/services/base.scm:806:2
extends: shepherd-root
description: Install the given fonts on the specified ttys (fonts are per
+ virtual console on GNU/Linux).  The value of this service is a list of
+ tty/font pairs.  The font can be the name of a font provided by the `kbd'
+ package or any valid argument to `setfont', as in this example:
+
+      '(("tty1" . "LatGrkCyr-8x16")
+        ("tty2" . (file-append
+                      font-tamzen
+                      "/share/kbd/consolefonts/TamzenForPowerline10x20.psf"))
+        ("tty3" . (file-append
+                      font-terminus
+                      "/share/consolefonts/ter-132n"))) ; for HDPI
relevance: 9

name: mingetty
location: gnu/services/base.scm:1190:2
extends: shepherd-root
description: Provide console login using the `mingetty' program.
relevance: 2

name: login
location: gnu/services/base.scm:860:2
extends: pam
description: Provide a console log-in service as specified by its
+ configuration value, a `login-configuration' object.
relevance: 2

…
@end example

Wie auch bei @command{guix package --search} wird das Ergebnis im
@code{recutils}-Format geliefert, so dass es leicht ist, die Ausgabe zu
filtern (siehe @ref{Top, GNU recutils databases,, recutils, Handbuch von GNU
recutils}).

@item reconfigure
Das in der @var{Datei} beschriebene Betriebssystem erstellen, aktivieren und
zu ihm wechseln@footnote{Diese Aktion (und die dazu ähnlichen Aktionen
@code{switch-generation} und @code{roll-back}) sind nur auf Systemen
nutzbar, auf denen „Guix System“ bereits läuft.}.

@quotation Anmerkung
@c The paragraph below refers to the problem discussed at
@c <https://lists.gnu.org/archive/html/guix-devel/2014-08/msg00057.html>.
Es ist sehr zu empfehlen, @command{guix pull} einmal auszuführen, bevor Sie
@command{guix system reconfigure} zum ersten Mal aufrufen (siehe
@ref{Aufruf von guix pull}). Wenn Sie das nicht tun, könnten Sie nach dem
Abschluss von @command{reconfigure} eine ältere Version von Guix vorfinden,
als Sie vorher hatten.
@end quotation

Dieser Befehl setzt die in der @var{Datei} festgelegte Konfiguration
vollständig um: Benutzerkonten, Systemdienste, die Liste globaler Pakete,
setuid-Programme und so weiter. Der Befehl startet die in der @var{Datei}
angegebenen Systemdienste, die aktuell nicht laufen; bei aktuell laufenden
Diensten wird sichergestellt, dass sie aktualisiert werden, sobald sie das
nächste Mal angehalten wurden (z.B.@: durch @code{herd stop X} oder
@code{herd restart X}).

Dieser Befehl erzeugt eine neue Generation, deren Nummer (wie @command{guix
system list-generations} sie anzeigt) um eins größer als die der aktuellen
Generation ist. Wenn die so nummerierte Generation bereits existiert, wird
sie überschrieben. Dieses Verhalten entspricht dem von @command{guix
package} (siehe @ref{Aufruf von guix package}).

Des Weiteren wird für den Bootloader ein Menüeintrag für die neue
Betriebssystemkonfiguration hinzugefügt, außer die Befehlszeilenoption
@option{--no-bootloader} wurde übergeben. Bei GRUB werden Einträge für
ältere Konfigurationen in ein Untermenü verschoben, so dass Sie auch eine
ältere Systemgeneration beim Booten noch hochfahren können, falls es
notwendig wird.

@cindex Provenienzverfolgung, des Betriebssystems
Nach Abschluss wird das neue System unter @file{/run/current-system}
verfügbar gemacht. Das Verzeichnis enthält @dfn{Provenienz-Metadaten}: Dazu
gehören die Liste der Kanäle, die benutzt wurden (siehe @ref{Kanäle}) und
die @var{Datei} selbst, wenn sie verfügbar ist. Diese Informationen sind
nützlich, falls Sie später inspizieren möchten, wie diese spezielle
Generation erstellt wurde.

Tatsächlich können Sie, wenn wir annehmen, dass die @var{Datei} eigenständig
ist, später die Generation @var{n} Ihres Betriebssystems neu erstellen,
indem Sie dies ausführen:

@example
guix time-machine \
  -C /var/guix/profiles/system-@var{n}-link/channels.scm -- \
  system reconfigure \
  /var/guix/profiles/system-@var{n}-link/configuration.scm
@end example

Sie können sich das als eine Art eingebaute Versionskontrolle vorstellen!
Ihr System ist nicht nur ein binäres Erzeugnis: @emph{Es enthält seinen
eigenen Quellcode}. Siehe @ref{Service-Referenz,
@code{provenance-service-type}} für mehr Informationen zur
Provenienzverfolgung.

@item switch-generation
@cindex Generationen
Zu einer bestehenden Systemgeneration wechseln. Diese Aktion wechselt das
Systemprofil atomar auf die angegebene Systemgeneration. Hiermit werden auch
die bestehenden Menüeinträge des Bootloaders umgeordnet. Der Menüeintrag für
die angegebene Systemgeneration wird voreingestellt und die Einträge der
anderen Generationen werden in ein Untermenü verschoben, sofern der
verwendete Bootloader dies unterstützt. Das nächste Mal, wenn das System
gestartet wird, wird die hier angegebene Systemgeneration hochgefahren.

Der Bootloader selbst wird durch diesen Befehl @emph{nicht} neu
installiert. Es wird also lediglich der bereits installierte Bootloader mit
einer neuen Konfigurationsdatei benutzt werden.

Die Zielgeneration kann ausdrücklich über ihre Generationsnummer angegeben
werden. Zum Beispiel würde folgender Aufruf einen Wechsel zur
Systemgeneration 7 bewirken:

@example
guix system switch-generation 7
@end example

Die Zielgeneration kann auch relativ zur aktuellen Generation angegeben
werden, in der Form @code{+N} oder @code{-N}, wobei @code{+3} zum Beispiel
„3 Generationen weiter als die aktuelle Generation“ bedeuten würde und
@code{-1} „1 Generation vor der aktuellen Generation“ hieße. Wenn Sie einen
negativen Wert wie @code{-1} angeben, müssen Sie @code{--} der
Befehlszeilenoption voranstellen, damit die negative Zahl nicht selbst als
Befehlszeilenoption aufgefasst wird. Zum Beispiel:

@example
guix system switch-generation -- -1
@end example

Zur Zeit bewirkt ein Aufruf dieser Aktion @emph{nur} einen Wechsel des
Systemprofils auf eine bereits existierende Generation und ein Umordnen der
Bootloader-Menüeinträge. Um die Ziel-Systemgeneration aber tatsächlich zu
benutzen, müssen Sie Ihr System neu hochfahren, nachdem Sie diese Aktion
ausgeführt haben. In einer zukünftigen Version von Guix wird diese Aktion
einmal dieselben Dinge tun, wie @command{reconfigure}, also etwa Dienste
aktivieren und deaktivieren.

Diese Aktion schlägt fehl, wenn die angegebene Generation nicht existiert.

@item roll-back
@cindex rücksetzen
Zur vorhergehenden Systemgeneration wechseln. Wenn das System das nächste
Mal hochgefahren wird, wird es die vorhergehende Systemgeneration
benutzen. Dies ist die Umkehrung von @command{reconfigure} und tut genau
dasselbe, wie @command{switch-generation} mit dem Argument @code{-1}
aufzurufen.

Wie auch bei @command{switch-generation} müssen Sie derzeit, nachdem Sie
diese Aktion aufgerufen haben, Ihr System neu starten, um die vorhergehende
Systemgeneration auch tatsächlich zu benutzen.

@item delete-generations
@cindex Löschen von Systemgenerationen
@cindex Platz sparen
Systemgenerationen löschen, wodurch diese zu Kandidaten für den Müllsammler
werden (siehe @ref{Aufruf von guix gc} für Informationen, wie Sie den
„Müllsammler“ laufen lassen).

This works in the same way as @samp{guix package --delete-generations}
(@pxref{Aufruf von guix package, @option{--delete-generations}}).  With no
arguments, all system generations but the current one are deleted:

@example
guix system delete-generations
@end example

Sie können auch eine Auswahl treffen, welche Generationen Sie löschen
möchten. Das folgende Beispiel hat die Löschung aller Systemgenerationen zur
Folge, die älter als zwei Monate sind:

@example
guix system delete-generations 2m
@end example

Wenn Sie diesen Befehl ausführen, wird automatisch der Bootloader mit einer
aktualisierten Liste von Menüeinträgen neu erstellt — z.B.@: werden im
Untermenü für die „alten Generationen“ in GRUB die gelöschten Generationen
nicht mehr aufgeführt.

@item build
Die Ableitung des Betriebssystems erstellen, einschließlich aller
Konfigurationsdateien und Programme, die zum Booten und Starten benötigt
werden. Diese Aktion installiert jedoch nichts davon.

@item init
In das angegebene Verzeichnis alle Dateien einfügen, um das in der
@var{Datei} angegebene Betriebssystem starten zu können. Dies ist nützlich
bei erstmaligen Installationen von „Guix System“. Zum Beispiel:

@example
guix system init my-os-config.scm /mnt
@end example

Hiermit werden alle Store-Objekte nach @file{/mnt} kopiert, die von der in
@file{my-os-config.scm} angegebenen Konfiguration vorausgesetzt werden. Dazu
gehören Konfigurationsdateien, Pakete und so weiter. Auch andere essenzielle
Dateien, die auf dem System vorhanden sein müssen, damit es richtig
funktioniert, werden erzeugt — z.B.@: die Verzeichnisse @file{/etc},
@file{/var} und @file{/run} und die Datei @file{/bin/sh}.

Dieser Befehl installiert auch den Bootloader auf dem in @file{my-os-config}
angegebenen Ziel, außer die Befehlszeilenoption @option{--no-bootloader}
wurde übergeben.

@item vm
@cindex virtuelle Maschine
@cindex VM
@anchor{guix system vm}
Eine virtuelle Maschine (VM) erstellen, die das in der @var{Datei}
deklarierte Betriebssystem enthält, und ein Skript liefern, das diese
virtuelle Maschine startet.

@quotation Anmerkung
Die Aktion @code{vm} sowie solche, die weiter unten genannt werden, können
KVM-Unterstützung im Kernel Linux-libre ausnutzen. Insbesondere sollte, wenn
die Maschine Hardware-Virtualisierung unterstützt, das entsprechende
KVM-Kernelmodul geladen sein und das Gerät @file{/dev/kvm} muss dann
existieren und dem Benutzer und den Erstellungsbenutzern des Daemons müssen
Berechtigungen zum Lesen und Schreiben darauf gegeben werden (siehe
@ref{Einrichten der Erstellungsumgebung}).
@end quotation

An das Skript übergebene Argumente werden an QEMU weitergereicht, wie Sie am
folgenden Beispiel sehen können. Damit würde eine Netzwerkverbindung
aktiviert und 1@tie{}GiB an RAM für die emulierte Maschine angefragt:

@example
$ /gnu/store/…-run-vm.sh -m 1024 -smp 2 -net user,model=virtio-net-pci
@end example

Die virtuelle Maschine verwendet denselben Store wie das Wirtssystem.

Additional file systems can be shared between the host and the VM using the
@option{--share} and @option{--expose} command-line options: the former
specifies a directory to be shared with write access, while the latter
provides read-only access to the shared directory.

Im folgenden Beispiel wird eine virtuelle Maschine erzeugt, die auf das
Persönliche Verzeichnis des Benutzers nur Lesezugriff hat, wo das
Verzeichnis @file{/austausch} aber mit Lese- und Schreibzugriff dem
Verzeichnis @file{$HOME/tmp} auf dem Wirtssystem zugeordnet wurde:

@example
guix system vm my-config.scm \
   --expose=$HOME --share=$HOME/tmp=/austausch
@end example

Für GNU/Linux ist das vorgegebene Verhalten, direkt in den Kernel zu booten,
wodurch nur ein sehr winziges „Disk-Image“ (eine Datei mit einem Abbild des
Plattenspeichers der virtuellen Maschine) für das Wurzeldateisystem nötig
wird, weil der Store des Wirtssystems davon eingebunden werden kann.

The @option{--full-boot} option forces a complete boot sequence, starting
with the bootloader.  This requires more disk space since a root image
containing at least the kernel, initrd, and bootloader data files must be
created.  The @option{--image-size} option can be used to specify the size
of the image.

@cindex System-Disk-Images, Erstellung in verschiedenen Formaten
@cindex Erzeugen von System-Disk-Images in verschiedenen Formaten
@item vm-image
@itemx disk-image
@itemx docker-image
Ein eigenständiges Disk-Image für eine virtuelle Maschine, ein allgemeines
Disk-Image oder ein Docker-Abbild für das in der @var{Datei} deklarierte
Betriebssystem liefern. Das vorgegebene Verhalten von @command{guix system}
ist, die Größe des Images zu schätzen, die zum Speichern des Systems
benötigt wird, aber Sie können mit der Befehlszeilenoption
@option{--image-size} selbst Ihre gewünschte Größe
bestimmen. Docker-Abbilder werden aber so erstellt, dass sie gerade nur das
enthalten, was für sie nötig ist, daher wird die Befehlszeilenoption
@option{--image-size} im Fall von @code{docker-image} ignoriert.

Sie können den Dateisystemtyp für das Wurzeldateisystem mit der
Befehlszeilenoption @option{--file-system-type} festlegen. Vorgegeben ist,
@code{ext4} zu verwenden.

Wenn Sie ein @code{vm-image} anfordern, ist das gelieferte Disk-Image im
qcow2-Format, was vom QEMU-Emulator effizient benutzt werden kann. Im
Abschnitt @ref{Guix in einer VM starten} finden Sie mehr Informationen, wie Sie
das Disk-Image in einer virtuellen Maschine laufen lassen.

Wenn Sie ein @code{disk-image} anfordern, wird ein rohes Disk-Image
hergestellt; es kann zum Beispiel auf einen USB-Stick kopiert
werden. Angenommen @code{/dev/sdc} ist das dem USB-Stick entsprechende
Gerät, dann kann das Disk-Image mit dem folgenden Befehls darauf kopiert
werden:

@example
# dd if=$(guix system disk-image my-os.scm) of=/dev/sdc
@end example

Wenn Sie ein @code{docker-image} anfordern, wird ein Abbild für Docker
hergestellt. Guix erstellt das Abbild von Grund auf und @emph{nicht} aus
einem vorerstellten Docker-Basisabbild heraus, daher enthält es @emph{exakt}
das, was Sie in der Konfigurationsdatei für das Betriebssystem angegeben
haben. Sie können das Abbild dann wie folgt laden und einen Docker-Container
damit erzeugen:

@example
image_id="`docker load < guix-system-docker-image.tar.gz`"
container_id="`docker create $image_id`"
docker start $container_id
@end example

Dieser Befehl startet einen neuen Docker-Container aus dem angegebenen
Abbild. Damit wird das Guix-System auf die normale Weise hochgefahren,
d.h.@: zunächst werden alle Dienste gestartet, die Sie in der Konfiguration
des Betriebssystems angegeben haben. Sie können eine interaktive Shell in
dieser isolierten Umgebung bekommen, indem Sie @command{docker exec}
benutzen:

@example
docker exec -ti $container_id /run/current-system/profile/bin/bash --login
@end example

Je nachdem, was Sie im Docker-Container ausführen, kann es nötig sein, dass
Sie ihn mit weitergehenden Berechtigungen ausstatten. Wenn Sie zum Beispiel
Software mit Guix innerhalb des Docker-Containers erstellen wollen, müssen
Sie an @code{docker create} die Befehlszeilenoption @option{--privileged}
übergeben.

Last, the @option{--network} option applies to @command{guix system
docker-image}: it produces an image where network is supposedly shared with
the host, and thus without services like nscd or NetworkManager.

@item container
Liefert ein Skript, um das in der @var{Datei} deklarierte Betriebssystem in
einem Container auszuführen. Mit Container wird hier eine Reihe
ressourcenschonender Isolierungsmechanismen im Kernel Linux-libre
bezeichnet. Container beanspruchen wesentlich weniger Ressourcen als
vollumfängliche virtuelle Maschinen, weil der Kernel, Bibliotheken in
gemeinsam nutzbaren Objektdateien („Shared Objects“) sowie andere Ressourcen
mit dem Wirtssystem geteilt werden können. Damit ist also eine „dünnere“
Isolierung möglich.

Zur Zeit muss das Skript als Administratornutzer „root“ ausgeführt werden,
damit darin mehr als nur ein einzelner Benutzer und eine Benutzergruppe
unterstützt wird. Der Container teilt seinen Store mit dem Wirtssystem.

Wie bei der Aktion @code{vm} (siehe @ref{guix system vm}) können zusätzlich
weitere Dateisysteme zwischen Wirt und Container geteilt werden, indem man
die Befehlszeilenoptionen @option{--share} und @option{--expose} verwendet:

@example
guix system container my-config.scm \
   --expose=$HOME --share=$HOME/tmp=/austausch
@end example

@quotation Anmerkung
Diese Befehlszeilenoption funktioniert nur mit Linux-libre 3.19 oder neuer.
@end quotation

@end table

Unter den @var{Optionen} können beliebige gemeinsame Erstellungsoptionen
aufgeführt werden (siehe @ref{Gemeinsame Erstellungsoptionen}). Des Weiteren kann als
@var{Optionen} Folgendes angegeben werden:

@table @option
@item --expression=@var{Ausdruck}
@itemx -e @var{Ausdruck}
Als Konfiguration des Betriebssystems das „operating-system“ betrachten, zu
dem der @var{Ausdruck} ausgewertet wird. Dies ist eine Alternative dazu, die
Konfiguration in einer Datei festzulegen. Hiermit wird auch das
Installationsabbild des Guix-Systems erstellt, siehe @ref{Ein Abbild zur Installation erstellen}).

@item --system=@var{System}
@itemx -s @var{System}
Versuchen, für das angegebene @var{System} statt für denselben Systemtyp wie
auf dem Wirtssystem zu erstellen. Dies funktioniert wie bei @command{guix
build} (siehe @ref{Aufruf von guix build}).

@item --derivation
@itemx -d
Liefert den Namen der Ableitungsdatei für das angegebene Betriebssystem,
ohne dazu etwas zu erstellen.

@cindex Provenienzverfolgung, des Betriebssystems
@item --save-provenance
Wie zuvor erläutert, speichern @command{guix system init} und @command{guix
system reconfigure} Provenienzinformationen immer über einen dedizierten
Dienst (siehe @ref{Service-Referenz,
@code{provenance-service-type}}). Andere Befehle tun das nach Voreinstellung
jedoch @emph{nicht}. Wenn Sie zum Beispiel ein Abbild für eine virtuelle
Maschine mitsamt Provenienzinformationen erzeugen möchten, können Sie dies
ausführen:

@example
guix system vm-image --save-provenance config.scm
@end example

Auf diese Weise wird im erzeugten Abbild in Prinzip „sein eigener Quellcode
eingebettet“, in Form von Metadaten in @file{/run/current-system}. Mit
diesen Informationen kann man das Abbild neu erzeugen, um sicherzugehen,
dass es tatsächlich das enthält, was davon behauptet wird. Man könnte damit
auch eine Abwandlung des Abbilds erzeugen.

@item --file-system-type=@var{Typ}
@itemx -t @var{Typ}
Für die Aktion @code{disk-image} wird hiermit ein Dateisystem des
angegebenen @var{Typ}s im Abbild bzw. Disk-Image erzeugt.

Wird diese Befehlszeilenoption nicht angegeben, so benutzt @command{guix
system} als Dateisystemtyp @code{ext4}.

@cindex ISO-9660-Format
@cindex CD-Abbild-Format
@cindex DVD-Abbild-Format
@option{--file-system-type=iso9660} produces an ISO-9660 image, suitable for
burning on CDs and DVDs.

@item --image-size=@var{Größe}
Für die Aktionen @code{vm-image} und @code{disk-image} wird hiermit
festgelegt, dass ein Abbild der angegebenen @var{Größe} erstellt werden
soll. Die @var{Größe} kann als Zahl die Anzahl Bytes angeben oder mit einer
Einheit als Suffix versehen werden (siehe @ref{Block size, size
specifications,, coreutils, GNU Coreutils}).

Wird keine solche Befehlszeilenoption angegeben, berechnet @command{guix
system} eine Schätzung der Abbildgröße anhand der Größe des in der
@var{Datei} deklarierten Systems.

@item --network
@itemx -N
Für die Aktion @code{container} dürfen isolierte Umgebungen (auch bekannt
als „Container“) auf das Wirtsnetzwerk zugreifen, d.h.@: es wird kein
Netzwerknamensraum für sie erzeugt.

@item --root=@var{Datei}
@itemx -r @var{Datei}
Die @var{Datei} zu einer symbolischen Verknüpfung auf das Ergebnis machen
und als Müllsammlerwurzel registrieren.

@item --skip-checks
Die Konfiguration @emph{nicht} vor der Installation zur Sicherheit auf
Fehler prüfen.

Das vorgegebene Verhalten von @command{guix system init} und @command{guix
system reconfigure} sieht vor, die Konfiguration zur Sicherheit auf Fehler
hin zu überprüfen, die ihr Autor übersehen haben könnte: Es wird
sichergestellt, dass die in der @code{operating-system}-Deklaration
erwähnten Dateisysteme tatsächlich existieren (siehe @ref{Dateisysteme}) und
dass alle Linux-Kernelmodule, die beim Booten benötigt werden könnten, auch
im @code{initrd-modules}-Feld aufgeführt sind (siehe @ref{Initiale RAM-Disk}). Mit dieser Befehlszeilenoption werden diese Tests allesamt
übersprungen.

@cindex on-error
@cindex on-error-Strategie
@cindex Fehlerstrategie
@item --on-error=@var{Strategie}
Beim Auftreten eines Fehlers beim Einlesen der @var{Datei} die angegebene
@var{Strategie} verfolgen. Als @var{Strategie} dient eine der Folgenden:

@table @code
@item nothing-special
Nichts besonderes; der Fehler wird kurz gemeldet und der Vorgang
abgebrochen. Dies ist die vorgegebene Strategie.

@item backtrace
Ebenso, aber zusätzlich wird eine Rückverfolgung des Fehlers (ein
„Backtrace“) angezeigt.

@item debug
Nach dem Melden des Fehlers wird der Debugger von Guile zur Fehlersuche
gestartet. Von dort können Sie Befehle ausführen, zum Beispiel können Sie
sich mit @code{,bt} eine Rückverfolgung („Backtrace“) anzeigen lassen und
mit @code{,locals} die Werte lokaler Variabler anzeigen lassen. Im
Allgemeinen können Sie mit Befehlen den Zustand des Programms
inspizieren. Siehe @ref{Debug Commands,,, guile, GNU Guile Reference Manual}
für eine Liste verfügbarer Befehle zur Fehlersuche.
@end table
@end table

Sobald Sie Ihre Guix-Installation erstellt, konfiguriert, neu konfiguriert
und nochmals neu konfiguriert haben, finden Sie es vielleicht hilfreich,
sich die auf der Platte verfügbaren — und im Bootmenü des Bootloaders
auswählbaren — Systemgenerationen auflisten zu lassen:

@table @code

@item describe
Die aktuelle Systemgeneration beschreiben: ihren Dateinamen, den Kernel und
den benutzten Bootloader etc.@: sowie Provenienzinformationen, falls
verfügbar.

@item list-generations
Eine für Menschen verständliche Zusammenfassung jeder auf der Platte
verfügbaren Generation des Betriebssystems ausgeben. Dies ähnelt der
Befehlszeilenoption @option{--list-generations} von @command{guix package}
(siehe @ref{Aufruf von guix package}).

Optional kann ein Muster angegeben werden, was dieselbe Syntax wie
@command{guix package --list-generations} benutzt, um damit die Liste
anzuzeigender Generationen einzuschränken. Zum Beispiel zeigt der folgende
Befehl Generationen an, die bis zu 10 Tage alt sind:

@example
$ guix system list-generations 10d
@end example

@end table

Der Befehl @command{guix system} hat sogar noch mehr zu bieten! Mit
folgenden Unterbefehlen wird Ihnen visualisiert, wie Ihre Systemdienste
voneinander abhängen:

@anchor{system-extension-graph}
@table @code

@item extension-graph
Emit in Dot/Graphviz format to standard output the @dfn{service extension
graph} of the operating system defined in @var{file} (@pxref{Dienstkompositionen}, for more information on service extensions).

Der Befehl:

@example
$ guix system extension-graph @var{file} | xdot -
@end example

shows the extension relations among services.

@anchor{system-shepherd-graph}
@item shepherd-graph
Im Dot-/Graphviz-Format auf die Standardausgabe den
@dfn{Abhängigkeitsgraphen} der Shepherd-Dienste des in der @var{Datei}
definierten Betriebssystems ausgeben. Siehe @ref{Shepherd-Dienste} für mehr
Informationen sowie einen Beispielgraphen.

@end table

@node Aufruf von guix deploy
@section @command{guix deploy} aufrufen

Wir haben bereits gesehen, wie die Konfiguration einer Maschine mit
@code{operating-system}-Deklarationen lokal verwaltet werden kann. Doch was
ist, wenn Sie mehrere Maschinen konfigurieren möchten? Vielleicht kümmern
Sie sich um einen Dienst im Web, der über mehrere Server verteilt ist. Mit
@command{guix deploy} können Sie ebensolche
@code{operating-system}-Deklarationen verwenden, um mehrere entfernte
Rechner („Hosts“) gleichzeitig in einer logischen Bereitstellung (einem
„Deployment“) zu verwalten.

@quotation Anmerkung
Die in diesem Abschnitt beschriebenen Funktionalitäten befinden sich noch in
der Entwicklung und können sich ändern. Kontaktieren Sie uns auf
@email{guix-devel@@gnu.org}!
@end quotation

@example
guix deploy @var{Datei}
@end example

Mit einem solchen Aufruf werden diejenigen „Maschinen“ bereitgestellt, zu
denen der Code in der @var{Datei} ausgewertet wird. Zum Beispiel könnte die
@var{Datei} eine solche Definition enthalten:

@lisp
;; Dies ist eine Guix-Bereitstellung einer minimalen Installation ohne
;; X11-Anzeigeserver auf eine Maschine, auf der ein SSH-Daemon auf
;; localhost:2222 lauscht. So eine Konfiguration kann für virtuelle
;; Maschinen geeignet sein, deren Ports an die Loopback-Schnittstelle
;; ihres Wirtssystems weitergeleitet werden.

(use-service-modules networking ssh)
(use-package-modules bootloaders)

(define %system
  (operating-system
   (host-name "gnu-deployed")
   (timezone "Etc/UTC")
   (bootloader (bootloader-configuration
                (bootloader grub-bootloader)
                (target "/dev/vda")
                (terminal-outputs '(console))))
   (file-systems (cons (file-system
                        (mount-point "/")
                        (device "/dev/vda1")
                        (type "ext4"))
                       %base-file-systems))
   (services
    (append (list (service dhcp-client-service-type)
                  (service openssh-service-type
                           (openssh-configuration
                            (permit-root-login #t)
                            (allow-empty-passwords? #t))))
            %base-services))))

(list (machine
       (operating-system %system)
       (environment managed-host-environment-type)
       (configuration (machine-ssh-configuration
                       (host-name "localhost")
                       (system "x86_64-linux")
                       (user "alice")
                       (identity "./id_rsa")
                       (port 2222)))))
@end lisp

The file should evaluate to a list of @var{machine} objects.  This example,
upon being deployed, will create a new generation on the remote system
realizing the @code{operating-system} declaration @code{%system}.
@code{environment} and @code{configuration} specify how the machine should
be provisioned---that is, how the computing resources should be created and
managed.  The above example does not create any resources, as a
@code{'managed-host} is a machine that is already running the Guix system
and available over the network.  This is a particularly simple case; a more
complex deployment may involve, for example, starting virtual machines
through a Virtual Private Server (VPS) provider.  In such a case, a
different @var{environment} type would be used.

Beachten Sie, dass Sie zunächst ein Schlüsselpaar auf der
Koordinatormaschine erzeugen lassen müssen, damit der Daemon signierte
Archive mit Dateien aus dem Store exportieren kann (siehe @ref{Aufruf von guix archive}).

@example
# guix archive --generate-key
@end example

@noindent
Jede Zielmaschine muss den Schlüssel der Hauptmaschine autorisieren, damit
diese Store-Objekte von der Koordinatormaschine empfangen kann:

@example
# guix archive --authorize < öffentlicher-schlüssel-koordinatormaschine.txt
@end example

In dem Beispiel wird unter @code{user} der Name des Benutzerkontos
angegeben, mit dem Sie sich zum Aufspielen auf der Maschine anmelden. Der
Vorgabewert ist @code{root}, jedoch wird eine Anmeldung als root über SSH
manchmal nicht zugelassen. Als Ausweg kann @command{guix deploy} Sie erst
mit einem „unprivilegierten“ Benutzerkonto ohne besondere Berechtigungen
anmelden, um danach automatisch mit @code{sudo} die Berechtigungen
auszuweiten. Damit das funktioniert, muss @code{sudo} auf der entfernten
Maschine installiert und durch das @code{user}-Konto ohne Nutzerinteraktion
aufrufbar sein; mit anderen Worten muss die Zeile in @code{sudoers}, die das
@code{user}-Benutzerkonto zum Aufruf von @code{sudo} berechtigt, mit dem
@code{NOPASSWD}-Tag versehen sein. Dazu kann das folgende Schnipsel in die
Betriebssystemkonfiguration eingefügt werden:

@lisp
(use-modules …
             (gnu system))   ;macht %sudoers-specification verfügbar

(define %user "benutzername")

(operating-system
  …
  (sudoers-file
     (plain-file "sudoers"
                 (string-append (plain-file-content %sudoers-specification)
                                (format #f "~a ALL = NOPASSWD: ALL~%"
                                        %user)))))

@end lisp

Weitere Informationen über das Format der @file{sudoers}-Datei erhalten Sie,
wenn Sie @command{man sudoers} ausführen.

@deftp {Datentyp} machine
Dieser Datentyp steht für eine einzelne Maschine beim Bereitstellen auf
mehrere verschiedene Maschinen.

@table @asis
@item @code{operating-system}
Das Objekt mit der aufzuspielenden Betriebssystemkonfiguration.

@item @code{environment}
Auf welcher Art von Umgebung die Maschine läuft. Der hier angegebene
@code{environment-type} steht dafür, wie die Maschine beliefert wird
(„Provisioning“).

@item @code{configuration} (Vorgabe: @code{#f})
Dieses Objekt gibt die bestimmte Konfiguration der Umgebung
(@code{environment}) der Maschine an. Falls es für diese Umgebung eine
Vorgabekonfiguration gibt, kann auch @code{#f} benutzt werden. Wenn
@code{#f} für eine Umgebung ohne Vorgabekonfiguration benutzt wird, wird ein
Fehler ausgelöst.
@end table
@end deftp

@deftp {Datentyp} machine-ssh-configuration
Dieser Datentyp repräsentiert die SSH-Client-Parameter einer Maschine, deren
Umgebung (@code{environment}) vom Typ @code{managed-host-environment-type}
ist.

@table @asis
@item @code{host-name}
@item @code{build-locally?} (Vorgabe: @code{#t})
Wenn es falsch ist, werden Ableitungen für das System auf der Maschine
erstellt, auf die es aufgespielt wird.
@item @code{system}
Der Systemtyp, der die Architektur der Maschine angibt, auf die aufgespielt
wird — z.B. @code{"x86_64-linux"}.
@item @code{authorize?} (Vorgabe: @code{#t})
Wenn es wahr ist, wird der signierende Schlüssel des Koordinators zum
ACL-Schlüsselbund (der Access Control List, deutsch Zugriffssteuerungsliste)
der entfernten Maschine hinzugefügt.
@item @code{port} (Vorgabe: @code{22})
@item @code{user} (Vorgabe: @code{"root"})
@item @code{identity} (Vorgabe: @code{#f})
Wenn dies angegeben wird, ist es der Pfad zum privaten SSH-Schlüssel, um
sich beim entfernten Rechner zu authentisieren.

@item @code{host-key} (Vorgabe: @code{#f})
Hierfür sollte der SSH-Host-Schlüssel der Maschine angegeben werden. Er
sieht so aus:

@example
ssh-ed25519 AAAAC3Nz… root@@example.org
@end example

Wenn @code{#f} als @code{host-key} angegeben wird, wird der Server gegen die
Datei @file{~/.ssh/known_hosts} geprüft, genau wie es der
@command{ssh}-Client von OpenSSH tut.

@end table
@end deftp

@deftp {Datentyp} digital-ocean-configuration
Dieser Datentyp beschreibt das Droplet, das für eine Maschine erzeugt werden
soll, deren Umgebung (@code{environment}) vom Typ
@code{digital-ocean-environment-type} ist.

@table @asis
@item @code{ssh-key}
Der Pfad zum privaten SSH-Schlüssel, um sich beim entfernten Rechner zu
authentisieren. In Zukunft wird es dieses Feld vielleicht nicht mehr geben.
@item @code{tags}
Eine Liste von „Tags“ als Zeichenketten, die die Maschine eindeutig
identifizieren. Sie müssen angegeben werden, damit keine zwei Maschinen in
der Bereitstellung dieselbe Menge an Tags haben.
@item @code{region}
Ein Digital-Ocean-„Region Slug“ (Regionskürzel), zum Beispiel @code{"nyc3"}.
@item @code{Größe}
Ein Digital-Ocean-„Size Slug“ (Größenkürzel), zum Beispiel
@code{"s-1vcpu-1gb"}
@item @code{enable-ipv6?}
Ob das Droplet mit IPv6-Netzanbindung erzeugt werden soll.
@end table
@end deftp

@node Guix in einer VM starten
@section Guix in einer virtuellen Maschine betreiben

@cindex virtuelle Maschine
Um Guix in einer virtuellen Maschine (VM) auszuführen, können Sie das
vorerstellte Guix-VM-Abbild benutzen, das auf
@url{@value{BASE-URL}/guix-system-vm-image-@value{VERSION}.@var{System}.xz}
angeboten wird. Das Abbild ist ein komprimiertes Abbild im QCOW-Format. Sie
müssen es mit @command{xz -d} dekomprimieren, bevor Sie es an einen Emulator
wie QEMU übergeben (siehe unten für Details).

This image boots the Xfce graphical environment and it contains some
commonly-used tools.  You can install more software in the image by running
@command{guix package} in a terminal (@pxref{Aufruf von guix package}).  You
can also reconfigure the system based on its initial configuration file
available as @file{/run/current-system/configuration.scm} (@pxref{Das Konfigurationssystem nutzen}).

Statt dieses vorerstellte Abbild zu benutzen, können Sie auch Ihr eigenes
Abbild für virtuelle Maschinen erstellen, indem Sie @command{guix system
vm-image} benutzen (siehe @ref{Aufruf von guix system}). Das Abbild wird im
qcow2-Format zurückgeliefert, das der @uref{https://qemu.org/,
QEMU-Emulator} effizient benutzen kann.

@cindex QEMU
Wenn Sie Ihr eigenes Abbild erstellen haben lassen, müssen Sie es aus dem
Store herauskopieren (siehe @ref{Der Store}) und sich darauf
Schreibberechtigung geben, um die Kopie benutzen zu können. Wenn Sie QEMU
aufrufen, müssen Sie einen Systememulator angeben, der für Ihre
Hardware-Plattform passend ist. Hier ist ein minimaler QEMU-Aufruf, der das
Ergebnis von @command{guix system vm-image} auf x86_64-Hardware bootet:

@example
$ qemu-system-x86_64 \
   -nic user,model=virtio-net-pci \
   -enable-kvm -m 1024 \
   -device virtio-blk,drive=myhd \
   -drive if=none,file=/tmp/qemu-image,id=myhd
@end example

Die Bedeutung jeder dieser Befehlszeilenoptionen ist folgende:

@table @code
@item qemu-system-x86_64
Hiermit wird die zu emulierende Hardware-Plattform angegeben. Sie sollte zum
Wirtsrechner passen.

@item -nic user,model=virtio-net-pci
Den als Nutzer ausgeführten Netzwerkstapel („User-Mode Network Stack“) ohne
besondere Berechtigungen benutzen. Mit dieser Art von Netzwerkanbindung kann
das Gast-Betriebssystem eine Verbindung zum Wirt aufbauen, aber nicht
andersherum. Es ist die einfachste Art, das Gast-Betriebssystem mit dem
Internet zu verbinden. Das @code{model} gibt das Modell eines zu
emulierenden Netzwerkgeräts an: @code{virtio-net-pci} ist ein besonderes
Gerät, das für virtualisierte Betriebssysteme gedacht ist und für die
meisten Anwendungsfälle empfohlen wird. Falls Ihre Hardware-Plattform x86_64
ist, können Sie eine Liste verfügbarer Modelle von Netzwerkkarten (englisch
„Network Interface Card“, kurz NIC) einsehen, indem Sie
@command{qemu-system-x86_64 -net nic,model=help} ausführen.

@item -enable-kvm
Wenn Ihr System über Erweiterungen zur Hardware-Virtualisierung verfügt,
beschleunigt es die Dinge, wenn Sie die Virtualisierungsunterstützung „KVM“
des Linux-Kernels benutzen lassen.

@c To run Xfce + 'guix pull', we need at least 1G of RAM.
@item -m 1024
Die Menge an Arbeitsspeicher (RAM), die dem Gastbetriebssystem zur Verfügung
stehen soll, in Mebibytes. Vorgegeben wären 128@tie{}MiB, was für einige
Operationen zu wenig sein könnte.

@item -device virtio-blk,drive=myhd
Ein @code{virtio-blk}-Laufwerk namens „myhd“ erzeugen. @code{virtio-blk} ist
ein Mechanismus zur „Paravirtualisierung“ von Blockgeräten, wodurch QEMU
diese effizienter benutzen kann, als wenn es ein Laufwerk vollständig
emulieren würde. Siehe die Dokumentation von QEMU und KVM für mehr
Informationen.

@item -drive if=none,file=/tmp/qemu-image,id=myhd
Unser QCOW-Abbild in der Datei @file{/tmp/qemu-image} soll als Inhalt des
„myhd“-Laufwerks herhalten.
@end table

Das voreingestellte @command{run-vm.sh}-Skript, das durch einen Aufruf von
@command{guix system vm} erzeugt wird, fügt keine Befehlszeilenoption
@command{-nic user} an. Um innerhalb der virtuellen Maschine Netzwerkzugang
zu haben, fügen Sie den @code{(dhcp-client-service)} zu Ihrer
Systemdefinition hinzu und starten Sie die VM mit @command{`guix system vm
config.scm` -nic user}. Erwähnt werden sollte der Nachteil, dass bei
Verwendung von @command{-nic user} zur Netzanbindung der
@command{ping}-Befehl @emph{nicht} funktionieren wird, weil dieser das
ICMP-Protokoll braucht. Sie werden also einen anderen Befehl benutzen
müssen, um auszuprobieren, ob Sie mit dem Netzwerk verbunden sind, zum
Beispiel @command{guix download}.

@subsection Verbinden über SSH

@cindex SSH
@cindex SSH-Server
Um SSH in der virtuellen Maschine zu aktivieren, müssen Sie einen SSH-Server
wie @code{openssh-service-type} zu ihr hinzufügen (siehe @ref{Netzwerkdienste, @code{openssh-service-type}}). Des Weiteren müssen Sie den
SSH-Port für das Wirtssystem freigeben (standardmäßig hat er die Portnummer
22). Das geht zum Beispiel so:

@example
`guix system vm config.scm` -nic user,model=virtio-net-pci,hostfwd=tcp::10022-:22
@end example

Um sich mit der virtuellen Maschine zu verbinden, benutzen Sie diesen
Befehl:

@example
ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 10022
@end example

Mit @command{-p} wird @command{ssh} der Port mitgeteilt, über den eine
Verbindung hergestellt werden soll. @command{-o
UserKnownHostsFile=/dev/null} verhindert, dass @command{ssh} sich bei jeder
Modifikation Ihrer @command{config.scm}-Datei beschwert, ein anderer
bekannter Rechner sei erwartet worden, und @command{-o
StrictHostKeyChecking=no} verhindert, dass Sie die Verbindung zu unbekannten
Rechnern jedes Mal bestätigen müssen, wenn Sie sich verbinden.

@subsection @command{virt-viewer} mit Spice benutzen

Eine Alternative zur grafischen Schnittstelle des standardmäßigen
@command{qemu} ist, sich mit Hilfe des @command{remote-viewer} aus dem Paket
@command{virt-viewer} zu verbinden. Um eine Verbindung herzustellen,
übergeben Sie die Befehlszeilenoption @command{-spice
port=5930,disable-ticketing} an @command{qemu}. Siehe den vorherigen
Abschnitt für weitere Informationen, wie Sie das übergeben.

Spice macht es auch möglich, ein paar nette Hilfestellungen zu benutzen, zum
Beispiel können Sie Ihren Zwischenspeicher zum Kopieren und Einfügen (Ihr
„Clipboard“) mit Ihrer virtuellen Maschine teilen. Um das zu aktivieren,
werden Sie die folgenden Befehlszeilennoptionen zusätzlich an @command{qemu}
übergeben müssen:

@example
-device virtio-serial-pci,id=virtio-serial0,max_ports=16,bus=pci.0,addr=0x5
-chardev spicevmc,name=vdagent,id=vdagent
-device virtserialport,nr=1,bus=virtio-serial0.0,chardev=vdagent,
name=com.redhat.spice.0
@end example

You'll also need to add the @code{(spice-vdagent-service)} to your system
definition (@pxref{Verschiedene Dienste, Spice service}).

@node Dienste definieren
@section Dienste definieren

Der vorhergehende Abschnitt präsentiert die verfügbaren Dienste und wie man
sie in einer @code{operating-system}-Deklaration kombiniert. Aber wie
definieren wir solche Dienste eigentlich? Und was ist überhaupt ein Dienst?

@menu
* Dienstkompositionen::      Wie Dienste zusammengestellt werden.
* Diensttypen und Dienste::  Typen und Dienste.
* Service-Referenz::         Referenz zur Programmierschnittstelle.
* Shepherd-Dienste::         Eine spezielle Art von Dienst.
@end menu

@node Dienstkompositionen
@subsection Dienstkompositionen

@cindex services
@cindex Daemons
Wir definieren hier einen @dfn{Dienst} (englisch „Service“) als, grob
gesagt, etwas, das die Funktionalität des Betriebssystems erweitert. Oft ist
ein Dienst ein Prozess — ein sogenannter @dfn{Daemon} —, der beim Hochfahren
des Systems gestartet wird: ein Secure-Shell-Server, ein Web-Server, der
Guix-Erstellungsdaemon usw. Manchmal ist ein Dienst ein Daemon, dessen
Ausführung von einem anderen Daemon ausgelöst wird — zum Beispiel wird ein
FTP-Server von @command{inetd} gestartet oder ein D-Bus-Dienst durch
@command{dbus-daemon} aktiviert. Manchmal entspricht ein Dienst aber auch
keinem Daemon. Zum Beispiel nimmt sich der Benutzerkonten-Dienst („account
service“) die Benutzerkonten und sorgt dafür, dass sie existieren, wenn das
System läuft. Der „udev“-Dienst sammelt die Regeln zur Geräteverwaltung an
und macht diese für den eudev-Daemon verfügbar. Der @file{/etc}-Dienst fügt
Dateien in das Verzeichnis @file{/etc} des Systems ein.

@cindex Diensterweiterungen
Dienste des Guix-Systems werden durch @dfn{Erweiterungen} („Extensions“)
miteinander verbunden. Zum Beispiel @emph{erweitert} der Secure-Shell-Dienst
den Shepherd — Shepherd ist das Initialisierungssystem (auch „init“-System
genannt), was als PID@tie{}1 läuft —, indem es ihm die Befehlszeilen zum
Starten und Stoppen des Secure-Shell-Daemons übergibt (siehe @ref{Netzwerkdienste, @code{openssh-service-type}}). Der UPower-Dienst erweitert den
D-Bus-Dienst, indem es ihm seine @file{.service}-Spezifikation übergibt, und
erweitert den udev-Dienst, indem es ihm Geräteverwaltungsregeln übergibt
(siehe @ref{Desktop-Dienste, @code{upower-service}}). Der
Guix-Daemon-Dienst erweitert den Shepherd, indem er ihm die Befehlszeilen
zum Starten und Stoppen des Daemons übergibt, und er erweitert den
Benutzerkontendienst („account service“), indem er ihm eine Liste der
benötigten Erstellungsbenutzerkonten übergibt (siehe @ref{Basisdienste}).

Alles in allem bilden Dienste und ihre „Erweitert“-Relationen einen
gerichteten azyklischen Graphen (englisch „Directed Acyclic Graph“, kurz
DAG). Wenn wir Dienste als Kästen und Erweiterungen als Pfeile darstellen,
könnte ein typisches System so etwas hier anbieten:

@image{images/service-graph,,5in,Typischer Diensterweiterungsgraph}

@cindex Systemdienst
Ganz unten sehen wir den @dfn{Systemdienst}, der das Verzeichnis erzeugt, in
dem alles zum Ausführen und Hochfahren enthalten ist, so wie es der Befehl
@command{guix system build} liefert. Siehe @ref{Service-Referenz}, um mehr
über die anderen hier gezeigten Diensttypen zu erfahren. Beim
@ref{system-extension-graph, Befehl @command{guix system extension-graph}}
finden Sie Informationen darüber, wie Sie diese Darstellung für eine
Betriebssystemdefinition Ihrer Wahl generieren lassen.

@cindex Diensttypen
Technisch funktioniert es so, dass Entwickler @dfn{Diensttypen} definieren
können, um diese Beziehungen auszudrücken. Im System kann es beliebig viele
Dienste zu jedem Typ geben — zum Beispiel können auf einem System zwei
Instanzen des GNU-Secure-Shell-Servers (lsh) laufen, mit zwei Instanzen des
Diensttyps @code{lsh-service-type} mit je unterschiedlichen Parametern.

Der folgende Abschnitt beschreibt die Programmierschnittstelle für
Diensttypen und Dienste.

@node Diensttypen und Dienste
@subsection Diensttypen und Dienste

Ein @dfn{Diensttyp} („service type“) ist ein Knoten im oben beschriebenen
ungerichteten azyklischen Graphen (DAG). Fangen wir an mit einem einfachen
Beispiel: dem Diensttyp für den Guix-Erstellungsdaemon (siehe @ref{Aufruf des guix-daemon}):

@lisp
(define guix-service-type
  (service-type
   (name 'guix)
   (extensions
    (list (service-extension shepherd-root-service-type guix-shepherd-service)
          (service-extension account-service-type guix-accounts)
          (service-extension activation-service-type guix-activation)))
   (default-value (guix-configuration))))
@end lisp

@noindent
Damit sind drei Dinge definiert:

@enumerate
@item
Ein Name, der nur dazu da ist, dass man leichter die Abläufe verstehen und
Fehler suchen kann.

@item
Eine Liste von @dfn{Diensterweiterungen} („service extensions“). Jede
Erweiterung gibt den Ziel-Diensttyp an sowie eine Prozedur, die für gegebene
Parameter für den Dienst eine Liste von Objekten zurückliefert, um den
Dienst dieses Typs zu erweitern.

Jeder Diensttyp benutzt mindestens eine Diensterweiterung. Die einzige
Ausnahme ist der @dfn{boot service type}, der die Grundlage aller Dienste
ist.

@item
Optional kann ein Vorgabewert für Instanzen dieses Typs angegeben werden.
@end enumerate

In diesem Beispiel werden durch @code{guix-service-type} drei Dienste
erweitert:

@table @code
@item shepherd-root-service-type
Die Prozedur @code{guix-shepherd-service} definiert, wie der Shepherd-Dienst
erweitert wird, und zwar liefert sie ein @code{<shepherd-service>}-Objekt,
womit definiert wird, wie der @command{guix-daemon} gestartet und gestoppt
werden kann (siehe @ref{Shepherd-Dienste}).

@item account-service-type
Diese Erweiterung des Dienstes wird durch @code{guix-accounts} berechnet,
eine Prozedur, die eine Liste von @code{user-group}- und
@code{user-account}-Objekten liefert, die die Erstellungsbenutzerkonten
repräsentieren (siehe @ref{Aufruf des guix-daemon}).

@item activation-service-type
Hier ist @code{guix-activation} eine Prozedur, die einen G-Ausdruck
liefert. Dieser ist ein Code-Schnipsel, das zur „Aktivierungszeit“
ausgeführt werden soll — z.B.@: wenn der Dienst hochgefahren wird.
@end table

Ein Dienst dieses Typs wird dann so instanziiert:

@lisp
(service guix-service-type
         (guix-configuration
           (build-accounts 5)
           (use-substitutes? #f)))
@end lisp

Das zweite Argument an die @code{service}-Form ist ein Wert, der die
Parameter dieser bestimmten Dienstinstanz repräsentiert. Siehe
@ref{guix-configuration-type, @code{guix-configuration}} für Informationen
über den @code{guix-configuration}-Datentyp. Wird kein Wert angegeben, wird
die Vorgabe verwendet, die im @code{guix-service-type} angegeben wurde:

@lisp
(service guix-service-type)
@end lisp

@code{guix-service-type} ist ziemlich einfach, weil es andere Dienste
erweitert, aber selbst nicht erweitert werden kann.

@c @subsubsubsection Extensible Service Types

Der Diensttyp eines @emph{erweiterbaren} Dienstes sieht ungefähr so aus:

@lisp
(define udev-service-type
  (service-type (name 'udev)
                (extensions
                 (list (service-extension shepherd-root-service-type
                                          udev-shepherd-service)))

                (compose concatenate)     ;Liste der Regeln zusammenfügen
                (extend (lambda (config rules) ;Konfiguration und Regeln
                          (match config
                            (($ <udev-configuration> udev initial-rules)
                             (udev-configuration
                              (udev udev) ;zu benutzendes udev-Paket
                              (rules (append initial-rules rules)))))))))
@end lisp

Dies ist der Diensttyp für den
@uref{https://wiki.gentoo.org/wiki/Project:Eudev, Geräteverwaltungsdaemon
eudev}. Verglichen mit dem vorherigen Beispiel sehen wir neben einer
Erweiterung des @code{shepherd-root-service-type} auch zwei neue Felder.

@table @code
@item compose
Die Prozedur, um die Liste der jeweiligen Erweiterungen für den Dienst
dieses Typs zu einem Objekt zusammenzustellen (zu „komponieren“, englisch
@dfn{compose}).

Dienste können den udev-Dienst erweitern, indem sie eine Liste von Regeln
(„Rules“) an ihn übergeben; wir komponieren mehrere solche Erweiterungen,
indem wir die Listen einfach zusammenfügen.

@item extend
Diese Prozedur definiert, wie der Wert des Dienstes um die Komposition mit
Erweiterungen erweitert („extended“) werden kann.

Udev-Erweiterungen werden zu einer einzigen Liste von Regeln komponiert,
aber der Wert des udev-Dienstes ist ein
@code{<udev-configuration>}-Verbundsobjekt. Deshalb erweitern wir diesen
Verbund, indem wir die Liste der von Erweiterungen beigetragenen Regeln an
die im Verbund gespeicherte Liste der Regeln anhängen.

@item description
Diese Zeichenkette gibt einen Überblick über den Systemtyp. Die Zeichenkette
darf mit Texinfo ausgezeichnet werden (siehe @ref{Overview,,, texinfo, GNU
Texinfo}). Der Befehl @command{guix system search} durchsucht diese
Zeichenketten und zeigt sie an (siehe @ref{Aufruf von guix system}).
@end table

Es kann nur eine Instanz eines erweiterbaren Diensttyps wie
@code{udev-service-type} geben. Wenn es mehrere gäbe, wäre es mehrdeutig,
welcher Dienst durch die @code{service-extension} erweitert werden soll.

Sind Sie noch da? Der nächste Abschnitt gibt Ihnen eine Referenz der
Programmierschnittstelle für Dienste.

@node Service-Referenz
@subsection Service-Referenz

Wir haben bereits einen Überblick über Diensttypen gesehen (siehe
@ref{Diensttypen und Dienste}). Dieser Abschnitt hier stellt eine
Referenz dar, wie Dienste und Diensttypen manipuliert werden können. Diese
Schnittstelle wird vom Modul @code{(gnu services)} angeboten.

@deffn {Scheme-Prozedur} service @var{Typ} [@var{Wert}]
Return a new service of @var{type}, a @code{<service-type>} object (see
below).  @var{value} can be any object; it represents the parameters of this
particular service instance.

Wenn kein @var{Wert} angegeben wird, wird der vom @var{Typ} festgelegte
Vorgabewert verwendet; verfügt der @var{Typ} über keinen Vorgabewert, dann
wird ein Fehler gemeldet.

Zum Beispiel bewirken Sie hiermit:

@lisp
(service openssh-service-type)
@end lisp

@noindent
dasselbe wie mit:

@lisp
(service openssh-service-type
         (openssh-configuration))
@end lisp

In beiden Fällen ist das Ergebnis eine Instanz von
@code{openssh-service-type} mit der vorgegebenen Konfiguration.
@end deffn

@deffn {Scheme-Prozedur} service? @var{Objekt}
Liefert wahr zurück, wenn das @var{Objekt} ein Dienst ist.
@end deffn

@deffn {Scheme-Prozedur} service-kind @var{Dienst}
Liefert den Typ des @var{Dienst}es — d.h.@: ein
@code{<service-type>}-Objekt.
@end deffn

@deffn {Scheme-Prozedur} service-value @var{Dienst}
Liefert den Wert, der mit dem @var{Dienst} assoziiert wurde. Er
repräsentiert die Parameter des @var{Dienst}es.
@end deffn

Hier ist ein Beispiel, wie ein Dienst erzeugt und manipuliert werden kann:

@lisp
(define s
  (service nginx-service-type
           (nginx-configuration
            (nginx nginx)
            (log-directory log-Verzeichnis)
            (run-directory run-Verzeichnis)
            (file config-Datei))))

(service? s)
@result{} #t

(eq? (service-kind s) nginx-service-type)
@result{} #t
@end lisp

Die Form @code{modify-services} ist eine nützliche Methode, die Parameter
von einigen der Dienste aus einer Liste wie @code{%base-services} abzuändern
(siehe @ref{Basisdienste, @code{%base-services}}). Sie wird zu einer Liste
von Diensten ausgewertet. Natürlich können Sie dazu auch die üblichen
Listenkombinatoren wie @code{map} und @code{fold} benutzen (siehe
@ref{SRFI-1, List Library,, guile, GNU Guile Reference Manual}),
@code{modify-services} soll dieses häufig benutzte Muster lediglich durch
eine knappere Syntax unterstützen.

@deffn {Scheme-Syntax} modify-services @var{Dienste} @
  (@var{Typ} @var{Variable} => @var{Rumpf}) …

Passt die von @var{Dienste} bezeichnete Dienst-Liste entsprechend den
angegebenen Klauseln an. Jede Klausel hat die Form:

@example
(@var{Typ} @var{Variable} => @var{Rumpf})
@end example

wobei @var{Typ} einen Diensttyp („service type“) bezeichnet — wie zum
Beispiel @code{guix-service-type} — und @var{Variable} ein Bezeichner ist,
der im @var{Rumpf} an die Dienst-Parameter — z.B.@: eine
@code{guix-configuration}-Instanz — des ursprünglichen Dienstes mit diesem
@var{Typ} gebunden wird.

Der @var{Rumpf} muss zu den neuen Dienst-Parametern ausgewertet werden,
welche benutzt werden, um den neuen Dienst zu konfigurieren. Dieser neue
Dienst wird das Original in der resultierenden Liste ersetzen. Weil die
Dienstparameter eines Dienstes mit @code{define-record-type*} erzeugt
werden, können Sie einen kurzen @var{Rumpf} schreiben, der zu den neuen
Dienstparametern ausgewertet wird, indem Sie die Funktionalität namens
@code{inherit} benutzen, die von @code{define-record-type*} bereitgestellt
wird.

Siehe @ref{Das Konfigurationssystem nutzen} für ein Anwendungsbeispiel.

@end deffn

Als Nächstes ist die Programmierschnittstelle für Diensttypen an der
Reihe. Sie ist etwas, was Sie kennen werden wollen, wenn Sie neue
Dienstdefinitionen schreiben, aber wenn Sie nur Ihre
@code{operating-system}-Deklaration anpassen möchten, brauchen Sie diese
Schnittstelle wahrscheinlich nicht.

@deftp {Datentyp} service-type
@cindex Diensttyp
Die Repräsentation eines @dfn{Diensttypen} (siehe @ref{Diensttypen und Dienste}).

@table @asis
@item @code{name}
Dieses Symbol wird nur verwendet, um die Abläufe im System anzuzeigen und
die Fehlersuche zu erleichtern.

@item @code{extensions}
Eine nicht-leere Liste von @code{<service-extension>}-Objekten (siehe
unten).

@item @code{compose} (Vorgabe: @code{#f})
Wenn es auf @code{#f} gesetzt ist, dann definiert der Diensttyp Dienste, die
nicht erweitert werden können — d.h.@: diese Dienste erhalten ihren Wert
nicht von anderen Diensten.

Andernfalls muss es eine Prozedur sein, die ein einziges Argument
entgegennimmt. Die Prozedur wird durch @code{fold-services} aufgerufen und
ihr wird die Liste von aus den Erweiterungen angesammelten Werten
übergeben. Sie gibt daraufhin einen einzelnen Wert zurück.

@item @code{extend} (Vorgabe: @code{#f})
Ist dies auf @code{#f} gesetzt, dann können Dienste dieses Typs nicht
erweitert werden.

Andernfalls muss es eine zwei Argumente nehmende Prozedur sein, die von
@code{fold-services} mit dem anfänglichen Wert für den Dienst als erstes
Argument und dem durch Anwendung von @code{compose} gelieferten Wert als
zweites Argument aufgerufen wird. Als Ergebnis muss ein Wert geliefert
werden, der einen zulässigen neuen Parameterwert für die Dienstinstanz
darstellt.
@end table

Siehe den Abschnitt @ref{Diensttypen und Dienste} für Beispiele.
@end deftp

@deffn {Scheme-Prozedur} service-extension @var{Zieltyp} @
                              @var{Berechner} Liefert eine neue Erweiterung für den Dienst mit dem
@var{Zieltyp}. Als @var{Berechner} muss eine Prozedur angegeben werden, die
ein einzelnes Argument nimmt: @code{fold-services} ruft sie auf und übergibt
an sie den Wert des erweiternden Dienstes, sie muss dafür einen zulässigen
Wert für den @var{Zieltyp} liefern.
@end deffn

@deffn {Scheme-Prozedur} service-extension? @var{Objekt}
Liefert wahr zurück, wenn das @var{Objekt} eine Diensterweiterung ist.
@end deffn

Manchmal wollen Sie vielleicht einfach nur einen bestehenden Dienst
erweitern. Dazu müssten Sie einen neuen Diensttyp definieren und die
Erweiterung definieren, für die Sie sich interessieren, was ganz schön
wortreich werden kann. Mit der Prozedur @code{simple-service} können Sie es
kürzer fassen.

@deffn {Scheme-Prozedur} simple-service @var{Name} @var{Zieltyp} @var{Wert}
Liefert einen Dienst, der den Dienst mit dem @var{Zieltyp} um den @var{Wert}
erweitert. Dazu wird ein Diensttyp mit dem @var{Name}n für den einmaligen
Gebrauch erzeugt, den der zurückgelieferte Dienst instanziiert.

Zum Beispiel kann mcron (siehe @ref{Geplante Auftragsausführung}) so um einen
zusätzlichen Auftrag erweitert werden:

@lisp
(simple-service 'my-mcron-job mcron-service-type
                #~(job '(next-hour (3)) "guix gc -F 2G"))
@end lisp
@end deffn

Den Kern dieses abstrakten Modells für Dienste bildet die Prozedur
@code{fold-services}, die für das „Kompilieren“ einer Liste von Diensten hin
zu einem einzelnen Verzeichnis verantwortlich ist, in welchem alles
enthalten ist, was Sie zum Booten und Hochfahren des Systems brauchen —
d.h.@: das Verzeichnis, das der Befehl @command{guix system build} anzeigt
(siehe @ref{Aufruf von guix system}). Einfach ausgedrückt propagiert
@code{fold-services} Diensterweiterungen durch den Dienstgraphen nach unten
und aktualisiert dabei in jedem Knoten des Graphen dessen Parameter, bis nur
noch der Wurzelknoten übrig bleibt.

@deffn {Scheme-Prozedur} fold-services @var{Dienste} @
                            [#:target-type @var{system-service-type}] Faltet die @var{Dienste} wie die
funktionale Prozedur @code{fold} zu einem einzigen zusammen, indem ihre
Erweiterungen nach unten propagiert werden, bis eine Wurzel vom
@var{target-type} als Diensttyp erreicht wird; dieser so angepasste
Wurzeldienst wird zurückgeliefert.
@end deffn

Als Letztes definiert das Modul @code{(gnu services)} noch mehrere
essenzielle Diensttypen, von denen manche im Folgenden aufgelistet sind:

@defvr {Scheme-Variable} system-service-type
Die Wurzel des Dienstgraphen. Davon wird das Systemverzeichnis erzeugt, wie
es vom Befehl @command{guix system build} zurückgeliefert wird.
@end defvr

@defvr {Scheme-Variable} boot-service-type
Der Typ des „Boot-Dienstes“, der das @dfn{Boot-Skript} erzeugt. Das
Boot-Skript ist das, was beim Booten durch die initiale RAM-Disk ausgeführt
wird.
@end defvr

@defvr {Scheme-Variable} etc-service-type
Der Typ des @file{/etc}-Dienstes. Dieser Dienst wird benutzt, um im
@file{/etc}-Verzeichnis Dateien zu platzieren. Er kann erweitert werden,
indem man Name-/Datei-Tupel an ihn übergibt wie in diesem Beispiel:

@lisp
(list `("issue" ,(plain-file "issue" "Willkommen!\n")))
@end lisp

Dieses Beispiel würde bewirken, dass eine Datei @file{/etc/issue} auf die
angegebene Datei verweist.
@end defvr

@defvr {Scheme-Variable} setuid-program-service-type
Der Typ des Dienstes für setuid-Programme, der eine Liste von ausführbaren
Dateien ansammelt, die jeweils als G-Ausdrücke übergeben werden und dann zur
Menge der setuid-gesetzten Programme auf dem System hinzugefügt werden
(siehe @ref{Setuid-Programme}).
@end defvr

@defvr {Scheme-Variable} profile-service-type
Der Typ des Dienstes zum Einfügen von Dateien ins @dfn{Systemprofil} —
d.h.@: die Programme unter @file{/run/current-system/profile}. Andere
Dienste können ihn erweitern, indem sie ihm Listen von ins Systemprofil zu
installierenden Paketen übergeben.
@end defvr

@cindex Provenienzverfolgung, des Betriebssystems
@defvr {Scheme-Variable} provenance-service-type
Dies ist der Diensttyp des Dienstes, um @dfn{Provenienz-Metadaten} zusammen
mit dem eigentlichen System zu speichern. Dazu werden mehrere Dateien unter
@file{/run/current-system} erstellt:

@table @file
@item channels.scm
Sie ist eine „Kanaldatei“, wie sie an @command{guix pull -C} oder
@command{guix time-machine -C} übergeben werden kann, die die zum Erstellen
des Systems notwendigen Kanäle beschreibt, sofern diese Information zur
Verfügung gestanden hat (siehe @ref{Kanäle}).

@item configuration.scm
Jene Datei entspricht derjenigen, die als Wert für diesen
@code{provenance-service-type}-Dienst mitgegeben wurde. Nach Vorgabe
übergibt @command{guix system reconfigure} automatisch die
Betriebssystemkonfigurationsdatei, die es auf der Befehlszeile bekommen hat.

@item provenance
Hierin sind dieselben Informationen enthalten, die auch in den anderen
beiden Dateien stehen, aber in einem leichter zu verarbeitenden Format.
@end table

Im Allgemeinen genügen diese zwei Informationen (Kanäle und
Konfigurationsdatei), um das Betriebssystem „aus seinem Quellcode heraus“ zu
reproduzieren.

@quotation Einschränkungen
Sie benötigen diese Informationen, um Ihr Betriebssystem erneut zu
erstellen, aber sie alleine @emph{reichen nicht immer aus}. Insbesondere ist
@file{configuration.scm} alleine nicht hinreichend, wenn es @emph{nicht}
eigenständig ist, sondern auf externe Guile-Module oder andere Dateien
verweist. Wenn Sie erreichen wollen, dass @file{configuration.scm}
eigenständig wird, empfehlen wir, alle darin verwendeten Module oder Dateien
zu Bestandteilen eines Kanals zu machen.

Übrigens sind Provenienzmetadaten „still“ in dem Sinn, dass ihr
Vorhandensein nichts an den Bits ändert, die Ihr System ausmachen,
@emph{abgesehen von den die Metadaten ausmachenden Bits}. Zwei verschiedene
Betriebssystemkonfigurationen und Kanalangaben können also Bit für Bit
dasselbe System erzeugen, aber wenn der @code{provenance-service-type}
benutzt wird, enthalten die beiden Systeme trotzdem unterschiedliche
Metadaten und damit nicht mehr den gleichen Dateinamen im Store, was es
schwerer macht, ihre Gleichheit zu erkennen.
@end quotation

Dieser Dienst wird automatisch zu Ihrer Betriebssystemkonfiguration
hinzugefügt, wenn Sie @command{guix system reconfigure}, @command{guix
system init} oder @command{guix deploy} benutzen.
@end defvr

@node Shepherd-Dienste
@subsection Shepherd-Dienste

@cindex Shepherd-Dienste
@cindex PID 1
@cindex init-System
Das Modul @code{(gnu services shepherd)} gibt eine Methode an, mit der
Dienste definiert werden können, die von GNU@tie{}Shepherd verwaltet werden,
was das Initialisierungssystem (das „init“-System) ist — es ist der erste
Prozess, der gestartet wird, wenn das System gebootet wird, auch bekannt als
PID@tie{}1 (siehe @ref{Einführung,,, shepherd, The GNU Shepherd Manual}).

Dienste unter dem Shepherd können voneinander abhängen. Zum Beispiel kann es
sein, dass der SSH-Daemon erst gestartet werden darf, nachdem der
Syslog-Daemon gestartet wurde, welcher wiederum erst gestartet werden kann,
sobald alle Dateisysteme eingebunden wurden. Das einfache Betriebssystem,
dessen Definition wir zuvor gesehen haben (siehe @ref{Das Konfigurationssystem nutzen}), ergibt folgenden Dienstgraphen:

@image{images/shepherd-graph,,5in,Typischer Shepherd-Dienstgraph}

Sie können so einen Graphen tatsächlich für jedes Betriebssystem erzeugen
lassen, indem Sie den Befehl @command{guix system shepherd-graph} benutzen
(siehe @ref{system-shepherd-graph, @command{guix system shepherd-graph}}).

Der @code{%shepherd-root-service} ist ein Dienstobjekt, das diesen Prozess
mit PID@tie{}1 repräsentiert. Der Dienst hat den Typ
@code{shepherd-root-service-type}. Man kann ihn erweitern, indem man eine
Liste von @code{<shepherd-service>}-Objekten an ihn übergibt.

@deftp {Datentyp} shepherd-service
Der Datentyp, der einen von Shepherd verwalteten Dienst repräsentiert.

@table @asis
@item @code{provision}
Diese Liste von Symbolen gibt an, was vom Dienst angeboten wird.

Das bedeutet, es sind die Namen, die an @command{herd start}, @command{herd
status} und ähnliche Befehle übergeben werden können (siehe @ref{Invoking
herd,,, shepherd, The GNU Shepherd Manual}). Siehe @ref{Slots of services,
the @code{provides} slot,, shepherd, The GNU Shepherd Manual} für Details.

@item @code{requirement} (Vorgabe: @code{'()})
Eine Liste von Symbolen, die angegeben, von welchen anderen
Shepherd-Diensten dieser hier abhängt.

@cindex einmalig ausgeführte Dienste, für Shepherd
@item @code{one-shot?} (Vorgabe: @code{#f})
Gibt an, ob dieser Dienst nur einmal ausgeführt wird („one-shot“). Einmalig
ausgeführte Dienste werden gestoppt, sobald ihre @code{start}-Aktion
abgeschlossen wurde. Siehe @ref{Slots of services,,, shepherd, The GNU
Shepherd Manual} für weitere Informationen.

@item @code{respawn?} (Vorgabe: @code{#t})
Ob der Dienst neu gestartet werden soll, nachdem er gestoppt wurde, zum
Beispiel wenn der ihm zu Grunde liegende Prozess terminiert wird.

@item @code{start}
@itemx @code{stop} (Vorgabe: @code{#~(const #f)})
Die Felder @code{start} und @code{stop} beziehen sich auf Shepherds
Funktionen zum Starten und Stoppen von Prozessen (siehe @ref{Service De- and
Constructors,,, shepherd, The GNU Shepherd Manual}). Sie enthalten
G-Ausdrücke, die in eine Shepherd-Konfigurationdatei umgeschrieben werden
(siehe @ref{G-Ausdrücke}).

@item @code{actions} (Vorgabe: @code{'()})
@cindex Aktionen, bei Shepherd-Diensten
Dies ist eine Liste von @code{shepherd-action}-Objekten (siehe unten), die
vom Dienst zusätzlich unterstützte @dfn{Aktionen} neben den Standardaktionen
@code{start} und @code{stop} angeben. Hier aufgeführte Aktionen werden als
@command{herd}-Unterbefehle verfügbar gemacht:

@example
herd @var{Aktion} @var{Dienst} [@var{Argumente}…]
@end example

@item @code{auto-start?} (Vorgabe: @code{#t})
Ob dieser Dienst automatisch durch Shepherd gestartet werden soll. Wenn es
auf @code{#f} steht, muss der Dienst manuell über @code{herd start}
gestartet werden.

@item @code{documentation}
Eine Zeichenkette zur Dokumentation, die angezeigt wird, wenn man dies
ausführt:

@example
herd doc @var{Dienstname}
@end example

wobei der @var{Dienstname} eines der Symbole aus der @code{provision}-Liste
sein muss (siehe @ref{Invoking herd,,, shepherd, The GNU Shepherd Manual}).

@item @code{modules} (Vorgabe: @code{%default-modules})
Dies ist die Liste der Module, die in den Sichtbarkeitsbereich geladen sein
müssen, wenn @code{start} und @code{stop} ausgewertet werden.

@end table
@end deftp

@deftp {Datentyp} shepherd-action
Dieser Datentyp definiert zusätzliche Aktionen, die ein Shepherd-Dienst
implementiert (siehe oben).

@table @code
@item name
Die Aktion bezeichnendes Symbol.

@item documentation
Diese Zeichenkette ist die Dokumentation für die Aktion. Sie können sie
sehen, wenn Sie dies ausführen:

@example
herd doc @var{Dienst} action @var{Aktion}
@end example

@item procedure
Dies sollte ein G-Ausdruck sein, der zu einer mindestens ein Argument
nehmenden Prozedur ausgewertet wird. Das Argument ist der „running“-Wert des
Dienstes (siehe @ref{Slots of services,,, shepherd, The GNU Shepherd
Manual}).
@end table

Das folgende Beispiel definiert eine Aktion namens @code{sag-hallo}, die den
Benutzer freundlich begrüßt:

@lisp
(shepherd-action
  (name 'sag-hallo)
  (documentation "Sag Hallo!")
  (procedure #~(lambda (running . args)
                 (format #t "Hallo, Freund! Argumente: ~s\n"
                         args)
                 #t)))
@end lisp

Wenn wir annehmen, dass wir die Aktion zum Dienst @code{beispiel}
hinzufügen, können Sie Folgendes ausführen:

@example
# herd sag-hallo beispiel
Hallo, Freund! Argumente: ()
# herd sag-hallo beispiel a b c
Hallo, Freund! Argumente: ("a" "b" "c")
@end example

Wie Sie sehen können, ist das eine sehr ausgeklügelte Art, Hallo zu
sagen. Siehe @ref{Service Convenience,,, shepherd, The GNU Shepherd Manual}
für mehr Informationen zu Aktionen.
@end deftp

@defvr {Scheme-Variable} shepherd-root-service-type
Der Diensttyp für den Shepherd-„Wurzeldienst“ — also für PID@tie{}1.

Dieser Diensttyp stellt das Ziel für Diensterweiterungen dar, die
Shepherd-Dienste erzeugen sollen (siehe @ref{Diensttypen und Dienste} für
ein Beispiel). Jede Erweiterung muss eine Liste von
@code{<shepherd-service>}-Objekten übergeben.
@end defvr

@defvr {Scheme-Variable} %shepherd-root-service
Dieser Dienst repräsentiert PID@tie{}1.
@end defvr


@node Dokumentation
@chapter Dokumentation

@cindex Dokumentation, Suche danach
@cindex Suchen nach Dokumentation
@cindex Info, Dokumentationsformat
@cindex man-Pages (Handbuchseiten)
@cindex Handbuchseiten („Man-Pages“)
In den meisten Fällen liegt den mit Guix installierten Paketen auch
Dokumentation bei, die diese beschreibt. Die zwei üblichsten Formate für
Dokumentation sind „Info“, ein durchsuchbares Hypertextformat, das für
GNU-Software benutzt wird, und sogenannte „Handbuchseiten“ (englisch „Manual
Pages“, kurz Man-Pages), das linear aufgebaute Dokumentationsformat, das auf
Unix traditionell mitgeliefert wird. Info-Handbücher können mit dem Befehl
@command{info} oder mit Emacs abgerufen werden, auf Handbuchseiten kann mit
dem Befehl @command{man} zugegriffen werden.

Sie können die Dokumentation von auf Ihrem System installierter Software
nach einem Schlüsselwort durchsuchen. Zum Beispiel suchen Sie mit folgendem
Befehl in den Info-Handbüchern nach „TLS“.

@example
$ info -k TLS
"(emacs)Network Security" -- STARTTLS
"(emacs)Network Security" -- TLS
"(gnutls)Core TLS API" -- gnutls_certificate_set_verify_flags
"(gnutls)Core TLS API" -- gnutls_certificate_set_verify_function
…
@end example

@noindent
Mit folgendem Befehl suchen Sie dasselbe Schlüsselwort in Handbuchseiten:

@example
$ man -k TLS
SSL (7)              - OpenSSL SSL/TLS library
certtool (1)         - GnuTLS certificate tool
@dots {}
@end example

Diese Suchvorgänge finden ausschließlich lokal auf Ihrem Rechner statt,
wodurch gewährleistet ist, dass die Fundstellen zur von Ihnen auch
tatsächlich installierten Software passen, Sie für den Zugriff keine
Internetverbindung brauchen und Datenschutz gewährleistet bleibt.

Sobald Sie die Fundstellen kennen, können Sie zum Beispiel so die
entsprechende Dokumentation anzeigen lassen:

@example
$ info "(gnutls)Core TLS API"
@end example

@noindent
oder

@example
$ man certtool
@end example

Info-Handbücher sind in Abschnitte unterteilt und verfügen über Register
sowie Hyperlinks, wie jene, die Sie auch von Webseiten kennen. Der
@command{info}-Betrachter (siehe @ref{Top, Info reader,, info-stnd,
Stand-alone GNU Info}) und sein Gegenstück für Emacs (siehe @ref{Misc
Help,,, emacs, The GNU Emacs Manual}) verfügen über leicht erlernbare
Tastenkürzel, mit denen Sie in Handbüchern navigieren können. Siehe
@ref{Getting Started,,, info, Info: An Introduction} für eine Einführung in
die Info-Navigation.

@node Dateien zur Fehlersuche installieren
@chapter Dateien zur Fehlersuche installieren

@cindex Dateien zur Fehlersuche
Die Binärdateien von Programmen, wie sie zum Beispiel von den GCC-Compilern
erzeugt werden, sind in der Regel im ELF-Format gespeichert und enthalten
eine Sektion mit @dfn{Informationen zur Fehlersuche} (englisch „Debugging
Information“). Informationen zur Fehlersuche machen es möglich, dass der
Debugger, GDB, Binärcode dem Quellcode zuordnen kann. Das ist nötig, damit
es mit etwas Glück leicht ist, Fehler in einem kompilierten Programm zu
suchen.

Das Problem bei Informationen zur Fehlersuche ist, dass dadurch einiges an
Plattenplatz verbraucht wird. Zum Beispiel steuern die Informationen zur
Fehlersuche in der GNU-C-Bibliothek mehr als 60 MiB bei. Als ein Nutzer ist
es deswegen in der Regel nicht möglich, sämtliche Fehlersuchinformationen
für alle installierten Programme zu speichern. Andererseits sollten
Platzeinsparnisse nicht auf Kosten der Fehlersuche gehen — besonders im
GNU-System, wo es Nutzern leicht fallen sollte, ihre Freiheit, wie sie ihre
Rechner benutzen, auszuüben (siehe @ref{GNU-Distribution}).

Glücklicherweise gibt es in den GNU Binary Utilities (Binutils) und GDB
einen Mechanismus, mit dem Nutzer das Beste aus beiden Welten bekommen:
Informationen zur Fehlersuche können von den davon beschriebenen
Binärdateien losgelöst und in separaten Dateien gespeichert werden. GDB kann
dann Fehlersuchinformationen laden, wenn diese Dateien verfügbar sind (siehe
@ref{Separate Debug Files,,, gdb, Debugging with GDB}).

Die GNU-Distribution nutzt diesen Mechanismus aus, indem sie Informationen
zur Fehlersuche im Unterverzeichnis @code{lib/debug} einer separaten
Paketausgabe speichert, die den fantasielosen Namen @code{debug} trägt. Mit
dem folgenden Befehl können Sie zum Beispiel Informationen zur Fehlersuche
für die GNU-C-Bibliothek und für GNU Guile installieren:

@example
guix install glibc:debug guile:debug
@end example

GDB muss dann angewiesen werden, im Profil des Nutzers nach Informationen
zur Fehlersuche zu schauen, indem Sie die Variable
@code{debug-file-directory} entsprechend setzen (vielleicht möchsten Sie die
Variable in der Datei @file{~/.gdbinit} festlegen, siehe @ref{Startup,,,
gdb, Debugging with GDB}):

@example
(gdb) set debug-file-directory ~/.guix-profile/lib/debug
@end example

From there on, GDB will pick up debugging information from the @file{.debug}
files under @file{~/.guix-profile/lib/debug}.

Des Weiteren werden Sie höchstwahrscheinlich wollen, dass GDB den Quellcode,
der auf Fehler untersucht wird, anzeigen kann. Dazu müssen sie den
Quellcodes des Pakets, für das Sie sich interessieren (laden Sie ihn mit
@code{guix build --source} herunter; siehe @ref{Aufruf von guix build}), und
dann weisen Sie GDB an, in dem Verzeichnis zu suchen, indem Sie den
@code{directory}-Befehl benutzen (siehe @ref{Source Path, @code{directory},,
gdb, Debugging with GDB}).

@c XXX: keep me up-to-date
Der Mechanismus mit der @code{debug}-Ausgabe wird in Guix als Teil des
@code{gnu-build-system} implementiert (siehe @ref{Erstellungssysteme}). Zur Zeit
ist sie optional — nur für Pakete, für die ausdrücklich eine
@code{debug}-Ausgabe deklariert wurde, sind Informationen zur Fehlersuche
verfügbar. Um zu überprüfen, ob Pakete eine @code{debug}-Ausgabe mit
Informationen zur Fehlersuche haben, benutzen Sie @command{guix package
--list-available} (siehe @ref{Aufruf von guix package}).


@node Sicherheitsaktualisierungen
@chapter Sicherheitsaktualisierungen

@cindex Sicherheitsaktualisierungen
@cindex Sicherheitslücken
Occasionally, important security vulnerabilities are discovered in software
packages and must be patched.  Guix developers try hard to keep track of
known vulnerabilities and to apply fixes as soon as possible in the
@code{master} branch of Guix (we do not yet provide a ``stable'' branch
containing only security updates).  The @command{guix lint} tool helps
developers find out about vulnerable versions of software packages in the
distribution:

@smallexample
$ guix lint -c cve
gnu/packages/base.scm:652:2: glibc@@2.21: Wahrscheinlich angreifbar durch CVE-2015-1781, CVE-2015-7547
gnu/packages/gcc.scm:334:2: gcc@@4.9.3: Wahrscheinlich angreifbar durch CVE-2015-5276
gnu/packages/image.scm:312:2: openjpeg@@2.1.0: Wahrscheinlich angreifbar durch CVE-2016-1923, CVE-2016-1924
…
@end smallexample

Siehe @ref{Aufruf von guix lint} für weitere Informationen.

Guix verfolgt eine funktionale Disziplin bei der Paketverwaltung (siehe
@ref{Einführung}), was impliziert, dass bei jeder Änderung an einem Paket
@emph{jedes davon abhängige Paket} neu erstellt werden muss. Ohne einen
Mechanismus würde das Ausliefern von Sicherheitsaktualisierungen in
Kernpaketen wie libc oder Bash dadurch deutlich verlangsamt — schließlich
müsste quasi die gesamte Distribution neu erstellt werden. Vorerstellte
Binärdateien zu benutzen, wäre schon einmal eine Hilfe (siehe
@ref{Substitute}), aber die Auslieferung wäre immer noch laangsamer, als
wir es uns wünschen.

@cindex Veredelungen
Als Gegenmittel sind in Guix @dfn{Veredelungen} implementiert. Diese stellen
einen Mechanismus dar, mit dem kritische Aktualisierungen schnell an Guix’
Benutzer ausgeliefert werden können, ohne die Nachteile, zu denen es käme,
wenn wir die gesamte Distribution neu erstellen müssten. Die Idee dahinter
ist, nur das Paket, das einen Patch braucht, neu zu erstellen, und damit
dann Pakete, die der Nutzer ausdrücklich installiert hat und die vorher
Referenzen auf das alte Paket enthielten, zu „veredeln“. So eine Veredelung
kostet typischerweise nur sehr wenig, d.h.@: um Größenordnungen weniger, als
die ganze Abhängigkeitskette neu zu erstellen.

@cindex Ersetzungen von Paketen, bei Veredelungen
Nehmen wir also an, eine Sicherheitsaktualisierung müsste auf Bash angewandt
werden. Guix-Entwickler schreiben dann eine Paketdefinition für die
„reparierte“ Bash, sagen wir @code{bash-fixed}, auf die gleiche Art wie
immer (siehe @ref{Pakete definieren}). Dann wird die ursprüngliche
Paketdefinition um ein @code{replacement}-Feld (zu Deutsch „Ersetzung“)
erweitert, das auf das Paket verweist, in dem der Fehler behoben wurde:

@lisp
(define bash
  (package
    (name "bash")
    ;; …
    (replacement bash-fixed)))
@end lisp

Ab diesem Zeitpunkt wird jedes Paket, das Sie installieren und das direkt
oder indirekt von Bash abhängt — also die von @command{guix gc --requisites}
ausgegebenen Pakete (siehe @ref{Aufruf von guix gc}) —, automatisch
„umgeschrieben“, so dass es @code{bash-fixed} referenziert, wo es vorher
@code{bash} referenziert hatte. Die Dauer dieses Veredelungsprozesses ist
proportional zur Größe des Pakets und liegt auf einer neuen Maschine für ein
„durchschnittliches“ Paket bei unter einer Minute. Veredeln ist rekursiv:
Wenn eine indirekte Abhängigkeit veredelt werden muss, „propagiert“ der
Veredelungsprozess durch die abhängigen Pakete und endet mit dem Paket, das
der Nutzer installiert.

Zur Zeit muss der Name und die Version einer Veredelung gleichlang wie die
beim ersetzten Paket sein (also bei @code{bash-fixed} und @code{bash} im
Beispiel oben). Diese Einschränkung kommt daher, dass beim Veredeln der
Inhalt von Dateien, einschließlich Binärdateien, durch einfache Ersetzungen
„geflickt“ wird. Es gibt noch mehr Einschränkungen: Wenn zum Beispiel ein
Paket veredelt wird, das eine gemeinsame Bibliothek („Shared Library“)
verwendet, muss der @code{SONAME} von Original und Ersatz derselbe sein und
die beiden müssen binär kompatibel sein.

Mit der Befehlszeilenoption @option{--no-grafts} können Sie den
Veredelungsmechanismus zwingend abschalten (siehe @ref{Gemeinsame Erstellungsoptionen,
@option{--no-grafts}}). Der Befehl

@example
guix build bash --no-grafts
@end example

@noindent
liefert also den Namen der Store-Datei mit der ursprünglichen Bash, während

@example
guix build bash
@end example

@noindent
den Namen der Store-Datei für die „reparierte“ Ersatz-Bash liefert. Dadurch
können Sie zwischen den beiden Varianten von Bash unterscheiden.

Um zu prüfen, welche Bash Ihr gesamtes Profil referenziert, können Sie
diesen Befehl hier laufen lassen (siehe @ref{Aufruf von guix gc}):

@example
guix gc -R `readlink -f ~/.guix-profile` | grep bash
@end example

@noindent
Dann vergleichen Sie die Namen der Store-Objekte, die Sie ausgegeben
bekommen, mit den beiden Bash-Paketnamen oben. Ebenso können Sie eine ganze
Guix-Systemgeneration überprüfen:

@example
guix gc -R `guix system build my-config.scm` | grep bash
@end example

Zum Schluss können Sie mit dem Befehl @command{lsof} überprüfen, welches von
den Bash-Paketen die laufenden Prozesse benutzen:

@example
lsof | grep /gnu/store/.*bash
@end example


@node Bootstrapping
@chapter Bootstrapping

@c Adapted from the ELS 2013 paper.

@cindex Bootstrapping

Wenn wir von Bootstrapping sprechen, meinen wir damit, wie die Distribution
„aus dem Nichts“ erstellt werden kann. Erinnern Sie sich, wie die
Erstellungsumgebung für eine Ableitung nichts außer ihren deklarierten
Eingaben enthält (siehe @ref{Einführung})? Daraus ergibt sich ein
Henne-Ei-Problem: Wie kann so das allererste Paket entstehen? Womit wird der
Compiler kompiliert? Beachten Sie, diese Frage ist nur für neugierige Hacker
und keine normalen Nutzer interessant. Wenn Sie sich selbst als „normaler
Nutzer“ sehen, dürfen Sie getrost diesen Abschnitt hier überspringen.

@cindex Bootstrap-Binärdateien
Das GNU-System besteht in erster Linie aus C-Code, dessen Kern die libc
ist. Das GNU-Erstellungssystem selbst setzt voraus, dass eine Bourne-Shell
und die Kommandozeilenwerkzeuge der GNU-Coreutils, Awk, Findutils, „sed“ und
„grep“ verfügbar sind. Des Weiteren sind Programme für die Erstellung — also
Programme, die @code{./configure}, @code{make}, etc.@: ausführen — in Guile
Scheme geschrieben (siehe @ref{Ableitungen}). Folglich ist es erforderlich,
dass, damit überhaupt irgendetwas erstellt werden kann, Guix vorerstellte
Binärdateien von Guile, GCC, Binutils, libc und den anderen oben genannten
Paketen verwendet. Diese bezeichnen wir als die
@dfn{Bootstrap-Binärdateien}.

These bootstrap binaries are ``taken for granted'', though we can also
re-create them if needed (@pxref{Vorbereitung zur Verwendung der Bootstrap-Binärdateien}).

@menu
* Bootstrapping mit kleinerem Seed::  Ein Bootstrapping, wie GNU es 
                                        verdient.
* Vorbereitung zur Verwendung der Bootstrap-Binärdateien::  Das 
                                                               Allerwichtigste 
                                                               erstellen.
@end menu

@node Bootstrapping mit kleinerem Seed
@section Das Bootstrapping mit kleinerem Seed

Guix wird — wie andere GNU/Linux-Distributionen auch — traditionell aus
einer Menge von Bootstrap-Binärdateien heraus erstellt: der Bourne-Shell,
den Befehlszeilenwerkzeugen der GNU Coreutils, Awk, Findutils, „sed“ und
„grep“ sowie Guile, GCC, Binutils und der GNU-C-Bibliothek (siehe
@ref{Bootstrapping}). Normalerweise werden diese Bootstrap-Binärdateien
„stillschweigend vorausgesetzt“.

Taking the bootstrap binaries for granted means that we consider them to be
a correct and trustworthy ``seed'' for building the complete system.
Therein lies a problem: the combined size of these bootstrap binaries is
about 250MB (@pxref{Bootstrappable Builds,,, mes, GNU Mes}).  Auditing or
even inspecting these is next to impossible.

Für @code{i686-linux} und @code{x86_64-linux} unterstützt Guix jetzt ein
Bootstrapping „mit kleinerem Seed“ @footnote{Gerne würden wir „Bootstrapping
aus dem Quellcode allein“ sagen und wir arbeiten auch daran, aber das schon
jetzt zu sagen, wäre eine Übertreibung.}.

The Reduced Binary Seed bootstrap removes the most critical tools---from a
trust perspective---from the bootstrap binaries: GCC, Binutils and the GNU C
Library are replaced by: @code{bootstrap-mescc-tools} (a tiny assembler and
linker) and @code{bootstrap-mes} (a small Scheme Interpreter and a C
compiler written in Scheme and the Mes C Library, built for TinyCC and for
GCC).

Using these new binary seeds the ``missing'' Binutils, GCC, and the GNU C
Library are built from source.  From here on the more traditional bootstrap
process resumes.  This approach has reduced the bootstrap binaries in size
to about 145MB in Guix v1.1.

The next step that Guix has taken is to replace the shell and all its
utilities with implementations in Guile Scheme, the @emph{Scheme-only
bootstrap}.  Gash (@pxref{Gash,,, gash, The Gash manual}) is a
POSIX-compatible shell that replaces Bash, and it comes with Gash Utils
which has minimalist replacements for Awk, the GNU Core Utilities, Grep,
Gzip, Sed, and Tar.  The rest of the bootstrap binary seeds that were
removed are now built from source.

Building the GNU System from source is currently only possibly by adding
some historical GNU packages as intermediate steps@footnote{Packages such as
@code{gcc-2.95.3}, @code{binutils-2.14}, @code{glibc-2.2.5},
@code{gzip-1.2.4}, @code{tar-1.22}, and some others.  For details, see
@file{gnu/packages/commencement.scm}.}.  As Gash and Gash Utils mature, and
GNU packages become more bootstrappable again (e.g., new releases of GNU Sed
will also ship as gzipped tarballs again, as alternative to the hard to
bootstrap @code{xz}-compression), this set of added packages can hopefully
be reduced again.

The graph below shows the resulting dependency graph for
@code{gcc-core-mesboot0}, the bootstrap compiler used for the traditional
bootstrap of the rest of the Guix System.

@c ./pre-inst-env guix graph -e '(@@ (gnu packages commencement) gcc-core-mesboot0)' | sed -re 's,((bootstrap-mescc-tools|bootstrap-mes|guile-bootstrap).*shape =) box,\1 ellipse,' > doc/images/gcc-core-mesboot0-graph.dot
@image{images/gcc-core-mesboot0-graph,6in,,Dependency graph of
gcc-core-mesboot0}

The only significant binary bootstrap seeds that remain@footnote{ Ignoring
the 68KB @code{mescc-tools}; that will be removed later, together with
@code{mes}.} are a Scheme intepreter and a Scheme compiler: GNU Mes and GNU
Guile@footnote{Not shown in this graph are the static binaries for
@file{bash}, @code{tar}, and @code{xz} that are used to get Guile running.}.

This further reduction has brought down the size of the binary seed to about
60MB for @code{i686-linux} and @code{x86_64-linux}.

Work is ongoing to remove all binary blobs from our free software bootstrap
stack, working towards a Full Source Bootstrap.  Also ongoing is work to
bring these bootstraps to the @code{arm-linux} and @code{aarch64-linux}
architectures and to the Hurd.

If you are interested, join us on @samp{#bootstrappable} on the Freenode IRC
network or discuss on @email{bug-mes@@gnu.org} or
@email{gash-devel@@nongnu.org}.

@node Vorbereitung zur Verwendung der Bootstrap-Binärdateien
@section Vorbereitung zur Verwendung der Bootstrap-Binärdateien

@c As of Emacs 24.3, Info-mode displays the image, but since it's a
@c large image, it's hard to scroll.  Oh well.
@image{images/bootstrap-graph,6in,,Abhängigkeitsgraph der frühen
Bootstrap-Ableitungen}

Die Abbildung oben zeigt den Anfang des Abhängigkeitsgraphen der
Distribution und entspricht den Paketdefinitionen im @code{(gnu package
bootstrap)}-Modul. Eine ähnliche Grafik kann mit @command{guix graph} (siehe
@ref{Aufruf von guix graph}) erzeugt werden:

@example
guix graph -t derivation \
  -e '(@@@@ (gnu packages bootstrap) %bootstrap-gcc)' \
  | dot -Tps > gcc.ps
@end example

or, for the further Reduced Binary Seed bootstrap

@example
guix graph -t derivation \
  -e '(@@@@ (gnu packages bootstrap) %bootstrap-mes)' \
  | dot -Tps > mes.ps
@end example

Bei diesem Detaillierungsgrad sind die Dinge recht komplex. Guile selbst
besteht aus einer ausführbaren ELF-Datei neben vielen Quelldateien und
kompilierten Scheme-Dateien, die dynamisch bei der Ausführung geladen
werden. Das wird in dem im Graph gezeigten @file{guile-2.0.7.tar.xz}-Archiv
gespeichert. Das Archiv ist Teil von Guix’ „Quelldistribution“ und wird in
den Store mit @code{add-to-store} (siehe @ref{Der Store}) eingefügt.

Doch wie schreibt man eine Ableitung, die dieses Tarball-Archiv entpackt und
in den Store einfügt? Um dieses Problem zu lösen, benutzt die
@code{guile-bootstrap-2.0.drv}-Ableitung — die erste, die erstellt wird —
@code{bash} als Ersteller, welche wiederum @code{build-bootstrap-guile.sh}
ausführt, was über einen Aufruf von @code{tar} den Tarball
entpackt. Deswegen sind @file{bash}, @file{tar}, @file{xz} und @file{mkdir}
als statisch gebundene Binärdateien auch Teil der Guix-Quelldistribution,
die nur dazu da sind, dass der Guile-Tarball entpackt werden kann.

Once @code{guile-bootstrap-2.0.drv} is built, we have a functioning Guile
that can be used to run subsequent build programs.  Its first task is to
download tarballs containing the other pre-built binaries---this is what the
@file{.tar.xz.drv} derivations do.  Guix modules such as
@code{ftp-client.scm} are used for this purpose.  The
@code{module-import.drv} derivations import those modules in a directory in
the store, using the original layout.  The @code{module-import-compiled.drv}
derivations compile those modules, and write them in an output directory
with the right layout.  This corresponds to the @code{#:modules} argument of
@code{build-expression->derivation} (@pxref{Ableitungen}).

Schließlich werden die verschiedenen Tarballs durch die Ableitungen
@code{gcc-bootstrap-0.drv}, @code{glibc-bootstrap-0.drv}, oder
@code{bootstrap-mes-0.drv} und @code{bootstrap-mescc-tools-0.drv},
entpackt. Zu diesem Zeitpunkt haben wir eine fertige Toolchain für C.

@unnumberedsec Die Erstellungswerkzeuge erstellen

Das Bootstrapping ist abgeschlossen, sobald eine vollständige Toolchain
vorliegt, die von den oben erläuterten vorerstellten
Bootstrapping-Werkzeugen @emph{nicht} abhängt. Diese Voraussetzung, keine
Abhängigkeiten zu haben, überprüft man, indem man schaut, ob die Dateien der
endgültigen Toolchain frei von Referenzen auf die
@file{/gnu/store}-Verzeichnisse der Bootstrapping-Eingaben sind. Der
Vorgang, diese „finale“ Toolchain zu bekommen, wird von den
Paketdefinitionen beschrieben, die Sie im Modul @code{(gnu packages
commencement)} finden.

Mit dem Befehl @command{guix graph} können wir gegenüber dem obigen Graphen
„herauszoomen“, indem wir alles auf der Ebene von Paketobjekten statt auf
der von einzelnen Ableitungen betrachten — denken Sie daran, dass ein Paket
zu mehreren Ableitungen führen kann; normalerweise einer, die seine
Quelldateien herunterlädt, einer, die die benötigten Guile-Module erstellt,
und einer, die das Paket dann tatsächlich aus seinem Quellcode heraus
erstellt. Der Befehl

@example
guix graph -t bag \
  -e '(@@@@ (gnu packages commencement)
          glibc-final-with-bootstrap-bash)' | xdot -
@end example

@noindent
displays the dependency graph leading to the ``final'' C
library@footnote{You may notice the @code{glibc-intermediate} label,
suggesting that it is not @emph{quite} final, but as a good approximation,
we will consider it final.}, depicted below.

@image{images/bootstrap-packages,6in,,Abhängigkeitsgraph der frühen Pakete}

@c See <https://lists.gnu.org/archive/html/gnu-system-discuss/2012-10/msg00000.html>.
Das erste Werkzeug, das mit den Bootstrapping-Binärdateien erstellt wird,
ist GNU@tie{}Make — beachten Sie das oben sichtbare @code{make-boot0} —, das
eine Voraussetzung aller folgenden Pakete ist. Von da aus werden Findutils
und Diffutils erstellt.

Then come the first-stage Binutils and GCC, built as pseudo cross
tools---i.e., with @option{--target} equal to @option{--host}.  They are
used to build libc.  Thanks to this cross-build trick, this libc is
guaranteed not to hold any reference to the initial tool chain.

From there the final Binutils and GCC (not shown above) are built.  GCC uses
@command{ld} from the final Binutils, and links programs against the
just-built libc.  This tool chain is used to build the other packages used
by Guix and by the GNU Build System: Guile, Bash, Coreutils, etc.

Und voilà! Wenn das geschafft ist, haben wir die vollständige Menge von
Erstellungswerkzeugen, die das GNU-Erstellungssystem erwartet. Sie sind in
der Variablen @code{%final-inputs} des Moduls @code{(gnu packages
commencement)} zu finden und werden von jedem Paket implizit benutzt, das
das @code{gnu-build-system} verwendet (siehe @ref{Erstellungssysteme,
@code{gnu-build-system}}).


@unnumberedsec Die Bootstrapping-Binärdateien erstellen

@cindex Bootstrap-Binärdateien
Weil die finale Toolchain nicht von den Bootstrapping-Binärdateien abhängt,
müssen diese nur selten aktualisiert werden. Es ist dennoch sinnvoll, sie
automatisiert erzeugen zu können, wenn sie doch aktualisiert werden. Das
Modul @code{(gnu packages make-bootstrap)} ermöglicht dies.

Mit dem folgenden Befehl werden die Tarball-Archive erstellt, die die
Bootstrapping-Binärdateien enthalten (beim traditionellen Bootstrapping sind
das Binutils, GCC und glibc; beim Bootstrapping mit kleinerem Seed sind es
linux-libre-headers, bootstrap-mescc-tools, bootstrap-mes; dazu kommen Guile
sowie ein Tarball mit einer Mischung aus Coreutils und anderen grundlegenden
Befehlszeilenwerkzeugen):

@example
guix build bootstrap-tarballs
@end example

Die erzeugten Tarballs sind es, auf die im Modul @code{(gnu packages
bootstrap)} verwiesen werden sollte, das am Anfang dieses Abschnitts erwähnt
wurde.

Können Sie noch folgen? Dann haben Sie vielleicht schon angefangen, sich zu
fragen, wann wir denn einen Fixpunkt erreichen. Das ist eine interessante
Frage! Leider wissen wir es nicht, aber wenn Sie es herausfinden wollen (und
Ihnen die nennenswerten Rechen- und Speicherkapazitäten dafür zur Verfügung
stehen), dann lassen Sie es uns wissen.

@unnumberedsec Die Menge an Bootstrapping-Binärdateien verkleinern

Zu unserem traditionellen Bootstrapping gehören GCC, GNU Libc, Guile,
etc. Das ist ganz schön viel binärer Code! Warum ist das ein Problem? Es ist
deswegen ein Problem, weil es praktisch unmöglich ist, solch große Klumpen
binären Codes einem Audit zu unterziehen. Dadurch wird es schwer,
nachzuvollziehen, welcher Quellcode ihn erzeugt hat. Jede ausführbare
Binärdatei, für die kein Audit möglich ist, macht uns verwundbar gegenüber
Hintertüren in Compilern, wie Ken Thompson sie in seiner Arbeit von 1984,
@emph{Reflections on Trusting Trust}, beschrieben hat.

Wir senken das Risiko, indem wir unsere Bootstrapping-Binärdateien immer mit
einer früheren Guix-Version erzeugen. Trotzdem fehlt uns das Niveau an
Transparenz, das wir am übrigen Paketabhängigkeitsgraphen wertschätzen, wo
Guix immer vom Quellcode eindeutig auf die Binärdateien abbildet. Unser Ziel
ist also, die Menge an Bootstrapping-Binärdateien so weit wie möglich zu
verkleinern.

Auf dem @uref{https://bootstrappable.org, Webauftritt von
Bootstrappable.org} werden laufende Projekte mit diesem Zweck
aufgeführt. Bei einem davon geht es darum, den Bootstrapping-GCC durch eine
Folge von Assemblern, Interpretierern und Compilern zunehmender Komplexität
zu ersetzen, die von Anfang an aus Quellcode heraus erstellt werden kann,
angefangen bei einem einfachen, überprüfbaren Assembler.

Unsere erste große Leistung stellt die Ersetzung von GCC, der
GNU-C-Bibliothek und der Binutils durch die MesCC-Tools (einem einfachen
Binder für hexadezimal dargestellte Maschinenprogramme und einem
Makro-Assembler) und Mes dar (siehe @ref{Top, GNU Mes Reference Manual,,
mes, GNU Mes}, einem Scheme-Interpretierer und in Scheme geschriebenen
C-Compiler). Weder MesCC-Tools noch Mes können bereits von Grund auf
gebootstrapt werden, daher schleusen wir sie als binäre Seeds ein. Wir
nennen das unser Bootstrapping mit kleinerem Seed, weil es die Größe unserer
Bootstrapping-Binärdateien halbiert hat! Außerdem haben wir damit keinerlei
Binärdatei für einen C-Compiler; auf i686-linux und x86_64-linux werden
Guix-Pakete ganz ohne binären C-Compiler gebootstrapt.

Wir arbeiten daran, MesCC-Tools und Mes vollständig bootstrappen zu können,
und behalten auch andere Bootstrapping-Binärdateien im Blick. Ihre
Unterstützung ist willkommen!

@node Portierung
@chapter Auf eine neue Plattform portieren

Wie oben beschrieben ist die GNU-Distribution eigenständig und diese
Eigenständigkeit wird erreicht, indem sie aus vorerstellten
„Bootstrap-Binärdateien“ heraus erstellt werden kann (siehe
@ref{Bootstrapping}). Diese Binärdateien unterscheiden sich je nach
verwendetem Betriebssystem-Kernel, nach der Prozessorarchitektur und der
Anwendungsbinärschnittstelle („Application Binary Interface“, kurz ABI). Um
die Distribution also auf eine noch nicht unterstützte Plattform zu
portieren, muss man diese Bootstrap-Binärdateien für diese Plattform
erstellen und das Modul @code{(gnu packages bootstrap)} aktualisieren, damit
es sie benutzt.

Zum Glück kann Guix diese Bootstrap-Binärdateien
@emph{cross-kompilieren}. Wenn alles gut geht, und vorausgesetzt, die
GNU-Werkzeuge (zusammen werden sie als GNU-„Toolchain“ bezeichnet)
unterstützen diese Zielplattform auch, dann kann es völlig ausreichen, dass
Sie einen Befehl wie hier ausführen:

@example
guix build --target=armv5tel-linux-gnueabi bootstrap-tarballs
@end example

Damit das funktioniert, muss erst die @code{glibc-dynamic-linker}-Prozedur
in @code{(gnu packages bootstrap)} angepasst werden, damit sie den richtigen
Dateinamen für den dynamischen Binder von libc auf dieser Plattform liefert;
ebenso muss @code{system->linux-architecture} in @code{(gnu packages linux)}
mit den Informationen über die neue Plattform versorgt werden.

Sobald diese erstellt wurden, muss das Modul @code{(gnu packages bootstrap)}
aktualisiert werden, damit es diese Binärdateien für die Zielplattform
benutzt. Das heißt, die Hashes und URLs der Bootstrap-Tarballs für die neue
Plattform müssen neben denen für die bisher unterstützten Plattformen
aufgeführt werden. Der Bootstrap-Guile-Tarball wird besonders behandelt: Von
ihm wird erwartet, dass er lokal verfügbar ist, und @file{gnu/local.mk}
enthält Regeln, um ihn für die unterstützten Architekturen herunterzuladen;
eine Regel muss auch für die neue Plattform hinzugefügt werden.

In practice, there may be some complications.  First, it may be that the
extended GNU triplet that specifies an ABI (like the @code{eabi} suffix
above) is not recognized by all the GNU tools.  Typically, glibc recognizes
some of these, whereas GCC uses an extra @option{--with-abi} configure flag
(see @code{gcc.scm} for examples of how to handle this).  Second, some of
the required packages could fail to build for that platform.  Lastly, the
generated binaries could be broken for some reason.

@c *********************************************************************
@include contributing.de.texi

@c *********************************************************************
@node Danksagungen
@chapter Danksagungen

Guix is based on the @uref{https://nixos.org/nix/, Nix package manager},
which was designed and implemented by Eelco Dolstra, with contributions from
other people (see the @file{nix/AUTHORS} file in Guix).  Nix pioneered
functional package management, and promoted unprecedented features, such as
transactional package upgrades and rollbacks, per-user profiles, and
referentially transparent build processes.  Without this work, Guix would
not exist.

Die Nix-basierten Software-Distributionen Nixpkgs und NixOS waren auch eine
Inspiration für Guix.

GNU@tie{}Guix ist selbst das Produkt kollektiver Arbeit mit Beiträgen durch
eine Vielzahl von Leuten. Siehe die Datei @file{AUTHORS} in Guix für mehr
Informationen, wer diese wunderbaren Menschen sind. In der Datei
@file{THANKS} finden Sie eine Liste der Leute, die uns geholfen haben, indem
Sie Fehler gemeldet, sich um unsere Infrastruktur gekümmert, künstlerische
Arbeit und schön gestaltete Themen beigesteuert, Vorschläge gemacht und noch
vieles mehr getan haben — vielen Dank!


@c *********************************************************************
@node GNU-Lizenz für freie Dokumentation
@appendix GNU-Lizenz für freie Dokumentation
@cindex Lizenz, GNU-Lizenz für freie Dokumentation
@include fdl-1.3.texi

@c *********************************************************************
@node Konzeptverzeichnis
@unnumbered Konzeptverzeichnis
@printindex cp

@node Programmierverzeichnis
@unnumbered Programmierverzeichnis
@syncodeindex tp fn
@syncodeindex vr fn
@printindex fn

@bye

@c Local Variables:
@c ispell-local-dictionary: "american";
@c End:
