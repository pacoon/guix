This is guix.info, produced by makeinfo version 6.7 from guix.texi.

Copyright © 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 Ludovic
Courtès
Copyright © 2013, 2014, 2016 Andreas Enge
Copyright © 2013 Nikita Karetnikov
Copyright © 2014, 2015, 2016 Alex Kost
Copyright © 2015, 2016 Mathieu Lirzin
Copyright © 2014 Pierre-Antoine Rault
Copyright © 2015 Taylan Ulrich Bayırlı/Kammer
Copyright © 2015, 2016, 2017, 2019, 2020 Leo Famulari
Copyright © 2015, 2016, 2017, 2018, 2019, 2020 Ricardo Wurmus
Copyright © 2016 Ben Woodcroft
Copyright © 2016, 2017, 2018 Chris Marusich
Copyright © 2016, 2017, 2018, 2019, 2020 Efraim Flashner
Copyright © 2016 John Darrington
Copyright © 2016, 2017 Nikita Gillmann
Copyright © 2016, 2017, 2018, 2019, 2020 Jan Nieuwenhuizen
Copyright © 2016, 2017, 2018, 2019, 2020 Julien Lepiller
Copyright © 2016 Alex ter Weele
Copyright © 2016, 2017, 2018, 2019 Christopher Baines
Copyright © 2017, 2018, 2019 Clément Lassieur
Copyright © 2017, 2018 Mathieu Othacehe
Copyright © 2017 Federico Beffa
Copyright © 2017, 2018 Carlo Zancanaro
Copyright © 2017 Thomas Danckaert
Copyright © 2017 humanitiesNerd
Copyright © 2017 Christopher Allan Webber
Copyright © 2017, 2018, 2019, 2020 Marius Bakke
Copyright © 2017, 2019, 2020 Hartmut Goebel
Copyright © 2017, 2019, 2020 Maxim Cournoyer
Copyright © 2017, 2018, 2019, 2020 Tobias Geerinckx-Rice
Copyright © 2017 George Clemmer
Copyright © 2017 Andy Wingo
Copyright © 2017, 2018, 2019 Arun Isaac
Copyright © 2017 nee
Copyright © 2018 Rutger Helling
Copyright © 2018 Oleg Pykhalov
Copyright © 2018 Mike Gerwitz
Copyright © 2018 Pierre-Antoine Rouby
Copyright © 2018, 2019 Gábor Boskovits
Copyright © 2018, 2019 Florian Pelz
Copyright © 2018 Laura Lazzati
Copyright © 2018 Alex Vong
Copyright © 2019 Josh Holland
Copyright © 2019, 2020 Diego Nicola Barbato
Copyright © 2019 Ivan Petkov
Copyright © 2019 Jakob L. Kreuze
Copyright © 2019 Kyle Andrews
Copyright © 2019 Alex Griffin
Copyright © 2019 Guillaume Le Vaillant
Copyright © 2020 Leo Prikler
Copyright © 2019, 2020 Simon Tournier
Copyright © 2020 Wiktor Żelazny
Copyright © 2020 Damien Cassou
Copyright © 2020 Jakub Kądziołka
Copyright © 2020 Jack Hill
Copyright © 2020 Naga Malleswari
Copyright © 2020 Brice Waegeneire
Copyright © 2020 R Veera Kumar
Copyright © 2020 Pierre Langlois
Copyright © 2020 pinoaffe

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled “GNU Free
Documentation License”.
INFO-DIR-SECTION System administration
START-INFO-DIR-ENTRY
* Guix: (guix).       Manage installed software and system configuration.
* guix package: (guix)Invoking guix package.  Installing, removing, and upgrading packages.
* guix gc: (guix)Invoking guix gc.            Reclaiming unused disk space.
* guix pull: (guix)Invoking guix pull.        Update the list of available packages.
* guix system: (guix)Invoking guix system.    Manage the operating system configuration.
* guix deploy: (guix)Invoking guix deploy.    Manage operating system configurations for remote hosts.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* guix environment: (guix)Invoking guix environment. Building development environments with Guix.
* guix build: (guix)Invoking guix build.      Building packages.
* guix pack: (guix)Invoking guix pack.        Creating binary bundles.
END-INFO-DIR-ENTRY


File: guix.info,  Node: Audio Services,  Next: Virtualization Services,  Prev: Power Management Services,  Up: Services

8.8.23 Audio Services
---------------------

The ‘(gnu services audio)’ module provides a service to start MPD (the
Music Player Daemon).

Music Player Daemon
...................

The Music Player Daemon (MPD) is a service that can play music while
being controlled from the local machine or over the network by a variety
of clients.

   The following example shows how one might run ‘mpd’ as user ‘"bob"’
on port ‘6666’.  It uses pulseaudio for output.

     (service mpd-service-type
              (mpd-configuration
               (user "bob")
               (port "6666")))

 -- Scheme Variable: mpd-service-type
     The service type for ‘mpd’

 -- Data Type: mpd-configuration
     Data type representing the configuration of ‘mpd’.

     ‘user’ (default: ‘"mpd"’)
          The user to run mpd as.

     ‘music-dir’ (default: ‘"~/Music"’)
          The directory to scan for music files.

     ‘playlist-dir’ (default: ‘"~/.mpd/playlists"’)
          The directory to store playlists.

     ‘db-file’ (default: ‘"~/.mpd/tag_cache"’)
          The location of the music database.

     ‘state-file’ (default: ‘"~/.mpd/state"’)
          The location of the file that stores current MPD’s state.

     ‘sticker-file’ (default: ‘"~/.mpd/sticker.sql"’)
          The location of the sticker database.

     ‘port’ (default: ‘"6600"’)
          The port to run mpd on.

     ‘address’ (default: ‘"any"’)
          The address that mpd will bind to.  To use a Unix domain
          socket, an absolute path can be specified here.

     ‘outputs’ (default: ‘"(list (mpd-output))"’)
          The audio outputs that MPD can use.  By default this is a
          single output using pulseaudio.

 -- Data Type: mpd-output
     Data type representing an ‘mpd’ audio output.

     ‘name’ (default: ‘"MPD"’)
          The name of the audio output.

     ‘type’ (default: ‘"pulse"’)
          The type of audio output.

     ‘enabled?’ (default: ‘#t’)
          Specifies whether this audio output is enabled when MPD is
          started.  By default, all audio outputs are enabled.  This is
          just the default setting when there is no state file; with a
          state file, the previous state is restored.

     ‘tags?’ (default: ‘#t’)
          If set to ‘#f’, then MPD will not send tags to this output.
          This is only useful for output plugins that can receive tags,
          for example the ‘httpd’ output plugin.

     ‘always-on?’ (default: ‘#f’)
          If set to ‘#t’, then MPD attempts to keep this audio output
          always open.  This may be useful for streaming servers, when
          you don’t want to disconnect all listeners even when playback
          is accidentally stopped.

     ‘mixer-type’
          This field accepts a symbol that specifies which mixer should
          be used for this audio output: the ‘hardware’ mixer, the
          ‘software’ mixer, the ‘null’ mixer (allows setting the volume,
          but with no effect; this can be used as a trick to implement
          an external mixer External Mixer) or no mixer (‘none’).

     ‘extra-options’ (default: ‘'()"’)
          An association list of option symbols to string values to be
          appended to the audio output configuration.

   The following example shows a configuration of ‘mpd’ that provides an
HTTP audio streaming output.

     (service mpd-service-type
              (mpd-configuration
                (outputs
                  (list (mpd-output
                          (name "streaming")
                          (type "httpd")
                          (mixer-type 'null)
                          (extra-options
                           `((encoder . "vorbis")
                             (port    . "8080"))))))))


File: guix.info,  Node: Virtualization Services,  Next: Version Control Services,  Prev: Audio Services,  Up: Services

8.8.24 Virtualization services
------------------------------

The ‘(gnu services virtualization)’ module provides services for the
libvirt and virtlog daemons, as well as other virtualization-related
services.

Libvirt daemon
..............

‘libvirtd’ is the server side daemon component of the libvirt
virtualization management system.  This daemon runs on host servers and
performs required management tasks for virtualized guests.

 -- Scheme Variable: libvirt-service-type
     This is the type of the libvirt daemon (https://libvirt.org).  Its
     value must be a ‘libvirt-configuration’.

          (service libvirt-service-type
                   (libvirt-configuration
                    (unix-sock-group "libvirt")
                    (tls-port "16555")))

   Available ‘libvirt-configuration’ fields are:

 -- ‘libvirt-configuration’ parameter: package libvirt
     Libvirt package.

 -- ‘libvirt-configuration’ parameter: boolean listen-tls?
     Flag listening for secure TLS connections on the public TCP/IP
     port.  must set ‘listen’ for this to have any effect.

     It is necessary to setup a CA and issue server certificates before
     using this capability.

     Defaults to ‘#t’.

 -- ‘libvirt-configuration’ parameter: boolean listen-tcp?
     Listen for unencrypted TCP connections on the public TCP/IP port.
     must set ‘listen’ for this to have any effect.

     Using the TCP socket requires SASL authentication by default.  Only
     SASL mechanisms which support data encryption are allowed.  This is
     DIGEST_MD5 and GSSAPI (Kerberos5)

     Defaults to ‘#f’.

 -- ‘libvirt-configuration’ parameter: string tls-port
     Port for accepting secure TLS connections This can be a port
     number, or service name

     Defaults to ‘"16514"’.

 -- ‘libvirt-configuration’ parameter: string tcp-port
     Port for accepting insecure TCP connections This can be a port
     number, or service name

     Defaults to ‘"16509"’.

 -- ‘libvirt-configuration’ parameter: string listen-addr
     IP address or hostname used for client connections.

     Defaults to ‘"0.0.0.0"’.

 -- ‘libvirt-configuration’ parameter: boolean mdns-adv?
     Flag toggling mDNS advertisement of the libvirt service.

     Alternatively can disable for all services on a host by stopping
     the Avahi daemon.

     Defaults to ‘#f’.

 -- ‘libvirt-configuration’ parameter: string mdns-name
     Default mDNS advertisement name.  This must be unique on the
     immediate broadcast network.

     Defaults to ‘"Virtualization Host <hostname>"’.

 -- ‘libvirt-configuration’ parameter: string unix-sock-group
     UNIX domain socket group ownership.  This can be used to allow a
     ’trusted’ set of users access to management capabilities without
     becoming root.

     Defaults to ‘"root"’.

 -- ‘libvirt-configuration’ parameter: string unix-sock-ro-perms
     UNIX socket permissions for the R/O socket.  This is used for
     monitoring VM status only.

     Defaults to ‘"0777"’.

 -- ‘libvirt-configuration’ parameter: string unix-sock-rw-perms
     UNIX socket permissions for the R/W socket.  Default allows only
     root.  If PolicyKit is enabled on the socket, the default will
     change to allow everyone (eg, 0777)

     Defaults to ‘"0770"’.

 -- ‘libvirt-configuration’ parameter: string unix-sock-admin-perms
     UNIX socket permissions for the admin socket.  Default allows only
     owner (root), do not change it unless you are sure to whom you are
     exposing the access to.

     Defaults to ‘"0777"’.

 -- ‘libvirt-configuration’ parameter: string unix-sock-dir
     The directory in which sockets will be found/created.

     Defaults to ‘"/var/run/libvirt"’.

 -- ‘libvirt-configuration’ parameter: string auth-unix-ro
     Authentication scheme for UNIX read-only sockets.  By default
     socket permissions allow anyone to connect

     Defaults to ‘"polkit"’.

 -- ‘libvirt-configuration’ parameter: string auth-unix-rw
     Authentication scheme for UNIX read-write sockets.  By default
     socket permissions only allow root.  If PolicyKit support was
     compiled into libvirt, the default will be to use ’polkit’ auth.

     Defaults to ‘"polkit"’.

 -- ‘libvirt-configuration’ parameter: string auth-tcp
     Authentication scheme for TCP sockets.  If you don’t enable SASL,
     then all TCP traffic is cleartext.  Don’t do this outside of a
     dev/test scenario.

     Defaults to ‘"sasl"’.

 -- ‘libvirt-configuration’ parameter: string auth-tls
     Authentication scheme for TLS sockets.  TLS sockets already have
     encryption provided by the TLS layer, and limited authentication is
     done by certificates.

     It is possible to make use of any SASL authentication mechanism as
     well, by using ’sasl’ for this option

     Defaults to ‘"none"’.

 -- ‘libvirt-configuration’ parameter: optional-list access-drivers
     API access control scheme.

     By default an authenticated user is allowed access to all APIs.
     Access drivers can place restrictions on this.

     Defaults to ‘()’.

 -- ‘libvirt-configuration’ parameter: string key-file
     Server key file path.  If set to an empty string, then no private
     key is loaded.

     Defaults to ‘""’.

 -- ‘libvirt-configuration’ parameter: string cert-file
     Server key file path.  If set to an empty string, then no
     certificate is loaded.

     Defaults to ‘""’.

 -- ‘libvirt-configuration’ parameter: string ca-file
     Server key file path.  If set to an empty string, then no CA
     certificate is loaded.

     Defaults to ‘""’.

 -- ‘libvirt-configuration’ parameter: string crl-file
     Certificate revocation list path.  If set to an empty string, then
     no CRL is loaded.

     Defaults to ‘""’.

 -- ‘libvirt-configuration’ parameter: boolean tls-no-sanity-cert
     Disable verification of our own server certificates.

     When libvirtd starts it performs some sanity checks against its own
     certificates.

     Defaults to ‘#f’.

 -- ‘libvirt-configuration’ parameter: boolean tls-no-verify-cert
     Disable verification of client certificates.

     Client certificate verification is the primary authentication
     mechanism.  Any client which does not present a certificate signed
     by the CA will be rejected.

     Defaults to ‘#f’.

 -- ‘libvirt-configuration’ parameter: optional-list tls-allowed-dn-list
     Whitelist of allowed x509 Distinguished Name.

     Defaults to ‘()’.

 -- ‘libvirt-configuration’ parameter: optional-list
          sasl-allowed-usernames
     Whitelist of allowed SASL usernames.  The format for username
     depends on the SASL authentication mechanism.

     Defaults to ‘()’.

 -- ‘libvirt-configuration’ parameter: string tls-priority
     Override the compile time default TLS priority string.  The default
     is usually ‘"NORMAL"’ unless overridden at build time.  Only set
     this is it is desired for libvirt to deviate from the global
     default settings.

     Defaults to ‘"NORMAL"’.

 -- ‘libvirt-configuration’ parameter: integer max-clients
     Maximum number of concurrent client connections to allow over all
     sockets combined.

     Defaults to ‘5000’.

 -- ‘libvirt-configuration’ parameter: integer max-queued-clients
     Maximum length of queue of connections waiting to be accepted by
     the daemon.  Note, that some protocols supporting retransmission
     may obey this so that a later reattempt at connection succeeds.

     Defaults to ‘1000’.

 -- ‘libvirt-configuration’ parameter: integer max-anonymous-clients
     Maximum length of queue of accepted but not yet authenticated
     clients.  Set this to zero to turn this feature off

     Defaults to ‘20’.

 -- ‘libvirt-configuration’ parameter: integer min-workers
     Number of workers to start up initially.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer max-workers
     Maximum number of worker threads.

     If the number of active clients exceeds ‘min-workers’, then more
     threads are spawned, up to max_workers limit.  Typically you’d want
     max_workers to equal maximum number of clients allowed.

     Defaults to ‘20’.

 -- ‘libvirt-configuration’ parameter: integer prio-workers
     Number of priority workers.  If all workers from above pool are
     stuck, some calls marked as high priority (notably domainDestroy)
     can be executed in this pool.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer max-requests
     Total global limit on concurrent RPC calls.

     Defaults to ‘20’.

 -- ‘libvirt-configuration’ parameter: integer max-client-requests
     Limit on concurrent requests from a single client connection.  To
     avoid one client monopolizing the server this should be a small
     fraction of the global max_requests and max_workers parameter.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer admin-min-workers
     Same as ‘min-workers’ but for the admin interface.

     Defaults to ‘1’.

 -- ‘libvirt-configuration’ parameter: integer admin-max-workers
     Same as ‘max-workers’ but for the admin interface.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer admin-max-clients
     Same as ‘max-clients’ but for the admin interface.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer admin-max-queued-clients
     Same as ‘max-queued-clients’ but for the admin interface.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer admin-max-client-requests
     Same as ‘max-client-requests’ but for the admin interface.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer log-level
     Logging level.  4 errors, 3 warnings, 2 information, 1 debug.

     Defaults to ‘3’.

 -- ‘libvirt-configuration’ parameter: string log-filters
     Logging filters.

     A filter allows to select a different logging level for a given
     category of logs The format for a filter is one of:

        • x:name

        • x:+name

     where ‘name’ is a string which is matched against the category
     given in the ‘VIR_LOG_INIT()’ at the top of each libvirt source
     file, e.g., ‘"remote"’, ‘"qemu"’, or ‘"util.json"’ (the name in the
     filter can be a substring of the full category name, in order to
     match multiple similar categories), the optional ‘"+"’ prefix tells
     libvirt to log stack trace for each message matching name, and ‘x’
     is the minimal level where matching messages should be logged:

        • 1: DEBUG

        • 2: INFO

        • 3: WARNING

        • 4: ERROR

     Multiple filters can be defined in a single filters statement, they
     just need to be separated by spaces.

     Defaults to ‘"3:remote 4:event"’.

 -- ‘libvirt-configuration’ parameter: string log-outputs
     Logging outputs.

     An output is one of the places to save logging information.  The
     format for an output can be:

     ‘x:stderr’
          output goes to stderr

     ‘x:syslog:name’
          use syslog for the output and use the given name as the ident

     ‘x:file:file_path’
          output to a file, with the given filepath

     ‘x:journald’
          output to journald logging system

     In all case the x prefix is the minimal level, acting as a filter

        • 1: DEBUG

        • 2: INFO

        • 3: WARNING

        • 4: ERROR

     Multiple outputs can be defined, they just need to be separated by
     spaces.

     Defaults to ‘"3:stderr"’.

 -- ‘libvirt-configuration’ parameter: integer audit-level
     Allows usage of the auditing subsystem to be altered

        • 0: disable all auditing

        • 1: enable auditing, only if enabled on host

        • 2: enable auditing, and exit if disabled on host.

     Defaults to ‘1’.

 -- ‘libvirt-configuration’ parameter: boolean audit-logging
     Send audit messages via libvirt logging infrastructure.

     Defaults to ‘#f’.

 -- ‘libvirt-configuration’ parameter: optional-string host-uuid
     Host UUID. UUID must not have all digits be the same.

     Defaults to ‘""’.

 -- ‘libvirt-configuration’ parameter: string host-uuid-source
     Source to read host UUID.

        • ‘smbios’: fetch the UUID from ‘dmidecode -s system-uuid’

        • ‘machine-id’: fetch the UUID from ‘/etc/machine-id’

     If ‘dmidecode’ does not provide a valid UUID a temporary UUID will
     be generated.

     Defaults to ‘"smbios"’.

 -- ‘libvirt-configuration’ parameter: integer keepalive-interval
     A keepalive message is sent to a client after ‘keepalive_interval’
     seconds of inactivity to check if the client is still responding.
     If set to -1, libvirtd will never send keepalive requests; however
     clients can still send them and the daemon will send responses.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer keepalive-count
     Maximum number of keepalive messages that are allowed to be sent to
     the client without getting any response before the connection is
     considered broken.

     In other words, the connection is automatically closed
     approximately after ‘keepalive_interval * (keepalive_count + 1)’
     seconds since the last message received from the client.  When
     ‘keepalive-count’ is set to 0, connections will be automatically
     closed after ‘keepalive-interval’ seconds of inactivity without
     sending any keepalive messages.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer admin-keepalive-interval
     Same as above but for admin interface.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer admin-keepalive-count
     Same as above but for admin interface.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer ovs-timeout
     Timeout for Open vSwitch calls.

     The ‘ovs-vsctl’ utility is used for the configuration and its
     timeout option is set by default to 5 seconds to avoid potential
     infinite waits blocking libvirt.

     Defaults to ‘5’.

Virtlog daemon
..............

The virtlogd service is a server side daemon component of libvirt that
is used to manage logs from virtual machine consoles.

   This daemon is not used directly by libvirt client applications,
rather it is called on their behalf by ‘libvirtd’.  By maintaining the
logs in a standalone daemon, the main ‘libvirtd’ daemon can be restarted
without risk of losing logs.  The ‘virtlogd’ daemon has the ability to
re-exec() itself upon receiving ‘SIGUSR1’, to allow live upgrades
without downtime.

 -- Scheme Variable: virtlog-service-type
     This is the type of the virtlog daemon.  Its value must be a
     ‘virtlog-configuration’.

          (service virtlog-service-type
                   (virtlog-configuration
                    (max-clients 1000)))

 -- ‘virtlog-configuration’ parameter: integer log-level
     Logging level.  4 errors, 3 warnings, 2 information, 1 debug.

     Defaults to ‘3’.

 -- ‘virtlog-configuration’ parameter: string log-filters
     Logging filters.

     A filter allows to select a different logging level for a given
     category of logs The format for a filter is one of:

        • x:name

        • x:+name

     where ‘name’ is a string which is matched against the category
     given in the ‘VIR_LOG_INIT()’ at the top of each libvirt source
     file, e.g., "remote", "qemu", or "util.json" (the name in the
     filter can be a substring of the full category name, in order to
     match multiple similar categories), the optional "+" prefix tells
     libvirt to log stack trace for each message matching name, and ‘x’
     is the minimal level where matching messages should be logged:

        • 1: DEBUG

        • 2: INFO

        • 3: WARNING

        • 4: ERROR

     Multiple filters can be defined in a single filters statement, they
     just need to be separated by spaces.

     Defaults to ‘"3:remote 4:event"’.

 -- ‘virtlog-configuration’ parameter: string log-outputs
     Logging outputs.

     An output is one of the places to save logging information The
     format for an output can be:

     ‘x:stderr’
          output goes to stderr

     ‘x:syslog:name’
          use syslog for the output and use the given name as the ident

     ‘x:file:file_path’
          output to a file, with the given filepath

     ‘x:journald’
          output to journald logging system

     In all case the x prefix is the minimal level, acting as a filter

        • 1: DEBUG

        • 2: INFO

        • 3: WARNING

        • 4: ERROR

     Multiple outputs can be defined, they just need to be separated by
     spaces.

     Defaults to ‘"3:stderr"’.

 -- ‘virtlog-configuration’ parameter: integer max-clients
     Maximum number of concurrent client connections to allow over all
     sockets combined.

     Defaults to ‘1024’.

 -- ‘virtlog-configuration’ parameter: integer max-size
     Maximum file size before rolling over.

     Defaults to ‘2MB’

 -- ‘virtlog-configuration’ parameter: integer max-backups
     Maximum number of backup files to keep.

     Defaults to ‘3’

Transparent Emulation with QEMU
...............................

‘qemu-binfmt-service-type’ provides support for transparent emulation of
program binaries built for different architectures—e.g., it allows you
to transparently execute an ARMv7 program on an x86_64 machine.  It
achieves this by combining the QEMU (https://www.qemu.org) emulator and
the ‘binfmt_misc’ feature of the kernel Linux.

 -- Scheme Variable: qemu-binfmt-service-type
     This is the type of the QEMU/binfmt service for transparent
     emulation.  Its value must be a ‘qemu-binfmt-configuration’ object,
     which specifies the QEMU package to use as well as the architecture
     we want to emulated:

          (service qemu-binfmt-service-type
                   (qemu-binfmt-configuration
                     (platforms (lookup-qemu-platforms "arm" "aarch64"))))

     In this example, we enable transparent emulation for the ARM and
     aarch64 platforms.  Running ‘herd stop qemu-binfmt’ turns it off,
     and running ‘herd start qemu-binfmt’ turns it back on (*note the
     ‘herd’ command: (shepherd)Invoking herd.).

 -- Data Type: qemu-binfmt-configuration
     This is the configuration for the ‘qemu-binfmt’ service.

     ‘platforms’ (default: ‘'()’)
          The list of emulated QEMU platforms.  Each item must be a
          “platform object” as returned by ‘lookup-qemu-platforms’ (see
          below).

     ‘guix-support?’ (default: ‘#f’)
          When it is true, QEMU and all its dependencies are added to
          the build environment of ‘guix-daemon’ (*note
          ‘--chroot-directory’ option: Invoking guix-daemon.).  This
          allows the ‘binfmt_misc’ handlers to be used within the build
          environment, which in turn means that you can transparently
          build programs for another architecture.

          For example, let’s suppose you’re on an x86_64 machine and you
          have this service:

               (service qemu-binfmt-service-type
                        (qemu-binfmt-configuration
                          (platforms (lookup-qemu-platforms "arm"))
                          (guix-support? #t)))

          You can run:

               guix build -s armhf-linux inkscape

          and it will build Inkscape for ARMv7 _as if it were a native
          build_, transparently using QEMU to emulate the ARMv7 CPU.
          Pretty handy if you’d like to test a package build for an
          architecture you don’t have access to!

     ‘qemu’ (default: ‘qemu’)
          The QEMU package to use.

 -- Scheme Procedure: lookup-qemu-platforms PLATFORMS...
     Return the list of QEMU platform objects corresponding to
     PLATFORMS....  PLATFORMS must be a list of strings corresponding to
     platform names, such as ‘"arm"’, ‘"sparc"’, ‘"mips64el"’, and so
     on.

 -- Scheme Procedure: qemu-platform? OBJ
     Return true if OBJ is a platform object.

 -- Scheme Procedure: qemu-platform-name PLATFORM
     Return the name of PLATFORM—a string such as ‘"arm"’.


File: guix.info,  Node: Version Control Services,  Next: Game Services,  Prev: Virtualization Services,  Up: Services

8.8.25 Version Control Services
-------------------------------

The ‘(gnu services version-control)’ module provides a service to allow
remote access to local Git repositories.  There are three options: the
‘git-daemon-service’, which provides access to repositories via the
‘git://’ unsecured TCP-based protocol, extending the ‘nginx’ web server
to proxy some requests to ‘git-http-backend’, or providing a web
interface with ‘cgit-service-type’.

 -- Scheme Procedure: git-daemon-service [#:config
          (git-daemon-configuration)]

     Return a service that runs ‘git daemon’, a simple TCP server to
     expose repositories over the Git protocol for anonymous access.

     The optional CONFIG argument should be a
     ‘<git-daemon-configuration>’ object, by default it allows read-only
     access to exported(1) repositories under ‘/srv/git’.

 -- Data Type: git-daemon-configuration
     Data type representing the configuration for ‘git-daemon-service’.

     ‘package’ (default: GIT)
          Package object of the Git distributed version control system.

     ‘export-all?’ (default: #F)
          Whether to allow access for all Git repositories, even if they
          do not have the ‘git-daemon-export-ok’ file.

     ‘base-path’ (default: ‘/srv/git’)
          Whether to remap all the path requests as relative to the
          given path.  If you run git daemon with (BASE-PATH "/SRV/GIT")
          on example.com, then if you later try to pull
          ‘git://example.com/hello.git’, git daemon will interpret the
          path as ‘/srv/git/hello.git’.

     ‘user-path’ (default: #F)
          Whether to allow ‘~user’ notation to be used in requests.
          When specified with empty string, requests to
          ‘git://host/~alice/foo’ is taken as a request to access ‘foo’
          repository in the home directory of user ‘alice’.  If
          (USER-PATH "PATH") is specified, the same request is taken as
          a request to access ‘path/foo’ repository in the home
          directory of user ‘alice’.

     ‘listen’ (default: ’())
          Whether to listen on specific IP addresses or hostnames,
          defaults to all.

     ‘port’ (default: #F)
          Whether to listen on an alternative port, which defaults to
          9418.

     ‘whitelist’ (default: ’())
          If not empty, only allow access to this list of directories.

     ‘extra-options’ (default: ’())
          Extra options will be passed to ‘git daemon’, please run ‘man
          git-daemon’ for more information.

   The ‘git://’ protocol lacks authentication.  When you pull from a
repository fetched via ‘git://’, you don’t know whether the data you
receive was modified or is even coming from the specified host, and your
connection is subject to eavesdropping.  It’s better to use an
authenticated and encrypted transport, such as ‘https’.  Although Git
allows you to serve repositories using unsophisticated file-based web
servers, there is a faster protocol implemented by the
‘git-http-backend’ program.  This program is the back-end of a proper
Git web service.  It is designed to sit behind a FastCGI proxy.  *Note
Web Services::, for more on running the necessary ‘fcgiwrap’ daemon.

   Guix has a separate configuration data type for serving Git
repositories over HTTP.

 -- Data Type: git-http-configuration
     Data type representing the configuration for a future
     ‘git-http-service-type’; can currently be used to configure Nginx
     trough ‘git-http-nginx-location-configuration’.

     ‘package’ (default: GIT)
          Package object of the Git distributed version control system.

     ‘git-root’ (default: ‘/srv/git’)
          Directory containing the Git repositories to expose to the
          world.

     ‘export-all?’ (default: #F)
          Whether to expose access for all Git repositories in GIT-ROOT,
          even if they do not have the ‘git-daemon-export-ok’ file.

     ‘uri-path’ (default: ‘/git/’)
          Path prefix for Git access.  With the default ‘/git/’ prefix,
          this will map ‘http://SERVER/git/REPO.git’ to
          ‘/srv/git/REPO.git’.  Requests whose URI paths do not begin
          with this prefix are not passed on to this Git instance.

     ‘fcgiwrap-socket’ (default: ‘127.0.0.1:9000’)
          The socket on which the ‘fcgiwrap’ daemon is listening.  *Note
          Web Services::.

   There is no ‘git-http-service-type’, currently; instead you can
create an ‘nginx-location-configuration’ from a ‘git-http-configuration’
and then add that location to a web server.

 -- Scheme Procedure: git-http-nginx-location-configuration
          [config=(git-http-configuration)]
     Compute an ‘nginx-location-configuration’ that corresponds to the
     given Git http configuration.  An example nginx service definition
     to serve the default ‘/srv/git’ over HTTPS might be:

          (service nginx-service-type
                   (nginx-configuration
                    (server-blocks
                     (list
                      (nginx-server-configuration
                       (listen '("443 ssl"))
                       (server-name "git.my-host.org")
                       (ssl-certificate
                        "/etc/letsencrypt/live/git.my-host.org/fullchain.pem")
                       (ssl-certificate-key
                        "/etc/letsencrypt/live/git.my-host.org/privkey.pem")
                       (locations
                        (list
                         (git-http-nginx-location-configuration
                          (git-http-configuration (uri-path "/"))))))))))

     This example assumes that you are using Let’s Encrypt to get your
     TLS certificate.  *Note Certificate Services::.  The default
     ‘certbot’ service will redirect all HTTP traffic on
     ‘git.my-host.org’ to HTTPS. You will also need to add an ‘fcgiwrap’
     proxy to your system services.  *Note Web Services::.

Cgit Service
............

Cgit (https://git.zx2c4.com/cgit/) is a web frontend for Git
repositories written in C.

   The following example will configure the service with default values.
By default, Cgit can be accessed on port 80 (‘http://localhost:80’).

     (service cgit-service-type)

   The ‘file-object’ type designates either a file-like object (*note
file-like objects: G-Expressions.) or a string.

   Available ‘cgit-configuration’ fields are:

 -- ‘cgit-configuration’ parameter: package package
     The CGIT package.

 -- ‘cgit-configuration’ parameter: nginx-server-configuration-list
          nginx
     NGINX configuration.

 -- ‘cgit-configuration’ parameter: file-object about-filter
     Specifies a command which will be invoked to format the content of
     about pages (both top-level and for each repository).

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string agefile
     Specifies a path, relative to each repository path, which can be
     used to specify the date and time of the youngest commit in the
     repository.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: file-object auth-filter
     Specifies a command that will be invoked for authenticating
     repository access.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string branch-sort
     Flag which, when set to ‘age’, enables date ordering in the branch
     ref list, and when set ‘name’ enables ordering by branch name.

     Defaults to ‘"name"’.

 -- ‘cgit-configuration’ parameter: string cache-root
     Path used to store the cgit cache entries.

     Defaults to ‘"/var/cache/cgit"’.

 -- ‘cgit-configuration’ parameter: integer cache-static-ttl
     Number which specifies the time-to-live, in minutes, for the cached
     version of repository pages accessed with a fixed SHA1.

     Defaults to ‘-1’.

 -- ‘cgit-configuration’ parameter: integer cache-dynamic-ttl
     Number which specifies the time-to-live, in minutes, for the cached
     version of repository pages accessed without a fixed SHA1.

     Defaults to ‘5’.

 -- ‘cgit-configuration’ parameter: integer cache-repo-ttl
     Number which specifies the time-to-live, in minutes, for the cached
     version of the repository summary page.

     Defaults to ‘5’.

 -- ‘cgit-configuration’ parameter: integer cache-root-ttl
     Number which specifies the time-to-live, in minutes, for the cached
     version of the repository index page.

     Defaults to ‘5’.

 -- ‘cgit-configuration’ parameter: integer cache-scanrc-ttl
     Number which specifies the time-to-live, in minutes, for the result
     of scanning a path for Git repositories.

     Defaults to ‘15’.

 -- ‘cgit-configuration’ parameter: integer cache-about-ttl
     Number which specifies the time-to-live, in minutes, for the cached
     version of the repository about page.

     Defaults to ‘15’.

 -- ‘cgit-configuration’ parameter: integer cache-snapshot-ttl
     Number which specifies the time-to-live, in minutes, for the cached
     version of snapshots.

     Defaults to ‘5’.

 -- ‘cgit-configuration’ parameter: integer cache-size
     The maximum number of entries in the cgit cache.  When set to ‘0’,
     caching is disabled.

     Defaults to ‘0’.

 -- ‘cgit-configuration’ parameter: boolean case-sensitive-sort?
     Sort items in the repo list case sensitively.

     Defaults to ‘#t’.

 -- ‘cgit-configuration’ parameter: list clone-prefix
     List of common prefixes which, when combined with a repository URL,
     generates valid clone URLs for the repository.

     Defaults to ‘()’.

 -- ‘cgit-configuration’ parameter: list clone-url
     List of ‘clone-url’ templates.

     Defaults to ‘()’.

 -- ‘cgit-configuration’ parameter: file-object commit-filter
     Command which will be invoked to format commit messages.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string commit-sort
     Flag which, when set to ‘date’, enables strict date ordering in the
     commit log, and when set to ‘topo’ enables strict topological
     ordering.

     Defaults to ‘"git log"’.

 -- ‘cgit-configuration’ parameter: file-object css
     URL which specifies the css document to include in all cgit pages.

     Defaults to ‘"/share/cgit/cgit.css"’.

 -- ‘cgit-configuration’ parameter: file-object email-filter
     Specifies a command which will be invoked to format names and email
     address of committers, authors, and taggers, as represented in
     various places throughout the cgit interface.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: boolean embedded?
     Flag which, when set to ‘#t’, will make cgit generate a HTML
     fragment suitable for embedding in other HTML pages.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-commit-graph?
     Flag which, when set to ‘#t’, will make cgit print an ASCII-art
     commit history graph to the left of the commit messages in the
     repository log page.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-filter-overrides?
     Flag which, when set to ‘#t’, allows all filter settings to be
     overridden in repository-specific cgitrc files.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-follow-links?
     Flag which, when set to ‘#t’, allows users to follow a file in the
     log view.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-http-clone?
     If set to ‘#t’, cgit will act as an dumb HTTP endpoint for Git
     clones.

     Defaults to ‘#t’.

 -- ‘cgit-configuration’ parameter: boolean enable-index-links?
     Flag which, when set to ‘#t’, will make cgit generate extra links
     "summary", "commit", "tree" for each repo in the repository index.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-index-owner?
     Flag which, when set to ‘#t’, will make cgit display the owner of
     each repo in the repository index.

     Defaults to ‘#t’.

 -- ‘cgit-configuration’ parameter: boolean enable-log-filecount?
     Flag which, when set to ‘#t’, will make cgit print the number of
     modified files for each commit on the repository log page.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-log-linecount?
     Flag which, when set to ‘#t’, will make cgit print the number of
     added and removed lines for each commit on the repository log page.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-remote-branches?
     Flag which, when set to ‘#t’, will make cgit display remote
     branches in the summary and refs views.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-subject-links?
     Flag which, when set to ‘1’, will make cgit use the subject of the
     parent commit as link text when generating links to parent commits
     in commit view.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-html-serving?
     Flag which, when set to ‘#t’, will make cgit use the subject of the
     parent commit as link text when generating links to parent commits
     in commit view.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-tree-linenumbers?
     Flag which, when set to ‘#t’, will make cgit generate linenumber
     links for plaintext blobs printed in the tree view.

     Defaults to ‘#t’.

 -- ‘cgit-configuration’ parameter: boolean enable-git-config?
     Flag which, when set to ‘#f’, will allow cgit to use Git config to
     set any repo specific settings.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: file-object favicon
     URL used as link to a shortcut icon for cgit.

     Defaults to ‘"/favicon.ico"’.

 -- ‘cgit-configuration’ parameter: string footer
     The content of the file specified with this option will be included
     verbatim at the bottom of all pages (i.e. it replaces the standard
     "generated by..." message).

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string head-include
     The content of the file specified with this option will be included
     verbatim in the HTML HEAD section on all pages.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string header
     The content of the file specified with this option will be included
     verbatim at the top of all pages.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: file-object include
     Name of a configfile to include before the rest of the current
     config- file is parsed.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string index-header
     The content of the file specified with this option will be included
     verbatim above the repository index.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string index-info
     The content of the file specified with this option will be included
     verbatim below the heading on the repository index page.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: boolean local-time?
     Flag which, if set to ‘#t’, makes cgit print commit and tag times
     in the servers timezone.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: file-object logo
     URL which specifies the source of an image which will be used as a
     logo on all cgit pages.

     Defaults to ‘"/share/cgit/cgit.png"’.

 -- ‘cgit-configuration’ parameter: string logo-link
     URL loaded when clicking on the cgit logo image.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: file-object owner-filter
     Command which will be invoked to format the Owner column of the
     main page.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: integer max-atom-items
     Number of items to display in atom feeds view.

     Defaults to ‘10’.

 -- ‘cgit-configuration’ parameter: integer max-commit-count
     Number of entries to list per page in "log" view.

     Defaults to ‘50’.

 -- ‘cgit-configuration’ parameter: integer max-message-length
     Number of commit message characters to display in "log" view.

     Defaults to ‘80’.

 -- ‘cgit-configuration’ parameter: integer max-repo-count
     Specifies the number of entries to list per page on the repository
     index page.

     Defaults to ‘50’.

 -- ‘cgit-configuration’ parameter: integer max-repodesc-length
     Specifies the maximum number of repo description characters to
     display on the repository index page.

     Defaults to ‘80’.

 -- ‘cgit-configuration’ parameter: integer max-blob-size
     Specifies the maximum size of a blob to display HTML for in KBytes.

     Defaults to ‘0’.

 -- ‘cgit-configuration’ parameter: string max-stats
     Maximum statistics period.  Valid values are ‘week’,‘month’,
     ‘quarter’ and ‘year’.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: mimetype-alist mimetype
     Mimetype for the specified filename extension.

     Defaults to ‘((gif "image/gif") (html "text/html") (jpg
     "image/jpeg") (jpeg "image/jpeg") (pdf "application/pdf") (png
     "image/png") (svg "image/svg+xml"))’.

 -- ‘cgit-configuration’ parameter: file-object mimetype-file
     Specifies the file to use for automatic mimetype lookup.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string module-link
     Text which will be used as the formatstring for a hyperlink when a
     submodule is printed in a directory listing.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: boolean nocache?
     If set to the value ‘#t’ caching will be disabled.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean noplainemail?
     If set to ‘#t’ showing full author email addresses will be
     disabled.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean noheader?
     Flag which, when set to ‘#t’, will make cgit omit the standard
     header on all pages.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: project-list project-list
     A list of subdirectories inside of ‘repository-directory’, relative
     to it, that should loaded as Git repositories.  An empty list means
     that all subdirectories will be loaded.

     Defaults to ‘()’.

 -- ‘cgit-configuration’ parameter: file-object readme
     Text which will be used as default value for ‘cgit-repo-readme’.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: boolean remove-suffix?
     If set to ‘#t’ and ‘repository-directory’ is enabled, if any
     repositories are found with a suffix of ‘.git’, this suffix will be
     removed for the URL and name.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: integer renamelimit
     Maximum number of files to consider when detecting renames.

     Defaults to ‘-1’.

 -- ‘cgit-configuration’ parameter: string repository-sort
     The way in which repositories in each section are sorted.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: robots-list robots
     Text used as content for the ‘robots’ meta-tag.

     Defaults to ‘("noindex" "nofollow")’.

 -- ‘cgit-configuration’ parameter: string root-desc
     Text printed below the heading on the repository index page.

     Defaults to ‘"a fast webinterface for the git dscm"’.

 -- ‘cgit-configuration’ parameter: string root-readme
     The content of the file specified with this option will be included
     verbatim below the “about” link on the repository index page.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string root-title
     Text printed as heading on the repository index page.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: boolean scan-hidden-path
     If set to ‘#t’ and repository-directory is enabled,
     repository-directory will recurse into directories whose name
     starts with a period.  Otherwise, repository-directory will stay
     away from such directories, considered as “hidden”.  Note that this
     does not apply to the ‘.git’ directory in non-bare repos.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: list snapshots
     Text which specifies the default set of snapshot formats that cgit
     generates links for.

     Defaults to ‘()’.

 -- ‘cgit-configuration’ parameter: repository-directory
          repository-directory
     Name of the directory to scan for repositories (represents
     ‘scan-path’).

     Defaults to ‘"/srv/git"’.

 -- ‘cgit-configuration’ parameter: string section
     The name of the current repository section - all repositories
     defined after this option will inherit the current section name.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string section-sort
     Flag which, when set to ‘1’, will sort the sections on the
     repository listing by name.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: integer section-from-path
     A number which, if defined prior to repository-directory, specifies
     how many path elements from each repo path to use as a default
     section name.

     Defaults to ‘0’.

 -- ‘cgit-configuration’ parameter: boolean side-by-side-diffs?
     If set to ‘#t’ shows side-by-side diffs instead of unidiffs per
     default.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: file-object source-filter
     Specifies a command which will be invoked to format plaintext blobs
     in the tree view.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: integer summary-branches
     Specifies the number of branches to display in the repository
     “summary” view.

     Defaults to ‘10’.

 -- ‘cgit-configuration’ parameter: integer summary-log
     Specifies the number of log entries to display in the repository
     “summary” view.

     Defaults to ‘10’.

 -- ‘cgit-configuration’ parameter: integer summary-tags
     Specifies the number of tags to display in the repository “summary”
     view.

     Defaults to ‘10’.

 -- ‘cgit-configuration’ parameter: string strict-export
     Filename which, if specified, needs to be present within the
     repository for cgit to allow access to that repository.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string virtual-root
     URL which, if specified, will be used as root for all cgit links.

     Defaults to ‘"/"’.

 -- ‘cgit-configuration’ parameter: repository-cgit-configuration-list
          repositories
     A list of “cgit-repo” records to use with config.

     Defaults to ‘()’.

     Available ‘repository-cgit-configuration’ fields are:

      -- ‘repository-cgit-configuration’ parameter: repo-list snapshots
          A mask of snapshot formats for this repo that cgit generates
          links for, restricted by the global ‘snapshots’ setting.

          Defaults to ‘()’.

      -- ‘repository-cgit-configuration’ parameter: repo-file-object
               source-filter
          Override the default ‘source-filter’.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string url
          The relative URL used to access the repository.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-file-object
               about-filter
          Override the default ‘about-filter’.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string
               branch-sort
          Flag which, when set to ‘age’, enables date ordering in the
          branch ref list, and when set to ‘name’ enables ordering by
          branch name.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-list clone-url
          A list of URLs which can be used to clone repo.

          Defaults to ‘()’.

      -- ‘repository-cgit-configuration’ parameter: repo-file-object
               commit-filter
          Override the default ‘commit-filter’.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string
               commit-sort
          Flag which, when set to ‘date’, enables strict date ordering
          in the commit log, and when set to ‘topo’ enables strict
          topological ordering.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string
               defbranch
          The name of the default branch for this repository.  If no
          such branch exists in the repository, the first branch name
          (when sorted) is used as default instead.  By default branch
          pointed to by HEAD, or “master” if there is no suitable HEAD.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string desc
          The value to show as repository description.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string homepage
          The value to show as repository homepage.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-file-object
               email-filter
          Override the default ‘email-filter’.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: maybe-repo-boolean
               enable-commit-graph?
          A flag which can be used to disable the global setting
          ‘enable-commit-graph?’.

          Defaults to ‘disabled’.

      -- ‘repository-cgit-configuration’ parameter: maybe-repo-boolean
               enable-log-filecount?
          A flag which can be used to disable the global setting
          ‘enable-log-filecount?’.

          Defaults to ‘disabled’.

      -- ‘repository-cgit-configuration’ parameter: maybe-repo-boolean
               enable-log-linecount?
          A flag which can be used to disable the global setting
          ‘enable-log-linecount?’.

          Defaults to ‘disabled’.

      -- ‘repository-cgit-configuration’ parameter: maybe-repo-boolean
               enable-remote-branches?
          Flag which, when set to ‘#t’, will make cgit display remote
          branches in the summary and refs views.

          Defaults to ‘disabled’.

      -- ‘repository-cgit-configuration’ parameter: maybe-repo-boolean
               enable-subject-links?
          A flag which can be used to override the global setting
          ‘enable-subject-links?’.

          Defaults to ‘disabled’.

      -- ‘repository-cgit-configuration’ parameter: maybe-repo-boolean
               enable-html-serving?
          A flag which can be used to override the global setting
          ‘enable-html-serving?’.

          Defaults to ‘disabled’.

      -- ‘repository-cgit-configuration’ parameter: repo-boolean hide?
          Flag which, when set to ‘#t’, hides the repository from the
          repository index.

          Defaults to ‘#f’.

      -- ‘repository-cgit-configuration’ parameter: repo-boolean ignore?
          Flag which, when set to ‘#t’, ignores the repository.

          Defaults to ‘#f’.

      -- ‘repository-cgit-configuration’ parameter: repo-file-object
               logo
          URL which specifies the source of an image which will be used
          as a logo on this repo’s pages.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string
               logo-link
          URL loaded when clicking on the cgit logo image.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-file-object
               owner-filter
          Override the default ‘owner-filter’.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string
               module-link
          Text which will be used as the formatstring for a hyperlink
          when a submodule is printed in a directory listing.  The
          arguments for the formatstring are the path and SHA1 of the
          submodule commit.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: module-link-path
               module-link-path
          Text which will be used as the formatstring for a hyperlink
          when a submodule with the specified subdirectory path is
          printed in a directory listing.

          Defaults to ‘()’.

      -- ‘repository-cgit-configuration’ parameter: repo-string
               max-stats
          Override the default maximum statistics period.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string name
          The value to show as repository name.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string owner
          A value used to identify the owner of the repository.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string path
          An absolute path to the repository directory.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string readme
          A path (relative to repo) which specifies a file to include
          verbatim as the “About” page for this repo.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string section
          The name of the current repository section - all repositories
          defined after this option will inherit the current section
          name.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-list
               extra-options
          Extra options will be appended to cgitrc file.

          Defaults to ‘()’.

 -- ‘cgit-configuration’ parameter: list extra-options
     Extra options will be appended to cgitrc file.

     Defaults to ‘()’.

   However, it could be that you just want to get a ‘cgitrc’ up and
running.  In that case, you can pass an ‘opaque-cgit-configuration’ as a
record to ‘cgit-service-type’.  As its name indicates, an opaque
configuration does not have easy reflective capabilities.

   Available ‘opaque-cgit-configuration’ fields are:

 -- ‘opaque-cgit-configuration’ parameter: package cgit
     The cgit package.

 -- ‘opaque-cgit-configuration’ parameter: string string
     The contents of the ‘cgitrc’, as a string.

   For example, if your ‘cgitrc’ is just the empty string, you could
instantiate a cgit service like this:

     (service cgit-service-type
              (opaque-cgit-configuration
               (cgitrc "")))

Gitolite Service
................

Gitolite (https://gitolite.com/gitolite/) is a tool for hosting Git
repositories on a central server.

   Gitolite can handle multiple repositories and users, and supports
flexible configuration of the permissions for the users on the
repositories.

   The following example will configure Gitolite using the default ‘git’
user, and the provided SSH public key.

     (service gitolite-service-type
              (gitolite-configuration
                (admin-pubkey (plain-file
                                "yourname.pub"
                                "ssh-rsa AAAA... guix@example.com"))))

   Gitolite is configured through a special admin repository which you
can clone, for example, if you setup Gitolite on ‘example.com’, you
would run the following command to clone the admin repository.

     git clone git@example.com:gitolite-admin

   When the Gitolite service is activated, the provided ‘admin-pubkey’
will be inserted in to the ‘keydir’ directory in the gitolite-admin
repository.  If this results in a change in the repository, it will be
committed using the message “gitolite setup by GNU Guix”.

 -- Data Type: gitolite-configuration
     Data type representing the configuration for
     ‘gitolite-service-type’.

     ‘package’ (default: GITOLITE)
          Gitolite package to use.

     ‘user’ (default: GIT)
          User to use for Gitolite.  This will be user that you use when
          accessing Gitolite over SSH.

     ‘group’ (default: GIT)
          Group to use for Gitolite.

     ‘home-directory’ (default: "/VAR/LIB/GITOLITE")
          Directory in which to store the Gitolite configuration and
          repositories.

     ‘rc-file’ (default: (GITOLITE-RC-FILE))
          A “file-like” object (*note file-like objects:
          G-Expressions.), representing the configuration for Gitolite.

     ‘admin-pubkey’ (default: #F)
          A “file-like” object (*note file-like objects: G-Expressions.)
          used to setup Gitolite.  This will be inserted in to the
          ‘keydir’ directory within the gitolite-admin repository.

          To specify the SSH key as a string, use the ‘plain-file’
          function.

               (plain-file "yourname.pub" "ssh-rsa AAAA... guix@example.com")

 -- Data Type: gitolite-rc-file
     Data type representing the Gitolite RC file.

     ‘umask’ (default: ‘#o0077’)
          This controls the permissions Gitolite sets on the
          repositories and their contents.

          A value like ‘#o0027’ will give read access to the group used
          by Gitolite (by default: ‘git’).  This is necessary when using
          Gitolite with software like cgit or gitweb.

     ‘git-config-keys’ (default: ‘""’)
          Gitolite allows you to set git config values using the
          ‘config’ keyword.  This setting allows control over the config
          keys to accept.

     ‘roles’ (default: ‘'(("READERS" . 1) ("WRITERS" . ))’)
          Set the role names allowed to be used by users running the
          perms command.

     ‘enable’ (default: ‘'("help" "desc" "info" "perms" "writable" "ssh-authkeys" "git-config" "daemon" "gitweb")’)
          This setting controls the commands and features to enable
          within Gitolite.

   ---------- Footnotes ----------

   (1) By creating the magic file ‘git-daemon-export-ok’ in the
repository directory.


File: guix.info,  Node: Game Services,  Next: PAM Mount Service,  Prev: Version Control Services,  Up: Services

8.8.26 Game Services
--------------------

The Battle for Wesnoth Service
..............................

The Battle for Wesnoth (https://wesnoth.org) is a fantasy, turn based
tactical strategy game, with several single player campaigns, and
multiplayer games (both networked and local).

 -- Variable: Scheme Variable wesnothd-service-type
     Service type for the wesnothd service.  Its value must be a
     ‘wesnothd-configuration’ object.  To run wesnothd in the default
     configuration, instantiate it as:

          (service wesnothd-service-type)

 -- Data Type: wesnothd-configuration
     Data type representing the configuration of ‘wesnothd’.

     ‘package’ (default: ‘wesnoth-server’)
          The wesnoth server package to use.

     ‘port’ (default: ‘15000’)
          The port to bind the server to.


File: guix.info,  Node: PAM Mount Service,  Next: Guix Services,  Prev: Game Services,  Up: Services

8.8.27 PAM Mount Service
------------------------

The ‘(gnu services pam-mount)’ module provides a service allowing users
to mount volumes when they log in.  It should be able to mount any
volume format supported by the system.

 -- Variable: Scheme Variable pam-mount-service-type
     Service type for PAM Mount support.

 -- Data Type: pam-mount-configuration
     Data type representing the configuration of PAM Mount.

     It takes the following parameters:

     ‘rules’
          The configuration rules that will be used to generate
          ‘/etc/security/pam_mount.conf.xml’.

          The configuration rules are SXML elements (*note
          (guile)SXML::), and the the default ones don’t mount anything
          for anyone at login:

               `((debug (@ (enable "0")))
                 (mntoptions (@ (allow ,(string-join
                                         '("nosuid" "nodev" "loop"
                                           "encryption" "fsck" "nonempty"
                                           "allow_root" "allow_other")
                                         ","))))
                 (mntoptions (@ (require "nosuid,nodev")))
                 (logout (@ (wait "0")
                            (hup "0")
                            (term "no")
                            (kill "no")))
                 (mkmountpoint (@ (enable "1")
                                  (remove "true"))))

          Some ‘volume’ elements must be added to automatically mount
          volumes at login.  Here’s an example allowing the user ‘alice’
          to mount her encrypted ‘HOME’ directory and allowing the user
          ‘bob’ to mount the partition where he stores his data:

               (define pam-mount-rules
               `((debug (@ (enable "0")))
                           (volume (@ (user "alice")
                                      (fstype "crypt")
                                      (path "/dev/sda2")
                                      (mountpoint "/home/alice")))
                           (volume (@ (user "bob")
                                      (fstype "auto")
                                      (path "/dev/sdb3")
                                      (mountpoint "/home/bob/data")
                                      (options "defaults,autodefrag,compress")))
                           (mntoptions (@ (allow ,(string-join
                                                   '("nosuid" "nodev" "loop"
                                                     "encryption" "fsck" "nonempty"
                                                     "allow_root" "allow_other")
                                                   ","))))
                           (mntoptions (@ (require "nosuid,nodev")))
                           (logout (@ (wait "0")
                                      (hup "0")
                                      (term "no")
                                      (kill "no")))
                           (mkmountpoint (@ (enable "1")
                                            (remove "true")))))

               (service pam-mount-service-type
                        (pam-mount-configuration
                          (rules pam-mount-rules)))

          The complete list of possible options can be found in the man
          page for pam_mount.conf
          (http://pam-mount.sourceforge.net/pam_mount.conf.5.html).


File: guix.info,  Node: Guix Services,  Next: Linux Services,  Prev: PAM Mount Service,  Up: Services

8.8.28 Guix Services
--------------------

Guix Data Service
.................

The Guix Data Service (http://data.guix.gnu.org) processes, stores and
provides data about GNU Guix.  This includes information about packages,
derivations and lint warnings.

   The data is stored in a PostgreSQL database, and available through a
web interface.

 -- Variable: Scheme Variable guix-data-service-type
     Service type for the Guix Data Service.  Its value must be a
     ‘guix-data-service-configuration’ object.  The service optionally
     extends the getmail service, as the guix-commits mailing list is
     used to find out about changes in the Guix git repository.

 -- Data Type: guix-data-service-configuration
     Data type representing the configuration of the Guix Data Service.

     ‘package’ (default: ‘guix-data-service’)
          The Guix Data Service package to use.

     ‘user’ (default: ‘"guix-data-service"’)
          The system user to run the service as.

     ‘group’ (default: ‘"guix-data-service"’)
          The system group to run the service as.

     ‘port’ (default: ‘8765’)
          The port to bind the web service to.

     ‘host’ (default: ‘"127.0.0.1"’)
          The host to bind the web service to.

     ‘getmail-idle-mailboxes’ (default: ‘#f’)
          If set, this is the list of mailboxes that the getmail service
          will be configured to listen to.

     ‘commits-getmail-retriever-configuration’ (default: ‘#f’)
          If set, this is the ‘getmail-retriever-configuration’ object
          with which to configure getmail to fetch mail from the
          guix-commits mailing list.

     ‘extra-options’ (default: ’())
          Extra command line options for ‘guix-data-service’.

     ‘extra-process-jobs-options’ (default: ’())
          Extra command line options for
          ‘guix-data-service-process-jobs’.


File: guix.info,  Node: Linux Services,  Next: Hurd Services,  Prev: Guix Services,  Up: Services

8.8.29 Linux Services
---------------------

Early OOM Service
.................

Early OOM (https://github.com/rfjakob/earlyoom), also known as Earlyoom,
is a minimalist out of memory (OOM) daemon that runs in user space and
provides a more responsive and configurable alternative to the in-kernel
OOM killer.  It is useful to prevent the system from becoming
unresponsive when it runs out of memory.

 -- Scheme Variable: earlyoom-service-type
     The service type for running ‘earlyoom’, the Early OOM daemon.  Its
     value must be a ‘earlyoom-configuration’ object, described below.
     The service can be instantiated in its default configuration with:

          (service earlyoom-service-type)

 -- Data Type: earlyoom-configuration
     This is the configuration record for the ‘earlyoom-service-type’.

     ‘earlyoom’ (default: EARLYOOM)
          The Earlyoom package to use.

     ‘minimum-available-memory’ (default: ‘10’)
          The threshold for the minimum _available_ memory, in
          percentages.

     ‘minimum-free-swap’ (default: ‘10’)
          The threshold for the minimum free swap memory, in
          percentages.

     ‘prefer-regexp’ (default: ‘#f’)
          A regular expression (as a string) to match the names of the
          processes that should be preferably killed.

     ‘avoid-regexp’ (default: ‘#f’)
          A regular expression (as a string) to match the names of the
          processes that should _not_ be killed.

     ‘memory-report-interval’ (default: ‘0’)
          The interval in seconds at which a memory report is printed.
          It is disabled by default.

     ‘ignore-positive-oom-score-adj?’ (default: ‘#f’)
          A boolean indicating whether the positive adjustments set in
          ‘/proc/*/oom_score_adj’.

     ‘show-debug-messages?’ (default: ‘#f’)
          A boolean indicating whether debug messages should be printed.
          The logs are saved at ‘/var/log/earlyoom.log’.

     ‘send-notification-command’ (default: ‘#f’)
          This can be used to provide a custom command used for sending
          notifications.

Kernel Module Loader Service
............................

The kernel module loader service allows one to load loadable kernel
modules at boot.  This is especially useful for modules that don’t
autoload and need to be manually loaded, as it’s the case with ‘ddcci’.

 -- Scheme Variable: kernel-module-loader-service-type
     The service type for loading loadable kernel modules at boot with
     ‘modprobe’.  Its value must be a list of strings representing
     module names.  For example loading the drivers provided by
     ‘ddcci-driver-linux’, in debugging mode by passing some module
     parameters, can be done as follow:

          (use-modules (gnu) (gnu services))
          (use-package-modules linux)
          (use-service-modules linux)

          (define ddcci-config
            (plain-file "ddcci.conf"
                        "options ddcci dyndbg delay=120"))

          (operating-system
            ...
            (services (cons* (service kernel-module-loader-service-type
                                      '("ddcci" "ddcci_backlight"))
                             (simple-service 'ddcci-config etc-service-type
                                             (list `("modprobe.d/ddcci.conf"
                                                     ,ddcci-config)))
                             %base-services))
            (kernel-loadable-modules (list ddcci-driver-linux)))


File: guix.info,  Node: Hurd Services,  Next: Miscellaneous Services,  Prev: Linux Services,  Up: Services

8.8.30 Hurd Services
--------------------

 -- Scheme Variable: hurd-console-service-type
     This service starts the fancy ‘VGA’ console client on the Hurd.

     The service’s value is a ‘hurd-console-configuration’ record.

 -- Data Type: hurd-console-configuration
     This is the data type representing the configuration for the
     hurd-console-service.

     ‘hurd’ (default: HURD)
          The Hurd package to use.

 -- Scheme Variable: hurd-getty-service-type
     This service starts a tty using the Hurd ‘getty’ program.

     The service’s value is a ‘hurd-getty-configuration’ record.

 -- Data Type: hurd-getty-configuration
     This is the data type representing the configuration for the
     hurd-getty-service.

     ‘hurd’ (default: HURD)
          The Hurd package to use.

     ‘tty’
          The name of the console this Getty runs on—e.g., ‘"tty1"’.

     ‘baud-rate’ (default: ‘38400’)
          An integer specifying the baud rate of the tty.


File: guix.info,  Node: Miscellaneous Services,  Prev: Hurd Services,  Up: Services

8.8.31 Miscellaneous Services
-----------------------------

Fingerprint Service
...................

The ‘(gnu services authentication)’ module provides a DBus service to
read and identify fingerprints via a fingerprint sensor.

 -- Scheme Variable: fprintd-service-type
     The service type for ‘fprintd’, which provides the fingerprint
     reading capability.

          (service fprintd-service-type)

System Control Service
......................

The ‘(gnu services sysctl)’ provides a service to configure kernel
parameters at boot.

 -- Scheme Variable: sysctl-service-type
     The service type for ‘sysctl’, which modifies kernel parameters
     under ‘/proc/sys/’.  To enable IPv4 forwarding, it can be
     instantiated as:

          (service sysctl-service-type
                   (sysctl-configuration
                     (settings '(("net.ipv4.ip_forward" . "1")))))

 -- Data Type: sysctl-configuration
     The data type representing the configuration of ‘sysctl’.

     ‘sysctl’ (default: ‘(file-append procps "/sbin/sysctl"’)
          The ‘sysctl’ executable to use.

     ‘settings’ (default: ‘'()’)
          An association list specifies kernel parameters and their
          values.

PC/SC Smart Card Daemon Service
...............................

The ‘(gnu services security-token)’ module provides the following
service to run ‘pcscd’, the PC/SC Smart Card Daemon.  ‘pcscd’ is the
daemon program for pcsc-lite and the MuscleCard framework.  It is a
resource manager that coordinates communications with smart card
readers, smart cards and cryptographic tokens that are connected to the
system.

 -- Scheme Variable: pcscd-service-type
     Service type for the ‘pcscd’ service.  Its value must be a
     ‘pcscd-configuration’ object.  To run pcscd in the default
     configuration, instantiate it as:

          (service pcscd-service-type)

 -- Data Type: pcscd-configuration
     The data type representing the configuration of ‘pcscd’.

     ‘pcsc-lite’ (default: ‘pcsc-lite’)
          The pcsc-lite package that provides pcscd.
     ‘usb-drivers’ (default: ‘(list ccid)’)
          List of packages that provide USB drivers to pcscd.  Drivers
          are expected to be under ‘pcsc/drivers’ in the store directory
          of the package.

Lirc Service
............

The ‘(gnu services lirc)’ module provides the following service.

 -- Scheme Procedure: lirc-service [#:lirc lirc] [#:device #f] [#:driver
          #f] [#:config-file #f] [#:extra-options '()]
     Return a service that runs LIRC (http://www.lirc.org), a daemon
     that decodes infrared signals from remote controls.

     Optionally, DEVICE, DRIVER and CONFIG-FILE (configuration file
     name) may be specified.  See ‘lircd’ manual for details.

     Finally, EXTRA-OPTIONS is a list of additional command-line options
     passed to ‘lircd’.

Spice Service
.............

The ‘(gnu services spice)’ module provides the following service.

 -- Scheme Procedure: spice-vdagent-service [#:spice-vdagent]
     Returns a service that runs VDAGENT (https://www.spice-space.org),
     a daemon that enables sharing the clipboard with a vm and setting
     the guest display resolution when the graphical console window
     resizes.

inputattach Service
...................

The inputattach (https://linuxwacom.github.io/) service allows you to
use input devices such as Wacom tablets, touchscreens, or joysticks with
the Xorg display server.

 -- Scheme Variable: inputattach-service-type
     Type of a service that runs ‘inputattach’ on a device and
     dispatches events from it.

 -- Data Type: inputattach-configuration
     ‘device-type’ (default: ‘"wacom"’)
          The type of device to connect to.  Run ‘inputattach --help’,
          from the ‘inputattach’ package, to see the list of supported
          device types.

     ‘device’ (default: ‘"/dev/ttyS0"’)
          The device file to connect to the device.

     ‘baud-rate’ (default: ‘#f’)
          Baud rate to use for the serial connection.  Should be a
          number or ‘#f’.

     ‘log-file’ (default: ‘#f’)
          If true, this must be the name of a file to log messages to.

Dictionary Service
..................

The ‘(gnu services dict)’ module provides the following service:

 -- Scheme Variable: dicod-service-type
     This is the type of the service that runs the ‘dicod’ daemon, an
     implementation of DICT server (*note (dico)Dicod::).

 -- Scheme Procedure: dicod-service [#:config (dicod-configuration)]
     Return a service that runs the ‘dicod’ daemon, an implementation of
     DICT server (*note (dico)Dicod::).

     The optional CONFIG argument specifies the configuration for
     ‘dicod’, which should be a ‘<dicod-configuration>’ object, by
     default it serves the GNU Collaborative International Dictionary of
     English.

     You can add ‘open localhost’ to your ‘~/.dico’ file to make
     ‘localhost’ the default server for ‘dico’ client (*note
     (dico)Initialization File::).

 -- Data Type: dicod-configuration
     Data type representing the configuration of dicod.

     ‘dico’ (default: DICO)
          Package object of the GNU Dico dictionary server.

     ‘interfaces’ (default: ’("LOCALHOST"))
          This is the list of IP addresses and ports and possibly socket
          file names to listen to (*note ‘listen’ directive:
          (dico)Server Settings.).

     ‘handlers’ (default: ’())
          List of ‘<dicod-handler>’ objects denoting handlers (module
          instances).

     ‘databases’ (default: (LIST %DICOD-DATABASE:GCIDE))
          List of ‘<dicod-database>’ objects denoting dictionaries to be
          served.

 -- Data Type: dicod-handler
     Data type representing a dictionary handler (module instance).

     ‘name’
          Name of the handler (module instance).

     ‘module’ (default: #F)
          Name of the dicod module of the handler (instance).  If it is
          ‘#f’, the module has the same name as the handler.  (*note
          (dico)Modules::).

     ‘options’
          List of strings or gexps representing the arguments for the
          module handler

 -- Data Type: dicod-database
     Data type representing a dictionary database.

     ‘name’
          Name of the database, will be used in DICT commands.

     ‘handler’
          Name of the dicod handler (module instance) used by this
          database (*note (dico)Handlers::).

     ‘complex?’ (default: #F)
          Whether the database configuration complex.  The complex
          configuration will need a corresponding ‘<dicod-handler>’
          object, otherwise not.

     ‘options’
          List of strings or gexps representing the arguments for the
          database (*note (dico)Databases::).

 -- Scheme Variable: %dicod-database:gcide
     A ‘<dicod-database>’ object serving the GNU Collaborative
     International Dictionary of English using the ‘gcide’ package.

   The following is an example ‘dicod-service’ configuration.

     (dicod-service #:config
       (dicod-configuration
        (handlers (list (dicod-handler
                         (name "wordnet")
                         (module "dictorg")
                         (options
                          (list #~(string-append "dbdir=" #$wordnet))))))
        (databases (list (dicod-database
                          (name "wordnet")
                          (complex? #t)
                          (handler "wordnet")
                          (options '("database=wn")))
                         %dicod-database:gcide))))

Docker Service
..............

The ‘(gnu services docker)’ module provides the following services.

 -- Scheme Variable: docker-service-type

     This is the type of the service that runs Docker
     (https://www.docker.com), a daemon that can execute application
     bundles (sometimes referred to as “containers”) in isolated
     environments.

 -- Data Type: docker-configuration
     This is the data type representing the configuration of Docker and
     Containerd.

     ‘package’ (default: ‘docker’)
          The Docker package to use.

     ‘containerd’ (default: CONTAINERD)
          The Containerd package to use.

     ‘proxy’ (default DOCKER-LIBNETWORK-CMD-PROXY)
          The Docker user-land networking proxy package to use.

     ‘enable-proxy?’ (default ‘#f’)
          Enable or disable the use of the Docker user-land networking
          proxy.

     ‘debug?’ (default ‘#f’)
          Enable or disable debug output.

Auditd Service
..............

The ‘(gnu services auditd)’ module provides the following service.

 -- Scheme Variable: auditd-service-type

     This is the type of the service that runs auditd
     (https://people.redhat.com/sgrubb/audit/), a daemon that tracks
     security-relevant information on your system.

     Examples of things that can be tracked:

       1. File accesses
       2. System calls
       3. Invoked commands
       4. Failed login attempts
       5. Firewall filtering
       6. Network access

     ‘auditctl’ from the ‘audit’ package can be used in order to add or
     remove events to be tracked (until the next reboot).  In order to
     permanently track events, put the command line arguments of
     auditctl into ‘/etc/audit/audit.rules’.  ‘aureport’ from the
     ‘audit’ package can be used in order to view a report of all
     recorded events.  The audit daemon usually logs into the directory
     ‘/var/log/audit’.

 -- Data Type: auditd-configuration
     This is the data type representing the configuration of auditd.

     ‘audit’ (default: ‘audit’)
          The audit package to use.

 -- Scheme Variable: singularity-service-type
     This is the type of the service that allows you to run Singularity
     (https://www.sylabs.io/singularity/), a Docker-style tool to create
     and run application bundles (aka.  “containers”).  The value for
     this service is the Singularity package to use.

     The service does not install a daemon; instead, it installs helper
     programs as setuid-root (*note Setuid Programs::) such that
     unprivileged users can invoke ‘singularity run’ and similar
     commands.

Nix service
...........

The ‘(gnu services nix)’ module provides the following service.

 -- Scheme Variable: nix-service-type

     This is the type of the service that runs build daemon of the Nix
     (https://nixos.org/nix/) package manager.  Here is an example
     showing how to use it:

          (use-modules (gnu))
          (use-service-modules nix)
          (use-package-modules package-management)

          (operating-system
            ;; ...
            (packages (append (list nix)
                              %base-packages))

            (services (append (list (service nix-service-type))
                              %base-services)))

     After ‘guix system reconfigure’ configure Nix for your user:

        • Add a Nix channel and update it.  See Nix Package Manager
          Guide (https://nixos.org/nix/manual/).

        • Create a symlink to your profile and activate Nix profile:

          $ ln -s "/nix/var/nix/profiles/per-user/$USER/profile" ~/.nix-profile
          $ source /run/current-system/profile/etc/profile.d/nix.sh


File: guix.info,  Node: Setuid Programs,  Next: X.509 Certificates,  Prev: Services,  Up: System Configuration

8.9 Setuid Programs
===================

Some programs need to run with “root” privileges, even when they are
launched by unprivileged users.  A notorious example is the ‘passwd’
program, which users can run to change their password, and which needs
to access the ‘/etc/passwd’ and ‘/etc/shadow’ files—something normally
restricted to root, for obvious security reasons.  To address that,
these executables are “setuid-root”, meaning that they always run with
root privileges (*note (libc)How Change Persona::, for more info about
the setuid mechanism).

   The store itself _cannot_ contain setuid programs: that would be a
security issue since any user on the system can write derivations that
populate the store (*note The Store::).  Thus, a different mechanism is
used: instead of changing the setuid bit directly on files that are in
the store, we let the system administrator _declare_ which programs
should be setuid root.

   The ‘setuid-programs’ field of an ‘operating-system’ declaration
contains a list of G-expressions denoting the names of programs to be
setuid-root (*note Using the Configuration System::).  For instance, the
‘passwd’ program, which is part of the Shadow package, can be designated
by this G-expression (*note G-Expressions::):

     #~(string-append #$shadow "/bin/passwd")

   A default set of setuid programs is defined by the ‘%setuid-programs’
variable of the ‘(gnu system)’ module.

 -- Scheme Variable: %setuid-programs
     A list of G-expressions denoting common programs that are
     setuid-root.

     The list includes commands such as ‘passwd’, ‘ping’, ‘su’, and
     ‘sudo’.

   Under the hood, the actual setuid programs are created in the
‘/run/setuid-programs’ directory at system activation time.  The files
in this directory refer to the “real” binaries, which are in the store.


File: guix.info,  Node: X.509 Certificates,  Next: Name Service Switch,  Prev: Setuid Programs,  Up: System Configuration

8.10 X.509 Certificates
=======================

Web servers available over HTTPS (that is, HTTP over the transport-layer
security mechanism, TLS) send client programs an “X.509 certificate”
that the client can then use to _authenticate_ the server.  To do that,
clients verify that the server’s certificate is signed by a so-called
“certificate authority” (CA). But to verify the CA’s signature, clients
must have first acquired the CA’s certificate.

   Web browsers such as GNU IceCat include their own set of CA
certificates, such that they are able to verify CA signatures
out-of-the-box.

   However, most other programs that can talk HTTPS—‘wget’, ‘git’,
‘w3m’, etc.—need to be told where CA certificates can be found.

   In Guix, this is done by adding a package that provides certificates
to the ‘packages’ field of the ‘operating-system’ declaration (*note
operating-system Reference::).  Guix includes one such package,
‘nss-certs’, which is a set of CA certificates provided as part of
Mozilla’s Network Security Services.

   Note that it is _not_ part of ‘%base-packages’, so you need to
explicitly add it.  The ‘/etc/ssl/certs’ directory, which is where most
applications and libraries look for certificates by default, points to
the certificates installed globally.

   Unprivileged users, including users of Guix on a foreign distro, can
also install their own certificate package in their profile.  A number
of environment variables need to be defined so that applications and
libraries know where to find them.  Namely, the OpenSSL library honors
the ‘SSL_CERT_DIR’ and ‘SSL_CERT_FILE’ variables.  Some applications add
their own environment variables; for instance, the Git version control
system honors the certificate bundle pointed to by the ‘GIT_SSL_CAINFO’
environment variable.  Thus, you would typically run something like:

     guix install nss-certs
     export SSL_CERT_DIR="$HOME/.guix-profile/etc/ssl/certs"
     export SSL_CERT_FILE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
     export GIT_SSL_CAINFO="$SSL_CERT_FILE"

   As another example, R requires the ‘CURL_CA_BUNDLE’ environment
variable to point to a certificate bundle, so you would have to run
something like this:

     guix install nss-certs
     export CURL_CA_BUNDLE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"

   For other applications you may want to look up the required
environment variable in the relevant documentation.


File: guix.info,  Node: Name Service Switch,  Next: Initial RAM Disk,  Prev: X.509 Certificates,  Up: System Configuration

8.11 Name Service Switch
========================

The ‘(gnu system nss)’ module provides bindings to the configuration
file of the libc “name service switch” or “NSS” (*note (libc)NSS
Configuration File::).  In a nutshell, the NSS is a mechanism that
allows libc to be extended with new “name” lookup methods for system
databases, which includes host names, service names, user accounts, and
more (*note System Databases and Name Service Switch: (libc)Name Service
Switch.).

   The NSS configuration specifies, for each system database, which
lookup method is to be used, and how the various methods are chained
together—for instance, under which circumstances NSS should try the next
method in the list.  The NSS configuration is given in the
‘name-service-switch’ field of ‘operating-system’ declarations (*note
‘name-service-switch’: operating-system Reference.).

   As an example, the declaration below configures the NSS to use the
‘nss-mdns’ back-end (https://0pointer.de/lennart/projects/nss-mdns/),
which supports host name lookups over multicast DNS (mDNS) for host
names ending in ‘.local’:

     (name-service-switch
        (hosts (list %files    ;first, check /etc/hosts

                     ;; If the above did not succeed, try
                     ;; with 'mdns_minimal'.
                     (name-service
                       (name "mdns_minimal")

                       ;; 'mdns_minimal' is authoritative for
                       ;; '.local'.  When it returns "not found",
                       ;; no need to try the next methods.
                       (reaction (lookup-specification
                                  (not-found => return))))

                     ;; Then fall back to DNS.
                     (name-service
                       (name "dns"))

                     ;; Finally, try with the "full" 'mdns'.
                     (name-service
                       (name "mdns")))))

   Do not worry: the ‘%mdns-host-lookup-nss’ variable (see below)
contains this configuration, so you will not have to type it if all you
want is to have ‘.local’ host lookup working.

   Note that, in this case, in addition to setting the
‘name-service-switch’ of the ‘operating-system’ declaration, you also
need to use ‘avahi-service-type’ (*note ‘avahi-service-type’: Networking
Services.), or ‘%desktop-services’, which includes it (*note Desktop
Services::).  Doing this makes ‘nss-mdns’ accessible to the name service
cache daemon (*note ‘nscd-service’: Base Services.).

   For convenience, the following variables provide typical NSS
configurations.

 -- Scheme Variable: %default-nss
     This is the default name service switch configuration, a
     ‘name-service-switch’ object.

 -- Scheme Variable: %mdns-host-lookup-nss
     This is the name service switch configuration with support for host
     name lookup over multicast DNS (mDNS) for host names ending in
     ‘.local’.

   The reference for name service switch configuration is given below.
It is a direct mapping of the configuration file format of the C library
, so please refer to the C library manual for more information (*note
(libc)NSS Configuration File::).  Compared to the configuration file
format of libc NSS, it has the advantage not only of adding this warm
parenthetic feel that we like, but also static checks: you will know
about syntax errors and typos as soon as you run ‘guix system’.

 -- Data Type: name-service-switch

     This is the data type representation the configuration of libc’s
     name service switch (NSS). Each field below represents one of the
     supported system databases.

     ‘aliases’
     ‘ethers’
     ‘group’
     ‘gshadow’
     ‘hosts’
     ‘initgroups’
     ‘netgroup’
     ‘networks’
     ‘password’
     ‘public-key’
     ‘rpc’
     ‘services’
     ‘shadow’
          The system databases handled by the NSS. Each of these fields
          must be a list of ‘<name-service>’ objects (see below).

 -- Data Type: name-service

     This is the data type representing an actual name service and the
     associated lookup action.

     ‘name’
          A string denoting the name service (*note (libc)Services in
          the NSS configuration::).

          Note that name services listed here must be visible to nscd.
          This is achieved by passing the ‘#:name-services’ argument to
          ‘nscd-service’ the list of packages providing the needed name
          services (*note ‘nscd-service’: Base Services.).

     ‘reaction’
          An action specified using the ‘lookup-specification’ macro
          (*note (libc)Actions in the NSS configuration::).  For
          example:

               (lookup-specification (unavailable => continue)
                                     (success => return))


File: guix.info,  Node: Initial RAM Disk,  Next: Bootloader Configuration,  Prev: Name Service Switch,  Up: System Configuration

8.12 Initial RAM Disk
=====================

For bootstrapping purposes, the Linux-Libre kernel is passed an “initial
RAM disk”, or “initrd”.  An initrd contains a temporary root file system
as well as an initialization script.  The latter is responsible for
mounting the real root file system, and for loading any kernel modules
that may be needed to achieve that.

   The ‘initrd-modules’ field of an ‘operating-system’ declaration
allows you to specify Linux-libre kernel modules that must be available
in the initrd.  In particular, this is where you would list modules
needed to actually drive the hard disk where your root partition
is—although the default value of ‘initrd-modules’ should cover most use
cases.  For example, assuming you need the ‘megaraid_sas’ module in
addition to the default modules to be able to access your root file
system, you would write:

     (operating-system
       ;; ...
       (initrd-modules (cons "megaraid_sas" %base-initrd-modules)))

 -- Scheme Variable: %base-initrd-modules
     This is the list of kernel modules included in the initrd by
     default.

   Furthermore, if you need lower-level customization, the ‘initrd’
field of an ‘operating-system’ declaration allows you to specify which
initrd you would like to use.  The ‘(gnu system linux-initrd)’ module
provides three ways to build an initrd: the high-level ‘base-initrd’
procedure and the low-level ‘raw-initrd’ and ‘expression->initrd’
procedures.

   The ‘base-initrd’ procedure is intended to cover most common uses.
For example, if you want to add a bunch of kernel modules to be loaded
at boot time, you can define the ‘initrd’ field of the operating system
declaration like this:

     (initrd (lambda (file-systems . rest)
               ;; Create a standard initrd but set up networking
               ;; with the parameters QEMU expects by default.
               (apply base-initrd file-systems
                      #:qemu-networking? #t
                      rest)))

   The ‘base-initrd’ procedure also handles common use cases that
involves using the system as a QEMU guest, or as a “live” system with
volatile root file system.

   The ‘base-initrd’ procedure is built from ‘raw-initrd’ procedure.
Unlike ‘base-initrd’, ‘raw-initrd’ doesn’t do anything high-level, such
as trying to guess which kernel modules and packages should be included
to the initrd.  An example use of ‘raw-initrd’ is when a user has a
custom Linux kernel configuration and default kernel modules included by
‘base-initrd’ are not available.

   The initial RAM disk produced by ‘base-initrd’ or ‘raw-initrd’ honors
several options passed on the Linux kernel command line (that is,
arguments passed via the ‘linux’ command of GRUB, or the ‘-append’
option of QEMU), notably:

‘--load=BOOT’
     Tell the initial RAM disk to load BOOT, a file containing a Scheme
     program, once it has mounted the root file system.

     Guix uses this option to yield control to a boot program that runs
     the service activation programs and then spawns the GNU Shepherd,
     the initialization system.

‘--root=ROOT’
     Mount ROOT as the root file system.  ROOT can be a device name like
     ‘/dev/sda1’, a file system label, or a file system UUID. When
     unspecified, the device name from the root file system of the
     operating system declaration is used.

‘--system=SYSTEM’
     Have ‘/run/booted-system’ and ‘/run/current-system’ point to
     SYSTEM.

‘modprobe.blacklist=MODULES...’
     Instruct the initial RAM disk as well as the ‘modprobe’ command
     (from the kmod package) to refuse to load MODULES.  MODULES must be
     a comma-separated list of module names—e.g., ‘usbkbd,9pnet’.

‘--repl’
     Start a read-eval-print loop (REPL) from the initial RAM disk
     before it tries to load kernel modules and to mount the root file
     system.  Our marketing team calls it “boot-to-Guile”.  The Schemer
     in you will love it.  *Note (guile)Using Guile Interactively::, for
     more information on Guile’s REPL.

   Now that you know all the features that initial RAM disks produced by
‘base-initrd’ and ‘raw-initrd’ provide, here is how to use it and
customize it further.

 -- Scheme Procedure: raw-initrd FILE-SYSTEMS [#:linux-modules '()]
          [#:mapped-devices '()] [#:keyboard-layout #f]
          [#:helper-packages '()] [#:qemu-networking? #f]
          [#:volatile-root? #f]
     Return a derivation that builds a raw initrd.  FILE-SYSTEMS is a
     list of file systems to be mounted by the initrd, possibly in
     addition to the root file system specified on the kernel command
     line via ‘--root’.  LINUX-MODULES is a list of kernel modules to be
     loaded at boot time.  MAPPED-DEVICES is a list of device mappings
     to realize before FILE-SYSTEMS are mounted (*note Mapped
     Devices::).  HELPER-PACKAGES is a list of packages to be copied in
     the initrd.  It may include ‘e2fsck/static’ or other packages
     needed by the initrd to check the root file system.

     When true, KEYBOARD-LAYOUT is a ‘<keyboard-layout>’ record denoting
     the desired console keyboard layout.  This is done before
     MAPPED-DEVICES are set up and before FILE-SYSTEMS are mounted such
     that, should the user need to enter a passphrase or use the REPL,
     this happens using the intended keyboard layout.

     When QEMU-NETWORKING? is true, set up networking with the standard
     QEMU parameters.  When VIRTIO? is true, load additional modules so
     that the initrd can be used as a QEMU guest with para-virtualized
     I/O drivers.

     When VOLATILE-ROOT? is true, the root file system is writable but
     any changes to it are lost.

 -- Scheme Procedure: base-initrd FILE-SYSTEMS [#:mapped-devices '()]
          [#:keyboard-layout #f] [#:qemu-networking? #f]
          [#:volatile-root? #f] [#:linux-modules '()]
     Return as a file-like object a generic initrd, with kernel modules
     taken from LINUX.  FILE-SYSTEMS is a list of file-systems to be
     mounted by the initrd, possibly in addition to the root file system
     specified on the kernel command line via ‘--root’.  MAPPED-DEVICES
     is a list of device mappings to realize before FILE-SYSTEMS are
     mounted.

     When true, KEYBOARD-LAYOUT is a ‘<keyboard-layout>’ record denoting
     the desired console keyboard layout.  This is done before
     MAPPED-DEVICES are set up and before FILE-SYSTEMS are mounted such
     that, should the user need to enter a passphrase or use the REPL,
     this happens using the intended keyboard layout.

     QEMU-NETWORKING? and VOLATILE-ROOT? behaves as in ‘raw-initrd’.

     The initrd is automatically populated with all the kernel modules
     necessary for FILE-SYSTEMS and for the given options.  Additional
     kernel modules can be listed in LINUX-MODULES.  They will be added
     to the initrd, and loaded at boot time in the order in which they
     appear.

   Needless to say, the initrds we produce and use embed a
statically-linked Guile, and the initialization program is a Guile
program.  That gives a lot of flexibility.  The ‘expression->initrd’
procedure builds such an initrd, given the program to run in that
initrd.

 -- Scheme Procedure: expression->initrd EXP [#:guile
          %guile-3.0-static-stripped] [#:name "guile-initrd"]
     Return as a file-like object a Linux initrd (a gzipped cpio
     archive) containing GUILE and that evaluates EXP, a G-expression,
     upon booting.  All the derivations referenced by EXP are
     automatically copied to the initrd.


File: guix.info,  Node: Bootloader Configuration,  Next: Invoking guix system,  Prev: Initial RAM Disk,  Up: System Configuration

8.13 Bootloader Configuration
=============================

The operating system supports multiple bootloaders.  The bootloader is
configured using ‘bootloader-configuration’ declaration.  All the fields
of this structure are bootloader agnostic except for one field,
‘bootloader’ that indicates the bootloader to be configured and
installed.

   Some of the bootloaders do not honor every field of
‘bootloader-configuration’.  For instance, the extlinux bootloader does
not support themes and thus ignores the ‘theme’ field.

 -- Data Type: bootloader-configuration
     The type of a bootloader configuration declaration.

     ‘bootloader’
          The bootloader to use, as a ‘bootloader’ object.  For now
          ‘grub-bootloader’, ‘grub-efi-bootloader’,
          ‘extlinux-bootloader’ and ‘u-boot-bootloader’ are supported.

          ‘grub-efi-bootloader’ allows to boot on modern systems using
          the “Unified Extensible Firmware Interface” (UEFI). This is
          what you should use if the installation image contains a
          ‘/sys/firmware/efi’ directory when you boot it on your system.

          ‘grub-bootloader’ allows you to boot in particular Intel-based
          machines in “legacy” BIOS mode.

          Available bootloaders are described in ‘(gnu bootloader ...)’
          modules.  In particular, ‘(gnu bootloader u-boot)’ contains
          definitions of bootloaders for a wide range of ARM and AArch64
          systems, using the U-Boot bootloader
          (https://www.denx.de/wiki/U-Boot/).

     ‘target’
          This is a string denoting the target onto which to install the
          bootloader.

          The interpretation depends on the bootloader in question.  For
          ‘grub-bootloader’, for example, it should be a device name
          understood by the bootloader ‘installer’ command, such as
          ‘/dev/sda’ or ‘(hd0)’ (*note (grub)Invoking grub-install::).
          For ‘grub-efi-bootloader’, it should be the mount point of the
          EFI file system, usually ‘/boot/efi’.

     ‘menu-entries’ (default: ‘()’)
          A possibly empty list of ‘menu-entry’ objects (see below),
          denoting entries to appear in the bootloader menu, in addition
          to the current system entry and the entry pointing to previous
          system generations.

     ‘default-entry’ (default: ‘0’)
          The index of the default boot menu entry.  Index 0 is for the
          entry of the current system.

     ‘timeout’ (default: ‘5’)
          The number of seconds to wait for keyboard input before
          booting.  Set to 0 to boot immediately, and to -1 to wait
          indefinitely.

     ‘keyboard-layout’ (default: ‘#f’)
          If this is ‘#f’, the bootloader’s menu (if any) uses the
          default keyboard layout, usually US English (“qwerty”).

          Otherwise, this must be a ‘keyboard-layout’ object (*note
          Keyboard Layout::).

               Note: This option is currently ignored by bootloaders
               other than ‘grub’ and ‘grub-efi’.

     ‘theme’ (default: #F)
          The bootloader theme object describing the theme to use.  If
          no theme is provided, some bootloaders might use a default
          theme, that’s true for GRUB.

     ‘terminal-outputs’ (default: ‘'(gfxterm)’)
          The output terminals used for the bootloader boot menu, as a
          list of symbols.  GRUB accepts the values: ‘console’,
          ‘serial’, ‘serial_{0-3}’, ‘gfxterm’, ‘vga_text’, ‘mda_text’,
          ‘morse’, and ‘pkmodem’.  This field corresponds to the GRUB
          variable ‘GRUB_TERMINAL_OUTPUT’ (*note (grub)Simple
          configuration::).

     ‘terminal-inputs’ (default: ‘'()’)
          The input terminals used for the bootloader boot menu, as a
          list of symbols.  For GRUB, the default is the native platform
          terminal as determined at run-time.  GRUB accepts the values:
          ‘console’, ‘serial’, ‘serial_{0-3}’, ‘at_keyboard’, and
          ‘usb_keyboard’.  This field corresponds to the GRUB variable
          ‘GRUB_TERMINAL_INPUT’ (*note (grub)Simple configuration::).

     ‘serial-unit’ (default: ‘#f’)
          The serial unit used by the bootloader, as an integer from 0
          to 3.  For GRUB, it is chosen at run-time; currently GRUB
          chooses 0, which corresponds to COM1 (*note (grub)Serial
          terminal::).

     ‘serial-speed’ (default: ‘#f’)
          The speed of the serial interface, as an integer.  For GRUB,
          the default value is chosen at run-time; currently GRUB
          chooses 9600 bps (*note (grub)Serial terminal::).

   Should you want to list additional boot menu entries via the
‘menu-entries’ field above, you will need to create them with the
‘menu-entry’ form.  For example, imagine you want to be able to boot
another distro (hard to imagine!), you can define a menu entry along
these lines:

     (menu-entry
       (label "The Other Distro")
       (linux "/boot/old/vmlinux-2.6.32")
       (linux-arguments '("root=/dev/sda2"))
       (initrd "/boot/old/initrd"))

   Details below.

 -- Data Type: menu-entry
     The type of an entry in the bootloader menu.

     ‘label’
          The label to show in the menu—e.g., ‘"GNU"’.

     ‘linux’ (default: ‘#f’)
          The Linux kernel image to boot, for example:

               (file-append linux-libre "/bzImage")

          For GRUB, it is also possible to specify a device explicitly
          in the file path using GRUB’s device naming convention (*note
          (grub)Naming convention::), for example:

               "(hd0,msdos1)/boot/vmlinuz"

          If the device is specified explicitly as above, then the
          ‘device’ field is ignored entirely.

     ‘linux-arguments’ (default: ‘()’)
          The list of extra Linux kernel command-line arguments—e.g.,
          ‘("console=ttyS0")’.

     ‘initrd’ (default: ‘#f’)
          A G-Expression or string denoting the file name of the initial
          RAM disk to use (*note G-Expressions::).

     ‘device’ (default: ‘#f’)
          The device where the kernel and initrd are to be found—i.e.,
          for GRUB, “root” for this menu entry (*note (grub)root::).

          This may be a file system label (a string), a file system UUID
          (a bytevector, *note File Systems::), or ‘#f’, in which case
          the bootloader will search the device containing the file
          specified by the ‘linux’ field (*note (grub)search::).  It
          must _not_ be an OS device name such as ‘/dev/sda1’.

     ‘multiboot-kernel’ (default: ‘#f’)
          The kernel to boot in Multiboot-mode (*note
          (grub)multiboot::).  When this field is set, a Multiboot
          menu-entry is generated.  For example:

               (file-append mach "/boot/gnumach")

     ‘multiboot-arguments’ (default: ‘()’)
          The list of extra command-line arguments for the
          multiboot-kernel.

     ‘multiboot-modules’ (default: ‘()’)
          The list of commands for loading Multiboot modules.  For
          example:

               (list (list (file-append hurd "/hurd/ext2fs.static") "ext2fs"
                            ...)
                     (list (file-append libc "/lib/ld.so.1") "exec"
                            ...))

   For now only GRUB has theme support.  GRUB themes are created using
the ‘grub-theme’ form, which is not fully documented yet.

 -- Data Type: grub-theme
     Data type representing the configuration of the GRUB theme.

     ‘gfxmode’ (default: ‘'("auto")’)
          The GRUB ‘gfxmode’ to set (a list of screen resolution
          strings, see *note (grub)gfxmode::).

 -- Scheme Procedure: grub-theme
     Return the default GRUB theme used by the operating system if no
     ‘theme’ field is specified in ‘bootloader-configuration’ record.

     It comes with a fancy background image displaying the GNU and Guix
     logos.

   For example, to override the default resolution, you may use
something like

     (bootloader
      (bootloader-configuration
      ;; ...
      (theme (grub-theme
              (inherit (grub-theme))
              (gfxmode '("1024x786x32" "auto"))))))


File: guix.info,  Node: Invoking guix system,  Next: Invoking guix deploy,  Prev: Bootloader Configuration,  Up: System Configuration

8.14 Invoking ‘guix system’
===========================

Once you have written an operating system declaration as seen in the
previous section, it can be “instantiated” using the ‘guix system’
command.  The synopsis is:

     guix system OPTIONS... ACTION FILE

   FILE must be the name of a file containing an ‘operating-system’
declaration.  ACTION specifies how the operating system is instantiated.
Currently the following values are supported:

‘search’
     Display available service type definitions that match the given
     regular expressions, sorted by relevance:

          $ guix system search console
          name: console-fonts
          location: gnu/services/base.scm:806:2
          extends: shepherd-root
          description: Install the given fonts on the specified ttys (fonts are per
          + virtual console on GNU/Linux).  The value of this service is a list of
          + tty/font pairs.  The font can be the name of a font provided by the `kbd'
          + package or any valid argument to `setfont', as in this example:
          +
          +      '(("tty1" . "LatGrkCyr-8x16")
          +        ("tty2" . (file-append
          +                      font-tamzen
          +                      "/share/kbd/consolefonts/TamzenForPowerline10x20.psf"))
          +        ("tty3" . (file-append
          +                      font-terminus
          +                      "/share/consolefonts/ter-132n"))) ; for HDPI
          relevance: 9

          name: mingetty
          location: gnu/services/base.scm:1190:2
          extends: shepherd-root
          description: Provide console login using the `mingetty' program.
          relevance: 2

          name: login
          location: gnu/services/base.scm:860:2
          extends: pam
          description: Provide a console log-in service as specified by its
          + configuration value, a `login-configuration' object.
          relevance: 2

          ...

     As for ‘guix package --search’, the result is written in ‘recutils’
     format, which makes it easy to filter the output (*note GNU
     recutils databases: (recutils)Top.).

‘reconfigure’
     Build the operating system described in FILE, activate it, and
     switch to it(1).

          Note: It is highly recommended to run ‘guix pull’ once before
          you run ‘guix system reconfigure’ for the first time (*note
          Invoking guix pull::).  Failing to do that you would see an
          older version of Guix once ‘reconfigure’ has completed.

     This effects all the configuration specified in FILE: user
     accounts, system services, global package list, setuid programs,
     etc.  The command starts system services specified in FILE that are
     not currently running; if a service is currently running this
     command will arrange for it to be upgraded the next time it is
     stopped (e.g. by ‘herd stop X’ or ‘herd restart X’).

     This command creates a new generation whose number is one greater
     than the current generation (as reported by ‘guix system
     list-generations’).  If that generation already exists, it will be
     overwritten.  This behavior mirrors that of ‘guix package’ (*note
     Invoking guix package::).

     It also adds a bootloader menu entry for the new OS configuration,
     —unless ‘--no-bootloader’ is passed.  For GRUB, it moves entries
     for older configurations to a submenu, allowing you to choose an
     older system generation at boot time should you need it.

     Upon completion, the new system is deployed under
     ‘/run/current-system’.  This directory contains “provenance
     meta-data”: the list of channels in use (*note Channels::) and FILE
     itself, when available.  This information is useful should you
     later want to inspect how this particular generation was built.

     In fact, assuming FILE is self-contained, you can later rebuild
     generation N of your operating system with:

          guix time-machine \
            -C /var/guix/profiles/system-N-link/channels.scm -- \
            system reconfigure \
            /var/guix/profiles/system-N-link/configuration.scm

     You can think of it as some sort of built-in version control!  Your
     system is not just a binary artifact: _it carries its own source_.
     *Note ‘provenance-service-type’: Service Reference, for more
     information on provenance tracking.

‘switch-generation’
     Switch to an existing system generation.  This action atomically
     switches the system profile to the specified system generation.  It
     also rearranges the system’s existing bootloader menu entries.  It
     makes the menu entry for the specified system generation the
     default, and it moves the entries for the other generations to a
     submenu, if supported by the bootloader being used.  The next time
     the system boots, it will use the specified system generation.

     The bootloader itself is not being reinstalled when using this
     command.  Thus, the installed bootloader is used with an updated
     configuration file.

     The target generation can be specified explicitly by its generation
     number.  For example, the following invocation would switch to
     system generation 7:

          guix system switch-generation 7

     The target generation can also be specified relative to the current
     generation with the form ‘+N’ or ‘-N’, where ‘+3’ means “3
     generations ahead of the current generation,” and ‘-1’ means “1
     generation prior to the current generation.” When specifying a
     negative value such as ‘-1’, you must precede it with ‘--’ to
     prevent it from being parsed as an option.  For example:

          guix system switch-generation -- -1

     Currently, the effect of invoking this action is _only_ to switch
     the system profile to an existing generation and rearrange the
     bootloader menu entries.  To actually start using the target system
     generation, you must reboot after running this action.  In the
     future, it will be updated to do the same things as ‘reconfigure’,
     like activating and deactivating services.

     This action will fail if the specified generation does not exist.

‘roll-back’
     Switch to the preceding system generation.  The next time the
     system boots, it will use the preceding system generation.  This is
     the inverse of ‘reconfigure’, and it is exactly the same as
     invoking ‘switch-generation’ with an argument of ‘-1’.

     Currently, as with ‘switch-generation’, you must reboot after
     running this action to actually start using the preceding system
     generation.

‘delete-generations’
     Delete system generations, making them candidates for garbage
     collection (*note Invoking guix gc::, for information on how to run
     the “garbage collector”).

     This works in the same way as ‘guix package --delete-generations’
     (*note ‘--delete-generations’: Invoking guix package.).  With no
     arguments, all system generations but the current one are deleted:

          guix system delete-generations

     You can also select the generations you want to delete.  The
     example below deletes all the system generations that are more than
     two month old:

          guix system delete-generations 2m

     Running this command automatically reinstalls the bootloader with
     an updated list of menu entries—e.g., the “old generations”
     sub-menu in GRUB no longer lists the generations that have been
     deleted.

‘build’
     Build the derivation of the operating system, which includes all
     the configuration files and programs needed to boot and run the
     system.  This action does not actually install anything.

‘init’
     Populate the given directory with all the files necessary to run
     the operating system specified in FILE.  This is useful for
     first-time installations of Guix System.  For instance:

          guix system init my-os-config.scm /mnt

     copies to ‘/mnt’ all the store items required by the configuration
     specified in ‘my-os-config.scm’.  This includes configuration
     files, packages, and so on.  It also creates other essential files
     needed for the system to operate correctly—e.g., the ‘/etc’,
     ‘/var’, and ‘/run’ directories, and the ‘/bin/sh’ file.

     This command also installs bootloader on the target specified in
     ‘my-os-config’, unless the ‘--no-bootloader’ option was passed.

‘vm’
     Build a virtual machine that contains the operating system declared
     in FILE, and return a script to run that virtual machine (VM).

          Note: The ‘vm’ action and others below can use KVM support in
          the Linux-libre kernel.  Specifically, if the machine has
          hardware virtualization support, the corresponding KVM kernel
          module should be loaded, and the ‘/dev/kvm’ device node must
          exist and be readable and writable by the user and by the
          build users of the daemon (*note Build Environment Setup::).

     Arguments given to the script are passed to QEMU as in the example
     below, which enables networking and requests 1 GiB of RAM for the
     emulated machine:

          $ /gnu/store/...-run-vm.sh -m 1024 -smp 2 -net user,model=virtio-net-pci

     The VM shares its store with the host system.

     Additional file systems can be shared between the host and the VM
     using the ‘--share’ and ‘--expose’ command-line options: the former
     specifies a directory to be shared with write access, while the
     latter provides read-only access to the shared directory.

     The example below creates a VM in which the user’s home directory
     is accessible read-only, and where the ‘/exchange’ directory is a
     read-write mapping of ‘$HOME/tmp’ on the host:

          guix system vm my-config.scm \
             --expose=$HOME --share=$HOME/tmp=/exchange

     On GNU/Linux, the default is to boot directly to the kernel; this
     has the advantage of requiring only a very tiny root disk image
     since the store of the host can then be mounted.

     The ‘--full-boot’ option forces a complete boot sequence, starting
     with the bootloader.  This requires more disk space since a root
     image containing at least the kernel, initrd, and bootloader data
     files must be created.  The ‘--image-size’ option can be used to
     specify the size of the image.

‘vm-image’
‘disk-image’
‘docker-image’
     Return a virtual machine, disk image, or Docker image of the
     operating system declared in FILE that stands alone.  By default,
     ‘guix system’ estimates the size of the image needed to store the
     system, but you can use the ‘--image-size’ option to specify a
     value.  Docker images are built to contain exactly what they need,
     so the ‘--image-size’ option is ignored in the case of
     ‘docker-image’.

     You can specify the root file system type by using the
     ‘--file-system-type’ option.  It defaults to ‘ext4’.

     When using ‘vm-image’, the returned image is in qcow2 format, which
     the QEMU emulator can efficiently use.  *Note Running Guix in a
     VM::, for more information on how to run the image in a virtual
     machine.

     When using ‘disk-image’, a raw disk image is produced; it can be
     copied as is to a USB stick, for instance.  Assuming ‘/dev/sdc’ is
     the device corresponding to a USB stick, one can copy the image to
     it using the following command:

          # dd if=$(guix system disk-image my-os.scm) of=/dev/sdc

     When using ‘docker-image’, a Docker image is produced.  Guix builds
     the image from scratch, not from a pre-existing Docker base image.
     As a result, it contains _exactly_ what you define in the operating
     system configuration file.  You can then load the image and launch
     a Docker container using commands like the following:

          image_id="`docker load < guix-system-docker-image.tar.gz`"
          container_id="`docker create $image_id`"
          docker start $container_id

     This command starts a new Docker container from the specified
     image.  It will boot the Guix system in the usual manner, which
     means it will start any services you have defined in the operating
     system configuration.  You can get an interactive shell running in
     the container using ‘docker exec’:

          docker exec -ti $container_id /run/current-system/profile/bin/bash --login

     Depending on what you run in the Docker container, it may be
     necessary to give the container additional permissions.  For
     example, if you intend to build software using Guix inside of the
     Docker container, you may need to pass the ‘--privileged’ option to
     ‘docker create’.

     Last, the ‘--network’ option applies to ‘guix system docker-image’:
     it produces an image where network is supposedly shared with the
     host, and thus without services like nscd or NetworkManager.

‘container’
     Return a script to run the operating system declared in FILE within
     a container.  Containers are a set of lightweight isolation
     mechanisms provided by the kernel Linux-libre.  Containers are
     substantially less resource-demanding than full virtual machines
     since the kernel, shared objects, and other resources can be shared
     with the host system; this also means they provide thinner
     isolation.

     Currently, the script must be run as root in order to support more
     than a single user and group.  The container shares its store with
     the host system.

     As with the ‘vm’ action (*note guix system vm::), additional file
     systems to be shared between the host and container can be
     specified using the ‘--share’ and ‘--expose’ options:

          guix system container my-config.scm \
             --expose=$HOME --share=$HOME/tmp=/exchange

          Note: This option requires Linux-libre 3.19 or newer.

   OPTIONS can contain any of the common build options (*note Common
Build Options::).  In addition, OPTIONS can contain one of the
following:

‘--expression=EXPR’
‘-e EXPR’
     Consider the operating-system EXPR evaluates to.  This is an
     alternative to specifying a file which evaluates to an operating
     system.  This is used to generate the Guix system installer *note
     Building the Installation Image::).

‘--system=SYSTEM’
‘-s SYSTEM’
     Attempt to build for SYSTEM instead of the host system type.  This
     works as per ‘guix build’ (*note Invoking guix build::).

‘--derivation’
‘-d’
     Return the derivation file name of the given operating system
     without building anything.

‘--save-provenance’
     As discussed above, ‘guix system init’ and ‘guix system
     reconfigure’ always save provenance information via a dedicated
     service (*note ‘provenance-service-type’: Service Reference.).
     However, other commands don’t do that by default.  If you wish to,
     say, create a virtual machine image that contains provenance
     information, you can run:

          guix system vm-image --save-provenance config.scm

     That way, the resulting image will effectively “embed its own
     source” in the form of meta-data in ‘/run/current-system’.  With
     that information, one can rebuild the image to make sure it really
     contains what it pretends to contain; or they could use that to
     derive a variant of the image.

‘--file-system-type=TYPE’
‘-t TYPE’
     For the ‘disk-image’ action, create a file system of the given TYPE
     on the image.

     When this option is omitted, ‘guix system’ uses ‘ext4’.

     ‘--file-system-type=iso9660’ produces an ISO-9660 image, suitable
     for burning on CDs and DVDs.

‘--image-size=SIZE’
     For the ‘vm-image’ and ‘disk-image’ actions, create an image of the
     given SIZE.  SIZE may be a number of bytes, or it may include a
     unit as a suffix (*note size specifications: (coreutils)Block
     size.).

     When this option is omitted, ‘guix system’ computes an estimate of
     the image size as a function of the size of the system declared in
     FILE.

‘--network’
‘-N’
     For the ‘container’ action, allow containers to access the host
     network, that is, do not create a network namespace.

‘--root=FILE’
‘-r FILE’
     Make FILE a symlink to the result, and register it as a garbage
     collector root.

‘--skip-checks’
     Skip pre-installation safety checks.

     By default, ‘guix system init’ and ‘guix system reconfigure’
     perform safety checks: they make sure the file systems that appear
     in the ‘operating-system’ declaration actually exist (*note File
     Systems::), and that any Linux kernel modules that may be needed at
     boot time are listed in ‘initrd-modules’ (*note Initial RAM
     Disk::).  Passing this option skips these tests altogether.

‘--on-error=STRATEGY’
     Apply STRATEGY when an error occurs when reading FILE.  STRATEGY
     may be one of the following:

     ‘nothing-special’
          Report the error concisely and exit.  This is the default
          strategy.

     ‘backtrace’
          Likewise, but also display a backtrace.

     ‘debug’
          Report the error and enter Guile’s debugger.  From there, you
          can run commands such as ‘,bt’ to get a backtrace, ‘,locals’
          to display local variable values, and more generally inspect
          the state of the program.  *Note (guile)Debug Commands::, for
          a list of available debugging commands.

   Once you have built, configured, re-configured, and re-re-configured
your Guix installation, you may find it useful to list the operating
system generations available on disk—and that you can choose from the
bootloader boot menu:

‘describe’
     Describe the current system generation: its file name, the kernel
     and bootloader used, etc., as well as provenance information when
     available.

‘list-generations’
     List a summary of each generation of the operating system available
     on disk, in a human-readable way.  This is similar to the
     ‘--list-generations’ option of ‘guix package’ (*note Invoking guix
     package::).

     Optionally, one can specify a pattern, with the same syntax that is
     used in ‘guix package --list-generations’, to restrict the list of
     generations displayed.  For instance, the following command
     displays generations that are up to 10 days old:

          $ guix system list-generations 10d

   The ‘guix system’ command has even more to offer!  The following
sub-commands allow you to visualize how your system services relate to
each other:

‘extension-graph’
     Emit in Dot/Graphviz format to standard output the “service
     extension graph” of the operating system defined in FILE (*note
     Service Composition::, for more information on service extensions).

     The command:

          $ guix system extension-graph FILE | xdot -

     shows the extension relations among services.

‘shepherd-graph’
     Emit in Dot/Graphviz format to standard output the “dependency
     graph” of shepherd services of the operating system defined in
     FILE.  *Note Shepherd Services::, for more information and for an
     example graph.

   ---------- Footnotes ----------

   (1) This action (and the related actions ‘switch-generation’ and
‘roll-back’) are usable only on systems already running Guix System.


File: guix.info,  Node: Invoking guix deploy,  Next: Running Guix in a VM,  Prev: Invoking guix system,  Up: System Configuration

8.15 Invoking ‘guix deploy’
===========================

We’ve already seen ‘operating-system’ declarations used to manage a
machine’s configuration locally.  Suppose you need to configure multiple
machines, though—perhaps you’re managing a service on the web that’s
comprised of several servers.  ‘guix deploy’ enables you to use those
same ‘operating-system’ declarations to manage multiple remote hosts at
once as a logical “deployment”.

     Note: The functionality described in this section is still under
     development and is subject to change.  Get in touch with us on
     <guix-devel@gnu.org>!

     guix deploy FILE

   Such an invocation will deploy the machines that the code within FILE
evaluates to.  As an example, FILE might contain a definition like this:

     ;; This is a Guix deployment of a "bare bones" setup, with
     ;; no X11 display server, to a machine with an SSH daemon
     ;; listening on localhost:2222. A configuration such as this
     ;; may be appropriate for virtual machine with ports
     ;; forwarded to the host's loopback interface.

     (use-service-modules networking ssh)
     (use-package-modules bootloaders)

     (define %system
       (operating-system
        (host-name "gnu-deployed")
        (timezone "Etc/UTC")
        (bootloader (bootloader-configuration
                     (bootloader grub-bootloader)
                     (target "/dev/vda")
                     (terminal-outputs '(console))))
        (file-systems (cons (file-system
                             (mount-point "/")
                             (device "/dev/vda1")
                             (type "ext4"))
                            %base-file-systems))
        (services
         (append (list (service dhcp-client-service-type)
                       (service openssh-service-type
                                (openssh-configuration
                                 (permit-root-login #t)
                                 (allow-empty-passwords? #t))))
                 %base-services))))

     (list (machine
            (operating-system %system)
            (environment managed-host-environment-type)
            (configuration (machine-ssh-configuration
                            (host-name "localhost")
                            (system "x86_64-linux")
                            (user "alice")
                            (identity "./id_rsa")
                            (port 2222)))))

   The file should evaluate to a list of MACHINE objects.  This example,
upon being deployed, will create a new generation on the remote system
realizing the ‘operating-system’ declaration ‘%system’.  ‘environment’
and ‘configuration’ specify how the machine should be provisioned—that
is, how the computing resources should be created and managed.  The
above example does not create any resources, as a ‘'managed-host’ is a
machine that is already running the Guix system and available over the
network.  This is a particularly simple case; a more complex deployment
may involve, for example, starting virtual machines through a Virtual
Private Server (VPS) provider.  In such a case, a different ENVIRONMENT
type would be used.

   Do note that you first need to generate a key pair on the coordinator
machine to allow the daemon to export signed archives of files from the
store (*note Invoking guix archive::).

     # guix archive --generate-key

Each target machine must authorize the key of the master machine so that
it accepts store items it receives from the coordinator:

     # guix archive --authorize < coordinator-public-key.txt

   ‘user’, in this example, specifies the name of the user account to
log in as to perform the deployment.  Its default value is ‘root’, but
root login over SSH may be forbidden in some cases.  To work around
this, ‘guix deploy’ can log in as an unprivileged user and employ ‘sudo’
to escalate privileges.  This will only work if ‘sudo’ is currently
installed on the remote and can be invoked non-interactively as ‘user’.
That is, the line in ‘sudoers’ granting ‘user’ the ability to use ‘sudo’
must contain the ‘NOPASSWD’ tag.  This can be accomplished with the
following operating system configuration snippet:

     (use-modules ...
                  (gnu system))               ;for %sudoers-specification

     (define %user "username")

     (operating-system
       ...
       (sudoers-file
          (plain-file "sudoers"
                      (string-append (plain-file-content %sudoers-specification)
                                     (format #f "~a ALL = NOPASSWD: ALL~%"
                                             %user)))))


   For more information regarding the format of the ‘sudoers’ file,
consult ‘man sudoers’.

 -- Data Type: machine
     This is the data type representing a single machine in a
     heterogeneous Guix deployment.

     ‘operating-system’
          The object of the operating system configuration to deploy.

     ‘environment’
          An ‘environment-type’ describing how the machine should be
          provisioned.

     ‘configuration’ (default: ‘#f’)
          An object describing the configuration for the machine’s
          ‘environment’.  If the ‘environment’ has a default
          configuration, ‘#f’ may be used.  If ‘#f’ is used for an
          environment with no default configuration, however, an error
          will be thrown.

 -- Data Type: machine-ssh-configuration
     This is the data type representing the SSH client parameters for a
     machine with an ‘environment’ of ‘managed-host-environment-type’.

     ‘host-name’
     ‘build-locally?’ (default: ‘#t’)
          If false, system derivations will be built on the machine
          being deployed to.
     ‘system’
          The system type describing the architecture of the machine
          being deployed to—e.g., ‘"x86_64-linux"’.
     ‘authorize?’ (default: ‘#t’)
          If true, the coordinator’s signing key will be added to the
          remote’s ACL keyring.
     ‘port’ (default: ‘22’)
     ‘user’ (default: ‘"root"’)
     ‘identity’ (default: ‘#f’)
          If specified, the path to the SSH private key to use to
          authenticate with the remote host.

     ‘host-key’ (default: ‘#f’)
          This should be the SSH host key of the machine, which looks
          like this:

               ssh-ed25519 AAAAC3Nz... root@example.org

          When ‘host-key’ is ‘#f’, the server is authenticated against
          the ‘~/.ssh/known_hosts’ file, just like the OpenSSH ‘ssh’
          client does.

 -- Data Type: digital-ocean-configuration
     This is the data type describing the Droplet that should be created
     for a machine with an ‘environment’ of
     ‘digital-ocean-environment-type’.

     ‘ssh-key’
          The path to the SSH private key to use to authenticate with
          the remote host.  In the future, this field may not exist.
     ‘tags’
          A list of string “tags” that uniquely identify the machine.
          Must be given such that no two machines in the deployment have
          the same set of tags.
     ‘region’
          A Digital Ocean region slug, such as ‘"nyc3"’.
     ‘size’
          A Digital Ocean size slug, such as ‘"s-1vcpu-1gb"’
     ‘enable-ipv6?’
          Whether or not the droplet should be created with IPv6
          networking.


File: guix.info,  Node: Running Guix in a VM,  Next: Defining Services,  Prev: Invoking guix deploy,  Up: System Configuration

8.16 Running Guix in a Virtual Machine
======================================

To run Guix in a virtual machine (VM), one can use the pre-built Guix VM
image distributed at
<https://ftp.gnu.org/gnu/guix/guix-system-vm-image-1.0.1.17089-7e269.x86_64-linux.xz>.
This image is a compressed image in QCOW format.  You will first need to
decompress with ‘xz -d’, and then you can pass it to an emulator such as
QEMU (see below for details).

   This image boots the Xfce graphical environment and it contains some
commonly-used tools.  You can install more software in the image by
running ‘guix package’ in a terminal (*note Invoking guix package::).
You can also reconfigure the system based on its initial configuration
file available as ‘/run/current-system/configuration.scm’ (*note Using
the Configuration System::).

   Instead of using this pre-built image, one can also build their own
virtual machine image using ‘guix system vm-image’ (*note Invoking guix
system::).  The returned image is in qcow2 format, which the QEMU
emulator (https://qemu.org/) can efficiently use.

   If you built your own image, you must copy it out of the store (*note
The Store::) and give yourself permission to write to the copy before
you can use it.  When invoking QEMU, you must choose a system emulator
that is suitable for your hardware platform.  Here is a minimal QEMU
invocation that will boot the result of ‘guix system vm-image’ on x86_64
hardware:

     $ qemu-system-x86_64 \
        -nic user,model=virtio-net-pci \
        -enable-kvm -m 1024 \
        -device virtio-blk,drive=myhd \
        -drive if=none,file=/tmp/qemu-image,id=myhd

   Here is what each of these options means:

‘qemu-system-x86_64’
     This specifies the hardware platform to emulate.  This should match
     the host.

‘-nic user,model=virtio-net-pci’
     Enable the unprivileged user-mode network stack.  The guest OS can
     access the host but not vice versa.  This is the simplest way to
     get the guest OS online.  ‘model’ specifies which network device to
     emulate: ‘virtio-net-pci’ is a special device made for virtualized
     operating systems and recommended for most uses.  Assuming your
     hardware platform is x86_64, you can get a list of available NIC
     models by running ‘qemu-system-x86_64 -nic model=help’.

‘-enable-kvm’
     If your system has hardware virtualization extensions, enabling the
     virtual machine support (KVM) of the Linux kernel will make things
     run faster.

‘-m 1024’
     RAM available to the guest OS, in mebibytes.  Defaults to 128 MiB,
     which may be insufficient for some operations.

‘-device virtio-blk,drive=myhd’
     Create a ‘virtio-blk’ drive called “myhd”.  ‘virtio-blk’ is a
     “paravirtualization” mechanism for block devices that allows QEMU
     to achieve better performance than if it were emulating a complete
     disk drive.  See the QEMU and KVM documentation for more info.

‘-drive if=none,file=/tmp/qemu-image,id=myhd’
     Use our QCOW image, the ‘/tmp/qemu-image’ file, as the backing
     store the the “myhd” drive.

   The default ‘run-vm.sh’ script that is returned by an invocation of
‘guix system vm’ does not add a ‘-nic user’ flag by default.  To get
network access from within the vm add the ‘(dhcp-client-service)’ to
your system definition and start the VM using ‘`guix system vm
config.scm` -nic user’.  An important caveat of using ‘-nic user’ for
networking is that ‘ping’ will not work, because it uses the ICMP
protocol.  You’ll have to use a different command to check for network
connectivity, for example ‘guix download’.

8.16.1 Connecting Through SSH
-----------------------------

To enable SSH inside a VM you need to add an SSH server like
‘openssh-service-type’ to your VM (*note ‘openssh-service-type’:
Networking Services.).  In addition you need to forward the SSH port, 22
by default, to the host.  You can do this with

     `guix system vm config.scm` -nic user,model=virtio-net-pci,hostfwd=tcp::10022-:22

   To connect to the VM you can run

     ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 10022

   The ‘-p’ tells ‘ssh’ the port you want to connect to.  ‘-o
UserKnownHostsFile=/dev/null’ prevents ‘ssh’ from complaining every time
you modify your ‘config.scm’ file and the ‘-o StrictHostKeyChecking=no’
prevents you from having to allow a connection to an unknown host every
time you connect.

8.16.2 Using ‘virt-viewer’ with Spice
-------------------------------------

As an alternative to the default ‘qemu’ graphical client you can use the
‘remote-viewer’ from the ‘virt-viewer’ package.  To connect pass the
‘-spice port=5930,disable-ticketing’ flag to ‘qemu’.  See previous
section for further information on how to do this.

   Spice also allows you to do some nice stuff like share your clipboard
with your VM. To enable that you’ll also have to pass the following
flags to ‘qemu’:

     -device virtio-serial-pci,id=virtio-serial0,max_ports=16,bus=pci.0,addr=0x5
     -chardev spicevmc,name=vdagent,id=vdagent
     -device virtserialport,nr=1,bus=virtio-serial0.0,chardev=vdagent,
     name=com.redhat.spice.0

   You’ll also need to add the ‘(spice-vdagent-service)’ to your system
definition (*note Spice service: Miscellaneous Services.).


File: guix.info,  Node: Defining Services,  Prev: Running Guix in a VM,  Up: System Configuration

8.17 Defining Services
======================

The previous sections show the available services and how one can
combine them in an ‘operating-system’ declaration.  But how do we define
them in the first place?  And what is a service anyway?

* Menu:

* Service Composition::         The model for composing services.
* Service Types and Services::  Types and services.
* Service Reference::           API reference.
* Shepherd Services::           A particular type of service.


File: guix.info,  Node: Service Composition,  Next: Service Types and Services,  Up: Defining Services

8.17.1 Service Composition
--------------------------

Here we define a “service” as, broadly, something that extends the
functionality of the operating system.  Often a service is a process—a
“daemon”—started when the system boots: a secure shell server, a Web
server, the Guix build daemon, etc.  Sometimes a service is a daemon
whose execution can be triggered by another daemon—e.g., an FTP server
started by ‘inetd’ or a D-Bus service activated by ‘dbus-daemon’.
Occasionally, a service does not map to a daemon.  For instance, the
“account” service collects user accounts and makes sure they exist when
the system runs; the “udev” service collects device management rules and
makes them available to the eudev daemon; the ‘/etc’ service populates
the ‘/etc’ directory of the system.

   Guix system services are connected by “extensions”.  For instance,
the secure shell service _extends_ the Shepherd—the initialization
system, running as PID 1—by giving it the command lines to start and
stop the secure shell daemon (*note ‘openssh-service-type’: Networking
Services.); the UPower service extends the D-Bus service by passing it
its ‘.service’ specification, and extends the udev service by passing it
device management rules (*note ‘upower-service’: Desktop Services.); the
Guix daemon service extends the Shepherd by passing it the command lines
to start and stop the daemon, and extends the account service by passing
it a list of required build user accounts (*note Base Services::).

   All in all, services and their “extends” relations form a directed
acyclic graph (DAG). If we represent services as boxes and extensions as
arrows, a typical system might provide something like this:

 [image src="images/service-graph.png" alt="Typical service extension graph." ]

   At the bottom, we see the “system service”, which produces the
directory containing everything to run and boot the system, as returned
by the ‘guix system build’ command.  *Note Service Reference::, to learn
about the other service types shown here.  *Note the ‘guix system
extension-graph’ command: system-extension-graph, for information on how
to generate this representation for a particular operating system
definition.

   Technically, developers can define “service types” to express these
relations.  There can be any number of services of a given type on the
system—for instance, a system running two instances of the GNU secure
shell server (lsh) has two instances of ‘lsh-service-type’, with
different parameters.

   The following section describes the programming interface for service
types and services.


File: guix.info,  Node: Service Types and Services,  Next: Service Reference,  Prev: Service Composition,  Up: Defining Services

8.17.2 Service Types and Services
---------------------------------

A “service type” is a node in the DAG described above.  Let us start
with a simple example, the service type for the Guix build daemon (*note
Invoking guix-daemon::):

     (define guix-service-type
       (service-type
        (name 'guix)
        (extensions
         (list (service-extension shepherd-root-service-type guix-shepherd-service)
               (service-extension account-service-type guix-accounts)
               (service-extension activation-service-type guix-activation)))
        (default-value (guix-configuration))))

It defines three things:

  1. A name, whose sole purpose is to make inspection and debugging
     easier.

  2. A list of “service extensions”, where each extension designates the
     target service type and a procedure that, given the parameters of
     the service, returns a list of objects to extend the service of
     that type.

     Every service type has at least one service extension.  The only
     exception is the “boot service type”, which is the ultimate
     service.

  3. Optionally, a default value for instances of this type.

   In this example, ‘guix-service-type’ extends three services:

‘shepherd-root-service-type’
     The ‘guix-shepherd-service’ procedure defines how the Shepherd
     service is extended.  Namely, it returns a ‘<shepherd-service>’
     object that defines how ‘guix-daemon’ is started and stopped (*note
     Shepherd Services::).

‘account-service-type’
     This extension for this service is computed by ‘guix-accounts’,
     which returns a list of ‘user-group’ and ‘user-account’ objects
     representing the build user accounts (*note Invoking
     guix-daemon::).

‘activation-service-type’
     Here ‘guix-activation’ is a procedure that returns a gexp, which is
     a code snippet to run at “activation time”—e.g., when the service
     is booted.

   A service of this type is instantiated like this:

     (service guix-service-type
              (guix-configuration
                (build-accounts 5)
                (use-substitutes? #f)))

   The second argument to the ‘service’ form is a value representing the
parameters of this specific service instance.  *Note
‘guix-configuration’: guix-configuration-type, for information about the
‘guix-configuration’ data type.  When the value is omitted, the default
value specified by ‘guix-service-type’ is used:

     (service guix-service-type)

   ‘guix-service-type’ is quite simple because it extends other services
but is not extensible itself.

   The service type for an _extensible_ service looks like this:

     (define udev-service-type
       (service-type (name 'udev)
                     (extensions
                      (list (service-extension shepherd-root-service-type
                                               udev-shepherd-service)))

                     (compose concatenate)       ;concatenate the list of rules
                     (extend (lambda (config rules)
                               (match config
                                 (($ <udev-configuration> udev initial-rules)
                                  (udev-configuration
                                   (udev udev)   ;the udev package to use
                                   (rules (append initial-rules rules)))))))))

   This is the service type for the eudev device management daemon
(https://wiki.gentoo.org/wiki/Project:Eudev).  Compared to the previous
example, in addition to an extension of ‘shepherd-root-service-type’, we
see two new fields:

‘compose’
     This is the procedure to “compose” the list of extensions to
     services of this type.

     Services can extend the udev service by passing it lists of rules;
     we compose those extensions simply by concatenating them.

‘extend’
     This procedure defines how the value of the service is “extended”
     with the composition of the extensions.

     Udev extensions are composed into a list of rules, but the udev
     service value is itself a ‘<udev-configuration>’ record.  So here,
     we extend that record by appending the list of rules it contains to
     the list of contributed rules.

‘description’
     This is a string giving an overview of the service type.  The
     string can contain Texinfo markup (*note (texinfo)Overview::).  The
     ‘guix system search’ command searches these strings and displays
     them (*note Invoking guix system::).

   There can be only one instance of an extensible service type such as
‘udev-service-type’.  If there were more, the ‘service-extension’
specifications would be ambiguous.

   Still here?  The next section provides a reference of the programming
interface for services.


File: guix.info,  Node: Service Reference,  Next: Shepherd Services,  Prev: Service Types and Services,  Up: Defining Services

8.17.3 Service Reference
------------------------

We have seen an overview of service types (*note Service Types and
Services::).  This section provides a reference on how to manipulate
services and service types.  This interface is provided by the ‘(gnu
services)’ module.

 -- Scheme Procedure: service TYPE [VALUE]
     Return a new service of TYPE, a ‘<service-type>’ object (see
     below).  VALUE can be any object; it represents the parameters of
     this particular service instance.

     When VALUE is omitted, the default value specified by TYPE is used;
     if TYPE does not specify a default value, an error is raised.

     For instance, this:

          (service openssh-service-type)

     is equivalent to this:

          (service openssh-service-type
                   (openssh-configuration))

     In both cases the result is an instance of ‘openssh-service-type’
     with the default configuration.

 -- Scheme Procedure: service? OBJ
     Return true if OBJ is a service.

 -- Scheme Procedure: service-kind SERVICE
     Return the type of SERVICE—i.e., a ‘<service-type>’ object.

 -- Scheme Procedure: service-value SERVICE
     Return the value associated with SERVICE.  It represents its
     parameters.

   Here is an example of how a service is created and manipulated:

     (define s
       (service nginx-service-type
                (nginx-configuration
                 (nginx nginx)
                 (log-directory log-directory)
                 (run-directory run-directory)
                 (file config-file))))

     (service? s)
     ⇒ #t

     (eq? (service-kind s) nginx-service-type)
     ⇒ #t

   The ‘modify-services’ form provides a handy way to change the
parameters of some of the services of a list such as ‘%base-services’
(*note ‘%base-services’: Base Services.).  It evaluates to a list of
services.  Of course, you could always use standard list combinators
such as ‘map’ and ‘fold’ to do that (*note List Library:
(guile)SRFI-1.); ‘modify-services’ simply provides a more concise form
for this common pattern.

 -- Scheme Syntax: modify-services SERVICES (TYPE VARIABLE => BODY) ...

     Modify the services listed in SERVICES according to the given
     clauses.  Each clause has the form:

          (TYPE VARIABLE => BODY)

     where TYPE is a service type—e.g., ‘guix-service-type’—and VARIABLE
     is an identifier that is bound within the BODY to the service
     parameters—e.g., a ‘guix-configuration’ instance—of the original
     service of that TYPE.

     The BODY should evaluate to the new service parameters, which will
     be used to configure the new service.  This new service will
     replace the original in the resulting list.  Because a service’s
     service parameters are created using ‘define-record-type*’, you can
     write a succinct BODY that evaluates to the new service parameters
     by using the ‘inherit’ feature that ‘define-record-type*’ provides.

     *Note Using the Configuration System::, for example usage.

   Next comes the programming interface for service types.  This is
something you want to know when writing new service definitions, but not
necessarily when simply looking for ways to customize your
‘operating-system’ declaration.

 -- Data Type: service-type
     This is the representation of a “service type” (*note Service Types
     and Services::).

     ‘name’
          This is a symbol, used only to simplify inspection and
          debugging.

     ‘extensions’
          A non-empty list of ‘<service-extension>’ objects (see below).

     ‘compose’ (default: ‘#f’)
          If this is ‘#f’, then the service type denotes services that
          cannot be extended—i.e., services that do not receive “values”
          from other services.

          Otherwise, it must be a one-argument procedure.  The procedure
          is called by ‘fold-services’ and is passed a list of values
          collected from extensions.  It may return any single value.

     ‘extend’ (default: ‘#f’)
          If this is ‘#f’, services of this type cannot be extended.

          Otherwise, it must be a two-argument procedure:
          ‘fold-services’ calls it, passing it the initial value of the
          service as the first argument and the result of applying
          ‘compose’ to the extension values as the second argument.  It
          must return a value that is a valid parameter value for the
          service instance.

     *Note Service Types and Services::, for examples.

 -- Scheme Procedure: service-extension TARGET-TYPE COMPUTE
     Return a new extension for services of type TARGET-TYPE.  COMPUTE
     must be a one-argument procedure: ‘fold-services’ calls it, passing
     it the value associated with the service that provides the
     extension; it must return a valid value for the target service.

 -- Scheme Procedure: service-extension? OBJ
     Return true if OBJ is a service extension.

   Occasionally, you might want to simply extend an existing service.
This involves creating a new service type and specifying the extension
of interest, which can be verbose; the ‘simple-service’ procedure
provides a shorthand for this.

 -- Scheme Procedure: simple-service NAME TARGET VALUE
     Return a service that extends TARGET with VALUE.  This works by
     creating a singleton service type NAME, of which the returned
     service is an instance.

     For example, this extends mcron (*note Scheduled Job Execution::)
     with an additional job:

          (simple-service 'my-mcron-job mcron-service-type
                          #~(job '(next-hour (3)) "guix gc -F 2G"))

   At the core of the service abstraction lies the ‘fold-services’
procedure, which is responsible for “compiling” a list of services down
to a single directory that contains everything needed to boot and run
the system—the directory shown by the ‘guix system build’ command (*note
Invoking guix system::).  In essence, it propagates service extensions
down the service graph, updating each node parameters on the way, until
it reaches the root node.

 -- Scheme Procedure: fold-services SERVICES [#:target-type
          SYSTEM-SERVICE-TYPE]
     Fold SERVICES by propagating their extensions down to the root of
     type TARGET-TYPE; return the root service adjusted accordingly.

   Lastly, the ‘(gnu services)’ module also defines several essential
service types, some of which are listed below.

 -- Scheme Variable: system-service-type
     This is the root of the service graph.  It produces the system
     directory as returned by the ‘guix system build’ command.

 -- Scheme Variable: boot-service-type
     The type of the “boot service”, which produces the “boot script”.
     The boot script is what the initial RAM disk runs when booting.

 -- Scheme Variable: etc-service-type
     The type of the ‘/etc’ service.  This service is used to create
     files under ‘/etc’ and can be extended by passing it name/file
     tuples such as:

          (list `("issue" ,(plain-file "issue" "Welcome!\n")))

     In this example, the effect would be to add an ‘/etc/issue’ file
     pointing to the given file.

 -- Scheme Variable: setuid-program-service-type
     Type for the “setuid-program service”.  This service collects lists
     of executable file names, passed as gexps, and adds them to the set
     of setuid-root programs on the system (*note Setuid Programs::).

 -- Scheme Variable: profile-service-type
     Type of the service that populates the “system profile”—i.e., the
     programs under ‘/run/current-system/profile’.  Other services can
     extend it by passing it lists of packages to add to the system
     profile.

 -- Scheme Variable: provenance-service-type
     This is the type of the service that records “provenance meta-data”
     in the system itself.  It creates several files under
     ‘/run/current-system’:

     ‘channels.scm’
          This is a “channel file” that can be passed to ‘guix pull -C’
          or ‘guix time-machine -C’, and which describes the channels
          used to build the system, if that information was available
          (*note Channels::).

     ‘configuration.scm’
          This is the file that was passed as the value for this
          ‘provenance-service-type’ service.  By default, ‘guix system
          reconfigure’ automatically passes the OS configuration file it
          received on the command line.

     ‘provenance’
          This contains the same information as the two other files but
          in a format that is more readily processable.

     In general, these two pieces of information (channels and
     configuration file) are enough to reproduce the operating system
     “from source”.

          Caveats: This information is necessary to rebuild your
          operating system, but it is not always sufficient.  In
          particular, ‘configuration.scm’ itself is insufficient if it
          is not self-contained—if it refers to external Guile modules
          or to extra files.  If you want ‘configuration.scm’ to be
          self-contained, we recommend that modules or files it refers
          to be part of a channel.

          Besides, provenance meta-data is “silent” in the sense that it
          does not change the bits contained in your system, _except for
          the meta-data bits themselves_.  Two different OS
          configurations or sets of channels can lead to the same
          system, bit-for-bit; when ‘provenance-service-type’ is used,
          these two systems will have different meta-data and thus
          different store file names, which makes comparison less
          trivial.

     This service is automatically added to your operating system
     configuration when you use ‘guix system reconfigure’, ‘guix system
     init’, or ‘guix deploy’.


File: guix.info,  Node: Shepherd Services,  Prev: Service Reference,  Up: Defining Services

8.17.4 Shepherd Services
------------------------

The ‘(gnu services shepherd)’ module provides a way to define services
managed by the GNU Shepherd, which is the initialization system—the
first process that is started when the system boots, also known as PID 1
(*note (shepherd)Introduction::).

   Services in the Shepherd can depend on each other.  For instance, the
SSH daemon may need to be started after the syslog daemon has been
started, which in turn can only happen once all the file systems have
been mounted.  The simple operating system defined earlier (*note Using
the Configuration System::) results in a service graph like this:

 [image src="images/shepherd-graph.png" alt="Typical shepherd service graph." ]

   You can actually generate such a graph for any operating system
definition using the ‘guix system shepherd-graph’ command (*note ‘guix
system shepherd-graph’: system-shepherd-graph.).

   The ‘%shepherd-root-service’ is a service object representing PID 1,
of type ‘shepherd-root-service-type’; it can be extended by passing it
lists of ‘<shepherd-service>’ objects.

 -- Data Type: shepherd-service
     The data type representing a service managed by the Shepherd.

     ‘provision’
          This is a list of symbols denoting what the service provides.

          These are the names that may be passed to ‘herd start’, ‘herd
          status’, and similar commands (*note (shepherd)Invoking
          herd::).  *Note the ‘provides’ slot: (shepherd)Slots of
          services, for details.

     ‘requirement’ (default: ‘'()’)
          List of symbols denoting the Shepherd services this one
          depends on.

     ‘one-shot?’ (default: ‘#f’)
          Whether this service is “one-shot”.  One-shot services stop
          immediately after their ‘start’ action has completed.  *Note
          (shepherd)Slots of services::, for more info.

     ‘respawn?’ (default: ‘#t’)
          Whether to restart the service when it stops, for instance
          when the underlying process dies.

     ‘start’
     ‘stop’ (default: ‘#~(const #f)’)
          The ‘start’ and ‘stop’ fields refer to the Shepherd’s
          facilities to start and stop processes (*note
          (shepherd)Service De- and Constructors::).  They are given as
          G-expressions that get expanded in the Shepherd configuration
          file (*note G-Expressions::).

     ‘actions’ (default: ‘'()’)
          This is a list of ‘shepherd-action’ objects (see below)
          defining “actions” supported by the service, in addition to
          the standard ‘start’ and ‘stop’ actions.  Actions listed here
          become available as ‘herd’ sub-commands:

               herd ACTION SERVICE [ARGUMENTS...]

     ‘auto-start?’ (default: ‘#t’)
          Whether this service should be started automatically by the
          Shepherd.  If it is ‘#f’ the service has to be started
          manually with ‘herd start’.

     ‘documentation’
          A documentation string, as shown when running:

               herd doc SERVICE-NAME

          where SERVICE-NAME is one of the symbols in ‘provision’ (*note
          (shepherd)Invoking herd::).

     ‘modules’ (default: ‘%default-modules’)
          This is the list of modules that must be in scope when ‘start’
          and ‘stop’ are evaluated.

 -- Data Type: shepherd-action
     This is the data type that defines additional actions implemented
     by a Shepherd service (see above).

     ‘name’
          Symbol naming the action.

     ‘documentation’
          This is a documentation string for the action.  It can be
          viewed by running:

               herd doc SERVICE action ACTION

     ‘procedure’
          This should be a gexp that evaluates to a procedure of at
          least one argument, which is the “running value” of the
          service (*note (shepherd)Slots of services::).

     The following example defines an action called ‘say-hello’ that
     kindly greets the user:

          (shepherd-action
            (name 'say-hello)
            (documentation "Say hi!")
            (procedure #~(lambda (running . args)
                           (format #t "Hello, friend! arguments: ~s\n"
                                   args)
                           #t)))

     Assuming this action is added to the ‘example’ service, then you
     can do:

          # herd say-hello example
          Hello, friend! arguments: ()
          # herd say-hello example a b c
          Hello, friend! arguments: ("a" "b" "c")

     This, as you can see, is a fairly sophisticated way to say hello.
     *Note (shepherd)Service Convenience::, for more info on actions.

 -- Scheme Variable: shepherd-root-service-type
     The service type for the Shepherd “root service”—i.e., PID 1.

     This is the service type that extensions target when they want to
     create shepherd services (*note Service Types and Services::, for
     an example).  Each extension must pass a list of
     ‘<shepherd-service>’.

 -- Scheme Variable: %shepherd-root-service
     This service represents PID 1.


File: guix.info,  Node: Documentation,  Next: Installing Debugging Files,  Prev: System Configuration,  Up: Top

9 Documentation
***************

In most cases packages installed with Guix come with documentation.
There are two main documentation formats: “Info”, a browseable hypertext
format used for GNU software, and “manual pages” (or “man pages”), the
linear documentation format traditionally found on Unix.  Info manuals
are accessed with the ‘info’ command or with Emacs, and man pages are
accessed using ‘man’.

   You can look for documentation of software installed on your system
by keyword.  For example, the following command searches for information
about “TLS” in Info manuals:

     $ info -k TLS
     "(emacs)Network Security" -- STARTTLS
     "(emacs)Network Security" -- TLS
     "(gnutls)Core TLS API" -- gnutls_certificate_set_verify_flags
     "(gnutls)Core TLS API" -- gnutls_certificate_set_verify_function
     ...

The command below searches for the same keyword in man pages:

     $ man -k TLS
     SSL (7)              - OpenSSL SSL/TLS library
     certtool (1)         - GnuTLS certificate tool
     ...

   These searches are purely local to your computer so you have the
guarantee that documentation you find corresponds to what you have
actually installed, you can access it off-line, and your privacy is
respected.

   Once you have these results, you can view the relevant documentation
by running, say:

     $ info "(gnutls)Core TLS API"

or:

     $ man certtool

   Info manuals contain sections and indices as well as hyperlinks like
those found in Web pages.  The ‘info’ reader (*note Info reader:
(info-stnd)Top.) and its Emacs counterpart (*note (emacs)Misc Help::)
provide intuitive key bindings to navigate manuals.  *Note (info)Getting
Started::, for an introduction to Info navigation.


File: guix.info,  Node: Installing Debugging Files,  Next: Security Updates,  Prev: Documentation,  Up: Top

10 Installing Debugging Files
*****************************

Program binaries, as produced by the GCC compilers for instance, are
typically written in the ELF format, with a section containing
“debugging information”.  Debugging information is what allows the
debugger, GDB, to map binary code to source code; it is required to
debug a compiled program in good conditions.

   The problem with debugging information is that is takes up a fair
amount of disk space.  For example, debugging information for the GNU C
Library weighs in at more than 60 MiB. Thus, as a user, keeping all the
debugging info of all the installed programs is usually not an option.
Yet, space savings should not come at the cost of an impediment to
debugging—especially in the GNU system, which should make it easier for
users to exert their computing freedom (*note GNU Distribution::).

   Thankfully, the GNU Binary Utilities (Binutils) and GDB provide a
mechanism that allows users to get the best of both worlds: debugging
information can be stripped from the binaries and stored in separate
files.  GDB is then able to load debugging information from those files,
when they are available (*note (gdb)Separate Debug Files::).

   The GNU distribution takes advantage of this by storing debugging
information in the ‘lib/debug’ sub-directory of a separate package
output unimaginatively called ‘debug’ (*note Packages with Multiple
Outputs::).  Users can choose to install the ‘debug’ output of a package
when they need it.  For instance, the following command installs the
debugging information for the GNU C Library and for GNU Guile:

     guix install glibc:debug guile:debug

   GDB must then be told to look for debug files in the user’s profile,
by setting the ‘debug-file-directory’ variable (consider setting it from
the ‘~/.gdbinit’ file, *note (gdb)Startup::):

     (gdb) set debug-file-directory ~/.guix-profile/lib/debug

   From there on, GDB will pick up debugging information from the
‘.debug’ files under ‘~/.guix-profile/lib/debug’.

   In addition, you will most likely want GDB to be able to show the
source code being debugged.  To do that, you will have to unpack the
source code of the package of interest (obtained with ‘guix build
--source’, *note Invoking guix build::), and to point GDB to that source
directory using the ‘directory’ command (*note ‘directory’: (gdb)Source
Path.).

   The ‘debug’ output mechanism in Guix is implemented by the
‘gnu-build-system’ (*note Build Systems::).  Currently, it is
opt-in—debugging information is available only for the packages with
definitions explicitly declaring a ‘debug’ output.  This may be changed
to opt-out in the future if our build farm servers can handle the load.
To check whether a package has a ‘debug’ output, use ‘guix package
--list-available’ (*note Invoking guix package::).


File: guix.info,  Node: Security Updates,  Next: Bootstrapping,  Prev: Installing Debugging Files,  Up: Top

11 Security Updates
*******************

Occasionally, important security vulnerabilities are discovered in
software packages and must be patched.  Guix developers try hard to keep
track of known vulnerabilities and to apply fixes as soon as possible in
the ‘master’ branch of Guix (we do not yet provide a “stable” branch
containing only security updates).  The ‘guix lint’ tool helps
developers find out about vulnerable versions of software packages in
the distribution:

     $ guix lint -c cve
     gnu/packages/base.scm:652:2: glibc@2.21: probably vulnerable to CVE-2015-1781, CVE-2015-7547
     gnu/packages/gcc.scm:334:2: gcc@4.9.3: probably vulnerable to CVE-2015-5276
     gnu/packages/image.scm:312:2: openjpeg@2.1.0: probably vulnerable to CVE-2016-1923, CVE-2016-1924
     ...

   *Note Invoking guix lint::, for more information.

   Guix follows a functional package management discipline (*note
Introduction::), which implies that, when a package is changed, _every
package that depends on it_ must be rebuilt.  This can significantly
slow down the deployment of fixes in core packages such as libc or Bash,
since basically the whole distribution would need to be rebuilt.  Using
pre-built binaries helps (*note Substitutes::), but deployment may still
take more time than desired.

   To address this, Guix implements “grafts”, a mechanism that allows
for fast deployment of critical updates without the costs associated
with a whole-distribution rebuild.  The idea is to rebuild only the
package that needs to be patched, and then to “graft” it onto packages
explicitly installed by the user and that were previously referring to
the original package.  The cost of grafting is typically very low, and
order of magnitudes lower than a full rebuild of the dependency chain.

   For instance, suppose a security update needs to be applied to Bash.
Guix developers will provide a package definition for the “fixed” Bash,
say ‘bash-fixed’, in the usual way (*note Defining Packages::).  Then,
the original package definition is augmented with a ‘replacement’ field
pointing to the package containing the bug fix:

     (define bash
       (package
         (name "bash")
         ;; ...
         (replacement bash-fixed)))

   From there on, any package depending directly or indirectly on
Bash—as reported by ‘guix gc --requisites’ (*note Invoking guix
gc::)—that is installed is automatically “rewritten” to refer to
‘bash-fixed’ instead of ‘bash’.  This grafting process takes time
proportional to the size of the package, usually less than a minute for
an “average” package on a recent machine.  Grafting is recursive: when
an indirect dependency requires grafting, then grafting “propagates” up
to the package that the user is installing.

   Currently, the length of the name and version of the graft and that
of the package it replaces (‘bash-fixed’ and ‘bash’ in the example
above) must be equal.  This restriction mostly comes from the fact that
grafting works by patching files, including binary files, directly.
Other restrictions may apply: for instance, when adding a graft to a
package providing a shared library, the original shared library and its
replacement must have the same ‘SONAME’ and be binary-compatible.

   The ‘--no-grafts’ command-line option allows you to forcefully avoid
grafting (*note ‘--no-grafts’: Common Build Options.).  Thus, the
command:

     guix build bash --no-grafts

returns the store file name of the original Bash, whereas:

     guix build bash

returns the store file name of the “fixed”, replacement Bash.  This
allows you to distinguish between the two variants of Bash.

   To verify which Bash your whole profile refers to, you can run (*note
Invoking guix gc::):

     guix gc -R `readlink -f ~/.guix-profile` | grep bash

... and compare the store file names that you get with those above.
Likewise for a complete Guix system generation:

     guix gc -R `guix system build my-config.scm` | grep bash

   Lastly, to check which Bash running processes are using, you can use
the ‘lsof’ command:

     lsof | grep /gnu/store/.*bash


File: guix.info,  Node: Bootstrapping,  Next: Porting,  Prev: Security Updates,  Up: Top

12 Bootstrapping
****************

Bootstrapping in our context refers to how the distribution gets built
“from nothing”.  Remember that the build environment of a derivation
contains nothing but its declared inputs (*note Introduction::).  So
there’s an obvious chicken-and-egg problem: how does the first package
get built?  How does the first compiler get compiled?  Note that this is
a question of interest only to the curious hacker, not to the regular
user, so you can shamelessly skip this section if you consider yourself
a “regular user”.

   The GNU system is primarily made of C code, with libc at its core.
The GNU build system itself assumes the availability of a Bourne shell
and command-line tools provided by GNU Coreutils, Awk, Findutils, ‘sed’,
and ‘grep’.  Furthermore, build programs—programs that run
‘./configure’, ‘make’, etc.—are written in Guile Scheme (*note
Derivations::).  Consequently, to be able to build anything at all, from
scratch, Guix relies on pre-built binaries of Guile, GCC, Binutils,
libc, and the other packages mentioned above—the “bootstrap binaries”.

   These bootstrap binaries are “taken for granted”, though we can also
re-create them if needed (*note Preparing to Use the Bootstrap
Binaries::).

* Menu:

* Reduced Binary Seed Bootstrap::  A Bootstrap worthy of GNU.
* Preparing to Use the Bootstrap Binaries:: Building that what matters most.


File: guix.info,  Node: Reduced Binary Seed Bootstrap,  Next: Preparing to Use the Bootstrap Binaries,  Up: Bootstrapping

12.1 The Reduced Binary Seed Bootstrap
======================================

Guix—like other GNU/Linux distributions—is traditionally bootstrapped
from a set of bootstrap binaries: Bourne shell, command-line tools
provided by GNU Coreutils, Awk, Findutils, ‘sed’, and ‘grep’ and Guile,
GCC, Binutils, and the GNU C Library (*note Bootstrapping::).  Usually,
these bootstrap binaries are “taken for granted.”

   Taking the bootstrap binaries for granted means that we consider them
to be a correct and trustworthy “seed” for building the complete system.
Therein lies a problem: the combined size of these bootstrap binaries is
about 250MB (*note (mes)Bootstrappable Builds::).  Auditing or even
inspecting these is next to impossible.

   For ‘i686-linux’ and ‘x86_64-linux’, Guix now features a “Reduced
Binary Seed” bootstrap (1).

   The Reduced Binary Seed bootstrap removes the most critical
tools—from a trust perspective—from the bootstrap binaries: GCC,
Binutils and the GNU C Library are replaced by: ‘bootstrap-mescc-tools’
(a tiny assembler and linker) and ‘bootstrap-mes’ (a small Scheme
Interpreter and a C compiler written in Scheme and the Mes C Library,
built for TinyCC and for GCC).

   Using these new binary seeds the “missing” Binutils, GCC, and the GNU
C Library are built from source.  From here on the more traditional
bootstrap process resumes.  This approach has reduced the bootstrap
binaries in size to about 145MB in Guix v1.1.

   The next step that Guix has taken is to replace the shell and all its
utilities with implementations in Guile Scheme, the _Scheme-only
bootstrap_.  Gash (*note (gash)Gash::) is a POSIX-compatible shell that
replaces Bash, and it comes with Gash Utils which has minimalist
replacements for Awk, the GNU Core Utilities, Grep, Gzip, Sed, and Tar.
The rest of the bootstrap binary seeds that were removed are now built
from source.

   Building the GNU System from source is currently only possibly by
adding some historical GNU packages as intermediate steps(2).  As Gash
and Gash Utils mature, and GNU packages become more bootstrappable again
(e.g., new releases of GNU Sed will also ship as gzipped tarballs again,
as alternative to the hard to bootstrap ‘xz’-compression), this set of
added packages can hopefully be reduced again.

   The graph below shows the resulting dependency graph for
‘gcc-core-mesboot0’, the bootstrap compiler used for the traditional
bootstrap of the rest of the Guix System.

 [image src="images/gcc-core-mesboot0-graph.png" alt="Dependency graph of gcc-core-mesboot0" ]

   The only significant binary bootstrap seeds that remain(3) are a
Scheme intepreter and a Scheme compiler: GNU Mes and GNU Guile(4).

   This further reduction has brought down the size of the binary seed
to about 60MB for ‘i686-linux’ and ‘x86_64-linux’.

   Work is ongoing to remove all binary blobs from our free software
bootstrap stack, working towards a Full Source Bootstrap.  Also ongoing
is work to bring these bootstraps to the ‘arm-linux’ and ‘aarch64-linux’
architectures and to the Hurd.

   If you are interested, join us on ‘#bootstrappable’ on the Freenode
IRC network or discuss on <bug-mes@gnu.org> or <gash-devel@nongnu.org>.

   ---------- Footnotes ----------

   (1) We would like to say: “Full Source Bootstrap” and while we are
working towards that goal it would be hyperbole to use that term for
what we do now.

   (2) Packages such as ‘gcc-2.95.3’, ‘binutils-2.14’, ‘glibc-2.2.5’,
‘gzip-1.2.4’, ‘tar-1.22’, and some others.  For details, see
‘gnu/packages/commencement.scm’.

   (3) Ignoring the 68KB ‘mescc-tools’; that will be removed later,
together with ‘mes’.

   (4) Not shown in this graph are the static binaries for ‘bash’,
‘tar’, and ‘xz’ that are used to get Guile running.


File: guix.info,  Node: Preparing to Use the Bootstrap Binaries,  Prev: Reduced Binary Seed Bootstrap,  Up: Bootstrapping

12.2 Preparing to Use the Bootstrap Binaries
============================================

 [image src="images/bootstrap-graph.png" alt="Dependency graph of the early bootstrap derivations" ]

The figure above shows the very beginning of the dependency graph of the
distribution, corresponding to the package definitions of the ‘(gnu
packages bootstrap)’ module.  A similar figure can be generated with
‘guix graph’ (*note Invoking guix graph::), along the lines of:

     guix graph -t derivation \
       -e '(@@ (gnu packages bootstrap) %bootstrap-gcc)' \
       | dot -Tps > gcc.ps

   or, for the further Reduced Binary Seed bootstrap

     guix graph -t derivation \
       -e '(@@ (gnu packages bootstrap) %bootstrap-mes)' \
       | dot -Tps > mes.ps

   At this level of detail, things are slightly complex.  First, Guile
itself consists of an ELF executable, along with many source and
compiled Scheme files that are dynamically loaded when it runs.  This
gets stored in the ‘guile-2.0.7.tar.xz’ tarball shown in this graph.
This tarball is part of Guix’s “source” distribution, and gets inserted
into the store with ‘add-to-store’ (*note The Store::).

   But how do we write a derivation that unpacks this tarball and adds
it to the store?  To solve this problem, the ‘guile-bootstrap-2.0.drv’
derivation—the first one that gets built—uses ‘bash’ as its builder,
which runs ‘build-bootstrap-guile.sh’, which in turn calls ‘tar’ to
unpack the tarball.  Thus, ‘bash’, ‘tar’, ‘xz’, and ‘mkdir’ are
statically-linked binaries, also part of the Guix source distribution,
whose sole purpose is to allow the Guile tarball to be unpacked.

   Once ‘guile-bootstrap-2.0.drv’ is built, we have a functioning Guile
that can be used to run subsequent build programs.  Its first task is to
download tarballs containing the other pre-built binaries—this is what
the ‘.tar.xz.drv’ derivations do.  Guix modules such as ‘ftp-client.scm’
are used for this purpose.  The ‘module-import.drv’ derivations import
those modules in a directory in the store, using the original layout.
The ‘module-import-compiled.drv’ derivations compile those modules, and
write them in an output directory with the right layout.  This
corresponds to the ‘#:modules’ argument of
‘build-expression->derivation’ (*note Derivations::).

   Finally, the various tarballs are unpacked by the derivations
‘gcc-bootstrap-0.drv’, ‘glibc-bootstrap-0.drv’, or ‘bootstrap-mes-0.drv’
and ‘bootstrap-mescc-tools-0.drv’, at which point we have a working C
tool chain.

Building the Build Tools
========================

Bootstrapping is complete when we have a full tool chain that does not
depend on the pre-built bootstrap tools discussed above.  This
no-dependency requirement is verified by checking whether the files of
the final tool chain contain references to the ‘/gnu/store’ directories
of the bootstrap inputs.  The process that leads to this “final” tool
chain is described by the package definitions found in the ‘(gnu
packages commencement)’ module.

   The ‘guix graph’ command allows us to “zoom out” compared to the
graph above, by looking at the level of package objects instead of
individual derivations—remember that a package may translate to several
derivations, typically one derivation to download its source, one to
build the Guile modules it needs, and one to actually build the package
from source.  The command:

     guix graph -t bag \
       -e '(@@ (gnu packages commencement)
               glibc-final-with-bootstrap-bash)' | xdot -

displays the dependency graph leading to the “final” C library(1),
depicted below.

 [image src="images/bootstrap-packages.png" alt="Dependency graph of the early packages" ]

   The first tool that gets built with the bootstrap binaries is
GNU Make—noted ‘make-boot0’ above—which is a prerequisite for all the
following packages.  From there Findutils and Diffutils get built.

   Then come the first-stage Binutils and GCC, built as pseudo cross
tools—i.e., with ‘--target’ equal to ‘--host’.  They are used to build
libc.  Thanks to this cross-build trick, this libc is guaranteed not to
hold any reference to the initial tool chain.

   From there the final Binutils and GCC (not shown above) are built.
GCC uses ‘ld’ from the final Binutils, and links programs against the
just-built libc.  This tool chain is used to build the other packages
used by Guix and by the GNU Build System: Guile, Bash, Coreutils, etc.

   And voilà!  At this point we have the complete set of build tools
that the GNU Build System expects.  These are in the ‘%final-inputs’
variable of the ‘(gnu packages commencement)’ module, and are implicitly
used by any package that uses ‘gnu-build-system’ (*note
‘gnu-build-system’: Build Systems.).

Building the Bootstrap Binaries
===============================

Because the final tool chain does not depend on the bootstrap binaries,
those rarely need to be updated.  Nevertheless, it is useful to have an
automated way to produce them, should an update occur, and this is what
the ‘(gnu packages make-bootstrap)’ module provides.

   The following command builds the tarballs containing the bootstrap
binaries (Binutils, GCC, glibc, for the traditional bootstrap and
linux-libre-headers, bootstrap-mescc-tools, bootstrap-mes for the
Reduced Binary Seed bootstrap, and Guile, and a tarball containing a
mixture of Coreutils and other basic command-line tools):

     guix build bootstrap-tarballs

   The generated tarballs are those that should be referred to in the
‘(gnu packages bootstrap)’ module mentioned at the beginning of this
section.

   Still here?  Then perhaps by now you’ve started to wonder: when do we
reach a fixed point?  That is an interesting question!  The answer is
unknown, but if you would like to investigate further (and have
significant computational and storage resources to do so), then let us
know.

Reducing the Set of Bootstrap Binaries
======================================

Our traditional bootstrap includes GCC, GNU Libc, Guile, etc.  That’s a
lot of binary code!  Why is that a problem?  It’s a problem because
these big chunks of binary code are practically non-auditable, which
makes it hard to establish what source code produced them.  Every
unauditable binary also leaves us vulnerable to compiler backdoors as
described by Ken Thompson in the 1984 paper _Reflections on Trusting
Trust_.

   This is mitigated by the fact that our bootstrap binaries were
generated from an earlier Guix revision.  Nevertheless it lacks the
level of transparency that we get in the rest of the package dependency
graph, where Guix always gives us a source-to-binary mapping.  Thus, our
goal is to reduce the set of bootstrap binaries to the bare minimum.

   The Bootstrappable.org web site (https://bootstrappable.org) lists
on-going projects to do that.  One of these is about replacing the
bootstrap GCC with a sequence of assemblers, interpreters, and compilers
of increasing complexity, which could be built from source starting from
a simple and auditable assembler.

   Our first major achievement is the replacement of of GCC, the GNU C
Library and Binutils by MesCC-Tools (a simple hex linker and macro
assembler) and Mes (*note GNU Mes Reference Manual: (mes)Top, a Scheme
interpreter and C compiler in Scheme).  Neither MesCC-Tools nor Mes can
be fully bootstrapped yet and thus we inject them as binary seeds.  We
call this the Reduced Binary Seed bootstrap, as it has halved the size
of our bootstrap binaries!  Also, it has eliminated the C compiler
binary; i686-linux and x86_64-linux Guix packages are now bootstrapped
without any binary C compiler.

   Work is ongoing to make MesCC-Tools and Mes fully bootstrappable and
we are also looking at any other bootstrap binaries.  Your help is
welcome!

   ---------- Footnotes ----------

   (1) You may notice the ‘glibc-intermediate’ label, suggesting that it
is not _quite_ final, but as a good approximation, we will consider it
final.


File: guix.info,  Node: Porting,  Next: Contributing,  Prev: Bootstrapping,  Up: Top

13 Porting to a New Platform
****************************

As discussed above, the GNU distribution is self-contained, and
self-containment is achieved by relying on pre-built “bootstrap
binaries” (*note Bootstrapping::).  These binaries are specific to an
operating system kernel, CPU architecture, and application binary
interface (ABI). Thus, to port the distribution to a platform that is
not yet supported, one must build those bootstrap binaries, and update
the ‘(gnu packages bootstrap)’ module to use them on that platform.

   Fortunately, Guix can _cross compile_ those bootstrap binaries.  When
everything goes well, and assuming the GNU tool chain supports the
target platform, this can be as simple as running a command like this
one:

     guix build --target=armv5tel-linux-gnueabi bootstrap-tarballs

   For this to work, the ‘glibc-dynamic-linker’ procedure in ‘(gnu
packages bootstrap)’ must be augmented to return the right file name for
libc’s dynamic linker on that platform; likewise,
‘system->linux-architecture’ in ‘(gnu packages linux)’ must be taught
about the new platform.

   Once these are built, the ‘(gnu packages bootstrap)’ module needs to
be updated to refer to these binaries on the target platform.  That is,
the hashes and URLs of the bootstrap tarballs for the new platform must
be added alongside those of the currently supported platforms.  The
bootstrap Guile tarball is treated specially: it is expected to be
available locally, and ‘gnu/local.mk’ has rules to download it for the
supported architectures; a rule for the new platform must be added as
well.

   In practice, there may be some complications.  First, it may be that
the extended GNU triplet that specifies an ABI (like the ‘eabi’ suffix
above) is not recognized by all the GNU tools.  Typically, glibc
recognizes some of these, whereas GCC uses an extra ‘--with-abi’
configure flag (see ‘gcc.scm’ for examples of how to handle this).
Second, some of the required packages could fail to build for that
platform.  Lastly, the generated binaries could be broken for some
reason.


File: guix.info,  Node: Contributing,  Next: Acknowledgments,  Prev: Porting,  Up: Top

14 Contributing
***************

This project is a cooperative effort, and we need your help to make it
grow!  Please get in touch with us on <guix-devel@gnu.org> and ‘#guix’
on the Freenode IRC network.  We welcome ideas, bug reports, patches,
and anything that may be helpful to the project.  We particularly
welcome help on packaging (*note Packaging Guidelines::).

   We want to provide a warm, friendly, and harassment-free environment,
so that anyone can contribute to the best of their abilities.  To this
end our project uses a “Contributor Covenant”, which was adapted from
<https://contributor-covenant.org/>.  You can find a local version in
the ‘CODE-OF-CONDUCT’ file in the source tree.

   Contributors are not required to use their legal name in patches and
on-line communication; they can use any name or pseudonym of their
choice.

* Menu:

* Building from Git::           The latest and greatest.
* Running Guix Before It Is Installed::  Hacker tricks.
* The Perfect Setup::           The right tools.
* Packaging Guidelines::        Growing the distribution.
* Coding Style::                Hygiene of the contributor.
* Submitting Patches::          Share your work.
* Tracking Bugs and Patches::   Using Debbugs.
* Commit Access::               Pushing to the official repository.


File: guix.info,  Node: Building from Git,  Next: Running Guix Before It Is Installed,  Up: Contributing

14.1 Building from Git
======================

If you want to hack Guix itself, it is recommended to use the latest
version from the Git repository:

     git clone https://git.savannah.gnu.org/git/guix.git

   How do you ensure that you obtained a genuine copy of the repository?
Guix itself provides a tool to “authenticate” your checkout, but you
must first make sure this tool is genuine in order to “bootstrap” the
trust chain.  To do that, run:

     git verify-commit `git log --format=%H build-aux/git-authenticate.scm`

   The output must look something like:

     gpg: Signature made Fri 27 Dec 2019 01:27:41 PM CET
     gpg:                using RSA key 3CE464558A84FDC69DB40CFB090B11993D9AEBB5
     ...
     gpg: Signature made Fri 27 Dec 2019 01:25:22 PM CET
     gpg:                using RSA key 3CE464558A84FDC69DB40CFB090B11993D9AEBB5
     ...

...  meaning that changes to this file are all signed with key
‘3CE464558A84FDC69DB40CFB090B11993D9AEBB5’ (you may need to fetch this
key from a key server, if you have not done it yet).

   From there on, you can authenticate all the commits included in your
checkout by running:

     make authenticate

   The first run takes a couple of minutes, but subsequent runs are
faster.

     Note: You are advised to run ‘make authenticate’ after every ‘git
     pull’ invocation.  This ensures you keep receiving valid changes to
     the repository

   The easiest way to set up a development environment for Guix is, of
course, by using Guix!  The following command starts a new shell where
all the dependencies and appropriate environment variables are set up to
hack on Guix:

     guix environment guix --pure

   *Note Invoking guix environment::, for more information on that
command.

   If you are unable to use Guix when building Guix from a checkout, the
following are the required packages in addition to those mentioned in
the installation instructions (*note Requirements::).

   • GNU Autoconf (https://gnu.org/software/autoconf/);
   • GNU Automake (https://gnu.org/software/automake/);
   • GNU Gettext (https://gnu.org/software/gettext/);
   • GNU Texinfo (https://gnu.org/software/texinfo/);
   • Graphviz (https://www.graphviz.org/);
   • GNU Help2man (optional) (https://www.gnu.org/software/help2man/).

   On Guix, extra dependencies can be added by instead running ‘guix
environment’ with ‘--ad-hoc’:

     guix environment guix --pure --ad-hoc help2man git strace

   Run ‘./bootstrap’ to generate the build system infrastructure using
Autoconf and Automake.  If you get an error like this one:

     configure.ac:46: error: possibly undefined macro: PKG_CHECK_MODULES

it probably means that Autoconf couldn’t find ‘pkg.m4’, which is
provided by pkg-config.  Make sure that ‘pkg.m4’ is available.  The same
holds for the ‘guile.m4’ set of macros provided by Guile.  For instance,
if you installed Automake in ‘/usr/local’, it wouldn’t look for ‘.m4’
files in ‘/usr/share’.  In that case, you have to invoke the following
command:

     export ACLOCAL_PATH=/usr/share/aclocal

   *Note (automake)Macro Search Path::, for more information.

   Then, run ‘./configure’ as usual.  Make sure to pass
‘--localstatedir=DIRECTORY’ where DIRECTORY is the ‘localstatedir’ value
used by your current installation (*note The Store::, for information
about this).  We recommend to use the value ‘/var’.

   Finally, you have to invoke ‘make check’ to run tests (*note Running
the Test Suite::).  If anything fails, take a look at installation
instructions (*note Installation::) or send a message to the mailing
list <guix-devel@gnu.org>.


File: guix.info,  Node: Running Guix Before It Is Installed,  Next: The Perfect Setup,  Prev: Building from Git,  Up: Contributing

14.2 Running Guix Before It Is Installed
========================================

In order to keep a sane working environment, you will find it useful to
test the changes made in your local source tree checkout without
actually installing them.  So that you can distinguish between your
“end-user” hat and your “motley” costume.

   To that end, all the command-line tools can be used even if you have
not run ‘make install’.  To do that, you first need to have an
environment with all the dependencies available (*note Building from
Git::), and then simply prefix each command with ‘./pre-inst-env’ (the
‘pre-inst-env’ script lives in the top build tree of Guix; it is
generated by ‘./configure’).  An example(1):

     $ sudo -E ./pre-inst-env guix-daemon --build-users-group=guixbuild
     $ ./pre-inst-env guix build hello

Similarly, an example for a Guile session using the Guix modules:

     $ ./pre-inst-env guile -c '(use-modules (guix utils)) (pk (%current-system))'

     ;;; ("x86_64-linux")

... and for a REPL (*note (guile)Using Guile Interactively::):

     $ ./pre-inst-env guile
     scheme@(guile-user)> ,use(guix)
     scheme@(guile-user)> ,use(gnu)
     scheme@(guile-user)> (define snakes
                            (fold-packages
                              (lambda (package lst)
                                (if (string-prefix? "python"
                                                    (package-name package))
                                    (cons package lst)
                                    lst))
                              '()))
     scheme@(guile-user)> (length snakes)
     $1 = 361

   The ‘pre-inst-env’ script sets up all the environment variables
necessary to support this, including ‘PATH’ and ‘GUILE_LOAD_PATH’.

   Note that ‘./pre-inst-env guix pull’ does _not_ upgrade the local
source tree; it simply updates the ‘~/.config/guix/current’ symlink
(*note Invoking guix pull::).  Run ‘git pull’ instead if you want to
upgrade your local source tree.

   ---------- Footnotes ----------

   (1) The ‘-E’ flag to ‘sudo’ guarantees that ‘GUILE_LOAD_PATH’ is
correctly set such that ‘guix-daemon’ and the tools it uses can find the
Guile modules they need.


File: guix.info,  Node: The Perfect Setup,  Next: Packaging Guidelines,  Prev: Running Guix Before It Is Installed,  Up: Contributing

14.3 The Perfect Setup
======================

The Perfect Setup to hack on Guix is basically the perfect setup used
for Guile hacking (*note (guile)Using Guile in Emacs::).  First, you
need more than an editor, you need Emacs
(https://www.gnu.org/software/emacs), empowered by the wonderful Geiser
(https://nongnu.org/geiser/).  To set that up, run:

     guix package -i emacs guile emacs-geiser

   Geiser allows for interactive and incremental development from within
Emacs: code compilation and evaluation from within buffers, access to
on-line documentation (docstrings), context-sensitive completion, ‘M-.’
to jump to an object definition, a REPL to try out your code, and more
(*note (geiser)Introduction::).  For convenient Guix development, make
sure to augment Guile’s load path so that it finds source files from
your checkout:

     ;; Assuming the Guix checkout is in ~/src/guix.
     (with-eval-after-load 'geiser-guile
       (add-to-list 'geiser-guile-load-path "~/src/guix"))

   To actually edit the code, Emacs already has a neat Scheme mode.  But
in addition to that, you must not miss Paredit
(https://www.emacswiki.org/emacs/ParEdit).  It provides facilities to
directly operate on the syntax tree, such as raising an s-expression or
wrapping it, swallowing or rejecting the following s-expression, etc.

   We also provide templates for common git commit messages and package
definitions in the ‘etc/snippets’ directory.  These templates can be
used with YASnippet (https://joaotavora.github.io/yasnippet/) to expand
short trigger strings to interactive text snippets.  You may want to add
the snippets directory to the YAS-SNIPPET-DIRS variable in Emacs.

     ;; Assuming the Guix checkout is in ~/src/guix.
     (with-eval-after-load 'yasnippet
       (add-to-list 'yas-snippet-dirs "~/src/guix/etc/snippets"))

   The commit message snippets depend on Magit (https://magit.vc/) to
display staged files.  When editing a commit message type ‘add’ followed
by ‘TAB’ to insert a commit message template for adding a package; type
‘update’ followed by ‘TAB’ to insert a template for updating a package;
type ‘https’ followed by ‘TAB’ to insert a template for changing the
home page URI of a package to HTTPS.

   The main snippet for ‘scheme-mode’ is triggered by typing
‘package...’ followed by ‘TAB’.  This snippet also inserts the trigger
string ‘origin...’, which can be expanded further.  The ‘origin’ snippet
in turn may insert other trigger strings ending on ‘...’, which also can
be expanded further.

   Additionaly we provide insertion and automatic update of a copyright
in ‘etc/copyright.el’.  You may want to set your full name, mail, and
load a file.

     (setq user-full-name "Alice Doe")
     (setq user-mail-address "alice@mail.org")
     ;; Assuming the Guix checkout is in ~/src/guix.
     (load-file "~/src/guix/etc/copyright.el")

   To insert a copyright at the current line invoke ‘M-x
guix-copyright’.

   To update a copyright you need to specify a ‘copyright-names-regexp’.

     (setq copyright-names-regexp
           (format "%s <%s>" user-full-name user-mail-address))

   You can check if your copyright is up to date by evaluating ‘M-x
copyright-update’.  If you want to do it automatically after each buffer
save then add ‘(add-hook 'after-save-hook 'copyright-update)’ in Emacs.


File: guix.info,  Node: Packaging Guidelines,  Next: Coding Style,  Prev: The Perfect Setup,  Up: Contributing

14.4 Packaging Guidelines
=========================

The GNU distribution is nascent and may well lack some of your favorite
packages.  This section describes how you can help make the distribution
grow.

   Free software packages are usually distributed in the form of “source
code tarballs”—typically ‘tar.gz’ files that contain all the source
files.  Adding a package to the distribution means essentially two
things: adding a “recipe” that describes how to build the package,
including a list of other packages required to build it, and adding
“package metadata” along with that recipe, such as a description and
licensing information.

   In Guix all this information is embodied in “package definitions”.
Package definitions provide a high-level view of the package.  They are
written using the syntax of the Scheme programming language; in fact,
for each package we define a variable bound to the package definition,
and export that variable from a module (*note Package Modules::).
However, in-depth Scheme knowledge is _not_ a prerequisite for creating
packages.  For more information on package definitions, *note Defining
Packages::.

   Once a package definition is in place, stored in a file in the Guix
source tree, it can be tested using the ‘guix build’ command (*note
Invoking guix build::).  For example, assuming the new package is called
‘gnew’, you may run this command from the Guix build tree (*note Running
Guix Before It Is Installed::):

     ./pre-inst-env guix build gnew --keep-failed

   Using ‘--keep-failed’ makes it easier to debug build failures since
it provides access to the failed build tree.  Another useful
command-line option when debugging is ‘--log-file’, to access the build
log.

   If the package is unknown to the ‘guix’ command, it may be that the
source file contains a syntax error, or lacks a ‘define-public’ clause
to export the package variable.  To figure it out, you may load the
module from Guile to get more information about the actual error:

     ./pre-inst-env guile -c '(use-modules (gnu packages gnew))'

   Once your package builds correctly, please send us a patch (*note
Submitting Patches::).  Well, if you need help, we will be happy to help
you too.  Once the patch is committed in the Guix repository, the new
package automatically gets built on the supported platforms by our
continuous integration system (ci.guix.gnu.org).

   Users can obtain the new package definition simply by running ‘guix
pull’ (*note Invoking guix pull::).  When ‘ci.guix.gnu.org’ is done
building the package, installing the package automatically downloads
binaries from there (*note Substitutes::).  The only place where human
intervention is needed is to review and apply the patch.

* Menu:

* Software Freedom::            What may go into the distribution.
* Package Naming::              What’s in a name?
* Version Numbers::             When the name is not enough.
* Synopses and Descriptions::   Helping users find the right package.
* Python Modules::              A touch of British comedy.
* Perl Modules::                Little pearls.
* Java Packages::               Coffee break.
* Rust Crates::                 Beware of oxidation.
* Fonts::                       Fond of fonts.


File: guix.info,  Node: Software Freedom,  Next: Package Naming,  Up: Packaging Guidelines

14.4.1 Software Freedom
-----------------------

The GNU operating system has been developed so that users can have
freedom in their computing.  GNU is “free software”, meaning that users
have the four essential freedoms
(https://www.gnu.org/philosophy/free-sw.html): to run the program, to
study and change the program in source code form, to redistribute exact
copies, and to distribute modified versions.  Packages found in the GNU
distribution provide only software that conveys these four freedoms.

   In addition, the GNU distribution follow the free software
distribution guidelines
(https://www.gnu.org/distros/free-system-distribution-guidelines.html).
Among other things, these guidelines reject non-free firmware,
recommendations of non-free software, and discuss ways to deal with
trademarks and patents.

   Some otherwise free upstream package sources contain a small and
optional subset that violates the above guidelines, for instance because
this subset is itself non-free code.  When that happens, the offending
items are removed with appropriate patches or code snippets in the
‘origin’ form of the package (*note Defining Packages::).  This way,
‘guix build --source’ returns the “freed” source rather than the
unmodified upstream source.


File: guix.info,  Node: Package Naming,  Next: Version Numbers,  Prev: Software Freedom,  Up: Packaging Guidelines

14.4.2 Package Naming
---------------------

A package has actually two names associated with it: First, there is the
name of the _Scheme variable_, the one following ‘define-public’.  By
this name, the package can be made known in the Scheme code, for
instance as input to another package.  Second, there is the string in
the ‘name’ field of a package definition.  This name is used by package
management commands such as ‘guix package’ and ‘guix build’.

   Both are usually the same and correspond to the lowercase conversion
of the project name chosen upstream, with underscores replaced with
hyphens.  For instance, GNUnet is available as ‘gnunet’, and SDL_net as
‘sdl-net’.

   We do not add ‘lib’ prefixes for library packages, unless these are
already part of the official project name.  But *note Python Modules::
and *note Perl Modules:: for special rules concerning modules for the
Python and Perl languages.

   Font package names are handled differently, *note Fonts::.


File: guix.info,  Node: Version Numbers,  Next: Synopses and Descriptions,  Prev: Package Naming,  Up: Packaging Guidelines

14.4.3 Version Numbers
----------------------

We usually package only the latest version of a given free software
project.  But sometimes, for instance for incompatible library versions,
two (or more) versions of the same package are needed.  These require
different Scheme variable names.  We use the name as defined in *note
Package Naming:: for the most recent version; previous versions use the
same name, suffixed by ‘-’ and the smallest prefix of the version number
that may distinguish the two versions.

   The name inside the package definition is the same for all versions
of a package and does not contain any version number.

   For instance, the versions 2.24.20 and 3.9.12 of GTK+ may be packaged
as follows:

     (define-public gtk+
       (package
         (name "gtk+")
         (version "3.9.12")
         ...))
     (define-public gtk+-2
       (package
         (name "gtk+")
         (version "2.24.20")
         ...))
   If we also wanted GTK+ 3.8.2, this would be packaged as
     (define-public gtk+-3.8
       (package
         (name "gtk+")
         (version "3.8.2")
         ...))

   Occasionally, we package snapshots of upstream’s version control
system (VCS) instead of formal releases.  This should remain
exceptional, because it is up to upstream developers to clarify what the
stable release is.  Yet, it is sometimes necessary.  So, what should we
put in the ‘version’ field?

   Clearly, we need to make the commit identifier of the VCS snapshot
visible in the version string, but we also need to make sure that the
version string is monotonically increasing so that ‘guix package
--upgrade’ can determine which version is newer.  Since commit
identifiers, notably with Git, are not monotonically increasing, we add
a revision number that we increase each time we upgrade to a newer
snapshot.  The resulting version string looks like this:

     2.0.11-3.cabba9e
       ^    ^    ^
       |    |    `-- upstream commit ID
       |    |
       |    `--- Guix package revision
       |
     latest upstream version

   It is a good idea to strip commit identifiers in the ‘version’ field
to, say, 7 digits.  It avoids an aesthetic annoyance (assuming
aesthetics have a role to play here) as well as problems related to OS
limits such as the maximum shebang length (127 bytes for the Linux
kernel).  It is best to use the full commit identifiers in ‘origin’s,
though, to avoid ambiguities.  A typical package definition may look
like this:

     (define my-package
       (let ((commit "c3f29bc928d5900971f65965feaae59e1272a3f7")
             (revision "1"))          ;Guix package revision
         (package
           (version (git-version "0.9" revision commit))
           (source (origin
                     (method git-fetch)
                     (uri (git-reference
                           (url "git://example.org/my-package.git")
                           (commit commit)))
                     (sha256 (base32 "1mbikn..."))
                     (file-name (git-file-name name version))))
           ;; ...
           )))


File: guix.info,  Node: Synopses and Descriptions,  Next: Python Modules,  Prev: Version Numbers,  Up: Packaging Guidelines

14.4.4 Synopses and Descriptions
--------------------------------

As we have seen before, each package in GNU Guix includes a synopsis and
a description (*note Defining Packages::).  Synopses and descriptions
are important: They are what ‘guix package --search’ searches, and a
crucial piece of information to help users determine whether a given
package suits their needs.  Consequently, packagers should pay attention
to what goes into them.

   Synopses must start with a capital letter and must not end with a
period.  They must not start with “a” or “the”, which usually does not
bring anything; for instance, prefer “File-frobbing tool” over “A tool
that frobs files”.  The synopsis should say what the package is—e.g.,
“Core GNU utilities (file, text, shell)”—or what it is used for—e.g.,
the synopsis for GNU grep is “Print lines matching a pattern”.

   Keep in mind that the synopsis must be meaningful for a very wide
audience.  For example, “Manipulate alignments in the SAM format” might
make sense for a seasoned bioinformatics researcher, but might be fairly
unhelpful or even misleading to a non-specialized audience.  It is a
good idea to come up with a synopsis that gives an idea of the
application domain of the package.  In this example, this might give
something like “Manipulate nucleotide sequence alignments”, which
hopefully gives the user a better idea of whether this is what they are
looking for.

   Descriptions should take between five and ten lines.  Use full
sentences, and avoid using acronyms without first introducing them.
Please avoid marketing phrases such as “world-leading”,
“industrial-strength”, and “next-generation”, and avoid superlatives
like “the most advanced”—they are not helpful to users looking for a
package and may even sound suspicious.  Instead, try to be factual,
mentioning use cases and features.

   Descriptions can include Texinfo markup, which is useful to introduce
ornaments such as ‘@code’ or ‘@dfn’, bullet lists, or hyperlinks (*note
(texinfo)Overview::).  However you should be careful when using some
characters for example ‘@’ and curly braces which are the basic special
characters in Texinfo (*note (texinfo)Special Characters::).  User
interfaces such as ‘guix package --show’ take care of rendering it
appropriately.

   Synopses and descriptions are translated by volunteers at the
Translation Project
(https://translationproject.org/domain/guix-packages.html) so that as
many users as possible can read them in their native language.  User
interfaces search them and display them in the language specified by the
current locale.

   To allow ‘xgettext’ to extract them as translatable strings, synopses
and descriptions _must be literal strings_.  This means that you cannot
use ‘string-append’ or ‘format’ to construct these strings:

     (package
       ;; ...
       (synopsis "This is translatable")
       (description (string-append "This is " "*not*" " translatable.")))

   Translation is a lot of work so, as a packager, please pay even more
attention to your synopses and descriptions as every change may entail
additional work for translators.  In order to help them, it is possible
to make recommendations or instructions visible to them by inserting
special comments like this (*note (gettext)xgettext Invocation::):

     ;; TRANSLATORS: "X11 resize-and-rotate" should not be translated.
     (description "ARandR is designed to provide a simple visual front end
     for the X11 resize-and-rotate (RandR) extension. ...")


File: guix.info,  Node: Python Modules,  Next: Perl Modules,  Prev: Synopses and Descriptions,  Up: Packaging Guidelines

14.4.5 Python Modules
---------------------

We currently package Python 2 and Python 3, under the Scheme variable
names ‘python-2’ and ‘python’ as explained in *note Version Numbers::.
To avoid confusion and naming clashes with other programming languages,
it seems desirable that the name of a package for a Python module
contains the word ‘python’.

   Some modules are compatible with only one version of Python, others
with both.  If the package Foo is compiled with Python 3, we name it
‘python-foo’.  If it is compiled with Python 2, we name it
‘python2-foo’.  Packages should be added when they are necessary; we
don’t add Python 2 variants of the package unless we are going to use
them.

   If a project already contains the word ‘python’, we drop this; for
instance, the module python-dateutil is packaged under the names
‘python-dateutil’ and ‘python2-dateutil’.  If the project name starts
with ‘py’ (e.g. ‘pytz’), we keep it and prefix it as described above.

14.4.5.1 Specifying Dependencies
................................

Dependency information for Python packages is usually available in the
package source tree, with varying degrees of accuracy: in the ‘setup.py’
file, in ‘requirements.txt’, or in ‘tox.ini’.

   Your mission, when writing a recipe for a Python package, is to map
these dependencies to the appropriate type of “input” (*note inputs:
package Reference.).  Although the ‘pypi’ importer normally does a good
job (*note Invoking guix import::), you may want to check the following
check list to determine which dependency goes where.

   • We currently package Python 2 with ‘setuptools’ and ‘pip’ installed
     like Python 3.4 has per default.  Thus you don’t need to specify
     either of these as an input.  ‘guix lint’ will warn you if you do.

   • Python dependencies required at run time go into
     ‘propagated-inputs’.  They are typically defined with the
     ‘install_requires’ keyword in ‘setup.py’, or in the
     ‘requirements.txt’ file.

   • Python packages required only at build time—e.g., those listed with
     the ‘setup_requires’ keyword in ‘setup.py’—or only for
     testing—e.g., those in ‘tests_require’—go into ‘native-inputs’.
     The rationale is that (1) they do not need to be propagated because
     they are not needed at run time, and (2) in a cross-compilation
     context, it’s the “native” input that we’d want.

     Examples are the ‘pytest’, ‘mock’, and ‘nose’ test frameworks.  Of
     course if any of these packages is also required at run-time, it
     needs to go to ‘propagated-inputs’.

   • Anything that does not fall in the previous categories goes to
     ‘inputs’, for example programs or C libraries required for building
     Python packages containing C extensions.

   • If a Python package has optional dependencies (‘extras_require’),
     it is up to you to decide whether to add them or not, based on
     their usefulness/overhead ratio (*note ‘guix size’: Submitting
     Patches.).


File: guix.info,  Node: Perl Modules,  Next: Java Packages,  Prev: Python Modules,  Up: Packaging Guidelines

14.4.6 Perl Modules
-------------------

Perl programs standing for themselves are named as any other package,
using the lowercase upstream name.  For Perl packages containing a
single class, we use the lowercase class name, replace all occurrences
of ‘::’ by dashes and prepend the prefix ‘perl-’.  So the class
‘XML::Parser’ becomes ‘perl-xml-parser’.  Modules containing several
classes keep their lowercase upstream name and are also prepended by
‘perl-’.  Such modules tend to have the word ‘perl’ somewhere in their
name, which gets dropped in favor of the prefix.  For instance,
‘libwww-perl’ becomes ‘perl-libwww’.


File: guix.info,  Node: Java Packages,  Next: Rust Crates,  Prev: Perl Modules,  Up: Packaging Guidelines

14.4.7 Java Packages
--------------------

Java programs standing for themselves are named as any other package,
using the lowercase upstream name.

   To avoid confusion and naming clashes with other programming
languages, it is desirable that the name of a package for a Java package
is prefixed with ‘java-’.  If a project already contains the word
‘java’, we drop this; for instance, the package ‘ngsjava’ is packaged
under the name ‘java-ngs’.

   For Java packages containing a single class or a small class
hierarchy, we use the lowercase class name, replace all occurrences of
‘.’ by dashes and prepend the prefix ‘java-’.  So the class
‘apache.commons.cli’ becomes package ‘java-apache-commons-cli’.


File: guix.info,  Node: Rust Crates,  Next: Fonts,  Prev: Java Packages,  Up: Packaging Guidelines

14.4.8 Rust Crates
------------------

Rust programs standing for themselves are named as any other package,
using the lowercase upstream name.

   To prevent namespace collisions we prefix all other Rust packages
with the ‘rust-’ prefix.  The name should be changed to lowercase as
appropriate and dashes should remain in place.

   In the rust ecosystem it is common for multiple incompatible versions
of a package to be used at any given time, so all packages should have a
versioned suffix.  If a package has passed version 1.0.0 then just the
major version number is sufficient (e.g. ‘rust-clap-2’), otherwise the
version suffix should contain both the major and minor version (e.g.
‘rust-rand-0.6’).

   Because of the difficulty in reusing rust packages as pre-compiled
inputs for other packages the Cargo build system (*note
‘cargo-build-system’: Build Systems.) presents the ‘#:cargo-inputs’ and
‘cargo-development-inputs’ keywords as build system arguments.  It would
be helpful to think of these as similar to ‘propagated-inputs’ and
‘native-inputs’.  Rust ‘dependencies’ and ‘build-dependencies’ should go
in ‘#:cargo-inputs’, and ‘dev-dependencies’ should go in
‘#:cargo-development-inputs’.  If a Rust package links to other
libraries then the standard placement in ‘inputs’ and the like should be
used.

   Care should be taken to ensure the correct version of dependencies
are used; to this end we try to refrain from skipping the tests or using
‘#:skip-build?’ when possible.  Of course this is not always possible,
as the package may be developed for a different Operating System, depend
on features from the Nightly Rust compiler, or the test suite may have
atrophied since it was released.


File: guix.info,  Node: Fonts,  Prev: Rust Crates,  Up: Packaging Guidelines

14.4.9 Fonts
------------

For fonts that are in general not installed by a user for typesetting
purposes, or that are distributed as part of a larger software package,
we rely on the general packaging rules for software; for instance, this
applies to the fonts delivered as part of the X.Org system or fonts that
are part of TeX Live.

   To make it easier for a user to search for fonts, names for other
packages containing only fonts are constructed as follows, independently
of the upstream package name.

   The name of a package containing only one font family starts with
‘font-’; it is followed by the foundry name and a dash ‘-’ if the
foundry is known, and the font family name, in which spaces are replaced
by dashes (and as usual, all upper case letters are transformed to lower
case).  For example, the Gentium font family by SIL is packaged under
the name ‘font-sil-gentium’.

   For a package containing several font families, the name of the
collection is used in the place of the font family name.  For instance,
the Liberation fonts consist of three families, Liberation Sans,
Liberation Serif and Liberation Mono.  These could be packaged
separately under the names ‘font-liberation-sans’ and so on; but as they
are distributed together under a common name, we prefer to package them
together as ‘font-liberation’.

   In the case where several formats of the same font family or font
collection are packaged separately, a short form of the format,
prepended by a dash, is added to the package name.  We use ‘-ttf’ for
TrueType fonts, ‘-otf’ for OpenType fonts and ‘-type1’ for PostScript
Type 1 fonts.


File: guix.info,  Node: Coding Style,  Next: Submitting Patches,  Prev: Packaging Guidelines,  Up: Contributing

14.5 Coding Style
=================

In general our code follows the GNU Coding Standards (*note
(standards)Top::).  However, they do not say much about Scheme, so here
are some additional rules.

* Menu:

* Programming Paradigm::        How to compose your elements.
* Modules::                     Where to store your code?
* Data Types and Pattern Matching::  Implementing data structures.
* Formatting Code::             Writing conventions.


File: guix.info,  Node: Programming Paradigm,  Next: Modules,  Up: Coding Style

14.5.1 Programming Paradigm
---------------------------

Scheme code in Guix is written in a purely functional style.  One
exception is code that involves input/output, and procedures that
implement low-level concepts, such as the ‘memoize’ procedure.


File: guix.info,  Node: Modules,  Next: Data Types and Pattern Matching,  Prev: Programming Paradigm,  Up: Coding Style

14.5.2 Modules
--------------

Guile modules that are meant to be used on the builder side must live in
the ‘(guix build ...)’ name space.  They must not refer to other Guix or
GNU modules.  However, it is OK for a “host-side” module to use a
build-side module.

   Modules that deal with the broader GNU system should be in the ‘(gnu
...)’ name space rather than ‘(guix ...)’.


File: guix.info,  Node: Data Types and Pattern Matching,  Next: Formatting Code,  Prev: Modules,  Up: Coding Style

14.5.3 Data Types and Pattern Matching
--------------------------------------

The tendency in classical Lisp is to use lists to represent everything,
and then to browse them “by hand” using ‘car’, ‘cdr’, ‘cadr’, and co.
There are several problems with that style, notably the fact that it is
hard to read, error-prone, and a hindrance to proper type error reports.

   Guix code should define appropriate data types (for instance, using
‘define-record-type*’) rather than abuse lists.  In addition, it should
use pattern matching, via Guile’s ‘(ice-9 match)’ module, especially
when matching lists.


File: guix.info,  Node: Formatting Code,  Prev: Data Types and Pattern Matching,  Up: Coding Style

14.5.4 Formatting Code
----------------------

When writing Scheme code, we follow common wisdom among Scheme
programmers.  In general, we follow the Riastradh’s Lisp Style Rules
(https://mumble.net/~campbell/scheme/style.txt).  This document happens
to describe the conventions mostly used in Guile’s code too.  It is very
thoughtful and well written, so please do read it.

   Some special forms introduced in Guix, such as the ‘substitute*’
macro, have special indentation rules.  These are defined in the
‘.dir-locals.el’ file, which Emacs automatically uses.  Also note that
Emacs-Guix provides ‘guix-devel-mode’ mode that indents and highlights
Guix code properly (*note (emacs-guix)Development::).

   If you do not use Emacs, please make sure to let your editor knows
these rules.  To automatically indent a package definition, you can also
run:

     ./etc/indent-code.el gnu/packages/FILE.scm PACKAGE

This automatically indents the definition of PACKAGE in
‘gnu/packages/FILE.scm’ by running Emacs in batch mode.  To indent a
whole file, omit the second argument:

     ./etc/indent-code.el gnu/services/FILE.scm

   If you are editing code with Vim, we recommend that you run ‘:set
autoindent’ so that your code is automatically indented as you type.
Additionally, ‘paredit.vim’
(https://www.vim.org/scripts/script.php?script_id=3998) may help you
deal with all these parentheses.

   We require all top-level procedures to carry a docstring.  This
requirement can be relaxed for simple private procedures in the ‘(guix
build ...)’ name space, though.

   Procedures should not have more than four positional parameters.  Use
keyword parameters for procedures that take more than four parameters.


File: guix.info,  Node: Submitting Patches,  Next: Tracking Bugs and Patches,  Prev: Coding Style,  Up: Contributing

14.6 Submitting Patches
=======================

Development is done using the Git distributed version control system.
Thus, access to the repository is not strictly necessary.  We welcome
contributions in the form of patches as produced by ‘git format-patch’
sent to the <guix-patches@gnu.org> mailing list.  Seasoned Guix
developers may also want to look at the section on commit access (*note
Commit Access::).

   This mailing list is backed by a Debbugs instance, which allows us to
keep track of submissions (*note Tracking Bugs and Patches::).  Each
message sent to that mailing list gets a new tracking number assigned;
people can then follow up on the submission by sending email to
‘NNN@debbugs.gnu.org’, where NNN is the tracking number (*note Sending a
Patch Series::).

   Please write commit logs in the ChangeLog format (*note
(standards)Change Logs::); you can check the commit history for
examples.

   Before submitting a patch that adds or modifies a package definition,
please run through this check list:

  1. If the authors of the packaged software provide a cryptographic
     signature for the release tarball, make an effort to verify the
     authenticity of the archive.  For a detached GPG signature file
     this would be done with the ‘gpg --verify’ command.

  2. Take some time to provide an adequate synopsis and description for
     the package.  *Note Synopses and Descriptions::, for some
     guidelines.

  3. Run ‘guix lint PACKAGE’, where PACKAGE is the name of the new or
     modified package, and fix any errors it reports (*note Invoking
     guix lint::).

  4. Make sure the package builds on your platform, using ‘guix build
     PACKAGE’.

  5. We recommend you also try building the package on other supported
     platforms.  As you may not have access to actual hardware
     platforms, we recommend using the ‘qemu-binfmt-service-type’ to
     emulate them.  In order to enable it, add the following service to
     the list of services in your ‘operating-system’ configuration:

          (service qemu-binfmt-service-type
           (qemu-binfmt-configuration
             (platforms (lookup-qemu-platforms "arm" "aarch64"))
             (guix-support? #t)))

     Then reconfigure your system.

     You can then build packages for different platforms by specifying
     the ‘--system’ option.  For example, to build the "hello" package
     for the armhf, aarch64, or mips64 architectures, you would run the
     following commands, respectively:
          guix build --system=armhf-linux --rounds=2 hello
          guix build --system=aarch64-linux --rounds=2 hello

  6. Make sure the package does not use bundled copies of software
     already available as separate packages.

     Sometimes, packages include copies of the source code of their
     dependencies as a convenience for users.  However, as a
     distribution, we want to make sure that such packages end up using
     the copy we already have in the distribution, if there is one.
     This improves resource usage (the dependency is built and stored
     only once), and allows the distribution to make transverse changes
     such as applying security updates for a given software package in a
     single place and have them affect the whole system—something that
     bundled copies prevent.

  7. Take a look at the profile reported by ‘guix size’ (*note Invoking
     guix size::).  This will allow you to notice references to other
     packages unwillingly retained.  It may also help determine whether
     to split the package (*note Packages with Multiple Outputs::), and
     which optional dependencies should be used.  In particular, avoid
     adding ‘texlive’ as a dependency: because of its extreme size, use
     ‘texlive-tiny’ or ‘texlive-union’ instead.

  8. For important changes, check that dependent package (if applicable)
     are not affected by the change; ‘guix refresh --list-dependent
     PACKAGE’ will help you do that (*note Invoking guix refresh::).

     Depending on the number of dependent packages and thus the amount
     of rebuilding induced, commits go to different branches, along
     these lines:

     300 dependent packages or less
          ‘master’ branch (non-disruptive changes).

     between 300 and 1,200 dependent packages
          ‘staging’ branch (non-disruptive changes).  This branch is
          intended to be merged in ‘master’ every 3 weeks or so.
          Topical changes (e.g., an update of the GNOME stack) can
          instead go to a specific branch (say, ‘gnome-updates’).

     more than 1,200 dependent packages
          ‘core-updates’ branch (may include major and potentially
          disruptive changes).  This branch is intended to be merged in
          ‘master’ every 2.5 months or so.

     All these branches are tracked by our build farm (ci.guix.gnu.org)
     and merged into ‘master’ once everything has been successfully
     built.  This allows us to fix issues before they hit users, and to
     reduce the window during which pre-built binaries are not
     available.

     Generally, branches other than ‘master’ are considered _frozen_ if
     there has been a recent evaluation, or there is a corresponding
     ‘-next’ branch.  Please ask on the mailing list or IRC if unsure
     where to place a patch.

  9. Check whether the package’s build process is deterministic.  This
     typically means checking whether an independent build of the
     package yields the exact same result that you obtained, bit for
     bit.

     A simple way to do that is by building the same package several
     times in a row on your machine (*note Invoking guix build::):

          guix build --rounds=2 my-package

     This is enough to catch a class of common non-determinism issues,
     such as timestamps or randomly-generated output in the build
     result.

     Another option is to use ‘guix challenge’ (*note Invoking guix
     challenge::).  You may run it once the package has been committed
     and built by ‘ci.guix.gnu.org’ to check whether it obtains the same
     result as you did.  Better yet: Find another machine that can build
     it and run ‘guix publish’.  Since the remote build machine is
     likely different from yours, this can catch non-determinism issues
     related to the hardware—e.g., use of different instruction set
     extensions—or to the operating system kernel—e.g., reliance on
     ‘uname’ or ‘/proc’ files.

  10. When writing documentation, please use gender-neutral wording when
     referring to people, such as singular “they”, “their”, “them”
     (https://en.wikipedia.org/wiki/Singular_they), and so forth.

  11. Verify that your patch contains only one set of related changes.
     Bundling unrelated changes together makes reviewing harder and
     slower.

     Examples of unrelated changes include the addition of several
     packages, or a package update along with fixes to that package.

  12. Please follow our code formatting rules, possibly running the
     ‘etc/indent-code.el’ script to do that automatically for you (*note
     Formatting Code::).

  13. When possible, use mirrors in the source URL (*note Invoking guix
     download::).  Use reliable URLs, not generated ones.  For instance,
     GitHub archives are not necessarily identical from one generation
     to the next, so in this case it’s often better to clone the
     repository.  Don’t use the ‘name’ field in the URL: it is not very
     useful and if the name changes, the URL will probably be wrong.

  14. Check if Guix builds (*note Building from Git::) and address the
     warnings, especially those about use of undefined symbols.

  15. Make sure your changes do not break Guix and simulate a ‘guix
     pull’ with:
          guix pull --url=/path/to/your/checkout --profile=/tmp/guix.master

   When posting a patch to the mailing list, use ‘[PATCH] ...’ as a
subject, if your patch is to be applied on a branch other than ‘master’,
say ‘core-updates’, specify it in the subject like ‘[PATCH core-updates]
...’.  You may use your email client or the ‘git send-email’ command
(*note Sending a Patch Series::).  We prefer to get patches in plain
text messages, either inline or as MIME attachments.  You are advised to
pay attention if your email client changes anything like line breaks or
indentation which could potentially break the patches.

   When a bug is resolved, please close the thread by sending an email
to <NNN-done@debbugs.gnu.org>.

Sending a Patch Series
----------------------

When sending a patch series (e.g., using ‘git send-email’), please first
send one message to <guix-patches@gnu.org>, and then send subsequent
patches to <NNN@debbugs.gnu.org> to make sure they are kept together.
See the Debbugs documentation (https://debbugs.gnu.org/Advanced.html)
for more information.  You can install ‘git send-email’ with ‘guix
install git:send-email’.


File: guix.info,  Node: Tracking Bugs and Patches,  Next: Commit Access,  Prev: Submitting Patches,  Up: Contributing

14.7 Tracking Bugs and Patches
==============================

Bug reports and patch submissions are currently tracked using the
Debbugs instance at <https://bugs.gnu.org>.  Bug reports are filed
against the ‘guix’ “package” (in Debbugs parlance), by sending email to
<bug-guix@gnu.org>, while patch submissions are filed against the
‘guix-patches’ package by sending email to <guix-patches@gnu.org> (*note
Submitting Patches::).

   A web interface (actually _two_ web interfaces!)  are available to
browse issues:

   • <https://bugs.gnu.org/guix> lists bug reports;
   • <https://bugs.gnu.org/guix-patches> lists patch submissions.

   You can also access both of these via the (nicer)
<https://issues.guix.gnu.org> interface(1).  To view discussions related
to issue number N, go to ‘https://issues.guix.gnu.org/issue/N’ or
‘https://bugs.gnu.org/N’.

   If you use Emacs, you may find it more convenient to interact with
issues using ‘debbugs.el’, which you can install with:

     guix install emacs-debbugs

   For example, to list all open issues on ‘guix-patches’, hit:

     C-u M-x debbugs-gnu RET RET guix-patches RET n y

   *Note (debbugs-ug)Top::, for more information on this nifty tool!

   ---------- Footnotes ----------

   (1) The web interface at <https://issues.guix.gnu.org> is powered by
Mumi, a nice piece of software written in Guile, and you can help!  See
<https://git.elephly.net/gitweb.cgi?p=software/mumi.git>.


File: guix.info,  Node: Commit Access,  Prev: Tracking Bugs and Patches,  Up: Contributing

14.8 Commit Access
==================

For frequent contributors, having write access to the repository is
convenient.  When you deem it necessary, consider applying for commit
access by following these steps:

  1. Find three committers who would vouch for you.  You can view the
     list of committers at
     <https://savannah.gnu.org/project/memberlist.php?group=guix>.  Each
     of them should email a statement to <guix-maintainers@gnu.org> (a
     private alias for the collective of maintainers), signed with their
     OpenPGP key.

     Committers are expected to have had some interactions with you as a
     contributor and to be able to judge whether you are sufficiently
     familiar with the project’s practices.  It is _not_ a judgment on
     the value of your work, so a refusal should rather be interpreted
     as “let’s try again later”.

  2. Send <guix-maintainers@gnu.org> a message stating your intent,
     listing the three committers who support your application, signed
     with the OpenPGP key you will use to sign commits, and giving its
     fingerprint (see below).  See
     <https://emailselfdefense.fsf.org/en/>, for an introduction to
     public-key cryptography with GnuPG.

     Set up GnuPG such that it never uses the SHA1 hash algorithm for
     digital signatures, which is known to be unsafe since 2019, for
     instance by adding the following line to ‘~/.gnupg/gpg.conf’ (*note
     (gnupg)GPG Esoteric Options::):

          digest-algo sha512

  3. Maintainers ultimately decide whether to grant you commit access,
     usually following your referrals’ recommendation.

  4. If and once you’ve been given access, please send a message to
     <guix-devel@gnu.org> to say so, again signed with the OpenPGP key
     you will use to sign commits (do that before pushing your first
     commit).  That way, everyone can notice and ensure you control that
     OpenPGP key.

          Important: Before you can push for the first time, maintainers
          must:

            1. add your OpenPGP key to the ‘keyring’ branch;
            2. add your OpenPGP fingerprint to the
               ‘.guix-authorizations’ file of the branch(es) you will
               commit to.

  5. Make sure to read the rest of this section and...  profit!

     Note: Maintainers are happy to give commit access to people who
     have been contributing for some time and have a track record—don’t
     be shy and don’t underestimate your work!

     However, note that the project is working towards a more automated
     patch review and merging system, which, as a consequence, may lead
     us to have fewer people with commit access to the main repository.
     Stay tuned!

   If you get commit access, please make sure to follow the policy below
(discussions of the policy can take place on <guix-devel@gnu.org>).

   Non-trivial patches should always be posted to <guix-patches@gnu.org>
(trivial patches include fixing typos, etc.).  This mailing list fills
the patch-tracking database (*note Tracking Bugs and Patches::).

   For patches that just add a new package, and a simple one, it’s OK to
commit, if you’re confident (which means you successfully built it in a
chroot setup, and have done a reasonable copyright and license
auditing).  Likewise for package upgrades, except upgrades that trigger
a lot of rebuilds (for example, upgrading GnuTLS or GLib).  We have a
mailing list for commit notifications (<guix-commits@gnu.org>), so
people can notice.  Before pushing your changes, make sure to run ‘git
pull --rebase’.

   All commits that are pushed to the central repository on Savannah
must be signed with an OpenPGP key, and the public key should be
uploaded to your user account on Savannah and to public key servers,
such as ‘keys.openpgp.org’.  To configure Git to automatically sign
commits, run:

     git config commit.gpgsign true
     git config user.signingkey CABBA6EA1DC0FF33

   You can prevent yourself from accidentally pushing unsigned commits
to Savannah by using the pre-push Git hook called located at
‘etc/git/pre-push’:

     cp etc/git/pre-push .git/hooks/pre-push

   When pushing a commit on behalf of somebody else, please add a
‘Signed-off-by’ line at the end of the commit log message—e.g., with
‘git am --signoff’.  This improves tracking of who did what.

   When adding channel news entries (*note Writing Channel News:
Channels.), make sure they are well-formed by running the following
command right before pushing:

     make check-channel-news

   For anything else, please post to <guix-patches@gnu.org> and leave
time for a review, without committing anything (*note Submitting
Patches::).  If you didn’t receive any reply after two weeks, and if
you’re confident, it’s OK to commit.

   That last part is subject to being adjusted, allowing individuals to
commit directly on non-controversial changes on parts they’re familiar
with.

   One last thing: the project keeps moving forward because committers
not only push their own awesome changes, but also offer some of their
time _reviewing_ and pushing other people’s changes.  As a committer,
you’re welcome to use your expertise and commit rights to help other
contributors, too!


File: guix.info,  Node: Acknowledgments,  Next: GNU Free Documentation License,  Prev: Contributing,  Up: Top

15 Acknowledgments
******************

Guix is based on the Nix package manager (https://nixos.org/nix/), which
was designed and implemented by Eelco Dolstra, with contributions from
other people (see the ‘nix/AUTHORS’ file in Guix).  Nix pioneered
functional package management, and promoted unprecedented features, such
as transactional package upgrades and rollbacks, per-user profiles, and
referentially transparent build processes.  Without this work, Guix
would not exist.

   The Nix-based software distributions, Nixpkgs and NixOS, have also
been an inspiration for Guix.

   GNU Guix itself is a collective work with contributions from a number
of people.  See the ‘AUTHORS’ file in Guix for more information on these
fine people.  The ‘THANKS’ file lists people who have helped by
reporting bugs, taking care of the infrastructure, providing artwork and
themes, making suggestions, and more—thank you!


File: guix.info,  Node: GNU Free Documentation License,  Next: Concept Index,  Prev: Acknowledgments,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: guix.info,  Node: Concept Index,  Next: Programming Index,  Prev: GNU Free Documentation License,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* .local, host name lookup:              Name Service Switch.
                                                             (line   21)
* /bin/sh:                               Base Services.      (line   34)
* /usr/bin/env:                          Base Services.      (line   36)
* AArch64, bootloaders:                  Bootloader Configuration.
                                                             (line   32)
* access control list (ACL), for substitutes: Substitute Server Authorization.
                                                             (line    6)
* accounts:                              User Accounts.      (line    6)
* ACL (access control list), for substitutes: Substitute Server Authorization.
                                                             (line    6)
* actions, of Shepherd services:         Shepherd Services.  (line   60)
* aliases, for email addresses:          Mail Services.      (line 1438)
* aliases, for guix package:             Invoking guix package.
                                                             (line   23)
* ALSA:                                  Sound Services.     (line    6)
* Android distribution:                  Build Systems.      (line  137)
* Android NDK build system:              Build Systems.      (line  137)
* application bundle:                    Invoking guix pack. (line   15)
* archival of source code, Software Heritage: Invoking guix lint.
                                                             (line   38)
* archive:                               Invoking guix archive.
                                                             (line    6)
* ARM, bootloaders:                      Bootloader Configuration.
                                                             (line   32)
* Audit:                                 Miscellaneous Services.
                                                             (line  251)
* authentication, of a Guix checkout:    Building from Git.  (line   11)
* authorized keys, SSH:                  Networking Services.
                                                             (line  839)
* authorizing, archives:                 Invoking guix archive.
                                                             (line  105)
* AutoSSH:                               Networking Services.
                                                             (line  911)
* availability of substitutes:           Invoking guix weather.
                                                             (line   13)
* backquote (quasiquote):                Defining Packages.  (line  102)
* bag (low-level package representation): Build Systems.     (line   15)
* binfmt_misc:                           Virtualization Services.
                                                             (line  541)
* Bioconductor:                          Invoking guix import.
                                                             (line  102)
* BIOS boot, on Intel machines:          Using the Configuration System.
                                                             (line   76)
* BIOS, bootloader:                      Bootloader Configuration.
                                                             (line   20)
* black list, of kernel modules:         Initial RAM Disk.   (line   83)
* boot loader:                           Bootloader Configuration.
                                                             (line    6)
* boot menu:                             Bootloader Configuration.
                                                             (line  106)
* bootloader:                            Bootloader Configuration.
                                                             (line    6)
* bootstrap binaries:                    Bootstrapping.      (line   15)
* bootstrap binaries <1>:                Preparing to Use the Bootstrap Binaries.
                                                             (line  102)
* bootstrapping:                         Bootstrapping.      (line    6)
* branching strategy:                    Submitting Patches. (line   88)
* bug reports, tracking:                 Tracking Bugs and Patches.
                                                             (line    6)
* build code quoting:                    G-Expressions.      (line    6)
* build daemon:                          Managing Software the Guix Way.
                                                             (line   10)
* build environment:                     Build Environment Setup.
                                                             (line    6)
* build environment <1>:                 Invoking guix-daemon.
                                                             (line   15)
* build failures, debugging:             Debugging Build Failures.
                                                             (line    6)
* build farm:                            Official Substitute Server.
                                                             (line    6)
* build hook:                            Daemon Offload Setup.
                                                             (line    6)
* build logs, access:                    Additional Build Options.
                                                             (line  232)
* build logs, publication:               Invoking guix publish.
                                                             (line   60)
* build logs, verbosity:                 Common Build Options.
                                                             (line  102)
* build phases:                          Build Systems.      (line   38)
* build phases <1>:                      Build Systems.      (line  791)
* build system:                          Build Systems.      (line    6)
* build users:                           Build Environment Setup.
                                                             (line   13)
* build-time dependencies:               Derivations.        (line   13)
* bundle:                                Invoking guix pack. (line   15)
* bundling:                              Submitting Patches. (line   63)
* cache invalidation, nscd:              Base Services.      (line  341)
* Cargo (Rust build system):             Build Systems.      (line  204)
* cat-avatar-generator:                  Web Services.       (line  849)
* CD image format:                       Invoking guix system.
                                                             (line  355)
* certificates:                          Invoking guix environment.
                                                             (line   86)
* Cgit service:                          Version Control Services.
                                                             (line  139)
* challenge:                             Invoking guix challenge.
                                                             (line    6)
* channel news:                          Invoking guix pull. (line  110)
* channels:                              Channels.           (line    6)
* channels, for personal packages:       Channels.           (line   37)
* channels.scm, configuration file:      Invoking guix pull. (line   99)
* channels.scm, configuration file <1>:  Channels.           (line    6)
* chroot:                                Build Environment Setup.
                                                             (line   48)
* chroot <1>:                            Invoking guix-daemon.
                                                             (line   15)
* Clojure (programming language):        Build Systems.      (line  285)
* closure:                               Invoking guix gc.   (line  127)
* closure <1>:                           Invoking guix size. (line    6)
* closure <2>:                           Invoking guix size. (line   28)
* clusters, daemon setup:                Invoking guix-daemon.
                                                             (line  227)
* clusters, daemon setup <1>:            The Store.          (line   47)
* code of conduct, of contributors:      Contributing.       (line   12)
* code snippets:                         The Perfect Setup.  (line   32)
* coding style:                          Formatting Code.    (line    6)
* colliding packages in profiles:        Invoking guix package.
                                                             (line  331)
* collisions, in a profile:              Invoking guix package.
                                                             (line  331)
* comma (unquote):                       Defining Packages.  (line  102)
* commit access, for developers:         Commit Access.      (line    6)
* composition of Guix revisions:         Inferiors.          (line   10)
* configuration file for channels:       Invoking guix pull. (line   99)
* configuration file for channels <1>:   Channels.           (line    6)
* configuration of guix pull:            Channels.           (line    6)
* Connman:                               Networking Services.
                                                             (line  200)
* container:                             Invoking guix environment.
                                                             (line   74)
* container <1>:                         Invoking guix environment.
                                                             (line  226)
* container <2>:                         Invoking guix container.
                                                             (line    6)
* container, build environment:          Invoking guix-daemon.
                                                             (line   15)
* continuous integration:                Package Transformation Options.
                                                             (line   98)
* continuous integration <1>:            Continuous Integration.
                                                             (line    6)
* continuous integration, statistics:    Invoking guix weather.
                                                             (line   36)
* contributor covenant:                  Contributing.       (line   12)
* copy, of store items, over SSH:        Invoking guix copy. (line    6)
* corruption, recovering from:           Invoking guix gc.   (line  169)
* corruption, recovering from <1>:       Additional Build Options.
                                                             (line  210)
* CPAN:                                  Invoking guix import.
                                                             (line   88)
* CPU frequency scaling with thermald:   Power Management Services.
                                                             (line  403)
* CRAN:                                  Invoking guix import.
                                                             (line  102)
* crate:                                 Invoking guix import.
                                                             (line  330)
* Creating system images in various formats: Invoking guix system.
                                                             (line  235)
* cron:                                  Scheduled Job Execution.
                                                             (line    6)
* cross compilation:                     G-Expressions.      (line   74)
* cross compilation, package dependencies: package Reference.
                                                             (line   50)
* cross-compilation:                     Invoking guix pack. (line  238)
* cross-compilation <1>:                 Defining Packages.  (line  149)
* cross-compilation <2>:                 Additional Build Options.
                                                             (line  191)
* CTAN:                                  Invoking guix import.
                                                             (line  138)
* customization, of packages:            Managing Software the Guix Way.
                                                             (line   15)
* customization, of packages <1>:        Package Modules.    (line   19)
* customization, of services:            Using the Configuration System.
                                                             (line  140)
* CVE, Common Vulnerabilities and Exposures: Invoking guix lint.
                                                             (line   63)
* daemon:                                Setting Up the Daemon.
                                                             (line    6)
* daemon, cluster setup:                 Invoking guix-daemon.
                                                             (line  227)
* daemon, cluster setup <1>:             The Store.          (line   47)
* daemon, remote access:                 Invoking guix-daemon.
                                                             (line  227)
* daemon, remote access <1>:             The Store.          (line   47)
* daemons:                               Service Composition.
                                                             (line    6)
* DAG:                                   Invoking guix graph.
                                                             (line    6)
* darkstat:                              Monitoring Services.
                                                             (line  102)
* database:                              Database Services.  (line    6)
* ddclient:                              DNS Services.       (line  566)
* Debbugs, issue tracking system:        Tracking Bugs and Patches.
                                                             (line    6)
* Debbugs, Mumi Web interface:           Web Services.       (line  650)
* debugging files:                       Installing Debugging Files.
                                                             (line    6)
* deduplication:                         Invoking guix-daemon.
                                                             (line  161)
* deduplication <1>:                     Invoking guix gc.   (line  178)
* deleting system generations:           Invoking guix system.
                                                             (line  151)
* dependencies, build-time:              Derivations.        (line   13)
* dependencies, channels:                Channels.           (line  126)
* dependencies, run-time:                Derivations.        (line   38)
* dependency tree rewriting:             Defining Packages.  (line  161)
* derivation:                            Invoking guix gc.   (line  137)
* derivation <1>:                        Programming Interface.
                                                             (line   19)
* derivation path:                       Derivations.        (line   24)
* derivations:                           Derivations.        (line    6)
* determinism, checking:                 Additional Build Options.
                                                             (line  196)
* determinism, of build processes:       Submitting Patches. (line  117)
* development environments:              Invoking guix environment.
                                                             (line    6)
* device mapping:                        Mapped Devices.     (line    6)
* DHCP:                                  Keyboard Layout and Networking and Partitioning.
                                                             (line   77)
* DHCP, networking service:              Networking Services.
                                                             (line    9)
* dictionary:                            Miscellaneous Services.
                                                             (line  127)
* digital signatures:                    Substitute Authentication.
                                                             (line    6)
* directories related to foreign distro: Installation.       (line   13)
* disk encryption:                       Mapped Devices.     (line   54)
* disk space:                            Invoking guix gc.   (line    6)
* DNS (domain name system):              DNS Services.       (line    6)
* Docker:                                Miscellaneous Services.
                                                             (line  219)
* Docker, build an image with guix pack: Invoking guix pack. (line   55)
* documentation:                         Packages with Multiple Outputs.
                                                             (line   24)
* documentation, searching for:          Documentation.      (line    6)
* domain name system (DNS):              DNS Services.       (line    6)
* downgrade attacks, protection against: Invoking guix pull. (line  173)
* downloading Guix binary:               Binary Installation.
                                                             (line   25)
* downloading package sources:           Invoking guix download.
                                                             (line    6)
* dual boot:                             Bootloader Configuration.
                                                             (line  106)
* DVD image format:                      Invoking guix system.
                                                             (line  355)
* early out of memory daemon:            Linux Services.     (line    6)
* earlyoom:                              Linux Services.     (line    6)
* EFI boot:                              Using the Configuration System.
                                                             (line   76)
* EFI, bootloader:                       Bootloader Configuration.
                                                             (line   20)
* EFI, installation:                     Keyboard Layout and Networking and Partitioning.
                                                             (line  120)
* elpa:                                  Invoking guix import.
                                                             (line  298)
* emacs:                                 Application Setup.  (line  139)
* email:                                 Mail Services.      (line    6)
* email aliases:                         Mail Services.      (line 1438)
* emulation:                             Virtualization Services.
                                                             (line  541)
* encrypted disk:                        Keyboard Layout and Networking and Partitioning.
                                                             (line  154)
* encrypted disk <1>:                    Using the Configuration System.
                                                             (line  175)
* entry point, for Docker images:        Invoking guix pack. (line  193)
* env, in /usr/bin:                      Base Services.      (line   36)
* environment, package build environment: Invoking guix environment.
                                                             (line    6)
* error strategy:                        Invoking guix system.
                                                             (line  388)
* ESP, EFI system partition:             Keyboard Layout and Networking and Partitioning.
                                                             (line  120)
* essential services:                    operating-system Reference.
                                                             (line  167)
* exporting store items:                 Invoking guix archive.
                                                             (line   14)
* extending the package collection (channels): Channels.     (line   37)
* extensibility of the distribution:     Managing Software the Guix Way.
                                                             (line   15)
* extensions, for gexps:                 G-Expressions.      (line  131)
* fastcgi:                               Web Services.       (line  680)
* fc-cache:                              Application Setup.  (line   96)
* fcgiwrap:                              Web Services.       (line  680)
* file-like objects:                     G-Expressions.      (line  294)
* fingerprint:                           Miscellaneous Services.
                                                             (line    6)
* firmware:                              operating-system Reference.
                                                             (line   74)
* fixed-output derivations:              Derivations.        (line   31)
* font cache:                            Application Setup.  (line   96)
* fonts:                                 Application Setup.  (line   89)
* fonts <1>:                             Fonts.              (line    6)
* foreign distro:                        Installation.       (line   13)
* foreign distro <1>:                    Application Setup.  (line    6)
* formatting code:                       Formatting Code.    (line    6)
* formatting, of code:                   Formatting Code.    (line   18)
* free software:                         Software Freedom.   (line    6)
* functional package management:         Managing Software the Guix Way.
                                                             (line   24)
* G-expression:                          G-Expressions.      (line    6)
* garbage collector:                     Invoking guix gc.   (line    6)
* garbage collector root, for environments: Invoking guix environment.
                                                             (line  103)
* garbage collector root, for packs:     Invoking guix pack. (line  279)
* garbage collector roots:               Invoking guix-daemon.
                                                             (line  174)
* garbage collector roots <1>:           Invoking guix gc.   (line   12)
* garbage collector roots, adding:       Additional Build Options.
                                                             (line  222)
* GC roots:                              Invoking guix-daemon.
                                                             (line  174)
* GC roots <1>:                          Invoking guix gc.   (line   12)
* GC roots, adding:                      Additional Build Options.
                                                             (line  222)
* GCC:                                   The GCC toolchain.  (line    6)
* GDM:                                   X Window.           (line   11)
* gem:                                   Invoking guix import.
                                                             (line   68)
* generations:                           Invoking guix package.
                                                             (line  254)
* generations <1>:                       Invoking guix package.
                                                             (line  448)
* generations <2>:                       Invoking guix pull. (line  133)
* generations <3>:                       Invoking guix system.
                                                             (line  104)
* git send-email:                        Submitting Patches. (line  185)
* Git, hosting:                          Version Control Services.
                                                             (line  874)
* Git, using the latest commit:          Package Transformation Options.
                                                             (line   85)
* Git, web interface:                    Version Control Services.
                                                             (line  139)
* git-send-email:                        Submitting Patches. (line  185)
* Gitolite service:                      Version Control Services.
                                                             (line  874)
* global security system:                Network File System.
                                                             (line  124)
* GNOME, login manager:                  X Window.           (line   11)
* GNU Build System:                      Defining Packages.  (line   75)
* GNU Mailutils IMAP4 Daemon:            Mail Services.      (line 1461)
* gpm:                                   Base Services.      (line  609)
* grafts:                                Security Updates.   (line   30)
* groups:                                User Accounts.      (line   35)
* groups <1>:                            User Accounts.      (line   92)
* GSS:                                   Network File System.
                                                             (line  124)
* GSSD:                                  Network File System.
                                                             (line  124)
* guix archive:                          Invoking guix archive.
                                                             (line    6)
* guix build:                            Invoking guix build.
                                                             (line    6)
* guix challenge:                        Invoking guix challenge.
                                                             (line    6)
* guix container:                        Invoking guix container.
                                                             (line    6)
* guix download:                         Invoking guix download.
                                                             (line    6)
* guix edit:                             Invoking guix edit. (line    6)
* guix environment:                      Invoking guix environment.
                                                             (line    6)
* guix graph:                            Invoking guix graph.
                                                             (line    6)
* guix hash:                             Invoking guix hash. (line    6)
* guix lint:                             Invoking guix lint. (line    6)
* guix publish:                          Invoking guix publish.
                                                             (line    6)
* guix pull:                             Invoking guix pull. (line    6)
* guix pull for the root user, on a foreign distro: Upgrading Guix.
                                                             (line   12)
* guix pull, configuration file:         Channels.           (line    6)
* guix refresh:                          Invoking guix refresh.
                                                             (line    6)
* guix size:                             Invoking guix size. (line    6)
* Guix System:                           Introduction.       (line   12)
* Guix System <1>:                       GNU Distribution.   (line    6)
* Guix System Distribution, now Guix System: Introduction.   (line   12)
* Guix System, installation:             System Installation.
                                                             (line    6)
* guix time-machine:                     Invoking guix time-machine.
                                                             (line    6)
* GuixSD, now Guix System:               Introduction.       (line   12)
* hackage:                               Invoking guix import.
                                                             (line  228)
* hardware support on Guix System:       Hardware Considerations.
                                                             (line    6)
* HDPI:                                  Bootloader Configuration.
                                                             (line  178)
* HDPI <1>:                              Invoking guix system.
                                                             (line   20)
* hidden service:                        Networking Services.
                                                             (line  601)
* HiDPI:                                 Bootloader Configuration.
                                                             (line  178)
* HiDPI <1>:                             Invoking guix system.
                                                             (line   20)
* hostapd service, for Wi-Fi access points: Networking Services.
                                                             (line  252)
* hosts file:                            operating-system Reference.
                                                             (line   86)
* hpcguix-web:                           Web Services.       (line  874)
* HTTP:                                  Web Services.       (line    6)
* HTTP proxy, for guix-daemon:           Base Services.      (line  489)
* HTTP, HTTPS:                           Certificate Services.
                                                             (line    6)
* HTTPS, certificates:                   X.509 Certificates. (line    6)
* hurd:                                  operating-system Reference.
                                                             (line   18)
* idmapd:                                Network File System.
                                                             (line  145)
* IMAP:                                  Mail Services.      (line 1190)
* imported modules, for gexps:           G-Expressions.      (line   94)
* importing packages:                    Invoking guix import.
                                                             (line    6)
* incompatibility, of locale data:       Locales.            (line   76)
* indentation, of code:                  Formatting Code.    (line   18)
* inetd:                                 Networking Services.
                                                             (line  475)
* inferior packages:                     Inferiors.          (line   15)
* inferior packages <1>:                 Inferiors.          (line   77)
* inferiors:                             Inferiors.          (line   10)
* inferiors <1>:                         Invoking guix repl. (line   17)
* Info, documentation format:            Documentation.      (line    6)
* init system:                           Shepherd Services.  (line    6)
* initial RAM disk:                      operating-system Reference.
                                                             (line   64)
* initial RAM disk <1>:                  Initial RAM Disk.   (line    6)
* initial RAM disk <2>:                  Initial RAM Disk.   (line   98)
* initrd:                                operating-system Reference.
                                                             (line   64)
* initrd <1>:                            Initial RAM Disk.   (line    6)
* initrd <2>:                            Initial RAM Disk.   (line   98)
* input rewriting:                       Defining Packages.  (line  161)
* inputattach:                           Miscellaneous Services.
                                                             (line   97)
* inputs, for Python packages:           Python Modules.     (line   27)
* inputs, of packages:                   package Reference.  (line   38)
* insert or update copyright:            The Perfect Setup.  (line   55)
* installation image:                    Building the Installation Image.
                                                             (line    6)
* installer script:                      Binary Installation.
                                                             (line    6)
* installing Guix:                       Installation.       (line    6)
* installing Guix from binaries:         Binary Installation.
                                                             (line    6)
* installing Guix System:                System Installation.
                                                             (line    6)
* installing over SSH:                   Keyboard Layout and Networking and Partitioning.
                                                             (line   96)
* installing packages:                   Invoking guix package.
                                                             (line    6)
* integrity checking:                    Invoking guix gc.   (line  155)
* integrity, of the store:               Invoking guix gc.   (line  155)
* invalid store items:                   The Store.          (line  103)
* Invoking guix import:                  Invoking guix import.
                                                             (line    6)
* iptables:                              Networking Services.
                                                             (line  307)
* IRC (Internet Relay Chat):             Messaging Services. (line  390)
* IRC (Internet Relay Chat) <1>:         Messaging Services. (line  428)
* IRC gateway:                           Messaging Services. (line  390)
* ISO-9660 format:                       Invoking guix system.
                                                             (line  355)
* isolation:                             Managing Software the Guix Way.
                                                             (line   24)
* issue tracking:                        Tracking Bugs and Patches.
                                                             (line    6)
* jabber:                                Messaging Services. (line    6)
* jackd:                                 Base Services.      (line  697)
* java:                                  Java Packages.      (line    6)
* JSON:                                  Invoking guix describe.
                                                             (line   65)
* JSON, import:                          Invoking guix import.
                                                             (line  164)
* Kerberos:                              Kerberos Services.  (line    6)
* kernel module loader:                  Linux Services.     (line   60)
* keyboard layout:                       Keyboard Layout and Networking and Partitioning.
                                                             (line   13)
* keyboard layout <1>:                   Keyboard Layout.    (line    6)
* keyboard layout, configuration:        Keyboard Layout.    (line   74)
* keyboard layout, definition:           Keyboard Layout.    (line   15)
* keyboard layout, for the bootloader:   Bootloader Configuration.
                                                             (line   64)
* keyboard layout, for Xorg:             X Window.           (line  294)
* keymap:                                Keyboard Layout.    (line    6)
* keymap, for Xorg:                      X Window.           (line  294)
* latest commit, building:               Package Transformation Options.
                                                             (line   85)
* ld-wrapper:                            The GCC toolchain.  (line    6)
* LDAP:                                  LDAP Services.      (line    6)
* legacy boot, on Intel machines:        Using the Configuration System.
                                                             (line   76)
* Let’s Encrypt:                         Certificate Services.
                                                             (line    6)
* license, GNU Free Documentation License: GNU Free Documentation License.
                                                             (line    6)
* license, of packages:                  package Reference.  (line  101)
* linker wrapper:                        The GCC toolchain.  (line    6)
* lirc:                                  Miscellaneous Services.
                                                             (line   70)
* locale:                                Locales.            (line    6)
* locale definition:                     Locales.            (line   12)
* locale name:                           Locales.            (line   68)
* locales, when not on Guix System:      Application Setup.  (line   13)
* log rotation:                          Log Rotation.       (line    6)
* logging:                               Base Services.      (line  422)
* logging <1>:                           Log Rotation.       (line    6)
* login manager:                         X Window.           (line    6)
* login manager <1>:                     X Window.           (line  237)
* lowering, of high-level objects in gexps: G-Expressions.   (line   44)
* lowering, of high-level objects in gexps <1>: G-Expressions.
                                                             (line  521)
* LUKS:                                  Mapped Devices.     (line   54)
* M-x copyright-update:                  The Perfect Setup.  (line   55)
* M-x guix-copyright:                    The Perfect Setup.  (line   55)
* mail:                                  Mail Services.      (line    6)
* mail transfer agent (MTA):             Mail Services.      (line 1161)
* man pages:                             Documentation.      (line    6)
* mandatory access control, SELinux:     SELinux Support.    (line    6)
* manual pages:                          Documentation.      (line    6)
* mapped devices:                        Mapped Devices.     (line    6)
* mcron:                                 Scheduled Job Execution.
                                                             (line    6)
* message of the day:                    Base Services.      (line   85)
* messaging:                             Messaging Services. (line    6)
* meta-data, channels:                   Channels.           (line  125)
* ModemManager:                          Networking Services.
                                                             (line   89)
* Modeswitching:                         Networking Services.
                                                             (line  103)
* modprobe:                              Linux Services.     (line   60)
* module closure:                        G-Expressions.      (line  113)
* module, black-listing:                 Initial RAM Disk.   (line   83)
* monad:                                 The Store Monad.    (line    6)
* monadic functions:                     The Store Monad.    (line   18)
* monadic values:                        The Store Monad.    (line   18)
* mouse:                                 Base Services.      (line  609)
* mpd:                                   Audio Services.     (line    9)
* MTA (mail transfer agent):             Mail Services.      (line 1161)
* multiple-output packages:              Packages with Multiple Outputs.
                                                             (line    6)
* Mumi, Debbugs Web interface:           Web Services.       (line  650)
* Murmur (VoIP server):                  Telephony Services. (line    6)
* name mapper:                           Network File System.
                                                             (line  145)
* name service cache daemon:             Base Services.      (line  331)
* name service caching daemon (nscd):    Application Setup.  (line   48)
* name service switch:                   Name Service Switch.
                                                             (line    6)
* name service switch, glibc:            Application Setup.  (line   48)
* nar, archive format:                   Invoking guix archive.
                                                             (line   48)
* Network information service (NIS):     Application Setup.  (line   59)
* network management:                    Networking Services.
                                                             (line   79)
* NetworkManager:                        Networking Services.
                                                             (line  134)
* news, for channels:                    Channels.           (line  166)
* NFS:                                   Network File System.
                                                             (line    6)
* NFS, server:                           Network File System.
                                                             (line   17)
* nftables:                              Networking Services.
                                                             (line  348)
* NIS (Network information service):     Application Setup.  (line   59)
* Nix:                                   Miscellaneous Services.
                                                             (line  296)
* non-determinism, in package builds:    Invoking guix challenge.
                                                             (line   66)
* normalized archive (nar):              Invoking guix archive.
                                                             (line   48)
* normalized codeset in locale names:    Locales.            (line   68)
* nscd:                                  Base Services.      (line  331)
* nscd (name service caching daemon):    Application Setup.  (line   48)
* nscd, cache invalidation:              Base Services.      (line  341)
* nslcd, LDAP service:                   LDAP Services.      (line    6)
* NSS:                                   Name Service Switch.
                                                             (line    6)
* NSS (name service switch), glibc:      Application Setup.  (line   48)
* nss-certs:                             Application Setup.  (line  128)
* nss-certs <1>:                         X.509 Certificates. (line   20)
* nss-mdns:                              Name Service Switch.
                                                             (line   21)
* nsswitch.conf:                         Application Setup.  (line   55)
* NTP (Network Time Protocol), service:  Networking Services.
                                                             (line  369)
* ntpd, service for the Network Time Protocol daemon: Networking Services.
                                                             (line  369)
* OCaml:                                 Invoking guix import.
                                                             (line  348)
* official website:                      Requirements.       (line   11)
* offload status:                        Daemon Offload Setup.
                                                             (line  167)
* offload test:                          Daemon Offload Setup.
                                                             (line  147)
* offloading:                            Daemon Offload Setup.
                                                             (line    6)
* offloading <1>:                        Invoking guix-daemon.
                                                             (line   66)
* on-error:                              Invoking guix system.
                                                             (line  388)
* on-error strategy:                     Invoking guix system.
                                                             (line  388)
* one-shot services, for the Shepherd:   Shepherd Services.  (line   42)
* oom:                                   Linux Services.     (line    6)
* OPAM:                                  Invoking guix import.
                                                             (line  348)
* OpenNTPD:                              Networking Services.
                                                             (line  420)
* OpenPGP, signed commits:               Commit Access.      (line   40)
* out of memory killer:                  Linux Services.     (line    6)
* outputs:                               Packages with Multiple Outputs.
                                                             (line    6)
* pack:                                  Invoking guix pack. (line   15)
* package building:                      Invoking guix build.
                                                             (line    6)
* package conversion:                    Invoking guix import.
                                                             (line    6)
* package definition, editing:           Invoking guix edit. (line    6)
* package dependencies:                  Invoking guix gc.   (line  122)
* package dependencies <1>:              Invoking guix graph.
                                                             (line    6)
* package description:                   Synopses and Descriptions.
                                                             (line    6)
* package import:                        Invoking guix import.
                                                             (line    6)
* package installation:                  Invoking guix package.
                                                             (line    6)
* package module search path:            Package Modules.    (line   19)
* package name:                          Package Naming.     (line    6)
* package outputs:                       Packages with Multiple Outputs.
                                                             (line    6)
* package removal:                       Invoking guix package.
                                                             (line    6)
* package size:                          Invoking guix size. (line    6)
* package synopsis:                      Synopses and Descriptions.
                                                             (line    6)
* package transformations:               Defining Packages.  (line  161)
* package variants:                      Package Transformation Options.
                                                             (line    6)
* package version:                       Version Numbers.    (line    6)
* package, checking for errors:          Invoking guix lint. (line    6)
* packages:                              Package Management. (line    6)
* packages, creating:                    Packaging Guidelines.
                                                             (line    6)
* PAM:                                   operating-system Reference.
                                                             (line  175)
* pam-krb5:                              Kerberos Services.  (line   88)
* pam-mount:                             PAM Mount Service.  (line    6)
* password, for user accounts:           User Accounts.      (line   67)
* patch series:                          Submitting Patches. (line  185)
* patch submissions, tracking:           Tracking Bugs and Patches.
                                                             (line    6)
* patches:                               Defining Packages.  (line   71)
* Patchwork:                             Web Services.       (line  481)
* pcscd:                                 Miscellaneous Services.
                                                             (line   43)
* perl:                                  Perl Modules.       (line    6)
* persistent environment:                Invoking guix environment.
                                                             (line  103)
* personal packages (channels):          Channels.           (line   37)
* php-fpm:                               Web Services.       (line  725)
* PID 1:                                 Shepherd Services.  (line    6)
* pinning, channels:                     Channels.           (line  226)
* pinning, channels <1>:                 Invoking guix time-machine.
                                                             (line    6)
* pipefs:                                Network File System.
                                                             (line  109)
* pluggable authentication modules:      operating-system Reference.
                                                             (line  175)
* POP:                                   Mail Services.      (line 1190)
* postgis:                               Database Services.  (line   25)
* postgresql extension-packages:         Database Services.  (line   19)
* power management with TLP:             Power Management Services.
                                                             (line    6)
* pre-built binaries:                    Substitutes.        (line    6)
* printer support with CUPS:             Printing Services.  (line    6)
* priority:                              Base Services.      (line  697)
* profile:                               Invoking guix package.
                                                             (line   39)
* profile collisions:                    Invoking guix package.
                                                             (line  331)
* profile declaration:                   Invoking guix package.
                                                             (line  206)
* profile manifest:                      Invoking guix package.
                                                             (line  206)
* prometheus-node-exporter:              Monitoring Services.
                                                             (line  136)
* propagated inputs:                     Invoking guix package.
                                                             (line   78)
* provenance tracking, of software artifacts: Features.      (line   72)
* provenance tracking, of the operating system: Invoking guix system.
                                                             (line   84)
* provenance tracking, of the operating system <1>: Invoking guix system.
                                                             (line  332)
* provenance tracking, of the operating system <2>: Service Reference.
                                                             (line  193)
* proxy, during system installation:     Keyboard Layout and Networking and Partitioning.
                                                             (line   89)
* proxy, for guix-daemon HTTP access:    Base Services.      (line  489)
* pull:                                  Invoking guix pull. (line    6)
* PulseAudio, sound support:             Sound Services.     (line    6)
* purpose:                               Introduction.       (line    6)
* pypi:                                  Invoking guix import.
                                                             (line   48)
* python:                                Python Modules.     (line    6)
* QEMU:                                  Running Guix in a VM.
                                                             (line   25)
* quote:                                 Defining Packages.  (line   85)
* quoting:                               Defining Packages.  (line   85)
* read-eval-print loop:                  Running Guix Before It Is Installed.
                                                             (line   27)
* real time clock:                       Networking Services.
                                                             (line  369)
* realm, kerberos:                       Kerberos Services.  (line   54)
* realtime:                              Base Services.      (line  697)
* rebuild scheduling strategy:           Submitting Patches. (line   88)
* reducing boilerplate:                  The Perfect Setup.  (line   32)
* references:                            Derivations.        (line   38)
* relocatable binaries:                  Invoking guix pack. (line  117)
* relocatable binaries, with guix pack:  Invoking guix pack. (line   47)
* remote access to the daemon:           Invoking guix-daemon.
                                                             (line  227)
* remote access to the daemon <1>:       The Store.          (line   47)
* removing packages:                     Invoking guix package.
                                                             (line    6)
* repairing store items:                 Additional Build Options.
                                                             (line  210)
* repairing the store:                   Invoking guix gc.   (line  169)
* REPL:                                  Running Guix Before It Is Installed.
                                                             (line   27)
* REPL, read-eval-print loop:            Invoking guix repl. (line    6)
* replacements of packages, for grafts:  Security Updates.   (line   38)
* replicating Guix:                      Channels.           (line  226)
* replicating Guix <1>:                  Invoking guix time-machine.
                                                             (line    6)
* replicating Guix <2>:                  Invoking guix describe.
                                                             (line    6)
* replication, of software environments: Features.           (line   72)
* reproducibility:                       Features.           (line   46)
* reproducibility <1>:                   Invoking guix describe.
                                                             (line    6)
* reproducibility, checking:             Additional Build Options.
                                                             (line  196)
* reproducibility, of Guix:              Channels.           (line  226)
* reproducibility, of Guix <1>:          Invoking guix time-machine.
                                                             (line    6)
* reproducible build environments:       Invoking guix environment.
                                                             (line    6)
* reproducible builds:                   Invoking guix-daemon.
                                                             (line   15)
* reproducible builds <1>:               Features.           (line   46)
* reproducible builds <2>:               Substitute Authentication.
                                                             (line   18)
* reproducible builds <3>:               Invoking guix challenge.
                                                             (line    6)
* reproducible builds, checking:         Submitting Patches. (line  117)
* resolution:                            Bootloader Configuration.
                                                             (line  178)
* resolution <1>:                        Invoking guix system.
                                                             (line   20)
* roll-back, of the operating system:    Using the Configuration System.
                                                             (line  350)
* rolling back:                          Invoking guix package.
                                                             (line  238)
* rolling back <1>:                      Invoking guix pull. (line  128)
* rolling back <2>:                      Invoking guix system.
                                                             (line  141)
* rottlog:                               Log Rotation.       (line    6)
* rpcbind:                               Network File System.
                                                             (line   88)
* rpc_pipefs:                            Network File System.
                                                             (line  109)
* run-time dependencies:                 Derivations.        (line   38)
* rust:                                  Rust Crates.        (line    6)
* Rust programming language:             Build Systems.      (line  204)
* RYF, Respects Your Freedom:            Hardware Considerations.
                                                             (line   24)
* saving space:                          Invoking guix system.
                                                             (line  151)
* scanner access:                        Desktop Services.   (line  345)
* scheduling jobs:                       Scheduled Job Execution.
                                                             (line    6)
* search paths:                          Invoking guix package.
                                                             (line   43)
* search paths <1>:                      Invoking guix package.
                                                             (line  268)
* searching for documentation:           Documentation.      (line    6)
* searching for packages:                Invoking guix package.
                                                             (line  348)
* secrets, Knot service:                 DNS Services.       (line  416)
* security:                              Substitute Server Authorization.
                                                             (line    6)
* security updates:                      Security Updates.   (line    6)
* security vulnerabilities:              Invoking guix lint. (line   63)
* security vulnerabilities <1>:          Security Updates.   (line    6)
* security, guix-daemon:                 SELinux Support.    (line    6)
* SELinux, daemon policy:                SELinux Support.    (line    6)
* SELinux, limitations:                  SELinux Support.    (line   36)
* SELinux, policy installation:          SELinux Support.    (line   15)
* service extensions:                    Service Composition.
                                                             (line   18)
* service type:                          Service Reference.  (line   92)
* service types:                         Service Composition.
                                                             (line   43)
* services:                              Using the Configuration System.
                                                             (line  131)
* services <1>:                          Service Composition.
                                                             (line    6)
* session limits:                        Base Services.      (line  697)
* session types (X11):                   X Window.           (line   26)
* setuid programs:                       Setuid Programs.    (line    6)
* sh, in /bin:                           Base Services.      (line   34)
* sharing store items across machines:   Invoking guix copy. (line    6)
* shepherd services:                     Shepherd Services.  (line    6)
* shortest path, between packages:       Invoking guix graph.
                                                             (line  145)
* signing, archives:                     Invoking guix archive.
                                                             (line   90)
* simple Clojure build system:           Build Systems.      (line  285)
* Singularity, build an image with guix pack: Invoking guix pack.
                                                             (line   71)
* size:                                  Invoking guix size. (line    6)
* SMTP:                                  Mail Services.      (line 1161)
* software bundle:                       Invoking guix pack. (line   15)
* software development:                  Development.        (line    6)
* Software Heritage, source code archive: Invoking guix lint.
                                                             (line   38)
* sound support:                         Sound Services.     (line    6)
* spice:                                 Miscellaneous Services.
                                                             (line   86)
* SQL:                                   Database Services.  (line    6)
* SquashFS, build an image with guix pack: Invoking guix pack.
                                                             (line   71)
* SSH:                                   Networking Services.
                                                             (line  683)
* SSH <1>:                               Networking Services.
                                                             (line  720)
* SSH <2>:                               Running Guix in a VM.
                                                             (line   84)
* SSH access to build daemons:           The Store.          (line   63)
* SSH authorized keys:                   Networking Services.
                                                             (line  839)
* SSH server:                            Networking Services.
                                                             (line  683)
* SSH server <1>:                        Networking Services.
                                                             (line  720)
* SSH server <2>:                        Running Guix in a VM.
                                                             (line   84)
* SSH, copy of store items:              Invoking guix copy. (line    6)
* stackage:                              Invoking guix import.
                                                             (line  270)
* state directory:                       Requirements.       (line   53)
* state monad:                           The Store Monad.    (line  152)
* statistics, for substitutes:           Invoking guix weather.
                                                             (line   13)
* store:                                 Managing Software the Guix Way.
                                                             (line   38)
* store <1>:                             The Store.          (line    6)
* store items:                           The Store.          (line    6)
* store paths:                           The Store.          (line    6)
* strata of code:                        G-Expressions.      (line   12)
* subdirectory, channels:                Channels.           (line  155)
* substitute availability:               Invoking guix weather.
                                                             (line   13)
* substituter:                           Packaging Guidelines.
                                                             (line   53)
* substitutes:                           Invoking guix-daemon.
                                                             (line   50)
* substitutes <1>:                       Features.           (line   57)
* substitutes <2>:                       Substitutes.        (line    6)
* substitutes, authorization thereof:    Binary Installation.
                                                             (line  131)
* substitutes, authorization thereof <1>: Substitute Server Authorization.
                                                             (line    6)
* substitutes, authorization thereof <2>: Base Services.     (line  456)
* substitutes, how to disable:           Substitute Server Authorization.
                                                             (line   47)
* sudo vs. guix pull:                    After System Installation.
                                                             (line   17)
* sudoers file:                          operating-system Reference.
                                                             (line  182)
* swap devices:                          operating-system Reference.
                                                             (line   97)
* swap encryption:                       Mapped Devices.     (line   78)
* sysctl:                                Miscellaneous Services.
                                                             (line   18)
* syslog:                                Base Services.      (line  422)
* syslog <1>:                            Base Services.      (line  431)
* system configuration:                  System Configuration.
                                                             (line    6)
* System images, creation in various formats: Invoking guix system.
                                                             (line  235)
* system service:                        Service Composition.
                                                             (line   35)
* system services:                       Services.           (line    6)
* tablet input, for Xorg:                Miscellaneous Services.
                                                             (line  100)
* templates:                             The Perfect Setup.  (line   32)
* test suite:                            Running the Test Suite.
                                                             (line    6)
* TeX Live:                              Invoking guix import.
                                                             (line  138)
* Texinfo markup, in package descriptions: Synopses and Descriptions.
                                                             (line   39)
* thermald:                              Power Management Services.
                                                             (line  403)
* tlp:                                   Power Management Services.
                                                             (line    6)
* TLS:                                   X.509 Certificates. (line    6)
* TLS certificates:                      Certificate Services.
                                                             (line    6)
* toolchain, for C development:          The GCC toolchain.  (line    6)
* toolchain, for Fortran development:    The GCC toolchain.  (line    6)
* Tor:                                   Networking Services.
                                                             (line  558)
* touchscreen input, for Xorg:           Miscellaneous Services.
                                                             (line  100)
* transactions:                          Features.           (line   26)
* transactions <1>:                      Invoking guix package.
                                                             (line   13)
* transactions, undoing:                 Invoking guix package.
                                                             (line  238)
* transactions, undoing <1>:             Invoking guix pull. (line  128)
* transferring store items across machines: Invoking guix copy.
                                                             (line    6)
* trust, of pre-built binaries:          On Trusting Binaries.
                                                             (line    6)
* UEFI boot:                             Using the Configuration System.
                                                             (line   76)
* UEFI, bootloader:                      Bootloader Configuration.
                                                             (line   20)
* UEFI, installation:                    Keyboard Layout and Networking and Partitioning.
                                                             (line  120)
* ulimit:                                Base Services.      (line  697)
* undoing transactions:                  Invoking guix package.
                                                             (line  238)
* undoing transactions <1>:              Invoking guix pull. (line  128)
* updating Guix:                         Invoking guix pull. (line    6)
* upgrading Guix:                        Invoking guix pull. (line    6)
* upgrading Guix for the root user, on a foreign distro: Upgrading Guix.
                                                             (line   12)
* Upgrading Guix, on a foreign distro:   Upgrading Guix.     (line    6)
* upgrading packages:                    Invoking guix package.
                                                             (line  187)
* upgrading the Guix daemon, on a foreign distro: Upgrading Guix.
                                                             (line   12)
* USB_ModeSwitch:                        Networking Services.
                                                             (line  103)
* user accounts:                         User Accounts.      (line    6)
* user interfaces:                       Managing Software the Guix Way.
                                                             (line    6)
* users:                                 User Accounts.      (line    6)
* Varnish:                               Web Services.       (line  407)
* verbosity, of the command-line tools:  Common Build Options.
                                                             (line  102)
* verifiable builds:                     Invoking guix challenge.
                                                             (line    6)
* version number, for VCS snapshots:     Version Numbers.    (line   37)
* Vim, Scheme code editing:              Formatting Code.    (line   30)
* virtual machine:                       Invoking guix system.
                                                             (line  194)
* virtual machine <1>:                   Running Guix in a VM.
                                                             (line    6)
* virtual machine, Guix System installation: Installing Guix in a VM.
                                                             (line    6)
* virtual private network (VPN):         VPN Services.       (line    6)
* virtual private server (VPS):          Installing Guix in a VM.
                                                             (line    6)
* VM:                                    Invoking guix system.
                                                             (line  194)
* VoIP server:                           Telephony Services. (line    6)
* VPN (virtual private network):         VPN Services.       (line    6)
* VPS (virtual private server):          Installing Guix in a VM.
                                                             (line    6)
* weather, substitute availability:      Invoking guix weather.
                                                             (line   13)
* web:                                   Web Services.       (line    6)
* Web:                                   Certificate Services.
                                                             (line    6)
* wesnothd:                              Game Services.      (line    9)
* Wi-Fi access points, hostapd service:  Networking Services.
                                                             (line  252)
* wicd:                                  Networking Services.
                                                             (line   79)
* WiFi:                                  Keyboard Layout and Networking and Partitioning.
                                                             (line   52)
* WiFi <1>:                              Networking Services.
                                                             (line   79)
* WiFi, hardware support:                Hardware Considerations.
                                                             (line   15)
* window manager:                        X Window.           (line   15)
* wireless:                              Keyboard Layout and Networking and Partitioning.
                                                             (line   52)
* wireless <1>:                          Networking Services.
                                                             (line   79)
* WPA Supplicant:                        Networking Services.
                                                             (line  222)
* www:                                   Web Services.       (line    6)
* X Window System:                       X Window.           (line    6)
* X.509 certificates:                    X.509 Certificates. (line    6)
* X11:                                   X Window.           (line    6)
* X11 login:                             X Window.           (line  237)
* X11 session types:                     X Window.           (line   26)
* XKB, keyboard layouts:                 Keyboard Layout.    (line   35)
* xlsfonts:                              Application Setup.  (line  122)
* XMPP:                                  Messaging Services. (line    6)
* Xorg, configuration:                   X Window.           (line  267)
* xterm:                                 Application Setup.  (line  111)
* zabbix zabbix-agent:                   Monitoring Services.
                                                             (line  266)
* zabbix zabbix-front-end:               Monitoring Services.
                                                             (line  339)
* zabbix zabbix-server:                  Monitoring Services.
                                                             (line  164)

