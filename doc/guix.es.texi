\input texinfo
@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-

@c %**start of header
@setfilename guix.es.info
@documentencoding UTF-8
@documentlanguage es
@frenchspacing on
@settitle Manual de referencia de GNU Guix
@c %**end of header

@include version-es.texi

@c Identifier of the OpenPGP key used to sign tarballs and such.
@set OPENPGP-SIGNING-KEY-ID 3CE464558A84FDC69DB40CFB090B11993D9AEBB5
@set OPENPGP-SIGNING-KEY-URL https://sv.gnu.org/people/viewgpg.php?user_id=15145

@c Base URL for downloads.
@set BASE-URL https://ftp.gnu.org/gnu/guix

@c The official substitute server used by default.
@set SUBSTITUTE-SERVER ci.guix.gnu.org
@set SUBSTITUTE-URL https://@value{SUBSTITUTE-SERVER}

@copying
Copyright @copyright{} 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020
Ludovic Courtès@* Copyright @copyright{} 2013, 2014, 2016 Andreas Enge@*
Copyright @copyright{} 2013 Nikita Karetnikov@* Copyright @copyright{} 2014,
2015, 2016 Alex Kost@* Copyright @copyright{} 2015, 2016 Mathieu Lirzin@*
Copyright @copyright{} 2014 Pierre-Antoine Rault@* Copyright @copyright{}
2015 Taylan Ulrich Bayırlı/Kammer@* Copyright @copyright{} 2015, 2016, 2017,
2019, 2020 Leo Famulari@* Copyright @copyright{} 2015, 2016, 2017, 2018,
2019, 2020 Ricardo Wurmus@* Copyright @copyright{} 2016 Ben Woodcroft@*
Copyright @copyright{} 2016, 2017, 2018 Chris Marusich@* Copyright
@copyright{} 2016, 2017, 2018, 2019, 2020 Efraim Flashner@* Copyright
@copyright{} 2016 John Darrington@* Copyright @copyright{} 2016, 2017 Nikita
Gillmann@* Copyright @copyright{} 2016, 2017, 2018, 2019, 2020 Jan
Nieuwenhuizen@* Copyright @copyright{} 2016, 2017, 2018, 2019, 2020 Julien
Lepiller@* Copyright @copyright{} 2016 Alex ter Weele@* Copyright
@copyright{} 2016, 2017, 2018, 2019 Christopher Baines@* Copyright
@copyright{} 2017, 2018, 2019 Clément Lassieur@* Copyright @copyright{}
2017, 2018 Mathieu Othacehe@* Copyright @copyright{} 2017 Federico Beffa@*
Copyright @copyright{} 2017, 2018 Carlo Zancanaro@* Copyright @copyright{}
2017 Thomas Danckaert@* Copyright @copyright{} 2017 humanitiesNerd@*
Copyright @copyright{} 2017 Christopher Allan Webber@* Copyright
@copyright{} 2017, 2018, 2019, 2020 Marius Bakke@* Copyright @copyright{}
2017, 2019, 2020 Hartmut Goebel@* Copyright @copyright{} 2017, 2019, 2020
Maxim Cournoyer@* Copyright @copyright{} 2017, 2018, 2019, 2020 Tobias
Geerinckx-Rice@* Copyright @copyright{} 2017 George Clemmer@* Copyright
@copyright{} 2017 Andy Wingo@* Copyright @copyright{} 2017, 2018, 2019 Arun
Isaac@* Copyright @copyright{} 2017 nee@* Copyright @copyright{} 2018 Rutger
Helling@* Copyright @copyright{} 2018 Oleg Pykhalov@* Copyright @copyright{}
2018 Mike Gerwitz@* Copyright @copyright{} 2018 Pierre-Antoine Rouby@*
Copyright @copyright{} 2018, 2019 Gábor Boskovits@* Copyright @copyright{}
2018, 2019 Florian Pelz@* Copyright @copyright{} 2018 Laura Lazzati@*
Copyright @copyright{} 2018 Alex Vong@* Copyright @copyright{} 2019 Josh
Holland@* Copyright @copyright{} 2019, 2020 Diego Nicola Barbato@* Copyright
@copyright{} 2019 Ivan Petkov@* Copyright @copyright{} 2019 Jakob
L. Kreuze@* Copyright @copyright{} 2019 Kyle Andrews@* Copyright
@copyright{} 2019 Alex Griffin@* Copyright @copyright{} 2019 Guillaume Le
Vaillant@* Copyright @copyright{} 2020 Leo Prikler@* Copyright @copyright{}
2019, 2020 Simon Tournier@* Copyright @copyright{} 2020 Wiktor Żelazny@*
Copyright @copyright{} 2020 Damien Cassou@* Copyright @copyright{} 2020
Jakub Kądziołka@* Copyright @copyright{} 2020 Jack Hill@* Copyright
@copyright{} 2020 Naga Malleswari@* Copyright @copyright{} 2020 Brice
Waegeneire@* Copyright @copyright{} 2020 R Veera Kumar@* Copyright
@copyright{} 2020 Pierre Langlois@* Copyright @copyright{} 2020 pinoaffe@*

Se garantiza el permiso de copia, distribución y/o modificación de este
documento bajo los términos de la licencia de documentación libre de GNU
(GNU Free Documentation License), versión 1.3 o cualquier versión posterior
publicada por la Free Software Foundation; sin secciones invariantes, sin
textos de cubierta delantera ni trasera. Una copia de la licencia está
incluida en la sección titulada ``GNU Free Documentation License''.
@end copying

@dircategory Administración del sistema
@direntry
* Guix: (guix.es).           Gestión del software instalado y la 
                               configuración del sistema.
* guix package: (guix.es)Invocación de guix package.  Instalación, borrado 
                                                         y actualización de 
                                                         paquetes.
* guix gc: (guix.es)Invocación de guix gc.  Recuperar espacio de disco sin 
                                               usar.
* guix pull: (guix.es)Invocación de guix pull.  Actualización de la lista 
                                                   disponible de paquetes.
* guix system: (guix.es)Invocación de guix system.  Gestión de la 
                                                       configuración del 
                                                       sistema operativo.
* guix deploy: (guix.es)Invocación de guix deploy.  Gestión de 
                                                       configuraciones de 
                                                       sistemas operativos en 
                                                       máquinas remotas.
@end direntry

@dircategory Desarrollo de software
@direntry
* guix environment: (guix.es)Invocación de guix environment.  Construcción 
                                                                 de entornos 
                                                                 de desarrollo 
                                                                 con Guix.
* guix build: (guix.es)Invocación de guix build.  Construcción de 
                                                     paquetes.
* guix pack: (guix.es)Invocación de guix pack.  Creación de empaquetados 
                                                   binarios.
@end direntry

@titlepage
@title Manual de referencia de GNU Guix
@subtitle Uso del gestor de paquetes funcional GNU Guix.
@author Las desarrolladoras de GNU Guix

@page
@vskip 0pt plus 1filll
Edición @value{EDITION} @* @value{UPDATED} @*

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top GNU Guix

Este documento describe GNU Guix versión @value{VERSION}, una herramienta
funcional de gestión de paquetes escrita para el sistema GNU.

@c TRANSLATORS: You can replace the following paragraph with information on
@c how to join your own translation team and how to report issues with the
@c translation.
Este manual también está disponible en chino simplificado (@pxref{Top,,,
guix.zh_CN, GNU Guix参考手册}), francés (@pxref{Top,,, guix.fr, Manuel de
référence de GNU Guix}), alemán (@pxref{Top,,, guix.de, Referenzhandbuch zu
GNU Guix}), ruso (@pxref{Top,,, guix.ru, Руководство GNU Guix}) y la versión
original en inglés (@pxref{Top,,, guix, GNU Guix Reference Manual}). Si
desea traducirlo en su lengua nativa, considere unirse al
@uref{https://translationproject.org/domain/guix-manual.html, Translation
Project}.

Este manual se está traducido prácticamente al completo al castellano, pero
es posible que se ocasionalmente algún fragmento sin traducir aquí y allá,
debido a modificaciones al texto original en inglés del manual. Si encuentra
fallos en esta traducción, o simplemente quiere colaborar en su evolución y
mejora, le rogamos que nos contacte a través de
@uref{https://translationproject.org/team/es.html, la información de
contacto del equipo de traducción}.

@menu
* Introducción::            ¿Qué es esto de Guix?
* Instalación::             Instalar Guix.
* Instalación del sistema::  Instalar el sistema operativo completo.
* Gestión de paquetes::     Instalación de paquetes, actualización, etc.
* Desarrollo::               Desarrollo de software asistido por Guix.
* Interfaz programática::   Uso de Guix en Scheme.
* Utilidades::               Órdenes de gestión de paquetes.
* Configuración del sistema::  Configurar el sistema operativo.
* Documentación::           Navegar por los manuales de usuaria del 
                               software.
* Instalación de ficheros de depuración::  Alimentación del depurador.
* Actualizaciones de seguridad::  Desplegar correcciones de seguridad 
                                    rápidamente.
* Lanzamiento inicial::      GNU/Linux construido de cero.
* Transportar::              Adaptación para otra plataforma o núcleo.
* Contribuir::               ¡Se necesita su ayuda!

* Reconocimientos::          ¡Gracias!
* Licencia de documentación libre GNU::  La licencia de este manual.
* Índice de conceptos::     Conceptos.
* Índice programático::    Tipos de datos, funciones y variables.

@detailmenu
 --- La lista detallada de nodos ---



Introducción



* Gestión de software con Guix::  Qué es especial.
* Distribución GNU::        Los paquetes y herramientas.

Instalación



* Instalación binaria::     ¡Poner Guix en funcionamiento en nada de 
                               tiempo!
* Requisitos::               Software necesario para construir y ejecutar 
                               Guix.
* Ejecución de la batería de pruebas::  Probar Guix.
* Preparación del daemon::  Preparar el entorno del daemon de 
                               construcción.
* Invocación de guix-daemon::  Ejecutar el daemon de construcción.
* Configuración de la aplicación::  Configuración específica de la 
                                        aplicación.

Preparación del daemon



* Configuración del entorno de construcción::  Preparar el entorno aislado 
                                                   de construcción.
* Configuración de delegación del daemon::  Delegar construcciones a 
                                                máquinas remotas.
* Soporte de SELinux::       Uso de una política SELinux para el daemon.

Instalación del sistema



* Limitaciones::             Qué puede esperar.
* Consideraciones sobre el hardware::  Hardware soportado.
* Instalación desde memoria USB y DVD::  Preparar el medio de instalación.
* Preparación para la instalación::  Red, particionado, etc.
* Instalación gráfica guiada::  Instalación gráfica fácil.
* Instalación manual::      Instalación manual para artistas del teclado.
* Tras la instalación del sistema::  Cuando la instalación ha finalizado 
                                        satisfactoriamente.
* Instalación de Guix en una máquina virtual::  El patio de recreo del 
                                                    sistema Guix.
* Construcción de la imagen de instalación::  Cómo esto llega a ser.

Instalación manual



* Distribución de teclado y red y particionado::  Configuración inicial.
* Procedimiento de instalación::  Instalación.

Gestión de paquetes



* Características::         Cómo Guix dará brillo a su vida.
* Invocación de guix package::  Instalación de paquetes, borrado, etc.
* Sustituciones::            Descargar binarios pre-construidos.
* Paquetes con múltiples salidas::  Un único paquete de fuentes, 
                                       múltiples salidas.
* Invocación de guix gc::   Ejecutar el recolector de basura.
* Invocación de guix pull::  Obtener la última versión de Guix y la 
                                distribución.
* Canales::                  Personalizar el recolector de basura.
* Invocación de guix time-machine::  Ejecutar una versión antigua de Guix.
* Inferiores::               Interactuar con otra revisión de Guix.
* Invocación de guix describe::  Muestra información acerca de su 
                                    revisión de Guix.
* Invocación de guix archive::  Exportar e importar ficheros del almacén.

Sustituciones



* Servidor oficial de sustituciones.::  Una fuente particular de 
                                          sustituciones.
* Autorización de servidores de sustituciones::  Cómo activar o desactivar 
                                                    las sustituciones.
* Verificación de sustituciones::  Cómo verifica las sustituciones Guix.
* Configuración de la pasarela.::  Cómo obtener sustituciones a través de 
                                      una pasarela.
* Fallos en las sustituciones::  Qué pasa cuando una sustitución falla.
* Sobre la confianza en binarios::  ¿Cómo puede confiar en esa masa amorfa 
                                      de datos binarios?

Desarrollo



* Invocación de guix environment::  Configurar entornos de desarrollo.
* Invocación de guix pack::  Creación de empaquetados de software.
* La cadena de herramientas de GCC::  Working with languages supported by 
                                        GCC.

Interfaz programática



* Módulos de paquetes::     Paquetes bajo el punto de vista del 
                               programador.
* Definición de paquetes::  Definir nuevos paquetes.
* Sistemas de construcción::  Especificar como se construyen los paquetes.
* El almacén::              Manipular el almacén de paquetes.
* Derivaciones::             Interfaz de bajo nivel de las derivaciones de 
                               los paquetes.
* La mónada del almacén::  Interfaz puramente funcional del almacén.
* Expresiones-G::            Manipular expresiones de construcción.
* Invocación de guix repl::  Enredar con Guix interactivamente.

Definición de paquetes



* Referencia de package::    El tipo de datos de los paquetes.
* Referencia de origin::     El tipo de datos de orígenes.

Utilidades



* Invocación de guix build::  Construir paquetes desde la línea de 
                                 órdenes.
* Invocación de guix edit::  Editar las definiciones de paquetes.
* Invocación de guix download::  Descargar un fichero e imprimir su hash.
* Invocación de guix hash::  Calcular el hash criptográfico de un fichero.
* Invocación de guix import::  Importar definiciones de paquetes.
* Invocación de guix refresh::  Actualizar definiciones de paquetes.
* Invocación de guix lint::  Encontrar errores en definiciones de paquetes.
* Invocación de guix size::  Perfilar el uso del disco.
* Invocación de guix graph::  Visualizar el grafo de paquetes.
* Invocación de guix publish::  Compartir sustituciones.
* Invocación de guix challenge::  Poner a prueba servidores de 
                                     sustituciones.
* Invocación de guix copy::  Copiar a y desde un almacén remoto.
* Invocación de guix container::  Aislamiento de procesos.
* Invocación de guix weather::  Comprobar la disponibilidad de 
                                   sustituciones.
* Invocación de guix processes::  Enumerar los procesos cliente.

Invocación de @command{guix build}



* Opciones comunes de construcción::  Opciones de construcción para la 
                                         mayoría de órdenes.
* Opciones de transformación de paquetes::  Crear variantes de paquetes.
* Opciones de construcción adicionales::  Opciones específicas de 'guix 
                                             build'.
* Depuración de fallos de construcción::  Experiencia de empaquetamiento 
                                              en la vida real.

Configuración del sistema



* Uso de la configuración del sistema::  Personalizar su sistema GNU.
* Referencia de operating-system::  Detalle de las declaraciones de sistema 
                                      operativo.
* Sistemas de ficheros::     Configurar el montaje de sistemas de ficheros.
* Dispositivos traducidos::  Procesamiento adicional de dispositivos de 
                               bloques.
* Cuentas de usuaria::       Especificar las cuentas de usuaria.
* Distribución de teclado::  Cómo interpreta el sistema las pulsaciones 
                                del teclado.
* Localizaciones::           Configuración de idioma y convenciones 
                               culturales.
* Servicios::                Especificar los servicios del sistema.
* Programas con setuid::     Programas que se ejecutan con privilegios de 
                               root.
* Certificados X.509::       Verificar servidores HTTPS.
* Selector de servicios de nombres::  Configurar el selector de servicios de 
                                        nombres de libc.
* Disco en RAM inicial::     Arranque de Linux-Libre.
* Configuración del gestor de arranque::  Configurar el gestor de arranque.
* Invocación de guix system::  Instanciar una configuración del sistema.
* Invocación de guix deploy::  Despliegue de una configuración del sistema 
                                  en una máquina remota.
* Ejecutar Guix en una máquina virtual::  Cómo ejecutar el sistema Guix en 
                                             una máquina virtual.
* Definición de servicios::  Añadir nuevas definiciones de servicios.

Servicios



* Servicios base::           Servicios esenciales del sistema.
* Ejecución de tareas programadas::  El servicio mcron.
* Rotación del registro de mensajes::  El servicio rottlog.
* Servicios de red::         Configuración de red, daemon SSH, etc.
* Sistema X Window::         Interfaz gráfica.
* Servicios de impresión::  Soporte de impresoras locales y remotas.
* Servicios de escritorio::  D-Bus y servicios de escritorio.
* Servicios de sonido::      Servicios de ALSA y Pulseaudio.
* Servicios de bases de datos::  Bases de datos SQL, almacenes de 
                                   clave-valor, etc.
* Servicios de correo::      IMAP, POP3, SMTP y todo eso.
* Servicios de mensajería::  Servicios de mensajería.
* Servicios de telefonía::  Servicios de telefonía.
* Servicios de monitorización::  Servicios de monitorización.
* Servicios Kerberos::       Servicios Kerberos.
* Servicios Web::            Servidores Web.
* Servicios de certificados::  Certificados TLS via Let's Encrypt.
* Servicios DNS::            Daemon de DNS.
* Servicios VPN::            Daemon de VPN.
* Sistema de ficheros en red::  Servicios relacionados con NFS.
* Integración continua::    El servicio Cuirass.
* Servicios de gestión de energía::  Extender la vida de la batería.
* Servicios de audio::       El MPD.
* Servicios de virtualización::  Servicios de virtualización.
* Servicios de control de versiones::  Proporcionar acceso remoto a 
                                         repositorios Git.
* Servicios de juegos::      Servidores de juegos.
* Servicio PAM Mount::       Servicio de montado de volúmenes en el ingreso 
                               al sistema.
* Servicios de Guix::        Servicios relacionados específicamente con 
                               Guix.
* Servicios de Linux::       Servicios asociados al núcleo Linux.
* Hurd Services::            Services specific to a Hurd System.
* Servicios misceláneos::   Otros servicios.

Definición de servicios



* Composición de servicios::  El modelo para la composición de servicios.
* Tipos de servicios y servicios::  Tipos y servicios
* Referencia de servicios::  Referencia de la API.
* Servicios de Shepherd::    Un tipo de servicio particular.

@end detailmenu
@end menu

@c *********************************************************************
@node Introducción
@chapter Introducción

@cindex propósito
GNU Guix@footnote{``Guix'' se pronuncia tal y como se escribe en castellano,
``ɡiːks'' en el alfabeto fonético internacional (IPA).} es una herramienta
de gestión de paquetes y una distribución del sistema GNU. Guix facilita a
usuarias sin privilegios la instalación, actualización o borrado de paquetes
de software, la vuelta a un conjunto de paquetes previo atómicamente, la
construcción de paquetes desde las fuentes, y ayuda de forma general en la
creación y mantenimiento de entornos software.

@cindex Sistema Guix
@cindex GuixSD, ahora sistema Guix
@cindex Distribución de Sistema Guix, ahora sistema Guix
Puede instalar GNU@tie{}Guix sobre un sistema GNU/Linux existente, donde
complementará las herramientas disponibles sin interferencias
(@pxref{Instalación}), o puede usarse como un sistema operativo en sí
mismo, el @dfn{sistema@tie{}Guix}@footnote{Solíamos referirnos al sistema
Guix como ``Distribución de sistema Guix'' o ``GuixSD''. Ahora consideramos
que tiene más sentido agrupar todo bajo la etiqueta ``Guix'' ya que, después
de todo, el sistema Guix está inmediatamente disponible a través de la orden
@command{guix system}, ¡incluso cuando usa una distribución distinta por
debajo!}. @xref{Distribución GNU}.

@menu
* Gestión de software con Guix::  Qué es especial.
* Distribución GNU::        Los paquetes y herramientas.
@end menu

@node Gestión de software con Guix
@section Gestión de software con Guix

@cindex interfaces de usuaria
Guix proporciona una interfaz de gestión de paquetes de línea de ordenes
(@pxref{Gestión de paquetes}), un conjunto de utilidades de línea de órdenes
(@pxref{Utilidades}), así como interfaces programáticas Scheme
(@pxref{Interfaz programática}).
@cindex daemon de construcción
Su @dfn{daemon de construcción} es responsable de la construcción de
paquetes en delegación de las usuarias (@pxref{Preparación del daemon}) y de
la descarga de binarios preconstruidos de fuentes autorizadas
(@pxref{Sustituciones})

@cindex extensibilidad de la distribución
@cindex personalización, de paquetes
Guix incluye definiciones de paquetes para muchos paquetes GNU y no-GNU,
todos los cuales @uref{https://www.gnu.org/philosophy/free-sw.html, respetan
la libertad de computación de la usuaria}. Es @emph{extensible}: las
usuarias pueden escribir sus propias definiciones de paquetes
(@pxref{Definición de paquetes}) y hacerlas disponibles como módulos
independientes de paquetes (@pxref{Módulos de paquetes}). También es
@emph{personalizable}: las usuarias pueden @emph{derivar} definiciones de
paquetes especializadas de las existentes, inclusive desde la línea de
órdenes (@pxref{Opciones de transformación de paquetes}).

@cindex gestión de paquetes funcional
@cindex aislamiento
En su implementación, Guix utiliza la disciplina de @dfn{gestión de paquetes
funcional} en la que Nix fue pionero (@pxref{Reconocimientos}). En Guix, el
proceso de construcción e instalación es visto como una @emph{función}, en
el sentido matemático. Dicha función toma entradas, como los guiones de
construcción, un compilador, unas bibliotecas y devuelve el paquete
instalado. Como función pura, su resultado únicamente depende de sus
entradas---por ejemplo, no puede hacer referencia a software o guiones que
no fuesen pasados explícitamente como entrada. Una función de construcción
siempre produce el mismo resultado cuando se le proporciona un conjunto de
entradas dado. No puede modificar el entorno del sistema que la ejecuta de
ninguna forma; por ejemplo, no puede crear, modificar o borrar archivos
fuera de sus directorios de construcción e instalación. Esto se consigue
ejecutando los procesos de construcción en entornos aislados (o
@dfn{contenedores}), donde únicamente sus entradas explícitas son visibles.

@cindex almacén
El resultado de las funciones de construcción de paquetes es @dfn{almacenado
en la caché} en el sistema de ficheros, en un directorio especial llamado
@dfn{el almacén} (@pxref{El almacén}). Cada paquete se instala en un
directorio propio en el almacén---por defecto, bajo @file{/gnu/store}. El
nombre del directorio contiene el hash de todas las entradas usadas para
construir el paquete; por tanto, cambiar una entrada resulta en un nombre de
directorio distinto.

Esta aproximación es el cimiento de las avanzadas características de Guix:
capacidad para la actualización transaccional y vuelta-atrás de paquetes,
instalación en el ámbito de la usuaria y recolección de basura de paquetes
(@pxref{Características}).


@node Distribución GNU
@section Distribución GNU

@cindex Sistema Guix
Guix viene con una distribución del sistema GNU consistente en su totalidad
de software libre@footnote{El término ``libre'' aquí se refiere a la
@url{https://www.gnu.org/philosophy/free-sw.html,libertad proporcionada a
las usuarias de dicho software}.}. La distribución puede instalarse
independientemente (@pxref{Instalación del sistema}), pero también es posible
instalar Guix como un gestor de paquetes sobre un sistema GNU/Linux
existente (@pxref{Instalación}). Para distinguir entre las dos opciones,
nos referimos a la distribución independiente como el sistema@tie{}Guix.

La distribución proporciona paquetes principales de GNU como GNU libc, GCC y
Binutils, así como muchas aplicaciones GNU y no-GNU. La lista completa de
paquetes disponibles se puede explorar
@url{https://www.gnu.org/software/guix/packages,en línea} o ejecutando
@command{guix package} (@pxref{Invocación de guix package}):

@example
guix package --list-available
@end example

Nuestro objetivo es proporcionar una distribución práctica con 100% software
libre basada en Linux y otras variantes de GNU, con un enfoque en la
promoción y la alta integración de componentes GNU, y un énfasis en
programas y herramientas que ayuden a las usuarias a ejercitar esa libertad.

Actualmente hay paquetes disponibles para las siguientes plataformas:

@table @code

@item x86_64-linux
arquitectura @code{x86_64} de Intel/AMD, núcleo Linux-Libre;

@item i686-linux
arquitectura de 32-bits Intel (IA32), núcleo Linux-Libre;

@item armhf-linux
arquitectura ARMv7-A con coma flotante hardware, Thumb-2 y NEON, usando la
interfaz binaria de aplicaciones (ABI) EABI con coma flotante hardware, y el
núcleo Linux-Libre.

@item aarch64-linux
procesadores ARMv8-A de 64 bits little-endian, con el núcleo Linux-Libre.

@item mips64el-linux (deprecated)
little-endian 64-bit MIPS processors, specifically the Loongson series, n32
ABI, and Linux-Libre kernel.  This configuration is no longer fully
supported; in particular, there is no ongoing work to ensure that this
architecture still works. Should someone decide they wish to revive this
architecture then the code is still available.

@end table

Con el sistema@tie{}Guix, @emph{declara} todos los aspectos de la
configuración del sistema y Guix se hace cargo de instanciar la
configuración de manera transaccional, reproducible y sin estado global
(@pxref{Configuración del sistema}). El sistema Guix usa el núcleo Linux-libre,
el sistema de inicialización Shepherd (@pxref{Introducción,,, shepherd, The
GNU Shepherd Manual}), las conocidas utilidades y herramientas de
compilación GNU, así como el entorno gráfico o servicios del sistema de su
elección. 

El sistema Guix está disponible en todas las plataformas previas excepto
@code{mips64el-linux}.

@noindent
Para información sobre el transporte a otras arquitecturas o núcleos,
@pxref{Transportar}.

La construcción de esta distribución es un esfuerzo cooperativo, ¡y esta
invitada a unirse! @xref{Contribuir}, para información sobre cómo puede
ayudar.


@c *********************************************************************
@node Instalación
@chapter Instalación

@cindex instalar Guix

@quotation Nota
Recomendamos el uso de este
@uref{https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh,
guión de shell de instalación} para instalar Guix sobre un sistema GNU/Linux
en ejecución, de aquí en adelante referido como una @dfn{distribución
distinta}.@footnote{Esta sección está dedicada a la instalación del gestor
de paquetes, que puede realizarse sobre un sistema GNU/Linux ya en
ejecución. Si, en vez de eso, desea instalar el sistema operativo GNU
completo, @pxref{Instalación del sistema}.} El guión automatiza la descarga,
instalación y configuración inicial de Guix. Debe ejecutarse como la usuaria
de administración root.
@end quotation

@cindex distribución distinta
@cindex directorios relacionados con una distribución distinta
Cuando está instalado sobre una distribución distinta, GNU@tie{}Guix
complementa las herramientas disponibles sin interferencias. Sus datos
radican exclusivamente en dos directorios, normalmente @file{/gnu/store} y
@file{/var/guix}; otros ficheros en su sistema, como @file{/etc}, permanecen
intactos.

Una vez instalado, Guix puede ser actualizado ejecutando @command{guix pull}
(@pxref{Invocación de guix pull}.

Si prefiere realizar los pasos de instalación manualmente o desea
personalizarlos, puede encontrar útiles las siguientes
instrucciones. Describen los requisitos de software de Guix, así como su
instalación manual y la preparación para su uso.

@menu
* Instalación binaria::     ¡Poner Guix en funcionamiento en nada de 
                               tiempo!
* Requisitos::               Software necesario para construir y ejecutar 
                               Guix.
* Ejecución de la batería de pruebas::  Probar Guix.
* Preparación del daemon::  Preparar el entorno del daemon de 
                               construcción.
* Invocación de guix-daemon::  Ejecutar el daemon de construcción.
* Configuración de la aplicación::  Configuración específica de la 
                                        aplicación.
* Actualizar Guix::          Actualizar Guix y su daemon de construcción.
@end menu

@node Instalación binaria
@section Instalación binaria

@cindex instalar Guix desde binarios
@cindex guión del instalador
Esta sección describe cómo instalar Guix en un sistema arbitrario desde un
archivador autocontenido que proporciona los binarios para Guix y todas sus
dependencias. Esto es normalmente más rápido que una instalación desde las
fuentes, la cual es descrita en las siguientes secciones. El único requisito
es tener GNU@tie{}tar y Xz.

@c Note duplicated from the ``Installation'' node.
@quotation Nota
We recommend the use of this
@uref{https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh,
shell installer script}.  The script automates the download, installation,
and initial configuration steps described below.  It should be run as the
root user.  As root, you can thus run this:

@example
cd /tmp
wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh
chmod +x guix-install.sh
./guix-install.sh
@end example
@end quotation

La instalación consiste más o menos en los siguientes pasos:

@enumerate
@item
@cindex descargar el binario de Guix
Download the binary tarball from
@indicateurl{@value{BASE-URL}/guix-binary-@value{VERSION}.x86_64-linux.tar.xz},
where @code{x86_64-linux} can be replaced with @code{i686-linux} for an
@code{i686} (32-bits) machine already running the kernel Linux, and so on
(@pxref{Distribución GNU}).

@c The following is somewhat duplicated in ``System Installation''.
Asegúrese de descargar el fichero @file{.sig} asociado y de verificar la
autenticidad del archivador con él, más o menos así:

@example
$ wget @value{BASE-URL}/guix-binary-@value{VERSION}.x86_64-linux.tar.xz.sig
$ gpg --verify guix-binary-@value{VERSION}.x86_64-linux.tar.xz.sig
@end example

Si la orden falla porque no dispone de la clave pública necesaria, entonces
ejecute esta otra orden para importarla:

@example
$ wget @value{OPENPGP-SIGNING-KEY-URL} \
      -qO - | gpg --import -
@end example

@noindent
y vuelva a ejecutar la orden @code{gpg --verify}.

Tenga en cuenta que un aviso del tipo ``Esta clave no esta certificada con
una firma de confianza'' es normal.

@c end authentication part

@item
Ahora necesita convertirse en la usuaria @code{root}. Dependiendo de su
distribución, puede que tenga que ejecutar @code{su -} o @code{sudo
-i}. Como @code{root}, ejecute:

@example
# cd /tmp
# tar --warning=no-timestamp -xf \
     /path/to/guix-binary-@value{VERSION}.x86_64-linux.tar.xz
# mv var/guix /var/ && mv gnu /
@end example

This creates @file{/gnu/store} (@pxref{El almacén}) and @file{/var/guix}.
The latter contains a ready-to-use profile for @code{root} (see next step).

@emph{No} extraiga el archivador en un sistema Guix ya funcionando ya que
sobreescribiría sus propios ficheros esenciales.

The @option{--warning=no-timestamp} option makes sure GNU@tie{}tar does not
emit warnings about ``implausibly old time stamps'' (such warnings were
triggered by GNU@tie{}tar 1.26 and older; recent versions are fine).  They
stem from the fact that all the files in the archive have their modification
time set to zero (which means January 1st, 1970).  This is done on purpose
to make sure the archive content is independent of its creation time, thus
making it reproducible.

@item
Ponga disponible el perfil en @file{~root/.config/guix/current}, que es
donde @command{guix pull} instalará las actualizaciones (@pxref{Invocación de guix pull}):

@example
# mkdir -p ~root/.config/guix
# ln -sf /var/guix/profiles/per-user/root/current-guix \
         ~root/.config/guix/current
@end example

Source @file{etc/profile} to augment @env{PATH} and other relevant
environment variables:

@example
# GUIX_PROFILE="`echo ~root`/.config/guix/current" ; \
  source $GUIX_PROFILE/etc/profile
@end example

@item
Cree el grupo y las cuentas de usuaria para las usuarias de construcción
como se explica a continuación (@pxref{Configuración del entorno de construcción}).

@item
Ejecute el daemon, y configure su inicio automático durante el arranque.

Si su distribución anfitriona usa el sistema de inicio systemd, puede
hacerlo con las siguientes órdenes:

@c Versions of systemd that supported symlinked service files are not
@c yet widely deployed, so we should suggest that users copy the service
@c files into place.
@c
@c See this thread for more information:
@c https://lists.gnu.org/archive/html/guix-devel/2017-01/msg01199.html

@example
# cp ~root/.config/guix/current/lib/systemd/system/gnu-store.mount \
     ~root/.config/guix/current/lib/systemd/system/guix-daemon.service \
     /etc/systemd/system/
# systemctl enable --now gnu-store.mount guix-daemon
@end example

Si su distribución anfitriona usa el sistema de inicio Upstart:

@example
# initctl reload-configuration
# cp ~root/.config/guix/current/lib/upstart/system/guix-daemon.conf \
     /etc/init/
# start guix-daemon
@end example

En otro caso, todavía puede iniciar el daemon manualmente con:

@example
# ~root/.config/guix/current/bin/guix-daemon \
       --build-users-group=guixbuild
@end example

@item
Haga accesible la orden @command{guix} a otras usuarias de la máquina, por
ejemplo con:

@example
# mkdir -p /usr/local/bin
# cd /usr/local/bin
# ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix
@end example

Es también una buena idea poner disponible la versión Info de este manual
ahí:

@example
# mkdir -p /usr/local/share/info
# cd /usr/local/share/info
# for i in /var/guix/profiles/per-user/root/current-guix/share/info/* ;
  do ln -s $i ; done
@end example

That way, assuming @file{/usr/local/share/info} is in the search path,
running @command{info guix} will open this manual (@pxref{Other Info
Directories,,, texinfo, GNU Texinfo}, for more details on changing the Info
search path).

@item
@cindex sustituciones, autorización de las mismas
Para usar sustituciones de @code{@value{SUBSTITUTE-SERVER}} o uno de sus
espejos (@pxref{Sustituciones}), debe autorizarlas:

@example
# guix archive --authorize < \
     ~root/.config/guix/current/share/guix/@value{SUBSTITUTE-SERVER}.pub
@end example

@item
Cada usuaria puede necesitar dar algunos pasos adicionales para preparar su
entorno de Guix para el uso diario, @pxref{Configuración de la aplicación}.
@end enumerate

Voilà, ¡la instalación está completa!

Puede confirmar que Guix está funcionando instalando un paquete de ejemplo
en su perfil de root:

@example
# guix install hello
@end example

El archivador de la instalación binaria puede ser (re)producido y verificado
simplemente ejecutando la siguiente orden en el árbol de fuentes de Guix:

@example
make guix-binary.@var{sistema}.tar.xz
@end example

@noindent
...@: que a su vez ejecuta:

@example
guix pack -s @var{sistema} --localstatedir \
  --profile-name=current-guix guix
@end example

@xref{Invocación de guix pack}, para más información sobre esta útil herramienta.

@node Requisitos
@section Requisitos

Esta sección enumera los requisitos para construir Guix desde las
fuentes. El procedimiento de construcción de Guix es el mismo que el de otro
software GNU, y no está cubierto aquí. Por favor, eche un vistazo a los
ficheros @file{README} y @file{INSTALL} en el árbol de fuentes de Guix para
obtener detalles adicionales.

@cindex página web oficial
GNU Guix está disponible para descarga desde su página web en
@url{http://www.gnu.org/software/guix/}.

GNU Guix depende de los siguientes paquetes:

@itemize
@item @url{https://gnu.org/software/guile/, GNU Guile}, versión 3.0.x o
2.2.x;
@item @url{https://notabug.org/cwebber/guile-gcrypt, Guile-Gcrypt}, versión
0.1.0 o posterior;
@item
@uref{https://gnutls.org/, GnuTLS}, específicamente su API para Guile
(@pxref{Guile Preparations, how to install the GnuTLS bindings for Guile,,
gnutls-guile, GnuTLS-Guile});
@item
@uref{https://notabug.org/guile-sqlite3/guile-sqlite3, Guile-SQLite3},
versión 0.1.0 o posterior;
@item
@c FIXME: Specify a version number once a release has been made.
@uref{https://gitlab.com/guile-git/guile-git, Guile-Git}, de agosto de 2017
o posterior;
@item @uref{https://savannah.nongnu.org/projects/guile-json/, Guile-JSON} 3.x;
@item @url{https://zlib.net, zlib};
@item @url{https://www.gnu.org/software/make/, GNU Make}.
@end itemize

Las siguientes dependencias son opcionales:

@itemize
@item
@c Note: We need at least 0.12.0 for 'userauth-gssapi!'.
La delegación de construcciones (@pxref{Configuración de delegación del daemon}) y
@command{guix copy} (@pxref{Invocación de guix copy}) dependen de
@uref{https://github.com/artyom-poptsov/guile-ssh, Guile-SSH}, versión
0.12.0 o posterior.

@item
Cuando @url{https://www.nongnu.org/lzip/lzlib.html, lzlib} está disponible,
se pueden usar sustituciones con lzlib y @command{guix publish} puede
comprimir las sustituciones con lzlib.

@item
Cuando @url{http://www.bzip.org, libbz2} está disponible, @command{guix
daemon} puede usarla para comprimir los registros de construcción.
@end itemize

Unless @option{--disable-daemon} was passed to @command{configure}, the
following packages are also needed:

@itemize
@item @url{https://gnupg.org/, GNU libgcrypt};
@item @url{https://sqlite.org, SQLite 3};
@item @url{https://gcc.gnu.org, g++ de GCC} con soporte para el
estándar C++11
@end itemize

@cindex directorio de estado
When configuring Guix on a system that already has a Guix installation, be
sure to specify the same state directory as the existing installation using
the @option{--localstatedir} option of the @command{configure} script
(@pxref{Directory Variables, @code{localstatedir},, standards, GNU Coding
Standards}).  Usually, this @var{localstatedir} option is set to the value
@file{/var}.  The @command{configure} script protects against unintended
misconfiguration of @var{localstatedir} so you do not inadvertently corrupt
your store (@pxref{El almacén}).

@node Ejecución de la batería de pruebas
@section Ejecución de la batería de pruebas

@cindex batería de pruebas
Después de una ejecución exitosa de @command{configure} y @code{make}, es
una buena idea ejecutar la batería de pruebas. Puede ayudar a encontrar
problemas con la configuración o el entorno, o errores en el mismo Guix---e
informar de fallos en las pruebas es realmente una buena forma de ayudar a
mejorar el software. Para ejecutar la batería de pruebas, teclee:

@example
make check
@end example

Los casos de prueba pueden ejecutarse en paralelo: puede usar la opción
@code{-j} de GNU@tie{}make para acelerar las cosas. La primera ejecución
puede tomar algunos minutos en una máquina reciente; las siguientes
ejecuciones serán más rápidas puesto que el almacén creado para las pruebas
ya tendrá varias cosas en la caché.

También es posible ejecutar un subconjunto de las pruebas definiendo la
variable de makefile @code{TESTS} como en el ejemplo:

@example
make check TESTS="tests/store.scm tests/cpio.scm"
@end example

Por defecto, los resultados de las pruebas se muestran a nivel de
fichero. Para ver los detalles de cada caso de prueba individual, es posible
definir la variable de makefile @code{SCM_LOG_DRIVER_FLAGS} como en el
ejemplo:

@example
make check TESTS="tests/base64.scm" SCM_LOG_DRIVER_FLAGS="--brief=no"
@end example

En caso de fallo, le rogamos que envíe un correo a @email{bug-guix@@gnu.org}
y adjunte el fichero @file{test-suite.log}. Por favor, especifique la
versión de Guix usada así como los números de versión de las dependencias
(@pxref{Requisitos}) en su mensaje.

Guix también viene como una batería de pruebas del sistema completo que
prueban instancias completas del sistema Guix. Se puede ejecutar únicamente
en sistemas donde Guix ya está instalado, usando:

@example
make check-system
@end example

@noindent
o, de nuevo, definiendo @code{TESTS} para seleccionar un subconjunto de las
pruebas a ejecutar:

@example
make check-system TESTS="basic mcron"
@end example

Estas pruebas de sistema están definidas en los módulos @code{(gnu tests
@dots{})}. Funcionan ejecutando el sistema operativo con una instrumentación
ligera en una máquina virtual (VM). Pueden ser computacionalmente intensivas
o bastante baratas, dependiendo de si hay sustituciones disponibles para sus
dependencias (@pxref{Sustituciones}). Algunas requieren mucho espacio de
almacenamiento para alojar las imágenes de la máquina virtual.

De nuevo, en caso de fallos en las pruebas, le rogamos que envíe a
@email{bug-guix@@gnu.org} todos los detalles.

@node Preparación del daemon
@section Preparación del daemon

@cindex daemon
Operaciones como la construcción de un paquete o la ejecución del recolector
de basura son realizadas por un proceso especializado, el @dfn{daemon de
construcción}, en delegación de sus clientes. Únicamente el daemon puede
acceder al almacén y su base de datos asociada. Por tanto, cualquier
operación que manipula el almacén se realiza a través del daemon. Por
ejemplo, las herramientas de línea de órdenes como @command{guix package} y
@command{guix build} se comunican con el daemon (@i{via} llamadas a
procedimientos remotos) para indicarle qué hacer.

Las siguientes secciones explican cómo preparar el entorno del daemon de
construcción. Véase también @ref{Sustituciones}, para información sobre cómo
permitir al daemon descargar binarios pre-construidos.

@menu
* Configuración del entorno de construcción::  Preparar el entorno aislado 
                                                   de construcción.
* Configuración de delegación del daemon::  Delegar construcciones a 
                                                máquinas remotas.
* Soporte de SELinux::       Uso de una política SELinux para el daemon.
@end menu

@node Configuración del entorno de construcción
@subsection Configuración del entorno de construcción

@cindex entorno de construcción
En una configuración multiusuaria estándar, Guix y su daemon---el programa
@command{guix-daemon}---son instalados por la administradora del sistema;
@file{/gnu/store} pertenece a @code{root} y @command{guix-daemon} se ejecuta
como @code{root}. Usuarias sin privilegios pueden usar las herramientas de
Guix para construir paquetes o acceder al almacén de otro modo, y el daemon
lo hará en delegación suya, asegurando que el almacén permanece en un estado
consistente, y permitiendo compartir entre usuarias los paquetes
construidos.

@cindex usuarias de construcción
Mientras que @command{guix-daemon} se ejecuta como @code{root}, puede que no
desee que los procesos de construcción de paquetes se ejecuten como
@code{root} también, por razones de seguridad obvias. Para evitarlo, una
reserva especial de @dfn{usuarias de construcción} debe ser creada para ser
usada por los procesos de construcción iniciados por el daemon. Estas
usuarias de construcción no necesitan tener un shell ni un directorio home:
simplemente serán usadas cuando el daemon se deshaga de los privilegios de
@code{root} en los procesos de construcción. Tener varias de dichas usuarias
permite al daemon lanzar distintos procesos de construcción bajo UID
separados, lo que garantiza que no interferirán entre ellos---una
característica esencial ya que las construcciones se caracterizan como
funciones puras (@pxref{Introducción}).

En un sistema GNU/Linux, una reserva de usuarias de construcción puede ser
creada así (usando la sintaxis de Bash y las órdenes de @code{shadow}):

@c See https://lists.gnu.org/archive/html/bug-guix/2013-01/msg00239.html
@c for why `-G' is needed.
@example
# groupadd --system guixbuild
# for i in `seq -w 1 10`;
  do
    useradd -g guixbuild -G guixbuild                      \
            -d /var/empty -s `which nologin`               \
            -c "Usuaria de construcción Guix $i" --system  \
            guixbuilder$i;
  done
@end example

@noindent
El número de usuarias de construcción determina cuantos trabajos de
construcción se pueden ejecutar en paralelo, especificado por la opción
@option{--max-jobs} (@pxref{Invocación de guix-daemon,
@option{--max-jobs}}). Para usar @command{guix system vm} y las órdenes
relacionadas, puede necesitar añadir las usuarias de construcción al grupo
@code{kvm} para que puedan acceder a @file{/dev/kvm}, usando @code{-G
guixbuild,kvm} en vez de @code{-G guixbuild} (@pxref{Invocación de guix system}).

El programa @code{guix-daemon} puede ser ejecutado entonces como @code{root}
con la siguiente orden@footnote{Si su máquina usa el sistema de inicio
systemd, copiando el fichero
@file{@var{prefix}/lib/systemd/system/guix-daemon.service} en
@file{/etc/systemd/system} asegurará que @command{guix-daemon} se arranca
automáticamente. De igual modo, si su máquina usa el sistema de inicio
Upstart, copie el fichero
@file{@var{prefix}/lib/upstart/system/guix-daemon.conf} en
@file{/etc/init}.}:

@example
# guix-daemon --build-users-group=guixbuild
@end example

@cindex chroot
@noindent
De este modo, el daemon inicia los procesos de construcción en un
``chroot'', bajo una de las usuarias @code{guixbuilder}. En GNU/Linux, por
defecto, el entorno ``chroot'' contiene únicamente:

@c Keep this list in sync with libstore/build.cc! -----------------------
@itemize
@item
un directorio @code{/dev} mínimo, creado en su mayor parte
independientemente del @code{/dev} del sistema anfitrión@footnote{``En su
mayor parte'' porque, mientras el conjunto de ficheros que aparecen en
@code{/dev} es fijo, la mayor parte de estos ficheros solo pueden ser
creados si el sistema anfitrión los tiene.};

@item
el directorio @code{/proc}; únicamente muestra los procesos del contenedor
ya que se usa un espacio de nombres de PID separado;

@item
@file{/etc/passwd} con una entrada para la usuaria actual y una entrada para
la usuaria @file{nobody};

@item
@file{/etc/groups} con una entrada para el grupo de la usuaria;

@item
@file{/etc/hosts} con una entrada que asocia @code{localhost} a
@code{127.0.0.1};

@item
un directorio @file{/tmp} con permisos de escritura.
@end itemize

You can influence the directory where the daemon stores build trees @i{via}
the @env{TMPDIR} environment variable.  However, the build tree within the
chroot is always called @file{/tmp/guix-build-@var{name}.drv-0}, where
@var{name} is the derivation name---e.g., @code{coreutils-8.24}.  This way,
the value of @env{TMPDIR} does not leak inside build environments, which
avoids discrepancies in cases where build processes capture the name of
their build tree.

@vindex http_proxy
@vindex https_proxy
The daemon also honors the @env{http_proxy} and @env{https_proxy}
environment variables for HTTP and HTTPS downloads it performs, be it for
fixed-output derivations (@pxref{Derivaciones}) or for substitutes
(@pxref{Sustituciones}).

If you are installing Guix as an unprivileged user, it is still possible to
run @command{guix-daemon} provided you pass @option{--disable-chroot}.
However, build processes will not be isolated from one another, and not from
the rest of the system.  Thus, build processes may interfere with each
other, and may access programs, libraries, and other files available on the
system---making it much harder to view them as @emph{pure} functions.


@node Configuración de delegación del daemon
@subsection Uso de la facilidad de descarga de trabajo

@cindex delegando trabajo
@cindex procedimiento de extensión de construcción
Cuando así se desee, el daemon de construcción puede @dfn{delegar}
construcciones de derivación a otras máquinas ejecutando Guix, usando el
@dfn{procedimiento de extensión de construcción}
@code{offload}@footnote{Esta característica está únicamente disponible
cuando @uref{https://github.com/artyom-potsov/guile-ssh, Guile-SSH} está
presente.}. Cuando dicha característica es activada, una lista de máquinas
de construcción especificadas por la usuaria es leída de
@file{/etc/guix/machines.scm}; cada vez que se solicita una construcción,
por ejemplo via @code{guix build}, el daemon intenta delegarla a una de las
máquinas que satisfaga las condiciones de la derivación, en particular su
tipo de sistema---por ejemplo, @file{x86_64-linux}. Los prerrequisitos
restantes para la construcción son copiados por SSH a la máquina objetivo,
la cual procede con la construcción; con un resultado satisfactorio la(s)
salida(s) de la construcción son copiadas de vuelta a la máquina inicial.

El fichero @file{/etc/guix/machines.scm} normalmente tiene un contenido de
este estilo:

@lisp
(list (build-machine
        (name "ochentayseis.example.org")
        (system "x86_64-linux")
        (host-key "ssh-ed25519 AAAAC3Nza@dots{}")
        (user "rober")
        (speed 2.))     ;¡increíblemente rápida!

      (build-machine
        (name "armeight.example.org")
        (system "aarch64-linux")
        (host-key "ssh-rsa AAAAB3Nza@dots{}")
        (user "alice")
        (private-key
         (string-append (getenv "HOME")
                        "/.ssh/identity-for-guix"))))
@end lisp

@noindent
In the example above we specify a list of two build machines, one for the
@code{x86_64} architecture and one for the @code{aarch64} architecture.

De hecho, este fichero es---¡sin sorpresa ninguna!---un fichero Scheme que
se evalúa cuando el procedimiento de extensión @code{offload} se inicia. El
valor que devuelve debe ser una lista de objetos
@code{build-machine}. Mientras que este ejemplo muestra una lista fija de
máquinas de construcción, una puede imaginarse, digamos, el uso de DNS-SD
para devolver una lista de máquinas de construcción potenciales descubierta
en la red local (@pxref{Introducción, Guile-Avahi,, guile-avahi, Using Avahi
in Guile Scheme Programs}). El tipo de datos @code{build-machine} se detalla
a continuación.

@deftp {Tipo de datos} build-machine
Este tipo de datos representa las máquinas de construcción a las cuales el
daemon puede delegar construcciones. Los campos importantes son:

@table @code

@item name
El nombre de red de la máquina remota.

@item system
El sistema de la máquina remota---por ejemplo, @code{"x86_64-linux"}.

@item user
La cuenta de usuaria usada para la conexión a la máquina remota por
SSH. Tenga en cuenta que el par de claves SSH @emph{no} debe estar protegido
por contraseña, para permitir ingresos al sistema no interactivos.

@item host-key
Este campo debe contener la @dfn{clave pública de la máquina} de SSH en
formato OpenSSH. Es usado para autentificar la máquina cuando nos conectamos
a ella. Es una cadena larga más o menos así:

@example
ssh-ed25519 AAAAC3NzaC@dots{}mde+UhL recordatorio@@example.org
@end example

Si la máquina está ejecutando el daemon OpenSSH, @command{sshd}, la clave
pública de la máquina puede encontrarse en un fichero como
@file{/etc/ssh/ssh_host_ed25519_key.pub}.

Si la máquina está ejecutando el daemon SSH GNU@tie{}lsh, @command{lshd}, la
clave de la máquina está en @file{/etc/lsh/host-key.pub} o un fichero
similar. Puede convertirse a formato OpenSSH usando @command{lsh-export-key}
(@pxref{Converting keys,,, lsh, LSH Manual}):

@example
$ lsh-export-key --openssh < /etc/lsh/host-key.pub
ssh-rsa AAAAB3NzaC1yc2EAAAAEOp8FoQAAAQEAs1eB46LV@dots{}
@end example

@end table

Ciertos número de campos opcionales pueden ser especificados:

@table @asis

@item @code{port} (predeterminado: @code{22})
Número de puerto del servidor SSH en la máquina.

@item @code{private-key} (predeterminada: @file{~root/.ssh/id_rsa})
El fichero de clave privada SSH usado para conectarse a la máquina, en
formato OpenSSH. Esta clave no debe estar protegida con una contraseña.

Tenga en cuenta que el valor predeterminado es la clave privada @emph{de la
cuenta de root}. Asegúrese de que existe si usa el valor predeterminado.

@item @code{compression} (predeterminado: @code{"zlib@@openssh.com,zlib"})
@itemx @code{compression-level} (predeterminado: @code{3})
Los métodos de compresión y nivel de compresión a nivel SSH solicitados.

Tenga en cuenta que la delegación de carga depende de la compresión SSH para
reducir el ancho de banda usado cuando se transfieren ficheros hacia y desde
máquinas de construcción.

@item @code{daemon-socket} (predeterminado: @code{"/var/guix/daemon-socket/socket"})
Nombre de fichero del socket de dominio Unix en el que @command{guix-daemon}
escucha en esa máquina.

@item @code{parallel-builds} (predeterminadas: @code{1})
El número de construcciones que pueden ejecutarse en paralelo en la máquina.

@item @code{speed} (predeterminado: @code{1.0})
Un ``factor de velocidad relativa''. El planificador de delegaciones tenderá
a preferir máquinas con un factor de velocidad mayor.

@item @code{features} (predeterminadas: @code{'()})
Una lista de cadenas denotando las características específicas permitidas
por la máquina. Un ejemplo es @code{"kvm"} para máquinas que tienen los
módulos KVM de Linux y las correspondientes características hardware. Las
derivaciones pueden solicitar las características por nombre, y entonces se
planificarán en las máquinas adecuadas.

@end table
@end deftp

El ejecutable @code{guix} debe estar en la ruta de búsqueda de las máquinas
de construcción. Puede comprobar si es el caso ejecutando:

@example
ssh build-machine guix repl --version
@end example

Hay una última cosa por hacer una vez @file{machines.scm} está en su
lugar. Como se ha explicado anteriormente, cuando se delega, los ficheros se
transfieren en ambas direcciones entre los almacenes de las máquinas. Para
que esto funcione, primero debe generar un par de claves en cada máquina
para permitir al daemon exportar los archivos firmados de ficheros en el
almacén (@pxref{Invocación de guix archive}):

@example
# guix archive --generate-key
@end example

@noindent
Cada máquina de construcción debe autorizar a la clave de la máquina maestra
para que acepte elementos del almacén que reciba de la maestra:

@example
# guix archive --authorize < clave-publica-maestra.txt
@end example

@noindent
Del mismo podo, la máquina maestra debe autorizar la clave de cada máquina
de construcción.

Todo este lío con claves está ahí para expresar las mutuas relaciones de
confianza entre pares de la máquina maestra y las máquinas de
construcción. Concretamente, cuando la maestra recibe ficheros de una
máquina de construcción (y @i{vice versa}), su daemon de construcción puede
asegurarse de que son genuinos, no han sido modificados, y que están
firmados por una clave autorizada.

@cindex prueba de delegación
Para comprobar si su configuración es operacional, ejecute esta orden en el
nodo maestro:

@example
# guix offload test
@end example

Esto intentará conectar con cada una de las máquinas de construcción
especificadas en @file{/etc/guix/machines.scm}, comprobará que GUile y los
módulos Guix están disponibles en cada máquina, intentará exportar a la
máquina e importar de ella, e informará de cualquier error en el proceso.

Si quiere probar un fichero de máquinas diferente, simplemente lo debe
especificar en la línea de órdenes:

@example
# guix offload test otras-maquinas.scm
@end example

Por último, puede probar un subconjunto de máquinas cuyos nombres coincidan
con una expresión regular así:

@example
# guix offload test maquinas.scm '\.gnu\.org$'
@end example

@cindex estado de delegación
Para mostrar la carga actual de todas las máquinas de construcción, ejecute
esta orden en el nodo principal:

@example
# guix offload status
@end example


@node Soporte de SELinux
@subsection Soporte de SELinux

@cindex SELinux, política del daemon
@cindex control de acceso mandatorio, SELinux
@cindex seguridad, guix-daemon
Guix incluye un fichero de política SELinux en @file{etc/guix-daemon.cil}
que puede ser instalado en un sistema donde SELinux está activado, para
etiquetar los ficheros Guix y especificar el comportamiento esperado del
daemon. Ya que el sistema Guix no proporciona una política base de SELinux,
la política del daemon no puede usarse en el sistema Guix.

@subsubsection Instalación de la política de SELinux
@cindex SELinux, instalación de la política
Para instalar la política ejecute esta orden como root:

@example
semodule -i etc/guix-daemon.cil
@end example

Una vez hecho, vuelva a etiquetar el sistema de ficheros con
@code{restorecon} o con un mecanismo distinto que proporcione su sistema.

Una vez la política está instalada, el sistema de ficheros ha sido
re-etiquetado, y el daemon ha sido reiniciado, debería ejecutarse en el
contexto @code{guix_daemon_t}. Puede confirmarlo con la siguiente orden:

@example
ps -Zax | grep guix-daemon
@end example

Monitorice los ficheros de log de SELinux mientras ejecuta una orden como
@code{guix build hello} para convencerse que SELinux permite todas las
operaciones necesarias.

@subsubsection Limitaciones
@cindex SELinux, limitaciones

Esta política no es perfecta. Aquí está una lista de limitaciones o
comportamientos extraños que deben ser considerados al desplegar la política
SELinux provista para el daemon Guix.

@enumerate
@item
@code{guix_daemon_socket_t} no se usa realmente. Ninguna de las operaciones
del socket implica contextos que tengan algo que ver con
@code{guix_daemon_socket_t}. No hace daño tener esta etiqueta sin usar, pero
sería preferible definir reglas del socket únicamente para esta etiqueta.

@item
@code{guix gc} no puede acceder enlaces arbitrarios a los perfiles. Por
diseño, la etiqueta del fichero del destino de un enlace simbólico es
independiente de la etiqueta de fichero del fichero en sí. Aunque todos los
perfiles bajo $localstatedir se etiquetan, los enlaces para estos perfiles
heredan la etiqueta del directorio en el que están. Para enlaces en el
directorio de la usuaria esto será @code{user_home_t}. Pero para los enlaces
del directorio de root, o @file{/tmp}, o del directorio del servidor HTTP,
etc., esto no funcionará. @code{guix gc} se verá incapacitado para leer y
seguir dichos enlaces.

@item
La característica del daemon de esperar conexiones TCP puede que no funcione
más. Esto puede requerir reglas adicionales, ya que SELinux trata los
sockets de red de forma diferente a los ficheros.

@item
Actualmente todos los ficheros con un nombre coincidente con la expresión
regular @code{/gnu/store.+-(gux-.+|profile)/bin/guix-daemon} tienen asignada
la etiqueta @code{guix_daemon_exec_t}; esto significa que @emph{cualquier}
fichero con ese nombre en cualquier perfil tendrá permitida la ejecución en
el dominio @code{guix_daemon_t}. Esto no es ideal. Una atacante podría
construir un paquete que proporcione este ejecutable y convencer a la
usuaria para instalarlo y ejecutarlo, lo que lo eleva al dominio
@code{guix_daemon_t}. Llegadas a este punto, SELinux no puede prevenir que
acceda a los ficheros permitidos para los procesos en dicho dominio.

Podríamos generar una política mucho más restrictiva en tiempo de
instalación, de modo que solo el nombre @emph{exacto} del fichero del
ejecutable de @code{guix-daemon} actualmente instalado sea marcado como
@code{guix_daemon_exec_t}, en vez de usar una expresión regular amplia. La
desventaja es que root tendría que instalar o actualizar la política en
tiempo de instalación cada vez que se actualizase el paquete de Guix que
proporcione el ejecutable de @code{guix-daemon} realmente en ejecución.
@end enumerate

@node Invocación de guix-daemon
@section Invocación de @command{guix-daemon}

El programa @command{guix-daemon} implementa toda la funcionalidad para
acceder al almacén. Esto incluye iniciar procesos de construcción, ejecutar
el recolector de basura, comprobar la disponibilidad de un resultado de
construcción, etc. Normalmente se ejecuta como @code{root} así:

@example
# guix-daemon --build-users-group=guixbuild
@end example

@noindent
Para detalles obre como configurarlo, @pxref{Preparación del daemon}.

@cindex chroot
@cindex contenedor, entorno de construcción
@cindex entorno de construcción
@cindex construcciones reproducibles
By default, @command{guix-daemon} launches build processes under different
UIDs, taken from the build group specified with
@option{--build-users-group}.  In addition, each build process is run in a
chroot environment that only contains the subset of the store that the build
process depends on, as specified by its derivation (@pxref{Interfaz programática, derivation}), plus a set of specific system directories.  By
default, the latter contains @file{/dev} and @file{/dev/pts}.  Furthermore,
on GNU/Linux, the build environment is a @dfn{container}: in addition to
having its own file system tree, it has a separate mount name space, its own
PID name space, network name space, etc.  This helps achieve reproducible
builds (@pxref{Características}).

When the daemon performs a build on behalf of the user, it creates a build
directory under @file{/tmp} or under the directory specified by its
@env{TMPDIR} environment variable.  This directory is shared with the
container for the duration of the build, though within the container, the
build tree is always called @file{/tmp/guix-build-@var{name}.drv-0}.

El directorio de construcción se borra automáticamente una vez completado el
proceso, a menos que la construcción fallase y se especificase en el cliente
@option{--keep-failed} (@pxref{Invocación de guix build,
@option{--keep-failed}}).

The daemon listens for connections and spawns one sub-process for each
session started by a client (one of the @command{guix} sub-commands).  The
@command{guix processes} command allows you to get an overview of the
activity on your system by viewing each of the active sessions and clients.
@xref{Invocación de guix processes}, for more information.

Se aceptan las siguientes opciones de línea de ordenes:

@table @code
@item --build-users-group=@var{grupo}
Toma las usuarias de @var{grupo} para ejecutar los procesos de construcción
(@pxref{Preparación del daemon, build users}).

@item --no-substitutes
@cindex sustituciones
No usa sustituciones para la construcción de productos. Esto es, siempre
realiza las construcciones localmente en vez de permitir la descarga de
binarios pre-construidos (@pxref{Sustituciones}).

When the daemon runs with @option{--no-substitutes}, clients can still
explicitly enable substitution @i{via} the @code{set-build-options} remote
procedure call (@pxref{El almacén}).

@item --substitute-urls=@var{urls}
@anchor{daemon-substitute-urls}
Considera @var{urls} la lista separada por espacios predeterminada de URLs
de sustituciones de fuentes. Cuando se omite esta opción, se usa
@indicateurl{https://@value{SUBSTITUTE-SERVER}}.

Esto significa que las sustituciones puede ser descargadas de @var{urls},
mientras estén firmadas por una firma de confianza (@pxref{Sustituciones}).

@cindex delegando trabajo
@item --no-offload
No usa la delegación de construcciones en otras máquinas (@pxref{Configuración de delegación del daemon}). Es decir, siempre realiza las construcciones de manera
local en vez de delegar construcciones a máquinas remotas.

@item --cache-failures
Almacena en la caché los fallos de construcción. Por defecto, únicamente las
construcciones satisfactorias son almacenadas en la caché.

Cuando se usa esta opción, @command{guix gc --list-failures} puede usarse
para consultar el conjunto de elementos del almacén marcados como fallidos;
@command{guix gc --clear-failures} borra los elementos del almacén del
conjunto de fallos existentes en la caché. @xref{Invocación de guix gc}.

@item --cores=@var{n}
@itemx -c @var{n}
Usa @var{n} núcleos de la CPU para construir cada derivación; @code{0}
significa tantos como haya disponibles.

The default value is @code{0}, but it may be overridden by clients, such as
the @option{--cores} option of @command{guix build} (@pxref{Invocación de guix build}).

The effect is to define the @env{NIX_BUILD_CORES} environment variable in
the build process, which can then use it to exploit internal
parallelism---for instance, by running @code{make -j$NIX_BUILD_CORES}.

@item --max-jobs=@var{n}
@itemx -M @var{n}
Permite como máximo @var{n} trabajos de construcción en paralelo. El valor
predeterminado es @code{1}. Fijarlo a @code{0} significa que ninguna
construcción se realizará localmente; en vez de eso, el daemon delegará las
construcciones (@pxref{Configuración de delegación del daemon}), o simplemente fallará.

@item --max-silent-time=@var{segundos}
Cuando la construcción o sustitución permanece en silencio más de
@var{segundos}, la finaliza e informa de un fallo de construcción.

El valor predeterminado es @code{0}, que desactiva los plazos.

The value specified here can be overridden by clients (@pxref{Opciones comunes de construcción, @option{--max-silent-time}}).

@item --timeout=@var{segundos}
Del mismo modo, cuando el proceso de construcción o sustitución dura más de
@var{segundos}, lo termina e informa un fallo de construcción.

El valor predeterminado es @code{0}, que desactiva los plazos.

The value specified here can be overridden by clients (@pxref{Opciones comunes de construcción, @option{--timeout}}).

@item --rounds=@var{N}
Construye cada derivación @var{n} veces seguidas, y lanza un error si los
resultados de las construcciones consecutivas no son idénticos
bit-a-bit. Fíjese que esta configuración puede ser sobreescrita por clientes
como @command{guix build} (@pxref{Invocación de guix build}).

Cuando se usa conjuntamente con @option{--keep-failed}, la salida que
difiere se mantiene en el almacén, bajo
@file{/gnu/store/@dots{}-check}. Esto hace fácil buscar diferencias entre
los dos resultados.

@item --debug
Produce salida de depuración.

This is useful to debug daemon start-up issues, but then it may be
overridden by clients, for example the @option{--verbosity} option of
@command{guix build} (@pxref{Invocación de guix build}).

@item --chroot-directory=@var{dir}
Añade @var{dir} al chroot de construcción.

Hacer esto puede cambiar el resultado del proceso de construcción---por
ejemplo si usa dependencias opcionales, que se encuentren en @var{dir},
cuando están disponibles, y no de otra forma. Por esa razón, no se
recomienda hacerlo. En vez de eso, asegúrese que cada derivación declara
todas las entradas que necesita.

@item --disable-chroot
Desactiva la construcción en un entorno chroot.

No se recomienda el uso de esta opción ya que, de nuevo, podría permitir a
los procesos de construcción ganar acceso a dependencias no declaradas. Es
necesario, no obstante, cuando @command{guix-daemon} se ejecuta bajo una
cuenta de usuaria sin privilegios.

@item --log-compression=@var{tipo}
Comprime los logs de construcción de acuerdo a @var{tipo}, que puede ser
@code{gzip}, @code{bzip2} o @code{none}.

Unless @option{--lose-logs} is used, all the build logs are kept in the
@var{localstatedir}.  To save space, the daemon automatically compresses
them with Bzip2 by default.

@item --disable-deduplication
@cindex deduplicación
Desactiva la ``deduplicación'' automática en el almacén.

Por defecto, los ficheros se añaden al almacén ``deduplicados''
automáticamente: si un nuevo fichero añadido es idéntico a otro que ya se
encuentra en el almacén, el daemon introduce el nuevo fichero como un enlace
duro al otro fichero. Esto puede reducir notablemente el uso del disco, a
expensas de una carga de entrada/salida ligeramente incrementada al
finalizar un proceso de construcción. Esta opción desactiva dicha
optimización.

@item --gc-keep-outputs[=yes|no]
Determina si el recolector de basura (GC) debe mantener salidas de las
derivaciones vivas.

@cindex GC, raíces del recolector de basura
@cindex raíces del recolector de basura
When set to @code{yes}, the GC will keep the outputs of any live derivation
available in the store---the @file{.drv} files.  The default is @code{no},
meaning that derivation outputs are kept only if they are reachable from a
GC root.  @xref{Invocación de guix gc}, for more on GC roots.

@item --gc-keep-derivations[=yes|no]
Determina si el recolector de basura (GC) debe mantener derivaciones
correspondientes a salidas vivas.

When set to @code{yes}, as is the case by default, the GC keeps
derivations---i.e., @file{.drv} files---as long as at least one of their
outputs is live.  This allows users to keep track of the origins of items in
their store.  Setting it to @code{no} saves a bit of disk space.

In this way, setting @option{--gc-keep-derivations} to @code{yes} causes
liveness to flow from outputs to derivations, and setting
@option{--gc-keep-outputs} to @code{yes} causes liveness to flow from
derivations to outputs.  When both are set to @code{yes}, the effect is to
keep all the build prerequisites (the sources, compiler, libraries, and
other build-time tools) of live objects in the store, regardless of whether
these prerequisites are reachable from a GC root.  This is convenient for
developers since it saves rebuilds or downloads.

@item --impersonate-linux-2.6
On Linux-based systems, impersonate Linux 2.6.  This means that the kernel's
@command{uname} system call will report 2.6 as the release number.

Esto puede ser útil para construir programas que (habitualmente de forma
incorrecta) dependen en el número de versión del núcleo.

@item --lose-logs
Do not keep build logs.  By default they are kept under
@file{@var{localstatedir}/guix/log}.

@item --system=@var{sistema}
Asume @var{sistema} como el tipo actual de sistema. Por defecto es el par de
arquitectura/núcleo encontrado durante la configuración, como
@code{x86_64-linux}.

@item --listen=@var{destino}
Espera conexiones en @var{destino}. @var{destino} se interpreta como el
nombre del fichero del socket de dominio Unix si comienza on @code{/} (barra
a la derecha). En otro caso, @var{destino} se interpreta como un nombre de
máquina o un nombre de máquina y puerto a escuchar. Aquí van unos pocos
ejemplos:

@table @code
@item --listen=/gnu/var/daemon
Espera conexiones en el socket de dominio Unix @file{/gnu/var/daemon}, se
crea si es necesario.

@item --listen=localhost
@cindex daemon, acceso remoto
@cindex acceso remoto al daemon
@cindex daemon, configuración en cluster
@cindex daemon, configuración en cluster
Espera conexiones TCP en la interfaz de red correspondiente a
@code{localhost}, en el puerto 44146.

@item --listen=128.0.0.42:1234
Espera conexiones TCP en la interfaz de red correspondiente a
@code{128.0.0.42}, en el puerto 1234.
@end table

This option can be repeated multiple times, in which case
@command{guix-daemon} accepts connections on all the specified endpoints.
Users can tell client commands what endpoint to connect to by setting the
@env{GUIX_DAEMON_SOCKET} environment variable (@pxref{El almacén,
@env{GUIX_DAEMON_SOCKET}}).

@quotation Nota
The daemon protocol is @emph{unauthenticated and unencrypted}.  Using
@option{--listen=@var{host}} is suitable on local networks, such as
clusters, where only trusted nodes may connect to the build daemon.  In
other cases where remote access to the daemon is needed, we recommend using
Unix-domain sockets along with SSH.
@end quotation

When @option{--listen} is omitted, @command{guix-daemon} listens for
connections on the Unix-domain socket located at
@file{@var{localstatedir}/guix/daemon-socket/socket}.
@end table


@node Configuración de la aplicación
@section Configuración de la aplicación

@cindex distribución distinta
Cuando se usa Guix sobre una distribución GNU/Linux distinta al sistema
Guix---una @dfn{distribución distinta}---unos pocos pasos adicionales son
necesarios para tener todo preparado. Aquí están algunos de ellos.

@subsection Localizaciones

@anchor{locales-and-locpath}
@cindex localizaciones, cuando no se está en el sistema Guix
@vindex LOCPATH
@vindex GUIX_LOCPATH
Packages installed @i{via} Guix will not use the locale data of the host
system.  Instead, you must first install one of the locale packages
available with Guix and then define the @env{GUIX_LOCPATH} environment
variable:

@example
$ guix install glibc-locales
$ export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale
@end example

Fíjese que el paquete @code{glibc-locales} contiene datos para todas las
localizaciones que ofrece GNU@tie{}libc y pesa alrededor de 917@tie{}MiB. De
manera alternativa, @code{glibc-utf8-locales} tiene menor tamaño pero está
limitado a localizaciones UTF-8.

The @env{GUIX_LOCPATH} variable plays a role similar to @env{LOCPATH}
(@pxref{Locale Names, @env{LOCPATH},, libc, The GNU C Library Reference
Manual}).  There are two important differences though:

@enumerate
@item
@env{GUIX_LOCPATH} is honored only by the libc in Guix, and not by the libc
provided by foreign distros.  Thus, using @env{GUIX_LOCPATH} allows you to
make sure the programs of the foreign distro will not end up loading
incompatible locale data.

@item
libc suffixes each entry of @env{GUIX_LOCPATH} with @code{/X.Y}, where
@code{X.Y} is the libc version---e.g., @code{2.22}.  This means that, should
your Guix profile contain a mixture of programs linked against different
libc version, each libc version will only try to load locale data in the
right format.
@end enumerate

Esto es importante porque el formato de datos de localización usado por
diferentes versiones de libc puede ser incompatible.

@subsection Selector de servicios de nombres

@cindex selector de servicios de nombres, glibc
@cindex NSS (selector de servicios de nombres), glibc
@cindex ncsd (daemon de caché del servicio de nombres)
@cindex daemon de caché del servicio de nombres (ncsd)
Cuando se usa Guix en una distribución distinta, @emph{recomendamos
encarecidamente} que el sistema ejecute el @dfn{daemon de caché del servicio
de nombres} de la biblioteca de C de GNU, @command{ncsd}, que debe escuchar
en el socket @file{/var/run/nscd/socket}. En caso de no hacerlo, las
aplicaciones instaladas con Guix pueden fallar al buscar nombres de máquinas
o cuentas de usuaria, o incluso pueden terminar abruptamente. Los siguientes
párrafos explican por qué.

@cindex @file{nsswitch.conf}
La biblioteca de C de GNU implementa un @dfn{selector de servicios de
nombres} (NSS), que es un mecanismo extensible para ``búsquedas de nombres''
en general: resolución de nombres de máquinas, cuentas de usuaria y más
(@pxref{Selector de servicios de nombres,,, libc, The GNU C Library Reference Manual}).

@cindex Servicio de información de red (NIS)
@cindex NIS (servicio de información de red)
Al ser extensible, NSS permite el uso de @dfn{módulos}, los cuales
proporcionan nuevas implementaciones de búsqueda de nombres: por ejemplo, el
módulo @code{nss-mdns} permite la resolución de nombres de máquina
@code{.local}, el módulo @code{nis} permite la búsqueda de cuentas de
usuaria usando el servicio de información de red (NIS), etc. Estos
``servicios de búsqueda'' extra se configuran para todo el sistema en
@file{/etc/nsswitch.conf}, y todos los programas en ejecución respetan esta
configuración (@pxref{NSS Configuration File,,, libc, The GNU C Reference
Manual}).

Cuando se realiza una búsqueda de nombres---por ejemplo, llamando a la
función @code{getaddrinfo} en C---las aplicaciones primero intentarán
conectar con nscd; en caso satisfactorio, nscd realiza la búsqueda de
nombres en delegación suya. Si nscd no está ejecutándose, entonces realizan
la búsqueda por ellas mismas, cargando los servicios de búsqueda de nombres
en su propio espacio de direcciones y ejecutándola. Estos servicios de
búsqueda de nombres---los ficheros @file{libnss_*.so}---son abiertos con
@code{dlopen}, pero pueden venir de la biblioteca de C del sistema, en vez
de la biblioteca de C contra la que la aplicación está enlazada (la
biblioteca de C que viene en Guix).

Y aquí es donde está el problema: si su aplicación está enlazada contra la
biblioteca de C de Guix (digamos, glibc 2.24) e intenta cargar módulos de
otra biblioteca de C (digamos, @code{libnss_mdns.so} para glibc 2.22),
probablemente terminará abruptamente o sus búsquedas de nombres fallarán
inesperadamente. 

Ejecutar @command{nscd} en el sistema, entre otras ventajas, elimina este
problema de incompatibilidad binaria porque esos ficheros @code{libnss_*.so}
se cargan en el proceso @command{nscd}, no en la aplicación misma.

@subsection Tipografías X11

@cindex tipografías
The majority of graphical applications use Fontconfig to locate and load
fonts and perform X11-client-side rendering.  The @code{fontconfig} package
in Guix looks for fonts in @file{$HOME/.guix-profile} by default.  Thus, to
allow graphical applications installed with Guix to display fonts, you have
to install fonts with Guix as well.  Essential font packages include
@code{gs-fonts}, @code{font-dejavu}, and @code{font-gnu-freefont}.

@cindex @code{fc-cache}
@cindex caché de tipografías
Una vez que haya instalado o borrado tipografías, o cuando se de cuenta de
que una aplicación no encuentra las tipografías, puede que necesite instalar
Fontconfig y forzar una actualización de su caché de tipografías ejecutando:

@example
guix install fontconfig
fc-cache -rv
@end example

Para mostrar texto escrito en lenguas chinas, Japonés o Coreano en
aplicaciones gráficas, considere instalar @code{font-adobe-source-han-sans}
o @code{font-wqy-zenhei}. La anterior tiene múltiples salidas, una por
familia de lengua (@pxref{Paquetes con múltiples salidas}). Por ejemplo, la
siguiente orden instala tipografías para lenguas chinas:

@example
guix install font-adobe-source-han-sans:cn
@end example

@cindex @code{xterm}
Programas más antiguos como @command{xterm} no usan Fontconfig sino que
dependen en el lado del servidor para realizar el renderizado de
tipografías. Dichos programas requieren especificar un nombre completo de
tipografía usando XLFD (Descripción lógica de tipografías X), como esta:

@example
-*-dejavu sans-medium-r-normal-*-*-100-*-*-*-*-*-1
@end example

Para ser capaz de usar estos nombres completos para las tipografías TrueType
instaladas en su perfil Guix, necesita extender la ruta de fuentes del
servidor X:

@c Note: 'xset' does not accept symlinks so the trick below arranges to
@c get at the real directory.  See <https://bugs.gnu.org/30655>.
@example
xset +fp $(dirname $(readlink -f ~/.guix-profile/share/fonts/truetype/fonts.dir))
@end example

@cindex @code{xlsfonts}
Después de eso, puede ejecutar @code{xlsfonts} (del paquete @code{xlsfonts})
para asegurarse que sus tipografías TrueType se enumeran aquí.


@subsection Certificados X.509

@cindex @code{nss-certs}
El paquete @code{nss-certs} proporciona certificados X.509, que permiten a
los programas verificar los servidores accedidos por HTTPS.

Cuando se usa Guix en una distribución distinta, puede instalar este paquete
y definir las variables de entorno relevantes de modo que los paquetes sepan
dónde buscar los certificados. @xref{Certificados X.509}, para información
detallada.

@subsection Paquetes Emacs

@cindex @code{emacs}
When you install Emacs packages with Guix, the Elisp files are placed under
the @file{share/emacs/site-lisp/} directory of the profile in which they are
installed.  The Elisp libraries are made available to Emacs through the
@env{EMACSLOADPATH} environment variable, which is set when installing Emacs
itself.

Additionally, autoload definitions are automatically evaluated at the
initialization of Emacs, by the Guix-specific
@code{guix-emacs-autoload-packages} procedure.  If, for some reason, you
want to avoid auto-loading the Emacs packages installed with Guix, you can
do so by running Emacs with the @option{--no-site-file} option (@pxref{Init
File,,, emacs, The GNU Emacs Manual}).


@node Actualizar Guix
@section Actualizar Guix

@cindex Actualizar Guix, en una distribución distinta

Para actualizar Guix ejecute:

@example
guix pull
@end example

@xref{Invocación de guix pull}, para más información.

@cindex actualizar Guix para la usuaria root, en una distribución distinta
@cindex actualización del daemon de Guix, en una distribución distinta
@cindex @command{guix pull} para la usuaria root, en una distribución distinta

En una distribución distinta puede actualizar el daemon de construcción
ejecutando:

@example
sudo -i guix pull
@end example

@noindent
seguido de (asumiendo que su distribución usa la herramienta de gestión de
servicios systemd):

@example
systemctl restart guix-daemon.service
@end example

En el Sistema Guix, la actualización del daemon se lleva a cabo con la
reconfiguración el sistema (@pxref{Invocación de guix system, @code{guix system
reconfigure}}).

@c TODO What else?

@c *********************************************************************
@node Instalación del sistema
@chapter Instalación del sistema

@cindex instalación del sistema Guix
@cindex sistema Guix, instalación
Esta sección explica cómo instalar el sistema Guix en una máquina. Guix,
como gestor de paquetes, puede instalarse sobre un sistema GNU/Linux en
ejecución, @pxref{Instalación}.

@ifinfo
@quotation Nota
@c This paragraph is for people reading this from tty2 of the
@c installation image.
Está leyendo esta documentación con un lector Info. Para obtener detalles
sobre su uso, presione la tecla @key{RET} (``retorno de carro'' o ``intro'')
en el siguiente enlace: @pxref{Top, Info reader,, info-stnd, Stand-alone GNU
Info}. Presione después @kbd{l} para volver aquí.

Alternatively, run @command{info info} in another tty to keep the manual
available.
@end quotation
@end ifinfo

@menu
* Limitaciones::             Qué puede esperar.
* Consideraciones sobre el hardware::  Hardware soportado.
* Instalación desde memoria USB y DVD::  Preparar el medio de instalación.
* Preparación para la instalación::  Red, particionado, etc.
* Instalación gráfica guiada::  Instalación gráfica fácil.
* Instalación manual::      Instalación manual para artistas del teclado.
* Tras la instalación del sistema::  Cuando la instalación ha finalizado 
                                        satisfactoriamente.
* Instalación de Guix en una máquina virtual::  El patio de recreo del 
                                                    sistema Guix.
* Construcción de la imagen de instalación::  Cómo esto llega a ser.
@end menu

@node Limitaciones
@section Limitaciones

Consideramos que el sistema Guix está listo para un amplio rango de casos de
uso, tanto de servidor como de escritorio. Las garantías que
proporciona---actualizaciones transaccionales y vuelta atrás atómica,
reproducibilidad---lo convierten en un cimiento sólido.

No obstante, antes de que proceda con la instalación, sea consciente de las
siguientes limitaciones apreciables que se conocen en la versión
@value{VERSION}:

@itemize
@item
No está implementada la funcionalidad del gestor de volúmenes lógicos (LVM).

@item
Se proporcionan más y más servicios del sistema (@pxref{Servicios}), pero
pueden faltar algunos.

@item
Están disponibles GNOME, Xfce, LXDE y Enlightenment (@pxref{Servicios de escritorio}), así como un número de gestores de ventanas X11. No obstante,
actualmente falta KDE.
@end itemize

Más que una descarga de responsabilidades es una invitación a informar de
problemas (¡e historias satisfactorias!), y para unirse a nosotras en su
mejora. @xref{Contribuir}, para más información.


@node Consideraciones sobre el hardware
@section Consideraciones sobre el hardware

@cindex soporte de hardware en el sistema Guix
GNU@tie{}Guix se enfoca en respetar la libertad de computación de las
usuarias. Se construye sobre el núcleo Linux-libre, lo que significa que
únicamente funciona hardware para el que existen controladores y firmware
libres. Hoy en día, un amplio rango del hardware común funciona con
GNU/Linux-libre---desde teclados a tarjetas gráficas a escáneres y
controladoras Ethernet. Desafortunadamente, todavía hay áreas donde los
fabricantes de hardware deniegan a las usuarias el control de su propia
computación, y dicho hardware no funciona en el sistema Guix.

@cindex WiFi, soporte hardware
Una de las áreas principales donde faltan controladores o firmware libre son
los dispositivos WiFi. Los dispositivos WiFi que se sabe que funcionan
incluyen aquellos que usan los chips Atheros (AR9271 y AR7010), que
corresponden al controlador @code{ath9k} de Linux-libre, y aquellos que usan
los chips Broadcom/AirForce (BCM43xx con Wireless-Core Revisión 5), que
corresponden al controlador @code{b43-open} de Linux-libre. Existe firmware
libre para ambos, y está disponible por defecto en el sistema Guix, como
parte de @code{%base-firmware} (@pxref{Referencia de operating-system,
@code{firmware}}).

@cindex RYF, Respeta Su Libertad
La @uref{https://www.fsf.org/, Fundación del Software Libre} patrocina
@uref{https://www.fsf.org/ryf, @dfn{Respeta Su Libertad}} (RYF), un programa
de certificación para productos hardware que respetan su libertad y su
privacidad y se aseguran de que usted tenga el control sobre su
dispositivo. Le recomendamos que compruebe la lista de dispositivos
certificados RYF.

Otro recurso útil es el sitio web @uref{https://wwww.h-node.org/,
H-Node}. Contiene un catálogo de dispositivos hardware con información
acerca su funcionalidad con GNU/Linux.


@node Instalación desde memoria USB y DVD
@section Instalación desde memoria USB y DVD

An ISO-9660 installation image that can be written to a USB stick or burnt
to a DVD can be downloaded from
@indicateurl{@value{BASE-URL}/guix-system-install-@value{VERSION}.x86_64-linux.iso.xz},
where you can replace @code{x86_64-linux} with one of:

@table @code
@item x86_64-linux
para un sistema GNU/Linux en CPUs compatibles con la arquitectura de 64-bits
de Intel/AMD;

@item i686-linux
para un sistema GNU/Linux en CPUs compatibles con la arquitectura de 32-bits
de Intel.
@end table

@c start duplication of authentication part from ``Binary Installation''
Asegúrese de descargar el fichero @file{.sig} asociado y de verificar la
autenticidad de la imagen contra él, más o menos así:

@example
$ wget @value{BASE-URL}/guix-system-install-@value{VERSION}.x86_64-linux.iso.xz.sig
$ gpg --verify guix-system-install-@value{VERSION}.x86_64-linux.iso.xz.sig
@end example

Si la orden falla porque no dispone de la clave pública necesaria, entonces
ejecute esta otra orden para importarla:

@example
$ wget @value{OPENPGP-SIGNING-KEY-URL} \
      -qO - | gpg --import -
@end example

@noindent
y vuelva a ejecutar la orden @code{gpg --verify}.

Tenga en cuenta que un aviso del tipo ``Esta clave no esta certificada con
una firma de confianza'' es normal.

@c end duplication

Esta imagen contiene las herramientas necesarias para una instalación. Está
pensada ara ser copiada @emph{tal cual} a una memoria USB o DVD con espacio
suficiente.

@unnumberedsubsec Copiado en una memoria USB

Para copiar la imagen en una memoria USB, siga estos pasos:

@enumerate
@item
Descomprima la imagen usando la orden @command{xz}:

@example
xz -d guix-system-install-@value{VERSION}.x86_64-linux.iso.xz
@end example

@item
Conecte una memoria USB de 1@tie{}GiB o más a su máquina, y determine su
nombre de dispositivo. Asumiendo que la memoria USB es @file{/dev/sdX} copie
la imagen con:

@example
dd if=guix-system-install-@value{VERSION}.x86_64-linux.iso of=/dev/sdX
sync
@end example

El acceso a @file{/dev/sdX} normalmente necesita privilegios de root.
@end enumerate

@unnumberedsubsec Grabación en un DVD

Para copiar la imagen a un DVD, siga estos pasos:

@enumerate
@item
Descomprima la imagen usando la orden @command{xz}:

@example
xz -d guix-system-install-@value{VERSION}.x86_64-linux.iso.xz
@end example

@item
Introduzca un DVD en su máquina para grabarlo, y determine el nombre del
dispositivo. Asumiendo que la unidad DVD es @file{/dev/srX}, copie la imagen
con:

@example
growisofs -dvd-compat -Z /dev/srX=guix-system-install-@value{VERSION}.x86_64-linux.iso
@end example

El acceso a @file{/dev/srX} normalmente necesita privilegios de root.
@end enumerate

@unnumberedsubsec Arranque

Una vez hecho esto, debe ser capaz de reiniciar el sistema y arrancar desde
la memoria USB o el DVD. Para lo primero habitualmente es necesario
introducirse en la BIOS o en el menú de arranque UEFI, donde se puede
seleccionar el arranque desde la memoria USB. Para arrancar desde Libreboot,
cambie a la línea de ordenes pulsando la tecla @kbd{c} y teclee
@command{search_grub usb}.

@xref{Instalación de Guix en una máquina virtual}, si, en vez de esto, desea instalar el
sistema Guix en una máquina virtual (VM).


@node Preparación para la instalación
@section Preparación para la instalación

Once you have booted, you can use the guided graphical installer, which
makes it easy to get started (@pxref{Instalación gráfica guiada}).
Alternatively, if you are already familiar with GNU/Linux and if you want
more control than what the graphical installer provides, you can choose the
``manual'' installation process (@pxref{Instalación manual}).

El instalador gráfico está disponible en TTY1. Puede obtener consolas de
root en los TTY 3 a 6 pulsando @kbd{ctrl-alt-f3}, @kbd{ctrl-alt-f4},
etc. TTY2 muestra esta documentación y se puede cambiar a dicha consola con
@kbd{ctrl-alt-f2}. La documentación es explorable usando las órdenes del
lector Info (@pxref{Top,,, info-stnd, Stand-alone GNU Info}). El sistema de
instalación ejecuta el daemon GPM para ratones, el cual le permite
seleccionar texto con el botón izquierdo y pegarlo con el botón central.

@quotation Nota
La instalación requiere acceso a Internet de modo que cualquier dependencia
de su configuración de sistema no encontrada pueda ser descargada. Véase la
sección ``Red'' más adelante.
@end quotation

@node Instalación gráfica guiada
@section Instalación gráfica guiada

El instalador gráfico es una interfaz de usuaria basada en texto. Le guiará,
con cajas de diálogo, a través de los pasos necesarios para instalar el
sistema GNU@tie{}Guix.

Las primeras cajas de diálogo le permiten configurar el sistema mientras lo
usa durante la instalación: puede seleccionar el idioma, la distribución del
teclado y configurar la red, la cual se usará durante la instalación. La
siguiente imagen muestra el diálogo de configuración de red.

@image{images/installer-network,5in,, configuración de red en la instalación
gráfica}

Los siguientes pasos le permitirán particionar su disco duro, como se
muestra en la siguiente imagen, elegir si se usarán o no sistemas de
ficheros cifrados, introducir el nombre de la máquina, la contraseña de root
y crear cuentas adicionales, entre otras cosas.

@image{images/installer-partitions,5in,, particionado en la instalación
gráfica}

Tenga en cuenta que, en cualquier momento, el instalador le permite salir de
la instalación actual y retomarla en un paso previo, como se muestra en la
siguiente imagen.

@image{images/installer-resume,5in,, retomado del proceso de instalación}

Una vez haya finalizado, el instalador produce una configuración de sistema
operativo y la muestra (@pxref{Uso de la configuración del sistema}). En este
punto puede pulsar ``OK'' y la instalación procederá. En caso de
finalización satisfactoria, puede reiniciar con el nuevo sistema y
disfrutarlo. ¡@xref{Tras la instalación del sistema} para ver cómo proceder a
continuación!


@node Instalación manual
@section Instalación manual

Esta sección describe como podría instalar ``manualmente'' el sistema
GNU@tie{}Guix en su máquina. Esta opción requiere familiaridad con
GNU/Linux, con el shell y con las herramientas de administración comunes. Si
piensa que no es para usted, considere el uso del instalador gráfico guiado
(@pxref{Instalación gráfica guiada}).

El sistema de instalación proporciona consolas de root en los terminales
virtuales (TTY) 3 a 6; pulse @kbd{ctrl-alt-f3}, @kbd{ctrl-alt-f4} y
sucesivas teclas para abrirlas. Incluye muchas herramientas comunes
necesarias para la instalación del sistema. Pero es también un sistema Guix
completo, lo que significa que puede instalar paquetes adicionales, en caso
de necesitarlos, mediante el uso de @command{guix package} (@pxref{Invocación de guix package}).

@menu
* Distribución de teclado y red y particionado::  Configuración inicial.
* Procedimiento de instalación::  Instalación.
@end menu

@node Distribución de teclado y red y particionado
@subsection Distribución de teclado, red y particionado

Antes de instalar el sistema, puede desear ajustar la distribución del
teclado, configurar la red y particionar el disco duro deseado. Esta sección
le guiará durante este proceso.

@subsubsection Distribución de teclado

@cindex distribución de teclado
La imagen de instalación usa la distribución de teclado QWERTY de los
EEUU. Si desea cambiarla, puede usar la orden @command{loadkeys}. Por
ejemplo, la siguiente orden selecciona la distribución de teclado para el
castellano:

@example
loadkeys es
@end example

Véanse los ficheros bajo @file{/run/current-system/profile/share/keymaps}
para la obtención de una lista de distribuciones de teclado
disponibles. Ejecute @command{man loadkeys} para más información.

@subsubsection Red

Ejecute la siguiente orden para ver los nombres asignados a sus interfaces
de red:

@example
ifconfig -a
@end example

@noindent
@dots{} o, usando la orden específica de GNU/Linux @command{ip}:

@example
ip address
@end example

@c https://cgit.freedesktop.org/systemd/systemd/tree/src/udev/udev-builtin-net_id.c#n20
El nombre de las interfaces de cable comienza con @samp{e}; por ejemplo, la
interfaz que corresponde a la primera controladora Ethernet en la placa se
llama @samp{eno1}. El nombre de las interfaces inalámbricas comienza con
@samp{w}, como @samp{w1p2s0}.

@table @asis
@item Conexión por cable
Para configurar una red por cable ejecute la siguiente orden, substituyendo
@var{interfaz} con el nombre de la interfaz de cable que desea usar.

@example
ifconfig @var{interfaz} up
@end example

@noindent
@dots{} o, usando la orden específica de GNU/Linux @command{ip}:

@example
ip link set @var{interfaz} up
@end example

@item Conexión sin cable
@cindex sin cables
@cindex WiFi
Para configurar una red inalámbrica, puede crear un fichero de configuración
para la herramienta de configuración @command{wpa_supplicant} (su ruta no es
importante) usando uno de los editores de texto disponibles como
@command{nano}:

@example
nano wpa_supplicant.conf
@end example

Como un ejemplo, la siguiente plantilla puede colocarse en este fichero y
funcionará para muchas redes inalámbricas, siempre que se proporcione el
SSID y la contraseña reales de la red a la que se va a conectar:

@example
network=@{
  ssid="@var{mi-ssid}"
  key_mgmt=WPA-PSK
  psk="la contraseña de la red"
@}
@end example

Inicie el servicio inalámbrico y lance su ejecución en segundo plano con la
siguiente orden (sustituya @var{interfaz} por el nombre de la interfaz de
red que desea usar):

@example
wpa_supplicant -c wpa_supplicant.conf -i @var{interfaz} -B
@end example

Ejecute @command{man wpa_supplicant} para más información.
@end table

@cindex DHCP
En este punto, necesita obtener una dirección IP. En una red donde las
direcciones IP se asignan automáticamente mediante DHCP, puede ejecutar:

@example
dhclient -v @var{interfaz}
@end example

Intente hacer ping a un servidor para comprobar si la red está funcionando
correctamente:

@example
ping -c 3 gnu.org
@end example

Configurar el acceso por red es casi siempre un requisito debido a que la
imagen no contiene todo el software y las herramientas que puedan ser
necesarias.

@cindex proxy, durante la instalación del sistema
Si necesita que el acceso a HTTP y HTTPS se produzca a través de un proxy,
ejecute la siguiente orden:

@example
herd set-http-proxy guix-daemon @var{URL}
@end example

@noindent
donde @var{URL} es la URL del proxy, por ejemplo
@code{http://example.org:8118}.

@cindex instalación por SSH
Si lo desea, puede continuar la instalación de forma remota iniciando un
servidor SSH:

@example
herd start ssh-daemon
@end example

Asegúrese de fijar una contraseña con @command{passwd}, o configurar la
verificación de clave pública de OpenSSH para la introducción en el sistema.

@subsubsection Particionado de discos

A menos que se haya realizado previamente, el siguiente paso es el
particionado, y después dar formato a la/s partición/es deseadas.

La imagen de instalación contiene varias herramientas de particionado,
incluyendo Parted (@pxref{Overview,,, parted, GNU Parted User Manual}),
@command{fdisk} y @command{cfdisk}. Invoque su ejecución y configure el mapa
de particiones deseado en su disco:

@example
cfdisk
@end example

Si su disco usa el formato de tabla de particiones GUID (GPT) y tiene
pensado instalar GRUB basado en BIOS (la opción predeterminada), asegúrese
de tener una partición de arranque BIOS disponible (@pxref{BIOS
installation,,, grub, GNU GRUB manual}).

@cindex EFI, instalación
@cindex UEFI, instalación
@cindex ESP, partición del sistema EFI
Si en vez de eso desea GRUB basado en EFI, se requiere una @dfn{Partición
del Sistema EFI} (ESP) con formato FAT32. Esta partición puede montarse en
@file{/boot/efi} y debe tener la opción @code{esp} activa. Por ejemplo, en
@command{parted}:

@example
parted /dev/sda set 1 esp on
@end example

@quotation Nota
@vindex grub-bootloader
@vindex grub-efi-bootloader
¿No esta segura si usar GRUB basado en EFI o en BIOS? Si el directorio
@file{/sys/firmware/efi} existe en la imagen de instalación, probablemente
debería realizar una instalación EFI, usando @code{grub-efi-bootloader}. En
otro caso, debe usar GRUB basado en BIOS, conocido como
@code{grub-bootloader}. @xref{Configuración del gestor de arranque}, para más
información sobre cargadores de arranque.
@end quotation

Una vez haya terminado con el particionado de la unidad de disco deseada,
tiene que crear un sistema de ficheros en la o las particiones
relevantes@footnote{Actualmente el sistema Guix únicamente permite sistemas
de ficheros ext4, btrfs y JFS. En particular, el código que lee UUIDs del
sistema de ficheros y etiquetas únicamente funciona para dichos sistemas de
ficheros.}. Para la partición ESP, si tiene una y asumiendo que es
@file{/dev/sda1}, ejecute:

@example
mkfs.fat -F32 /dev/sda1
@end example

Preferentemente, asigne una etiqueta a los sistemas de ficheros de modo que
pueda referirse a ellos de forma fácil y precisa en las declaraciones
@code{file-system} (@pxref{Sistemas de ficheros}). Esto se consigue habitualmente
con la opción @code{-L} de @command{mkfs.ext4} y las ordenes
relacionadas. Por tanto, asumiendo que la partición de la raíz es
@file{/dev/sda2}, se puede crear un sistema de ficheros con la etiqueta
@code{mi-raiz} de esta manera:

@example
mkfs.ext4 -L mi-raiz /dev/sda2
@end example

@cindex disco cifrado
If you are instead planning to encrypt the root partition, you can use the
Cryptsetup/LUKS utilities to do that (see @inlinefmtifelse{html,
@uref{https://linux.die.net/man/8/cryptsetup, @code{man cryptsetup}},
@code{man cryptsetup}} for more information).  Assuming you want to store
the root partition on @file{/dev/sda2}, the command sequence would be along
these lines:

@example
cryptsetup luksFormat /dev/sda2
cryptsetup open --type luks /dev/sda1 mi-particion
mkfs.ext4 -L mi-raiz /dev/mapper/mi-particion
@end example

Una vez hecho esto, monte el sistema de ficheros deseado bajo @file{/mnt}
con una orden como (de nuevo, asumiendo que @code{mi-raiz} es la etiqueta
del sistema de ficheros raíz):

@example
mount LABEL=mi-raiz /mnt
@end example

Monte también cualquier otro sistema de ficheros que desee usar en el
sistema resultante relativamente a esta ruta. Si ha optado por
@file{/boot/efi} como el punto de montaje de EFI, por ejemplo, ahora debe
ser montada en @file{/mnt/boot/efi} para que @code{guix system init} pueda
encontrarla más adelante.

Finalmente, si planea usar una o más particiones de intercambio
(@pxref{Memory Concepts, swap space,, libc, The GNU C Library Reference
Manual}), asegúrese de inicializarla con @command{mkswap}. Asumiendo que
tuviese una partición de intercambio en @file{/dev/sda3}, ejecutaría:

@example
mkswap /dev/sda3
swapon /dev/sda3
@end example

De manera alternativa, puede usar un fichero de intercambio. Por ejemplo,
asumiendo que en el nuevo sistema desea usar el fichero
@file{/fichero-de-intercambio} como tal, ejecutaría@footnote{Este ejemplo
funcionará para muchos tipos de sistemas de ficheros (por ejemplo, ext4). No
obstante, para los sistemas de ficheros con mecanismos de
copia-durante-escritura (por ejemplo, btrfs) los pasos pueden ser
diferentes. Para obtener más detalles, véanse las páginas de manual para
@command{mkswap} y @command{swapon}.}:

@example
# Esto son 10GiB de espacio de intercambio. Ajuste "count" para
# cambiar el tamaño.
dd if=/dev/zero of=/mnt/swapfile bs=1MiB count=10240
# Por seguridad, se le conceden permisos de lectura y escritura
# únicamente a root.
chmod 600 /mnt/swapfile
mkswap /mnt/swapfile
swapon /mnt/swapfile
@end example

Fíjese que si ha cifrado la partición raíz y creado un fichero de
intercambio en su sistema de ficheros como se ha descrito anteriormente, el
cifrado también protege al fichero de intercambio, como a cualquier fichero
en dicho sistema de ficheros.

@node Procedimiento de instalación
@subsection Procedimiento de instalación

Con las particiones deseadas listas y la raíz deseada montada en
@file{/mnt}, estamos preparadas para empezar. Primero, ejecute:

@example
herd start cow-store /mnt
@end example

Esto activa la copia-durante-escritura en @file{/gnu/store}, de modo que los
paquetes que se añadan durante la fase de instalación se escriban en el
disco montado en @file{/mnt} en vez de permanecer en memoria. Esto es
necesario debido a que la primera fase de la orden @command{guix system
init} (vea más adelante) implica descargas o construcciones en
@file{/gnu/store}, el cual, inicialmente, está un sistema de ficheros en
memoria.

Después debe editar un fichero y proporcionar la declaración de sistema
operativo a instalar. Para dicho fin, el sistema de instalación viene con
tres editores de texto. Recomendamos GNU nano (@pxref{Top,,, nano, GNU nano
Manual}), que permite el resaltado de sintaxis y correspondencia de
paréntesis; los otros editores son GNU Zile (un clon de Emacs) y nvi (un
clon del editor @command{vi} original de BSD). Le recomendamos
encarecidamente almacenar ese fichero en el sistema de ficheros raíz,
digamos, como @file{/mnt/etc/config.scm}. En caso de no hacerlo, habrá
perdido su configuración del sistema una vez arranque en el sistema recién
instalado.

@xref{Uso de la configuración del sistema}, para hacerse una idea del fichero de
configuración. Las configuraciones de ejemplo mencionadas en esa sección
están disponibles bajo @file{/etc/configuration} en la imagen de
instalación. Por tanto, para empezar con una configuración del sistema que
proporcione un servidor gráfico (un sistema de ``escritorio''), puede
ejecutar algo parecido a estas órdenes:

@example
# mkdir /mnt/etc
# cp /etc/configuration/desktop.scm /mnt/etc/config.scm
# nano /mnt/etc/config.scm
@end example

Debe prestar atención a lo que su fichero de configuración contiene, y en
particular:

@itemize
@item
Asegúrese que la forma @code{bootloader-configuration} especifica la
localización deseada de la instalación de GRUB. Debe mencionar
@code{grub-bootloader} si está usando GRUB con el arranque antiguo, o
@code{grub-efi-bootloader} para sistemas más nuevos UEFI. Para los sistemas
antiguos, el campo @code{target} denomina un dispositivo, como
@code{/dev/sda}; para los sistemas UEFI denomina la ruta de una partición
EFI montada, como @code{/boot/efi}; asegúrese de que la ruta está
actualmente montada y haya una entrada @code{file-system} especificada en su
configuración.

@item
Asegúrese que las etiquetas de su sistema de ficheros corresponden con el
valor de sus campos @code{device} respectivos en su configuración
@code{file-system}, asumiendo que su configuración @code{file-system} usa el
procedimiento @code{file-system-label} en su campo @code{device}.

@item
Si hay particiones cifradas o en RAID, asegúrese de añadir un campo
@code{mapped-devices} para describirlas (@pxref{Dispositivos traducidos}).
@end itemize

Una vez haya terminado de preparar el fichero de configuración, el nuevo
sistema debe ser inicializado (recuerde que el sistema de ficheros raíz
deseado está montado bajo @file{/mnt}):

@example
guix system init /mnt/etc/config.scm /mnt
@end example

@noindent
Esto copia todos los ficheros necesarios e instala GRUB en @file{/dev/sdX},
a menos que proporcione la opción @option{--no-bootloader}. Para más
información, @pxref{Invocación de guix system}. Esta orden puede desencadenar
descargas o construcciones de paquetes no encontrados, lo cual puede tomar
algún tiempo.

Una vez que la orden se complete---¡y, deseablemente, de forma
satisfactoria!---puede ejecutar @command{reboot} y arrancar con el nuevo
sistema. La contraseña de @code{root} en el nuevo sistema está vacía
inicialmente; otras contraseñas de usuarias tienen que ser inicializadas
ejecutando la orden @command{passwd} como @code{root}, a menos que en su
configuración se especifique de otra manera (@pxref{user-account-password,
contraseñas de cuentas de usuaria}). ¡@xref{Tras la instalación del sistema} para
proceder a continuación!


@node Tras la instalación del sistema
@section Tras la instalación del sistema

¡Éxito! ¡Ha arrancado en el sistema Guix! De ahora en adelante, puede
actualizar el sistema cuando quiera mediante la ejecución de, digamos:

@example
guix pull
sudo guix system reconfigure /etc/config.scm
@end example

@noindent
Esto construye una nueva generación del sistema con los últimos paquetes y
servicios (@pxref{Invocación de guix system}). Recomendamos realizarlo de manera
regular de modo que su sistema incluya las últimas actualizaciones de
seguridad (@pxref{Actualizaciones de seguridad}).

@c See <https://lists.gnu.org/archive/html/guix-devel/2019-01/msg00268.html>.
@quotation Nota
@cindex sudo y @command{guix pull}
Note that @command{sudo guix} runs your user's @command{guix} command and
@emph{not} root's, because @command{sudo} leaves @env{PATH} unchanged.  To
explicitly run root's @command{guix}, type @command{sudo -i guix @dots{}}.

La diferencia es importante aquí, puesto que @command{guix pull} actualiza
la orden @command{guix} y las definiciones de paquetes únicamente para la
usuaria que lo ejecute. Esto significa que si desea usar @command{guix
system reconfigure} en un shell en el que haya ingresado al sistema como
root, deberá ejecutar de manera de manera separada @command{guix pull}.
@end quotation

¡Unase a nosotras en @code{#guix} en la red IRC Freenode o en
@file{guix-devel@@gnu.org} para compartir su experiencia!


@node Instalación de Guix en una máquina virtual
@section Instalación de Guix en una máquina virtual

@cindex máquina virtual, instalación del sistema Guix
@cindex servidor virtual privado (VPS)
@cindex VPS (servidor virtual privado)
Si desea instalar el sistema Guix en una máquina virtual (VM) o en un
servidor privado virtual (VPS) en vez de en su preciada máquina, esta
sección es para usted.

Si quiere arrancar una VM @uref{https://qemu.org/,QEMU} para instalar el
sistema Guix en una imagen de disco, siga estos pasos:

@enumerate
@item
Primero, obtenga y descomprima la imagen de instalación del sistema Guix
como se ha descrito previamente (@pxref{Instalación desde memoria USB y DVD}).

@item
Cree una imagen de disco que contendrá el sistema instalado. Para crear una
imagen de disco con formato qcow2, use la orden @command{qemu-img}:

@example
qemu-img create -f qcow2 guix-system.img 50G
@end example

El fichero que obtenga será mucho menor de 50GB (típicamente menos de 1MB),
pero crecerá cuando el dispositivo de almacenamiento virtualizado se vaya
llenando.

@item
Arranque la imagen de instalación USB en una máquina virtual:

@example
qemu-system-x86_64 -m 1024 -smp 1 -enable-kvm \
  -nic user,model=virtio-net-pci -boot menu=on,order=d \
  -drive file=guix-system.img \
  -drive media=cdrom,file=guix-system-install-@value{VERSION}.@var{sistema}.iso
@end example

@code{-enable-kvm} es opcional, pero mejora el rendimiento
significativamente, @pxref{Ejecutar Guix en una máquina virtual}.

@item
Ahora es root en la VM, prosiga con el procedimiento de
instalación. @xref{Preparación para la instalación}, y siga las instrucciones.
@end enumerate

Una vez complete la instalación, puede arrancar el sistema que está en la
imagen @file{guix-system.img}. @xref{Ejecutar Guix en una máquina virtual}, para información
sobre cómo hacerlo.

@node Construcción de la imagen de instalación
@section Construcción de la imagen de instalación

@cindex imagen de instalación
La imagen de instalación descrita anteriormente se construyó usando la orden
@command{guix system}, específicamente:

@example
guix system disk-image --file-system-type=iso9660 \
  gnu/system/install.scm
@end example

Eche un vistazo a @file{gnu/system/install.scm} en el árbol de fuentes, y
vea también @ref{Invocación de guix system} para más información acerca de la
imagen de instalación.

@section Construcción de la imagen de instalación para placas ARM

Muchos dispositivos con procesador ARM necesitan una variante específica del
cargador de arranque @uref{https://www.denx.de/wiki/U-Boot/, U-Boot}.

Si construye una imagen de disco y el cargador de arranque no está
disponible de otro modo (en otra unidad de arranque, etc.), es recomendable
construir una imagen que incluya el cargador, específicamente:

@example
guix system disk-image --system=armhf-linux -e '((@@ (gnu system install) os-with-u-boot) (@@ (gnu system install) installation-os) "A20-OLinuXino-Lime2")'
@end example

@code{A20-OLinuXino-Lime2} es el nombre de la placa. Si especifica una placa
no válida, una lista de placas posibles será mostrada.

@c *********************************************************************
@node Gestión de paquetes
@chapter Gestión de paquetes

@cindex paquetes
El propósito de GNU Guix es permitir a las usuarias instalar, actualizar y
borrar fácilmente paquetes de software, sin tener que conocer acerca de sus
procedimientos de construcción o dependencias. Guix también va más allá de
este conjunto obvio de características.

Este capítulo describe las principales características de Guix, así como las
herramientas de gestión de paquetes que ofrece. Junto a la interfaz de línea
de órdenes descrita a continuación (@pxref{Invocación de guix package, @code{guix
package}}, también puede usar la interfaz Emacs-Guix (@pxref{Top,,,
emacs-guix, The Emacs Guix Reference Manual}), tras la instalación del
paquete @code{emacs-guix} (ejecute la orden @kbd{M-x guix-help} para
iniciarse en su uso):

@example
guix install emacs-guix
@end example

@menu
* Características::         Cómo Guix dará brillo a su vida.
* Invocación de guix package::  Instalación de paquetes, borrado, etc.
* Sustituciones::            Descargar binarios pre-construidos.
* Paquetes con múltiples salidas::  Un único paquete de fuentes, 
                                       múltiples salidas.
* Invocación de guix gc::   Ejecutar el recolector de basura.
* Invocación de guix pull::  Obtener la última versión de Guix y la 
                                distribución.
* Canales::                  Personalizar el recolector de basura.
* Invocación de guix time-machine::  Ejecutar una versión antigua de Guix.
* Inferiores::               Interactuar con otra revisión de Guix.
* Invocación de guix describe::  Muestra información acerca de su 
                                    revisión de Guix.
* Invocación de guix archive::  Exportar e importar ficheros del almacén.
@end menu

@node Características
@section Características

Cuando se usa Guix, cada paquete se encuentra en el @dfn{almacén de
paquetes}, en su propio directorio---algo que se asemeja a
@file{/gnu/store/xxx-paquete-1.2}, donde @code{xxx} es una cadena en base32.

En vez de referirse a estos directorios, las usuarias tienen su propio
@dfn{perfil}, el cual apunta a los paquetes que realmente desean usar. Estos
perfiles se almacenan en el directorio de cada usuaria, en
@code{$HOME/.guix-profile}.

Por ejemplo, @code{alicia} instala GCC 4.7.2. Como resultado,
@file{/home/alicia/.guix-profile/bin/gcc} apunta a
@file{/gnu/store/@dots{}-gcc-4.7.2/bin/gcc}. Ahora, en la misma máquina,
@code{rober} ha instalado ya GCC 4.8.0. El perfil de @code{rober}
simplemente sigue apuntando a
@file{/gnu/store/@dots{}-gcc-4.8.0/bin/gcc}---es decir, ambas versiones de
GCC pueden coexistir en el mismo sistema sin ninguna interferencia.

La orden @command{guix package} es la herramienta central para gestión de
paquetes (@pxref{Invocación de guix package}). Opera en los perfiles de usuaria,
y puede ser usada @emph{con privilegios de usuaria normal}.

@cindex transacciones
La orden proporciona las operaciones obvias de instalación, borrado y
actualización. Cada invocación es en realidad una @emph{transacción}: o bien
la operación especificada se realiza satisfactoriamente, o bien nada
sucede. Por tanto, si el proceso @command{guix package} es finalizado
durante una transacción, o un fallo eléctrico ocurre durante la transacción,
el perfil de usuaria permanece en su estado previo, y permanece usable.

Además, cualquier transacción de paquetes puede ser @emph{vuelta atrás}. Si,
por ejemplo, una actualización instala una nueva versión de un paquete que
resulta tener un error importante, las usuarias pueden volver a la instancia
previa de su perfil, de la cual se tiene constancia que funcionaba bien. De
igual modo, la configuración global del sistema en Guix está sujeta a
actualizaciones transaccionales y vuelta atrás (@pxref{Uso de la configuración del sistema}).

Todos los paquetes en el almacén de paquetes pueden ser @emph{eliminados por
el recolector de basura}. Guix puede determinar a qué paquetes hacen
referencia todavía los perfiles de usuarias, y eliminar aquellos que, de
forma demostrable, no se haga referencia en ningún perfil (@pxref{Invocación de guix gc}). Las usuarias pueden también borrar explícitamente generaciones
antiguas de su perfil para que los paquetes a los que hacen referencia
puedan ser recolectados.

@cindex reproducibilidad
@cindex construcciones reproducibles
Guix toma una aproximación @dfn{puramente funcional} en la gestión de
paquetes, como se describe en la introducción (@pxref{Introducción}). Cada
nombre de directorio de paquete en @file{/gnu/store} contiene un hash de
todas las entradas que fueron usadas para construir el paquete---compilador,
bibliotecas, guiones de construcción, etc. Esta correspondencia directa
permite a las usuarias asegurarse que una instalación dada de un paquete
corresponde al estado actual de su distribución. Esto también ayuda a
maximizar la @dfn{reproducibilidad de la construcción}: gracias al uso de
entornos aislados de construcción, una construcción dada probablemente
generará ficheros idénticos bit-a-bit cuando se realice en máquinas
diferentes (@pxref{Invocación de guix-daemon, container}).

@cindex sustituciones
Estos cimientos permiten a Guix ofrecer @dfn{despliegues transparentes de
binarios/fuentes}. Cuando un binario pre-construido para un elemento de
@file{/gnu/store} está disponible para descarga de una fuente externa---una
@dfn{sustitución}, Guix simplemente lo descarga y desempaqueta; en otro caso
construye el paquete de las fuentes, localmente
(@pxref{Sustituciones}). Debido a que los resultados de construcción son
normalmente reproducibles bit-a-bit, las usuarias no tienen que confiar en
los servidores que proporcionan sustituciones: pueden forzar una
construcción local y @emph{retar} a las proveedoras (@pxref{Invocación de guix challenge}).

El control sobre el entorno de construcción es una característica que
también es útil para desarrolladoras. La orden @command{guix environment}
permite a desarrolladoras de un paquete configurar rápidamente el entorno de
desarrollo correcto para su paquete, sin tener que instalar manualmente las
dependencias del paquete en su perfil (@pxref{Invocación de guix environment}).

@cindex replicación, de entornos de software
@cindex seguimiento de procedencia, de artefactos de software
Todo Guix y sus definiciones de paquetes están bajo control de versiones, y
@command{guix pull} le permite ``viajar en el tiempo'' por la historia del
mismo Guix (@pxref{Invocación de guix pull}). Esto hace posible replicar una
instancia de Guix en una máquina diferente o en un punto posterior del
tiempo, lo que a su vez le permite @emph{replicar entornos de software
completos}, mientras que mantiene un preciso @dfn{seguimiento de la
procedencia} del software.

@node Invocación de guix package
@section Invocación de @command{guix package}

@cindex instalar paquetes
@cindex borrar paquetes
@cindex instalación de paquetes
@cindex borrado de paquetes
La orden @command{guix package} es la herramienta que permite a las usuarias
instalar, actualizar y borrar paquetes, así como volver a configuraciones
previas. Opera únicamente en el perfil propio de la usuaria, y funciona con
privilegios de usuaria normal (@pxref{Características}). Su sintaxis es:

@example
guix package @var{opciones}
@end example

@cindex transacciones
Primariamente, @var{opciones} especifica las operaciones a ser realizadas
durante la transacción. Al completarse, un nuevo perfil es creado, pero las
@dfn{generaciones} previas del perfil permanecen disponibles, en caso de que
la usuaria quisiera volver atrás.

Por ejemplo, para borrar @code{lua} e instalar @code{guile} y
@code{guile-cairo} en una única transacción:

@example
guix package -r lua -i guile guile-cairo
@end example

@cindex alias de @command{guix package}
Para su conveniencia, también se proporcionan los siguientes alias:

@itemize
@item
@command{guix search} es un alias de @command{guix package -s},
@item
@command{guix install} es un alias de @command{guix package -i},
@item
@command{guix remove} es un alias de @command{guix package -r},
@item
@command{guix upgrade} es un alias de @command{guix package -u}
@item
y @command{guix show} es un alias de @command{guix package --show=}.
@end itemize

Estos alias tienen menos capacidad expresiva que @command{guix package} y
proporcionan menos opciones, por lo que en algunos casos es probable que
desee usar @command{guix package} directamente.

@command{guix package} también proporciona una @dfn{aproximación
declarativa}, donde la usuaria especifica el conjunto exacto de paquetes a
poner disponibles y la pasa a través de la opción @option{--manifest}
(@pxref{profile-manifest, @option{--manifest}}).

@cindex perfil
For each user, a symlink to the user's default profile is automatically
created in @file{$HOME/.guix-profile}.  This symlink always points to the
current generation of the user's default profile.  Thus, users can add
@file{$HOME/.guix-profile/bin} to their @env{PATH} environment variable, and
so on.
@cindex rutas de búsqueda
Si no está usando el sistema Guix, considere la adición de las siguientes
líneas en su @file{~/.bash_profile} (@pxref{Bash Startup Files,,, bash, The
GNU Bash Reference Manual}) de manera que los nuevos shell que ejecute
obtengan todas las definiciones correctas de las variables de entorno:

@example
GUIX_PROFILE="$HOME/.guix-profile" ; \
source "$HOME/.guix-profile/etc/profile"
@end example

In a multi-user setup, user profiles are stored in a place registered as a
@dfn{garbage-collector root}, which @file{$HOME/.guix-profile} points to
(@pxref{Invocación de guix gc}).  That directory is normally
@code{@var{localstatedir}/guix/profiles/per-user/@var{user}}, where
@var{localstatedir} is the value passed to @code{configure} as
@option{--localstatedir}, and @var{user} is the user name.  The
@file{per-user} directory is created when @command{guix-daemon} is started,
and the @var{user} sub-directory is created by @command{guix package}.

Las @var{opciones} pueden ser las siguientes:

@table @code

@item --install=@var{paquete} @dots{}
@itemx -i @var{paquete} @dots{}
Instala los @var{paquete}s especificados.

Each @var{package} may specify either a simple package name, such as
@code{guile}, or a package name followed by an at-sign and version number,
such as @code{guile@@1.8.8} or simply @code{guile@@1.8} (in the latter case,
the newest version prefixed by @code{1.8} is selected).

Si no se especifica un número de versión, la última versión disponible será
seleccionada. Además, @var{paquete} puede contener dos puntos, seguido por
el nombre de una de las salidas del paquete, como en @code{gcc:doc} o
@code{binutils@@2.22:lib} (@pxref{Paquetes con múltiples salidas}). Los
paquetes con el nombre correspondiente (y opcionalmente la versión) se
buscan entre los módulos de la distribución GNU (@pxref{Módulos de paquetes}).

@cindex entradas propagadas
A veces los paquetes tienen @dfn{entradas propagadas}: estas son las
dependencias que se instalan automáticamente junto al paquete requerido
(@pxref{package-propagated-inputs, @code{propagated-inputs} in
@code{package} objects}, para información sobre las entradas propagadas en
las definiciones de paquete).

@anchor{package-cmd-propagated-inputs}
Un ejemplo es la biblioteca GNU MPC: sus ficheros de cabecera C hacen
referencia a los de la biblioteca GNU MPFR, que a su vez hacen referencia a
los de la biblioteca GMP. Por tanto, cuando se instala MPC, las bibliotecas
MPFR y GMP también se instalan en el perfil; borrar MPC también borra MPFR y
GMP---a menos que también se hayan instalado explícitamente por la usuaria.

Besides, packages sometimes rely on the definition of environment variables
for their search paths (see explanation of @option{--search-paths} below).
Any missing or possibly incorrect environment variable definitions are
reported here.

@item --install-from-expression=@var{exp}
@itemx -e @var{exp}
Instala el paquete al que @var{exp} evalúa.

@var{exp} debe ser una expresión Scheme que evalúe a un objeto
@code{<package>}. Esta opción es notablemente útil para diferenciar entre
variantes con el mismo nombre de paquete, con expresiones como @code{(@@
(gnu packages base) guile-final)}.

Fíjese que esta opción instala la primera salida del paquete especificado,
lo cual puede ser insuficiente cuando se necesita una salida específica de
un paquete con múltiples salidas.

@item --install-from-file=@var{fichero}
@itemx -f @var{fichero}
Instala el paquete que resulta de evaluar el código en @var{fichero}.

Como un ejemplo, @var{fichero} puede contener una definición como esta
(@pxref{Definición de paquetes}):

@lisp
@include package-hello.scm
@end lisp

Las desarrolladoras pueden encontrarlo útil para incluir un fichero
@file{guix.scm} in la raíz del árbol de fuentes de su proyecto que puede ser
usado para probar imágenes de desarrollo y crear entornos de desarrollo
reproducibles (@pxref{Invocación de guix environment}).

The @var{file} may also contain a JSON representation of one or more package
definitions.  Running @code{guix package -f} on @file{hello.json} with the
following contents would result in installing the package @code{greeter}
after building @code{myhello}:

@example
@verbatiminclude package-hello.json
@end example

@item --remove=@var{paquete} @dots{}
@itemx -r @var{paquete} @dots{}
Borra los @var{paquete}s especificados.

As for @option{--install}, each @var{package} may specify a version number
and/or output name in addition to the package name.  For instance, @samp{-r
glibc:debug} would remove the @code{debug} output of @code{glibc}.

@item --upgrade[=@var{regexp} @dots{}]
@itemx -u [@var{regexp} @dots{}]
@cindex actualizar paquetes
Upgrade all the installed packages.  If one or more @var{regexp}s are
specified, upgrade only installed packages whose name matches a
@var{regexp}.  Also see the @option{--do-not-upgrade} option below.

Tenga en cuenta que esto actualiza los paquetes a la última versión
encontrada en la distribución instalada actualmente. Para actualizar su
distribución, debe ejecutar regularmente @command{guix pull}
(@pxref{Invocación de guix pull}).

@item --do-not-upgrade[=@var{regexp} @dots{}]
When used together with the @option{--upgrade} option, do @emph{not} upgrade
any packages whose name matches a @var{regexp}.  For example, to upgrade all
packages in the current profile except those containing the substring
``emacs'':

@example
$ guix package --upgrade . --do-not-upgrade emacs
@end example

@item @anchor{profile-manifest}--manifest=@var{fichero}
@itemx -m @var{fichero}
@cindex declaración del perfil
@cindex manifiesto del perfil
Crea una nueva generación del perfil desde el objeto de manifiesto devuelto
por el código Scheme en @var{fichero}. Esta opción puede repetirse varias
veces, en cuyo caso los manifiestos se concatenan.

This allows you to @emph{declare} the profile's contents rather than
constructing it through a sequence of @option{--install} and similar
commands.  The advantage is that @var{file} can be put under version
control, copied to different machines to reproduce the same profile, and so
on.

@c FIXME: Add reference to (guix profile) documentation when available.
@var{fichero} debe devolver un objeto @dfn{manifest}, que es básicamente una
lista de paquetes:

@findex packages->manifest
@lisp
(use-package-modules guile emacs)

(packages->manifest
 (list emacs
       guile-2.0
       ;; Usa una salida específica del paquete.
       (list guile-2.0 "debug")))
@end lisp

@findex specifications->manifest
En este ejemplo tenemos que conocer qué módulos definen las variables
@code{emacs} y @code{guile-2.0} para proporcionar la línea
@code{use-package-modules} correcta, lo cual puede ser complicado. En cambio
podemos proporcionar especificaciones regulares de paquetes y dejar a
@code{specifications->manifest} buscar los objetos de paquete
correspondientes así:

@lisp
(specifications->manifest
 '("emacs" "guile@@2.2" "guile@@2.2:debug"))
@end lisp

@item --roll-back
@cindex vuelta atrás
@cindex deshacer transacciones
@cindex transacciones, deshaciendo
Vuelve a la @dfn{generación} previa del perfil---es decir, deshace la última
transacción.

When combined with options such as @option{--install}, roll back occurs
before any other actions.

Cuando se vuelve atrás en la primera generación que realmente contiene
paquetes instalados, se hace que el perfil apunte a la @dfn{generación
cero}, la cual no contiene ningún fichero a excepción de sus propios
metadatos.

Después de haber vuelto atrás, instalar, borrar o actualizar paquetes
sobreescribe las generaciones futuras previas. Por tanto, la historia de las
generaciones en un perfil es siempre linear.

@item --switch-generation=@var{patrón}
@itemx -S @var{patrón}
@cindex generaciones
Cambia a una generación particular definida por el @var{patrón}.

@var{pattern} may be either a generation number or a number prefixed with
``+'' or ``-''.  The latter means: move forward/backward by a specified
number of generations.  For example, if you want to return to the latest
generation after @option{--roll-back}, use @option{--switch-generation=+1}.

The difference between @option{--roll-back} and
@option{--switch-generation=-1} is that @option{--switch-generation} will
not make a zeroth generation, so if a specified generation does not exist,
the current generation will not be changed.

@item --search-paths[=@var{tipo}]
@cindex rutas de búsqueda
Informa de variables de entorno, en sintaxis Bash, que pueden necesitarse
para usar el conjunto de paquetes instalado. Estas variables de entorno se
usan para especificar las @dfn{rutas de búsqueda} para ficheros usadas por
algunos de los paquetes.

For example, GCC needs the @env{CPATH} and @env{LIBRARY_PATH} environment
variables to be defined so it can look for headers and libraries in the
user's profile (@pxref{Environment Variables,,, gcc, Using the GNU Compiler
Collection (GCC)}).  If GCC and, say, the C library are installed in the
profile, then @option{--search-paths} will suggest setting these variables
to @file{@var{profile}/include} and @file{@var{profile}/lib}, respectively.

El caso de uso típico es para definir estas variables de entorno en el
shell:

@example
$ eval `guix package --search-paths`
@end example

@var{tipo} puede ser @code{exact}, @code{prefix} o @code{suffix}, lo que
significa que las definiciones de variables de entorno devueltas serán
respectivamente las configuraciones exactas, prefijos o sufijos del valor
actual de dichas variables. Cuando se omite, el valor predeterminado de
@var{tipo} es @code{exact}.

Esta opción puede usarse para calcular las rutas de búsqueda
@emph{combinadas} de varios perfiles. Considere este ejemplo:

@example
$ guix package -p foo -i guile
$ guix package -p bar -i guile-json
$ guix package -p foo -p bar --search-paths
@end example

The last command above reports about the @env{GUILE_LOAD_PATH} variable,
even though, taken individually, neither @file{foo} nor @file{bar} would
lead to that recommendation.


@item --profile=@var{perfil}
@itemx -p @var{perfil}
Usa @var{perfil} en vez del perfil predeterminado de la usuaria.

@var{perfil} debe ser el nombre de un fichero que se creará tras completar
las tareas. Concretamente, @var{perfil} sera simplemente un enlace simbólico
(``symlink'') que apunta al verdadero perfil en el que se instalan los
paquetes:

@example
$ guix install hello -p ~/código/mi-perfil
@dots{}
$ ~/código/mi-perfil/bin/hello
¡Hola mundo!
@end example

Todo lo necesario para deshacerse del perfil es borrar dicho enlace
simbólico y sus enlaces relacionados que apuntan a generaciones específicas:

@example
$ rm ~/código/mi-perfil ~/código/mi-perfil-*-link
@end example

@item --list-profiles
Enumera los perfiles de la usuaria:

@example
$ guix package --list-profiles
/home/carlos/.guix-profile
/home/carlos/código/mi-perfil
/home/carlos/código/perfil-desarrollo
/home/carlos/tmp/prueba
@end example

Cuando se ejecuta como root, enumera todos los perfiles de todas las
usuarias.

@cindex colisiones, en un perfil
@cindex paquetes con colisiones en perfiles
@cindex colisiones del perfil
@item --allow-collisions
Permite colisiones de paquetes en el nuevo perfil. ¡Úselo bajo su propio
riesgo!

Por defecto, @command{guix package} informa como un error las
@dfn{colisiones} en el perfil. Las colisiones ocurren cuando dos o más
versiones diferentes o variantes de un paquete dado se han seleccionado para
el perfil.

@item --bootstrap
Use el Guile usado para el lanzamiento para construir el perfil. Esta opción
es util únicamente a las desarrolladoras de la distribución.

@end table

Además de estas acciones, @command{guix package} acepta las siguientes
opciones para consultar el estado actual de un perfil, o la disponibilidad
de paquetes:

@table @option

@item --search=@var{regexp}
@itemx -s @var{regexp}
@anchor{guix-search}
@cindex buscar paquetes
Enumera los paquetes disponibles cuyo nombre, sinopsis o descripción
corresponde con @var{regexp} (sin tener en cuenta la capitalización),
ordenados por relevancia. Imprime todos los metadatos de los paquetes
coincidentes en formato @code{recutils} (@pxref{Top, GNU recutils
databases,, recutils, GNU recutils manual}).

Esto permite extraer campos específicos usando la orden @command{recsel},
por ejemplo:

@example
$ guix package -s malloc | recsel -p name,version,relevance
name: jemalloc
version: 4.5.0
relevance: 6

name: glibc
version: 2.25
relevance: 1

name: libgc
version: 7.6.0
relevance: 1
@end example

De manera similar, para mostrar el nombre de todos los paquetes disponibles
bajo los términos de la GNU@tie{}LGPL versión 3:

@example
$ guix package -s "" | recsel -p name -e 'license ~ "LGPL 3"'
name: elfutils

name: gmp
@dots{}
@end example

También es posible refinar los resultados de búsqueda mediante el uso de
varias opciones @code{-s}, o varios parámetros a @command{guix search}. Por
ejemplo, la siguiente orden devuelve un lista de juegos de
mesa@footnote{NdT: board en inglés.} (esta vez mediante el uso del alias
@command{guix search}:

@example
$ guix search '\<board\>' game | recsel -p name
name: gnubg
@dots{}
@end example

Si omitimos @code{-s game}, también obtendríamos paquetes de software que
tengan que ver con placas de circuitos impresos ("circuit board" en inglés);
borrar los signos mayor y menor alrededor de @code{board} añadiría paquetes
que tienen que ver con teclados (keyboard en inglés).

Y ahora para un ejemplo más elaborado. La siguiente orden busca bibliotecas
criptográficas, descarta bibliotecas Haskell, Perl, Python y Ruby, e imprime
el nombre y la sinopsis de los paquetes resultantes:

@example
$ guix search crypto library | \
    recsel -e '! (name ~ "^(ghc|perl|python|ruby)")' -p name,synopsis
@end example

@noindent
@xref{Selection Expressions,,, recutils, GNU recutils manual}, para más
información en @dfn{expresiones de selección} para @code{recsel -e}.

@item --show=@var{paquete}
Muestra los detalles del @var{paquete}, tomado de la lista disponible de
paquetes, en formato @code{recutils} (@pxref{Top, GNU recutils databases,,
recutils, GNU recutils manual}).

@example
$ guix package --show=python | recsel -p name,version
name: python
version: 2.7.6

name: python
version: 3.3.5
@end example

También puede especificar el nombre completo de un paquete para únicamente
obtener detalles sobre una versión específica (esta vez usando el alias
@command{guix show}):
@example
$ guix show python@@3.4 | recsel -p name,version
name: python
version: 3.4.3
@end example



@item --list-installed[=@var{regexp}]
@itemx -I [@var{regexp}]
Enumera los paquetes actualmente instalados en el perfil especificado, con
los últimos paquetes instalados mostrados al final. Cuando se especifica
@var{regexp}, enumera únicamente los paquetes instalados cuyos nombres son
aceptados por @var{regexp}.

Por cada paquete instalado, imprime los siguientes elementos, separados por
tabuladores: el nombre del paquete, la cadena de versión, la parte del
paquete que está instalada (por ejemplo, @code{out} para la salida
predeterminada, @code{include} para sus cabeceras, etc.), y la ruta de este
paquete en el almacén.

@item --list-available[=@var{regexp}]
@itemx -A [@var{regexp}]
Enumera los paquetes disponibles actualmente en la distribución para este
sistema (@pxref{Distribución GNU}). Cuando se especifica @var{regexp},
enumera únicamente paquetes disponibles cuyo nombre coincide con
@var{regexp}.

Por cada paquete, imprime los siguientes elementos separados por
tabuladores: su nombre, su cadena de versión, las partes del paquete
(@pxref{Paquetes con múltiples salidas}) y la dirección de las fuentes de su
definición.

@item --list-generations[=@var{patrón}]
@itemx -l [@var{patrón}]
@cindex generaciones
Devuelve una lista de generaciones junto a sus fechas de creación; para cada
generación, muestra los paquetes instalados, con los paquetes instalados más
recientemente mostrados los últimos. Fíjese que la generación cero nunca se
muestra.

Por cada paquete instalado, imprime los siguientes elementos, separados por
tabuladores: el nombre de un paquete, su cadena de versión, la parte del
paquete que está instalada (@pxref{Paquetes con múltiples salidas}), y la
ruta de este paquete en el almacén.

Cuando se usa @var{patrón}, la orden devuelve únicamente las generaciones
que se ajustan al patrón. Entre los patrones adecuados se encuentran:

@itemize
@item @emph{Enteros y enteros separados por comas}. Ambos patrones denotan
generation numbers.  For instance, @option{--list-generations=1} returns the
first one.

And @option{--list-generations=1,8,2} outputs three generations in the
specified order.  Neither spaces nor trailing commas are allowed.

@item @emph{Ranges}.  @option{--list-generations=2..9} prints the
las generaciones especificadas y todas las intermedias. Fíjese que el inicio
de un rango debe ser menor a su fin.

It is also possible to omit the endpoint.  For example,
@option{--list-generations=2..}, returns all generations starting from the
second one.

@item @emph{Duraciones}. Puede también obtener los últimos @emph{N}@tie{}días, semanas,
or months by passing an integer along with the first letter of the
duration.  For example, @option{--list-generations=20d} lists generations
that are up to 20 days old.
@end itemize

@item --delete-generations[=@var{patrón}]
@itemx -d [@var{patrón}]
Cuando se omite @var{patrón}, borra todas las generaciones excepto la
actual.

This command accepts the same patterns as @option{--list-generations}.  When
@var{pattern} is specified, delete the matching generations.  When
@var{pattern} specifies a duration, generations @emph{older} than the
specified duration match.  For instance, @option{--delete-generations=1m}
deletes generations that are more than one month old.

Si la generación actual entra en el patrón, @emph{no} es borrada. Tampoco la
generación cero es borrada nunca.

Fíjese que borrar generaciones previene volver atrás a
ellas. Consecuentemente esta orden debe ser usada con cuidado.

@end table

Finally, since @command{guix package} may actually start build processes, it
supports all the common build options (@pxref{Opciones comunes de construcción}).  It
also supports package transformation options, such as @option{--with-source}
(@pxref{Opciones de transformación de paquetes}).  However, note that package
transformations are lost when upgrading; to preserve transformations across
upgrades, you should define your own package variant in a Guile module and
add it to @env{GUIX_PACKAGE_PATH} (@pxref{Definición de paquetes}).

@node Sustituciones
@section Sustituciones

@cindex sustituciones
@cindex binarios pre-construidos
Guix permite despliegues transparentes de fuentes/binarios, lo que significa
que puede tanto construir cosas localmente, como descargar elementos
preconstruidos de un servidor, o ambas. Llamamos a esos elementos
preconstruidos @dfn{sustituciones}---son sustituciones de los resultados de
construcciones locales. En muchos casos, descargar una sustitución es mucho
más rápido que construirla localmente.

Las sustituciones pueden ser cualquier cosa que resulte de una construcción
de una derivación (@pxref{Derivaciones}). Por supuesto, en el caso común, son
paquetes binarios preconstruidos, pero los archivos de fuentes, por ejemplo,
que también resultan de construcciones de derivaciones, pueden estar
disponibles como sustituciones.

@menu
* Servidor oficial de sustituciones.::  Una fuente particular de 
                                          sustituciones.
* Autorización de servidores de sustituciones::  Cómo activar o desactivar 
                                                    las sustituciones.
* Verificación de sustituciones::  Cómo verifica las sustituciones Guix.
* Configuración de la pasarela.::  Cómo obtener sustituciones a través de 
                                      una pasarela.
* Fallos en las sustituciones::  Qué pasa cuando una sustitución falla.
* Sobre la confianza en binarios::  ¿Cómo puede confiar en esa masa amorfa 
                                      de datos binarios?
@end menu

@node Servidor oficial de sustituciones.
@subsection Servidor oficial de sustituciones.

@cindex granja de construcción
El servidor @code{@value{SUBSTITUTE-SERVER}} es una fachada a una granja de
construcción oficial que construye paquetes de Guix continuamente para
algunas arquitecturas, y los pone disponibles como sustituciones. Esta es la
fuente predeterminada de sustituciones; puede ser forzada a cambiar pasando
la opción @option{--substitute-urls} bien a @command{guix-daemon}
(@pxref{daemon-substitute-urls,, @code{guix-daemon --substitute-urls}}) o
bien a herramientas cliente como @command{guix package}
(@pxref{client-substitute-urls,, client @option{--substitute-urls} option}).

Las URLs de sustituciones pueden ser tanto HTTP como HTTPS. Se recomienda
HTTPS porque las comunicaciones están cifradas; de modo contrario, usar HTTP
hace visibles todas las comunicaciones para alguien que las intercepte,
quien puede usar la información obtenida para determinar, por ejemplo, si su
sistema tiene vulnerabilidades de seguridad sin parchear.

El uso de sustituciones de la granja de construcción oficial se realiza de
manera predeterminada cuando se usa el sistema Guix (@pxref{Distribución GNU}). No obstante, no se realiza de manera predeterminada cuando
se usa Guix en una distribución anfitriona, a menos que las active
explícitamente via uno de los pasos recomendados de instalación
(@pxref{Instalación}). Los siguientes párrafos describen como activar o
desactivar las sustituciones para la granja oficial de construcción; el
mismo procedimiento puede usarse para activar las sustituciones desde
cualquier otro servidor que las proporcione.

@node Autorización de servidores de sustituciones
@subsection Autorización de servidores de sustituciones

@cindex seguridad
@cindex sustituciones, autorización de las mismas
@cindex listas de control de acceso (ACL), para sustituciones
@cindex ACL (listas de control de acceso), para sustituciones
Para permitir a Guix descargar sustituciones de
@code{@value{SUBSTITUTE-SERVER}} o un espejo suyo, debe añadir su clave
pública a la lista de control de acceso (ACL) de las importaciones de
archivos, mediante el uso de la orden @command{guix archive}
(@pxref{Invocación de guix archive}). Hacerlo implica que confía que
@code{@value{SUBSTITUTE-SERVER}} no ha sido comprometido y proporciona
sustituciones genuinas.

La clave pública para @code{@value{SUBSTITUTE-SERVER}} se instala junto a
Guix, en @code{@var{prefijo}/share/guix/@value{SUBSTITUTE-SERVER}.pub},
donde @var{prefijo} es el prefij de instalación de Guix. Si ha instalado
Guix desde las fuentes, debe asegurarse de que comprobó la firma GPG de
@file{guix-@value{VERSION}.tar.gz}, el cual contiene el fichero de clave
pública. Una vez hecho, puede ejecutar algo así:

@example
# guix archive --authorize < @var{prefijo}/share/guix/@value{SUBSTITUTE-SERVER}.pub
@end example

Una vez esté autorizada, la salida de una orden como @code{guix build}
debería cambiar de algo como:

@example
$ guix build emacs --dry-run
Se construirían las siguientes derivaciones:
   /gnu/store/yr7bnx8xwcayd6j95r2clmkdl1qh688w-emacs-24.3.drv
   /gnu/store/x8qsh1hlhgjx6cwsjyvybnfv2i37z23w-dbus-1.6.4.tar.gz.drv
   /gnu/store/1ixwp12fl950d15h2cj11c73733jay0z-alsa-lib-1.0.27.1.tar.bz2.drv
   /gnu/store/nlma1pw0p603fpfiqy7kn4zm105r5dmw-util-linux-2.21.drv
@dots{}
@end example

@noindent
a algo así:

@example
$ guix build emacs --dry-run
Se descargarían 112.3 MB:
   /gnu/store/pk3n22lbq6ydamyymqkkz7i69wiwjiwi-emacs-24.3
   /gnu/store/2ygn4ncnhrpr61rssa6z0d9x22si0va3-libjpeg-8d
   /gnu/store/71yz6lgx4dazma9dwn2mcjxaah9w77jq-cairo-1.12.16
   /gnu/store/7zdhgp0n1518lvfn8mb96sxqfmvqrl7v-libxrender-0.9.7
@dots{}
@end example

@noindent
El texto ha cambiado de ``Se construirían las siguientes derivaciones'' a
``Se descargarían 112.3 MB''. Esto indica que las sustituciones de
@code{@value{SUBSTITUTE-SERVER}} son usables y serán descargadas, cuando sea
posible, en construcciones futuras.

@cindex sustituciones, cómo desactivar
The substitute mechanism can be disabled globally by running
@code{guix-daemon} with @option{--no-substitutes} (@pxref{Invocación de guix-daemon}).  It can also be disabled temporarily by passing the
@option{--no-substitutes} option to @command{guix package}, @command{guix
build}, and other command-line tools.

@node Verificación de sustituciones
@subsection Verificación de sustituciones

@cindex firmas digitales
Guix detecta y emite errores cuando se intenta usar una sustitución que ha
sido adulterado. Del mismo modo, ignora las sustituciones que no están
firmadas, o que no están firmadas por una de las firmas enumeradas en la
ACL.

No obstante hay una excepción: si un servidor no autorizado proporciona
sustituciones que son @emph{idénticas bit-a-bit} a aquellas proporcionadas
por un servidor autorizado, entonces el servidor no autorizado puede ser
usado para descargas. Por ejemplo, asumiendo que hemos seleccionado dos
servidores de sustituciones con esta opción:

@example
--substitute-urls="https://a.example.org https://b.example.org"
@end example

@noindent
@cindex construcciones reproducibles
If the ACL contains only the key for @samp{b.example.org}, and if
@samp{a.example.org} happens to serve the @emph{exact same} substitutes,
then Guix will download substitutes from @samp{a.example.org} because it
comes first in the list and can be considered a mirror of
@samp{b.example.org}.  In practice, independent build machines usually
produce the same binaries, thanks to bit-reproducible builds (see below).

When using HTTPS, the server's X.509 certificate is @emph{not} validated (in
other words, the server is not authenticated), contrary to what HTTPS
clients such as Web browsers usually do.  This is because Guix authenticates
substitute information itself, as explained above, which is what we care
about (whereas X.509 certificates are about authenticating bindings between
domain names and public keys).

@node Configuración de la pasarela.
@subsection Configuración de la pasarela.

@vindex http_proxy
@vindex https_proxy
Substitutes are downloaded over HTTP or HTTPS.  The @env{http_proxy} and
@env{https_proxy} environment variables can be set in the environment of
@command{guix-daemon} and are honored for downloads of substitutes.  Note
that the value of those environment variables in the environment where
@command{guix build}, @command{guix package}, and other client commands are
run has @emph{absolutely no effect}.

@node Fallos en las sustituciones
@subsection Fallos en las sustituciones

Incluso cuando una sustitución de una derivación está disponible, a veces el
intento de sustitución puede fallar. Esto puede suceder por varias razones:
el servidor de sustituciones puede estar desconectado, la sustitución puede
haber sido borrada, la conexión puede interrumpirse, etc.

When substitutes are enabled and a substitute for a derivation is available,
but the substitution attempt fails, Guix will attempt to build the
derivation locally depending on whether or not @option{--fallback} was given
(@pxref{fallback-option,, common build option @option{--fallback}}).
Specifically, if @option{--fallback} was omitted, then no local build will
be performed, and the derivation is considered to have failed.  However, if
@option{--fallback} was given, then Guix will attempt to build the
derivation locally, and the success or failure of the derivation depends on
the success or failure of the local build.  Note that when substitutes are
disabled or no substitute is available for the derivation in question, a
local build will @emph{always} be performed, regardless of whether or not
@option{--fallback} was given.

Para hacerse una idea de cuantas sustituciones hay disponibles en este
momento, puede intentar ejecutar la orden @command{guix weather}
(@pxref{Invocación de guix weather}). Esta orden proporciona estadísticas de las
sustituciones proporcionadas por un servidor.

@node Sobre la confianza en binarios
@subsection Sobre la confianza en binarios

@cindex confianza, de binarios pre-construidos
Hoy en día, el control individual sobre nuestra propia computación está a
merced de instituciones, empresas y grupos con suficiente poder y
determinación para subvertir la infraestructura de computación y explotar
sus vulnerabilidades. Mientras que usar las sustituciones de
@code{@value{SUBSTITUTE-SERVER}} puede ser conveniente, recomendamos a las
usuarias también construir sus paquetes, o incluso mantener su propia granja
de construcción, de modo que @code{@value{SUBSTITUTE-SERVER}} sea un
objetivo menos interesante. Una manera de ayudar es publicando el software
que construya usando @command{guix publish} de modo que otras tengan otro
servidor más como opción para descargar sustituciones (@pxref{Invocación de guix publish}).

Guix tiene los cimientos para maximizar la reproducibilidad de las
construcciones (@pxref{Características}). En la mayor parte de los casos,
construcciones independientes de un paquete o derivación dada deben emitir
resultados idénticos bit a bit. Por tanto, a través de un conjunto diverso
de construcciones independientes de paquetes, podemos reforzar la integridad
de nuestros sistemas. La orden @command{guix challenge} intenta ayudar a las
usuarias en comprobar servidores de sustituciones, y asiste a las
desarrolladoras encontrando construcciones no deterministas de paquetes
(@pxref{Invocación de guix challenge}). Similarmente, la opción @option{--check}
de @command{guix build} permite a las usuarias si las sustituciones
previamente instaladas son genuinas mediante su reconstrucción local
(@pxref{build-check, @command{guix build --check}}).

En el futuro, queremos que Guix permita la publicación y obtención de
binarios hacia/desde otras usuarias, entre pares (P2P). En caso de
interesarle hablar sobre este proyecto, unase a nosotras en
@email{guix-devel@@gnu.org}.

@node Paquetes con múltiples salidas
@section Paquetes con múltiples salidas

@cindex paquetes de salida múltiple
@cindex salidas del paquete
@cindex salidas

Habitualmente, los paquetes definidos en Guix tienen una @dfn{salida}
única---es decir, el paquete de fuentes proporcionará exactamente un
directorio en el almacén. Cuando se ejecuta @command{guix install glibc}, se
instala la salida predeterminada del paquete GNU libc; la salida
predeterminada se llama @code{out}, pero su nombre puede omitirse como se
mostró en esta orden. En este caso particular, la salida predeterminada de
@code{glibc} contiene todos ficheros de cabecera C, bibliotecas dinámicas,
bibliotecas estáticas, documentación Info y otros ficheros auxiliares.

A veces es más apropiado separar varios tipos de ficheros producidos por un
paquete único de fuentes en salidas separadas. Por ejemplo, la biblioteca C
GLib (usada por GTK+ y paquetes relacionados) instala más de 20 MiB de
documentación de referencia como páginas HTML. Para ahorrar espacio para
usuarias que no la necesiten, la documentación va a una salida separada,
llamada @code{doc}. Para instalar la salida principal de GLib, que contiene
todo menos la documentación, se debe ejecutar:

@example
guix install glib
@end example

@cindex documentación
La orden que instala su documentación es:

@example
guix install glib:doc
@end example

Algunos paquetes instalan programas con diferentes ``huellas de
dependencias''. Por ejemplo, el paquete WordNet instala tanto herramientas
de línea de órdenes como interfaces gráficas de usuaria (IGU). Las primeras
dependen únicamente de la biblioteca de C, mientras que las últimas dependen
en Tcl/Tk y las bibliotecas de X subyacentes. En este caso, dejamos las
herramientas de línea de órdenes en la salida predeterminada, mientras que
las IGU están en una salida separada. Esto permite a las usuarias que no
necesitan una IGU ahorrar espacio. La orden @command{guix size} puede ayudar
a exponer estas situaciones (@pxref{Invocación de guix size}). @command{guix
graph} también puede ser útil (@pxref{Invocación de guix graph}).

Hay varios de estos paquetes con salida múltiple en la distribución
GNU. Otros nombres de salida convencionales incluyen @code{lib} para
bibliotecas y posiblemente ficheros de cabecera, @code{bin} para programas
independientes y @code{debug} para información de depuración
(@pxref{Instalación de ficheros de depuración}). La salida de los paquetes se enumera
en la tercera columna del resultado de @command{guix package
--list-available} (@pxref{Invocación de guix package}).


@node Invocación de guix gc
@section Invocación de @command{guix gc}

@cindex recolector de basura
@cindex espacio en disco
Los paquetes instalados, pero no usados, pueden ser @dfn{recolectados}. La
orden @command{guix gc} permite a las usuarias ejecutar explícitamente el
recolector de basura para reclamar espacio del directorio
@file{/gnu/store}---¡borrar ficheros o directorios manualmente puede dañar
el almacén sin reparación posible!

@cindex GC, raíces del recolector de basura
@cindex raíces del recolector de basura
El recolector de basura tiene un conjunto de @dfn{raíces} conocidas:
cualquier fichero en @file{/gnu/store} alcanzable desde una raíz se
considera @dfn{vivo} y no puede ser borrado; cualquier otro fichero se
considera @dfn{muerto} y puede ser borrado. El conjunto de raíces del
recolector de basura (``raíces del GC'' para abreviar) incluye los perfiles
predeterminados de las usuarias; por defecto los enlaces bajo
@file{/var/guix/gcroots} representan dichas raíces. Por ejemplo, nuevas
raíces del GC pueden añadirse con @command{guix build --root}
(@pxref{Invocación de guix build}). La orden @command{guix gc --list-roots} las
enumera.

Antes de ejecutar @code{guix gc --collect-garbage} para liberar espacio,
habitualmente es útil borrar generaciones antiguas de los perfiles de
usuaria; de ese modo, las construcciones antiguas de paquetes a las que
dichas generaciones hacen referencia puedan ser reclamadas. Esto se consigue
ejecutando @code{guix package --delete-generations} (@pxref{Invocación de guix package}).

Nuestra recomendación es ejecutar una recolección de basura periódicamente,
o cuando tenga poco espacio en el disco. Por ejemplo, para garantizar que al
menos 5@tie{}GB están disponibles en su disco, simplemente ejecute:

@example
guix gc -F 5G
@end example

Es completamente seguro ejecutarla como un trabajo periódico no-interactivo
(@pxref{Ejecución de tareas programadas}, para la configuración de un trabajo de ese
tipo). La ejecución de @command{guix gc} sin ningún parámetro recolectará
tanta basura como se pueda, pero eso es no es normalmente conveniente: puede
encontrarse teniendo que reconstruir o volviendo a bajar software que está
``muerto'' desde el punto de vista del recolector pero que es necesario para
construir otras piezas de software---por ejemplo, la cadena de herramientas
de compilación.

The @command{guix gc} command has three modes of operation: it can be used
to garbage-collect any dead files (the default), to delete specific files
(the @option{--delete} option), to print garbage-collector information, or
for more advanced queries.  The garbage collection options are as follows:

@table @code
@item --collect-garbage[=@var{min}]
@itemx -C [@var{min}]
Recolecta basura---es decir, ficheros no alcanzables de @file{/gnu/store} y
subdirectorios. Esta operación es la predeterminada cuando no se especifican
opciones.

Cuando se proporciona @var{min}, para una vez que @var{min} bytes han sido
recolectados. @var{min} puede ser un número de bytes, o puede incluir una
unidad como sufijo, como @code{MiB} para mebibytes y @code{GB} para
gigabytes (@pxref{Block size, size specifications,, coreutils, GNU
Coreutils}).

Cuando se omite @var{min}, recolecta toda la basura.

@item --free-space=@var{libre}
@itemx -F @var{libre}
Recolecta basura hasta que haya espacio @var{libre} bajo @file{/gnu/store},
si es posible: @var{libre} denota espacio de almacenamiento, por ejemplo
@code{500MiB}, como se ha descrito previamente.

Cuando @var{libre} o más está ya disponible en @file{/gnu/store}, no hace
nada y sale inmediatamente.

@item --delete-generations[=@var{duración}]
@itemx -d [@var{duración}]
Antes de comenzar el proceso de recolección de basura, borra todas las
generaciones anteriores a @var{duración}, para todos los perfiles de la
usuaria; cuando se ejecuta como root esto aplica a los perfiles de
@emph{todas las usuarias}.

Por ejemplo, esta orden borra todas las generaciones de todos sus perfiles
que tengan más de 2 meses de antigüedad (excepto generaciones que sean las
actuales), y una vez hecho procede a liberar espacio hasta que al menos 10
GiB estén disponibles:

@example
guix gc -d 2m -F 10G
@end example

@item --delete
@itemx -D
Intenta borrar todos los ficheros del almacén y directorios especificados
como parámetros. Esto falla si alguno de los ficheros no están en el
almacén, o todavía están vivos.

@item --list-failures
Enumera los elementos del almacén correspondientes a construcciones fallidas
existentes en la caché.

Esto no muestra nada a menos que el daemon se haya ejecutado pasando
@option{--cache-failures} (@pxref{Invocación de guix-daemon,
@option{--cache-failures}}).

@item --list-roots
Enumera las raíces del recolector de basura poseídas por la usuaria; cuando
se ejecuta como root, enumera @emph{todas} las raíces del recolector de
basura.

@item --list-busy
Enumera los elementos del almacén que actualmente están siendo usados por
procesos en ejecución. Estos elementos del almacén se consideran de manera
efectiva raíces del recolector de basura: no pueden borrarse.

@item --clear-failures
Borra los elementos especificados del almacén de la caché de construcciones
fallidas.

De nuevo, esta opción únicamente tiene sentido cuando el daemon se inicia
con @option{--cache-failures}. De otro modo, no hace nada.

@item --list-dead
Muestra la lista de ficheros y directorios muertos todavía presentes en el
almacén---es decir, ficheros y directorios que ya no se pueden alcanzar
desde ninguna raíz.

@item --list-live
Muestra la lista de ficheros y directorios del almacén vivos.

@end table

Además, las referencias entre los ficheros del almacén pueden ser
consultadas:

@table @code

@item --references
@itemx --referrers
@cindex dependencias de un paquete
Enumera las referencias (o, respectivamente, los referentes) de los ficheros
del almacén pasados como parámetros.

@item --requisites
@itemx -R
@cindex clausura
Enumera los requisitos los ficheros del almacén pasados como parámetros. Los
requisitos incluyen los mismos ficheros del almacén, sus referencias, las
referencias de estas, recursivamente. En otras palabras, la lista devuelta
es la @dfn{clausura transitiva} de los ficheros del almacén.

@xref{Invocación de guix size}, para una herramienta que perfila el tamaño de la
clausura de un elemento. @xref{Invocación de guix graph}, para una herramienta de
visualización del grafo de referencias.

@item --derivers
@cindex derivación
Devuelve la/s derivación/es que conducen a los elementos del almacén dados
(@pxref{Derivaciones}).

Por ejemplo, esta orden:

@example
guix gc --derivers `guix package -I ^emacs$ | cut -f4`
@end example

@noindent
devuelve el/los fichero/s @file{.drv} que conducen al paquete @code{emacs}
instalado en su perfil.

Fíjese que puede haber cero ficheros @file{.drv} encontrados, por ejemplo
porque estos ficheros han sido recolectados. Puede haber más de un fichero
@file{.drv} encontrado debido a derivaciones de salida fija.
@end table

Por último, las siguientes opciones le permiten comprobar la integridad del
almacén y controlar el uso del disco.

@table @option

@item --verify[=@var{opciones}]
@cindex integridad, del almacén
@cindex comprobación de integridad
Verifica la integridad del almacén.

Por defecto, comprueba que todos los elementos del almacén marcados como
válidos en la base de datos del daemon realmente existen en
@file{/gnu/store}.

Cuando se proporcionan, @var{opciones} debe ser una lista separada por comas
que contenga uno o más valores @code{contents} and @code{repair}.

Cuando se usa @option{--verify=contents}, el daemon calcula el hash del
contenido de cada elemento del almacén y lo compara contra el hash de su
base de datos. Las incongruencias se muestran como corrupciones de
datos. Debido a que recorre @emph{todos los ficheros del almacén}, esta
orden puede tomar mucho tiempo, especialmente en sistemas con una unidad de
disco lenta.

@cindex reparar el almacén
@cindex corrupción, recuperarse de
El uso de @option{--verify=repair} o @option{--verify=contents,repair} hace
que el daemon intente reparar elementos corruptos del almacén obteniendo
sustituciones para dichos elementos (@pxref{Sustituciones}). Debido a que la
reparación no es atómica, y por tanto potencialmente peligrosa, está
disponible únicamente a la administradora del sistema. Una alternativa
ligera, cuando sabe exactamente qué elementos del almacén están corruptos,
es @command{guix build --repair} (@pxref{Invocación de guix build}).

@item --optimize
@cindex deduplicación
Optimiza el almacén sustituyendo ficheros idénticos por enlaces duros---esto
es la @dfn{deduplicación}.

The daemon performs deduplication after each successful build or archive
import, unless it was started with @option{--disable-deduplication}
(@pxref{Invocación de guix-daemon, @option{--disable-deduplication}}).  Thus,
this option is primarily useful when the daemon was running with
@option{--disable-deduplication}.

@end table

@node Invocación de guix pull
@section Invocación de @command{guix pull}

@cindex actualizar Guix
@cindex actualizar la versión de Guix
@cindex @command{guix pull}
@cindex pull
Los paquetes se instalan o actualizan con la última versión disponible en la
distribución disponible actualmente en su máquina local. Para actualizar
dicha distribución, junto a las herramientas de Guix, debe ejecutar
@command{guix pull}: esta orden descarga el último código fuente de Guix y
descripciones de paquetes, y lo despliega. El código fuente se descarga de
un repositorio @uref{https://git-scm.com, Git}, por defecto el repositorio
oficial de GNU@tie{}Guix, lo que no obstante puede ser personalizado.

Específicamente, @command{guix pull} descarga código de los @dfn{canales}
(@pxref{Canales}) especificados en una de las posibilidades siguientes, en
este orden:

@enumerate
@item
la opción @option{--channels};
@item
el fichero @file{~/.config/guix/channels.scm} de la usuaria;
@item
el fichero @file{/etc/guix/channels.scm} común al sistema;
@item
los canales predeterminados en código especificados en la variable
@code{%default-channels}.
@end enumerate

Una vez completada, @command{guix package} usará paquetes y versiones de
paquetes de esta copia recién obtenida de Guix. No solo eso, sino que todas
las órdenes de Guix y los módulos Scheme también se tomarán de la última
versión. Nuevas sub-órdenes @command{guix} incorporadas por la actualización
también estarán disponibles.

Cualquier usuaria puede actualizar su copia de Guix usando @command{guix
pull}, y el efecto está limitado a la usuaria que ejecute @command{guix
pull}. Por ejemplo, cuando la usuaria @code{root} ejecuta @command{guix
pull}, dicha acción no produce ningún efecto en la versión del Guix que la
usuaria @code{alicia} ve, y viceversa.

El resultado de ejecutar @command{guix pull} es un @dfn{perfil} disponible
bajo @file{~/.config/guix/current} conteniendo el último Guix. Por tanto,
asegúrese de añadirlo al inicio de sus rutas de búsqueda de modo que use la
última versión, de modo similar para el manual Info(@pxref{Documentación}).

@example
export PATH="$HOME/.config/guix/current/bin:$PATH"
export INFOPATH="$HOME/.config/guix/current/share/info:$INFOPATH"
@end example

The @option{--list-generations} or @option{-l} option lists past generations
produced by @command{guix pull}, along with details about their provenance:

@example
$ guix pull -l
Generación 1	10 jun 2018 00:18:18
  guix 65956ad
    URL del repositorio: https://git.savannah.gnu.org/git/guix.git
    rama: origin/master
    revisión: 65956ad3526ba09e1f7a40722c96c6ef7c0936fe

Generación 2	11 jun 2018 11:02:49
  guix e0cc7f6
    URL del repositorio: https://git.savannah.gnu.org/git/guix.git
    rama: origin/master
    revisión: e0cc7f669bec22c37481dd03a7941c7d11a64f1d
  2 paquetes nuevos: keepalived, libnfnetlink
  6 paquetes actualizados: emacs-nix-mode@@2.0.4,
    guile2.0-guix@@0.14.0-12.77a1aac, guix@@0.14.0-12.77a1aac,
    heimdal@@7.5.0, milkytracker@@1.02.00, nix@@2.0.4

Generación 3	13 jun 2018 23:31:07	(current)
  guix 844cc1c
    URL del repositorio: https://git.savannah.gnu.org/git/guix.git
    rama: origin/master
    revisión: 844cc1c8f394f03b404c5bb3aee086922373490c
  28 paquetes nuevos: emacs-helm-ls-git, emacs-helm-mu, @dots{}
  69 paquetes actualizados: borg@@1.1.6, cheese@@3.28.0, @dots{}
@end example

@ref{Invocación de guix describe, @command{guix describe}}, para otras formas de
describir el estado actual de Guix.

El perfil @code{~/.config/guix/current} funciona exactamente igual que los
perfiles creados por @command{guix package} (@pxref{Invocación de guix package}). Es decir, puede enumerar generaciones, volver a una generación
previa---esto es, la versión anterior de Guix---, etcétera:

@example
$ guix pull --roll-back
se pasó de la generación 3 a la 2
$ guix pull --delete-generations=1
borrando /var/guix/profiles/per-user/carlos/current-guix-1-link
@end example

También puede usar @command{guix package} (@pxref{Invocación de guix package})
para gestionar el perfil proporcionando su nombre de manera específica:
@example
$ guix package -p ~/.config/guix/current --roll-back
se pasó de la generación 3 a la 2
$ guix package -p ~/.config/guix/current --delete-generations=1
borrando /var/guix/profiles/per-user/carlos/current-guix-1-link
@end example

La orden @command{guix pull} se invoca habitualmente sin parámetros, pero
permite las siguientes opciones:

@table @code
@item --url=@var{url}
@itemx --commit=@var{revisión}
@itemx --branch=@var{rama}
Descarga el código para el canal @code{guix} de la @var{url} especificada,
en la @var{revisión} proporcionada (un ID de revisión Git representada como
una cadena hexadecimal), o @var{rama}.

@cindex @file{channels.scm}, fichero de configuración
@cindex fichero de configuración de canales
Estas opciones se proporcionan por conveniencia, pero también puede
especificar su configuración en el fichero
@file{~/.config/guix/channels.scm} o usando la opción @option{--channels}
(vea más adelante).

@item --channels=@var{fichero}
@itemx -C @var{fichero}
Lee la lista de canales de @var{fichero} en vez de
@file{~/.config/guix/channels.scm} o
@file{/etc/guix/channels.scm}. @var{fichero} debe contener código Scheme que
evalúe a una lista de objetos ``channel''. @xref{Canales}, para más
información.

@cindex noticias de los canales
@item --news
@itemx -N
Muestra la lista de paquetes añadidos o actualizados desde la última
generación, así como, ocasionalmente, noticias escritas por las autoras del
canal para las usuarias (@pxref{Canales, Writing Channel News}).

La información del paquete es la misma que la que se muestra cuando termina
@command{guix pull}, pero sin la elipsis; es también similar a la salida de
@command{guix pull -l} para la última generación (véase a continuación).

@item --list-generations[=@var{patrón}]
@itemx -l [@var{patrón}]
Enumera todas las generaciones de @file{~/.config/guix/current} o, si se
proporciona un @var{patrón}, el subconjunto de generaciones que correspondan
con el @var{patrón}. La sintaxis de @var{patrón} es la misma que @code{guix
package --list-generations} (@pxref{Invocación de guix package}).

@item --roll-back
@cindex vuelta atrás
@cindex deshacer transacciones
@cindex transacciones, deshaciendo
Vuelve a la @dfn{generación} previa de @file{~/.config/guix/current}---es
decir, deshace la última transacción.

@item --switch-generation=@var{patrón}
@itemx -S @var{patrón}
@cindex generaciones
Cambia a una generación particular definida por el @var{patrón}.

@var{pattern} may be either a generation number or a number prefixed with
``+'' or ``-''.  The latter means: move forward/backward by a specified
number of generations.  For example, if you want to return to the latest
generation after @option{--roll-back}, use @option{--switch-generation=+1}.

@item --delete-generations[=@var{patrón}]
@itemx -d [@var{patrón}]
Cuando se omite @var{patrón}, borra todas las generaciones excepto la
actual.

This command accepts the same patterns as @option{--list-generations}.  When
@var{pattern} is specified, delete the matching generations.  When
@var{pattern} specifies a duration, generations @emph{older} than the
specified duration match.  For instance, @option{--delete-generations=1m}
deletes generations that are more than one month old.

Si la generación actual entra en el patrón, @emph{no} será borrada.

Fíjese que borrar generaciones previene volver atrás a
ellas. Consecuentemente esta orden debe ser usada con cuidado.

@ref{Invocación de guix describe}, para una forma de mostrar información sobre
únicamente la generación actual.

@item --profile=@var{perfil}
@itemx -p @var{perfil}
Usa @var{perfil} en vez de @file{~/.config/guix/current}.

@item --dry-run
@itemx -n
Muestra qué revisión/es del canal serían usadas y qué se construiría o
sustituiría, sin efectuar ninguna acción real.

@item --allow-downgrades
Allow pulling older or unrelated revisions of channels than those currently
in use.

@cindex downgrade attacks, protection against
By default, @command{guix pull} protects against so-called ``downgrade
attacks'' whereby the Git repository of a channel would be reset to an
earlier or unrelated revision of itself, potentially leading you to install
older, known-vulnerable versions of software packages.

@quotation Nota
Make sure you understand its security implications before using
@option{--allow-downgrades}.
@end quotation

@item --system=@var{sistema}
@itemx -s @var{sistema}
Intenta construir paquetes para @var{sistema}---por ejemplo,
@code{x86_64-linux}---en vez del tipo de sistema de la máquina de
construcción.

@item --verbose
Produce salida prolija, escribiendo los logs de construcción por la salida
de error estándar.

@item --bootstrap
Use el Guile usado para el lanzamiento para construir el último Guix. Esta
opción es útil para las desarrolladoras de Guix únicamente.
@end table

El mecanismo de @dfn{canales} le permite instruir a @command{guix pull} de
qué repositorio y rama obtener los datos, así como repositorios
@emph{adicionales} que contengan módulos de paquetes que deben ser
desplegados. @xref{Canales}, para más información.

Además, @command{guix pull} acepta todas las opciones de construcción
comunes (@pxref{Opciones comunes de construcción}).

@node Canales
@section Canales

@cindex channels
@cindex @file{channels.scm}, fichero de configuración
@cindex fichero de configuración de canales
@cindex @command{guix pull}, fichero de configuración
@cindex configuración de @command{guix pull}
Guix y su colección de paquetes son actualizados ejecutando @command{guix
pull} (@pxref{Invocación de guix pull}). Por defecto @command{guix pull} descarga
y despliega el mismo Guix del repositorio oficial de GNU@tie{}Guix. Esto
puede ser personalizado definiendo @dfn{canales} en el fichero
@file{~/.config/guix/channels.scm}. Un canal especifica una URL y una rama
de un repositorio Git para ser desplegado, y @command{guix pull} puede ser
instruido para tomar los datos de uno o más canales. En otras palabras, los
canales se pueden usar para @emph{personalizar} y para @emph{extender} Guix,
como vemos a continuación.

@subsection Uso de un canal de Guix personalizado

El canal llamado @code{guix} especifica de donde el mismo Guix---sus
herramientas de línea de órdenes y su colección de paquetes---debe ser
descargado. Por ejemplo, suponga que quiere actualizar de su propia copia
del repositorio Guix en @code{example.org}, y específicamente la rama
@code{super-hacks}, para ello puede escribir en
@code{~/.config/guix/channels.scm} esta especificación:

@lisp
;; Le dice a 'guix pull' que use mi propio repositorio.
(list (channel
        (name 'guix)
        (url "https://example.org/mi-guix.git")
        (branch "super-hacks")))
@end lisp

@noindent
De aquí en adelante, @command{guix pull} obtendrá el código de la rama
@code{super-hacks} del repositorio en @code{example.org}.

@subsection Especificación de canales adicionales

@cindex extender la colección de paquetes (canales)
@cindex paquetes personales (canales)
@cindex canales, para paquetes personales
También puede especificar @emph{canales adicionales} de los que obtener
datos. Digamos que tiene un montón de variaciones personalizadas de paquetes
que piensa que no tiene mucho sentido contribuir al proyecto Guix, pero
quiere tener esos paquetes disponibles transparentemente en su línea de
órdenes. Primero escribiría módulos que contengan esas definiciones de
paquete (@pxref{Módulos de paquetes}), los mantendría en un repositorio Git, y
entonces usted y cualquier otra persona podría usarlos como un canal
adicional del que obtener paquetes. Limpio, ¿no?

@c What follows stems from discussions at
@c <https://debbugs.gnu.org/cgi/bugreport.cgi?bug=22629#134> as well as
@c earlier discussions on guix-devel@gnu.org.
@quotation Aviso
Antes de que, querida usuaria, grite---``¡Guau, esto es @emph{la
caña}!''---y publique su canal personal al mundo, nos gustaría compartir
algunas palabras de precaución:

@itemize
@item
Antes de publicar un canal, por favor considere contribuir sus definiciones
de paquete al propio Guix (@pxref{Contribuir}). Guix como proyecto es
abierto a software libre de todo tipo, y los paquetes en el propio Guix
están disponibles para todas las usuarias de Guix y se benefician del
proceso de gestión de calidad del proyecto.

@item
Cuando mantiene definiciones de paquete fuera de Guix, nosotras, las
desarrolladoras de Guix, consideramos que @emph{la carga de la
compatibilidad cae de su lado}. Recuerde que los módulos y definiciones de
paquetes son solo código Scheme que usa varias interfaces programáticas
(APIs). Queremos mantener la libertad de cambiar dichas interfaces para
seguir mejorando Guix, posiblemente en formas que pueden romper su
canal. Nunca cambiamos las interfaces gratuitamente, pero @emph{no} vamos
tampoco a congelar las interfaces.

@item
Corolario: si está usando un canal externo y el canal se rompe, por favor
@emph{informe del problema a las autoras del canal}, no al proyecto Guix.
@end itemize

¡Ha quedado advertida! Habiendo dicho esto, creemos que los canales externos
son una forma práctica de ejercitar su libertad para aumentar la colección
de paquetes de Guix y compartir su mejoras, que son pilares básicos del
@uref{https://www.gnu.org/philosophy/free-sw.html, software libre}. Por
favor, envíenos un correo a @email{guix-devel@@gnu.org} si quiere hablar
sobre esto.
@end quotation

Para usar un canal, escriba en @code{~/.config/guix/channels.scm} para
instruir a @command{guix pull} para obtener datos de él @emph{además} de los
canales Guix predeterminados:

@vindex %default-channels
@lisp
;; Añade mis paquetes personales a aquellos que Guix provee.
(cons (channel
        (name 'mis-paquetes-personales)
        (url "https://example.org/paquetes-personales.git"))
      %default-channels)
@end lisp

@noindent
Fíjese que el fragmento previo es (¡como siempre!)@: código Scheme; usamos
@code{cons} para añadir un canal a la lista de canales a la que la variable
@code{%default-channels} hace referencia (@pxref{Pairs, @code{cons} and
lists,, guile, GNU Guile Reference Manual}). Con el fichero en este lugar,
@command{guix pull} no solo construye Guix sino también los módulos de
paquetes de su propio repositorio. El resultado en
@file{~/.config/guix/current} es la unión de Guix con sus propios módulos de
paquetes:

@example
$ guix pull --list-generations
@dots{}
Generation 19	Aug 27 2018 16:20:48
  guix d894ab8
    repository URL: https://git.savannah.gnu.org/git/guix.git
    branch: master
    commit: d894ab8e9bfabcefa6c49d9ba2e834dd5a73a300
  mis-paquetes-personales dd3df5e
    repository URL: https://example.org/paquetes-personales.git
    branch: master
    commit: dd3df5e2c8818760a8fc0bd699e55d3b69fef2bb
  11 new packages: mi-gimp, mi-emacs-con-cosas, @dots{}
  4 packages upgraded: emacs-racket-mode@@0.0.2-2.1b78827, @dots{}
@end example

@noindent
La salida de @command{guix pull} previa muestra que la generación@tie{}19
incluye tanto Guix como paquetes del canal
@code{mis-paquetes-personales}. Entre los paquetes nuevos y actualizados que
son enumerados, algunos como @code{mi-gimp} y @code{mi-emacs-con-cosas}
pueden venir de @code{mis-paquetes-personales}, mientras que otros vienen
del canal predeterminado de Guix.

Para crear un canal, cree un repositorio Git que contenga sus propios
módulos de paquetes y haga que esté disponible. El repositorio puede
contener cualquier cosa, pero un canal útil contendrá módulos Guile que
exportan paquetes. Una vez comience a usar un canal, Guix se comportará como
si el directorio raíz del repositorio Git de dicho canal hubiese sido
añadido a la ruta de carga de Guile (@pxref{Load Paths,,, guile, GNU Guile
Reference Manual}). Por ejemplo, si su canal contiene un fichero en
@file{mis-paquetes/mis-herramientas.scm} que define un módulo, entonces
dicho módulo estará disponible bajo el nombre @code{(mis-paquetes
mis-herramientas)}, y podrá usarlo como cualquier otro módulo
(@pxref{Módulos,,, guile, GNU Guile Reference Manual}).

@cindex dependencias, canales
@cindex metadatos, canales
@subsection Declaración de dependencias de canales

Las autoras de canales pueden decidir aumentar una colección de paquetes
proporcionada por otros canales. Pueden declarar su canal como dependiente
de otros canales en el fichero de metadatos @file{.guix-channel}, que debe
encontrarse en la raíz del repositorio del canal.

Este fichero de metadatos debe contener una expresión-S simple como esta:

@lisp
(channel
 (version 0)
 (dependencies
  (channel
   (name una-coleccion)
   (url "https://example.org/primera-coleccion.git"))
  (channel
   (name otra-coleccion)
   (url "https://example.org/segunda-coleccion.git")
   (branch "pruebas"))))
@end lisp

En el ejemplo previo, este canal se declara como dependiente de otros dos
canales, que se obtendrán de manera automática. Los módulos proporcionados
por el canal se compilarán en un entorno donde los módulos de todos estos
canales declarados estén disponibles.

De cara a la confianza proporcionada y el esfuerzo que supondrá su
mantenimiento, debería evitar depender de canales que no controle, y debería
intentar minimizar el número de dependencias.

@cindex subdirectorio, canales
@subsection Módulos de paquetes en un subdirectorio

Como autora de un canal, es posible que desee mantener los módulos de su
canal en un subdirectorio. Si sus módulos se encuentran en el subdirectorio
@file{guix}, debe añadir un fichero @file{.guix-channel} de metadatos que
contenga:

@lisp
(channel
  (version 0)
  (directory "guix"))
@end lisp

@cindex noticias, para canales
@subsection Escritura de noticias del canal

Las autoras los canales pueden querer ocasionalmente comunicar información a
sus usuarias acerca de cambios importantes en el canal. Podrían mandar un
correo a todo el mundo, pero esto no es tan conveniente.

En vez de eso, los canales proporcionan un @dfn{fichero de noticias}; cuando
las usuarias de un canal ejecutan @command{guix pull}, dicho fichero de
noticias se lee automáticamente y @command{guix pull --news} puede mostrar
los anuncios que correspondan a las nuevas revisiones que se han obtenido,
si existen.

Para hacerlo, las autoras del canal deben declarar primero el nombre del
fichero de noticias en su fichero @file{.guix-channel}:

@lisp
(channel
  (version 0)
  (news-file "etc/noticias.txt"))
@end lisp

El fichero de noticias en sí, @file{etc/noticias.txt} en este ejemplo, debe
ser similar a este:

@lisp
(channel-news
  (version 0)
  (entry (tag "the-bug-fix")
         (title (en "Fixed terrible bug")
                (fr "Oh la la")
                (es "Podemos volver a dormir en calma"))
         (body (en "@@emph@{Good news@}!  It's fixed!")
               (eo "Certe ĝi pli bone funkcias nun!")
               (es "¡Al fin se ha corregido el error!")))
  (entry (commit "bdcabe815cd28144a2d2b4bc3c5057b051fa9906")
         (title (en "Added a great package")
                (ca "Què vol dir guix?")
                (ca "Nuevo paquete añadido"))
         (body (en "Don't miss the @@code@{hello@} package!")
               (es "Atención a la versátil herramienta @@code@{hello@}"))))
@end lisp

Este fichero consiste en una lista de @dfn{entradas de noticias}. Cada
entrada@footnote{NdT: ``entry'' en inglés} se asocia a una revisión o una
etiqueta: describe los cambios llevados a cabo en ella, y posiblemente
también en revisiones anteriores. Las usuarias ven las entradas únicamente
la primera vez que obtienen la revisión a la que la entrada hace referencia.

El campo del título (@code{title}) debe ser un resumen de una línea mientras
que el cuerpo de la noticia (@code{body}) puede ser arbitrariamente largo, y
ambos pueden contener marcas de Texinfo (@pxref{Overview,,, texinfo, GNU
Texinfo}). Tanto el título como el cuerpo son una lista de tuplas de
etiqueta de lengua y mensaje, lo que permite a @command{guix pull} mostrar
las noticias en la lengua que corresponde a la localización de la usuaria.

Si desea traducir las noticias siguiendo un flujo de trabajo basado en
gettext, puede extraer las cadenas traducibles con @command{xgettext}
(@pxref{xgettext Invocation,,, gettext, GNU Gettext Utilities}). Por
ejemplo, asumiendo que escribe las entradas de noticias primero en inglés,
la siguiente orden crea un fichero PO que contiene las cadenas a traducir:

@example
xgettext -o news.po -l scheme -ken etc/news.scm
@end example

En resumen, sí, puede usar su canal como un blog. Pero tenga en cuenta que
esto puede que @emph{no sea exactamente} lo que sus usuarias podrían
esperar.

@subsection Replicación de Guix

@cindex clavar, canales
@cindex replicar Guix
@cindex reproducibilidad, de Guix
La salida de @command{guix pull --list-generations} previa muestra
precisamente qué revisiones se usaron para construir esta instancia de
Guix. Por tanto podemos replicarla, digamos, en otra máquina, proporcionando
una especificaciones de canales en @file{~/.config/guix/channels.scm} que
está ``clavada'' en estas revisiones:

@lisp
;; Despliega unas revisiones específicas de mis canales de interés.
(list (channel
       (name 'guix)
       (url "https://git.savannah.gnu.org/git/guix.git")
       (commit "d894ab8e9bfabcefa6c49d9ba2e834dd5a73a300"))
      (channel
       (name 'mis-paquetes-personales)
       (url "https://example.org/paquetes-personales.git")
       (branch "dd3df5e2c8818760a8fc0bd699e55d3b69fef2bb")))
@end lisp

La orden @command{guix describe --format=channels} puede incluso generar
esta lista de canales directamente (@pxref{Invocación de guix describe}). El
fichero resultante puede usarse con la opción -C de @command{guix pull}
(@pxref{Invocación de guix pull}) o @command{guix time-machine} (@pxref{Invocación de guix time-machine}).

En este punto las dos máquinas ejecutan @emph{exactamente el mismo Guix},
con acceso a @emph{exactamente los mismos paquetes}. La salida de
@command{guix build gimp} en una máquina debe ser exactamente la misma, bit
a bit, que la salida de la misma orden en la otra máquina. Esto también
significa que ambas máquinas tienen acceso a todo el código fuente de Guix
y, transitivamente, a todo el código fuente de cada paquete que define.

Esto le proporciona superpoderes, lo que le permite seguir la pista de la
procedencia de los artefactos binarios con un grano muy fino, y reproducir
entornos de software a su voluntad---un tipo de capacidad de
``meta-reproducibilidad'', si lo desea. @xref{Inferiores}, para otro modo de
tomar ventaja de estos superpoderes.

@node Invocación de guix time-machine
@section Invocación de @command{guix time-machine}

@cindex @command{guix time-machine}
@cindex clavar, canales
@cindex replicar Guix
@cindex reproducibilidad, de Guix

La orden @command{guix time-machine} proporciona acceso a otras revisiones
de Guix, por ejemplo para instalar versiones antiguas de un paquete, o para
reproducir una computación en un entorno idéntico. La revisión de Guix que
se usará se define por el identificador de una revisión o por un fichero de
descripción de canales creado con @command{guix describe} (@pxref{Invocación de guix describe}).

La sintaxis general es:

@example
guix time-machine @var{opciones}@dots{} -- @var{orden} @var{param}@dots{}
@end example

donde @var{orden} and @var{param}@dots{} se proporcionan sin modificar a la
orden @command{guix} de la revisión especificada. Las @var{opciones} que
definen esta revisión son las mismas que se usan con @command{guix pull}
(@pxref{Invocación de guix pull}):

@table @code
@item --url=@var{url}
@itemx --commit=@var{revisión}
@itemx --branch=@var{rama}
Usa el canal @code{guix} de la @var{url} especificada, en la @var{revisión}
proporcionada (un ID de revisión Git representada como una cadena
hexadecimal), o @var{rama}.

@item --channels=@var{fichero}
@itemx -C @var{fichero}
Lee la lista de canales de @var{fichero}. @var{fichero} debe contener código
Scheme que evalúe a una lista de objetos ``channel''. @xref{Canales}, para
más información.
@end table

Como con @command{guix pull}, la ausencia de opciones significa que se usará
la última revisión de la rama master. Por tanto la orden

@example
guix time-machine -- build hello
@end example

construirá el paquete @code{hello} como esté definido en la rama master, que
en general es la última revisión de Guix que haya instalado. ¡Los viajes
temporales funcionan en ambas direcciones!

Tenga en cuenta que @command{guix time-machine} puede desencadenar
construcciones de canales y sus dependencias, y que pueden controlarse
mediante las opciones de construcción estándar (@pxref{Opciones comunes de construcción}).

@node Inferiores
@section Inferiores

@c TODO: Remove this once we're more confident about API stability.
@quotation Nota
La funcionalidad descrita aquí es una ``versión de evaluación tecnológica''
en la versión @value{VERSION}. Como tal, la interfaz está sujeta a cambios.
@end quotation

@cindex inferiores
@cindex composición de revisiones de Guix
A veces necesita mezclar paquetes de revisiones de la revisión de Guix que
está ejecutando actualmente con paquetes disponibles en una revisión
diferente. Los @dfn{inferiores} de Guix le permiten conseguirlo componiendo
diferentes revisiones de Guix de modo arbitrario.

@cindex paquetes inferiores
Técnicamente, un ``inferior'' es esencialmente un proceso Guix separado
conectado con su Guix principal a través de una sesión interactiva
(@pxref{Invocación de guix repl}). El módulo @code{(guix inferior)} le permite
crear inferiores y comunicarse con ellos. También proporciona una interfaz
de alto nivel para buscar y manipular los paquetes que un inferior
proporciona---@dfn{paquetes de inferiores}.

Cuando se combina con los canales (@pxref{Canales}), los inferiores
proporcionan una forma simple de interactuar con una revisión separada de
Guix. Por ejemplo, asumamos que desea instalar en su perfil el paquete
@code{guile} actual, junto al paquete @code{guile-json} como existía en una
revisión más antigua de Guix---quizá porque las versiones nuevas de
@code{guile-json} tienen un API incompatible y quiere ejecutar su código
contra la API antigua. Para hacerlo, puede escribir un manifiesto para
usarlo con @code{guix package --manifest} (@pxref{Invocación de guix package});
en dicho manifiesto puede crear un inferior para esa versión antigua de Guix
que le interesa, y buscará el paquete @code{guile-json} en el inferior:

@lisp
(use-modules (guix inferior) (guix channels)
             (srfi srfi-1))   ;para 'first'

(define channels
  ;; Esta es la revisión antigua de donde queremos
  ;; extraer guile-json.
  (list (channel
         (name 'guix)
         (url "https://git.savannah.gnu.org/git/guix.git")
         (commit
          "65956ad3526ba09e1f7a40722c96c6ef7c0936fe"))))

(define inferior
  ;; Un inferior que representa la revisión previa.
  (inferior-for-channels channels))

;; Ahora crea un manifiesto con el paquete "guile" actual
;; y el antiguo paquete "guile-json".
(packages->manifest
 (list (first (lookup-inferior-packages inferior "guile-json"))
       (specification->package "guile")))
@end lisp

En su primera ejecución, @command{guix package --manifest} puede tener que
construir el canal que especificó antes de crear el inferior; las siguientes
ejecuciones serán mucho más rápidas porque la revisión de Guix estará en la
caché.

El módulo @code{(guix inferior)} proporciona los siguientes procedimientos
para abrir un inferior:

@deffn {Procedimiento Scheme} inferior-for-channels @var{canales} @
   [#:cache-directory] [#:ttl]
Devuelve un inferior para @var{canales}, una lista de canales. Usa la caché
en @var{cache-directory}, donde las entradas pueden ser reclamadas después
de @var{ttl} segundos. Este procedimiento abre una nueva conexión al daemon
de construcción.

Como efecto secundario, este procedimiento puede construir o sustituir
binarios para @var{canales}, lo cual puede tomar cierto tiempo.
@end deffn

@deffn {Procedimiento Scheme} open-inferior @var{directorio} @
  [#:command "bin/guix"]
Abre el Guix inferior en @var{directorio}, ejecutando
@code{@var{directorio}/@var{command} repl} o su equivalente. Devuelve
@code{#f} si el inferior no pudo ser ejecutado.
@end deffn

@cindex paquetes inferiores
Los procedimientos enumerados a continuación le permiten obtener y manipular
paquetes de inferiores.

@deffn {Procedimiento Scheme} inferior-packages @var{inferior}
Devuelve la lista de paquetes conocida por @var{inferior}.
@end deffn

@deffn {Procedimiento Scheme} lookup-inferior-packages @var{inferior} @var{nombre} @
   [@var{versión}]
Devuelve la lista ordenada de paquetes del inferior que corresponden con
@var{nombre} en @var{inferior}, con los números de versión más altos
primero. Si @var{versión} tiene un valor verdadero, devuelve únicamente
paquetes con un número de versión cuyo prefijo es @var{versión}.
@end deffn

@deffn {Procedimiento Scheme} inferior-package? @var{obj}
Devuelve verdadero si @var{obj} es un paquete inferior.
@end deffn

@deffn {Procedimiento Scheme} inferior-package-name @var{paquete}
@deffnx {Procedimiento Scheme} inferior-package-version @var{paquete}
@deffnx {Procedimiento Scheme} inferior-package-synopsis @var{paquete}
@deffnx {Procedimiento Scheme} inferior-package-description @var{paquete}
@deffnx {Procedimiento Scheme} inferior-package-home-page @var{paquete}
@deffnx {Procedimiento Scheme} inferior-package-location @var{paquete}
@deffnx {Procedimiento Scheme} inferior-package-inputs @var{paquete}
@deffnx {Procedimiento Scheme} inferior-package-native-inputs @var{paquete}
@deffnx {Procedimiento Scheme} inferior-package-propagated-inputs @var{paquete}
@deffnx {Procedimiento Scheme} inferior-package-transitive-propagated-inputs @var{paquete}
@deffnx {Procedimiento Scheme} inferior-package-native-search-paths @var{paquete}
@deffnx {Procedimiento Scheme} inferior-package-transitive-native-search-paths @var{paquete}
@deffnx {Procedimiento Scheme} inferior-package-search-paths @var{paquete}
Estos procedimientos son la contraparte de los accesos a los registros de
paquete (@pxref{Referencia de package}). La mayor parte funcionan interrogando
al inferior del que @var{paquete} viene, por lo que el inferior debe estar
vivo cuando llama a dichos procedimientos.
@end deffn

Los paquetes de inferiores pueden ser usados transparentemente como
cualquier otro paquete u objeto-tipo-fichero en expresiones-G
(@pxref{Expresiones-G}). También se manejan transparentemente por el
procedimiento @code{packages->manifest}, el cual se usa habitualmente en los
manifiestos (@pxref{Invocación de guix package, the @option{--manifest} option of
@command{guix package}}). Por tanto puede insertar un paquete de inferior
prácticamente en cualquier lugar que pueda insertar un paquete normal: en
manifiestos, en el campo @code{packages} de su declaración
@code{operating-system}, etcétera.

@node Invocación de guix describe
@section Invocación de @command{guix describe}

@cindex reproducibilidad
@cindex replicar Guix
A menudo desea responder a preguntas como: ``¿Qué revisión de Guix estoy
usando?'' o ``¿Qué canales estoy usando?'' Esto es una información muy útil
en muchas situaciones: si quiere @emph{replicar} un entorno en una máquina
diferente o cuenta de usuaria, si desea informar de un error o determinar
qué cambio en los canales que usa lo causó, o si quiere almacenar el estado
de su sistema por razones de reproducibilidad. La orden @command{guix
describe} responde a estas preguntas.

Cuando se ejecuta desde un @command{guix} bajado con @command{guix pull},
@command{guix describe} muestra el/los canal/es desde el/los que se
construyó, incluyendo la URL de su repositorio y los IDs de las revisiones
(@pxref{Canales}):

@example
$ guix describe
Generation 10	Sep 03 2018 17:32:44	(current)
  guix e0fa68c
    repository URL: https://git.savannah.gnu.org/git/guix.git
    branch: master
    commit: e0fa68c7718fffd33d81af415279d6ddb518f727
@end example

Si está familiarizado con el sistema de control de versiones Git, esto es
similar a @command{git describe}; la salida también es similar a la de
@command{guix pull --list-generations}, pero limitada a la generación actual
(@pxref{Invocación de guix pull, the @option{--list-generations} option}). Debido
a que el ID de revisión Git mostrado antes refiere sin ambigüedades al
estado de Guix, esta información es todo lo necesario para describir la
revisión de Guix que usa, y también para replicarla.

Para facilitar la replicación de Guix, también se le puede solicitar a
@command{guix describe} devolver una lista de canales en vez de la
descripción legible por humanos mostrada antes:

@example
$ guix describe -f channels
(list (channel
        (name 'guix)
        (url "https://git.savannah.gnu.org/git/guix.git")
        (commit
          "e0fa68c7718fffd33d81af415279d6ddb518f727")))
@end example

@noindent
Puede almacenar esto en un fichero y se lo puede proporcionar a
@command{guix pull -C} en otra máquina o en un momento futuro, lo que
instanciará @emph{esta revisión exacta de Guix} (@pxref{Invocación de guix pull,
the @option{-C} option}). De aquí en adelante, ya que puede desplegar la
misma revisión de Guix, puede también @emph{replicar un entorno completo de
software}. Nosotras humildemente consideramos que esto es
@emph{impresionante}, ¡y esperamos que le guste a usted también!

Los detalles de las opciones aceptadas por @command{guix describe} son las
siguientes:

@table @code
@item --format=@var{formato}
@itemx -f @var{formato}
Produce salida en el @var{formato} especificado, uno de:

@table @code
@item human
produce salida legible por humanos;
@item channels
produce una lista de especificaciones de canales que puede ser pasada a
@command{guix pull -C} o instalada como @file{~/.config/guix/channels.scm}
(@pxref{Invocación de guix pull});
@item json
@cindex JSON
produce una lista de especificaciones de canales en formato JSON;
@item recutils
produce una lista de especificaciones de canales en formato Recutils.
@end table

@item --list-formats
Display available formats for @option{--format} option.

@item --profile=@var{perfil}
@itemx -p @var{perfil}
Muestra información acerca del @var{perfil}.
@end table

@node Invocación de guix archive
@section Invocación de @command{guix archive}

@cindex @command{guix archive}
@cindex archive
La orden @command{guix archive} permite a las usuarias @dfn{exportar}
ficheros del almacén en un único archivador, e @dfn{importarlos}
posteriormente en una máquina que ejecute Guix. En particular, permite que
los ficheros del almacén sean transferidos de una máquina al almacén de otra
máquina.

@quotation Nota
Si está buscando una forma de producir archivos en un formato adecuado para
herramientas distintas a Guix, @pxref{Invocación de guix pack}.
@end quotation

@cindex exportar elementos del almacén
Para exportar ficheros del almacén como un archivo por la salida estándar,
ejecute:

@example
guix archive --export @var{opciones} @var{especificaciones}...
@end example

@var{especificaciones} deben ser o bien nombres de ficheros del almacén o
especificaciones de paquetes, como las de @command{guix package}
(@pxref{Invocación de guix package}). Por ejemplo, la siguiente orden crea un
archivo que contiene la salida @code{gui} del paquete @code{git} y la salida
principal de @code{emacs}:

@example
guix archive --export git:gui /gnu/store/...-emacs-24.3 > great.nar
@end example

Si los paquetes especificados no están todavía construidos, @command{guix
archive} los construye automáticamente. El proceso de construcción puede
controlarse mediante las opciones de construcción comunes (@pxref{Opciones comunes de construcción}).

Para transferir el paquete @code{emacs} a una máquina conectada por SSH, se
ejecutaría:

@example
guix archive --export -r emacs | ssh otra-maquina guix archive --import
@end example

@noindent
De manera similar, un perfil de usuaria completo puede transferirse de una
máquina a otra de esta manera:

@example
guix archive --export -r $(readlink -f ~/.guix-profile) | \
  ssh otra-maquina guix archive --import
@end example

@noindent
However, note that, in both examples, all of @code{emacs} and the profile as
well as all of their dependencies are transferred (due to @option{-r}),
regardless of what is already available in the store on the target machine.
The @option{--missing} option can help figure out which items are missing
from the target store.  The @command{guix copy} command simplifies and
optimizes this whole process, so this is probably what you should use in
this case (@pxref{Invocación de guix copy}).

@cindex nar, formato de archivo
@cindex archivo normalizado (nar)
Los archivos se almacenan en el formato de ``archivo normalizado'' o
``nar'', el cual es comparable a `tar' en el espíritu, pero con diferencias
que lo hacen más apropiado para nuestro propósito. Primero, en vez de
almacenar todos los metadatos Unix de cada fichero, el formato nar solo
menciona el tipo de fichero (normal, directorio o enlace simbólico); los
permisos Unix y el par propietario/grupo se descartan. En segundo lugar, el
orden en el cual las entradas de directorios se almacenan siempre siguen el
orden de los nombres de ficheros de acuerdo a la ordenación de cadenas en la
localización C. Esto hace la producción del archivo completamente
determinista.

@c FIXME: Add xref to daemon doc about signatures.
Durante la exportación, el daemon firma digitalmente los contenidos del
archivo, y la firma digital se adjunta. Durante la importación, el daemon
verifica la firma y rechaza la importación en caso de una firma inválida o
si la clave firmante no está autorizada.

Las opciones principales son:

@table @code
@item --export
Export the specified store files or packages (see below).  Write the
resulting archive to the standard output.

Dependencies are @emph{not} included in the output, unless
@option{--recursive} is passed.

@item -r
@itemx --recursive
When combined with @option{--export}, this instructs @command{guix archive}
to include dependencies of the given items in the archive.  Thus, the
resulting archive is self-contained: it contains the closure of the exported
store items.

@item --import
Read an archive from the standard input, and import the files listed therein
into the store.  Abort if the archive has an invalid digital signature, or
if it is signed by a public key not among the authorized keys (see
@option{--authorize} below).

@item --missing
Lee una lista de nombres de ficheros del almacén de la entrada estándar, uno
por línea, y escribe en la salida estándar el subconjunto de estos ficheros
que faltan en el almacén.

@item --generate-key[=@var{parámetros}]
@cindex firmar, archivos
Generate a new key pair for the daemon.  This is a prerequisite before
archives can be exported with @option{--export}.  Note that this operation
usually takes time, because it needs to gather enough entropy to generate
the key pair.

The generated key pair is typically stored under @file{/etc/guix}, in
@file{signing-key.pub} (public key) and @file{signing-key.sec} (private key,
which must be kept secret).  When @var{parameters} is omitted, an ECDSA key
using the Ed25519 curve is generated, or, for Libgcrypt versions before
1.6.0, it is a 4096-bit RSA key.  Alternatively, @var{parameters} can
specify @code{genkey} parameters suitable for Libgcrypt (@pxref{General
public-key related Functions, @code{gcry_pk_genkey},, gcrypt, The Libgcrypt
Reference Manual}).

@item --authorize
@cindex autorizar, archivos
Autoriza importaciones firmadas con la clave pública pasada por la entrada
estándar. La clave pública debe estar en el ``formato avanzado de
expresiones-s''---es decir, el mismo formato que el fichero
@file{signing-key.pub}.

La lista de claves autorizadas se mantiene en el fichero editable por
personas @file{/etc/guix/acl}. El fichero contiene
@url{https://people.csail.mit.edu/rivest/Sexp.text, ``expresiones-s en
formato avanzado''} y está estructurado como una lista de control de acceso
en el formato @url{https://theworld.com/~cme/spki.txt, Infraestructura
Simple de Clave Pública (SPKI)}.

@item --extract=@var{directorio}
@itemx -x @var{directorio}
Lee un único elemento del archivo como es ofrecido por los servidores de
sustituciones (@pxref{Sustituciones}) y lo extrae a @var{directorio}. Esta es
una operación de bajo nivel necesitada únicamente para casos muy concretos;
véase a continuación.

Por ejemplo, la siguiente orden extrae la sustitución de Emacs ofrecida por
@code{@value{SUBSTITUTE-SERVER}} en @file{/tmp/emacs}:

@example
$ wget -O - \
  https://@value{SUBSTITUTE-SERVER}/nar/gzip/@dots{}-emacs-24.5 \
  | gunzip | guix archive -x /tmp/emacs
@end example

Los archivos de un único elemento son diferentes de los archivos de
múltiples elementos producidos por @command{guix archive --export};
contienen un único elemento del almacén, y @emph{no} embeben una firma. Por
tanto esta operación @emph{no} verifica la firma y su salida debe
considerarse insegura.

The primary purpose of this operation is to facilitate inspection of archive
contents coming from possibly untrusted substitute servers (@pxref{Invocación de guix challenge}).

@item --list
@itemx -t
Lee un único elemento del archivo como es ofrecido por los servidores de
sustituciones (@pxref{Sustituciones}) e imprime la lista de ficheros que
contiene, como en este ejemplo:

@example
$ wget -O - \
  https://@value{SUBSTITUTE-SERVER}/nar/lzip/@dots{}-emacs-26.3 \
  | lzip -d | guix archive -t
@end example

@end table


@c *********************************************************************
@node Desarrollo
@chapter Desarrollo

@cindex desarrollo de software
Si es una desarrolladora de software, Guix le proporciona herramientas que
debería encontrar útiles---independientemente del lenguaje en el que
desarrolle actualmente. Esto es sobre lo que trata este capítulo.

La orden @command{guix environment} proporciona una manera conveniente de
configurar un @dfn{entorno de desarrollo} que contenga todas las
dependencias y herramientas necesarias para trabajar en el paquete de
software de su elección. La orden @command{guix pack} le permite crear
@dfn{aplicaciones empaquetadas} que pueden ser distribuidas con facilidad a
usuarias que no usen Guix.

@menu
* Invocación de guix environment::  Configurar entornos de desarrollo.
* Invocación de guix pack::  Creación de empaquetados de software.
* La cadena de herramientas de GCC::  Working with languages supported by 
                                        GCC.
@end menu

@node Invocación de guix environment
@section Invocación de @command{guix environment}

@cindex entornos de construcción reproducibles
@cindex entornos de desarrollo
@cindex @command{guix environment}
@cindex entorno, entorno de construcción de paquetes
El propósito de @command{guix environment} es ayudar a las hackers en la
creación de entornos de desarrollo reproducibles sin modificar los paquetes
de su perfil. La herramienta @command{guix environment} toma uno o más
paquetes, construye todas sus entradas y crea un entorno shell para usarlos.

La sintaxis general es:

@example
guix environment @var{opciones} @var{paquete}@dots{}
@end example

El ejemplo siguiente lanza un nuevo shell preparado para el desarrollo de
GNU@tie{}Guile:

@example
guix environment guile
@end example

If the needed dependencies are not built yet, @command{guix environment}
automatically builds them.  The environment of the new shell is an augmented
version of the environment that @command{guix environment} was run in.  It
contains the necessary search paths for building the given package added to
the existing environment variables.  To create a ``pure'' environment, in
which the original environment variables have been unset, use the
@option{--pure} option@footnote{Users sometimes wrongfully augment
environment variables such as @env{PATH} in their @file{~/.bashrc} file.  As
a consequence, when @command{guix environment} launches it, Bash may read
@file{~/.bashrc}, thereby introducing ``impurities'' in these environment
variables.  It is an error to define such environment variables in
@file{.bashrc}; instead, they should be defined in @file{.bash_profile},
which is sourced only by log-in shells.  @xref{Bash Startup Files,,, bash,
The GNU Bash Reference Manual}, for details on Bash start-up files.}.

@vindex GUIX_ENVIRONMENT
@command{guix environment} defines the @env{GUIX_ENVIRONMENT} variable in
the shell it spawns; its value is the file name of the profile of this
environment.  This allows users to, say, define a specific prompt for
development environments in their @file{.bashrc} (@pxref{Bash Startup
Files,,, bash, The GNU Bash Reference Manual}):

@example
if [ -n "$GUIX_ENVIRONMENT" ]
then
    export PS1="\u@@\h \w [dev]\$ "
fi
@end example

@noindent
...@: o para explorar el perfil:

@example
$ ls "$GUIX_ENVIRONMENT/bin"
@end example

Adicionalmente, más de un paquete puede ser especificado, en cuyo caso se
usa la unión de las entradas de los paquetes proporcionados. Por ejemplo, la
siguiente orden lanza un shell donde todas las dependencias tanto de Guile
como de Emacs están disponibles:

@example
guix environment guile emacs
@end example

A veces no se desea una sesión interactiva de shell. Una orden arbitraria se
puede invocar usando el valor @code{--} para separar la orden del resto de
los parámetros:

@example
guix environment guile -- make -j4
@end example

En otras situaciones, es más conveniente especificar una lista de paquetes
necesarios en el entorno. Por ejemplo, la siguiente orden ejecuta
@command{python} desde un entorno que contiene Python@tie{}2.7 y NumPy:

@example
guix environment --ad-hoc python2-numpy python-2.7 -- python
@end example

Furthermore, one might want the dependencies of a package and also some
additional packages that are not build-time or runtime dependencies, but are
useful when developing nonetheless.  Because of this, the @option{--ad-hoc}
flag is positional.  Packages appearing before @option{--ad-hoc} are
interpreted as packages whose dependencies will be added to the
environment.  Packages appearing after are interpreted as packages that will
be added to the environment directly.  For example, the following command
creates a Guix development environment that additionally includes Git and
strace:

@example
guix environment --pure guix --ad-hoc git strace
@end example

@cindex container
En ocasiones es deseable aislar el entorno tanto como sea posible, para
obtener la máxima pureza y reproducibilidad. En particular, cuando se usa
Guix en una distribución anfitriona que no es el sistema Guix, es deseable
prevenir acceso a @file{/usr/bin} y otros recursos del sistema desde el
entorno de desarrollo. Por ejemplo, la siguiente orden lanza un REPL Guile
en un ``contenedor'' donde únicamente el almacén y el directorio actual
están montados:

@example
guix environment --ad-hoc --container guile -- guile
@end example

@quotation Nota
The @option{--container} option requires Linux-libre 3.19 or newer.
@end quotation

@cindex certificates
Another typical use case for containers is to run security-sensitive
applications such as a web browser.  To run Eolie, we must expose and share
some files and directories; we include @code{nss-certs} and expose
@file{/etc/ssl/certs/} for HTTPS authentication; finally we preserve the the
@env{DISPLAY} environment variable since containerized graphical
applications won't display without it.

@example
guix environment --preserve='^DISPLAY$' --container --network \
  --expose=/etc/machine-id \
  --expose=/etc/ssl/certs/ \
  --share=$HOME/.local/share/eolie/=$HOME/.local/share/eolie/ \
  --ad-hoc eolie nss-certs dbus --  eolie
@end example

Las opciones disponibles se resumen a continuación.

@table @code
@item --root=@var{fichero}
@itemx -r @var{fichero}
@cindex entorno persistente
@cindex raíz del recolector de basura, para entornos
Hace que @var{fichero} sea un enlace simbólico al perfil para este entorno,
y lo registra como una raíz del recolector de basura.

Esto es útil si desea proteger su entorno de la recolección de basura,
hacerlo ``persistente''.

Cuando se omite esta opción, el entorno se protege de la recolección de
basura únicamente por la duración de la sesión @command{guix
environment}. Esto significa que la siguiente vez que vuelva a crear el
mismo entorno, puede tener que reconstruir o volver a descargar
paquetes. @xref{Invocación de guix gc}, para más información sobre las raíces del
recolector de basura.

@item --expression=@var{expr}
@itemx -e @var{expr}
Crea un entorno para el paquete o lista de paquetes a los que evalúa
@var{expr}.

Por ejemplo, ejecutando:

@example
guix environment -e '(@@ (gnu packages maths) petsc-openmpi)'
@end example

inicia un shell con el entorno para esta variante específica del paquete
PETSc.

Ejecutar:

@example
guix environment --ad-hoc -e '(@@ (gnu) %base-packages)'
@end example

inicia un shell con todos los paquetes básicos del sistema disponibles.

Las órdenes previas usan únicamente la salida predeterminada de los paquetes
dados. Para seleccionar otras salidas, tuplas de dos elementos pueden ser
especificadas:

@example
guix environment --ad-hoc -e '(list (@@ (gnu packages bash) bash) "include")'
@end example

@item --load=@var{fichero}
@itemx -l @var{fichero}
Crea un entorno para el paquete o la lista de paquetes a la que el código en
@var{fichero} evalúa.

Como un ejemplo, @var{fichero} puede contener una definición como esta
(@pxref{Definición de paquetes}):

@lisp
@verbatiminclude environment-gdb.scm
@end lisp

@item --manifest=@var{fichero}
@itemx -m @var{fichero}
Crea un entorno para los paquetes contenidos en el objeto manifest devuelto
por el código Scheme en @var{file}. Esta opción se puede repetir varias
veces, en cuyo caso los manifiestos se concatenan.

Esto es similar a la opción del mismo nombre en @command{guix package}
(@pxref{profile-manifest, @option{--manifest}}) y usa los mismos ficheros de
manifiesto.

@item --ad-hoc
Incluye todos los paquetes especificados en el entorno resultante, como si
un paquete @i{ad hoc} hubiese sido definido con ellos como entradas. Esta
opción es útil para la creación rápida un entorno sin tener que escribir una
expresión de paquete que contenga las entradas deseadas.

Por ejemplo, la orden:

@example
guix environment --ad-hoc guile guile-sdl -- guile
@end example

ejecuta @command{guile} en un entorno donde están disponibles Guile y
Guile-SDL.

Fíjese que este ejemplo solicita implícitamente la salida predeterminada de
@code{guile} y @code{guile-sdl}, pero es posible solicitar una salida
específica---por ejemplo, @code{glib:bin} solicita la salida @code{bin} de
@code{glib} (@pxref{Paquetes con múltiples salidas}).

This option may be composed with the default behavior of @command{guix
environment}.  Packages appearing before @option{--ad-hoc} are interpreted
as packages whose dependencies will be added to the environment, the default
behavior.  Packages appearing after are interpreted as packages that will be
added to the environment directly.

@item --pure
Unset existing environment variables when building the new environment,
except those specified with @option{--preserve} (see below).  This has the
effect of creating an environment in which search paths only contain package
inputs.

@item --preserve=@var{regexp}
@itemx -E @var{regexp}
Cuando se usa junto a @option{--pure}, preserva las variables de entorno que
corresponden con @var{regexp}---en otras palabras, las pone en una lista de
variables de entorno que deben preservarse. Esta opción puede repetirse
varias veces.

@example
guix environment --pure --preserve=^SLURM --ad-hoc openmpi @dots{} \
  -- mpirun @dots{}
@end example

This example runs @command{mpirun} in a context where the only environment
variables defined are @env{PATH}, environment variables whose name starts
with @samp{SLURM}, as well as the usual ``precious'' variables (@env{HOME},
@env{USER}, etc.).

@item --search-paths
Muestra las definiciones de variables de entorno que componen el entorno.

@item --system=@var{sistema}
@itemx -s @var{sistema}
Intenta construir para @var{sistema}---por ejemplo, @code{i686-linux}.

@item --container
@itemx -C
@cindex container
Run @var{command} within an isolated container.  The current working
directory outside the container is mapped inside the container.
Additionally, unless overridden with @option{--user}, a dummy home directory
is created that matches the current user's home directory, and
@file{/etc/passwd} is configured accordingly.

The spawned process runs as the current user outside the container.  Inside
the container, it has the same UID and GID as the current user, unless
@option{--user} is passed (see below).

@item --network
@itemx -N
Para contenedores, comparte el espacio de nombres de red con el sistema
anfitrión. Los contenedores creados sin esta opción únicamente tienen acceso
a la red local.

@item --link-profile
@itemx -P
For containers, link the environment profile to @file{~/.guix-profile}
within the container.  This is equivalent to running the command @samp{ln -s
$GUIX_ENVIRONMENT ~/.guix-profile} within the container.  Linking will fail
and abort the environment if the directory already exists, which will
certainly be the case if @command{guix environment} was invoked in the
user's home directory.

Certain packages are configured to look in @file{~/.guix-profile} for
configuration files and data;@footnote{For example, the @code{fontconfig}
package inspects @file{~/.guix-profile/share/fonts} for additional fonts.}
@option{--link-profile} allows these programs to behave as expected within
the environment.

@item --user=@var{usuaria}
@itemx -u @var{usuaria}
Para contenedores, usa el nombre de usuaria @var{usuaria} en vez de la
actual. La entrada generada en @file{/etc/passwd} dentro del contenedor
contendrá el nombre @var{usuaria}; su directorio será
@file{/home/@var{usuaria}} y ningún dato GECOS de la usuaria se copiará. Más
aún, el UID y GID dentro del contenedor son 1000. @var{usuaria} no debe
existir en el sistema.

Additionally, any shared or exposed path (see @option{--share} and
@option{--expose} respectively) whose target is within the current user's
home directory will be remapped relative to @file{/home/USER}; this includes
the automatic mapping of the current working directory.

@example
# expondrá las rutas /home/foo/ddt, /home/foo/prueba y /home/foo/objetivo
cd $HOME/ddt
guix environment --container --user=foo \
     --expose=$HOME/prueba \
     --expose=/tmp/objetivo=$HOME/objetivo
@end example

Mientras esto limita el escape de la identidad de la usuaria a través de las
rutas de sus directorios y cada uno de los campos de usuaria, esto es
únicamente un componente útil de una solución de privacidad/anonimato más
amplia---no una solución completa.

@item --no-cwd
For containers, the default behavior is to share the current working
directory with the isolated container and immediately change to that
directory within the container.  If this is undesirable, @option{--no-cwd}
will cause the current working directory to @emph{not} be automatically
shared and will change to the user's home directory within the container
instead.  See also @option{--user}.

@item --expose=@var{fuente}[=@var{destino}]
@itemx --share=@var{fuente}[=@var{destino}]
For containers, @option{--expose} (resp. @option{--share}) exposes the file
system @var{source} from the host system as the read-only (resp. writable)
file system @var{target} within the container.  If @var{target} is not
specified, @var{source} is used as the target mount point in the container.

El ejemplo a continuación lanza una sesión interactiva de Guile en un
contenedor donde el directorio principal de la usuaria es accesible en modo
solo-lectura a través del directorio @file{/intercambio}:

@example
guix environment --container --expose=$HOME=/intercambio --ad-hoc guile -- guile
@end example

@end table

Además, @command{guix environment} acepta todas las opciones comunes de
construcción que permite @command{guix build} (@pxref{Opciones comunes de construcción})
así como las opciones de transformación de paquetes (@pxref{Opciones de transformación de paquetes}).

@node Invocación de guix pack
@section Invocación de @command{guix pack}

De manera ocasional querrá dar software a gente que (¡todavía!) no tiene la
suerte de usar Guix. Usted les diría que ejecuten @command{guix package -i
@var{algo}}, pero eso no es posible en este caso. Aquí es donde viene
@command{guix pack}.

@quotation Nota
Si está buscando formas de intercambiar binarios entre máquinas que ya
ejecutan Guix, @pxref{Invocación de guix copy}, @ref{Invocación de guix publish}, y
@ref{Invocación de guix archive}.
@end quotation

@cindex pack
@cindex empaquetado
@cindex aplicación empaquetada
@cindex empaquetado de software
La orden @command{guix pack} crea un @dfn{paquete} reducido o
@dfn{empaquetado de software}: crea un archivador tar u otro tipo que
contiene los binarios del software en el que está interesada y todas sus
dependencias. El archivo resultante puede ser usado en una máquina que no
tiene Guix, y la gente puede ejecutar exactamente los mismos binarios que
usted tiene con Guix. El paquete en sí es creado de forma reproducible
bit-a-bit, para que cualquiera pueda verificar que realmente contiene los
resultados de construcción que pretende distribuir.

Por ejemplo, para crear un empaquetado que contenga Guile, Emacs, Geiser y
todas sus dependencias, puede ejecutar:

@example
$ guix pack guile emacs geiser
@dots{}
/gnu/store/@dots{}-pack.tar.gz
@end example

El resultado aquí es un archivador tar que contiene un directorio de
@file{/gnu/store} con todos los paquetes relevantes. El archivador
resultante contiene un @dfn{perfil} con los tres paquetes de interés; el
perfil es el mismo que se hubiera creado por @command{guix package -i}. Este
es el mecanismo usado para crear el propio archivador de binarios separado
de Guix (@pxref{Instalación binaria}).

Las usuarias de este empaquetad tendrán que ejecutar
@file{/gnu/store/@dots{}-profile/bin/guile} para ejecutar guile, lo que
puede resultar inconveniente. Para evitarlo, puede crear, digamos, un enlace
simbólico @file{/opt/gnu/bin} al perfil: 

@example
guix pack -S /opt/gnu/bin=bin guile emacs geiser
@end example

@noindent
De este modo, las usuarias pueden escribir alegremente
@file{/opt/gnu/bin/guile} y disfrutar.

@cindex binarios reposicionables, con @command{guix pack}
What if the recipient of your pack does not have root privileges on their
machine, and thus cannot unpack it in the root file system? In that case,
you will want to use the @option{--relocatable} option (see below).  This
option produces @dfn{relocatable binaries}, meaning they they can be placed
anywhere in the file system hierarchy: in the example above, users can
unpack your tarball in their home directory and directly run
@file{./opt/gnu/bin/guile}.

@cindex Docker, construir una imagen con guix pack
De manera alternativa, puede producir un empaquetado en el formato de imagen
Docker usando la siguiente orden:

@example
guix pack -f docker -S /bin=bin guile guile-readline
@end example

@noindent
El resultado es un archivador ``tar'' que puede ser proporcionado a la orden
@command{docker load}, seguida de @code{docker run}:

@example
docker load < @var{fichero}
docker run -ti guile-guile-readline /bin/guile
@end example

@noindent
donde @var{fichero} es la imagen devuelta por @var{guix pack}, y
@code{guile-guile-readline} es la ``etiqueta de imagen''. Véase la
@uref{https://docs.docker.com/engine/reference/commandline/load/,
documentación de Docker} para más información.

@cindex Singularity, construir una imagen con guix pack
@cindex SquashFS, construir una imagen con guix pack
Otra opción más es producir una imagen SquashFS con la siguiente orden:

@example
guix pack -f squashfs bash guile emacs geiser
@end example

@noindent
The result is a SquashFS file system image that can either be mounted or
directly be used as a file system container image with the
@uref{https://www.sylabs.io/docs/, Singularity container execution
environment}, using commands like @command{singularity shell} or
@command{singularity exec}.

Varias opciones de la línea de órdenes le permiten personalizar su
empaquetado:

@table @code
@item --format=@var{formato}
@itemx -f @var{formato}
Produce un empaquetado en el @var{formato} específico.

Los formatos disponibles son:

@table @code
@item tarball
Es el formato predeterminado. Produce un archivador que contiene todos los
binarios y enlaces simbólicos especificados.

@item docker
Produce un archivador que sigue la
@uref{https://github.com/docker/docker/blob/master/image/spec/v1.2.md,
especificación de imágenes Docker}. El ``nombre de repositorio'' como
aparece en la salida de la orden @command{docker images} se calcula a partir
de los nombres de paquete proporcionados en la línea de órdenes o en el
fichero de manifiesto.

@item squashfs
Produce una imagen SquashFS que contiene todos los binarios y enlaces
simbólicos especificados, así como puntos de montaje vacíos para sistemas de
ficheros virtuales como procfs.

@quotation Nota
Singularity @emph{necesita} que proporcione @file{/bin/sh} en la imagen. Por
esta razón, @command{guix pack -f squashfs} siempre implica @code{-S
/bin=bin}. Por tanto, su invocación de @command{guix pack} debe siempre
comenzar de manera similar a esta:

@example
guix pack -f squashfs bash @dots{}
@end example

Si se olvida del paquete @code{bash} (o similar), @command{singularity run}
y @command{singularity exec} fallarán con el mensaje ``no existe el fichero
o directorio'', lo que no sirve de ayuda.
@end quotation
@end table

@cindex binarios reposicionables
@item --relocatable
@itemx -R
Produce @dfn{binarios reposicionables}---es decir, binarios que se pueden
encontrar en cualquier lugar de la jerarquía del sistema de ficheros, y
ejecutarse desde allí.

When this option is passed once, the resulting binaries require support for
@dfn{user namespaces} in the kernel Linux; when passed
@emph{twice}@footnote{Here's a trick to memorize it: @code{-RR}, which adds
PRoot support, can be thought of as the abbreviation of ``Really
Relocatable''.  Neat, isn't it?}, relocatable binaries fall to back to other
techniques if user namespaces are unavailable, and essentially work
anywhere---see below for the implications.

Por ejemplo, si crea un empaquetado que contiene Bash con:

@example
guix pack -RR -S /mybin=bin bash
@end example

@noindent
...@: puede copiar ese empaquetado a una máquina que no tiene Guix, y desde
su directorio, como una usuaria normal, ejecutar:

@example
tar xf pack.tar.gz
./mibin/sh
@end example

@noindent
En ese shell, si escribe @code{ls /gnu/store}, notará que @file{/gnu/store}
muestra y contiene todas las dependencias de @code{bash}, ¡incluso cuando la
máquina no tiene el directorio @file{/gnu/store}! Esto es probablemente el
modo más simple de desplegar software construido en Guix en una máquina
no-Guix.

@quotation Nota
No obstante hay un punto a tener en cuenta: esta técnica descansa en la
característica de @dfn{espacios de nombres de usuaria} del núcleo Linux, la
cual permite a usuarias no privilegiadas montar o cambiar la raíz. Versiones
antiguas de Linux no los implementan, y algunas distribuciones GNU/Linux los
desactivan.

To produce relocatable binaries that work even in the absence of user
namespaces, pass @option{--relocatable} or @option{-R} @emph{twice}.  In
that case, binaries will try user namespace support and fall back to another
@dfn{execution engine} if user namespaces are not supported.  The following
execution engines are supported:

@table @code
@item default
Try user namespaces and fall back to PRoot if user namespaces are not
supported (see below).

@item performance
Try user namespaces and fall back to Fakechroot if user namespaces are not
supported (see below).

@item userns
Run the program through user namespaces and abort if they are not supported.

@item proot
Run through PRoot.  The @uref{https://proot-me.github.io/, PRoot} program
provides the necessary support for file system virtualization.  It achieves
that by using the @code{ptrace} system call on the running program.  This
approach has the advantage to work without requiring special kernel support,
but it incurs run-time overhead every time a system call is made.

@item fakechroot
Run through Fakechroot.  @uref{https://github.com/dex4er/fakechroot/,
Fakechroot} virtualizes file system accesses by intercepting calls to C
library functions such as @code{open}, @code{stat}, @code{exec}, and so on.
Unlike PRoot, it incurs very little overhead.  However, it does not always
work: for example, some file system accesses made from within the C library
are not intercepted, and file system accesses made @i{via} direct syscalls
are not intercepted either, leading to erratic behavior.
@end table

@vindex GUIX_EXECUTION_ENGINE
When running a wrapped program, you can explicitly request one of the
execution engines listed above by setting the @code{GUIX_EXECUTION_ENGINE}
environment variable accordingly.
@end quotation

@cindex punto de entrada, para imágenes de Docker
@item --entry-point=@var{orden}
Usa @var{orden} como el @dfn{punto de entrada} del empaquetado resultante,
si el formato de empaquetado lo permite---actualmente @code{docker} y
@code{squashfs} (Singularity) lo permiten. @var{orden} debe ser una ruta
relativa al perfil contenido en el empaquetado.

El punto de entrada especifica la orden que herramientas como @code{docker
run} o @code{singularity run} arrancan de manera automática de forma
predeterminada. Por ejemplo, puede ejecutar:

@example
guix pack -f docker --entry-point=bin/guile guile
@end example

El empaquetado resultante puede cargarse fácilmente y @code{docker run} sin
parámetros adicionales lanzará @code{bin/guile}:

@example
docker load -i pack.tar.gz
docker run @var{image-id}
@end example

@item --expression=@var{expr}
@itemx -e @var{expr}
Considera el paquete al que evalúa @var{expr}

This has the same purpose as the same-named option in @command{guix build}
(@pxref{Opciones de construcción adicionales, @option{--expression} in @command{guix
build}}).

@item --manifest=@var{fichero}
@itemx -m @var{fichero}
Usa los paquetes contenidos en el objeto manifest devuelto por el código
Scheme en @var{fichero}. Esta opción puede repetirse varias veces, en cuyo
caso los manifiestos se concatenan.

Esto tiene un propósito similar al de la opción del mismo nombre en
@command{guix package} (@pxref{profile-manifest, @option{--manifest}}) y usa
los mismos ficheros de manifiesto. Esto le permite definir una colección de
paquetes una vez y usarla tanto para crear perfiles como para crear archivos
en máquinas que no tienen instalado Guix. Fíjese que puede especificar
@emph{o bien} un fichero de manifiesto @emph{o bien} una lista de paquetes,
pero no ambas.

@item --system=@var{sistema}
@itemx -s @var{sistema}
Intenta construir paquetes para @var{sistema}---por ejemplo,
@code{x86_64-linux}---en vez del tipo de sistema de la máquina de
construcción.

@item --target=@var{tripleta}
@cindex compilación cruzada
Cross-build for @var{triplet}, which must be a valid GNU triplet, such as
@code{"aarch64-linux-gnu"} (@pxref{Specifying target triplets, GNU
configuration triplets,, autoconf, Autoconf}).

@item --compression=@var{herramienta}
@itemx -C @var{herramienta}
Comprime el archivador resultante usando @var{herramienta}---un valor que
puede ser @code{gzip}, @code{bzip2}, @code{xz}, @code{lzip} o @code{none}
para no usar compresión.

@item --symlink=@var{spec}
@itemx -S @var{spec}
Añade los enlaces simbólicos especificados por @var{spec} al
empaquetado. Esta opción puede aparecer varias veces.

La forma de @var{spec} es @code{@var{fuente}=@var{destino}}, donde
@var{fuente} es el enlace simbólico que será creado y @var{destino} es el
destino del enlace simbólico.

Por ejemplo, @code{-S /opt/gnu/bin=bin} crea un enlace simbólico
@file{/opt/gnu/bin} apuntando al subdirectorio @file{bin} del perfil.

@item --save-provenance
Almacena la información de procedencia para paquetes proporcionados en la
línea de órdenes. La información de procedencia incluye la URL y revisión de
los canales en uso (@pxref{Canales}).

La información de procedencia se almacena en el fichero
@file{/gnu/store/@dots{}-profile/manifest} dentro del empaquetado, junto a
los metadatos habituales del paquete---el nombre y la versión de cada
paquete, sus entradas propagadas, etcétera. Es información útil para la
parte receptora del empaquetado, quien de ese modo conoce como se obtuvo
(supuestamente) dicho empaquetado.

Esta opción no se usa de manera predeterminada debido a que, como las marcas
de tiempo, la información de procedencia no aportan nada al proceso de
construcción. En otras palabras, hay una infinidad de URL de canales e
identificadores de revisiones que pueden llevar al mismo
empaquetado. Almacenar estos metadatos ``silenciosos'' en la salida puede
potencialmente romper la propiedad de reproducibilidad bit a bit entre
fuentes y binarios.

@item --root=@var{fichero}
@itemx -r @var{fichero}
@cindex raíces del recolector de basura, para empaquetados
Hace que @var{fichero} sea un enlace simbólico al empaquetado resultante, y
lo registra como una raíz del recolector de basura.

@item --localstatedir
@itemx --profile-name=@var{nombre}
Incluye el ``directorio de estado local'', @file{/var/guix}, en el
empaquetado resultante, y notablemente el perfil
@file{/var/guix/profiles/per-user/root/@var{nombre}}---por defecto
@var{nombre} es @code{guix-profile}, que corresponde con
@file{~root/.guix-profile}.

@file{/var/guix} contiene la base de datos del almacén (@pxref{El almacén})
así como las raíces del recolector de basura (@pxref{Invocación de guix gc}). Proporcionarlo junto al empaquetado significa que el almacén está
``completo'' y Guix puede trabajar con él; no proporcionarlo significa que
el almacén está ``muerto'': no se pueden añadir o borrar nuevos elementos
después de la extracción del empaquetado.

Un caso de uso para esto es el archivador tar autocontenido de binarios de
Guix (@pxref{Instalación binaria}).

@item --derivation
@itemx -d
Imprime el nombre de la derivación que construye el empaquetado.

@item --bootstrap
Usa los binarios del lanzamiento para construir el empaquetado. Esta opción
es útil únicamente a las desarrolladoras de Guix.
@end table

Además, @command{guix pack} acepta todas las opciones comunes de
construcción (@pxref{Opciones comunes de construcción}) y todas las opciones de
transformación de paquetes (@pxref{Opciones de transformación de paquetes}).


@node La cadena de herramientas de GCC
@section La cadena de herramientas de GCC

@cindex GCC
@cindex ld-wrapper
@cindex linker wrapper
@cindex toolchain, for C development
@cindex toolchain, for Fortran development

If you need a complete toolchain for compiling and linking C or C++ source
code, use the @code{gcc-toolchain} package.  This package provides a
complete GCC toolchain for C/C++ development, including GCC itself, the GNU
C Library (headers and binaries, plus debugging symbols in the @code{debug}
output), Binutils, and a linker wrapper.

The wrapper's purpose is to inspect the @code{-L} and @code{-l} switches
passed to the linker, add corresponding @code{-rpath} arguments, and invoke
the actual linker with this new set of arguments.  You can instruct the
wrapper to refuse to link against libraries not in the store by setting the
@env{GUIX_LD_WRAPPER_ALLOW_IMPURITIES} environment variable to @code{no}.

The package @code{gfortran-toolchain} provides a complete GCC toolchain for
Fortran development.  For other languages, please use @samp{guix search gcc
toolchain} (@pxref{guix-search,, Invoking guix package}).

@c *********************************************************************
@node Interfaz programática
@chapter Interfaz programática

GNU Guix proporciona viarias interfaces programáticas Scheme (APIs) para
definir, construir y consultar paquetes. La primera interfaz permite a las
usuarias escribir definiciones de paquetes a alto nivel. Estas definiciones
referencian conceptos familiares de empaquetamiento, como el nombre y la
versión de un paquete, su sistema de construcción y sus dependencias. Estas
definiciones se pueden convertir en acciones concretas de construcción.

Las acciones de construcción son realizadas por el daemon Guix, en
delegación de las usuarias. En una configuración estándar, el daemon tiene
acceso de escritura al almacén---el directorio @file{/gnu/store}---mientras
que las usuarias no. En la configuración recomendada el daemon también
realiza las construcciones en chroots, bajo usuarias específicas de
construcción, para minimizar la interferencia con el resto del sistema.

@cindex derivación
Las APIs de nivel más bajo están disponibles para interactuar con el daemon
y el almacén. Para instruir al daemon para realizar una acción de
construcción, las usuarias realmente proporcionan una @dfn{derivación}. Una
derivación es una representación de bajo nivel de las acciones de
construcción a tomar, y el entorno en el que deberían suceder---las
derivaciones son a las definiciones de paquetes lo que es el ensamblador a
los programas en C. El término ``derivación'' viene del hecho de que los
resultados de la construcción @emph{derivan} de ellas.

Este capítulo describe todas estas APIs en orden, empezando por las
definiciones de alto nivel de paquetes.

@menu
* Módulos de paquetes::     Paquetes bajo el punto de vista del 
                               programador.
* Definición de paquetes::  Definir nuevos paquetes.
* Sistemas de construcción::  Especificar como se construyen los paquetes.
* El almacén::              Manipular el almacén de paquetes.
* Derivaciones::             Interfaz de bajo nivel de las derivaciones de 
                               los paquetes.
* La mónada del almacén::  Interfaz puramente funcional del almacén.
* Expresiones-G::            Manipular expresiones de construcción.
* Invocación de guix repl::  Enredar con Guix interactivamente.
@end menu

@node Módulos de paquetes
@section Módulos de paquetes

Desde un punto de vista programático, las definiciones de paquetes de la
distribución GNU se proporcionan por módulos Guile en el espacio de nombres
@code{(gnu packages @dots{})}@footnote{Fíjese que los paquetes bajo el
espacio de nombres de módulo @code{(gnu packages @dots{})} no son
necesariamente ``paquetes GNU''. Este esquema de nombrado de módulos sigue
la convención habitual de Guile para el nombrado de módulos: @code{gnu}
significa que estos módulos se distribuyen como parte del sistema GNU, y
@code{packages} identifica módulos que definen paquetes.} (@pxref{Módulos,
Guile modules,, guile, GNU Guile Reference Manual}). Por ejemplo, el módulo
@code{(gnu packages emacs)} exporta una variable con nombre @code{emacs},
que está asociada a un objeto @code{<package>} (@pxref{Definición de paquetes}).

El espacio de nombres de módulos @code{(gnu packages @dots{})} se recorre
automáticamente en busca de paquetes en las herramientas de línea de
ordenes. Por ejemplo, cuando se ejecuta @code{guix install emacs}, todos los
módulos @code{(gnu packages @dots{})} son procesados hasta encontrar uno que
exporte un objeto de paquete cuyo nombre sea @code{emacs}. Esta búsqueda de
paquetes se implementa en el módulo @code{(gnu packages)}.

@cindex personalización, de paquetes
@cindex ruta de búsqueda de módulos de paquetes
Users can store package definitions in modules with different names---e.g.,
@code{(my-packages emacs)}@footnote{Note that the file name and module name
must match.  For instance, the @code{(my-packages emacs)} module must be
stored in a @file{my-packages/emacs.scm} file relative to the load path
specified with @option{--load-path} or @env{GUIX_PACKAGE_PATH}.
@xref{Modules and the File System,,, guile, GNU Guile Reference Manual}, for
details.}.  There are two ways to make these package definitions visible to
the user interfaces:

@enumerate
@item
By adding the directory containing your package modules to the search path
with the @code{-L} flag of @command{guix package} and other commands
(@pxref{Opciones comunes de construcción}), or by setting the @env{GUIX_PACKAGE_PATH}
environment variable described below.

@item
Mediante la definición de un @dfn{canal} y la configuración de @command{guix
pull} de manera que se actualice desde él. Un canal es esencialmente un
repositorio Git que contiene módulos de paquetes. @xref{Canales}, para más
información sobre cómo definir y usar canales.
@end enumerate

@env{GUIX_PACKAGE_PATH} works similarly to other search path variables:

@defvr {Variable de entorno} GUIX_PACKAGE_PATH
Es una lista separada por dos puntos de directorios en los que se buscarán
módulos de paquetes adicionales. Los directorios enumerados en esta variable
tienen preferencia sobre los propios módulos de la distribución.
@end defvr

La distribución es @dfn{auto-contenida} y completamente @dfn{basada en el
lanzamiento inicial}: cada paquete se construye basado únicamente en otros
paquetes de la distribución. La raíz de este grafo de dependencias es un
pequeño conjunto de @dfn{binarios del lanzamiento inicial}, proporcionados
por el módulo @code{(gnu packages bootstrap)}. Para más información sobre el
lanzamiento inicial, @pxref{Lanzamiento inicial}.

@node Definición de paquetes
@section Definición de paquetes

La interfaz de alto nivel de las definiciones de paquetes está implementada
en los módulos @code{(guix packages)} y @code{(guix build-system)}. Como un
ejemplo, la definición de paquete, o @dfn{receta}, para el paquete GNU Hello
es como sigue:

@lisp
(define-module (gnu packages hello)
  #:use-module (guix packages)
  #:use-module (guix download)
  #:use-module (guix build-system gnu)
  #:use-module (guix licenses)
  #:use-module (gnu packages gawk))

(define-public hello
  (package
    (name "hello")
    (version "2.10")
    (source (origin
              (method url-fetch)
              (uri (string-append "mirror://gnu/hello/hello-" version
                                  ".tar.gz"))
              (sha256
               (base32
                "0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i"))))
    (build-system gnu-build-system)
    (arguments '(#:configure-flags '("--enable-silent-rules")))
    (inputs `(("gawk" ,gawk)))
    (synopsis "Hello, GNU world: An example GNU package")
    (description "Guess what GNU Hello prints!")
    (home-page "https://www.gnu.org/software/hello/")
    (license gpl3+)))
@end lisp

@noindent
Sin ser una experta en Scheme---pero conociendo un poco de inglés---, la
lectora puede haber supuesto el significado de varios campos aquí. Esta
expresión asocia la variable @code{hello} al objeto @code{<package>}, que
esencialmente es un registro (@pxref{SRFI-9, Scheme records,, guile, GNU
Guile Reference Manual}). Este objeto de paquete puede ser inspeccionado
usando los procedimientos encontrados en el módulo @code{(guix packages)};
por ejemplo, @code{(package-name hello)}
devuelve---¡sorpresa!---@code{"hello"}.

Con suerte, puede que sea capaz de importar parte o toda la definición del
paquete de su interés de otro repositorio, usando la orden @code{guix
import} (@pxref{Invocación de guix import}).

En el ejemplo previo, @var{hello} se define en un módulo para ella,
@code{(gnu packages hello)}. Técnicamente, esto no es estrictamente
necesario, pero es conveniente hacerlo: todos los paquetes definidos en
módulos bajo @code{(gnu packages @dots{})} se reconocen automáticamente en
las herramientas de línea de órdenes (@pxref{Módulos de paquetes}).

Hay unos pocos puntos que merece la pena destacar de la definición de
paquete previa:

@itemize
@item
El campo @code{source} del paquete es un objeto @code{<origin>}
(@pxref{Referencia de origin}, para la referencia completa). Aquí se usa el
método @code{url-fetch} de @code{(guix download)}, lo que significa que la
fuente es un fichero a descargar por FTP o HTTP.

El prefijo @code{mirror://gnu} instruye a @code{url-fetch} para usar uno de
los espejos GNU definidos en @code{(guix download)}.

El campo @code{sha256} especifica el hash SHA256 esperado del fichero
descargado. Es obligatorio, y permite a Guix comprobar la integridad del
fichero. La forma @code{(base32 @dots{})} introduce la representación base32
del hash. Puede obtener esta información con @code{guix download}
(@pxref{Invocación de guix download}) y @code{guix hash} (@pxref{Invocación de guix hash}).

@cindex parches
Cuando sea necesario, la forma @code{origin} también puede tener un campo
@code{patches} con la lista de parches a ser aplicados, y un campo
@code{snippet} con una expresión Scheme para modificar el código fuente.

@item
@cindex Sistema de construcción GNU
El campo @code{build-system} especifica el procedimiento de construcción del
paquete (@pxref{Sistemas de construcción}). Aquí, @var{gnu-build-system} representa el
familiar sistema de construcción GNU, donde los paquetes pueden
configurarse, construirse e instalarse con la secuencia de ordenes habitual
@code{./configure && make && make check && make install}.

@item
The @code{arguments} field specifies options for the build system
(@pxref{Sistemas de construcción}).  Here it is interpreted by @var{gnu-build-system}
as a request run @file{configure} with the @option{--enable-silent-rules}
flag.

@cindex quote
@cindex creación de literales
@findex '
@findex quote
¿Qué son estas comillas simples (@code{'})? Son sintaxis Scheme para
introducir una lista literal; @code{'} es sinónimo de
@code{quote}. @xref{Expression Syntax, quoting,, guile, GNU Guile Reference
Manual}, para más detalles. Aquí el valor del campo @code{arguments} es una
lista de parámetros pasada al sistema de construcción, como con @code{apply}
(@pxref{Fly Evaluation, @code{apply},, guile, GNU Guile Reference Manual}).

La secuencia almohadilla-dos puntos (@code{#:}) define una @dfn{palabra
clave} Scheme (@pxref{Keywords,,, guile, GNU Guile Reference Manual}), y
@code{#:configure-flags} es una palabra clave usada para pasar un parámetro
nominal al sistema de construcción (@pxref{Coding With Keywords,,, guile,
GNU Guile Reference Manual}).

@item
El campo @code{inputs} especifica las entradas al proceso de
construcción---es decir, dependencias de tiempo de construcción o ejecución
del paquete. Aquí, definimos una entrada llamada @code{"gawk"}, cuyo valor
es el de la variable @var{gawk}; @var{gawk} en sí apunta a un objeto
@code{<package>}.

@cindex acento grave (quasiquote)
@findex `
@findex quasiquote
@cindex coma (unquote)
@findex ,
@findex unquote
@findex ,@@
@findex unquote-splicing
De nuevo, @code{`} (un acento grave, sinónimo de @code{quasiquote}) nos
permite introducir una lista literal en el campo @code{inputs}, mientras que
@code{,} (una coma, sinónimo de @code{unquote}) nos permite insertar un
valor en dicha lista (@pxref{Expression Syntax, unquote,, guile, GNU Guile
Reference Manual}).

Fíjese que no hace falta que GCC, Coreutils, Bash y otras herramientas
esenciales se especifiquen como entradas aquí. En vez de eso,
@var{gnu-build-system} se hace cargo de asegurar que están presentes
(@pxref{Sistemas de construcción}).

No obstante, cualquier otra dependencia debe ser especificada en el campo
@code{inputs}. Las dependencias no especificadas aquí simplemente no estarán
disponibles para el proceso de construcción, provocando posiblemente un
fallo de construcción.
@end itemize

@xref{Referencia de package}, para una descripción completa de los campos
posibles.

Una vez la definición de paquete esté en su lugar, el paquete puede ser
construido realmente usando la herramienta de línea de órdenes @code{guix
build} (@pxref{Invocación de guix build}), pudiendo resolver cualquier fallo de
construcción que encuentre (@pxref{Depuración de fallos de construcción}). Puede volver
a la definición del paquete fácilmente usando la orden @command{guix edit}
(@pxref{Invocación de guix edit}). @xref{Guías de empaquetamiento}, para más
información sobre cómo probar definiciones de paquetes, y @ref{Invocación de guix lint}, para información sobre cómo comprobar la consistencia del estilo de
una definición.
@vindex GUIX_PACKAGE_PATH
Por último, @pxref{Canales}, para información sobre cómo extender la
distribución añadiendo sus propias definiciones de paquetes en un ``canal''.

Finalmente, la actualización de la definición con una nueva versión oficial
puede ser automatizada parcialmente por la orden @command{guix refresh}
(@pxref{Invocación de guix refresh}).

Behind the scenes, a derivation corresponding to the @code{<package>} object
is first computed by the @code{package-derivation} procedure.  That
derivation is stored in a @file{.drv} file under @file{/gnu/store}.  The
build actions it prescribes may then be realized by using the
@code{build-derivations} procedure (@pxref{El almacén}).

@deffn {Procedimiento Scheme} package-derivation @var{almacén} @var{paquete} [@var{sistema}]
Devuelve el objeto @code{<derivation>} del @var{paquete} pra el
@var{sistema} (@pxref{Derivaciones}).

@var{paquete} debe ser un objeto @code{<package>} válido, y @var{sistema}
debe ser una cadena que denote el tipo de sistema objetivo---por ejemplo,
@code{"x86_64-linux"} para un sistema GNU x86_64 basado en
Linux. @var{almacén} debe ser una conexión al daemon, que opera en el
almacén (@pxref{El almacén}).
@end deffn

@noindent
@cindex compilación cruzada
De manera similar, es posible calcular una derivación que construye de forma
cruzada un paquete para otro sistema:

@deffn {Procedimiento Scheme} package-cross-derivation @var{almacén} @
            @var{paquete} @var{plataforma} [@var{sistema}]
Devuelve el objeto @code{<derivation>} de @var{paquete} compilado de forma
cruzada desde @var{sistema} a @var{plataforma}.

@var{target} must be a valid GNU triplet denoting the target hardware and
operating system, such as @code{"aarch64-linux-gnu"} (@pxref{Specifying
Target Triplets,,, autoconf, Autoconf}).
@end deffn

@cindex transformación de paquetes
@cindex reescritura de la entrada
@cindex reescritura del árbol de dependencias
Los paquetes se pueden manipular de forma arbitraria. Un ejemplo de
transformación útil es la @dfn{reescritura de entradas}, donde el árbol de
dependencias de un paquete se reescribe reemplazando entradas específicas
por otras:

@deffn {Procedimiento Scheme} package-input-rewriting @var{reemplazos} @
           [@var{nombre-reescrito}]
Devuelve un procedimiento que, cuando se le pasa un paquete, reemplaza sus
dependencias directas e indirectas (pero no sus entradas implícitas) de
acuerdo a @var{reemplazos}. @var{reemplazos} es una lista de pares de
paquetes; el primer elemento de cada par es el paquete a reemplazar, el
segundo es el reemplazo.

Opcionalmente, @var{nombre-reescrito} es un procedimiento de un parámetro
que toma el nombre del paquete y devuelve su nuevo nombre tras la
reescritura.
@end deffn

@noindent
Considere este ejemplo:

@lisp
(define libressl-en-vez-de-openssl
  ;; Esto es un procedimiento para reemplazar OPENSSL
  ;; por LIBRESSL, recursivamente.
  (package-input-rewriting `((,openssl . ,libressl))))

(define git-con-libressl
  (libressl-en-vez-de-openssl git))
@end lisp

@noindent
Aquí primero definimos un procedimiento de reescritura que substituye
@var{openssl} por @var{libressl}. Una vez hecho esto, lo usamos para definir
una @dfn{variante} del paquete @var{git} que usa @var{libressl} en vez de
@var{openssl}. Esto es exactamente lo que hace la opción de línea de órdenes
@option{--with-input} (@pxref{Opciones de transformación de paquetes,
@option{--with-input}}).

La siguiente variante de @code{package-input-rewriting} puede encontrar
paquetes a reemplazar por su nombre en vez de por su identidad.

@deffn {Procedimiento Scheme} package-input-rewriting/spec @var{reemplazos}
Devuelve un procedimiento que, proporcionado un paquete, realiza los
@var{reemplazos} proporcionados sobre todo el grafo del paquete (excluyendo
las entradas implícitas). @var{reemplazos} es una lista de pares de
especificación y procedimiento; cada especificación es una especificación de
paquete como @code{"gcc"} o @code{"guile@@2"}, y cada procedimiento toma un
paquete que corresponda con la especificación y devuelve un reemplazo para
dicho paquete.
@end deffn

El ejemplo previo podría ser reescrito de esta forma:

@lisp
(define libressl-en-vez-de-openssl
  ;; Reemplaza todos los paquetes llamados "openssl" con LibreSSL.
  (package-input-rewriting/spec `(("openssl" . ,(const libressl)))))
@end lisp

La diferencia principal en este caso es que, esta vez, los paquetes se
buscan por su especificación y no por su identidad. En otras palabras,
cualquier paquete en el grafo que se llame @code{openssl} será reemplazado.

Un procedimiento más genérico para reescribir el grafo de dependencias de un
paquete es @code{package-mapping}: acepta cambios arbitrarios sobre nodos
del grafo.

@deffn {Scheme Procedure} package-mapping @var{proc} [@var{cortar?}]
Devuelve un procedimiento que, dado un paquete, aplica @var{proc} a todos
los paquetes de los que depende y devuelve el paquete resultante. El
procedimiento para la recursión cuando @var{cortar?} devuelve verdadero para
un paquete dado.
@end deffn

@menu
* Referencia de package::    El tipo de datos de los paquetes.
* Referencia de origin::     El tipo de datos de orígenes.
@end menu


@node Referencia de package
@subsection Referencia de @code{package}

Esta sección resume todas las opciones disponibles en declaraciones
@code{package} (@pxref{Definición de paquetes}).

@deftp {Tipo de datos} package
Este es el tipo de datos que representa la receta de un paquete.

@table @asis
@item @code{name}
El nombre del paquete, como una cadena.

@item @code{version}
La versión del paquete, como una cadena.

@item @code{source}
Un objeto que determina cómo se debería obtener el código fuente del
paquete. La mayor parte del tiempo, es un objeto @code{origin}, que denota
un fichero obtenido de Internet (@pxref{Referencia de origin}). También puede
ser cualquier otro objeto ``tipo-fichero'' como @code{local-file}, que
denota un fichero del sistema local de ficheros (@pxref{Expresiones-G,
@code{local-file}}).

@item @code{build-system}
El sistema de construcción que debe ser usado para construir el paquete
(@pxref{Sistemas de construcción}).

@item @code{arguments} (predeterminados: @code{'()})
Los parámetros que deben ser pasados al sistema de construcción. Es una
lista que normalmente contiene una secuencia de pares de palabra clave y
valor.

@item @code{inputs} (predeterminadas: @code{'()})
@itemx @code{native-inputs} (predeterminadas: @code{'()})
@itemx @code{propagated-inputs} (predeterminadas: @code{'()})
@cindex entradas, de paquetes
Estos campos enumeran las dependencias del paquete. Cada uno es una lista de
tuplas, donde cada tupla tiene una etiqueta para la entrada (una cadena)
como su primer elemento, un paquete, origen o derivación como su segundo
elemento, y opcionalmente el nombre de la salida que debe ser usada, cuyo
valor predeterminado es @code{"out"} (@pxref{Paquetes con múltiples salidas}, para más información sobre salidas de paquetes). Por ejemplo, la
lista siguiente especifica tres entradas:

@lisp
`(("libffi" ,libffi)
  ("libunistring" ,libunistring)
  ("glib:bin" ,glib "bin"))  ;la salida "bin" de Glib
@end lisp

@cindex compilación cruzada, dependencias de paquetes
La distinción entre @code{native-inputs} y @code{inputs} es necesaria cuando
se considera la compilación cruzada. Cuando se compila desde una
arquitectura distinta, las dependencias enumeradas en @code{inputs} son
construidas para la arquitectura @emph{objetivo}; de modo contrario, las
dependencias enumeradas en @code{native-inputs} se construyen para la
arquitectura de la máquina de @emph{construcción}.

@code{native-inputs} se usa típicamente para enumerar herramientas
necesarias en tiempo de construcción, pero no en tiempo de ejecución, como
Autoconf, Automake, pkg-config, Gettext o Bison. @command{guix lint} puede
informar de probables errores en este área (@pxref{Invocación de guix lint}).

@anchor{package-propagated-inputs}
Lastly, @code{propagated-inputs} is similar to @code{inputs}, but the
specified packages will be automatically installed alongside the package
they belong to (@pxref{package-cmd-propagated-inputs, @command{guix
package}}, for information on how @command{guix package} deals with
propagated inputs).

Por ejemplo esto es necesario cuando una biblioteca C/C++ necesita cabeceras
de otra biblioteca para compilar, o cuando un fichero pkg-config se refiere
a otro @i{via} su campo @code{Requires}.

Otro ejemplo donde @code{propagated-inputs} es útil es en lenguajes que
carecen de la facilidad de almacenar la ruta de búsqueda de tiempo de
ejecución de la misma manera que el campo @code{RUNPATH} de los ficheros
ELF; esto incluye Guile, Python, Perl y más. Para asegurarse que las
bibliotecas escritas en esos lenguajes puedan encontrar en tiempo de
ejecución el código de las bibliotecas de las que dependen, las dependencias
de tiempo de ejecución deben enumerarse en @code{propagated-inputs} en vez
de en @code{inputs}.

@item @code{outputs} (predeterminada: @code{'("out")})
La lista de nombres de salidas del paquete. @xref{Paquetes con múltiples salidas}, para usos típicos de salidas adicionales.

@item @code{native-search-paths} (predeterminadas: @code{'()})
@itemx @code{search-paths} (predeterminadas: @code{'()})
Una lista de objetos @code{search-path-specification} describiendo las
variables de entorno de rutas de búsqueda respetadas por el paquete.

@item @code{replacement} (predeterminado: @code{1.0})
Esto debe ser o bien @code{#f} o bien un objeto package que será usado como
@dfn{reemplazo} para ete paquete. @xref{Actualizaciones de seguridad, injertos}, para
más detalles.

@item @code{synopsis}
Una descripción en una línea del paquete.

@item @code{description}
Una descripción más elaborada del paquete.

@item @code{license}
@cindex licencia, de paquetes
La licencia del paquete; un valor de @code{(guix licenses)}, o una lista de
dichos valores.

@item @code{home-page}
La URL de la página principal del paquete, como una cadena.

@item @code{supported-systems} (default: @code{%supported-systems})
La lista de sistemas en los que se mantiene el paquete, como cadenas de la
forma @code{arquitectura-núcleo}, por ejemplo @code{"x86_64-linux"}.

@item @code{location} (predeterminada: la localización de los fuentes de la forma @code{package})
La localización de las fuentes del paquete. Es útil forzar su valor cuando
se hereda de otro paquete, en cuyo caso este campo no se corrige
automáticamente.
@end table
@end deftp

@deffn {Sintaxis Scheme} this-package
Cuando se usa en el @emph{ámbito léxico} de la definición de un paquete,
este identificador resuelve al paquete que se está definiendo.

El ejemplo previo muestra cómo añadir un paquete como su propia entrada
nativa cuando se compila de forma cruzada:

@lisp
(package
  (name "guile")
  ;; ...

  ;; Cuando se compila de forma cruzada, Guile, por ejemplo
  ;; depende de una versión nativa de sí mismo. Añadirla aquí.
  (native-inputs (if (%current-target-system)
                     `(("self" ,this-package))
                     '())))
@end lisp

Es un error hacer referencia a @code{this-package} fuera de la definición de
un paquete.
@end deffn

@node Referencia de origin
@subsection Referencia de @code{origin}

Esta sección resume todas las opciones disponibles en declaraciones
@code{origin} (@pxref{Definición de paquetes}).

@deftp {Tipo de datos} origin
Este es el tipo de datos que representa un origen de código fuente.

@table @asis
@item @code{uri}
Un objeto que contiene el URI de las fuentes. El tipo de objeto depende del
valor de @code{method} (véase a continuación). Por ejemplo, cuando se usa el
método @var{url-fetch} de @code{(guix download)}, los valores adecuados para
@code{uri} son: una cadena que contiene una URL, o una lista de cadenas.

@item @code{method}
Un procedimiento que maneja el URI.

Algunos ejemplos son:

@table @asis
@item @var{url-fetch} de @code{(guix download)}
descarga un fichero de la URL HTTP, HTTPS o FTP especificada en el campo
@code{uri};

@vindex git-fetch
@item @var{git-fetch} de @code{(guix git-download)}
clona el repositorio de control de versiones Git, y prepara la revisión
especificada en el campo @code{uri} como un objeto @code{git-reference}; una
referencia @code{git-reference} tiene esta forma:

@lisp
(git-reference
  (url "https://git.savannah.gnu.org/git/hello.git")
  (commit "v2.10"))
@end lisp
@end table

@item @code{sha256}
A bytevector containing the SHA-256 hash of the source.  This is equivalent
to providing a @code{content-hash} SHA256 object in the @code{hash} field
described below.

@item @code{hash}
The @code{content-hash} object of the source---see below for how to use
@code{content-hash}.

Puede obtener esta información usando @code{guix download} (@pxref{Invocación de guix download}) o @code{guix hash} (@pxref{Invocación de guix hash}).

@item @code{file-name} (predeterminado: @code{#f})
El nombre de fichero bajo el que el código fuente se almacenará. Cuando este
es @code{#f}, un valor predeterminado sensato se usará en la mayor parte de
casos. En caso de que las fuentes se obtengan de una URL, el nombre de
fichero de la URL se usará. Para copias de trabajo de sistemas de control de
versiones, se recomienda proporcionar el nombre de fichero explícitamente ya
que el predeterminado no es muy descriptivo.

@item @code{patches} (predeterminados: @code{'()})
Una lista de nombres de ficheros, orígenes u objetos tipo-fichero
(@pxref{Expresiones-G, objetos ``tipo-fichero''}) apuntando a parches que
deben ser aplicados a las fuentes.

La lista de parches debe ser incondicional. En particular, no puede depender
del valor de @code{%current-system} o @code{%current-target-system}.

@item @code{snippet} (predeterminado: @code{#f})
Una expresión-G (@pxref{Expresiones-G}) o expresión-S que se ejecutará en el
directorio de fuentes. Esta es una forma conveniente de modificar el
software, a veces más que un parche.

@item @code{patch-flags} (predeterminadas: @code{'("-p1")})
Una lista de opciones de línea de órdenes que deberían ser pasadas a la
orden @code{patch}.

@item @code{patch-inputs} (predeterminada: @code{#f})
Paquetes o derivaciones de entrada al proceso de aplicación de los
parches. Cuando es @code{#f}, se proporciona el conjunto habitual de
entradas necesarias para la aplicación de parches, como GNU@tie{}Patch.

@item @code{modules} (predeterminados: @code{'()})
Una lista de módulos Guile que debe ser cargada durante el proceso de
aplicación de parches y mientras se ejecuta el código del campo
@code{snippet}.

@item @code{patch-guile} (predeterminado: @code{#f})
El paquete Guile que debe ser usado durante la aplicación de parches. Cuando
es @code{#f} se usa un valor predeterminado.
@end table
@end deftp

@deftp {Data Type} content-hash @var{value} [@var{algorithm}]
Construct a content hash object for the given @var{algorithm}, and with
@var{value} as its hash value.  When @var{algorithm} is omitted, assume it
is @code{sha256}.

@var{value} can be a literal string, in which case it is base32-decoded, or
it can be a bytevector.

The following forms are all equivalent:

@lisp
(content-hash "05zxkyz9bv3j9h0xyid1rhvh3klhsmrpkf3bcs6frvlgyr2gwilj")
(content-hash "05zxkyz9bv3j9h0xyid1rhvh3klhsmrpkf3bcs6frvlgyr2gwilj"
              sha256)
(content-hash (base32
               "05zxkyz9bv3j9h0xyid1rhvh3klhsmrpkf3bcs6frvlgyr2gwilj"))
(content-hash (base64 "kkb+RPaP7uyMZmu4eXPVkM4BN8yhRd8BTHLslb6f/Rc=")
              sha256)
@end lisp

Technically, @code{content-hash} is currently implemented as a macro.  It
performs sanity checks at macro-expansion time, when possible, such as
ensuring that @var{value} has the right size for @var{algorithm}.
@end deftp

@node Sistemas de construcción
@section Sistemas de construcción

@cindex sistema de construcción
Cada definición de paquete especifica un @dfn{sistema de construcción} y
parámetros para dicho sistema de construcción (@pxref{Definición de paquetes}). Este campo @code{build-system} representa el procedimiento de
construcción del paquete, así como las dependencias implícitas de dicho
procedimiento de construcción.

Los sistemas de construcción son objetos @code{<build-system>}. La interfaz
para crear y manipularlos se proporciona en el módulo @code{(guix
build-system)}, y otros módulos exportan sistemas de construcción reales.

@cindex bag (representación de paquetes de bajo nivel)
En su implementación, los sistemas de construcción primero compilan los
objetos package a objetos @dfn{bag}. Una bolsa (traducción de @dfn{bag}) es
como un paquete, pero con menos ornamentos---en otras palabras, una bolsa es
una representación a un nivel más bajo de un paquete, que contiene todas las
entradas de dicho paquete, incluyendo algunas implícitamente añadidas por el
sistema de construcción. Esta representación intermedia se compila entonces
a una derivación (@pxref{Derivaciones}).

Los sistemas de construcción aceptan una lista opcional de
@dfn{parámetros}. En las definiciones de paquete, estos son pasados @i{vía}
el campo @code{arguments} (@pxref{Definición de paquetes}). Normalmente son
parámetros con palabras clave (@pxref{Optional Arguments, keyword arguments
in Guile,, guile, GNU Guile Reference Manual}). El valor de estos parámetros
normalmente se evalúa en la @dfn{capa de construcción}---es decir, por un
proceso Guile lanzado por el daemon (@pxref{Derivaciones}).

El sistema de construcción principal es @var{gnu-build-system}, el cual
implementa el procedimiento estándar de construcción para GNU y muchos otros
paquetes. Se proporciona por el módulo @code{(guix build-system gnu)}.

@defvr {Variable Scheme} gnu-build-system
@var{gnu-build-system} representa el sistema de construcción GNU y sus
variantes (@pxref{Configuration, configuration and makefile conventions,,
standards, GNU Coding Standards}).

@cindex fases de construcción
En resumen, los paquetes que lo usan se configuran, construyen e instalan
con la habitual secuencia de órdenes @code{./configure && make && make check
&& make install}. En la práctica, algunos pasos adicionales son necesarios
habitualmente. Todos estos pasos se dividen en @dfn{fases} separadas,
notablemente@footnote{Rogamos que se inspeccionen los módulos @code{(guix
build gnu-build-system)} para más detalles sobre las fases de construcción}:

@table @code
@item unpack
Extrae el archivador tar de la fuente, y cambia el directorio actual al
directorio recién extraído. Si la fuente es realmente un directorio, lo
copia al árbol de construcción y entra en ese directorio.

@item patch-source-shebangs
Sustituye secuencias ``#!'' encontradas al inicio de los ficheros de fuentes
para que hagan referencia a los nombres correctos de ficheros del
almacén. Por ejemplo, esto cambia @code{#!/bin/sh} por
@code{#!/gnu/store/@dots{}-bash-4.3/bin/sh}.

@item configure
Run the @file{configure} script with a number of default options, such as
@option{--prefix=/gnu/store/@dots{}}, as well as the options specified by
the @code{#:configure-flags} argument.

@item build
Ejecuta @code{make} con la lista de opciones especificadas en
@code{#:make-flags}. Si el parámetro @code{#:parallel-build?} es verdadero
(por defecto), construye con @code{make -j}.

@item check
Ejecuta @code{make check}, u otro objetivo especificado con
@code{#:test-target}, a menos que se pasase @code{#:tests? #f}. Si el
parámetro @code{#:parallel-tests?} es verdadero (por defecto), ejecuta
@code{make check -j}.

@item install
Ejecuta @code{make install} con las opciones enumeradas en
@code{#:make-flags}.

@item patch-shebangs
Sustituye las secuencias ``#!'' en los ficheros ejecutables instalados.

@item strip
Extrae los símbolos de depuración de ficheros ELF (a menos que el valor de
@code{#:strip-binaries?} sea falso), y los copia a la salida @code{debug}
cuando esté disponible (@pxref{Instalación de ficheros de depuración}).
@end table

@vindex %standard-phases
El módulo del lado de construcción @code{(guix build gnu-build-system)}
define @var{%standard-phases} como la lista predeterminada de fases de
construcción. @var{%standard-phases} es una lista de pares
símbolo/procedimiento, donde el procedimiento implementa realmente la fase.

La lista de fases usadas para un paquete particular se puede cambiar con el
parámetro @code{#:phases}. Por ejemplo, pasar:

@example
#:phases (modify-phases %standard-phases (delete 'configure))
@end example

significa que todas las fases descritas anteriormente serán usadas, excepto
la fase @code{configure}.

Además, este sistema de construcción asegura que el entorno ``estándar''
para paquetes GNU está disponible. Esto incluye herramientas como GCC, libc,
Coreutils, Bash, Make, Diffutils, grep y sed (vea el módulo @code{(guix
build system gnu)} para una lista completa). A estas las llamamos las
@dfn{entradas implícitas} de un paquete, porque las definiciones de paquete
no las mencionan.
@end defvr

Hay definidos otros objetos @code{<build-system>} para implementar otras
convenciones y herramientas usadas por paquetes de software libre. Heredan
la mayor parte de @var{gnu-build-system}, y se diferencian principalmente en
el conjunto de entradas implícitamente añadidas al proceso de construcción,
y en la lista de fases ejecutadas. Algunos de estos sistemas de construcción
se enumeran a continuación.

@defvr {Variable Scheme} ant-build-system
@code{(guix build-system ant)} exporta esta variable. Implementa el
procedimiento de construcción de paquetes Java que pueden construirse con
@url{https://ant.apache.org/, la herramienta de construcción Ant}.

Añade tanto @code{ant} como el @dfn{kit de desarrollo Java} (JDK), que
proporciona el paquete @code{icedtea}, al conjunto de entradas. Se pueden
especificar paquetes diferentes con los parámetros @code{#:ant} y
@code{#:jdk}, respectivamente.

Cuando el paquete original no proporciona un fichero Ant apropiado, el
parámetro @code{#:jar-name} puede usarse para generar un fichero de
construcción Ant @file{build.xml} mínimo con tareas para construir el
archivo jar especificado. En este caso, el parámetro @code{#:source-dir} se
puede usar para especificar el subdirectorio de fuentes, con ``src'' como
valor predeterminado.

El parámetro @code{#:main-class} puede usarse con el fichero de construcción
Ant mínimo para especificar la clase main del archivo jar producido. Esto
permite ejecutar el archivo jar. El parámetro @code{#:test-include} puede
usarse para especificar la lista de tests junit a ejecutar. El valor
predeterminado es @code{(list "**/*Test.java")}. @code{#:test-exclude} puede
usarse para desactivar algunas pruebas. Su valor predeterminado es
@code{(list "**/Abstract*.java")} ya que las clases abstractas no se pueden
ejecutar como pruebas.

El parámetro @code{#:build-target} se puede usar para especificar la tarea
Ant que debe ser ejecutada durante la fase @code{build}. Por defecto se
ejecuta la tarea ``jar''.

@end defvr

@defvr {Variable Scheme} android-ndk-build-system
@cindex distribución Android
@cindex Sistema de construcción NDK de Android
Esta variable es exportada por @code{(guix build-system
android-ndk)}. Implementa un procedimiento de construcción para paquetes
Android NDK (kit de desarrollo nativo) usando un proceso de construcción
específico de Guix.

The build system assumes that packages install their public interface
(header) files to the subdirectory @file{include} of the @code{out} output
and their libraries to the subdirectory @file{lib} the @code{out} output.

También se asume que la unión de todas las dependencias de un paquete no
tiene ficheros en conflicto.

En este momento no funciona la compilación cruzada - por lo que las
bibliotecas y los ficheros de cabecera se asumen que son locales.

@end defvr

@defvr {Variable Scheme} asdf-build-system/source
@defvrx {Variable Scheme} asdf-build-system/sbcl
@defvrx {Variable Scheme} asdf-build-system/ecl

Estas variables, exportadas por @code{(guix build-system asdf)}, implementan
procedimientos de construcción para paquetes Common Lisp usando
@url{https://common-lisp.net/project/asdf, ``ASDF'''}. ASDF es una utilidad
de definición de sistema para programas y bibliotecas Common Lisp.

El sistema @code{asdf-build-system/source} instala los paquetes en forma de
fuentes, y puede ser cargado usando cualquier implementación common lisp,
vía ASDF. Los otros, como @code{asdf-build-system/sbcl}, instalan sistemas
binarios en el formato entendido por una implementación particular. Estos
sistemas de construcción también pueden usarse para producir programas
ejecutables, o imágenes lisp que contengan un conjunto precargado de
paquetes.

El sistema de construcción usa convenciones de nombres. Para paquetes
binarios, el paquete debería estar prefijado con la implementación lisp,
como @code{sbcl-} para @code{asdf-build-system/sbcl}.

Adicionalmente, el paquete de fuentes correspondiente debe etiquetarse
usando la misma convención que los paquetes python (vea @ref{Módulos Python}), usando el prefijo @code{cl-}.

Para paquetes binarios, cada sistema debe definirse como un paquete Guix. Si
el campo @code{origin} de un paquete contiene varios sistemas, las
variaciones del paquete pueden crearse para construir todos los
sistemas. Los paquetes de fuentes, los cuales usan
@code{asdf-build-system/source}, pueden contener varios sistemas.

Para crear programa ejecutables e imágenes, se pueden usar los
procedimientos del lado de construcción @code{build-program} y
@code{build-image}. Deben llamarse en la fase de construcción después de la
fase @code{create-symlinks}, de modo que el sistema recién construido pueda
ser usado dentro de la imagen resultante. @code{build-program} necesita una
lista de expresiones Common Lisp a través del parámetro
@code{#:entry-prgogram}.

If the system is not defined within its own @file{.asd} file of the same
name, then the @code{#:asd-file} parameter should be used to specify which
file the system is defined in.  Furthermore, if the package defines a system
for its tests in a separate file, it will be loaded before the tests are run
if it is specified by the @code{#:test-asd-file} parameter.  If it is not
set, the files @code{<system>-tests.asd}, @code{<system>-test.asd},
@code{tests.asd}, and @code{test.asd} will be tried if they exist.

Si por alguna razón el paquete debe ser nombrado de una forma diferente a la
sugerida por las convenciones de nombres, el parámetro
@code{#:asd-system-name} puede usarse para especificar el nombre del
sistema.

@end defvr

@defvr {Variable Scheme} cargo-build-system
@cindex lenguaje de programación Rust
@cindex Cargo (sistema de construcción de Rust)
Esta variable se exporta en @code{(guix build-system cargo)}. Permite la
construcción de paquetes usando Cargo, la herramienta de construcción del
@uref{https://www.rust-lang.org, lenguaje de programación Rust}.

Automáticamente añade @code{rustc} y @code{cargo} al conjunto de
entradas. Se puede especificar el uso de un paquete Rust distinto con el
parámetro @code{#:rust}.

Las dependencias normales de cargo se añadirán a la definición del paquete a
través del parámetro @code{#:cargo-inputs} como una lista de pares de nombre
y especificación, donde la especificación puede ser un paquete o una
definición de fuentes @code{source}. Tenga en cuenta que la especificación
debe evaluar a una ruta o a un archivo comprimido con gzip que incluya un
fichero @code{Cargo.toml} en su raíz, o será ignorado. De manera parecida,
las dependencias de desarrollo de cargo deben añadirse a la definición del
paquete a través del parámetro @code{#:cargo-development-inputs}.

En su fase @code{configure}, este sistema de construcción hará que cualquier
fuente de entrada especificada en los parámetros @code{#:cargo-inputs} y
@code{#:cargo-development-inputs} esté disponible para cargo. También
borrará cualquier fichero @code{Cargo.lock} incluido para que sea recreado
por @code{cargo} durante la fase @code{build} de construcción. La fase
@code{install} instala los binarios que el ``crate'' haya definido.
@end defvr


@defvr {Variable Scheme} copy-build-system
Esta variable se exporta en @code{(guix build-system copy)}. Permite la
construcción de paquetes simples que no necesitan mucha compilación y en su
mayor parte dependen únicamente de la copia de ficheros en distintas rutas.

Añade gran parte de los paquetes de @code{gnu-build-system} al conjunto de
entradas. Por esta razón, @code{copy-build-system} no necesita toda la
verborrea que habitualmente requiere @code{trivial-build-system}.

Para simplificar más aún el proceso de instalación de ficheros, se expone un
parámetro @code{#:install-plan} para permitir a quien genera el paquete
especificar dónde van los distintos ficheros. El plan de instalación
(@code{#:install-plan}) es una lista de @code{(@var{fuente} @var{destino}
[@var{filtro}])}. Los @var{filtro}s son opcionales.

@itemize
@item Cuando @var{fuente} corresponde con un fichero o un directorio sin la barra final, se instala en @var{destino}.
@itemize
@item Si @var{destino} contiene una barra al final, @var{fuente} se instala con su nombre de fichero en la ruta @var{destino}.
@item En otro caso se instala @var{fuente} como @var{destino}.
@end itemize

@item Cuando @var{fuente} es un directorio terminado en una barra, o cuando se usa algún @var{filtro},
la barra al final de @var{destino} tiene el significado que se describió
anteriormente.
@itemize
@item Sin @var{filtros}, instala todo el @emph{contenido} de @var{fuente} en @var{destino}.
@item Cuando @var{filtro} contiene @code{#:include}, @code{#:include-regexp}, @code{#:exclude},
@code{#:exclude-regexp}, únicamente se seleccionan los ficheros instalados
dependiendo de los filtros. Cada filtro se especifica como una lista de
cadenas.
@itemize
@item Con @code{#:include}, se instalan todos los ficheros de la ruta cuyo sufijo
corresponda con al menos uno de los elementos de la lista proporcionada.
@item Con @code{#:include-regexp} se instalan todos los ficheros cuyas
rutas relativas correspondan con al menos una de las expresiones regulares
en la lista proporcionada.
@item Los filtros @code{#:exclude} y @code{#:exclude-regexp}
son complementarios a sus equivalentes inclusivos. Sin opciones
@code{#:include}, se instalan todos los ficheros excepto aquellos que
correspondan con los filtros de exclusión. Si se proporcionan tanto
inclusiones como exclusiones, las exclusiones tienen efecto sobre los
resultados de las inclusiones.
@end itemize
@end itemize
En todos los casos, las rutas relativas a @var{fuente} se preservan dentro
de @var{destino}.
@end itemize

Ejemplos:

@itemize
@item @code{("foo/bar" "share/my-app/")}: Instala @file{bar} en @file{share/my-app/bar}.
@item @code{("foo/bar" "share/my-app/baz")}: Instala @file{bar} en @file{share/my-app/baz}.
@item @code{("foo/" "share/my-app")}: Instala el contenido de @file{foo} dentro de @file{share/my-app},
por ejemplo, instala @file{foo/sub/file} en @file{share/my-app/sub/file}.
@item @code{("foo/" "share/my-app" #:include ("sub/file"))}: Instala únicamente @file{foo/sub/file} en
@file{share/my-app/sub/file}.
@item @code{("foo/sub" "share/my-app" #:include ("file"))}: Instala @file{foo/sub/file} en
@file{share/my-app/file}.
@end itemize
@end defvr


@cindex Clojure (lenguaje de programación)
@cindex sistema de construcción simple de Clojure
@defvr {Variable Scheme} clojure-build-system
Esta variable se exporta en @code{(guix build-system clojure)}. Implementa
un procedimiento de construcción simple para paquetes
@uref{https://clojure.org/, Clojure} usando directamente @code{compile} en
Clojure. La compilación cruzada no está disponible todavía.

Añade @code{clojure}, @code{icedtea} y @code{zip} al conjunto de
entradas. Se pueden especificar paquetes diferentes con los parámetros
@code{#:clojure}, @code{#:jdk} y @code{#:zip}, respectivamente.

Una lista de directorios de fuentes, directorios de pruebas y nombres de jar
pueden especificarse con los parámetros @code{#:source-dirs},
@code{#:test-dirs} y @code{#:jar-names}, respectivamente. El directorio de
compilación y la clase principal pueden especificarse con los parámetros
@code{#:compile-dir} y @code{#:main-class}, respectivamente. Otros
parámetros se documentan más adelante.

Este sistema de construcción es una extensión de @var{ant-build-system},
pero con las siguientes fases cambiadas:

@table @code

@item build
Esta fase llama @code{compile} en Clojure para compilar los ficheros de
fuentes y ejecuta @command{jar} para crear archivadores jar tanto de
ficheros de fuentes y compilados de acuerdo con las listas de inclusión y
exclusión especificadas en @code{#:aot-include} y @code{#:aot-exclude},
respectivamente. La lista de exclusión tiene prioridad sobre la de
inclusión. Estas listas consisten en símbolos que representan bibliotecas
Clojure o la palabra clave especial @code{#:all} que representa todas las
bibliotecas encontradas en los directorios de fuentes. El parámetro
@code{#:omit-source?} determina si las fuentes deben incluirse en los
archivadores jar.

@item check
Esta fase ejecuta las pruebas de acuerdo a las listas de inclusión y
exclusión especificadas en @code{#:test-include} y @code{#:test-exclude},
respectivamente. Sus significados son análogos a los de @code{#:aot-include}
y @code{#:aot-exclude}, excepto que la palabra clave especial @code{#:all}
designa ahora a todas las bibliotecas Clojure encontradas en los directorios
de pruebas. El parámetro @code{#:tests?} determina si se deben ejecutar las
pruebas.

@item install
Esta fase instala todos los archivadores jar construidos previamente.
@end table

Además de las previas, este sistema de construcción contiene una fase
adicional:

@table @code

@item install-doc
Esta fase instala todos los ficheros de nivel superior con un nombre que
corresponda con @var{%doc-regex}. Una expresión regular diferente se puede
especificar con el parámetro @code{#:doc-regex}. Todos los ficheros dentro
(recursivamente) de los directorios de documentación especificados en
@code{#:doc-dirs} se instalan también.
@end table
@end defvr

@defvr {Variable Scheme} cmake-build-system
Esta variable se exporta en @code{(guix build-system cmake)}. Implementa el
procedimiento de construcción para paquetes que usen la
@url{https://www.cmake.org, herramienta de construcción CMake}.

Automáticamente añade el paquete @code{cmake} al conjunto de entradas. El
paquete usado se puede especificar con el parámetro @code{#:cmake}.

El parámetro @code{#:configure-flags} se toma como una lista de opciones a
pasar a @command{cmake}. El parámetro @code{#:build-type} especifica en
términos abstractos las opciones pasadas al compilador; su valor
predeterminado es @code{"RelWithDebInfo"} (quiere decir ``modo de entrega
con información de depuración''), lo que aproximadamente significa que el
código se compila con @code{-O2 -g}, lo cual es el caso predeterminado en
paquetes basados en Autoconf.
@end defvr

@defvr {Variable Scheme} dune-build-system
Esta variable se exporta en @code{(guix build-system dune)}. Permite la
construcción de paquetes mediante el uso de @uref{https://dune.build/,
Dune}, una herramienta de construcción para el lenguaje de programación
OCaml. Se implementa como una extensión de @code{ocaml-build-system} que se
describe a continuación. Como tal, se pueden proporcionar los parámetros
@code{#:ocaml} y @code{#:findlib} a este sistema de construcción.

Automáticamente añade el paquete @code{dune} al conjunto de entradas. El
paquete usado se puede especificar con el parámetro @code{#:dune}.

No existe una fase @code{configure} debido a que los paquetes dune no
necesitan ser configurados típicamente. El parámetro @code{#:build-flags} se
toma como una lista de opciones proporcionadas a la orden @code{dune}
durante la construcción.

El parámetro @code{#:jbuild?} puede proporcionarse para usar la orden
@code{jbuild} en vez de la más reciente @code{dune} durante la construcción
de un paquete. Su valor predeterminado es @code{#f}.

El parámetro @code{#:package} puede proporcionarse para especificar un
nombre de paquete, lo que resulta útil cuando un paquete contiene múltiples
paquetes y únicamente quiere construir uno de ellos. Es equivalente a
proporcionar el parámetro @code{-p} a @code{dune}.
@end defvr

@defvr {Variable Scheme} go-build-system
Esta variable se exporta en @code{(guix build-system go)}. Implementa el
procedimiento de construcción para paquetes Go usando los
@url{https://golang.org/cmd/go/#hdr-Compile_packages_and_dependencies,
mecanismos de construcción de Go} estándares.

Se espera que la usuaria proporcione un valor para el parámetro
@code{#:import-path} y, en algunos caso, @code{#:unpack-path}. La
@url{https://golang.org/doc/code.html#ImportPaths, ruta de importación}
corresponde a la ruta del sistema de ficheros esperada por los guiones de
construcción del paquete y los paquetes a los que hace referencia, y
proporciona una forma de hacer referencia a un paquete Go unívocamente. Está
basado típicamente en una combinación de la URI remota del paquete de
ficheros de fuente y la estructura jerárquica del sistema de ficheros. En
algunos casos, necesitará desempaquetar el código fuente del paquete en una
estructura de directorios diferente a la indicada en la ruta de importación,
y @code{#:unpack-path} debe usarse en dichos casos.

Los paquetes que proporcionan bibliotecas Go deben instalar su código fuente
en la salida de la construcción. El parámetro @code{#:install-source?}, cuyo
valor por defecto es @code{#t}, controla si se instalará o no el código
fuente. Puede proporcionarse @code{#f} en paquetes que proporcionan
únicamente ficheros ejecutables.
@end defvr

@defvr {Variable Scheme} glib-or-gtk-build-system
Esta variable se exporta en @code{(guix build-system glib-or-gtk)}. Está
pensada para usarse con paquetes que usan GLib o GTK+.

Este sistema de construcción añade las dos fases siguientes a las definidas
en @var{gnu-build-system}:

@table @code
@item glib-or-gtk-wrap
The phase @code{glib-or-gtk-wrap} ensures that programs in @file{bin/} are
able to find GLib ``schemas'' and
@uref{https://developer.gnome.org/gtk3/stable/gtk-running.html, GTK+
modules}.  This is achieved by wrapping the programs in launch scripts that
appropriately set the @env{XDG_DATA_DIRS} and @env{GTK_PATH} environment
variables.

Es posible excluir salidas específicas del paquete del proceso de
recubrimiento enumerando sus nombres en el parámetro
@code{#:glib-org-gtk-wrap-excluded-outputs}. Esto es útil cuando se sabe que
una salida no contiene binarios GLib o GTK+, y cuando empaquetar
gratuitamente añadiría una dependencia de dicha salida en GLib y GTK+.

@item glib-or-gtk-compile-schemas
La fase @code{glib-or-gtk-compile-schemas} se asegura que todos los
@uref{https://developer.gnome.org/gio/stable/glib-compile-schemas.html,
esquemas GSettings} o GLib se compilan. La compilación la realiza el
programa @command{glib-compile-schemas}. Lo proporciona el paquete
@code{glib:bin} que se importa automáticamente por el sistema de
construcción. El paquete @code{glib} que proporciona
@command{glib-compile-schemas} puede especificarse con el parámetro
@code{#:glib}.
@end table

Ambas fases se ejecutan tras la fase @code{install}.
@end defvr

@defvr {Variable Scheme} guile-build-system
Este sistema de construcción es para paquetes Guile que consisten
exclusivamente en código Scheme y son tan simples que no tienen ni siquiera
un fichero Makefile, menos un guión @file{configure}. Compila código Scheme
usando @command{guild compile} (@pxref{Compilation,,, guile, GNU Guile
Reference Manual}) e instala los ficheros @file{.scm} y @file{.go} en el
lugar correcto. También instala documentación.

This build system supports cross-compilation by using the @option{--target}
option of @samp{guild compile}.

Los paquetes construidos con @code{guile-build-system} deben proporcionar un
paquete Guile en su campo @code{native-inputs}.
@end defvr

@defvr {Variable Scheme} julia-build-system
This variable is exported by @code{(guix build-system julia)}.  It
implements the build procedure used by @uref{https://julialang.org/, julia}
packages, which essentially is similar to running @samp{julia -e 'using Pkg;
Pkg.add(package)'} in an environment where @env{JULIA_LOAD_PATH} contains
the paths to all Julia package inputs.  Tests are run not run.

Los paquetes Julia necesitan que el campo @code{file-name} de la fuente sea
el nombre real del paquete, con mayúsculas y minúsculas correctamente
escritas.

Para los paquetes que tienen dependencias de bibliotecas dinámicas, puede
que sea necesario que escriba manualmente el fichero
@file{/deps/deps.jl}. Habitualmente es una línea de @code{const variable =
/gnu/store/biblioteca.so} por cada dependencia, además de una función vacía
@code{check_deps() = nothing}.

Algunos paquetes antiguos que no usan todavía @file{Package.toml} también
necesitan la creación de este fichero. La función
@code{julia-create-package-toml} ayuda en la creación de dicho fichero. Debe
proporcionarle las salidas y las fuentes del paquete, su nombre (el mismo
que en el parámetro @code{file-name}), el uuid del paquete, la versión del
paquete y una lista de dependencias especificadas a partir de su nombre y su
uuid.
@end defvr

@defvr {Variable Scheme} minify-build-system
Esta variable se exporta en @code{(guix build-system minify)}. Implementa un
procedimiento de minificación para paquetes JavaScript simples.

Añade @code{uglify-js} al conjunto de entradas y lo utiliza para comprimir
todos los ficheros JavaScript en el directorio @file{src}. Un paquete de
minificación diferente puede especificarse con el parámetro
@code{#:uglify-js}, pero se espera que el paquete escriba el código
minificado en la salida estándar.

Cuando los ficheros JavaScript de entrada no se encuentran en el directorio
@file{src}, el parámetro @code{#:javascript-files} puede usarse para
especificar una lista de nombres de fichero que proporcionar al minificador.
@end defvr

@defvr {Variable Scheme} ocaml-build-system
Esta variable se exporta en @code{(guix build-system ocaml)}. Implementa un
procedimiento de construcción para paquetes @uref{https://ocaml.org, OCaml},
que consiste en seleccionar el conjunto correcto de órdenes a ejecutar para
cada paquete. Los paquetes OCaml pueden esperar la ejecución de muchas
ordenes diferentes. Este sistema de construcción probará algunas de ellas.

Cuando el paquete tiene un fichero @file{setup.ml} presente en el nivel
superior, se ejecuta @code{ocaml setup.ml -configure}, @code{ocaml setup.ml
-build} y @code{ocaml setup.ml -install}. El sistema de construcción asumirá
que este fichero se generó con @uref{http://oasis.forge.ocamlcore.org/
OASIS} y se encargará de establecer el prefijo y la activación de las
pruebas si no se desactivaron. Puede pasar opciones de configuración y
construcción con @code{#:configure-flags} y @code{#:build-flags},
respectivamente. El parámetro @code{#:test-flags} puede usarse para cambiar
el conjunto de opciones usadas para activar las pruebas. El parámetro
@code{#:use-make?} puede usarse para ignorar este sistema en las fases de
construcción e instalación.

Cuando el paquete tiene un fichero @file{configure}, se asume que es un
guión de configuración hecho a mano que necesita un formato de parámetros
diferente a los del sistema @code{gnu-build-system}. Puede añadir más
opciones con el parámetro @code{#:configure-flags}.

Cuando el paquete tiene un fichero @file{Makefile} (o @code{#:use-make?} es
@code{#t}), será usado y se pueden proporcionar más opciones para las fases
de construcción y e instalación con el parámetro @code{#:make-flags}.

Por último, algunos paquetes no tienen estos ficheros y usan unas
localizaciones de algún modo estándares para su sistema de construcción. En
este caso, el sistema de construcción ejecutará @code{ocaml pkg/pkg.ml} o
@code{ocaml pkg/build.ml} y se hará cargo de proporcionar la ruta del módulo
findlib necesario. Se pueden pasar opciones adicionales con el parámetro
@code{#:build-flags}. De la instalación se hace cargo
@command{opam-installer}. En este caso, el paquete @code{opam} debe añadirse
al campo @code{native-inputs} de la definición del paquete.

Note that most OCaml packages assume they will be installed in the same
directory as OCaml, which is not what we want in guix.  In particular, they
will install @file{.so} files in their module's directory, which is usually
fine because it is in the OCaml compiler directory.  In guix though, these
libraries cannot be found and we use @env{CAML_LD_LIBRARY_PATH}.  This
variable points to @file{lib/ocaml/site-lib/stubslibs} and this is where
@file{.so} libraries should be installed.
@end defvr

@defvr {Variable Scheme} python-build-system
Esta variable se exporta en @code{(guix build-system python)}. Implementa el
procedimiento más o menos estándar de construcción usado por paquetes
Python, que consiste en la ejecución de @code{python setup.py build} y
@code{python setup.py install --prefix=/gnu/store/@dots{}}.

For packages that install stand-alone Python programs under @code{bin/}, it
takes care of wrapping these programs so that their @env{PYTHONPATH}
environment variable points to all the Python libraries they depend on.

Se puede especificar el paquete Python usado para llevar a cabo la
construcción con el parámetro @code{#:python}. Esta es habitualmente una
forma de forzar la construcción de un paquete para una versión específica
del intérprete Python, lo que puede ser necesario si el paquete es
compatible únicamente con una versión del intérprete.

De manera predeterminada guix llama a @code{setup.py} bajo el control de
@code{setuptools} de manera similar a lo realizado por
@command{pip}. Algunos paquetes no son compatibles con setuptools (y pip),
por lo que puede desactivar esta configuración estableciendo el parámetro
@code{#:use-setuptools} a @code{#f}.
@end defvr

@defvr {Variable Scheme} perl-build-system
Esta variable se exporta en @code{(guix build-system perl)}. Implementa el
procedimiento de construcción estándar para paquetes Perl, lo que o bien
consiste en la ejecución de @code{perl Build.PL
--prefix=/gnu/store/@dots{}}, seguido de @code{Build} y @code{Build
install}; o en la ejecución de @code{perl Makefile.PL
PREFIX=/gnu/store/@dots{}}, seguida de @code{make} y @code{make install},
dependiendo de si @code{Build.PL} o @code{Makefile.PL} están presentes en la
distribución del paquete. El primero tiene preferencia si existen tanto
@code{Build.PL} como @code{Makefile.PL} en la distribución del paquete. Esta
preferencia puede ser invertida mediante la especificación del valor
@code{#t} en el parámetro @code{#:make-maker?}.

La invocación inicial de @code{perl Makefile.PL} o @code{perl Build.PL} pasa
a su vez las opciones especificadas por los parámetros
@code{#:make-maker-flags} o @code{#:module-build-flags}, respectivamente.

El paquete Perl usado puede especificarse con @code{#:perl}.
@end defvr

@defvr {Variable Scheme} qt-build-system
Esta variable se exporta en @code{(guix build-system qt)}. Está pensado para
usarse con aplicaciones que usen Qt o KDE.

Este sistema de construcción añade las dos fases siguientes a las definidas
en @var{cmake-build-system}:

@table @code
@item check-setup
La fase @code{check-setup} prepara el entorno para la ejecución de las
comprobaciones usadas habitualmente por los programas de pruebas de Qt. Por
ahora únicamente proporciona valor a algunas variables de entorno:
@code{QT_QPA_PLATFORM=offscreen}, @code{DBUS_FATAL_WARNINGS=0} y
@code{CTEST_OUTPUT_ON_FAILURE=1}.

Esta fase se añade previamente a la fase @code{check}. Es una fase separada
para facilitar el ajuste si fuese necesario.

@item qt-wrap
La fase @code{qt-wrap} busca las rutas de módulos de Qt5, las rutas de QML y
algunas rutas XDG en las entradas y la salida. En caso de que alguna ruta se
encuentra, todos los programas en los directorios @file{bin/}, @file{sbin/},
@file{libexec/} y @file{lib/libexec/} de la salida se envuelven en guiones
que definen las variables de entorno necesarias.

Es posible excluir salidas específicas del paquete del proceso de
recubrimiento enumerando sus nombres en el parámetro
@code{#:qt-wrap-excluded-outputs}. Esto es útil cuando se sabe que una
salida no contiene binarios que usen Qt, y cuando empaquetar gratuitamente
añadiría una dependencia de dicha salida en Qt.

Ambas fases se añaden tras la fase @code{install}.
@end table
@end defvr

@defvr {Variable Scheme} r-build-system
This variable is exported by @code{(guix build-system r)}.  It implements
the build procedure used by @uref{https://r-project.org, R} packages, which
essentially is little more than running @samp{R CMD INSTALL
--library=/gnu/store/@dots{}} in an environment where @env{R_LIBS_SITE}
contains the paths to all R package inputs.  Tests are run after
installation using the R function @code{tools::testInstalledPackage}.
@end defvr

@defvr {Variable Scheme} rakudo-build-system
Esta variable se exporta en @code{(guix build-system rakudo)}. Implementa el
procedimiento de construcción usado por @uref{https://rakudo.org/, Rakudo}
para paquetes @uref{https://perl6.org/, Perl6}. Instala el paquete en
@code{/gnu/store/@dots{}/NOMBRE-VERSIÓN/share/perl6} e instala los binarios,
ficheros de bibliotecas y recursos, así como recubre los ficheros en el
directorio @code{bin/}. Las pruebas pueden omitirse proporcionando @code{#f}
en el parámetro @code{tests?}.

El paquete rakudo en uso puede especificarse con @code{rakudo}. El paquete
perl6-tap-harness en uso durante las pruebas puede especificarse con
@code{#:prove6} o eliminarse proporcionando @code{#f} al parámetro
@code{with-prove6?}. El paquete perl6-zef en uso durante las pruebas e
instalación puede especificarse con @code{#:zef} o eliminarse proporcionando
@code{#f} al parámetro @code{with-zef?}.
@end defvr

@defvr {Variable Scheme} texlive-build-system
This variable is exported by @code{(guix build-system texlive)}.  It is used
to build TeX packages in batch mode with a specified engine.  The build
system sets the @env{TEXINPUTS} variable to find all TeX source files in the
inputs.

Por defecto ejecuta @code{luatex} en todos los ficheros que terminan en
@code{ins}. Un motor y formato diferente puede especificarse con el
parámetro @code{#:tex-format}. Los diferentes objetivos de construcción
pueden especificarse con el parámetro @code{#:build-targets}, que espera una
lista de nombres de fichero. El sistema de construcción añade únicamente
@code{texlive-bin} y @code{texlive-latex-base} (ambos desde @code{(gnu
packages tex)} a las entradas. Ambos pueden forzarse con los parámetros
@code{#:texlive-bin} y @code{#:texlive-latex-base} respectivamente.

El parámetro @code{#:tex-directory} le dice al sistema de construcción dónde
instalar los ficheros construidos bajo el árbol texmf.
@end defvr

@defvr {Variable Scheme} ruby-build-system
Esta variable se exporta en @code{(guix build-system ruby)}. Implementa el
procedimiento de construcción de RubyGems usado por los paquetes Ruby, que
implica la ejecución de @code{gem build} seguida de @code{gem install}.

El campo @code{source} de un paquete que usa este sistema de construcción
típicamente se refiere a un archivo gem, ya que este es el formato usado por
las desarrolladoras Ruby cuando publican su software. El sistema de
construcción desempaqueta el archivo gem, potencialmente parchea las
fuentes, ejecuta la batería de pruebas, vuelve a empaquetar el archivo gem y
lo instala. Adicionalmente, se puede hacer referencia a directorios y
archivadores tar para permitir la construcción de archivos gem no publicados
desde Git o un archivador tar de publicación de fuentes tradicional.

Se puede especificar el paquete Ruby usado mediante el parámetro
@code{#:ruby}. Una lista de opciones adicionales pueden pasarse a la orden
@command{gem} en el parámetro @code{#:gem-flags}.
@end defvr

@defvr {Variable Scheme} waf-build-system
Esta variable se exporta en @code{(guix build-system waf)}. Implementa un
procedimiento de construcción alrededor del guión @code{waf}. Las fases
comunes---@code{configure}, @code{build} y @code{install}---se implementan
pasando sus nombres como parámetros al guión @code{waf}.

El guión @code{waf} es ejecutado por el intérprete Python. El paquete Python
usado para la ejecución puede ser especificado con el parámetro
@code{#:python}.
@end defvr

@defvr {Variable Scheme} scons-build-system
Esta variable se exporta en @code{(guix build-system scons)}. Implementa en
procedimiento de construcción usado por la herramienta de construcción de
software SCons. Este sistema de construcción ejecuta @code{scons} para
construir el paquete, @code{scons test} para ejecutar las pruebas y después
@code{scons install} para instalar el paquete.

Las opciones adicionales a pasar a @code{scons} se pueden especificar con el
parámetro @code{#:scons-flags}. Los objetivos predeterminados de
construcción (build) e instalación (install) pueden modificarse con
@code{#:build-targets} y @code{#:install-targets} respectivamente. La
versión de Python usada para ejecutar SCons puede especificarse
seleccionando el paquete SCons apropiado con el parámetro @code{#:scons}.
@end defvr

@defvr {Variable Scheme} haskell-build-system
Esta variable se exporta en @code{(guix build-system haskell)}. Implementa
el procedimiento de construcción Cabal usado por paquetes Haskell, el cual
implica la ejecución de @code{runhaskell Setup.hs configure
--prefix=/gnu/store/@dots{}} y @code{runhaskell Setup.hs build}. En vez de
instalar el paquete ejecutando @code{runhaskell Setup.hs install}, para
evitar el intento de registro de bibliotecas en el directorio de
solo-lectura del compilador en el almacén, el sistema de construcción usa
@code{runhaskell Setup.hs copy}, seguido de @code{runhaskell Setup.hs
register}. Además, el sistema de construcción genera la documentación del
paquete ejecutando @code{runhaskell Setup.hs haddock}, a menos que se pasase
@code{#:haddock? #f}. Parámetros opcionales de Haddock pueden proporcionarse
con la ayuda del parámetro @code{#:haddock-flags}. Si el fichero
@code{Setup.hs} no es encontrado, el sistema de construcción busca
@code{Setup.lhs} a su vez.

El compilador Haskell usado puede especificarse con el parámetro
@code{#:haskell} cuyo valor predeterminado es @code{ghc}.
@end defvr

@defvr {Variable Scheme} dub-build-system
Esta variable se exporta en @code{(guix build-system dub)}. Implementa el
procedimiento de construcción Dub usado por los paquetes D, que implica la
ejecución de @code{dub build} y @code{dub run}. La instalación se lleva a
cabo con la copia manual de los ficheros.

El compilador D usado puede ser especificado con el parámetro @code{#:ldc}
cuyo valor predeterminado es @code{ldc}.
@end defvr

@defvr {Variable Scheme} emacs-build-system
Esta variable se exporta en @code{(guix build-system emacs)}. Implementa un
procedimiento de instalación similar al propio sistema de empaquetado de
Emacs (@pxref{Packages,,, emacs, The GNU Emacs Manual}).

Primero crea el fichero @code{@var{paquete}-autoloads.el}, tras lo que
compila todos los ficheros Emacs Lisp. De manera diferente al sistema de
paquetes de Emacs, los ficheros de documentación Info se mueven al
directorio estándar de documentación y se borra el fichero @file{dir}. Los
ficheros del paquete Elisp se instalan directamente en
@file{share/emacs/site-lisp}.
@end defvr

@defvr {Variable Scheme} font-build-system
Esta variable se exporta en @code{(guix build-system font)}. Implementa un
procedimiento de instalación para paquetes de fuentes donde las proveedoras
originales proporcionan ficheros de tipografía TrueType, OpenType, etc.@:
precompilados que simplemente necesitan copiarse en su lugar. Copia los
ficheros de tipografías a las localizaciones estándar en el directorio de
salida.
@end defvr

@defvr {Variable Scheme} meson-build-system
Esta variable se exporta en @code{(guix build-system meson)}. Implementa el
procedimiento de construcción para paquetes que usan
@url{https://mesonbuild.com, Meson} como su sistema de construcción.

Añade Meson y @uref{https://ninja-build.org/, Ninja} al conjunto de
entradas, y pueden cambiarse con los parámetros @code{#:meson} y
@code{#:ninja} en caso necesario. La versión de Meson predeterminada es
@code{meson-for-build}, la cual es especial puesto que no limpia el
@code{RUNPATH} de los binarios y bibliotecas durante la instalación.

Este sistema de construcción es una extensión de @var{gnu-build-system},
pero con las siguientes fases cambiadas por otras específicas para Meson:

@table @code

@item configure
The phase runs @code{meson} with the flags specified in
@code{#:configure-flags}.  The flag @option{--buildtype} is always set to
@code{debugoptimized} unless something else is specified in
@code{#:build-type}.

@item build
Esta fase ejecuta @code{ninja} para construir el paquete en paralelo por
defecto, pero esto puede cambiarse con @code{#:parallel-build?}.

@item check
Esta fase ejecuta @code{ninja} con el objetivo especificado en
@code{#:test-target}, cuyo valor predeterminado es @code{"test"}.

@item install
Esta fase ejecuta @code{ninja install} y no puede cambiarse.
@end table

Aparte de estas, el sistema de ejecución también añade las siguientes fases:

@table @code

@item fix-runpath
Esta fase se asegura de que todos los binarios pueden encontrar las
bibliotecas que necesitan. Busca las bibliotecas necesarias en
subdirectorios del paquete en construcción, y añade estas a @code{RUNPATH}
en caso necesario. También elimina referencias a bibliotecas introducidas en
la fase de construcción por @code{meson-for-build}, como las dependencias de
las pruebas, que no se necesitan realmente para la ejecución del programa.

@item glib-or-gtk-wrap
Esta fase es la fase proporcionada por @code{glib-or-gtk-build-system}, y no
está activa por defecto. Puede activarse con @code{#:glib-or-gtk}.

@item glib-or-gtk-compile-schemas
Esta fase es la fase proporcionada por @code{glib-or-gtk-build-system}, y no
está activa por defecto. Puede activarse con @code{#:glib-or-gtk}.
@end table
@end defvr

@defvr {Variable Scheme} linux-module-build-system
@var{linux-module-build-system} permite la construcción de módulos del
núcleo Linux.

@cindex fases de construcción
Este sistema de construcción es una extensión de @var{gnu-build-system},
pero con las siguientes fases cambiadas:

@table @code

@item configure
Esta fase configura el entorno de modo que el Makefile del núcleo Linux
pueda usarse para la construcción del módulo externo del núcleo.

@item build
Esta fase usa el Makefile del núcleo Linux para construir el módulo externo
del núcleo.

@item install
Esta fase usa el Makefile del núcleo Linux para instalar el módulo externo
del núcleo.
@end table

It is possible and useful to specify the Linux kernel to use for building
the module (in the @code{arguments} form of a package using the
@code{linux-module-build-system}, use the key @code{#:linux} to specify it).
@end defvr

@defvr {Variable Scheme} node-build-system
Esta variable se exporta en @code{(guix build-system node)}. Implementa el
procedimiento de construcción usado por @uref{https://nodejs.org, Node.js},
que implementa una aproximación de la orden @code{npm install}, seguida de
una orden @code{npm test}.

El paquete Node.js usado para interpretar las órdenes @code{npm} puede
especificarse a través del parámetro @code{#:node} cuyo valor predeterminado
es @code{node}.
@end defvr

Por último, para paquetes que no necesiten nada tan sofisticado se
proporciona un sistema de construcción ``trivial''. Es trivial en el sentido
de que no proporciona prácticamente funcionalidad: no incorpora entradas
implícitas y no tiene una noción de fases de construcción.

@defvr {Variable Scheme} trivial-build-system
Esta variable se exporta en @code{(guix build-system trivial)}.

Este sistema de construcción necesita un parámetro @code{#:builder}. Este
parámetro debe ser una expresión Scheme que construya la(s) salida(s) del
paquete---como en @code{build-expression->derivation} (@pxref{Derivaciones,
@code{build-expression->derivation}}).
@end defvr

@node El almacén
@section El almacén

@cindex almacén
@cindex elementos del almacén
@cindex rutas del almacén

Conceptualmente, el @dfn{almacén} es el lugar donde se almacenan las
derivaciones cuya construcción fue satisfactoria---por defecto,
@file{/gnu/store}. Los subdirectorios en el almacén se denominan
@dfn{elementos del almacén} o @dfn{rutas del almacén} en ocasiones. El
almacén tiene una base de datos asociada que contiene información como las
rutas del almacén a las que referencia cada ruta del almacén, y la lista de
elementos @emph{válidos} del almacén---los resultados de las construcciones
satisfactorias. Esta base de datos reside en
@file{@var{localstatedir}/guix/db}, donde @var{localstatedir} es el
directorio de estado especificado @i{vía} @option{--localstatedir} en tiempo
de configuración, normalmente @file{/var}.

El almacén @emph{siempre} es accedido a través del daemon en delegación de
sus clientes (@pxref{Invocación de guix-daemon}). Para manipular el almacén, los
clientes se conectan al daemon por un socket de dominio Unix, le envían
peticiones y leen el resultado---esto son llamadas a procedimientos remotos,
o RPC.

@quotation Nota
Las usuarias @emph{nunca} deben modificar ficheros directamente bajo el
directorio @file{/gnu/store}. Esto llevaría a inconsistencias y rompería las
premisas de inmutabilidad del modelo funcional de Guix
(@pxref{Introducción}).

@xref{Invocación de guix gc, @command{guix gc --verify}}, para información sobre
cómo comprobar la integridad del almacén e intentar recuperarse de
modificaciones accidentales.
@end quotation

The @code{(guix store)} module provides procedures to connect to the daemon,
and to perform RPCs.  These are described below.  By default,
@code{open-connection}, and thus all the @command{guix} commands, connect to
the local daemon or to the URI specified by the @env{GUIX_DAEMON_SOCKET}
environment variable.

@defvr {Variable de entorno} GUIX_DAEMON_SOCKET
Cuando se ha definido, el valor de esta variable debe ser un nombre de
fichero o una URI designando el punto de conexión del daemon. Cuando es un
nombre de fichero, denota un socket de dominio Unix al que
conectarse. Además de nombres de ficheros, los esquemas de URI aceptados
son:

@table @code
@item file
@itemx unix
Estos son equivalentes a los sockets de dominio
Unix. @code{file:///var/guix/daemon-socket/socket} es equivalente a
@file{/var/guix/daemon-socket/socket}.

@item guix
@cindex daemon, acceso remoto
@cindex acceso remoto al daemon
@cindex daemon, configuración en cluster
@cindex daemon, configuración en cluster
Estas URI denotan conexiones sobre TCP/IP, sin cifrado ni verificación de la
máquina remota. La URI debe especificar el nombre de máquina y opcionalmente
un número de puerto (por defecto se usa el puerto 44146):

@example
guix://principal.guix.example.org:1234
@end example

Esta configuración es apropiada para redes locales, como clusters, donde
únicamente los nodos de confianza pueden conectarse al daemon de
construcción en @code{principal.guix.example.org}.

The @option{--listen} option of @command{guix-daemon} can be used to
instruct it to listen for TCP connections (@pxref{Invocación de guix-daemon,
@option{--listen}}).

@item ssh
@cindex acceso SSH a los daemons de construcción
These URIs allow you to connect to a remote daemon over SSH.  This feature
requires Guile-SSH (@pxref{Requisitos}) and a working @command{guile}
binary in @env{PATH} on the destination machine.  It supports public key and
GSSAPI authentication.  A typical URL might look like this:

@example
ssh://carlos@@guix.example.org:22
@end example

Como con @command{guix copy}, se tienen en cuenta los ficheros habituales de
configuración del cliente OpenSSH (@pxref{Invocación de guix copy}).
@end table

Esquemas URI adicionales pueden ser aceptados en el futuro.

@c XXX: Remove this note when the protocol incurs fewer round trips
@c and when (guix derivations) no longer relies on file system access.
@quotation Nota
La conexión con daemon de construcción remotos se considera experimental en
@value{VERSION}. Por favor, contacte con nosotras para compartir cualquier
problema o sugerencias que pueda tener (@pxref{Contribuir}).
@end quotation
@end defvr

@deffn {Procedimiento Scheme} open-connection [@var{uri}] [#:reserve-space? #t]
Abre una conexión al daemon a través del socket de dominio Unix apuntado por
@var{uri} (una cadena). Cuando @var{reserve-space?} es verdadero, le indica
que reserve un poco de espacio extra en el sistema de ficheros de modo que
el recolector de basura pueda operar incluso cuando el disco se
llene. Devuelve un objeto servidor.

El valor por defecto de @var{uri} es @code{%default-socket-path}, que ese la
ruta esperada según las opciones proporcionadas a @code{configure}.
@end deffn

@deffn {Procedimiento Scheme} close-connection @var{servidor}
Cierra la conexión al @var{servidor}.
@end deffn

@defvr {Variable Scheme} current-build-output-port
Esta variable está enlazada a un parámetro SRFI-39, que referencia al puerto
donde los logs de construcción y error enviados por el daemon deben
escribirse.
@end defvr

Los procedimientos que realizan RPCs toman todos como primer parámetro un
objeto servidor.

@deffn {Procedimiento Scheme} valid-path? @var{servidor} @var{ruta}
@cindex elementos del almacén no válidos
Return @code{#t} when @var{path} designates a valid store item and @code{#f}
otherwise (an invalid item may exist on disk but still be invalid, for
instance because it is the result of an aborted or failed build).

Una condición @code{&store-protocol-error} se eleva si @var{ruta} no
contiene como prefijo el directorio del almacén (@file{/gnu/store}).
@end deffn

@deffn {Procedimiento Scheme} add-text-to-store @var{servidor} @var{nombre} @var{texto} [@var{referencias}]
Añade @var{texto} bajo el fichero @var{nombre} en el almacén, y devuelve su
ruta en el almacén. @var{referencias} es la lista de rutas del almacén a las
que hace referencia la ruta del almacén resultante.
@end deffn

@deffn {Procedimiento Scheme} build-derivations @var{almacén} @var{derivaciones} @
  [@var{modo}]
Construye @var{derivaciones}, una lista de objetos @code{<derivation>},
nombres de fichero @file{.drv}, o pares derivación/salida, usando el
@var{modo} especificado---@code{(build-mode normal)} en caso de omisión.
@end deffn

Fíjese que el módulo @code{(guix monads)} proporciona una mónada así como
versiones monádicas de los procedimientos previos, con el objetivo de hacer
más conveniente el trabajo con código que accede al almacén (@pxref{La mónada del almacén}).

@c FIXME
@i{Esta sección actualmente está incompleta.}

@node Derivaciones
@section Derivaciones

@cindex derivaciones
Las acciones de construcción a bajo nivel y el entorno en el que se realizan
se representan mediante @dfn{derivaciones}. Una derivación contiene las
siguientes piezas de información:

@itemize
@item
Las salidas de la derivación---las derivaciones producen al menos un fichero
o directorio en el almacén, pero pueden producir más.

@item
@cindex tiempo de construcción, dependencias
@cindex dependencias, tiempo de construcción
The inputs of the derivations---i.e., its build-time dependencies---which
may be other derivations or plain files in the store (patches, build
scripts, etc.).

@item
El tipo de sistema objetivo de la derivación---por ejemplo,
@code{x86_64-linux}.

@item
El nombre de fichero del guión de construcción en el almacén, junto a los
parámetros que se le deben pasar.

@item
Una lista de variables de entorno a ser definidas.

@end itemize

@cindex ruta de derivación
Derivations allow clients of the daemon to communicate build actions to the
store.  They exist in two forms: as an in-memory representation, both on the
client- and daemon-side, and as files in the store whose name end in
@file{.drv}---these files are referred to as @dfn{derivation paths}.
Derivations paths can be passed to the @code{build-derivations} procedure to
perform the build actions they prescribe (@pxref{El almacén}).

@cindex derivaciones de salida fija
Operaciones como la descarga de ficheros y las instantáneas de un control de
versiones para las cuales el hash del contenido esperado se conoce
previamente se modelan como @dfn{derivaciones de salida fija}. Al contrario
que las derivaciones normales, las salidas de una derivación de salida fija
son independientes de sus entradas---por ejemplo, la descarga del código
fuente produce el mismo resultado independientemente del método de descarga
y las herramientas usadas.

@cindex references
@cindex tiempo de ejecución, dependencias
@cindex dependencias, tiempo de ejecución
Las derivaciones de salida---es decir, los resultados de
construcción---tienen un conjunto de @dfn{referencias}, del que informa la
RPC @code{references} o la orden @command{guix gc --references}
(@pxref{Invocación de guix gc}). Las referencias son el conjunto de dependencias
en tiempo de ejecución de los resultados de construcción. Las referencias
son un subconjunto de las entradas de la derivación; el daemon de
construcción calcula este subconjunto de forma automática mediante el
procesado de todos los ficheros en las salidas.

El módulo @code{(guix derivations)} proporciona una representación de
derivaciones como objetos Scheme, junto a procedimientos para crear y
manipular de otras formas derivaciones. La primitiva de más bajo nivel para
crear una derivación es el procedimiento @code{derivation}:

@deffn {Procedimiento Scheme} derivation @var{almacén} @var{nombre} @var{constructor} @
  @var{args} [#:outputs '("out")] [#:hash #f] [#:hash-algo #f] @
  [#:recursive? #f] [#:inputs '()] [#:env-vars '()] @
  [#:system (%current-system)] [#:references-graphs #f] @
  [#:allowed-references #f] [#:disallowed-references #f] @
  [#:leaked-env-vars #f] [#:local-build? #f] @
  [#:substitutable? #t] [#:properties '()]
Construye una derivación con los parámetros proporcionados, y devuelve el
objeto @code{<derivation>} resultante.

Cuando se proporcionan @var{hash} y @var{hash-algo}, una @dfn{derivación de
salida fija} se crea---es decir, una cuyo resultado se conoce de antemano,
como la descarga de un fichero. Si, además, @var{recursive?} es verdadero,
entonces la salida fijada puede ser un fichero ejecutable o un directorio y
@var{hash} debe ser el hash de un archivador que contenga esta salida.

Cuando @var{references-graphs} es verdadero, debe ser una lista de pares de
nombre de fichero/ruta del almacén. En ese caso, el grafo de referencias de
cada ruta del almacén se exporta en el entorno de construcción del fichero
correspondiente, en un formato de texto simple.

Cuando @var{allowed-references} es verdadero, debe ser una lista de
elementos del almacén o salidas a las que puede hacer referencia la salida
de la derivación. Del mismo modo, @var{disallowed-references}, en caso de
ser verdadero, debe ser una lista de cosas a las que las salidas @emph{no}
pueden hacer referencia.

Cuando @var{leaked-env-vars} es verdadero, debe ser una lista de cadenas que
denoten variables de entorno que se permite ``escapar'' del entorno del
daemon al entorno de construcción. Esto es únicamente aplicable a
derivaciones de salida fija---es decir, cuando @var{hash} es verdadero. El
uso principal es permitir que variables como @code{http_proxy} sean pasadas
a las derivaciones que descargan ficheros.

Cuando @var{local-build?} es verdadero, declara que la derivación no es una
buena candidata para delegación y debe ser construida localmente
(@pxref{Configuración de delegación del daemon}). Este es el caso para pequeñas derivaciones
donde los costes de transferencia de datos sobrepasarían los beneficios.

Cuando @var{substitutable?} es falso, declara que las sustituciones de la
salida de la derivación no deben usarse (@pxref{Sustituciones}). Esto es útil,
por ejemplo, cuando se construyen paquetes que capturan detalles sobre el
conjunto de instrucciones de la CPU anfitriona.

@var{properties} debe ser una lista asociada que describe ``propiedades'' de
la derivación. Debe mantenerse tal cual, sin interpretar, en la derivación.
@end deffn

@noindent
Esto es un ejemplo con un guión de shell como constructor, asumiendo que
@var{almacén} es una conexión abierta al daemon, @var{bash} apunta al
ejecutable Bash en el almacén:

@lisp
(use-modules (guix utils)
             (guix store)
             (guix derivations))

(let ((constructor   ; añade el guión de Bash al almacén
        (add-text-to-store store "mi-constructor.sh"
                           "echo hola mundo > $out\n" '())))
  (derivation almacen "foo"
              bash `("-e" ,builder)
              #:inputs `((,bash) (,constructor))
              #:env-vars '(("HOME" . "/sindirectorio"))))
@result{} #<derivation /gnu/store/@dots{}-foo.drv => /gnu/store/@dots{}-foo>
@end lisp

Como puede suponerse, el uso directo de esta primitiva es algo
enrevesado. Una mejor aproximación es escribir guiones de construcción en
Scheme, ¡por supuesto! La mejor forma de hacerlo es escribir el código de
construcción como una ``expresión-G'', y pasarla a
@code{gexp->derivation}. Para más información, @pxref{Expresiones-G}.

En otros tiempos, @code{gexp->derivation} no existía y la creación de
derivaciones con código de construcción escrito en Scheme se conseguía con
@code{build-expression->derivation}, documentada más adelante. Este
procedimiento está ahora obsoleto en favor del procedimiento
@code{gexp->derivation} mucho más conveniente.

@deffn {Procedimiento Scheme} build-expression->derivation @var{almacén} @
       @var{nombre} @var{exp} @
  [#:system (%current-system)] [#:inputs '()] @
  [#:outputs '("out")] [#:hash #f] [#:hash-algo #f] @
  [#:recursive? #f] [#:env-vars '()] [#:modules '()] @
  [#:references-graphs #f] [#:allowed-references #f] @
  [#:disallowed-references #f] @
  [#:local-build? #f] [#:substitutable? #t] [#:guile-for-build #f]
Devuelve una derivación que ejecuta la expresión Scheme @var{exp} como un
constructor para la derivación @var{nombre}. @var{inputs} debe ser una lista
de tuplas @code{(nombre ruta-drv sub-drv)}; cuando @var{sub-drv} se omite,
se asume @code{"out"}. @var{modules} es una lista de nombres de módulos
Guile de la ruta actual de búsqueda a copiar en el almacén, compilados, y
poner a disposición en la ruta de carga durante la ejecución de
@var{exp}---por ejemplo, @code{((guix build utils) (guix build
gnu-build-system))}.

@var{exp} se evalúa en un entorno donde @code{%outputs} está asociada a una
lista de pares salida/ruta, y donde @code{%build-inputs} está asociada a una
lista de pares cadena/ruta-de-salida que provienen de @var{inputs}. De
manera opcional, @var{env-vars} es una lista de pares de cadenas que
especifican el nombre y el valor de las variables de entorno visibles al
constructor. El constructor termina pasando el resultado de @var{exp} a
@code{exit}; por tanto, cuando @var{exp} devuelve @code{#f}, la construcción
se considera fallida.

@var{exp} se construye usando @var{guile-for-build} (una derivación). Cuando
@var{guile-for-build} se omite o es @code{#f}, el valor del fluido
@code{%guile-for-build} se usa en su lugar.

Véase el procedimiento @code{derivation} para el significado de
@var{references-graphs}, @var{allowed-references},
@var{disallowed-references}, @var{local-build?} y @var{substitutable?}.
@end deffn

@noindent
Aquí está un ejemplo de derivación de salida única que crea un directorio
que contiene un fichero:

@lisp
(let ((constructor '(let ((salida (assoc-ref %outputs "out")))
                      (mkdir salida)    ; crea /gnu/store/@dots{}-goo
                      (call-with-output-file (string-append salida "/prueba")
                        (lambda (p)
                          (display '(hola guix) p))))))
  (build-expression->derivation almacen "goo" constructor))

@result{} #<derivation /gnu/store/@dots{}-goo.drv => @dots{}>
@end lisp


@node La mónada del almacén
@section La mónada del almacén

@cindex mónada

Los procedimientos que operan en el almacén descritos en la sección previa
toman todos una conexión abierta al daemon de construcción en su primer
parámetro. Aunque el modelo subyacente es funcional, tienen o bien efectos
secundarios o dependen del estado actual del almacén.

Lo anterior es inconveniente: la conexión al daemon de construcción tiene
que proporcionarse en todas estas funciones, haciendo imposible la
composición de funciones que no toman ese parámetro con funciones que sí lo
hacen. Lo último puede ser problemático: ya que las operaciones del almacén
tienen efectos secundarios y/o dependen del estado externo, deben ser
secuenciadas de manera adecuada.

@cindex valores monádicos
@cindex funciones monádicas
Aquí es donde entra en juego el módulo @code{(guix monads)}. Este módulo
proporciona un entorno para trabajar con @dfn{mónadas}, y una mónada
particularmente útil para nuestros usos, la @dfn{mónada del almacén}. Las
mónadas son una construcción que permite dos cosas: asociar ``contexto'' con
valores (en nuestro caso, el contexto es el almacén), y la construcción de
secuencias de computaciones (aquí computaciones incluye accesos al
almacén). Los valores en una mónada---valores que transportan este contexto
adicional---se llaman @dfn{valores monádicos}; los procedimientos que
devuelven dichos valores se llaman @dfn{procedimientos monádicos}.

Considere este procedimiento ``normal'':

@lisp
(define (enlace-sh almacen)
  ;; Devuelve una derivación que enlaza el ejecutable 'bash'.
  (let* ((drv (package-derivation store bash))
         (out (derivation->output-path drv))
         (sh  (string-append out "/bin/bash")))
    (build-expression->derivation store "sh"
                                  `(symlink ,sh %output))))
@end lisp

Mediante el uso de @code{(guix monads)} y @code{(guix gexp)}, puede
reescribirse como una función monádica:

@lisp
(define (enlace-sh)
  ;; Lo mismo, pero devuelve un valor monádico.
  (mlet %store-monad ((drv (package->derivation bash)))
    (gexp->derivation "sh"
                      #~(symlink (string-append #$drv "/bin/bash")
                                 #$output))))
@end lisp

Hay varias cosas a tener en cuenta en la segunda versión: el parámetro
@code{store} ahora es implícito y es ``hilado en las llamadas a los
procedimientos monádicos @code{package->derivation} y
@code{gexp->derivation}, y el valor monádico devuelto por
@code{package->derivation} es @dfn{asociado} mediante el uso de @code{mlet}
en vez de un simple @code{let}.

Al final, la llamada a @code{package->derivation} puede omitirse ya que
tendrá lugar implícitamente, como veremos más adelante
(@pxref{Expresiones-G}):

@lisp
(define (enlace-sh)
  (gexp->derivation "sh"
                    #~(symlink (string-append #$bash "/bin/bash")
                               #$output)))
@end lisp

@c See
@c <https://syntaxexclamation.wordpress.com/2014/06/26/escaping-continuations/>
@c for the funny quote.
La ejecución del procedimiento monádico @code{enlace-para-sh} no tiene
ningún efecto. Como alguien dijo una vez, ``sales de una mónada como sales
de un edificio en llamas: corriendo'' (run en inglés). Por tanto, para salir
de la mónada y obtener el efecto deseado se debe usar @code{run-with-store}:

@lisp
(run-with-store (open-connection) (enlace-sh))
@result{} /gnu/store/...-enlace-para-sh
@end lisp

Fíjese que el módulo @code{(guix monad-repl)} extiende la sesión interactiva
de Guile con nuevos ``meta-comandos'' para facilitar el trabajo con
procedimientos monádicos: @code{run-in-store} y @code{enter-store-monad}. El
primero se usa para ``ejecutar'' un valor monádico único a través del
almacén:

@example
scheme@@(guile-user)> ,run-in-store (package->derivation hello)
$1 = #<derivation /gnu/store/@dots{}-hello-2.9.drv => @dots{}>
@end example

El último entra en un entorno interactivo recursivo, donde todos los valores
devueltos se ejecutan automáticamente a través del almacén:

@example
scheme@@(guile-user)> ,enter-store-monad
store-monad@@(guile-user) [1]> (package->derivation hello)
$2 = #<derivation /gnu/store/@dots{}-hello-2.9.drv => @dots{}>
store-monad@@(guile-user) [1]> (text-file "foo" "Hello!")
$3 = "/gnu/store/@dots{}-foo"
store-monad@@(guile-user) [1]> ,q
scheme@@(guile-user)>
@end example

@noindent
Fíjese que los valores no-monádicos no pueden devolverse en el entorno
interactivo @code{store-monad}.

Las formas sintácticas principales para tratar con mónadas en general se
proporcionan por el módulo @code{(guix monads)} y se describen a
continuación.

@deffn {Sintaxis Scheme} with-monad @var{mónada} @var{cuerpo} ...
Evalúa cualquier forma @code{>>=} o @code{return} en @var{cuerpo} como
estando en @var{mónada}.
@end deffn

@deffn {Sintaxis Scheme} return @var{val}
Devuelve el valor monádico que encapsula @var{val}.
@end deffn

@deffn {Sintaxis Scheme} >>= @var{mval} @var{mproc} ...
@dfn{Asocia} el valor monádico @var{mval}, pasando su ``contenido'' a los
procedimientos monádicos @var{mproc}@dots{}@footnote{Esta operación es
habitualmente conocida como ``bind'' (asociación), pero ese nombre denota un
procedimiento no relacionado en Guile. Por tanto usamos este símbolo en
cierto modo críptico heredado del lenguaje Haskell.}. Puede haber un
@var{mproc} o varios, como en este ejemplo:

@lisp
(run-with-state
    (with-monad %state-monad
      (>>= (return 1)
           (lambda (x) (return (+ 1 x)))
           (lambda (x) (return (* 2 x)))))
  'un-estado)

@result{} 4
@result{} un-estado
@end lisp
@end deffn

@deffn {Sintaxis Scheme} mlet @var{mónada} ((@var{var} @var{mval}) ...) @
       @var{cuerpo} ...
@deffnx {Sintaxis Scheme} mlet* @var{mónada} ((@var{var} @var{mval}) ...) @
       @var{cuerpo} ... Asocia las variables @var{var} a los valores monádicos
@var{mval} en @var{cuerpo}, el cual es una secuencia de expresiones. Como
con el operador bind, esto puede pensarse como el ``desempaquetado'' del
valor crudo no-monádico dentro del ámbito del @var{cuerpo}. La forma
(@var{var} -> @var{val}) asocia @var{var} al valor ``normal'' @var{val},
como en @code{let}. Las operaciones de asociación ocurren en secuencia de
izquierda a derecha. La última expresión de @var{cuerpo} debe ser una
expresión monádica, y su resultado se convertirá en el resultado de
@code{mlet} o @code{mlet*} cuando se ejecute en la @var{mónada}.

@code{mlet*} es a @code{mlet} lo que @code{let*} es a @code{let}
(@pxref{Local Bindings,,, guile, GNU Guile Reference Manual}).
@end deffn

@deffn {Sistema Scheme} mbegin @var{mónada} @var{mexp} ...
Asocia @var{mexp} y las siguientes expresiones monádicas en secuencia,
devolviendo el resultado de la última expresión. Cada expresión en la
secuencia debe ser una expresión monádica.

Esto es similar a @code{mlet}, excepto que los valores devueltos por las
expresiones monádicas se ignoran. En ese sentido el funcionamiento es
análogo a @code{begin} pero aplicado a expresiones monádicas.
@end deffn

@deffn {Sistema Scheme} mwhen @var{condición} @var{mexp0} @var{mexp*} ...
Cuando @var{condición} es verdadero, evalúa la secuencia de expresiones
monádicas @var{mexp0}..@var{mexp*} como dentro de @code{mbegin}. Cuando
@var{condición} es falso, devuelve @code{*unespecified*} en la mónada
actual. Todas las expresiones en la secuencia deben ser expresiones
monádicas.
@end deffn

@deffn {Sistema Scheme} munless @var{condición} @var{mexp0} @var{mexp*} ...
Cuando @var{condición} es falso, evalúa la secuencia de expresiones
monádicas @var{mexp0}..@var{mexp*} como dentro de @code{mbegin}. Cuando
@var{condición} es verdadero, devuelve @code{*unespecified*} en la mónada
actual. Todas las expresiones en la secuencia deben ser expresiones
monádicas.
@end deffn

@cindex mónada de estado
El módulo @code{(guix monads)} proporciona la @dfn{mónada de estado}, que
permite que un valor adicional---el estado---sea @emph{hilado} a través de
las llamadas a procedimientos monádicos.

@defvr {Variable Scheme} %state-monad
La mónada de estado. Procedimientos en la mónada de estado pueden acceder y
cambiar el estado hilado.

Considere el siguiente ejemplo. El procedimiento @code{cuadrado} devuelve un
valor en la mónada de estado.

@lisp
(define (cuadrado x)
  (mlet %state-monad ((count (current-state)))
    (mbegin %state-monad
      (set-current-state (+ 1 count))
      (return (* x x)))))

(run-with-state (sequence %state-monad (map cuadrado (iota 3))) 0)
@result{} (0 1 4)
@result{} 3
@end lisp

When ``run'' through @code{%state-monad}, we obtain that additional state
value, which is the number of @code{square} calls.
@end defvr

@deffn {Procedimiento monádico} current-state
Devuelve el estado actual como un valor monádico.
@end deffn

@deffn {Procedimiento monádico} set-current-state @var{valor}
Establece el estado actual a @var{valor} y devuelve el estado previo como un
valor monádico.
@end deffn

@deffn {Procedimiento monádico} state-push @var{valor}
Apila @var{valor} al estado actual, que se asume que es una lista, y
devuelve el estado previo como un valor monádico.
@end deffn

@deffn {Procedimiento monádico} state-pop
Extrae un valor del estado actual y lo devuelve como un valor monádico. Se
asume que el estado es una lista.
@end deffn

@deffn {Procedimiento Scheme} run-with-state @var{mval} [@var{estado}]
Ejecuta un valor monádico @var{mval} comenzando con @var{estado} como el
estado inicial. Devuelve dos valores: el valor resultante y el estado
resultante.
@end deffn

La interfaz principal a la mónada del almacén, proporcionada por el módulo
@code{(guix store)}, es como sigue.

@defvr {Variable Scheme} %store-monad
The store monad---an alias for @code{%state-monad}.

Values in the store monad encapsulate accesses to the store.  When its
effect is needed, a value of the store monad must be ``evaluated'' by
passing it to the @code{run-with-store} procedure (see below).
@end defvr

@deffn {Procedimiento Scheme} run-with-store @var{almacén} @var{mval} [#:guile-for-build] [#:system (%current-system)]
Ejecuta @var{mval}, un valor monádico en la mónada del almacén, en
@var{almacén}, una conexión abierta al almacén.
@end deffn

@deffn {Procedimiento monádico} text-file @var{nombre} @var{texto} [@var{referencias}]
Devuelve como un valor monádico el nombre absoluto del fichero en el almacén
del fichero que contiene @var{ŧexto}, una cadena. @var{referencias} es una
lista de elementos del almacén a los que el fichero de texto referencia; su
valor predeterminado es la lista vacía.
@end deffn

@deffn {Procedimiento monádico} binary-file @var{nombre} @var{datos} [@var{referencias}]
Devuelve como un valor monádico el nombre absoluto del fichero en el almacén
del fichero que contiene @var{datos}, un vector de bytes. @var{referencias}
es una lista de elementos del almacén a los que el fichero binario
referencia; su valor predeterminado es la lista vacía.
@end deffn

@deffn {Procedimiento monádico} interned-file @var{fichero} [@var{nombre}] @
         [#:recursive? #t] [#:select? (const #t)]
Devuelve el nombre del @var{fichero} una vez internado en el almacén. Usa
@var{nombre} como su nombre del almacén, o el nombre base de @var{fichero}
si @var{nombre} se omite.

Cuando @var{recursive?} es verdadero, los contenidos del @var{fichero} se
añaden recursivamente; si @var{fichero} designa un fichero plano y
@var{recursive?} es verdadero, sus contenidos se añaden, y sus bits de
permisos se mantienen.

Cuando @var{recursive?} es verdadero, llama a @code{(@var{select?}
@var{fichero} @var{stat})} por cada entrada del directorio, donde
@var{fichero} es el nombre absoluto de fichero de la entrada y @var{stat} es
el resultado de @code{lstat}; excluyendo las entradas para las cuales
@var{select?} no devuelve verdadero.

El ejemplo siguiente añade un fichero al almacén, bajo dos nombres
diferentes:

@lisp
(run-with-store (open-connection)
  (mlet %store-monad ((a (interned-file "README"))
                      (b (interned-file "README" "LEGU-MIN")))
    (return (list a b))))

@result{} ("/gnu/store/rwm@dots{}-README" "/gnu/store/44i@dots{}-LEGU-MIN")
@end lisp

@end deffn

El módulo @code{(guix packages)} exporta los siguientes procedimientos
monádicos relacionados con paquetes:

@deffn {Procedimiento monádico} package-file @var{paquete} [@var{fichero}] @
       [#:system (%current-system)] [#:target #f] @
  [#:output "out"]
Devuelve como un valor monádico el nombre absoluto de fichero de
@var{fichero} dentro del directorio de salida @var{output} del
@var{paquete}. Cuando se omite @var{fichero}, devuelve el nombre del
directorio de salida @var{output} del @var{paquete}. Cuando @var{target} es
verdadero, se usa como una tripleta de compilación cruzada.

Note that this procedure does @emph{not} build @var{package}.  Thus, the
result might or might not designate an existing file.  We recommend not
using this procedure unless you know what you are doing.
@end deffn

@deffn {Procedimiento monádico} package->derivation @var{paquete} [@var{sistema}]
@deffnx {Procedimiento monádico} package->cross-derivation @var{paquete} @
          @var{objetivo} [@var{sistema}]
Versión monádica de @code{package-derivation} y
@code{package-cross-derivation} (@pxref{Definición de paquetes}).
@end deffn


@node Expresiones-G
@section Expresiones-G

@cindex expresión-G
@cindex escape de código de construcción
Por tanto tenemos ``derivaciones'', que representan una secuencia de
acciones de construcción a realizar para producir un elemento en el almacén
(@pxref{Derivaciones}). Estas acciones de construcción se llevan a cabo
cuando se solicita al daemon construir realmente la derivación; se ejecutan
por el daemon en un contenedor (@pxref{Invocación de guix-daemon}).

@cindex estratos de código
No debería ser ninguna sorpresa que nos guste escribir estas acciones de
construcción en Scheme. Cuando lo hacemos, terminamos con dos @dfn{estratos}
de código Scheme@footnote{El término @dfn{estrato} en este contexto se debe
a Manuel Serrano et al.@: en el contexto de su trabajo en Hop. Oleg
Kiselyov, quien ha escrito profundos
@url{http://okmij.org/ftp/meta-programming/#meta-scheme, ensayos sobre el
tema}, se refiere a este tipo de generación de código como separación en
etapas o @dfn{staging}.}: el ``código anfitrión''---código que define
paquetes, habla al daemon, etc.---y el ``código de construcción''---código
que realmente realiza las acciones de construcción, como la creación de
directorios, la invocación de @command{make}, etc.

Para describir una derivación y sus acciones de construcción, típicamente se
necesita embeber código de construcción dentro del código anfitrión. Se
resume en la manipulación de código de construcción como datos, y la
homoiconicidad de Scheme---el código tiene representación directa como
datos---es útil para ello. Pero necesitamos más que el mecanismo normal de
@code{quasiquote} en Scheme para construir expresiones de construcción.

El módulo @code{(guix gexp)} implementa las @dfn{expresiones-G}, una forma
de expresiones-S adaptada para expresiones de construcción. Las
expresiones-G, o @dfn{gexps}, consiste esencialmente en tres formas
sintácticas: @code{gexp}, @code{ungexp} y @code{ungexp-splicing} (o
simplemente: @code{#~}, @code{#$} y @code{#$@@}), que son comparables a
@code{quasiquote}, @code{unquote} y @code{unquote-splicing}, respectivamente
(@pxref{Expression Syntax, @code{quasiquote},, guile, GNU Guile Reference
Manual}). No obstante, hay importantes diferencias:

@itemize
@item
Las expresiones-G están destinadas a escribirse en un fichero y ser
ejecutadas o manipuladas por otros procesos.

@item
Cuando un objeto de alto nivel como un paquete o una derivación se expande
dentro de una expresión-G, el resultado es el mismo que la introducción de
su nombre de fichero de salida.

@item
Las expresiones-G transportan información acerca de los paquetes o
derivaciones que referencian, y estas referencias se añaden automáticamente
como entradas al proceso de construcción que las usa.
@end itemize

@cindex bajada de nivel, de objetos de alto nivel en expresiones-G
This mechanism is not limited to package and derivation objects:
@dfn{compilers} able to ``lower'' other high-level objects to derivations or
files in the store can be defined, such that these objects can also be
inserted into gexps.  For example, a useful type of high-level objects that
can be inserted in a gexp is ``file-like objects'', which make it easy to
add files to the store and to refer to them in derivations and such (see
@code{local-file} and @code{plain-file} below).

Para ilustrar la idea, aquí está un ejemplo de expresión-G:

@lisp
(define exp-construccion
  #~(begin
      (mkdir #$output)
      (chdir #$output)
      (symlink (string-append #$coreutils "/bin/ls")
               "enumera-ficheros")))
@end lisp

Esta expresión-G puede pasarse a @code{gexp->derivation}; obtenemos una
derivación que construye un directorio que contiene exactamente un enlace
simbólico a @file{/gnu/store/@dots{}-coreutils-8.22/bin/ls}:

@lisp
(gexp->derivation "la-cosa" exp-construccion)
@end lisp

Como se puede esperar, la cadena @code{"/gnu/store/@dots{}-coreutils-8.22"}
se sustituye por la referencia al paquete @var{coreutils} en el código de
construcción real, y @var{coreutils} se marca automáticamente como una
entrada a la derivación. Del mismo modo, @code{#$output} (equivalente a
@code{(ungexp output)}) se reemplaza por una cadena que contiene el nombre
del directorio de la salida de la derivación.

@cindex compilación cruzada
En un contexto de compilación cruzada, es útil distinguir entre referencias
a construcciones @emph{nativas} del paquete---que pueden ejecutarse en el
sistema anfitrión---de referencias de compilaciones cruzadas de un
paquete. Para dicho fin, @code{#+} tiene el mismo papel que @code{#$}, pero
es una referencia a una construcción nativa del paquete:

@lisp
(gexp->derivation "vi"
   #~(begin
       (mkdir #$output)
       (mkdir (string-append #$output "/bin"))
       (system* (string-append #+coreutils "/bin/ln")
                "-s"
                (string-append #$emacs "/bin/emacs")
                (string-append #$output "/bin/vi")))
   #:target "aarch64-linux-gnu")
@end lisp

@noindent
En el ejemplo previo, se usa la construcción nativa de @var{coreutils}, de
modo que @command{ln} pueda realmente ejecutarse en el anfitrión; pero se
hace referencia a la construcción de compilación cruzada de @var{emacs}.

@cindex módulos importados, para expresiones-G
@findex with-imported-modules
Otra característica de las expresiones-G son los @dfn{módulos importados}: a
veces deseará ser capaz de usar determinados módulos Guile del ``entorno
anfitrión'' en la expresión-G, de modo que esos módulos deban ser importados
en el ``entorno de construcción''. La forma @code{with-imported-modules} le
permite expresarlo:

@lisp
(let ((build (with-imported-modules '((guix build utils))
               #~(begin
                   (use-modules (guix build utils))
                   (mkdir-p (string-append #$output "/bin"))))))
  (gexp->derivation "directorio-vacio"
                    #~(begin
                        #$build
                        (display "éxito!\n")
                        #t)))
@end lisp

@noindent
En este ejemplo, el módulo @code{(guix build utils)} se incorpora
automáticamente dentro del entorno de construcción aislado de nuestra
expresión-G, de modo que @code{(use-modules (guix build utils))} funciona
como se espera.

@cindex clausura de módulos
@findex source-module-closure
De manera habitual deseará que la @emph{clausura} del módulo se importe---es
decir, el módulo en sí y todos los módulos de los que depende---en vez del
módulo únicamente; si no se hace, cualquier intento de uso del módulo
fallará porque faltan módulos dependientes. El procedimiento
@code{source-module-closure} computa la clausura de un módulo mirando en las
cabeceras de sus ficheros de fuentes, lo que es útil en este caso:

@lisp
(use-modules (guix modules))   ;para 'source-module-closure'

(with-imported-modules (source-module-closure
                         '((guix build utils)
                           (gnu build vm)))
  (gexp->derivation "algo-con-maq-virtuales"
                    #~(begin
                        (use-modules (guix build utils)
                                     (gnu build vm))
                        @dots{})))
@end lisp

@cindex extensiones, para expresiones G
@findex with-extensions
De la misma manera, a veces deseará importar no únicamente módulos puros de
Scheme, pero también ``extensiones'' como enlaces Guile a bibliotecas C u
otros paquetes ``completos''. Si, digamos, necesitase el paquete
@code{guile-json} disponible en el lado de construcción, esta sería la forma
de hacerlo:

@lisp
(use-modules (gnu packages guile))  ;para 'guile-json'

(with-extensions (list guile-json)
  (gexp->derivation "algo-con-json"
                    #~(begin
                        (use-modules (json))
                        @dots{})))
@end lisp

La forma sintáctica para construir expresiones-G se resume a continuación.

@deffn {Sintaxis Scheme} #~@var{exp}
@deffnx {Sintaxis Scheme} (gexp @var{exp})
Devuelve una expresión-G que contiene @var{exp}. @var{exp} puede contener
una o más de las siguientes formas:

@table @code
@item #$@var{obj}
@itemx (ungexp @var{obj})
Introduce una referencia a @var{obj}. @var{obj} puede tener uno de los tipos
permitidos, por ejemplo un paquete o derivación, en cuyo caso la forma
@code{ungexp} se substituye por el nombre de fichero de su salida---por
ejemplo, @code{"/gnu/store/@dots{}-coreutils-8.22}.

Si @var{obj} es una lista, se recorre y las referencias a objetos permitidos
se substituyen de manera similar.

Si @var{obj} es otra expresión-G, su contenido se inserta y sus dependencias
se añaden a aquellas de la expresión-G que la contiene.

Si @var{obj} es otro tipo de objeto, se inserta tal cual es.

@item #$@var{obj}:@var{salida}
@itemx (ungexp @var{obj} @var{salida})
Como la forma previa, pero referenciando explícitamente la @var{salida} de
@var{obj}---esto es útil cuando @var{obj} produce múltiples salidas
(@pxref{Paquetes con múltiples salidas}).

@item #+@var{obj}
@itemx #+@var{obj}:salida
@itemx (ungexp-native @var{obj})
@itemx (ungexp-native @var{obj} @var{salida})
Igual que @code{ungexp}, pero produce una referencia a la construcción
@emph{nativa} de @var{obj} cuando se usa en un contexto de compilación
cruzada.

@item #$output[:@var{salida}]
@itemx (ungexp output [@var{salida}])
Inserta una referencia a la salida de la derivación @var{salida}, o a la
salida principal cuando @var{salida} se omite.

Esto únicamente tiene sentido para expresiones-G pasadas a
@code{gexp->derivation}.

@item #$@@@var{lst}
@itemx (ungexp-splicing @var{lst})
Lo mismo que la forma previa, pero expande el contenido de la lista
@var{lst} como parte de la lista que la contiene.

@item #+@@@var{lst}
@itemx (ungexp-native-splicing @var{lst})
Lo mismo que la forma previa, pero hace referencia a las construcciones
nativas de los objetos listados en @var{lst}.

@end table

G-expressions created by @code{gexp} or @code{#~} are run-time objects of
the @code{gexp?} type (see below).
@end deffn

@deffn {Sintaxis Scheme} with-imported-modules @var{módulos} @var{cuerpo}@dots{}
Marca las expresiones-G definidas en el @var{cuerpo}@dots{} como si
requiriesen @var{módulos} en su entorno de ejecución.

Cada elemento en @var{módulos} puede ser el nombre de un módulo, como
@code{(guix build utils)}, o puede ser el nombre de un módulo, seguido de
una flecha, seguido de un objeto tipo-fichero:

@lisp
`((guix build utils)
  (guix gcrypt)
  ((guix config) => ,(scheme-file "config.scm"
                                  #~(define-module @dots{}))))
@end lisp

@noindent
En el ejemplo previo, los dos primeros módulos se toman de la ruta de
búsqueda, y el último se crea desde el objeto tipo-fichero proporcionado.

Esta forma tiene ámbito @emph{léxico}: tiene efecto en las expresiones-G
definidas en @var{cuerpo}@dots{}, pero no en aquellas definidas, digamos, en
procedimientos llamados por @var{cuerpo}@dots{}.
@end deffn

@deffn {Sintaxis Scheme} with-extensions @var{extensiones} @var{cuerpo}@dots{}
Marca que las expresiones definidas en @var{cuerpo}@dots{} requieren
@var{extensiones} en su entorno de construcción y
ejecución. @var{extensiones} es típicamente una lista de objetos de paquetes
como los que se definen en el módulo @code{(gnu packages guile)}.

De manera concreta, los paquetes listados en @var{extensiones} se añaden a
la ruta de carga mientras se compilan los módulos importados en
@var{cuerpo}@dots{}; también se añaden a la ruta de carga en la expresión-G
devuelta por @var{cuerpo}@dots{}.
@end deffn

@deffn {Procedimiento Scheme} gexp? @var{obj}
Devuelve @code{#t} si @var{obj} es una expresión-G.
@end deffn

G-expressions are meant to be written to disk, either as code building some
derivation, or as plain files in the store.  The monadic procedures below
allow you to do that (@pxref{La mónada del almacén}, for more information about
monads).

@deffn {Procedimiento monádico} gexp->derivation @var{nombre} @var{exp} @
       [#:system (%current-system)] [#:target #f] [#:graft? #t] @ [#:hash #f]
[#:hash-algo #f] @ [#:recursive? #f] [#:env-vars '()] [#:modules '()] @
[#:module-path @code{%load-path}] @ [#:effective-version "2.2"] @
[#:references-graphs #f] [#:allowed-references #f] @
[#:disallowed-references #f] @ [#:leaked-env-vars #f] @ [#:script-name
(string-append @var{name} "-builder")] @ [#:deprecation-warnings #f] @
[#:local-build? #f] [#:substitutable? #t] @ [#:properties '()]
[#:guile-for-build #f] Return a derivation @var{name} that runs @var{exp} (a
gexp) with @var{guile-for-build} (a derivation) on @var{system}; @var{exp}
is stored in a file called @var{script-name}.  When @var{target} is true, it
is used as the cross-compilation target triplet for packages referred to by
@var{exp}.

@var{modules} está obsoleto en favor de @code{with-imported-modules}. Su
significado es hacer que los módulos @var{modules} estén disponibles en el
contexto de evaluación de @var{exp}; @var{modules} es una lista de nombres
de módulos Guile buscados en @var{module-path} para ser copiados al almacén,
compilados y disponibles en la ruta de carga durante la ejecución de
@var{exp}---por ejemplo, @code{((guix build utils) (gui build
gnu-build-system))}.

@var{effective-version} determina la cadena usada cuando se añaden las
extensiones de @var{exp} (vea @code{with-extensions}) a la ruta de
búsqueda---por ejemplo, @code{"2.2"}.

@var{graft?} determina si los paquetes a los que @var{exp} hace referencia
deben ser injertados cuando sea posible.

Cuando @var{references-graphs} es verdadero, debe ser una lista de tuplas de
una de las formas siguientes:

@example
(@var{nombre-fichero} @var{paquete})
(@var{nombre-fichero} @var{paquete} @var{salida})
(@var{nombre-fichero} @var{derivación})
(@var{nombre-fichero} @var{derivación} @var{salida})
(@var{nombre-fichero} @var{elemento-almacén})
@end example

El lado derecho de cada elemento de @var{references-graphs} se convierte
automáticamente en una entrada del proceso de construcción de @var{exp}. En
el entorno de construcción, cada @var{nombre-fichero} contiene el grafo de
referencias del elemento correspondiente, en un formato de texto simple.

@var{allowed-references} debe ser o bien @code{#f} o una lista de nombres y
paquetes de salida. En el último caso, la lista denota elementos del almacén
a los que el resultado puede hacer referencia. Cualquier referencia a otro
elemento del almacén produce un error de construcción. De igual manera con
@var{disallowed-references}, que enumera elementos a los que las salidas no
deben hacer referencia.

@var{deprecation-warnings} determina si mostrar avisos de obsolescencia
durante la compilación de los módulos. Puede ser @code{#f}, @code{#t} o
@code{'detailed}.

El resto de parámetros funcionan como en @code{derivation}
(@pxref{Derivaciones}).
@end deffn

@cindex objetos tipo-fichero
Los procedimientos @code{local-file}, @code{plain-file},
@code{computed-file}, @code{program-file} y @code{scheme-file} a
continuación devuelven @dfn{objetos tipo-fichero}. Esto es, cuando se
expanden en una expresión-G, estos objetos dirigen a un fichero en el
almacén. Considere esta expresión-G:

@lisp
#~(system* #$(file-append glibc "/sbin/nscd") "-f"
           #$(local-file "/tmp/mi-nscd.conf"))
@end lisp

El efecto aquí es el ``internamiento'' de @file{/tmp/mi-nscd.conf} mediante
su copia al almacén. Una vez expandida, por ejemplo @i{vía}
@code{gexp->derivation}, la expresión-G hace referencia a la copia bajo
@file{/gnu/store}; por tanto, la modificación o el borrado del fichero en
@file{/tmp} no tiene ningún efecto en lo que la expresión-G
hace. @code{plain-file} puede usarse de manera similar; se diferencia en que
el contenido del fichero se proporciona directamente como una cadena.

@deffn {Procedimiento Scheme} local-file @var{fichero} [@var{nombre}] @
   [#:recursive? #f] [#:select? (const #t)]
Devuelve un objeto que representa el fichero local @var{fichero} a añadir al
almacén; este objeto puede usarse en una expresión-G. Si @var{fichero} es un
nombre de fichero relativo, se busca de forma relativa al fichero fuente
donde esta forma aparece; si @var{fichero} no es una cadena literal, se
buscará de manera relativa al directorio de trabajo durante la
ejecución. @var{fichero} se añadirá al almacén bajo @var{nombre}---de manera
predeterminada el nombre de @var{fichero} sin los directorios.

Cuando @var{recursive?} es verdadero, los contenidos del @var{fichero} se
añaden recursivamente; si @var{fichero} designa un fichero plano y
@var{recursive?} es verdadero, sus contenidos se añaden, y sus bits de
permisos se mantienen.

Cuando @var{recursive?} es verdadero, llama a @code{(@var{select?}
@var{fichero} @var{stat})} por cada entrada del directorio, donde
@var{fichero} es el nombre absoluto de fichero de la entrada y @var{stat} es
el resultado de @code{lstat}; excluyendo las entradas para las cuales
@var{select?} no devuelve verdadero.

Esta es la contraparte declarativa del procedimiento monádico
@code{interned-file} (@pxref{La mónada del almacén, @code{interned-file}}).
@end deffn

@deffn {Procedimiento Scheme} plain-file @var{nombre} @var{contenido}
Devuelve un objeto que representa un fichero de texto llamado @var{nombre}
con el @var{contenido} proporcionado (una cadena o un vector de bytes) para
ser añadido al almacén.

Esta es la contraparte declarativa de @code{text-file}.
@end deffn

@deffn {Procedimiento Scheme} computed-file @var{nombre} @var{gexp} @
          [#:options '(#:local-build? #t)]
Devuelve un objeto que representa el elemento del almacén @var{nombre}, un
fichero o un directorio computado por @var{gexp}. @var{options} es una lista
de parámetros adicionales a pasar a @code{gexp->derivation}.

Esta es la contraparte declarativa de @code{gexp->derivation}.
@end deffn

@deffn {Procedimiento monádico} gexp->script @var{nombre} @var{exp} @
  [#:guile (default-guile)] [#:module-path %load-path] @ [#:system
(%current-system)] [#:target #f]
Devuelve un guión ejecutable @var{nombre} que ejecuta @var{exp} usando
@var{guile}, con los módulos importados por @var{exp} en su ruta de
búsqueda. Busca los módulos de @var{exp} en @var{module-path}.

El ejemplo siguiente construye un guión que simplemente invoca la orden
@command{ls}:

@lisp
(use-modules (guix gexp) (gnu packages base))

(gexp->script "enumera-ficheros"
              #~(execl #$(file-append coreutils "/bin/ls")
                       "ls"))
@end lisp

Cuando se ejecuta a través del almacén (@pxref{La mónada del almacén,
@code{run-with-store}}), obtenemos una derivación que produce un fichero
ejecutable @file{/gnu/store/@dots{}-enumera-ficheros} más o menos así:

@example
#!/gnu/store/@dots{}-guile-2.0.11/bin/guile -ds
!#
(execl "/gnu/store/@dots{}-coreutils-8.22"/bin/ls" "ls")
@end example
@end deffn

@deffn {Procedimiento Scheme} program-file @var{nombre} @var{exp} @
          [#:guile #f] [#:module-path %load-path]
Devuelve un objeto que representa el elemento ejecutable del almacén
@var{nombre} que ejecuta @var{gexp}. @var{guile} es el paquete Guile usado
para ejecutar el guión. Los módulos importados por @var{gexp} se buscan en
@var{module-path}.

Esta es la contraparte declarativa de @code{gexp->script}.
@end deffn

@deffn {Procedimiento monádico} gexp->file @var{nombre} @var{exp} @
            [#:set-load-path? #t] [#:module-path %load-path] @
  [#:splice? #f] @
  [#:guile (default-guile)]
Devuelve una derivación que construye un fichero @var{nombre} que contiene
@var{exp}. Cuando @var{splice?} es verdadero, se considera que @var{exp} es
una lista de expresiones que deben ser expandidas en el fichero resultante.

Cuando @var{set-load-path} es verdadero, emite código en el fichero
resultante para establecer @code{%load-path} y @code{%load-compiled-path} de
manera que respeten los módulos importados por @var{exp}. Busca los módulos
de @var{exp} en @var{module-path}.

El fichero resultante hace referencia a todas las dependencias de @var{exp}
o a un subconjunto de ellas.
@end deffn

@deffn {Scheme Procedure} scheme-file @var{name} @var{exp} @
          [#:splice? #f] [#:set-load-path? #t] Return an object representing the
Scheme file @var{name} that contains @var{exp}.

Esta es la contraparte declarativa de @code{gexp->file}.
@end deffn

@deffn {Procedimiento monádico} text-file* @var{nombre} @var{texto} @dots{}
Devuelve como un valor monádico una derivación que construye un fichero de
texto que contiene todo @var{texto}. @var{texto} puede ser una lista de,
además de cadenas, objetos de cualquier tipo que pueda ser usado en
expresiones-G: paquetes, derivaciones, ficheros locales, objetos, etc. El
fichero del almacén resultante hace referencia a todos ellos.

Esta variante debe preferirse sobre @code{text-file} cuando el fichero a
crear haga referencia a elementos del almacén. Esto es el caso típico cuando
se construye un fichero de configuración que embebe nombres de ficheros del
almacén, como este:

@lisp
(define (perfil.sh)
  ;; Devuelve el nombre de un guión shell en el almacén
  ;; que establece la variable de entorno 'PATH'
  (text-file* "perfil.sh"
              "export PATH=" coreutils "/bin:"
              grep "/bin:" sed "/bin\n"))
@end lisp

En este ejemplo, el fichero @file{/gnu/store/@dots{}-perfil.sh} resultante
hará referencia a @var{coreutils}, @var{grep} y @var{sed}, por tanto
evitando que se recolecten como basura durante su tiempo de vida.
@end deffn

@deffn {Procedimiento Scheme} mixed-text-file @var{nombre} @var{texto} @dots{}
Devuelve un objeto que representa el fichero del almacén @var{nombre} que
contiene @var{texto}. @var{texto} es una secuencia de cadenas y objetos
tipo-fichero, como en:

@lisp
(mixed-text-file "perfil"
                 "export PATH=" coreutils "/bin:" grep "/bin")
@end lisp

Esta es la contraparte declarativa de @code{text-file*}.
@end deffn

@deffn {Procedimiento Scheme} file-union @var{nombre} @var{ficheros}
Devuelve un @code{<computed-file>} que construye un directorio que contiene
todos los @var{ficheros}. Cada elemento en @var{ficheros} debe ser una lista
de dos elementos donde el primer elemento es el nombre de fichero usado en
el nuevo directorio y el segundo elemento es una expresión-G que denota el
fichero de destino. Aquí está un ejemplo:

@lisp
(file-union "etc"
            `(("hosts" ,(plain-file "hosts"
                                    "127.0.0.1 localhost"))
              ("bashrc" ,(plain-file "bashrc"
                                     "alias ls='ls --color=auto'"))))
@end lisp

Esto emite un directorio @code{etc} que contiene estos dos ficheros.
@end deffn

@deffn {Procedimiento Scheme} directory-union @var{nombre} @var{cosas}
Devuelve un directorio que es la unión de @var{cosas}, donde @var{cosas} es
una lista de objetos tipo-fichero que denotan directorios. Por ejemplo:

@lisp
(directory-union "guile+emacs" (list guile emacs))
@end lisp

emite un directorio que es la unión de los paquetes @code{guile} y
@code{emacs}.
@end deffn

@deffn {Procedimientos Scheme} file-append @var{obj} @var{sufijo} @dots{}
Devuelve un objeto tipo-fichero que se expande a la concatenación de
@var{obj} y @var{sufijo}, donde @var{obj} es un objeto que se puede bajar de
nivel y cada @var{sufijo} es una cadena.

Como un ejemplo, considere esta expresión-G:

@lisp
(gexp->script "ejecuta-uname"
              #~(system* #$(file-append coreutils
                                        "/bin/uname")))
@end lisp

El mismo efecto podría conseguirse con:

@lisp
(gexp->script "ejecuta-uname"
              #~(system* (string-append #$coreutils
                                        "/bin/uname")))
@end lisp

Hay una diferencia no obstante: en el caso de @code{file-append}, el guión
resultante contiene una ruta absoluta de fichero como una cadena, mientras
que en el segundo caso, el guión resultante contiene una expresión
@code{(string-append @dots{})} para construir el nombre de fichero @emph{en
tiempo de ejecución}.
@end deffn

@deffn {Scheme Syntax} let-system @var{system} @var{body}@dots{}
@deffnx {Scheme Syntax} let-system (@var{system} @var{target}) @var{body}@dots{}
Bind @var{system} to the currently targeted system---e.g.,
@code{"x86_64-linux"}---within @var{body}.

In the second case, additionally bind @var{target} to the current
cross-compilation target---a GNU triplet such as
@code{"arm-linux-gnueabihf"}---or @code{#f} if we are not cross-compiling.

@code{let-system} is useful in the occasional case where the object spliced
into the gexp depends on the target system, as in this example:

@example
#~(system*
   #+(let-system system
       (cond ((string-prefix? "armhf-" system)
              (file-append qemu "/bin/qemu-system-arm"))
             ((string-prefix? "x86_64-" system)
              (file-append qemu "/bin/qemu-system-x86_64"))
             (else
              (error "dunno!"))))
   "-net" "user" #$image)
@end example
@end deffn

@deffn {Sintaxis Scheme} with-parameters ((@var{parámetro} @var{valor} @dots{}) @var{exp}
Este macro es similar a la forma @code{parameterize} para @dfn{parámetros}
asociados de forma dinámica (@pxref{Parameters,,, guile, GNU Guile Reference
Manual}). La principal diferencia es que se hace efectivo cuando el objeto
tipo-fichero devuelto por @var{exp} se baja de nivel a una derivación o un
elemento del almacén.

Un uso típico de @code{with-parameters} es para forzar el sistema efectivo
de cierto objeto:

@lisp
(with-parameters ((%current-system "i686-linux"))
  coreutils)
@end lisp

El ejemplo previo devuelve un objeto que corresponde a la construcción en
i686 de Coreutils, independientemente del valor actual de
@code{%current-system}.
@end deffn


Por supuesto, además de expresiones-G embebidas en código ``anfitrión'', hay
también módulos que contienen herramientas de construcción. Para clarificar
que están destinados para su uso en el estrato de construcción, estos
módulos se mantienen en el espacio de nombres @code{(guix build @dots{})}.

@cindex bajada de nivel, de objetos de alto nivel en expresiones-G
Internamente, los objetos de alto nivel se @dfn{bajan de nivel}, usando su
compilador, a derivaciones o elementos del almacén. Por ejemplo, bajar de
nivel un paquete emite una derivación, y bajar de nivel un @var{plain-file}
emite un elemento del almacén. Esto se consigue usando el procedimiento
monádico @code{lower-object}.

@deffn {Procedimiento monádico} lower-object @var{obj} [@var{sistema}] @
           [#:target #f] Return as a value in @code{%store-monad} the derivation or
store item corresponding to @var{obj} for @var{system}, cross-compiling for
@var{target} if @var{target} is true.  @var{obj} must be an object that has
an associated gexp compiler, such as a @code{<package>}.
@end deffn

@node Invocación de guix repl
@section Invocación de @command{guix repl}

@cindex REPL, bucle de lectura-evaluación-impresión
La orden @command{guix repl} lanza un @dfn{bucle de
lectura-evaluación-impresión} Guile (REPL) para programación interactiva
(@pxref{Using Guile Interactively,,, guile, GNU Guile Reference
Manual}). Comparado a simplemente lanzar la orden @command{guile},
@command{guix repl} garantiza que todos los módulos Guix y todas sus
dependencias están disponibles en la ruta de búsqueda. Puede usarla de esta
manera:

@example
$ guix repl
scheme@@(guile-user)> ,use (gnu packages base)
scheme@@(guile-user)> coreutils
$1 = #<package coreutils@@8.29 gnu/packages/base.scm:327 3e28300>
@end example

@cindex inferiores
Además, @command{guix repl} implementa un protocolo del REPL simple legible
por máquinas para su uso por @code{(guix inferior)}, una facilidad para
interactuar con @dfn{inferiores}, procesos separados que ejecutan una
revisión de Guix potencialmente distinta.

Las opciones disponibles son las siguientes:

@table @code
@item --type=@var{tipo}
@itemx -t @var{tipo}
Inicia un REPL del @var{TIPO} dado, que puede ser uno de los siguientes:

@table @code
@item guile
Es el predeterminado, y lanza una sesión interactiva Guile estándar con
todas las características.
@item machine
Lanza un REPL que usa el protocolo legible por máquinas. Este es el
protocolo con el que el módulo @code{(guix inferior)} se comunica.
@end table

@item --listen=@var{destino}
Por defecto, @command{guix repl} lee de la entrada estándar y escribe en la
salida estándar. Cuando se pasa esta opción, en vez de eso escuchará las
conexiones en @var{destino}. Estos son ejemplos de opciones válidas:

@table @code
@item --listen=tcp:37146
Acepta conexiones locales por el puerto 37146.

@item --listen=unix:/tmp/socket
Acepta conexiones a través del socket de dominio Unix @file{/tmp/socket}.
@end table

@item --load-path=@var{directorio}
@itemx -L @var{directorio}
Añade @var{directorio} al frente de la ruta de búsqueda de módulos de
paquetes (@pxref{Módulos de paquetes}).

Esto permite a las usuarias definir sus propios paquetes y hacerlos visibles
a las herramientas de línea de órdenes.

@item -q
Inhibe la carga del fichero @file{~/.guile}. De manera predeterminada, dicho
fichero de configuración se carga al lanzar una sesión interactiva de
@code{guile}.
@end table

@c *********************************************************************
@node Utilidades
@chapter Utilidades

Esta sección describe las utilidades de línea de órdenes de Guix. Algunas de
ellas están orientadas principalmente para desarrolladoras y usuarias que
escriban definiciones de paquetes nuevas, mientras que otras son útiles de
manera más general. Complementan la interfaz programática Scheme de Guix de
modo conveniente.

@menu
* Invocación de guix build::  Construir paquetes desde la línea de 
                                 órdenes.
* Invocación de guix edit::  Editar las definiciones de paquetes.
* Invocación de guix download::  Descargar un fichero e imprimir su hash.
* Invocación de guix hash::  Calcular el hash criptográfico de un fichero.
* Invocación de guix import::  Importar definiciones de paquetes.
* Invocación de guix refresh::  Actualizar definiciones de paquetes.
* Invocación de guix lint::  Encontrar errores en definiciones de paquetes.
* Invocación de guix size::  Perfilar el uso del disco.
* Invocación de guix graph::  Visualizar el grafo de paquetes.
* Invocación de guix publish::  Compartir sustituciones.
* Invocación de guix challenge::  Poner a prueba servidores de 
                                     sustituciones.
* Invocación de guix copy::  Copiar a y desde un almacén remoto.
* Invocación de guix container::  Aislamiento de procesos.
* Invocación de guix weather::  Comprobar la disponibilidad de 
                                   sustituciones.
* Invocación de guix processes::  Enumerar los procesos cliente.
@end menu

@node Invocación de guix build
@section Invocación de @command{guix build}

@cindex construcción de paquetes
@cindex @command{guix build}
La orden @command{guix build} construye paquetes o derivaciones y sus
dependencias, e imprime las rutas del almacén resultantes. Fíjese que no
modifica el perfil de la usuaria---este es el trabajo de la orden
@command{guix package} (@pxref{Invocación de guix package}). Por tanto, es útil
principalmente para las desarrolladoras de la distribución.

La sintaxis general es:

@example
guix build @var{opciones} @var{paquete-o-derivación}@dots{}
@end example

Como ejemplo, la siguiente orden construye las últimas versiones de Emacs y
Guile, muestra sus log de construcción, y finalmente muestra los directorios
resultantes:

@example
guix build emacs guile
@end example

De forma similar, la siguiente orden construye todos los paquetes
disponibles:

@example
guix build --quiet --keep-going \
  `guix package -A | cut -f1,2 --output-delimiter=@@`
@end example

@var{paquete-o-derivación} puede ser tanto el nombre de un paquete que se
encuentra en la distribución de software como @code{coreutils} o
@code{coreutils@@8.20}, o una derivación como
@file{/gnu/store/@dots{}-coreutils-8.19.drv}. En el primer caso, el paquete
de nombre (y opcionalmente versión) correspondiente se busca entre los
módulos de la distribución GNU (@pxref{Módulos de paquetes}).

Alternatively, the @option{--expression} option may be used to specify a
Scheme expression that evaluates to a package; this is useful when
disambiguating among several same-named packages or package variants is
needed.

Puede haber cero o más @var{opciones}. Las opciones disponibles se describen
en la subsección siguiente.

@menu
* Opciones comunes de construcción::  Opciones de construcción para la 
                                         mayoría de órdenes.
* Opciones de transformación de paquetes::  Crear variantes de paquetes.
* Opciones de construcción adicionales::  Opciones específicas de 'guix 
                                             build'.
* Depuración de fallos de construcción::  Experiencia de empaquetamiento 
                                              en la vida real.
@end menu

@node Opciones comunes de construcción
@subsection Opciones comunes de construcción

Un número de opciones que controlan el proceso de construcción son comunes a
@command{guix build} y otras órdenes que pueden lanzar construcciones, como
@command{guix package} o @command{guix archive}. Son las siguientes:

@table @code

@item --load-path=@var{directorio}
@itemx -L @var{directorio}
Añade @var{directorio} al frente de la ruta de búsqueda de módulos de
paquetes (@pxref{Módulos de paquetes}).

Esto permite a las usuarias definir sus propios paquetes y hacerlos visibles
a las herramientas de línea de órdenes.

@item --keep-failed
@itemx -K
Mantiene los árboles de construcción de las construcciones fallidas. Por
tanto, si una construcción falla, su árbol de construcción se mantiene bajo
@file{/tmp}, en un directorio cuyo nombre se muestra al final del log de
construcción. Esto es útil cuando se depuran problemas en la
construcción. @xref{Depuración de fallos de construcción}, para trucos y consejos sobre
cómo depurar problemas en la construcción.

This option implies @option{--no-offload}, and it has no effect when
connecting to a remote daemon with a @code{guix://} URI (@pxref{El almacén,
the @env{GUIX_DAEMON_SOCKET} variable}).

@item --keep-going
@itemx -k
Seguir adelante cuando alguna de las derivaciones de un fallo durante la
construcción; devuelve una única vez todas las construcciones que se han
completado o bien han fallado.

El comportamiento predeterminado es parar tan pronto una de las derivaciones
especificadas falle.

@item --dry-run
@itemx -n
No construye las derivaciones.

@anchor{fallback-option}
@item --fallback
Cuando la sustitución de un binario preconstruido falle, intenta la
construcción local de paquetes (@pxref{Fallos en las sustituciones}).

@item --substitute-urls=@var{urls}
@anchor{client-substitute-urls}
Considera @var{urls} la lista separada por espacios de URLs de fuentes de
sustituciones, anulando la lista predeterminada de URLs de
@command{guix-daemon} (@pxref{daemon-substitute-urls,, @command{guix-daemon
URLs}}).

Significa que las sustituciones puede ser descargadas de @var{urls},
mientras que estén firmadas por una clave autorizada por la administradora
del sistema (@pxref{Sustituciones}).

Cuando @var{urls} es la cadena vacía, las sustituciones están efectivamente
desactivadas.

@item --no-substitutes
No usa sustituciones para la construcción de productos. Esto es, siempre
realiza las construcciones localmente en vez de permitir la descarga de
binarios pre-construidos (@pxref{Sustituciones}).

@item --no-grafts
No ``injerta'' paquetes. En la práctica esto significa que las
actualizaciones de paquetes disponibles como injertos no se
aplican. @xref{Actualizaciones de seguridad}, para más información sobre los injertos.

@item --rounds=@var{n}
Construye cada derivación @var{n} veces seguidas, y lanza un error si los
resultados de las construcciones consecutivas no son idénticos bit-a-bit.

Esto es útil para la detección de procesos de construcción
no-deterministas. Los procesos de construcción no-deterministas son un
problema puesto que prácticamente imposibilitan a las usuarias la
@emph{verificación} de la autenticidad de binarios proporcionados por
terceras partes. @xref{Invocación de guix challenge}, para más sobre esto.

Fíjese que, actualmente, los resultados de las construcciones discordantes
no se mantienen, por lo que debe que investigar manualmente en caso de un
error---por ejemplo, mediante la extracción de uno de los resultados con
@code{guix archive --export} (@pxref{Invocación de guix archive}), seguida de una
reconstrucción, y finalmente la comparación de los dos resultados.

@item --no-offload
No usa la delegación de construcciones en otras máquinas (@pxref{Configuración de delegación del daemon}). Es decir, siempre realiza las construcciones de manera
local en vez de delegar construcciones a máquinas remotas.

@item --max-silent-time=@var{segundos}
Cuando la construcción o sustitución permanece en silencio más de
@var{segundos}, la finaliza e informa de un fallo de construcción.

By default, the daemon's setting is honored (@pxref{Invocación de guix-daemon,
@option{--max-silent-time}}).

@item --timeout=@var{segundos}
Del mismo modo, cuando el proceso de construcción o sustitución dura más de
@var{segundos}, lo termina e informa un fallo de construcción.

By default, the daemon's setting is honored (@pxref{Invocación de guix-daemon,
@option{--timeout}}).

@c Note: This option is actually not part of %standard-build-options but
@c most programs honor it.
@cindex nivel de detalle de los mensajes, de las herramientas de línea de órdenes
@cindex registro de construcción, nivel de descripción
@item -v @var{nivel}
@itemx --verbosity=@var{nivel}
Usa el @var{nivel} de detalle especificado, un entero. Seleccionar 0
significa que no se produce ninguna salida, 1 es para salida silenciosa y 2
muestra toda la salida del registro de construcción en la salida estándar de
error.

@item --cores=@var{n}
@itemx -c @var{n}
Permite usar @var{n} núcleos de la CPU para la construcción. El valor
especial @code{0} significa usar tantos como núcleos haya en la CPU.

@item --max-jobs=@var{n}
@itemx -M @var{n}
Allow at most @var{n} build jobs in parallel.  @xref{Invocación de guix-daemon,
@option{--max-jobs}}, for details about this option and the equivalent
@command{guix-daemon} option.

@item --debug=@var{nivel}
Usa el nivel de detalle proporcionado en los mensajes procedentes del daemon
de construcción. @var{nivel} debe ser un entero entre 0 y 5; valores mayores
indican una salida más detallada. Establecer un nivel de 4 o superior puede
ser útil en la depuración de problemas de configuración con el daemon de
construcción.

@end table

Tras las cortinas, @command{guix build} es esencialmente una interfaz al
procedimiento @code{package-derivation} del módulo @code{(guix packages)}, y
al procedimiento @code{build-derivations} del módulo @code{(guix
derivations)}.

In addition to options explicitly passed on the command line, @command{guix
build} and other @command{guix} commands that support building honor the
@env{GUIX_BUILD_OPTIONS} environment variable.

@defvr {Variable de entorno} GUIX_BUILD_OPTIONS
Las usuarias pueden definir esta variable para que contenga una lista de
opciones de línea de órdenes que se usarán automáticamente por @command{guix
build} y otras órdenes @command{guix} que puedan realizar construcciones,
como en el ejemplo siguiente:

@example
$ export GUIX_BUILD_OPTIONS="--no-substitutes -c 2 -L /foo/bar"
@end example

Estas opciones se analizan independientemente, y el resultado se añade a
continuación de las opciones de línea de órdenes.
@end defvr


@node Opciones de transformación de paquetes
@subsection Opciones de transformación de paquetes

@cindex variaciones de paquetes
Otro conjunto de opciones de línea de órdenes permitidas por @command{guix
build} y también @command{guix package} son las @dfn{opciones de
transformación de paquetes}. Son opciones que hacen posible la definición de
@dfn{variaciones de paquetes}---por ejemplo, paquetes construidos con un
código fuente diferente. Es una forma conveniente de crear paquetes
personalizados al vuelo sin tener que escribir las definiciones de las
variaciones del paquete (@pxref{Definición de paquetes}).

@table @code

@item --with-source=@var{fuente}
@itemx --with-source=@var{paquete}=@var{fuente}
@itemx --with-source=@var{paquete}@@@var{versión}=@var{fuente}
Usa @var{fuente} como la fuente de @var{paquete}, y @var{versión} como su
número de versión. @var{fuente} debe ser un nombre de fichero o una URL,
como en @command{guix download} (@pxref{Invocación de guix download}).

Cuando se omite @var{paquete}, se toma el nombre de paquete especificado en
la línea de ordenes que coincide con el nombre base de @var{fuente}---por
ejemplo, si @var{fuente} fuese @code{/src/guile-2.0.10.tar.gz}, el paquete
correspondiente sería @code{guile}.

Del mismo modo, si se omite @var{versión}, la cadena de versión se deduce de
@var{đuente}; en el ejemplo previo sería @code{2.0.10}.

Esta opción permite a las usuarias probar versiones del paquete distintas a
las proporcionadas en la distribución. El ejemplo siguiente descarga
@file{ed-1.7.tar.gz} de un espejo GNU y lo usa como la fuente para el
paquete @code{ed}:

@example
guix build ed --with-source=mirror://gnu/ed/ed-1.7.tar.gz
@end example

As a developer, @option{--with-source} makes it easy to test release
candidates:

@example
guix build guile --with-source=../guile-2.0.9.219-e1bb7.tar.xz
@end example

@dots{} o la construcción desde una revisión en un entorno limpio:

@example
$ git clone git://git.sv.gnu.org/guix.git
$ guix build guix --with-source=guix@@1.0=./guix
@end example

@item --with-input=@var{paquete}=@var{reemplazo}
Substituye dependencias de @var{paquete} por dependencias de
@var{reemplazo}. @var{paquete} debe ser un nombre de paquete, y
@var{reemplazo} debe ser una especificación de paquete como @code{guile} o
@code{guile@@1.8}.

Por ejemplo, la orden siguiente construye Guix, pero substituye su
dependencia de la versión estable actual de Guile con una dependencia en la
versión antigua de Guile, @code{guile@@2.0}:

@example
guix build --with-input=guile=guile@@2.0 guix
@end example

Esta sustitución se realiza de forma recursiva y en profundidad. Por lo que
en este ejemplo, tanto @code{guix} como su dependencia @code{guile-json}
(que también depende de @code{guile}) se reconstruyen contra
@code{guile@@2.0}.

Se implementa usando el procedimiento Scheme @code{package-input-rewriting}
(@pxref{Definición de paquetes, @code{package-input-rewriting}}).

@item --with-graft=@var{paquete}=@var{reemplazo}
This is similar to @option{--with-input} but with an important difference:
instead of rebuilding the whole dependency chain, @var{replacement} is built
and then @dfn{grafted} onto the binaries that were initially referring to
@var{package}.  @xref{Actualizaciones de seguridad}, for more information on grafts.

Por ejemplo, la orden siguiente injerta la versión 3.5.4 de GnuTLS en Wget y
todas sus dependencias, substituyendo las referencias a la versión de GnuTLS
que tienen actualmente:

@example
guix build --with-graft=gnutls=gnutls@@3.5.4 wget
@end example

Esta opción tiene la ventaja de ser mucho más rápida que la reconstrucción
de todo. Pero hay una trampa: funciona si y solo si @var{paquete} y
@var{reemplazo} son estrictamente compatibles---por ejemplo, si proporcionan
una biblioteca, la interfaz binaria de aplicación (ABI) de dichas
bibliotecas debe ser compatible. Si @var{reemplazo} es incompatible de
alguna manera con @var{paquete}, el paquete resultante puede no ser
usable. ¡Úsela con precaución!

@item --with-git-url=@var{paquete}=@var{url}
@cindex Git, usar la última revisión
@cindex última revisión, construcción
Construye @var{paquete} desde la última revisión de la rama @code{master}
del repositorio Git en @var{url}. Los submódulos del repositorio Git se
obtienen de forma recursiva.

Por ejemplo, la siguiente orden construye la biblioteca NumPy de Python
contra la última revisión de la rama master de Python en sí:

@example
guix build python-numpy \
  --with-git-url=python=https://github.com/python/cpython
@end example

This option can also be combined with @option{--with-branch} or
@option{--with-commit} (see below).

@cindex integración continua
Obviamente, ya que se usa la última revisión de la rama proporcionada, el
resultado de dicha orden varia con el tiempo. No obstante es una forma
conveniente de reconstruir una pila completa de software contra las últimas
revisiones de uno o varios paquetes. Esto es particularmente útil en el
contexto de integración continua (CI).

Los directorios de trabajo se conservan en caché en
@file{~/.cache/guix/checkouts} para agilizar accesos consecutivos al mismo
repositorio. Puede desear limpiarla de vez en cuando para ahorrar espacio en
el disco.

@item --with-branch=@var{paquete}=@var{rama}
Build @var{package} from the latest commit of @var{branch}.  If the
@code{source} field of @var{package} is an origin with the @code{git-fetch}
method (@pxref{Referencia de origin}) or a @code{git-checkout} object, the
repository URL is taken from that @code{source}.  Otherwise you have to use
@option{--with-git-url} to specify the URL of the Git repository.

Por ejemplo, la siguiente orden construye @code{guile-sqlite3} desde la
última revisión de su rama @code{master} y, una vez hecho, construye
@code{guix} (que depende de él) y @code{cuirass} (que depende de
@code{guix}) en base a esta construcción específica de @code{guile-sqlite3}:

@example
guix build --with-branch=guile-sqlite3=master cuirass
@end example

@item --with-commit=@var{paquete}=@var{revisión}
This is similar to @option{--with-branch}, except that it builds from
@var{commit} rather than the tip of a branch.  @var{commit} must be a valid
Git commit SHA1 identifier or a tag.
@end table

@node Opciones de construcción adicionales
@subsection Opciones de construcción adicionales

Las opciones de línea de ordenes presentadas a continuación son específicas
de @command{guix build}.

@table @code

@item --quiet
@itemx -q
Build quietly, without displaying the build log; this is equivalent to
@option{--verbosity=0}.  Upon completion, the build log is kept in
@file{/var} (or similar) and can always be retrieved using the
@option{--log-file} option.

@item --file=@var{fichero}
@itemx -f @var{fichero}
Construye el paquete, derivación u otro objeto tipo-fichero al que evalúa el
código en @var{fichero} (@pxref{Expresiones-G, objetos ``tipo-fichero''}).

Como un ejemplo, @var{fichero} puede contener una definición como esta
(@pxref{Definición de paquetes}):

@lisp
@include package-hello.scm
@end lisp

The @var{file} may also contain a JSON representation of one or more package
definitions.  Running @code{guix build -f} on @file{hello.json} with the
following contents would result in building the packages @code{myhello} and
@code{greeter}:

@example
@verbatiminclude package-hello.json
@end example

@item --manifest=@var{manifiesto}
@itemx -m @var{manifiesto}
Construye todos los paquetes listados en el @var{manifiesto} proporcionado
(@pxref{profile-manifest, @option{--manifest}}).

@item --expression=@var{expr}
@itemx -e @var{expr}
Construye el paquete o derivación a la que evalúa @var{expr}.

Por ejemplo, @var{expr} puede ser @code{(@@ (gnu packages guile)
guile-1.8)}, que designa sin ambigüedad a esta variante específica de la
versión 1.8 de Guile.

De manera alternativa, @var{expr} puede ser una expresión-G, en cuyo caso se
usa como un programa de construcción pasado a @code{gexp->derivation}
(@pxref{Expresiones-G}).

Por último, @var{expr} puede hacer referencia a un procedimiento mónadico
sin parámetros (@pxref{La mónada del almacén}). El procedimiento debe devolver una
derivación como un valor monádico, el cual después se pasa a través de
@code{run-with-store}.

@item --source
@itemx -S
Construye las derivaciones de las fuentes de los paquetes, en vez de los
paquetes mismos.

Por ejemplo, @code{guix build -S gcc} devuelve algo como
@file{/gnu/store/@dots{}-gcc-4.7.2.tar.bz2}, el cual es el archivador tar de
fuentes de GCC.

El archivador tar devuelto es el resultado de aplicar cualquier parche y
fragmento de código en el origen (campo @code{origin}) del paquete
(@pxref{Definición de paquetes}).

Tenga en cuenta que @command{guix build -S} compila las fuentes únicamente
de los paquetes especificados. Esto no incluye las dependencias enlazadas
estáticamente y por sí mismas son insuficientes para reproducir los
paquetes.

@item --sources
Fetch and return the source of @var{package-or-derivation} and all their
dependencies, recursively.  This is a handy way to obtain a local copy of
all the source code needed to build @var{packages}, allowing you to
eventually build them even without network access.  It is an extension of
the @option{--source} option and can accept one of the following optional
argument values:

@table @code
@item package
This value causes the @option{--sources} option to behave in the same way as
the @option{--source} option.

@item all
Construye las derivaciones de las fuentes de todos los paquetes, incluyendo
cualquier fuente que pueda enumerarse como entrada (campo
@code{inputs}). Este es el valor predeterminado.

@example
$ guix build --sources tzdata
The following derivations will be built:
   /gnu/store/@dots{}-tzdata2015b.tar.gz.drv
   /gnu/store/@dots{}-tzcode2015b.tar.gz.drv
@end example

@item transitive
Construye las derivaciones de fuentes de todos los paquetes, así como todas
las entradas transitivas de los paquetes. Esto puede usarse, por ejemplo,
para obtener las fuentes de paquetes para una construcción posterior sin
conexión a la red.

@example
$ guix build --sources=transitive tzdata
The following derivations will be built:
   /gnu/store/@dots{}-tzcode2015b.tar.gz.drv
   /gnu/store/@dots{}-findutils-4.4.2.tar.xz.drv
   /gnu/store/@dots{}-grep-2.21.tar.xz.drv
   /gnu/store/@dots{}-coreutils-8.23.tar.xz.drv
   /gnu/store/@dots{}-make-4.1.tar.xz.drv
   /gnu/store/@dots{}-bash-4.3.tar.xz.drv
@dots{}
@end example

@end table

@item --system=@var{sistema}
@itemx -s @var{sistema}
Intenta la construcción para @var{sistema}---por ejemplo,
@code{i686-linux}---en vez del tipo de sistema de la máquina de
construcción. La orden @command{guix build} le permite repetir esta opción
varias veces, en cuyo caso construye para todos los sistemas especificados;
otras ordenes ignoran opciones @option{-s} extrañas.

@quotation Nota
The @option{--system} flag is for @emph{native} compilation and must not be
confused with cross-compilation.  See @option{--target} below for
information on cross-compilation.
@end quotation

An example use of this is on Linux-based systems, which can emulate
different personalities.  For instance, passing @option{--system=i686-linux}
on an @code{x86_64-linux} system or @option{--system=armhf-linux} on an
@code{aarch64-linux} system allows you to build packages in a complete
32-bit environment.

@quotation Nota
La construcción para un sistema @code{armhf-linux} está disponible de manera
incondicional en máquinas @code{aarch64-linux}, aunque determinados
procesadores aarch64 no lo permitan, notablemente el ThunderX.
@end quotation

De manera similar, cuando la emulación transparente con QEMU y
@code{binfmt_misc} está activada (@pxref{Servicios de virtualización,
@code{qemu-binfmt-service-type}}), puede construir para cualquier sistema
para el que un manejador QEMU de @code{binfmt_misc} esté instalado.

Las construcciones para un sistema distinto al de la máquina que usa se
pueden delegar también a una máquina remota de la arquitectura
correcta. @xref{Configuración de delegación del daemon}, para más información sobre
delegación.

@item --target=@var{tripleta}
@cindex compilación cruzada
Cross-build for @var{triplet}, which must be a valid GNU triplet, such as
@code{"aarch64-linux-gnu"} (@pxref{Specifying Target Triplets, GNU
configuration triplets,, autoconf, Autoconf}).

@anchor{build-check}
@item --check
@cindex determinismo, comprobación
@cindex reproducibilidad, comprobación
Reconstruye @var{paquete-o-derivación}, que ya está disponible en el
almacén, y emite un error si los resultados de la construcción no son
idénticos bit-a-bit.

Este mecanismo le permite comprobar si sustituciones previamente instaladas
son genuinas (@pxref{Sustituciones}), o si el resultado de la construcción de
un paquete es determinista. @xref{Invocación de guix challenge}, para más
información de referencia y herramientas.

Cuando se usa conjuntamente con @option{--keep-failed}, la salida que
difiere se mantiene en el almacén, bajo
@file{/gnu/store/@dots{}-check}. Esto hace fácil buscar diferencias entre
los dos resultados.

@item --repair
@cindex reparar elementos del almacén
@cindex corrupción, recuperarse de
Intenta reparar los elementos del almacén especificados, si están corruptos,
volviendo a descargarlos o mediante su reconstrucción.

Esta operación no es atómica y por lo tanto está restringida a @code{root}.

@item --derivations
@itemx -d
Devuelve las rutas de derivación, no las rutas de salida, de los paquetes
proporcionados.

@item --root=@var{fichero}
@itemx -r @var{fichero}
@cindex GC, añadir raíces
@cindex raíces del recolector de basura, añadir
Hace que @var{fichero} sea un enlace simbólico al resultado, y lo registra
como una raíz del recolector de basura.

Consecuentemente, los resultados de esta invocación de @command{guix build}
se protegen de la recolección de basura hasta que @var{fichero} se
elimine. Cuando se omite esa opción, los resultados son candidatos a la
recolección de basura en cuanto la construcción se haya
completado. @xref{Invocación de guix gc}, para más sobre las raíces del
recolector de basura.

@item --log-file
@cindex logs de construcción, acceso
Devuelve los nombres de ficheros o URL de los log de construcción para el
@var{paquete-o-derivación} proporcionado, o emite un error si no se
encuentran los log de construcción.

Esto funciona independientemente de cómo se especificasen los paquetes o
derivaciones. Por ejemplo, las siguientes invocaciones son equivalentes:

@example
guix build --log-file `guix build -d guile`
guix build --log-file `guix build guile`
guix build --log-file guile
guix build --log-file -e '(@@ (gnu packages guile) guile-2.0)'
@end example

If a log is unavailable locally, and unless @option{--no-substitutes} is
passed, the command looks for a corresponding log on one of the substitute
servers (as specified with @option{--substitute-urls}).

Por lo que dado el caso, imaginese que desea ver el log de construcción de
GDB en MIPS, pero realmente está en una máquina @code{x86_64}:

@example
$ guix build --log-file gdb -s aarch64-linux
https://@value{SUBSTITUTE-SERVER}/log/@dots{}-gdb-7.10
@end example

¡Puede acceder libremente a una biblioteca inmensa de log de construcción!
@end table

@node Depuración de fallos de construcción
@subsection Depuración de fallos de construcción

@cindex fallos de construcción, depuración
Cuando esté definiendo un paquete nuevo (@pxref{Definición de paquetes}),
probablemente se encuentre que dedicando algún tiempo a depurar y afinar la
construcción hasta obtener un resultado satisfactorio. Para hacerlo, tiene
que lanzar manualmente las órdenes de construcción en un entorno tan similar
como sea posible al que el daemon de construcción usa.

To that end, the first thing to do is to use the @option{--keep-failed} or
@option{-K} option of @command{guix build}, which will keep the failed build
tree in @file{/tmp} or whatever directory you specified as @env{TMPDIR}
(@pxref{Invocación de guix build, @option{--keep-failed}}).

De ahí en adelante, puede usar @command{cd} para ir al árbol de la
construcción fallida y cargar el fichero @file{environment-variables}, que
contiene todas las definiciones de variables de entorno que existían cuando
la construcción falló. Digamos que está depurando un fallo en la
construcción del paquete @code{foo}; una sesión típica sería así:

@example
$ guix build foo -K
@dots{} @i{build fails}
$ cd /tmp/guix-build-foo.drv-0
$ source ./environment-variables
$ cd foo-1.2
@end example

Ahora puede invocar órdenes (casi) como si fuese el daemon y encontrar los
errores en su proceso de construcción.

A veces ocurre que, por ejemplo, las pruebas de un paquete pasan cuando las
ejecuta manualmente pero fallan cuando el daemon las ejecuta. Esto puede
suceder debido a que el daemon construye dentro de contenedores donde, al
contrario que en nuestro entorno previo, el acceso a la red no está
disponible, @file{/bin/sh} no existe, etc. (@pxref{Configuración del entorno de construcción}).

En esos casos, puede tener que inspeccionar el proceso de construcción desde
un contenedor similar al creado por el daemon de construcción:

@example
$ guix build -K foo
@dots{}
$ cd /tmp/guix-build-foo.drv-0
$ guix environment --no-grafts -C foo --ad-hoc strace gdb
[env]# source ./environment-variables
[env]# cd foo-1.2
@end example

Here, @command{guix environment -C} creates a container and spawns a new
shell in it (@pxref{Invocación de guix environment}).  The @command{--ad-hoc
strace gdb} part adds the @command{strace} and @command{gdb} commands to the
container, which you may find handy while debugging.  The
@option{--no-grafts} option makes sure we get the exact same environment,
with ungrafted packages (@pxref{Actualizaciones de seguridad}, for more info on grafts).

Para acercarnos más al contenedor usado por el daemon de construcción,
podemos eliminar @file{/bin/sh}:

@example
[env]# rm /bin/sh
@end example

(No se preocupe, es inocuo: todo esto ocurre en el contenedor de usar y
tirar creado por @command{guix environment}).

La orden @command{strace} probablemente no esté en la ruta de búsqueda, pero
podemos ejecutar:

@example
[env]# $GUIX_ENVIRONMENT/bin/strace -f -o log make check
@end example

De este modo, no solo habrá reproducido las variables de entorno que usa el
daemon, también estará ejecutando el proceso de construcción en un
contenedor similar al usado por el daemon.


@node Invocación de guix edit
@section Invocación de @command{guix edit}

@cindex @command{guix edit}
@cindex definición de paquete, edición
¡Tantos paquetes, tantos ficheros de fuentes! La orden @command{guix edit}
facilita la vida de las usuarias y empaquetadoras apuntando su editor al
fichero de fuentes que contiene la definición de los paquetes
especificados. Por ejemplo:

@example
guix edit gcc@@4.9 vim
@end example

@noindent
launches the program specified in the @env{VISUAL} or in the @env{EDITOR}
environment variable to view the recipe of GCC@tie{}4.9.3 and that of Vim.

If you are using a Guix Git checkout (@pxref{Construcción desde Git}), or have
created your own packages on @env{GUIX_PACKAGE_PATH} (@pxref{Módulos de paquetes}), you will be able to edit the package recipes.  In other cases,
you will be able to examine the read-only recipes for packages currently in
the store.

Instead of @env{GUIX_PACKAGE_PATH}, the command-line option
@option{--load-path=@var{directory}} (or in short @option{-L
@var{directory}}) allows you to add @var{directory} to the front of the
package module search path and so make your own packages visible.

@node Invocación de guix download
@section Invocación de @command{guix download}

@cindex @command{guix download}
@cindex descargando las fuentes de paquetes
Durante la escritura de una definición de paquete, las desarrolladoras
típicamente tienen que descargar un archivador tar de fuentes, calcular su
hash SHA256 y escribir ese hash en la definición del paquete
(@pxref{Definición de paquetes}). La herramienta @command{guix download} ayuda
con esta tarea: descarga un fichero de la URI proporcionada, lo añade al
almacén e imprime tanto su nombre de fichero en el almacén como su hash
SHA256.

El hecho de que el fichero descargado se añada al almacén ahorra ancho de
banda: cuando el desarrollador intenta construir el paquete recién definido
con @command{guix build}, el archivador de fuentes no tiene que descargarse
de nuevo porque ya está en el almacén. También es una forma conveniente de
conservar ficheros temporalmente, que pueden ser borrados en un momento dado
(@pxref{Invocación de guix gc}).

La orden @command{guix download} acepta las mismas URI que las usadas en las
definiciones de paquetes. En particular, permite URI @code{mirror://}. Las
URI @code{https} (HTTP sobre TLS) se aceptan @emph{cuando} el enlace Guile
con GnuTLS está disponible en el entorno de la usuaria; cuando no está
disponible se emite un error. @xref{Guile Preparations, how to install the
GnuTLS bindings for Guile,, gnutls-guile, GnuTLS-Guile}, para más
información.

@command{guix download} verifies HTTPS server certificates by loading the
certificates of X.509 authorities from the directory pointed to by the
@env{SSL_CERT_DIR} environment variable (@pxref{Certificados X.509}), unless
@option{--no-check-certificate} is used.

Las siguientes opciones están disponibles:

@table @code
@item --hash=@var{algorithm}
@itemx -H @var{algorithm}
Compute a hash using the specified @var{algorithm}.  @xref{Invocación de guix hash}, for more information.

@item --format=@var{fmt}
@itemx -f @var{fmt}
Escribe el hash en el formato especificado por @var{fmt}. Para más
información sobre los valores aceptados en @var{fmt}, @pxref{Invocación de guix hash}.

@item --no-check-certificate
No valida los certificados X.509 de los servidores HTTPS.

Cuando se usa esta opción, no tiene @emph{absolutamente ninguna garantía} de
que está comunicando con el servidor responsable de la URL auténtico, lo que
le hace vulnerables a ataques de interceptación (``man-in-the-middle'').

@item --output=@var{fichero}
@itemx -o @var{fichero}
Almacena el fichero descargado en @var{fichero} en vez de añadirlo al
almacén.
@end table

@node Invocación de guix hash
@section Invocación de @command{guix hash}

@cindex @command{guix hash}
La orden @command{guix hash} calcula el hash SHA256 de un fichero. Es
principalmente una conveniente herramienta para cualquiera que contribuya a
la distribución: calcula el hash criptográfico de un fichero, que puede
usarse en la definición de un paquete (@pxref{Definición de paquetes}).

La sintaxis general es:

@example
guix hash @var{opciones} @var{fichero}
@end example

Cuando @var{fichero} es @code{-} (un guión), @command{guix hash} calcula el
hash de los datos leídos por la entrada estándar. @command{guix hash} tiene
las siguientes opciones:

@table @code

@item --hash=@var{algorithm}
@itemx -H @var{algorithm}
Compute a hash using the specified @var{algorithm}, @code{sha256} by
default.

@var{algorithm} must the name of a cryptographic hash algorithm supported by
Libgcrypt @i{via} Guile-Gcrypt---e.g., @code{sha512} or @code{sha3-256}
(@pxref{Hash Functions,,, guile-gcrypt, Guile-Gcrypt Reference Manual}).

@item --format=@var{fmt}
@itemx -f @var{fmt}
Escribe el hash en el formato especificado por @var{fmt}.

Supported formats: @code{base64}, @code{nix-base32}, @code{base32},
@code{base16} (@code{hex} and @code{hexadecimal} can be used as well).

Si no se especifica la opción @option{--format}, @command{guix hash}
mostrará el hash en @code{nix-base32}. Esta representación es la usada en
las definiciones de paquetes.

@item --recursive
@itemx -r
Calcula el hash de @var{fichero} recursivamente.

@c FIXME: Replace xref above with xref to an ``Archive'' section when
@c it exists.
Es este caso el hash se calcula en un archivador que contiene @var{fichero},
incluyendo su contenido si es un directorio. Algunos de los metadatos de
@var{fichero} son parte del archivador; por ejemplo, cuando @var{fichero} es
un fichero normal, el hash es diferente dependiendo de si @var{fichero} es
ejecutable o no. Los metadatos como las marcas de tiempo no influyen en el
hash (@pxref{Invocación de guix archive}).

@item --exclude-vcs
@itemx -x
When combined with @option{--recursive}, exclude version control system
directories (@file{.bzr}, @file{.git}, @file{.hg}, etc.).

@vindex git-fetch
Como un ejemplo, así es como calcularía el hash de una copia de trabajo Git,
lo cual es útil cuando se usa el método @code{git-fetch} (@pxref{Referencia de origin}):

@example
$ git clone http://example.org/foo.git
$ cd foo
$ guix hash -rx .
@end example
@end table

@node Invocación de guix import
@section Invocación de @command{guix import}

@cindex importar paquetes
@cindex importación de un paquete
@cindex conversión de un paquete
@cindex Invocación de @command{guix import}
La orden @command{guix import} es útil para quienes desean añadir un paquete
a la distribución con el menor trabajo posible---una demanda legítima. La
orden conoce algunos repositorios de los que puede ``importar'' metadatos de
paquetes. El resultado es una definición de paquete, o una plantilla de
ella, en el formato que conocemos (@pxref{Definición de paquetes}).

La sintaxis general es:

@example
guix import @var{importador} @var{opciones}@dots{}
@end example

@var{importador} especifica la fuente de la que se importan los metadatos
del paquete, @var{opciones} especifica un identificador de paquete y otras
opciones específicas del @var{importador}.

Algunos de los importadores dependen de poder ejecutar la orden
@command{gpgv}. Para ello, GnuPG debe estar instalado y en @code{$PATH};
ejecute @code{guix install gnupg} si es necesario.

Actualmente los ``importadores'' disponibles son:

@table @code
@item gnu
Importa los metadatos del paquete GNU seleccionado. Proporciona una
plantilla para la última versión de dicho paquete GNU, incluyendo el hash de
su archivador tar de fuentes, y su sinopsis y descripción canónica.

Información adicional como las dependencias del paquete y su licencia deben
ser deducidas manualmente.

Por ejemplo, la siguiente orden devuelve una definición de paquete para
GNU@tie{}Hello.

@example
guix import gnu hello
@end example

Las opciones específicas de línea de ordenes son:

@table @code
@item --key-download=@var{política}
As for @command{guix refresh}, specify the policy to handle missing OpenPGP
keys when verifying the package signature.  @xref{Invocación de guix refresh,
@option{--key-download}}.
@end table

@item pypi
@cindex pypi
Importa metadatos desde el @uref{https://pypi.python.org/, índice de
paquetes Python (PyPI)}. La información se toma de la descripción con
formato JSON disponible en @code{pypi.python.org} y habitualmente incluye
toda la información relevante, incluyendo las dependencias del paquete. Para
una máxima eficiencia, se recomienda la instalación de la utilidad
@command{unzip}, de manera que el importador pueda extraer los archivos
wheel de Python y obtener datos de ellos.

La siguiente orden importa los metadatos para el paquete de Python
@code{itsdangerous}:

@example
guix import pypi itsdangerous
@end example

@table @code
@item --recursive
@itemx -r
Recorre el grafo de dependencias del paquete original proporcionado
recursivamente y genera expresiones de paquete para todos aquellos paquetes
que no estén todavía en Guix.
@end table

@item gem
@cindex gem
Importa metadatos desde @uref{https://rubygems.org/, RubyGems}. La
información se extrae de la descripción en formato JSON disponible en
@code{rubygems.org} e incluye la información más relevante, incluyendo las
dependencias en tiempo de ejecución. Hay algunos puntos a tener en cuenta,
no obstante. Los metadatos no distinguen entre sinopsis y descripción, por
lo que se usa la misma cadena para ambos campos. Adicionalmente, los
detalles de las dependencias no-Ruby necesarias para construir extensiones
nativas no está disponible y se deja como ejercicio a la empaquetadora.

La siguiente orden importa los meta-datos para el paquete de Ruby
@code{rails}:

@example
guix import gem rails
@end example

@table @code
@item --recursive
@itemx -r
Recorre el grafo de dependencias del paquete original proporcionado
recursivamente y genera expresiones de paquete para todos aquellos paquetes
que no estén todavía en Guix.
@end table

@item cpan
@cindex CPAN
Importa metadatos desde @uref{https://www.metacpan.org/, MetaCPAN}. La
información se extrae de la descripción en formato JSON disponible a través
del @uref{https://fastapi.metacpan.org/, API de MetaCPAN} e incluye la
información más relevante, como las dependencias de otros módulos. La
información de la licencia debe ser comprobada atentamente. Si Perl está
disponible en el almacén, se usará la utilidad @code{corelist} para borrar
los módulos básicos de la lista de dependencias.

The command command below imports metadata for the Acme::Boolean Perl
module:

@example
guix import cpan Acme::Boolean
@end example

@item cran
@cindex CRAN
@cindex Bioconductor
Importa metadatos desde @uref{https://cran.r-project.org/, CRAN}, el
repositorio central para el @uref{https://r-project.org, entorno estadístico
y gráfico GNU@tie{}R}.

Information is extracted from the @file{DESCRIPTION} file of the package.

The command command below imports metadata for the Cairo R package:

@example
guix import cran Cairo
@end example

When @option{--recursive} is added, the importer will traverse the
dependency graph of the given upstream package recursively and generate
package expressions for all those packages that are not yet in Guix.

When @option{--archive=bioconductor} is added, metadata is imported from
@uref{https://www.bioconductor.org/, Bioconductor}, a repository of R
packages for for the analysis and comprehension of high-throughput genomic
data in bioinformatics.

Information is extracted from the @file{DESCRIPTION} file contained in the
package archive.

The command below imports metadata for the GenomicRanges R package:

@example
guix import cran --archive=bioconductor GenomicRanges
@end example

Finally, you can also import R packages that have not yet been published on
CRAN or Bioconductor as long as they are in a git repository.  Use
@option{--archive=git} followed by the URL of the git repository:

@example
guix import cran --archive=git https://github.com/immunogenomics/harmony
@end example

@item texlive
@cindex Tex Live
@cindex CTAN
Importa metadatos desde @uref{https://www.ctan.org/, CTAN}, la completa red
de archivos TeX para paquetes TeX que son parte de la
@uref{https://www.tug.org/texlive/, distribución TeX Live}.

La información del paquete se obtiene a través del API XML proporcionado por
CTAN, mientras que el código fuente se descarga del repositorio SVN del
proyecto TeX Live. Se hace porque CTAN no guarda archivos con versiones.

La siguiente orden importa los metadatos del paquete de TeX @code{fontspec}:

@example
guix import texlive fontspec
@end example

When @option{--archive=@var{directory}} is added, the source code is
downloaded not from the @file{latex} sub-directory of the
@file{texmf-dist/source} tree in the TeX Live SVN repository, but from the
specified sibling @var{directory} under the same root.

La siguiente orden importa los metadatos del paquete @code{ifxetex} de CTAN
mientras que obtiene las fuentes del directorio @file{texmf/source/generic}:

@example
guix import texlive --archive=generic ifxetex
@end example

@item json
@cindex JSON, importación
Importa metadatos de paquetes desde un fichero JSON local. Considere el
siguiente ejemplo de definición de paquete en formato JSON:

@example
@{
  "name": "hello",
  "version": "2.10",
  "source": "mirror://gnu/hello/hello-2.10.tar.gz",
  "build-system": "gnu",
  "home-page": "https://www.gnu.org/software/hello/",
  "synopsis": "Hello, GNU world: An example GNU package",
  "description": "GNU Hello prints a greeting.",
  "license": "GPL-3.0+",
  "native-inputs": ["gettext"]
@}
@end example

Los nombres de los campos son los mismos que para el registro
@code{<package>} (@xref{Definición de paquetes}). Las referencias a otros
paquetes se proporcionan como listas JSON de cadenas de especificación de
paquete entrecomilladas como @code{guile} o @code{guile@@2.0}.

El importador también permite una definición de fuentes más explícita usando
los campos comunes de los registros @code{<origin>}:

@example
@{
  @dots{}
  "source": @{
    "method": "url-fetch",
    "uri": "mirror://gnu/hello/hello-2.10.tar.gz",
    "sha256": @{
      "base32": "0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i"
    @}
  @}
  @dots{}
@}
@end example

La siguiente orden importa los metadatos desde el fichero JSON
@code{hello.json} y devuelve una expresión de ``package'':

@example
guix import json hello.json
@end example

@item nix
Importa metadatos desde una copia local de las fuentes de la
@uref{https://nixos.org/nixpkgs/, distribución Nixpkgs}@footnote{Esto
depende de la orden @command{nix-instantiate} de
@uref{https://nixos.org/nix/, Nix}.}. Las definiciones de paquete en Nixpkgs
típicamente están escritas en una mezcla de lenguaje Nix y código Bash. Esta
orden únicamente importa la estructura de alto nivel del paquete escrita en
lenguaje Nix. Normalmente incluye todos los campos básicos de una definición
de paquete.

Cuando se importa un paquete GNU, la sinopsis y la descripción se
substituyen por la variante canónica oficial.

Habitualmente, tendrá que ejecutar primero:

@example
export NIX_REMOTE=daemon
@end example

@noindent
de modo que @command{nix-instantiate} no intente abrir la base de datos Nix.

Como un ejemplo, la orden siguiente importa la definición de paquete de
LibreOffice (más precisamente, importa la definición del paquete asociado al
atributo de nivel superior @code{libreoffice}):

@example
guix import nix ~/path/to/nixpkgs libreoffice
@end example

@item hackage
@cindex hackage
Importa metadatos desde el archivo central de paquetes de la comunidad
Haskell @uref{https://hackage.haskell.org/, Hackage}. La información se
obtiene de ficheros Cabal e incluye toda la información relevante,
incluyendo las dependencias del paquete.

Las opciones específicas de línea de ordenes son:

@table @code
@item --stdin
@itemx -s
Lee un fichero Cabal por la entrada estándar.
@item --no-test-dependencies
@itemx -t
No incluye las dependencias necesarias únicamente para las baterías de
pruebas.
@item --cabal-environment=@var{alist}
@itemx -e @var{alist}
@var{alist} es una lista asociativa Scheme que define el entorno en el que
los condicionales Cabal se evalúan. Los valores aceptados son: @code{os},
@code{arch}, @code{impl} y una cadena que representa el nombre de la
condición. El valor asociado a la condición tiene que ser o bien el símbolo
@code{true} o bien @code{false}. Los valores predeterminados asociados a las
claves @code{os}, @code{arch} y @code{impl} son @samp{linux}, @samp{x86_64}
y @samp{ghc}, respectivamente.
@item --recursive
@itemx -r
Recorre el grafo de dependencias del paquete original proporcionado
recursivamente y genera expresiones de paquete para todos aquellos paquetes
que no estén todavía en Guix.
@end table

The command below imports metadata for the latest version of the HTTP
Haskell package without including test dependencies and specifying the value
of the flag @samp{network-uri} as @code{false}:

@example
guix import hackage -t -e "'((\"network-uri\" . false))" HTTP
@end example

Se puede especificar opcionalmente una versión específica del paquete
añadiendo al nombre del paquete una arroba y el número de versión como en el
siguiente ejemplo:

@example
guix import hackage mtl@@2.1.3.1
@end example

@item stackage
@cindex stackage
El importador @code{stackage} es un recubrimiento sobre el de
@code{hackage}. Toma un nombre de paquete, busca la versión de paquete
incluida en una publicación de la versión de mantenimiento extendido (LTS)
@uref{https://www.stackage.org, Stackage} y usa el importador @code{hackage}
para obtener sus metadatos. Fíjese que es su decisión seleccionar una
publicación LTS compatible con el compilador GHC usado en Guix.

Las opciones específicas de línea de ordenes son:

@table @code
@item --no-test-dependencies
@itemx -t
No incluye las dependencias necesarias únicamente para las baterías de
pruebas.
@item --lts-version=@var{versión}
@itemx -l @var{versión}
@var{versión} es la versión LTS de publicación deseada. Si se omite se usa
la última publicación.
@item --recursive
@itemx -r
Recorre el grafo de dependencias del paquete original proporcionado
recursivamente y genera expresiones de paquete para todos aquellos paquetes
que no estén todavía en Guix.
@end table

The command below imports metadata for the HTTP Haskell package included in
the LTS Stackage release version 7.18:

@example
guix import stackage --lts-version=7.18 HTTP
@end example

@item elpa
@cindex elpa
Importa metadatos desde el repositorio de archivos de paquetes Emacs Lisp
(ELPA) (@pxref{Packages,,, emacs, The GNU Emacs Manual}).

Las opciones específicas de línea de ordenes son:

@table @code
@item --archive=@var{repo}
@itemx -a @var{repo}
@var{repo} identifica el repositorio de archivos del que obtener la
información. Actualmente los repositorios disponibles y sus identificadores
son:
@itemize -
@item
@uref{https://elpa.gnu.org/packages, GNU}, seleccionado con el identificador
@code{gnu}. Utilizado de manera predeterminada.

Los paquetes de @code{elpa.gnu.org} están firmados con una de las claves que
contiene el anillo de claves GnuPG en
@file{share/emacs/25.1/etc/package-keyring.gpg} (o similar) en el paquete
@code{emacs} (@pxref{Package Installation, ELPA package signatures,, emacs,
The GNU Emacs Manual}).

@item
@uref{https://stable.melpa.org/packages, MELPA-Stable}, seleccionado con el
identificador @code{melpa-stable}.

@item
@uref{https://melpa.org/packages, MELPA}, seleccionado con el identificador
@code{melpa}.
@end itemize

@item --recursive
@itemx -r
Recorre el grafo de dependencias del paquete original proporcionado
recursivamente y genera expresiones de paquete para todos aquellos paquetes
que no estén todavía en Guix.
@end table

@item crate
@cindex crate
Importa metadatos desde el repositorio de paquetes Rust
@uref{https://crates.io, crates.io}, como en este ejemplo:

@example
guix import crate blake2-rfc
@end example

El importador de crate también le permite especificar una cadena de versión:

@example
guix import crate constant-time-eq@@0.1.0
@end example

La opciones adicionales incluyen:

@table @code
@item --recursive
@itemx -r
Recorre el grafo de dependencias del paquete original proporcionado
recursivamente y genera expresiones de paquete para todos aquellos paquetes
que no estén todavía en Guix.
@end table

@item opam
@cindex OPAM
@cindex OCaml
Importa metadatos desde el repositorio de paquetes
@uref{https://opam.ocaml.org/, OPAM} usado por la comunidad OCaml.
@end table

La estructura del código de @command{guix import} es modular. Sería útil
tener más importadores para otros formatos de paquetes, y su ayuda es
bienvenida aquí (@pxref{Contribuir}).

@node Invocación de guix refresh
@section Invocación de @command{guix refresh}

@cindex @command{guix refresh}
La principal audiencia de @command{guix refresh} son desarrolladoras de la
distribución de software GNU. Por defecto, informa de cualquier paquete
proporcionado por la distribución que esté anticuado comparado con la última
versión oficial, de esta manera:

@example
$ guix refresh
gnu/packages/gettext.scm:29:13: gettext would be upgraded from 0.18.1.1 to 0.18.2.1
gnu/packages/glib.scm:77:12: glib would be upgraded from 2.34.3 to 2.37.0
@end example

Alternatively, one can specify packages to consider, in which case a warning
is emitted for packages that lack an updater:

@example
$ guix refresh coreutils guile guile-ssh
gnu/packages/ssh.scm:205:2: warning: no updater for guile-ssh
gnu/packages/guile.scm:136:12: guile would be upgraded from 2.0.12 to 2.0.13
@end example

@command{guix refresh} navega por los repositorios oficiales de cada paquete
y determina el número de versión mayor entre las publicaciones
encontradas. La orden sabe cómo actualizar tipos específicos de paquetes:
paquetes GNU, paquetes ELPA, etc.---vea la documentación de @option{--type}
más adelante. Hay muchos paquetes, no obstante, para los que carece de un
método para determinar si está disponible una versión oficial posterior. No
obstante, el mecanismo es extensible, ¡no tenga problema en contactar con
nosotras para añadir un método nuevo!

@table @code

@item --recursive
Considera los paquetes especificados, y todos los paquetes de los que
dependen.

@example
$ guix refresh --recursive coreutils
gnu/packages/acl.scm:35:2: warning: no updater for acl
gnu/packages/m4.scm:30:12: info: 1.4.18 is already the latest version of m4
gnu/packages/xml.scm:68:2: warning: no updater for expat
gnu/packages/multiprecision.scm:40:12: info: 6.1.2 is already the latest version of gmp
@dots{}
@end example

@end table

A veces el nombre oficial es diferente al nombre de paquete usado en Guix, y
@command{guix refresh} necesita un poco de ayuda. La mayor parte de los
actualizadores utilizan la propiedad @code{upstream-name} en las
definiciones de paquetes, que puede usarse para obtener dicho efecto:

@lisp
(define-public network-manager
  (package
    (name "network-manager")
    ;; @dots{}
    (properties '((upstream-name . "NetworkManager")))))
@end lisp

When passed @option{--update}, it modifies distribution source files to
update the version numbers and source tarball hashes of those package
recipes (@pxref{Definición de paquetes}).  This is achieved by downloading each
package's latest source tarball and its associated OpenPGP signature,
authenticating the downloaded tarball against its signature using
@command{gpgv}, and finally computing its hash---note that GnuPG must be
installed and in @code{$PATH}; run @code{guix install gnupg} if needed.

Cuando la clave pública usada para firmar el archivador no se encuentra en
el anillo de claves de la usuaria, se intenta automáticamente su obtención
desde un servidor de claves públicas; cuando se encuentra, la clave se añade
al anillo de claves de la usuaria; en otro caso, @command{guix refresh}
informa de un error.

Se aceptan las siguientes opciones:

@table @code

@item --expression=@var{expr}
@itemx -e @var{expr}
Considera el paquete al que evalúa @var{expr}

Es útil para hacer una referencia precisa de un paquete concreto, como en
este ejemplo:

@example
guix refresh -l -e '(@@@@ (gnu packages commencement) glibc-final)'
@end example

This command lists the dependents of the ``final'' libc (essentially all the
packages).

@item --update
@itemx -u
Actualiza los ficheros fuente de la distribución (recetas de paquetes) en su
lugar. Esto se ejecuta habitualmente desde una copia de trabajo del árbol de
fuentes de Guix (@pxref{Ejecución de Guix antes de estar instalado}):

@example
$ ./pre-inst-env guix refresh -s non-core -u
@end example

@xref{Definición de paquetes}, para más información sobre la definición de
paquetes.

@item --select=[@var{subconjunto}]
@itemx -s @var{subconjunto}
Selecciona todos los paquetes en @var{subconjunto}, o bien @code{core} o
bien @code{non-core}.

El subconjunto @code{core} hace referencia a todos los paquetes en el núcleo
de la distribución---es decir, paquetes que se usan para construir ``todo lo
demás''. Esto incluye GCC, libc, Binutils, Bash, etc. Habitualmente, cambiar
uno de esos paquetes en la distribución conlleva la reconstrucción de todos
los demás. Por tanto, esas actualizaciones son una inconveniencia para las
usuarias en términos de tiempo de construcción o ancho de banda usado por la
actualización.

El subconjunto @code{non-core} hace referencia a los paquetes restantes. Es
típicamente útil en casos donde una actualización de paquetes básicos no
sería conveniente.

@item --manifest=@var{fichero}
@itemx -m @var{fichero}
Selecciona todos los paquetes del manifiesto en @var{fichero}. Es útil para
comprobar si algún paquete del manifiesto puede actualizarse.

@item --type=@var{actualizador}
@itemx -t @var{actualizador}
Selecciona únicamente paquetes manejados por @var{actualizador} (puede ser
una lista separada por comas de actualizadores). Actualmente,
@var{actualizador} puede ser:

@table @code
@item gnu
el actualizador de paquetes GNU;
@item gnome
el actualizador para paquetes GNOME;
@item kde
el actualizador para paquetes KDE;
@item xorg
el actualizador para paquetes X.org;
@item kernel.org
el actualizador para paquetes alojados en kernel.org;
@item elpa
el actualizador para paquetes @uref{https://elpa.gnu.org/, ELPA};
@item cran
el actualizador para paquetes @uref{https://cran.r-project.org/, CRAN};
@item bioconductor
el actualizador para paquetes R @uref{https://www.bioconductor.org/,
Bioconductor};
@item cpan
el actualizador para paquetes @uref{https://www.cpan.org/, CPAN};
@item pypi
el actualizador para paquetes @uref{https://pypi.python.org, PyPI}.
@item gem
el actualizador para paquetes @uref{https://rubygems.org, RubyGems}.
@item github
el actualizador para paquetes @uref{https://github.com, GitHub}.
@item hackage
el actualizador para paquetes @uref{https://hackage.haskell.org, Hackage}.
@item stackage
el actualizador para paquetes @uref{https://www.stackage.org, Stackage}.
@item crate
el actualizador para paquetes @uref{https://crates.io, Crates}.
@item launchpad
el actualizador para paquetes @uref{https://launchpad.net, Launchpad}.
@end table

Por ejemplo, la siguiente orden únicamente comprueba actualizaciones de
paquetes Emacs alojados en @code{elpa.gnu.org} y actualizaciones de paquetes
CRAN:

@example
$ guix refresh --type=elpa,cran
gnu/packages/statistics.scm:819:13: r-testthat would be upgraded from 0.10.0 to 0.11.0
gnu/packages/emacs.scm:856:13: emacs-auctex would be upgraded from 11.88.6 to 11.88.9
@end example

@end table

Además, @command{guix refresh} puede recibir uno o más nombres de paquetes,
como en este ejemplo:

@example
$ ./pre-inst-env guix refresh -u emacs idutils gcc@@4.8
@end example

@noindent
The command above specifically updates the @code{emacs} and @code{idutils}
packages.  The @option{--select} option would have no effect in this case.

Cuando se considera la actualización de un paquete, a veces es conveniente
conocer cuantos paquetes se verían afectados por la actualización y su
compatibilidad debería comprobarse. Para ello la siguiente opción puede
usarse cuando se proporcionan uno o más nombres de paquete a @command{guix
refresh}:

@table @code

@item --list-updaters
@itemx -L
List available updaters and exit (see @option{--type} above).

Para cada actualizador, muestra la fracción de paquetes que cubre; al final
muestra la fracción de paquetes cubiertos por todos estos actualizadores.

@item --list-dependent
@itemx -l
Enumera los paquetes de nivel superior dependientes que necesitarían una
reconstrucción como resultado de la actualización de uno o más paquetes.

@xref{Invocación de guix graph, el tipo @code{reverse-package} de @command{guix
graph}}, para información sobre cómo visualizar la lista de paquetes que
dependen de un paquete.

@end table

Be aware that the @option{--list-dependent} option only @emph{approximates}
the rebuilds that would be required as a result of an upgrade.  More
rebuilds might be required under some circumstances.

@example
$ guix refresh --list-dependent flex
Building the following 120 packages would ensure 213 dependent packages are rebuilt:
hop@@2.4.0 geiser@@0.4 notmuch@@0.18 mu@@0.9.9.5 cflow@@1.4 idutils@@4.6 @dots{}
@end example

La orden previa enumera un conjunto de paquetes que puede ser construido
para comprobar la compatibilidad con una versión actualizada del paquete
@code{flex}.

@table @code

@item --list-transitive
Enumera todos los paquetes de los que uno o más paquetes dependen.

@example
$ guix refresh --list-transitive flex
flex@@2.6.4 depends on the following 25 packages: perl@@5.28.0 help2man@@1.47.6
bison@@3.0.5 indent@@2.2.10 tar@@1.30 gzip@@1.9 bzip2@@1.0.6 xz@@5.2.4 file@@5.33 @dots{}
@end example

@end table

La orden previa enumera un conjunto de paquetes que, en caso de cambiar,
causarían la reconstrucción de @code{flex}.

Las siguientes opciones pueden usarse para personalizar la operación de
GnuPG:

@table @code

@item --gpg=@var{orden}
Use @var{orden} como la orden de GnuPG 2.x. Se busca @var{orden} en
@code{PATH}.

@item --keyring=@var{fichero}
Usa @var{fichero} como el anillo de claves para claves de
proveedoras. @var{fichero} debe estar en el @dfn{formato keybox}. Los
ficheros Keybox normalmente tienen un nombre terminado en @file{.kbx} y
GNU@tie{}Privacy Guard (GPG) puede manipular estos ficheros (@pxref{kbxutil,
@command{kbxutil},, gnupg, Using the GNU Privacy Guard}, para información
sobre una herramienta para manipular ficheros keybox).

When this option is omitted, @command{guix refresh} uses
@file{~/.config/guix/upstream/trustedkeys.kbx} as the keyring for upstream
signing keys.  OpenPGP signatures are checked against keys from this
keyring; missing keys are downloaded to this keyring as well (see
@option{--key-download} below).

Puede exportar claves de su anillo de claves GPG predeterminado en un
fichero keybox usando órdenes como esta:

@example
gpg --export rms@@gnu.org | kbxutil --import-openpgp >> mianillo.kbx
@end example

Del mismo modo, puede obtener claves de un archivo keybox específico así:

@example
gpg --no-default-keyring --keyring mianillo.kbx \
  --recv-keys @value{OPENPGP-SIGNING-KEY-ID}
@end example

@ref{GPG Configuration Options, @option{--keyring},, gnupg, Using the GNU
Privacy Guard}, para más información sobre la opción @option{--keyring} de
GPG.

@item --key-download=@var{política}
Maneja las claves no encontradas de acuerdo a la @var{política}, que puede
ser una de:

@table @code
@item always
Siempre descarga las claves OpenPGP no encontradas del servidor de claves, y
las añade al anillo de claves GnuPG de la usuaria.

@item never
Nunca intenta descargar claves OpenPGP no encontradas. Simplemente propaga
el error.

@item interactive
Cuando se encuentra un paquete firmado por una clave OpenPGP desconocida,
pregunta a la usuaria si descargarla o no. Este es el comportamiento
predeterminado.
@end table

@item --key-server=@var{dirección}
Use @var{dirección} como el servidor de claves OpenPGP cuando se importa una
clave pública.

@item --load-path=@var{directorio}
Añade @var{directorio} al frente de la ruta de búsqueda de módulos de
paquetes (@pxref{Módulos de paquetes}).

Esto permite a las usuarias definir sus propios paquetes y hacerlos visibles
a las herramientas de línea de órdenes.

@end table

The @code{github} updater uses the @uref{https://developer.github.com/v3/,
GitHub API} to query for new releases.  When used repeatedly e.g.@: when
refreshing all packages, GitHub will eventually refuse to answer any further
API requests.  By default 60 API requests per hour are allowed, and a full
refresh on all GitHub packages in Guix requires more than this.
Authentication with GitHub through the use of an API token alleviates these
limits.  To use an API token, set the environment variable
@env{GUIX_GITHUB_TOKEN} to a token procured from
@uref{https://github.com/settings/tokens} or otherwise.


@node Invocación de guix lint
@section Invocación de @command{guix lint}

@cindex @command{guix lint}
@cindex paquete, comprobación de errores
The @command{guix lint} command is meant to help package developers avoid
common errors and use a consistent style.  It runs a number of checks on a
given set of packages in order to find common mistakes in their
definitions.  Available @dfn{checkers} include (see @option{--list-checkers}
for a complete list):

@table @code
@item synopsis
@itemx description
Valida ciertas reglas tipográficas y de estilo en la descripción y sinopsis
de cada paquete.

@item inputs-should-be-native
Identifica entradas que probablemente deberían ser entradas nativas.

@item source
@itemx home-page
@itemx mirror-url
@itemx github-url
@itemx source-file-name
Comprueba las URL @code{home-page} y @code{source} e informa aquellas que no
sean válidas. Sugiere una URL @code{mirror://} cuando sea aplicable. Si la
URL @code{source} redirecciona a una URL GitHub, recomienda el uso de la URL
GitHub. Comprueba que el nombre de fichero de las fuentes es significativo,
por ejemplo que no es simplemente un número de versión o revisión git, sin
un nombre @code{file-name} declarado (@pxref{Referencia de origin}).

@item source-unstable-tarball
Analiza la URL @code{source} para determinar si un archivador tar de GitHub
se genera de forma automática o es una publicación
oficial. Desafortunadamente los archivadores tar de GitHub a veces se
regeneran.

@item archival
@cindex Software Heritage, archivo de código fuente
@cindex archivado de código fuente, Software Heritage
Comprueba si el código fuente del paquete se encuentra archivado en
@uref{https://www.softwareheritage.org, Software Heritage}.

Cuando el código fuente que no se encuentra archivado proviene de un sistema
de control de versiones@footnote{VCS en inglés}---por ejemplo, se ha
obtenido con @code{git-fetch}---, envía a Software Heritage una petición de
almacenamiento de manera que se archive cuando sea posible. Esto asegura que
las fuentes permanecen disponibles a largo plazo, y que Guix puede usar
Software Heritage como respaldo en caso de que el código fuente
desapareciese de la máquina que lo almacenaba originalmente. El estado de
las peticiones de almacenamiento recientes puede
@uref{https://archive.softwareheritage.org/save/#requests, verse en su
página web}.

Cuando el código fuente es un fichero comprimido que se obtiene con
@code{url-fetch}, simplemente imprime un mensaje cuando no se encuentra
archivado. En el momento de la escritura de este documento, Software
Heritage no permite el almacenamiento de ficheros comprimidos arbitrarios;
estamos trabajando en formas de asegurar que también se archive el código
que no se encuentra bajo control de versiones.

Software Heritage
@uref{https://archive.softwareheritage.org/api/#rate-limiting, limita la
tasa de peticiones por dirección IP}. Cuando se alcanza dicho límite,
@command{guix lint} imprime un mensaje y la comprobación @code{archival} no
hace nada hasta que dicho límite se reinicie.

@item cve
@cindex vulnerabilidades de seguridad
@cindex CVE, vulnerabilidades y exposiciones comunes
Informa de vulnerabilidades encontradas en las bases de datos de
vulnerabilidades y exposiciones comunes (CVE) del año actual y el pasado
@uref{https://nvd.nist.gov/vuln/data-feeds, publicadas por el NIST de EEUU}.

Para ver información acerca de una vulnerabilidad particular, visite páginas
como:

@itemize
@item
@indicateurl{https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-YYYY-ABCD}
@item
@indicateurl{https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-YYYY-ABCD}
@end itemize

@noindent
donde @code{CVE-YYYY-ABCD} es el identificador CVE---por ejemplo,
@code{CVE-2015-7554}.

Las desarrolladoras de paquetes pueden especificar en las recetas del
paquete el nombre y versión en la @uref{https://nvd.nist.gov/cpe.cfm,
plataforma común de enumeración (CPE)} del paquete cuando el nombre o
versión que usa Guix son diferentes, como en este ejemplo:

@lisp
(package
  (name "grub")
  ;; @dots{}
  ;; CPE llama a este paquete "grub2".
  (properties '((cpe-name . "grub2")
                (cpe-version . "2.3"))))
@end lisp

@c See <https://www.openwall.com/lists/oss-security/2017/03/15/3>.
Algunas entradas en la base de datos CVE no especifican a qué versión del
paquete hacen referencia, y por lo tanto ``permanecen visibles'' para
siempre. Las desarrolladoras de paquetes que encuentren alertas CVE y
verifiquen que pueden ignorarse, pueden declararlas como en este ejemplo:

@lisp
(package
  (name "t1lib")
  ;; @dots{}
  ;; Estas alertas de CVE no aplican y pueden ignorarse
  ;; con seguridad.
  (properties `((lint-hidden-cve . ("CVE-2011-0433"
                                    "CVE-2011-1553"
                                    "CVE-2011-1554"
                                    "CVE-2011-5244")))))
@end lisp

@item formatting
Avisa de problemas de formato obvios en el código fuente: espacios en blanco
al final de las líneas, uso de tabuladores, etc.
@end table

La sintaxis general es:

@example
guix lint @var{opciones} @var{paquete}@dots{}
@end example

Si no se proporciona ningún paquete en la linea de órdenes, todos los
paquetes se comprueban. Las @var{opciones} pueden ser cero o más de las
siguientes:

@table @code
@item --list-checkers
@itemx -l
Enumera y describe todas las comprobaciones disponibles que se ejecutarán
sobre los paquetes y finaliza.

@item --checkers
@itemx -c
Only enable the checkers specified in a comma-separated list using the names
returned by @option{--list-checkers}.

@item --load-path=@var{directorio}
@itemx -L @var{directorio}
Añade @var{directorio} al frente de la ruta de búsqueda de módulos de
paquetes (@pxref{Módulos de paquetes}).

Esto permite a las usuarias definir sus propios paquetes y hacerlos visibles
a las herramientas de línea de órdenes.

@end table

@node Invocación de guix size
@section Invocación de @command{guix size}

@cindex size
@cindex tamaño del paquete
@cindex clausura
@cindex @command{guix size}
La orden @command{guix size} ayuda a las desarrolladoras de paquetes a
perfilar el uso de disco de los paquetes. Es fácil pasar por encima el
impacto que produce añadir una dependencia adicional a un paquete, o el
impacto del uso de una salida única para un paquete que puede ser dividido
fácilmente (@pxref{Paquetes con múltiples salidas}). Estos son los problemas
típicos que @command{guix size} puede resaltar.

Se le pueden proporcionar una o más especificaciones de paquete como
@code{gcc@@4.8} o @code{guile:debug}, o un nombre de fichero en el
almacén. Considere este ejemplo:

@example
$ guix size coreutils
store item                               total    self
/gnu/store/@dots{}-gcc-5.5.0-lib           60.4    30.1  38.1%
/gnu/store/@dots{}-glibc-2.27              30.3    28.8  36.6%
/gnu/store/@dots{}-coreutils-8.28          78.9    15.0  19.0%
/gnu/store/@dots{}-gmp-6.1.2               63.1     2.7   3.4%
/gnu/store/@dots{}-bash-static-4.4.12       1.5     1.5   1.9%
/gnu/store/@dots{}-acl-2.2.52              61.1     0.4   0.5%
/gnu/store/@dots{}-attr-2.4.47             60.6     0.2   0.3%
/gnu/store/@dots{}-libcap-2.25             60.5     0.2   0.2%
total: 78.9 MiB
@end example

@cindex clausura
Los elementos del almacén enumerados aquí constituyen la @dfn{clausura
transitiva} de Coreutils---es decir, Coreutils y todas sus dependencias,
recursivamente---como sería devuelto por:

@example
$ guix gc -R /gnu/store/@dots{}-coreutils-8.23
@end example

Aquí la salida muestra tres columnas junto a los elementos del almacén. La
primera columna, etiquetada ``total'', muestra el tamaño en mebibytes (MiB)
de la clausura del elemento del almacén---es decir, su propio tamaño sumado
al tamaño de todas sus dependencias. La siguiente columna, etiquetada
``self'', muestra el tamaño del elemento en sí. La última columna muestra la
relación entre el tamaño del elemento en sí frente al espacio ocupado por
todos los elementos enumerados.

En este ejemplo, vemos que la clausura de Coreutils ocupa 79@tie{}MiB, cuya
mayor parte son libc y las bibliotecas auxiliares de GCC para tiempo de
ejecución. (Que libc y las bibliotecas de GCC representen una fracción
grande de la clausura no es un problema en sí, puesto que siempre están
disponibles en el sistema de todas maneras).

Cuando los paquetes pasados a @command{guix size} están disponibles en el
almacén@footnote{Más precisamente, @command{guix size} busca la variante
@emph{sin injertos} de los paquetes, como el devuelto por @code{guix build
@var{paquete} --no-grafts}. @xref{Actualizaciones de seguridad}, para información sobre
injertos.} consultando al daemon para determinar sus dependencias, y mide su
tamaño en el almacén, de forma similar a @command{du -ms --apparent-size}
(@pxref{du invocation,,, coreutils, GNU Coreutils}).

Cuando los paquetes proporcionados @emph{no} están en el almacén,
@command{guix size} informa en base de las sustituciones disponibles
(@pxref{Sustituciones}). Esto hace posible perfilar el espacio en disco
incluso de elementos del almacén que no están en el disco, únicamente
disponibles de forma remota.

Puede especificar también varios nombres de paquetes:

@example
$ guix size coreutils grep sed bash
store item                               total    self
/gnu/store/@dots{}-coreutils-8.24          77.8    13.8  13.4%
/gnu/store/@dots{}-grep-2.22               73.1     0.8   0.8%
/gnu/store/@dots{}-bash-4.3.42             72.3     4.7   4.6%
/gnu/store/@dots{}-readline-6.3            67.6     1.2   1.2%
@dots{}
total: 102.3 MiB
@end example

@noindent
En este ejemplo vemos que la combinación de los cuatro paquetes toma
102.3@tie{}MiB en total, lo cual es mucho menos que la suma de cada
clausura, ya que tienen muchas dependencias en común.

When looking at the profile returned by @command{guix size}, you may find
yourself wondering why a given package shows up in the profile at all.  To
understand it, you can use @command{guix graph --path -t references} to
display the shortest path between the two packages (@pxref{Invocación de guix graph}).

Las opciones disponibles son:

@table @option

@item --substitute-urls=@var{urls}
Usa la información de sustituciones de
@var{urls}. @xref{client-substitute-urls, la misma opción en @code{guix
build}}.

@item --sort=@var{clave}
Ordena las líneas de acuerdo a @var{clave}, una de las siguientes opciones:

@table @code
@item self
el tamaño de cada elemento (predeterminada);
@item clausura
el tamaño total de la clausura del elemento.
@end table

@item --map-file=@var{fichero}
Escribe un mapa gráfico del uso del disco en formato PNG en el
@var{fichero}.

Para el ejemplo previo, el mapa tiene esta pinta:

@image{images/coreutils-size-map,5in,, mapa del uso del disco de Coreutils
producido por @command{guix size}}

Esta opción necesita que la biblioteca
@uref{https://wingolog.org/software/guile-charting/, Guile-Charting} esté
instalada y visible en la ruta de búsqueda de módulos Guile. Cuando no es el
caso, @command{guix size} produce un error al intentar cargarla.

@item --system=@var{sistema}
@itemx -s @var{sistema}
Considera paquetes para @var{sistema}---por ejemplo, @code{x86_64-linux}.

@item --load-path=@var{directorio}
@itemx -L @var{directorio}
Añade @var{directorio} al frente de la ruta de búsqueda de módulos de
paquetes (@pxref{Módulos de paquetes}).

Esto permite a las usuarias definir sus propios paquetes y hacerlos visibles
a las herramientas de línea de órdenes.
@end table

@node Invocación de guix graph
@section Invocación de @command{guix graph}

@cindex GAD (DAG en Inglés)
@cindex @command{guix graph}
@cindex dependencias de un paquete
Packages and their dependencies form a @dfn{graph}, specifically a directed
acyclic graph (DAG).  It can quickly become difficult to have a mental model
of the package DAG, so the @command{guix graph} command provides a visual
representation of the DAG.  By default, @command{guix graph} emits a DAG
representation in the input format of @uref{https://www.graphviz.org/,
Graphviz}, so its output can be passed directly to the @command{dot} command
of Graphviz.  It can also emit an HTML page with embedded JavaScript code to
display a ``chord diagram'' in a Web browser, using the
@uref{https://d3js.org/, d3.js} library, or emit Cypher queries to construct
a graph in a graph database supporting the
@uref{https://www.opencypher.org/, openCypher} query language.  With
@option{--path}, it simply displays the shortest path between two packages.
The general syntax is:

@example
guix graph @var{opciones} @var{paquete}@dots{}
@end example

Por ejemplo, la siguiente orden genera un fichero PDF que representa el GAD
para GNU@tie{}Core Utilities, mostrando sus dependencias en tiempo de
construcción:

@example
guix graph coreutils | dot -Tpdf > gad.pdf
@end example

La salida es algo así:

@image{images/coreutils-graph,2in,,Grafo de dependencias de GNU Coreutils}

Bonito y pequeño grafo, ¿no?

You may find it more pleasant to navigate the graph interactively with
@command{xdot} (from the @code{xdot} package):

@example
guix graph coreutils | xdot -
@end example

¡Pero hay más de un grafo! El grafo previo es conciso: es el grafo de los
objetos package, omitiendo las entradas implícitas como GCC, libc, grep,
etc. Es habitualmente útil tener un grafo conciso así, pero a veces una
puede querer ver más detalles. @command{guix graph} implementa varios tipos
de grafos, lo que le permite seleccionar el nivel de detalle:

@table @code
@item package
Este es el tipo por defecto usado en el ejemplo previo. Muestra el GAD de
objetos package, excluyendo dependencias implícitas. Es conciso, pero deja
fuera muchos detalles.

@item reverse-package
Esto muestra el GAD @emph{inverso} de paquetes. Por ejemplo:

@example
guix graph --type=reverse-package ocaml
@end example

...@: yields the graph of packages that @emph{explicitly} depend on OCaml
(if you are also interested in cases where OCaml is an implicit dependency,
see @code{reverse-bag} below).

Fíjese que esto puede producir grafos inmensos para los paquetes básicos. Si
todo lo que quiere saber es el número de paquetes que dependen de uno
determinado, use @command{guix refresh --list-dependent} (@pxref{Invocación de guix refresh, @option{--list-dependent}}).

@item bag-emerged
Este es el GAD del paquete, @emph{incluyendo} entradas implícitas.

Por ejemplo, la siguiente orden:

@example
guix graph --type=bag-emerged coreutils
@end example

...@: emite este grafo más grande:

@image{images/coreutils-bag-graph,,5in,Grafo de dependencias detallado de
GNU Coreutils}

En la parte inferior del grafo, vemos todas las entradas implícitas de
@var{gnu-build-system} (@pxref{Sistemas de construcción, @code{gnu-build-system}}).

Ahora bien, fíjese que las dependencias de estas entradas implícitas---es
decir, las @dfn{dependencias del lanzamiento inicial}
(@pxref{Lanzamiento inicial})---no se muestran aquí para mantener una salida
concisa.

@item bag
Similar a @code{bag-emerged}, pero esta vez incluye todas las dependencias
del lanzamiento inicial.

@item bag-with-origins
Similar a @code{bag}, pero también muestra los orígenes y sus dependencias.

@item reverse-bag
Muestra el GAD @emph{inverso} de paquetes. Al contrario que
@code{reverse-package}, también tiene en cuenta las dependencias
implícitas. Por ejemplo:

@example
guix graph -t reverse-bag dune
@end example

@noindent
...@: emite el grafo de tosos los paquetes que dependen de Dune, directa o
indirectamente. Ya que Dune es una dependencia @emph{implícita} de muchos
paquetes @i{vía} @code{dune-build-system}, esto mostrará un gran número de
paquetes, mientras que @code{reverse-package} mostraría muy pocos si muestra
alguno.

@item derivación
Esta es la representación más detallada: muestra el GAD de derivaciones
(@pxref{Derivaciones}) y elementos simples del almacén. Comparada con las
representaciones previas, muchos nodos adicionales son visibles, incluyendo
los guiones de construcción, parches, módulos Guile, etc.

Para este tipo de grafo, también es posible pasar un nombre de fichero
@file{.drv} en vez del nombre del paquete, como en:

@example
guix graph -t derivation `guix system build -d mi-configuración.scm`
@end example

@item module
Este es el grafo de los @dfn{módulos de paquete} (@pxref{Módulos de paquetes}). Por ejemplo, la siguiente orden muestra el grafo para el módulo
de paquetes que define el paquete @code{guile}:

@example
guix graph -t module guile | xdot -
@end example
@end table

Todos los tipos previos corresponden a las @emph{dependencias durante la
construcción}. El grafo siguiente representa las @emph{dependencias en
tiempo de ejecución}:

@table @code
@item references
Este es el grafo de @dfn{referencias} de la salida de un paquete, como lo
devuelve @command{guix gc --references} (@pxref{Invocación de guix gc}).

Si la salida del paquete proporcionado no está disponible en el almacén,
@command{guix graph} intenta obtener la información de dependencias desde
las sustituciones.

Aquí también puede proporcionar un nombre de fichero del almacén en vez de
un nombre de paquete. Por ejemplo, la siguiente orden produce el grafo de
referencias de su perfil (¡el cuál puede ser grande!):

@example
guix graph -t references `readlink -f ~/.guix-profile`
@end example

@item referrers
Este es el grafo de @dfn{referentes} de la salida de un paquete, como lo
devuelve @command{guix gc --referrers} (@pxref{Invocación de guix gc}).

Depende exclusivamente de información en su almacén. Por ejemplo, supongamos
que la versión actual de Inkscape está disponible en 10 perfiles en su
máquina; @command{guix graph -t referrers inkscape} mostrará un grafo cuya
raíz es Inkscape y con esos 10 perfiles enlazados a ella.

Puede ayudar a determinar qué impide que un elemento del almacén sea
recolectado.

@end table

@cindex shortest path, between packages
Often, the graph of the package you are interested in does not fit on your
screen, and anyway all you want to know is @emph{why} that package actually
depends on some seemingly unrelated package.  The @option{--path} option
instructs @command{guix graph} to display the shortest path between two
packages (or derivations, or store items, etc.):

@example
$ guix graph --path emacs libunistring
emacs@@26.3
mailutils@@3.9
libunistring@@0.9.10
$ guix graph --path -t derivation emacs libunistring
/gnu/store/@dots{}-emacs-26.3.drv
/gnu/store/@dots{}-mailutils-3.9.drv
/gnu/store/@dots{}-libunistring-0.9.10.drv
$ guix graph --path -t references emacs libunistring
/gnu/store/@dots{}-emacs-26.3
/gnu/store/@dots{}-libidn2-2.2.0
/gnu/store/@dots{}-libunistring-0.9.10
@end example

Las opciones disponibles son las siguientes:

@table @option
@item --type=@var{tipo}
@itemx -t @var{tipo}
Produce un grafo de salida de @var{tipo}, donde @var{tipo} debe ser uno de
los valores enumerados previamente.

@item --list-types
Enumera los tipos de grafos implementados.

@item --backend=@var{motor}
@itemx -b @var{motor}
Produce un grafo usando el @var{motor} seleccionado.

@item --list-backends
Enumera los motores de grafos implementados.

Actualmente, los motores disponibles son Graphviz y d3.js.

@item --path
Display the shortest path between two nodes of the type specified by
@option{--type}.  The example below shows the shortest path between
@code{libreoffice} and @code{llvm} according to the references of
@code{libreoffice}:

@example
$ guix graph --path -t references libreoffice llvm
/gnu/store/@dots{}-libreoffice-6.4.2.2
/gnu/store/@dots{}-libepoxy-1.5.4
/gnu/store/@dots{}-mesa-19.3.4
/gnu/store/@dots{}-llvm-9.0.1
@end example

@item --expression=@var{expr}
@itemx -e @var{expr}
Considera el paquete al que evalúa @var{expr}

Es útil para hacer una referencia precisa de un paquete concreto, como en
este ejemplo:

@example
guix graph -e '(@@@@ (gnu packages commencement) gnu-make-final)'
@end example

@item --system=@var{sistema}
@itemx -s @var{sistema}
Muestra el grafo para @var{sistema}---por ejemplo, @code{i686-linux}.

El grafo de dependencias del paquete es altamente independiente de la
arquitectura, pero existen algunas partes dependientes de la arquitectura
que esta opción le permite visualizar.

@item --load-path=@var{directorio}
@itemx -L @var{directorio}
Añade @var{directorio} al frente de la ruta de búsqueda de módulos de
paquetes (@pxref{Módulos de paquetes}).

Esto permite a las usuarias definir sus propios paquetes y hacerlos visibles
a las herramientas de línea de órdenes.
@end table

Además de esto, @command{guix graph} permite todas las opciones habituales
de transformación de paquetes (@pxref{Opciones de transformación de paquetes}). Esto
facilita la visualización del efecto de una transformación de reescritura de
grafo como @option{--with-input}. Por ejemplo, la siguiente orden muestra el
grafo de @code{git} una vez que @code{openssl} ha sido reemplazado por
@code{libressl} en todos los nodos del grafo:

@example
guix graph git --with-input=openssl=libressl
@end example

¡Tantas posibilidades, tanta diversión!

@node Invocación de guix publish
@section Invocación de @command{guix publish}

@cindex @command{guix publish}
El propósito de @command{guix publish} es permitir a las usuarias compartir
fácilmente su almacén con otras, quienes pueden usarlo como servidor de
sustituciones (@pxref{Sustituciones}).

Cuando @command{guix publish} se ejecuta, lanza un servidor HTTP que permite
a cualquiera que tenga acceso a través de la red obtener sustituciones de
él. Esto significa que cualquier máquina que ejecute Guix puede actuar como
si fuese una granja de construcción, ya que la interfaz HTTP es compatible
con Cuirass, el software detrás de la granja de construcción
@code{@value{SUBSTITUTE-SERVER}}.

For security, each substitute is signed, allowing recipients to check their
authenticity and integrity (@pxref{Sustituciones}).  Because @command{guix
publish} uses the signing key of the system, which is only readable by the
system administrator, it must be started as root; the @option{--user} option
makes it drop root privileges early on.

El par claves de firma debe generarse antes de ejecutar @command{guix
publish}, usando @command{guix archive --generate-key} (@pxref{Invocación de guix archive}).

La sintaxis general es:

@example
guix publish @var{opciones}@dots{}
@end example

La ejecución de @command{guix publish} sin ningún parámetro adicional
lanzará un servidor HTTP en el puerto 8080:

@example
guix publish
@end example

Una vez el servidor de publicación ha sido autorizado (@pxref{Invocación de guix archive}), el daemon puede descargar sustituciones de él:

@example
guix-daemon --substitute-urls=http://example.org:8080
@end example

Por defecto, @command{guix publish} comprime los archivos al vuelo cuando es
necesario. Este modo ``al vuelo'' es conveniente ya que no necesita
configuración y está disponible inmediatamente. No obstante, cuando se
proporciona servicio a muchos clientes, se recomienda usar la opción
@option{--cache}, que activa el almacenamiento en caché de los archivos
antes de enviarlos a los clientes---véase a continuación para más
detalles. La orden @command{guix weather} proporciona una forma fácil de
comprobar lo que proporciona un servidor (@pxref{Invocación de guix weather}).

Además @command{guix publish} también sirve como un espejo de acceso por
contenido a ficheros de fuentes a los que los registros @code{origin} hacen
referencia (@pxref{Referencia de origin}). Por ejemplo, si asumimos que
@command{guix publish} se ejecuta en @code{example.org}, la siguiente URL
devuelve directamente el fichero @file{hello-2.10.tar.gz} con el hash SHA256
proporcionado (representado en formato @code{nix-base32}, @pxref{Invocación de guix hash}).

@example
http://example.org/file/hello-2.10.tar.gz/sha256/0ssi1@dots{}ndq1i
@end example

Obviamente estas URL funcionan solamente para ficheros que se encuentran en
el almacén; en otros casos devuelven un 404 (``No encontrado'').

@cindex logs de construcción, publicación
Los log de construcción están disponibles desde URL @code{/log} como:

@example
http://example.org/log/gwspk@dots{}-guile-2.2.3
@end example

@noindent
When @command{guix-daemon} is configured to save compressed build logs, as
is the case by default (@pxref{Invocación de guix-daemon}), @code{/log} URLs
return the compressed log as-is, with an appropriate @code{Content-Type}
and/or @code{Content-Encoding} header.  We recommend running
@command{guix-daemon} with @option{--log-compression=gzip} since Web
browsers can automatically decompress it, which is not the case with Bzip2
compression.

Las siguientes opciones están disponibles:

@table @code
@item --port=@var{puerto}
@itemx -p @var{puerto}
Escucha peticiones HTTP en @var{puerto}.

@item --listen=@var{dirección}
Escucha en la interfaz de red de la @var{dirección}. El comportamiento
predeterminado es aceptar conexiones de cualquier interfaz.

@item --user=@var{usuaria}
@itemx -u @var{usuaria}
Cambia los privilegios a los de @var{usuaria} tan pronto como sea
posible---es decir, una vez el socket del servidor esté abierto y la clave
de firma haya sido leída.

@item --compression[=@var{método}[:@var{nivel}]]
@itemx -C [@var{método}[:@var{nivel}]]
Comprime los datos usando el @var{método} y @var{nivel}
proporcionados. @var{método} es o bien @code{lzip} o bien @code{gzip};
cuando @var{método} se omite, se usa @code{gzip}.

Cuando el @var{nivel} es cero, desactiva la compresión. El rango 1 a 9
corresponde a distintos niveles de compresión gzip: 1 es el más rápido, y 9
es el mejor (intensivo a nivel de CPU). El valor predeterminado es 3.

Habitualmente @code{lzip} comprime notablemente mejor que @code{gzip} a
cambio de un pequeño incremento en el uso del procesador; véase
@uref{https://nongnu.org/lzip/lzip_benchmark.html,las pruebas en la página
web de lzip}.

A menos que se use @option{--cache}, la compresión ocurre al vuelo y los
flujos comprimidos no se almacenan en caché. Por tanto, para reducir la
carga en la máquina que ejecuta @command{guix publish}, puede ser una buena
idea elegir un nivel de compresión bajo, ejecutar @command{guix publish}
detrás de un proxy con caché o usar @option{--cache}. El uso de
@option{--cache} tiene la ventaja de que permite a @command{guix publish}
añadir la cabecera HTTP @code{Content-Length} a sus respuestas.

Se puede repetir esta opción, en cuyo caso cada sustitución se comprime
usando todos los métodos seleccionados, y todos son anunciados. Esto es útil
cuando las usuarias pueden no implementar todos los métodos de compresión:
pueden seleccionar el que implementan.

@item --cache=@var{directorio}
@itemx -c @var{directorio}
Almacena en caché los archivos y metadatos (URL @code{.narinfo}) en
@var{directorio} y únicamente proporciona archivos que están en la caché.

Cuando se omite esta opción, los archivos y metadatos se crean al
vuelo. Esto puede reducir el ancho de banda disponible, especialmente cuando
la compresión está activa, ya que se puede llegar al límite de la CPU. Otra
desventaja del modo predeterminado es que la longitud de los archivos no se
conoce con anterioridad, por lo que @command{guix publish} no puede añadir
la cabecera HTTP @code{Content-Length} a sus respuestas, lo que a su vez
previene que los clientes conozcan la cantidad de datos a descargar.

De manera contraria, cuando se usa @option{--cache}, la primera petición de
un elemento del almacén (a través de una URL @code{.narinfo}) devuelve 404 e
inicia un proceso en segundo plano para @dfn{cocinar} el archivo---calcular
su @code{.narinfo} y comprimirlo, en caso necesario. Una vez el archivo está
alojado en la caché de @var{directorio}, las siguientes peticiones obtendrán
un resultado satisfactorio y se ofrecerá el contenido directamente desde la
caché, lo que garantiza que los clientes obtienen el mejor ancho de banda
posible.

El proceso de ``cocinado'' se realiza por hilos de trabajo. Por defecto, se
crea un hilo por núcleo de la CPU, pero puede ser personalizado. Véase
@option{--workers} a continuación.

Cuando se usa @option{--ttl}, las entradas en caché se borran
automáticamente cuando hayan expirado.

@item --workers=@var{N}
Cuando se usa @option{--cache}, solicita la creación de @var{N} hilos de
trabajo para ``cocinar'' archivos.

@item --ttl=@var{ttl}
Produce cabeceras HTTP @code{Cache-Control} que anuncian un tiempo-de-vida
(TTL) de @var{ttl}. @var{ttl} debe indicar una duración: @code{5d} significa
5 días, @code{1m} significa un mes, etc.

Esto permite a la usuaria de Guix mantener información de sustituciones en
la caché durante @var{ttl}. No obstante, fíjese que @code{guix publish} no
garantiza en sí que los elementos del almacén que proporciona de hecho
permanezcan disponibles hasta que @var{ttl} expire.

Adicionalmente, cuando se usa @option{--cache}, las entradas en caché que no
hayan sido accedidas en @var{ttl} y no tengan un elemento correspondiente en
el almacén pueden ser borradas.

@item --nar-path=@var{ruta}
Usa @var{ruta} como el prefijo para las URL de los archivos ``nar''
(@pxref{Invocación de guix archive, archivadores normalizados}).

Por defecto, los archivos nar se proporcionan en una URL como
@code{/nar/gzip/@dots{}-coreutils-8.25}. Esta opción le permite cambiar la
parte @code{/nar} por @var{ruta}.

@item --public-key=@var{fichero}
@itemx --private-key=@var{fichero}
Usa los @var{fichero}s específicos como el par de claves pública y privada
usadas para firmar los elementos del almacén publicados.

Los ficheros deben corresponder al mismo par de claves (la clave privada se
usa para la firma y la clave pública simplemente se anuncia en los metadatos
de la firma). Deben contener claves en el formato canónico de expresiones-S
como el producido por @command{guix archive --generate-key} (@pxref{Invocación de guix archive}). Por defecto, se usan @file{/etc/guix/signing-key.pub} y
@file{/etc/guix/signing-key.sec}.

@item --repl[=@var{puerto}]
@itemx -r [@var{puerto}]
Lanza un servidor REPL Guile (@pxref{REPL Servers,,, guile, GNU Guile
Reference Manual}) en @var{puerto} (37146 por defecto). Esto se usa
principalmente para la depuración de un servidor @command{guix publish} en
ejecución.
@end table

Activar @command{guix publish} en el sistema Guix consiste en solo una
línea: simplemente instancie un servicio @code{guix-publish-service-type} en
el campo @code{services} de su declaración del sistema operativo
@code{operating-system} (@pxref{guix-publish-service-type,
@code{guix-publish-service-type}})

Si en vez de eso ejecuta Guix en una distribución distinta, siga estas
instrucciones:

@itemize
@item
Si su distribución anfitriona usa el sistema de inicio systemd:

@example
# ln -s ~root/.guix-profile/lib/systemd/system/guix-publish.service \
        /etc/systemd/system/
# systemctl start guix-publish && systemctl enable guix-publish
@end example

@item
Si su distribución anfitriona usa el sistema de inicio Upstart:

@example
# ln -s ~root/.guix-profile/lib/upstart/system/guix-publish.conf /etc/init/
# start guix-publish
@end example

@item
En otro caso, proceda de forma similar con el sistema de inicio de su
distribución.
@end itemize

@node Invocación de guix challenge
@section Invocación de @command{guix challenge}

@cindex construcciones reproducibles
@cindex construcciones verificables
@cindex @command{guix challenge}
@cindex reto (challenge)
¿Los binarios que proporciona este servidor realmente corresponden al código
fuente que dice construir? ¿Es determinista el proceso de construcción de un
paquete? Estas son las preguntas que la orden @command{guix challenge}
intenta responder.

La primera es obviamente una cuestión importante: antes de usar un servidor
de sustituciones (@pxref{Sustituciones}), es importante haber
@emph{verificado} que proporciona los binarios correctos, y por tanto
@emph{ponerlo a prueba}@footnote{NdT: challenge en inglés.}. La segunda es
lo que permite la primera: si las construcciones de los paquetes son
deterministas, construcciones independientes deberían emitir el mismo
resultado, bit a bit; si el servidor proporciona un binario diferente al
obtenido localmente, o bien está corrupto o bien tiene intenciones
perniciosas.

Sabemos que el hash que se muestra en los nombres de fichero en
@file{/gnu/store} es el hash de todas las entradas del proceso que construyó
el fichero o directorio---compiladores, bibliotecas, guiones de
construcción, etc. (@pxref{Introducción}). Asumiendo procesos de
construcción deterministas, un nombre de fichero del almacén debe
corresponder exactamente a una salida de construcción. @command{guix
challenge} comprueba si existe, realmente, una asociación unívoca comparando
la salida de la construcción de varias construcciones independientes de
cualquier elemento del almacén proporcionado.

La salida de la orden muestra algo así:

@smallexample
$ guix challenge --substitute-urls="https://@value{SUBSTITUTE-SERVER} https://guix.example.org"
actualizando sustituciones desde 'https://@value{SUBSTITUTE-SERVER}'... 100.0%
actualizando sustituciones desde 'https://guix.example.org'... 100.0%
el contenido de /gnu/store/@dots{}-openssl-1.0.2d es diferente:
  hash local: 0725l22r5jnzazaacncwsvp9kgf42266ayyp814v7djxs7nk963q
  https://@value{SUBSTITUTE-SERVER}/nar/@dots{}-openssl-1.0.2d: 0725l22r5jnzazaacncwsvp9kgf42266ayyp814v7djxs7nk963q
  https://guix.example.org/nar/@dots{}-openssl-1.0.2d: 1zy4fmaaqcnjrzzajkdn3f5gmjk754b43qkq47llbyak9z0qjyim
  ficheros diferentes:
    /lib/libcrypto.so.1.1
    /lib/libssl.so.1.1

el contenido de /gnu/store/@dots{}-git-2.5.0 es diferente:
  hash local: 00p3bmryhjxrhpn2gxs2fy0a15lnip05l97205pgbk5ra395hyha
  https://@value{SUBSTITUTE-SERVER}/nar/@dots{}-git-2.5.0: 069nb85bv4d4a6slrwjdy8v1cn4cwspm3kdbmyb81d6zckj3nq9f
  https://guix.example.org/nar/@dots{}-git-2.5.0: 0mdqa9w1p6cmli6976v4wi0sw9r4p5prkj7lzfd1877wk11c9c73
  fichero diferente:
    /libexec/git-core/git-fsck

el contenido de /gnu/store/@dots{}-pius-2.1.1 es diferente:
  hash local: 0k4v3m9z1zp8xzzizb7d8kjj72f9172xv078sq4wl73vnq9ig3ax
  https://@value{SUBSTITUTE-SERVER}/nar/@dots{}-pius-2.1.1: 0k4v3m9z1zp8xzzizb7d8kjj72f9172xv078sq4wl73vnq9ig3ax
  https://guix.example.org/nar/@dots{}-pius-2.1.1: 1cy25x1a4fzq5rk0pmvc8xhwyffnqz95h2bpvqsz2mpvlbccy0gs
  fichero diferente:
    /share/man/man1/pius.1.gz

@dots{}

6,406 elementos del almacén fueron analizados:
  - 4,749 (74.1%) fueron idénticos
  - 525 (8.2%) fueron diferentes
  - 1,132 (17.7%) no arrojaron resultados concluyentes
@end smallexample

@noindent
En este ejemplo, @command{guix challenge} primero recorre el almacén para
determinar el conjunto de derivaciones construidas localmente---en oposición
a elementos del almacén que fueron descargados de un servidor de
sustituciones---y consulta a todos los servidores de sustituciones. Una vez
hecho informa de los elementos del almacén para los cuales los servidores
obtuvieron un resultado diferente de el obtenido en la construcción local.

@cindex no-determinismo, en la construcción de paquetes
Como un ejemplo, @code{guix.example.org} siempre obtiene una respuesta
diferente. Por otro modo, @code{@value{SUBSTITUTE-SERVER}} coincide con las
construcciones locales, excepto en el caso de Git. Esto puede indicar que el
proceso de construcción de Git no es determinista, lo que significa que su
salida varia en función de varias cosas que Guix no controla completamente,
aunque la construcción de paquetes se realice en entornos aislados
(@pxref{Características}). Las fuentes más comunes de indeterminismo incluyen la
adición de marcas de tiempo en los resultados de la construcción, la
inclusión de números aleatorios y las enumeraciones de directorios ordenadas
por número de nodos-i. Véase @uref{https://reproducible-builds.org/docs/}
para más información.

Para encontrar cuál es el problema con este binario Git, la aproximación más
fácil es ejecutar:

@example
guix challenge git \
  --diff=diffoscope \
  --substitute-urls="https://@value{SUBSTITUTE-SERVER} https://guix.example.org"
@end example

Esto invoca automáticamente @command{diffoscope}, que muestra información
detallada sobre los ficheros que son diferentes.

Alternatively, we can do something along these lines (@pxref{Invocación de guix archive}):

@example
$ wget -q -O - https://@value{SUBSTITUTE-SERVER}/nar/lzip/@dots{}-git-2.5.0 \
   | lzip -d | guix archive -x /tmp/git
$ diff -ur --no-dereference /gnu/store/@dots{}-git.2.5.0 /tmp/git
@end example

Esta orden muestra la diferencia entre los ficheros resultantes de la
construcción local y los ficheros resultantes de la construcción en
@code{@value{SUBSTITUTE-SERVER}} (@pxref{Overview, Comparing and Merging
Files,, diffutils, Comparing and Merging Files}). La orden @command{diff}
funciona muy bien en ficheros de texto. Cuando son binarios los ficheros
diferentes, una opción mejor es @uref{https://diffoscope.org/,Diffoscope},
una herramienta que ayuda en la visualización de diferencias en todo tipo de
ficheros.

Una vez haya realizado este trabajo, puede determinar si las diferencias son
debidas a un procedimiento de construcción no-determinista o a un servidor
con intenciones ocultas. Intentamos duramente eliminar las fuentes de
indeterminismo en los paquetes para facilitar la verificación de
sustituciones, pero por supuesto es un proceso que implica no solo a Guix,
sino a una gran parte de la comunidad del software libre. Entre tanto,
@command{guix challenge} es una herramienta para ayudar a afrontar el
problema.

Si esta escribiendo paquetes para Guix, le recomendamos que compruebe si
@code{@value{SUBSTITUTE-SERVER}} y otros servidores de sustituciones
obtienen el mismo resultado de construcción que el obtenido por usted:

@example
$ guix challenge @var{paquete}
@end example

@noindent
donde @var{paquete} es una especificación de paquete como @code{guile@@2.0}
o @code{glibc:debug}.

La sintaxis general es:

@example
guix challenge @var{opciones} [@var{paquetes}@dots{}]
@end example

When a difference is found between the hash of a locally-built item and that
of a server-provided substitute, or among substitutes provided by different
servers, the command displays it as in the example above and its exit code
is 2 (other non-zero exit codes denote other kinds of errors).

La única opción de importancia es:

@table @code

@item --substitute-urls=@var{urls}
Considera @var{urls} la lista separada por espacios de URL de fuentes de
sustituciones con las que realizar la comparación.

@item --diff=@var{modo}
Muestra las diferencias encontradas de acuerdo con @var{modo}, uno de los
siguientes:

@table @asis
@item @code{simple} (el predeterminado)
Muestra la lista de ficheros que son diferentes.

@item @code{diffoscope}
@itemx @var{orden}
Invoca @uref{https://diffoscope.org/, Diffoscope} y le proporciona los dos
directorios cuyo contenido es diferente.

Cuando @var{orden} es una ruta absoluta, ejecuta @var{orden} en vez de
Diffoscope.

@item @code{none}
No muestra más detalles sobre las diferencias.
@end table

Thus, unless @option{--diff=none} is passed, @command{guix challenge}
downloads the store items from the given substitute servers so that it can
compare them.

@item --verbose
@itemx -v
Muestra detalles sobre coincidencias (contenidos idénticos) además de
información sobre las discrepancias.

@end table

@node Invocación de guix copy
@section Invocación de @command{guix copy}

@cindex copiar, elementos del almacén, por SSH
@cindex SSH, copiar elementos del almacén
@cindex compartir elementos del almacén entre máquinas
@cindex transferir elementos del almacén entre máquinas
La orden @command{guix copy} copia elementos del almacén de una máquina al
de otra a través de una conexión de shell seguro (SSH)@footnote{Esta orden
únicamente está disponible cuando ha encontrado
Guile-SSH. @xref{Requisitos}, para detalles.}. Por ejemplo, la siguiente
orden copia el paquete @code{coreutils}, el perfil de la usuaria y todas sus
dependencias a @var{dirección}, ingresando en el sistema como @var{usuaria}:

@example
guix copy --to=@var{usuaria}@@@var{dirección} \
          coreutils `readlink -f ~/.guix-profile`
@end example

Si alguno de los elementos del almacén a copiar ya están presentes en
@var{dirección}, no se envían realmente.

La siguiente orden obtiene @code{libreoffice} y @code{gimp} de
@var{dirección}, asumiendo que estén disponibles allí:

@example
guix copy --from=@var{dirección} libreoffice gimp
@end example

La conexión SSH se establece usando el cliente Guile-SSH, que es compatible
con OpenSSH: tiene en cuenta @file{~/.ssh/known_hosts} y
@file{~/.ssh/config}, y usa el agente SSH para la identificación.

La clave usada para firmar los elementos enviados debe estar aceptada por la
máquina remota. Del mismo modo, la clave usada por la máquina remota para
firmar los elementos recibidos debe estar en @file{/etc/guix/acl} de modo
que sea aceptada por su propio daemon. @xref{Invocación de guix archive}, para
más información sobre la verificación de elementos del almacén.

La sintaxis general es:

@example
guix copy [--to=@var{spec}|--from=@var{spec}] @var{elementos}@dots{}
@end example

Siempre debe especificar una de las siguientes opciones:

@table @code
@item --to=@var{spec}
@itemx --from=@var{spec}
Especifica la máquina a la que mandar o desde la que recibir.  @var{spec}
debe ser una especificación SSH como @code{example.org},
@code{carlos@@example.org}, or @code{carlos@@example.org:2222}.
@end table

Los @var{elementos} pueden ser tanto nombres de paquetes, como @code{gimp},
como elementos del almacén, como @file{/gnu/store/@dots{}-idutils-4.6}.

Cuando se especifica el nombre del paquete a enviar, primero se construye si
es necesario, a menos que se use @option{--dry-run}. Se aceptan las opciones
comunes de construcción (@pxref{Opciones comunes de construcción}).


@node Invocación de guix container
@section Invocación de @command{guix container}
@cindex container
@cindex @command{guix container}
@quotation Nota
En la versión @value{VERSION}, esta herramienta es experimental. La interfaz
está sujeta a cambios radicales en el futuro.
@end quotation

El propósito de @command{guix container} es la manipulación de procesos en
ejecución dentro de entornos aislados, normalmente conocido como un
``contenedor'', típicamente creado por las órdenes @command{guix
environment} (@pxref{Invocación de guix environment}) y @command{guix system
container} (@pxref{Invocación de guix system}).

La sintaxis general es:

@example
guix container @var{acción} @var{opciones}@dots{}
@end example

@var{acción} especifica la operación a realizar con el contenedor, y
@var{opcines} especifica los parámetros específicos del contexto para la
acción.

Las siguientes acciones están disponibles:

@table @code
@item exec
Ejecute una orden en el contexto de un contenedor en ejecución.

La sintaxis es:

@example
guix container exec @var{pid} @var{programa} @var{parámetros}@dots{}
@end example

@var{pid} especifica el ID del proceso del contenedor en
ejecución. @var{programa} especifica el nombre del fichero ejecutable dentro
del sistema de ficheros raíz del contenedor. @var{parámetros} son opciones
adicionales que se pasarán a @var{programa}.

La siguiente orden lanza un shell interactivo de ingreso al sistema dentro
de un contenedor del sistema, iniciado por @command{guix system container},
y cuyo ID de proceso es 9001:

@example
guix container exec 9001 /run/current-system/profile/bin/bash --login
@end example

Fíjese que el @var{pid} no puede ser el proceso creador del contenedor. Debe
ser el PID 1 del contenedor o uno de sus procesos hijos.

@end table

@node Invocación de guix weather
@section Invocación de @command{guix weather}

De manera ocasional tendrá un mal día al no estar las sustituciones
disponibles y le toque construir los paquetes a usted misma
(@pxref{Sustituciones}). La orden @command{guix weather} informa de la
disponibilidad de sustituciones en los servidores especificados de modo que
pueda tener una idea sobre cómo será su día hoy. A veces puede ser una
información útil como usuaria, pero es principalmente útil para quienes
ejecuten @command{guix publish} (@pxref{Invocación de guix publish}).

@cindex estadísticas, para sustituciones
@cindex disponibilidad de sustituciones
@cindex disponibilidad de sustituciones
@cindex weather, disponibilidad de sustituciones
Esta es una ejecución de ejemplo:

@example
$ guix weather --substitute-urls=https://guix.example.org
computing 5,872 package derivations for x86_64-linux...
looking for 6,128 store items on https://guix.example.org..
updating list of substitutes from 'https://guix.example.org'... 100.0%
https://guix.example.org
  43.4% substitutes available (2,658 out of 6,128)
  7,032.5 MiB of nars (compressed)
  19,824.2 MiB on disk (uncompressed)
  0.030 seconds per request (182.9 seconds in total)
  33.5 requests per second

  9.8% (342 out of 3,470) of the missing items are queued
  867 queued builds
      x86_64-linux: 518 (59.7%)
      i686-linux: 221 (25.5%)
      aarch64-linux: 128 (14.8%)
  build rate: 23.41 builds per hour
      x86_64-linux: 11.16 builds per hour
      i686-linux: 6.03 builds per hour
      aarch64-linux: 6.41 builds per hour
@end example

@cindex integración continua, estadísticas
Como puede ver, informa de la fracción de todos los paquetes para los cuales
hay sustituciones en el servidor---independientemente de que las
sustituciones estén activadas, e independientemente de si la clave de firma
del servidor está autorizada. También informa del tamaño de los archivos
comprimidos (``nar'') proporcionados por el servidor, el tamaño que los
elementos correspondientes del almacén ocupan en el almacén (asumiendo que
la deduplicación está apagada) y el caudal de proceso del servidor. La
segunda parte proporciona estadísticas de integración continua (CI), si el
servidor lo permite. Además, mediante el uso de la opción
@option{--coverage}, @command{guix weather} puede enumerar sustituciones de
paquetes ``importantes'' que no se encuentren en el servidor (véase más
adelante).

Para conseguirlo, @command{guix weather} consulta los metadatos HTTP(S)
(@dfn{narinfo}s) de todos los elementos relevantes del almacén. Como
@command{guix challenge}, ignora las firmas en esas sustituciones, lo cual
es inocuo puesto que la orden únicamente obtiene estadísticas y no puede
instalar esas sustituciones.

La sintaxis general es:

@example
guix weather @var{opciones}@dots{} [@var{paquetes}@dots{}]
@end example

Cuando se omite @var{paquetes}, @command{guix weather} comprueba la
disponibilidad de sustituciones para @emph{todos} los paquetes, o para
aquellos especificados con la opción @option{--manifest}; en otro caso
considera únicamente los paquetes especificados. También es posible
consultar tipos de sistema específicos con @option{--system}. @command{guix
weather} termina con un código de salida distinto a cero cuando la fracción
de sustituciones disponibles se encuentra por debajo del 100%.

Las opciones disponibles se enumeran a continuación.

@table @code
@item --substitute-urls=@var{urls}
@var{urls} es la lista separada por espacios de URL de servidores de
sustituciones a consultar. Cuando se omite esta opción, el conjunto
predeterminado de servidores de sustituciones es el consultado.

@item --system=@var{sistema}
@itemx -s @var{sistema}
Consulta sustituciones para @var{sistema}---por ejemplo,
@code{aarch64-linux}. Esta opción se puede repetir, en cuyo caso
@command{guix weather} consultará las sustituciones para varios tipos de
sistema.

@item --manifest=@var{fichero}
En vez de consultar las sustituciones de todos los paquetes, consulta
únicamente los especificados en @var{fichero}. @var{fichero} debe contener
un @dfn{manifiesto}, como el usado en la opción @code{-m} de @command{guix
package} (@pxref{Invocación de guix package}).

Esta opción puede repetirse varias veces, en cuyo caso los manifiestos se
concatenan.

@item --coverage[=@var{numero}]
@itemx -c [@var{numero}]
Informa de la cobertura de sustituciones para paquetes: enumera paquetes con
al menos @var{número} dependientes (cero por omisión) para los cuales no
haya sustituciones disponibles. Los paquetes dependientes en sí no se
enumeran: si @var{b} depende de @var{a} y @var{a} no tiene sustituciones
disponibles, únicamente se muestra @var{a}, aunque @var{b} normalmente no
tenga sustituciones tampoco. El resultado es más o menos así:

@example
$ guix weather --substitute-urls=@value{SUBSTITUTE-URL} -c 10
calculando 8.983 derivaciones de paquete para x86_64-linux...
buscando 9.343 elementos del almacén en @value{SUBSTITUTE-URL}...
actualizando sustituciones desde '@value{SUBSTITUTE-URL}'... 100.0%
@value{SUBSTITUTE-URL}
  64,7% sustituciones disponibles (6.047 de 9.343)
@dots{}
Faltan 2502 paquetes de '@value{SUBSTITUTE-URL}' para 'x86_64-linux', entre los cuales:
    58  kcoreaddons@@5.49.0      /gnu/store/@dots{}-kcoreaddons-5.49.0
    46  qgpgme@@1.11.1           /gnu/store/@dots{}-qgpgme-1.11.1
    37  perl-http-cookiejar@@0.008  /gnu/store/@dots{}-perl-http-cookiejar-0.008
    @dots{}
@end example

Lo que este ejemplo muestra es que @code{kcoreaddons} y presumiblemente los
58 paquetes que dependen de él no tienen sustituciones disponibles en
@code{ci.guix.es.info}; del mismo modo que @code{qgpgme} y los 46 paquetes que
dependen de él.

Si es una desarrolladora Guix, o si se encuentra a cargo de esta granja de
construcción, probablemente quiera inspeccionar estos paquetes con más
detalle: simplemente puede que su construcción falle.

@item --display-missing
Muestra los elementos del almacén para los que faltan las sustituciones.
@end table

@node Invocación de guix processes
@section Invocación de @command{guix processes}

La orden @command{guix processes} puede ser útil a desarrolladoras y
administradoras de sistemas, especialmente en máquinas multiusuaria y en
granjas de construcción: enumera las sesiones actuales (conexiones al
daemon), así como información sobre los procesos envueltos@footnote{Las
sesiones remotas, cuando @command{guix-daemon} se ha iniciado con
@option{--listen} especificando un punto de conexión TCP, @emph{no} son
enumeradas.}. A continuación puede verse un ejemplo de la información que
devuelve:

@example
$ sudo guix processes
SessionPID: 19002
ClientPID: 19090
ClientCommand: guix environment --ad-hoc python

SessionPID: 19402
ClientPID: 19367
ClientCommand: guix publish -u guix-publish -p 3000 -C 9 @dots{}

SessionPID: 19444
ClientPID: 19419
ClientCommand: cuirass --cache-directory /var/cache/cuirass @dots{}
LockHeld: /gnu/store/@dots{}-perl-ipc-cmd-0.96.lock
LockHeld: /gnu/store/@dots{}-python-six-bootstrap-1.11.0.lock
LockHeld: /gnu/store/@dots{}-libjpeg-turbo-2.0.0.lock
ChildProcess: 20495: guix offload x86_64-linux 7200 1 28800
ChildProcess: 27733: guix offload x86_64-linux 7200 1 28800
ChildProcess: 27793: guix offload x86_64-linux 7200 1 28800
@end example

En este ejemplo vemos que @command{guix-daemon} tiene tres clientes:
@command{guix environment}, @command{guix publish} y la herramienta de
integración continua Cuirass; sus identificadores de proceso (PID) se
muestran en el campo @code{ClientPID}. El campo @code{SessionPID}
proporciona el PID del subproceso de @command{guix-daemon} de cada sesión en
particular.

The @code{LockHeld} fields show which store items are currently locked by
this session, which corresponds to store items being built or substituted
(the @code{LockHeld} field is not displayed when @command{guix processes} is
not running as root).  Last, by looking at the @code{ChildProcess} field, we
understand that these three builds are being offloaded (@pxref{Configuración de delegación del daemon}).

La salida está en formato Recutils por lo que podemos usar la útil orden
@command{recsel} para seleccionar sesiones de interés (@pxref{Selection
Expressions,,, recutils, GNU recutils manual}). Como un ejemplo, la
siguiente orden muestra la línea de órdenes y el PID del cliente que inició
la construcción de un paquete Perl:

@example
$ sudo guix processes | \
    recsel -p ClientPID,ClientCommand -e 'LockHeld ~ "perl"'
ClientPID: 19419
ClientCommand: cuirass --cache-directory /var/cache/cuirass @dots{}
@end example

@node Configuración del sistema
@chapter Configuración del sistema

@cindex configuración del sistema
El sistema Guix permite un mecanismo de configuración del sistema completo
consistente. Con esto queremos decir que todos los aspectos de la
configuración global del sistema---como los servicios disponibles, la zona
horaria y la configuración de localización, las cuentas de usuarias---se
declaran en un lugar único. Dicha @dfn{configuración del sistema} puede ser
@dfn{instanciada}---es decir, hecha efectiva.

@c Yes, we're talking of Puppet, Chef, & co. here.  ↑
Una de las ventajas de poner toda la configuración del sistema bajo el
control de Guix es que permite actualizaciones transaccionales del sistema,
y hace posible volver a una instanciación previa del sistema, en caso de que
haya algún problema con la nueva (@pxref{Características}). Otra ventaja es que
hace fácil replicar exactamente la misma configuración entre máquinas
diferentes, o en diferentes momentos, sin tener que utilizar herramientas de
administración adicionales sobre las propias herramientas del sistema.

Esta sección describe este mecanismo. Primero nos enfocaremos en el punto de
vista de la administradora del sistema---explicando cómo se configura e
instancia el sistema. Después mostraremos cómo puede extenderse este
mecanismo, por ejemplo para añadir nuevos servicios del sistema.

@menu
* Uso de la configuración del sistema::  Personalizar su sistema GNU.
* Referencia de operating-system::  Detalle de las declaraciones de sistema 
                                      operativo.
* Sistemas de ficheros::     Configurar el montaje de sistemas de ficheros.
* Dispositivos traducidos::  Procesamiento adicional de dispositivos de 
                               bloques.
* Cuentas de usuaria::       Especificar las cuentas de usuaria.
* Distribución de teclado::  Cómo interpreta el sistema las pulsaciones 
                                del teclado.
* Localizaciones::           Configuración de idioma y convenciones 
                               culturales.
* Servicios::                Especificar los servicios del sistema.
* Programas con setuid::     Programas que se ejecutan con privilegios de 
                               root.
* Certificados X.509::       Verificar servidores HTTPS.
* Selector de servicios de nombres::  Configurar el selector de servicios de 
                                        nombres de libc.
* Disco en RAM inicial::     Arranque de Linux-Libre.
* Configuración del gestor de arranque::  Configurar el gestor de arranque.
* Invocación de guix system::  Instanciar una configuración del sistema.
* Invocación de guix deploy::  Despliegue de una configuración del sistema 
                                  en una máquina remota.
* Ejecutar Guix en una máquina virtual::  Cómo ejecutar el sistema Guix en 
                                             una máquina virtual.
* Definición de servicios::  Añadir nuevas definiciones de servicios.
@end menu

@node Uso de la configuración del sistema
@section Uso de la configuración del sistema

El sistema operativo se configura proporcionando una declaración
@code{operating-system} en un fichero que pueda ser proporcionado a la orden
@command{guix system} (@pxref{Invocación de guix system}). Una configuración
simple, con los servicios predeterminados del sistema, el núcleo Linux-Libre
predeterminado, un disco de RAM inicial y un cargador de arranque puede ser
como sigue:

@findex operating-system
@lisp
@include os-config-bare-bones.texi
@end lisp

Este ejemplo debería ser auto-descriptivo. Algunos de los campos definidos
anteriormente, como @code{host-name} y @code{bootloader}, son
necesarios. Otros como @code{packages} y @code{services}, pueden omitirse,
en cuyo caso obtienen un valor por defecto.

Más adelante se muestran los efectos de algunos de los campos más
importantes (@pxref{Referencia de operating-system}, para detalles acerca de
todos los campos disponibles), y cómo @dfn{instanciar} el sistema operativo
usando @command{guix system}.

@unnumberedsubsec Cargador de arranque

@cindex arranque obsoleto, en máquinas Intel
@cindex arranque por BIOS, en máquinas Intel
@cindex arranque UEFI
@cindex arranque EFI
El campo @code{bootloader} describe el método que será usado para arrancar
su sistema. Las máquinas basadas en procesadores Intel pueden arrancar en el
``obsoleto'' modo BIOS, como en el ejemplo previo. No obstante, máquinas más
recientes usan la @dfn{Interfaz Unificada Extensible de Firmware} (UEFI)
para arrancar. En ese caso, el capo @code{bootloader} debe contener algo
parecido a esto:

@lisp
(bootloader-configuration
  (bootloader grub-efi-bootloader)
  (target "/boot/efi"))
@end lisp

@xref{Configuración del gestor de arranque}, para más información sobre las opciones de
configuración disponibles.

@unnumberedsubsec Paquetes visibles globalmente

@vindex %base-packages
The @code{packages} field lists packages that will be globally visible on
the system, for all user accounts---i.e., in every user's @env{PATH}
environment variable---in addition to the per-user profiles (@pxref{Invocación de guix package}).  The @code{%base-packages} variable provides all the tools
one would expect for basic user and administrator tasks---including the GNU
Core Utilities, the GNU Networking Utilities, the GNU Zile lightweight text
editor, @command{find}, @command{grep}, etc.  The example above adds
GNU@tie{}Screen to those, taken from the @code{(gnu packages screen)} module
(@pxref{Módulos de paquetes}).  The @code{(list package output)} syntax can be
used to add a specific output of a package:

@lisp
(use-modules (gnu packages))
(use-modules (gnu packages dns))

(operating-system
  ;; ...
  (packages (cons (list bind "utils")
                  %base-packages)))
@end lisp

@findex specification->package
Referirse a los paquetes por nombre de variable, como antes a @code{bind},
tiene la ventaja de evitar ambigüedades; también permite que errores
tipográficos y demás obtengan un diagnóstico directo como ``variables sin
definir''. La parte problemática es que se necesita conocer qué módulo
define qué paquete, y aumentar adecuadamente la línea de
@code{use-package-modules}. Para evitar esto, se puede usar el procedimiento
@code{specification->package} del módulo @code{(gnu packages)}, que devuelve
el mejor paquete para un nombre dado, o nombre y versión:

@lisp
(use-modules (gnu packages))

(operating-system
  ;; ...
  (packages (append (map specification->package
                         '("tcpdump" "htop" "gnupg@@2.0"))
                    %base-packages)))
@end lisp

@unnumberedsubsec Servicios del sistema

@cindex services
@vindex %base-services
El campo @code{services} enumera los @dfn{servicios del sistema} disponibles
cuando el sistema arranque (@pxref{Servicios}). La declaración
@code{operating-system} previa especifica que, además de los servicios
básicos, queremos que el daemon de shell seguro OpenSSH espere conexiones
por el puerto 2222 (@pxref{Servicios de red,
@code{openssh-service-type}}). En su implementación,
@code{openssh-service-type} prepara todo para que @code{sshd} se inicie con
las opciones de la línea de órdenes adecuadas, posiblemente generando bajo
demanda los ficheros de configuración necesarios (@pxref{Definición de servicios}).

@cindex personalización, de servicios
@findex modify-services
De manera ocasional, en vez de usar los servicios básicos tal y como vienen,
puede querer personalizarlos. Para hacerlo, use @code{modify-services}
(@pxref{Referencia de servicios, @code{modify-services}}) para modificar la lista.

Por ejemplo, supongamos que quiere modificar @code{guix-daemon} y Mingetty
(el punto de acceso al sistema por consola) en la lista
@code{%base-services} (@pxref{Servicios base, @code{%base-services}}). Para
hacerlo, puede escribir lo siguiente en su declaración de sistema operativo:

@lisp
(define %mis-servicios
  ;; Mi propia lista de servicios
  (modify-services %base-services
    (guix-service-type config =>
                       (guix-configuration
                        (inherit config)
                        (use-substitutes? #f)
                        (extra-options '("--gc-keep-derivations"))))
    (mingetty-service-type config =>
                           (mingetty-configuration
                            (inherit config)))))

(operating-system
  ;; @dots{}
  (services %mis-servicios))
@end lisp

Esto modifica la configuración---es decir, los parámetros de los
servicios---de la instancia @code{guix-service-type}, y de todas las
instancias de @code{mingetty-service-type} en la lista
@code{%base-services}. Observe cómo se consigue: primero, enlazamos la
configuración actual al identificador @code{config} en el @var{cuerpo}, y
entonces escribimos el @var{cuerpo} de manera que evalúe a la configuración
deseada. En particular, fíjese como se usa @code{inherit} para crear una
nueva configuración que tiene los mismos valores que la configuración
antigua, pero con unas pocas modificaciones.

@cindex disco cifrado
La configuración para un uso típico de ``escritorio'', con una partición de
raíz cifrada, el servidor gráfico X11, GNOME y Xfce (las usuarias pueden
escoger cual de estos entornos de escritorio usarán en la pantalla de inicio
de sesión pulsando @kbd{F1}), gestión de red, gestión de energía y más,
podría ser así:

@lisp
@include os-config-desktop.texi
@end lisp

Un sistema gráfico con una selección de gestores de ventanas ligeros en vez
de entornos de escritorio completos podría ser así:

@lisp
@include os-config-lightweight-desktop.texi
@end lisp

Este ejemplo se refiere al sistema de ficheros @file{/boot/efi} por su UUID
@code{1234-ABCD}. Substituya este UUID con el UUID correcto en su sistema,
como el devuelto por la orden @command{blkid}.

@xref{Servicios de escritorio}, para la lista exacta de servicios proporcionados
por @code{%desktop-services}. @xref{Certificados X.509}, para información
sobre el paquete @code{nss-certs} usado aquí.

De nuevo, @code{%desktop-services} es simplemente una lista de objetos de
servicios. Si desea borrar servicios de aquí, puede hacerlo usando
procedimientos de filtrado de listas (@pxref{SRFI-1 Filtering and
Partitioning,,, guile, GNU Guile Reference Manual}). Por ejemplo, la
siguiente expresión devuelve una lista que contiene todos los servicios en
@code{%desktop-services} excepto el servicio Avahi:

@lisp
(remove (lambda (service)
          (eq? (service-kind service) avahi-service-type))
        %desktop-services)
@end lisp

@unnumberedsubsec Instanciación del sistema

Asumiendo que la declaración de @code{operating-system} se encuentra en el
fichero @file{mi-configuración-del-sistema.scm}, la orden @command{guix
system mi-conf-del-sistema.scm} instancia esa configuración, y la convierte
en la entrada predeterminada de GRUB en el arranque (@pxref{Invocación de guix system}).

La manera habitual de cambiar la configuración del sistema es actualizar
este fichero y volver a ejecutar @command{guix system reconfigure}. Nunca se
deberían tocar los ficheros en @file{/etc} o ejecutar órdenes que modifiquen
el estado del sistema como @command{useradd} o @command{grub-install}. De
hecho, debe evitarlo ya que no únicamente anularía su garantía sino que
también le impediría volver a una versión previa de su sistema, en caso de
necesitarlo.

@cindex vuelta-atrás, del sistema operativo
Hablando de vuelta atrás, cada vez que ejecuta @command{guix system
reconfigure} se crea una nueva @dfn{generación} del sistema---sin modificar
o borrar generaciones previas. Las generaciones previas tienen una entrada
en el menú del cargador de arranque, lo que permite arrancarlas en caso de
que algo funcionase mal en las últimas generaciones. Tranquilizador, ¿no? La
orden @command{guix system list-generations} enumera las generaciones del
sistema disponibles en el disco. Es también posible volver a una versión
previa con las órdenes @command{guix system roll-back} y @command{guix
system switch-generation}.

Aunque la orden @command{guix system reconfigure} no modificará las
generaciones previas, debe tener cuidado cuando la generación actual no es
la última (por ejemplo, después de invocar @command{guix system roll-back}),
ya que la operación puede sobreescribir una generación posterior
(@pxref{Invocación de guix system}).

@unnumberedsubsec La interfaz programática

A nivel Scheme, el grueso de una declaración @code{operating-system} se
instancia con el siguiente procedimiento monádico (@pxref{La mónada del almacén}):

@deffn {Procedimiento monádico} operating-system-derivation so
Devuelve una derivación que construye @var{so}, un objeto
@code{operating-system} (@pxref{Derivaciones}).

La salida de la derivación es un único directorio que hace referencia a
todos los paquetes, ficheros de configuración y otros ficheros auxiliares
necesarios para instanciar @var{so}.
@end deffn

Este procedimiento se proporciona por el módulo @code{(gnu system)}. Junto
con @code{(gnu services)} (@pxref{Servicios}), este módulo contiene los
entresijos del sistema Guix. ¡Asegúrese de echarle un vistazo!


@node Referencia de operating-system
@section Referencia de @code{operating-system}

Esta sección resume todas las opciones disponibles en las declaraciones de
@code{operating-system} (@pxref{Uso de la configuración del sistema}).

@deftp {Tipo de datos} operating-system
Este es el tipo de datos que representa la configuración del sistema
operativo. Con ello queremos decir toda la configuración global del sistema,
no la configuración específica de las usuarias (@pxref{Uso de la configuración del sistema}).

@table @asis
@item @code{kernel} (default: @code{linux-libre})
The package object of the operating system kernel to use@footnote{Currently
only the Linux-libre kernel is fully supported.  Using GNU@tie{}mach in
combination with a @code{hurd} is experimental and only available when
building a vm-image.}.

@cindex hurd
@item @code{hurd} (default: @code{#f})
The hurd to be started by the kernel.  This is required to build an
experimental vm-image for the Hurd and requires using @code{kernel}
GNU@tie{}mach as well as other specific operating system overrides.

@item @code{kernel-loadable-modules} (predeterminados: @code{'()})
Una lista de objetos (habitualmente paquetes) desde los que se obtendrán los
módulos del núcleo--por ejemplo @code{(list ddcci-driver-linux)}.

@item @code{kernel-arguments} (default: @code{%default-kernel-arguments})
Lista de cadenas o expresiones-G que representan parámetros adicionales a
pasar en la línea de órdenes del núcleo---por ejemplo,
@code{("console=ttyS0")}.

@item @code{bootloader}
El objeto de configuración del cargador de arranque del
sistema. @xref{Configuración del gestor de arranque}.

@item @code{label}
Es una etiqueta (una cadena) con la que aparecerá en el menú del cargador de
arranque. La etiqueta predeterminada incluye el nombre y la versión del
núcleo.

@item @code{keyboard-layout} (predeterminada: @code{#f})
Este campo especifica la distribución de teclado usada para la
consola. Puede ser o bien @code{#f}, en cuyo caso se usa la distribución
predeterminada (normalmente Inglés de EEUU), o un registro
@code{<keyboard-layout>}.

Esta distribución de teclado se hace efectiva tan pronto el núcleo haya
arrancado. Por ejemplo, la distribución de teclado está en efecto cuando
introduzca una contraseña si su sistema de ficheros raíz se encuentra en un
dispositivo traducido @code{luks-device-mapping} (@pxref{Dispositivos traducidos}).

@quotation Nota
Esto @emph{no} especifica la distribución de teclado usada por el cargador
de arranque, ni tampoco la usada por el servidor gráfico. @xref{Configuración del gestor de arranque}, para información sobre cómo especificar la distribución de
teclado del cargador de arranque. @xref{Sistema X Window}, para información sobre
cómo especificar la distribución de teclado usada por el sistema de ventanas
X.
@end quotation

@item @code{initrd-modules} (predeterminados: @code{%base-initrd-modules})
@cindex initrd
@cindex disco inicial de RAM
La lista de módulos del núcleo Linux que deben estar disponibles en el disco
inicial de RAM. @xref{Disco en RAM inicial}.

@item @code{initrd} (predeterminado: @code{base-initrd})
Un procedimiento que devuelve un disco inicial de RAM para el núcleo
Linux. Este campo se proporciona para permitir personalizaciones de bajo
nivel y no debería ser necesario para un uso habitual. @xref{Disco en RAM inicial}.

@item @code{firmware} (predeterminado: @code{%base-firmware})
@cindex firmware
Lista de paquetes de firmware que pueden ser cargados por el núcleo del
sistema operativo.

El valor predeterminado incluye el firmware necesario para dispositivos WiFi
basados en Atheros y Broadcom (módulos Linux-libre @code{ath9k} y
@code{b43-open}, respectivamente). @xref{Consideraciones sobre el hardware}, para más
información sobre hardware soportado.

@item @code{host-name}
El nombre de la máquina.

@item @code{hosts-file}
@cindex el fichero hosts
Un objeto tipo-fichero (@pxref{Expresiones-G, objetos ``tipo-fichero''})
para ser usado como @file{/etc/hosts} (@pxref{Host Names,,, libc, The GNU C
Library Reference Manual}). El predeterminado es un fichero con entradas
para @code{localhost} y @var{host-name}.

@item @code{mapped-devices} (predeterminados: @code{'()})
Una lista de dispositivos traducidos. @xref{Dispositivos traducidos}.

@item @code{file-systems}
Una lista de sistemas de ficheros. @xref{Sistemas de ficheros}.

@item @code{swap-devices} (predeterminados: @code{'()})
@cindex dispositivos de intercambio
Una lista de cadenas que identifiquen dispositivos o ficheros usados como
``espacio de intercambio'' (@pxref{Memory Concepts,,, libc, The GNU C
Library Reference Manual}). Por ejemplo @code{'("/dev/sda3")} o
@code{'("/fichero-intercambio")}. Es posible especificar un fichero de
intercambio en un sistema de ficheros en un dispositivo traducido, siempre
que la traducción y el sistema de ficheros se especifiquen
también. @xref{Dispositivos traducidos} y @ref{Sistemas de ficheros}.

@item @code{users} (predeterminadas: @code{%base-user-accounts})
@itemx @code{groups} (predeterminados: @code{%base-groups})
Lista de cuentas de usuaria y grupos. @xref{Cuentas de usuaria}.

Si la lista de @code{usuarias} carece de una cuenta de usuaria con
UID@tie{}0, una cuenta ``root'' con UID@tie{}0 se añade automáticamente.

@item @code{skeletons} (predeterminados: @code{(default-skeletons)})
Una lista de tuplas de nombre de fichero de destino/objeto tipo-fichero
(@pxref{Expresiones-G, objetos ``tipo-fichero''}). Estos son los ficheros de
esqueleto que se añadirán al directorio de las cuentas de usuaria que se
creen.

Por ejemplo, un valor válido puede parecer algo así:

@lisp
`((".bashrc" ,(plain-file "bashrc" "echo Hola\n"))
  (".guile" ,(plain-file "guile"
                         "(use-modules (ice-9 readline))
                          (activate-readline)")))
@end lisp

@item @code{issue} (predeterminado: @code{%default-issue})
Una cadena que denota el contenido del fichero @file{/etc/issue}, que se
muestra cuando las usuarias ingresan al sistema en una consola de texto.

@item @code{packages} (predeterminados: @code{%base-packages})
El conjunto de paquetes instalados en el perfil global, que es accesible en
@file{/run/current-system/profile}.

El conjunto predeterminado incluye utilidades básicas y es una buena
práctica instalar utilidades no-básicas en los perfiles de las usuarias
(@pxref{Invocación de guix package}).

@item @code{timezone}
Una cadena que identifica la zona horaria---por ejemplo,
@code{"Europe/Paris"}.

Puede ejecutar la orden @command{tzselect} para encontrar qué cadena de zona
horaria corresponde con su región. Elegir una zona horaria no válida provoca
un fallo en @command{guix system}.

@item @code{locale} (predeterminado: @code{"en_US.utf8"})
El nombre de la localización predeterminada (@pxref{Locale Names,,, libc,
The GNU C Library Reference Manual}). @xref{Localizaciones}, para más información.

@item @code{locale-definitions} (predeterminadas: @code{%default-locale-definitions})
La lista de definiciones de localizaciones a compilar y que puede ser usada
en tiempo de ejecución. @xref{Localizaciones}.

@item @code{locale-libcs} (predeterminadas: @code{(list @var{glibc})})
La lista de paquetes GNU@tie{}libc cuyos datos de localización y
herramientas son usadas para las definiciones de
localizaciones. @xref{Localizaciones}, para consideraciones de compatibilidad que
justifican esta opción.

@item @code{name-service-switch} (predeterminado: @code{%default-nss})
Configuración del selector de servicios de nombres de libc (NSS)---un objeto
@code{<name-service-switch>}. @xref{Selector de servicios de nombres}, para detalles.

@item @code{services} (predeterminados: @code{%base-services})
Una lista de objetos service denotando los servicios del
sistema. @xref{Servicios}.

@cindex servicios esenciales
@item @code{essential-services} (predeterminados: ...)
La lista de ``servicios esenciales''---es decir, cosas como instancias de
@code{system-service-type} y @code{host-name-service-type} (@pxref{Referencia de servicios}), las cuales se derivan de su definición de sistema operativo en
sí. Como usuaria @emph{nunca} debería modificar este campo.

@item @code{pam-services} (predeterminados: @code{(base-pam-services)})
@cindex PAM
@cindex módulos de identificación conectables
@c FIXME: Add xref to PAM services section.
Servicios de los @dfn{módulos de identificación conectables} (PAM) de Linux.

@item @code{setuid-programs} (default: @code{%setuid-programs})
Lista de expresiones-G con valores de cadena que denotan los programas
setuid. @xref{Programas con setuid}.

@item @code{sudoers-file} (default: @code{%sudoers-specification})
@cindex fichero sudoers
El contenido de @file{/etc/sudoers} como un objeto tipo-fichero
(@pxref{Expresiones-G, @code{local-file} y @code{plain-file}}).

Este fichero especifica qué usuarias pueden usar la orden @command{sudo}, lo
que se les permite hacer y qué privilegios pueden obtener. El comportamiento
predefinido es que únicamente @code{root} y los miembros del grupo
@code{wheel} pueden usar @code{sudo}.

@end table

@deffn {Tipo de datos} this-operating-system
Cuando se usa en el @emph{ámbito léxico} de un campo de una definición de
sistema operativo, este identificador está enlazado al sistema operativo en
definición.

El siguiente ejemplo muestra cómo hacer referencia al sistema operativo en
definición en la definición del campo @code{label}:

@lisp
(use-modules (gnu) (guix))

(operating-system
  ;; ...
  (label (package-full-name
          (operating-system-kernel this-operating-system))))
@end lisp

Es un error hacer referencia a @code{this-operating-system} fuera de una
definición de sistema operativo.
@end deffn

@end deftp

@node Sistemas de ficheros
@section Sistemas de ficheros

La lista de sistemas de ficheros que deben montarse se especifica en el
campo @code{file-systems} de la declaración del sistema operativo
(@pxref{Uso de la configuración del sistema}). Cada sistema de ficheros se
declara usando la forma @code{file-system}, como en el siguiente ejemplo:

@lisp
(file-system
  (mount-point "/home")
  (device "/dev/sda3")
  (type "ext4"))
@end lisp

Como es habitual, algunos de los campos son obligatorios---aquellos
mostrados en el ejemplo previo---mientras que otros pueden omitirse. Se
describen a continuación.

@deftp {Tipo de datos} file-system
Objetos de este tipo representan los sistemas de ficheros a
montar. Contienen los siguientes campos:

@table @asis
@item @code{type}
Este campo es una cadena que especifica el tipo de sistema de ficheros---por
ejemplo, @code{"ext4"}.

@item @code{mount-point}
Designa la ruta donde el sistema de ficheros debe montarse.

@item @code{device}
Nombra la ``fuente'' del sistema de ficheros. Puede ser una de estas tres
opciones: una etiqueta de sistema de ficheros, un UUID de sistema de
ficheros o el nombre de un nodo @file{/dev}. Las etiquetas y UUID ofrecen
una forma de hacer referencia a sistemas de ficheros sin codificar su nombre
de dispositivo actual@footnote{Fíjese que, aunque es tentador usa
@file{/dev/disk/by-uuid} y nombres de dispositivo similares para obtener el
mismo resultado, no es lo recomendado: estos nodo especiales de dispositivos
se crean por el daemon udev y puede no estar disponible cuando el
dispositivo sea montado.}.

@findex file-system-label
Las etiquetas del sistema de ficheros se crean mediante el uso del
procedimiento @code{file-system-label}, los UUID se crean mediante el uso de
@code{uuid} y los nodos @file{/dev} son simples cadenas. A continuación se
proporciona un ejemplo de un sistema de ficheros al que se hace referencia
mediante su etiqueta, como es mostrada por la orden @command{e2label}:

@lisp
(file-system
  (mount-point "/home")
  (type "ext4")
  (device (file-system-label "mi-home")))
@end lisp

@findex uuid
Los UUID se convierten dede su representación en forma de cadena (como se
muestra con la orden @command{tune2fs -l}) mediante el uso de la forma
@code{uuid}@footnote{La forma @code{uuid} espera un UUID de 16 bytes como se
define en la @uref{https://tools.ietf.org/html/rfc4122, RFC@tie{}4122}. Este
es el formato de UUID que usan la familia de sistemas de ficheros ext2 y
otros, pero es diferente de los ``UUID'' de los sistemas de ficheros FAT,
por ejemplo.}, como sigue:

@lisp
(file-system
  (mount-point "/home")
  (type "ext4")
  (device (uuid "4dab5feb-d176-45de-b287-9b0a6e4c01cb")))
@end lisp

Cuando la fuente de un sistema de ficheros es un dispositivo traducido
(@pxref{Dispositivos traducidos}), su campo @code{device} @emph{debe} hacer
referencia al nombre del dispositivo traducido---por ejemplo,
@file{"/dev/mapper/particion-raiz"}. Esto es necesario para que el sistema
sepa que el montaje del sistema de ficheros depende del establecimiento de
la traducción de dispositivos correspondiente.

@item @code{flags} (predeterminadas: @code{'()})
Es una lista de símbolos que indican opciones del montado. Las opciones
reconocidas incluyen @code{read-only}@footnote{NdT: modo de sólo lectura.},
@code{bind-mount}@footnote{NdT: montaje enlazado.}, @code{no-dev}
(prohibición del acceso a ficheros especiales), @code{no-suid} (ignora los
bits setuid y setgid), @code{no-atime} (no actualiza la marca de tiempo del
acceso a ficheros), @code{strict-atime} (actualiza la marca de tiempo del
acceso a ficheros), @code{lazy-time} (únicamente actualiza la marca de
tiempo en la versión en memoria del nodo-i) y @code{no-exec} (no permite de
la ejecución de programas). @xref{Mount-Unmount-Remount,,, libc, The GNU C
Library Reference Manual}, para más información sobre estas opciones.

@item @code{options} (predeterminadas: @code{#f})
This is either @code{#f}, or a string denoting mount options passed to the
file system driver.  @xref{Mount-Unmount-Remount,,, libc, The GNU C Library
Reference Manual}, for details and run @command{man 8 mount} for options for
various file systems.  Note that the @code{file-system-options->alist} and
@code{alist->file-system-options} procedures from @code{(gnu system
file-systems)} can be used to convert file system options given as an
association list to the string representation, and vice-versa.

@item @code{mount?} (predeterminado: @code{#t})
Este valor indica si debe montarse el sistema de ficheros automáticamente al
iniciar el sistema. Cuando se establece como @code{#f}, el sistema de
ficheros tiene una entrada en @file{/etc/fstab} (el cual es leído por la
orden @command{mount}) pero no se montará automáticamente.

@item @code{needed-for-boot?} (predeterminado: @code{#f})
Este valor lógico indica si el sistema de ficheros es necesario para el
arranque. Si es verdadero, el sistema de ficheros se monta al cargar el
disco inicial de RAM (initrd). Este es siempre el caso, por ejemplo, para el
sistema de ficheros raíz.

@item @code{check?} (predeterminado: @code{#t})
Este valor lógico indica si el sistema de ficheros se debe comprobar en
busca de errores antes de montarse.

@item @code{create-mount-point?} (predeterminado: @code{#f})
Cuando es verdadero, el punto de montaje es creado si no existía
previamente.

@item @code{dependencies} (predeterminadas: @code{'()})
Una lista de objetos @code{<file-system>} o @code{<mapped-device>} que
representan sistemas de ficheros que deben montarse o dispositivos
traducidos que se deben abrir antes (y desmontar o cerrar después) que el
declarado.

Como ejemplo, considere la siguiente jerarquía de montajes:
@file{/sys/fs/cgroup} es una dependencia de @file{/sys/fs/cgroup/cpu} y
@file{/sys/fs/cgroup/memory}.

Otro ejemplo es un sistema de ficheros que depende de un dispositivo
traducido, por ejemplo una partición cifrada (@pxref{Dispositivos traducidos}).
@end table
@end deftp

El módulo @code{(gnu system file-systems)} exporta las siguientes variables
útiles.

@defvr {Variable Scheme} %base-file-systems
These are essential file systems that are required on normal systems, such
as @code{%pseudo-terminal-file-system} and @code{%immutable-store} (see
below).  Operating system declarations should always contain at least these.
@end defvr

@defvr {Variable Scheme} %pseudo-terminal-file-systems
El sistema de ficheros que debe montarse como @file{/dev/pts}. Permite la
creación de @dfn{pseudoterminales} a través de @code{openpty} y funciones
similares (@pxref{Pseudo-Terminals,,, libc, The GNU C Library Reference
Manual}). Los pseudoterminales son usados por emuladores de terminales como
@command{xterm}.
@end defvr

@defvr {Variable Scheme} %shared-memory-file-system
Este sistema de ficheros se monta como @file{/dev/shm} y se usa para
permitir el uso de memoria compartida entre procesos (@pxref{Memory-mapped
I/O, @code{shm_open},, libc, The GNU C Library Reference Manual}).
@end defvr

@defvr {Variable Scheme} %immutable-store
Este sistema de ficheros crea un montaje enlazado (``bind-mount'') de
@file{/gnu/store}, permitiendo solo el acceso de lectura para todas las
usuarias incluyendo a @code{root}. Esto previene modificaciones accidentales
por software que se ejecuta como @code{root} o por las administradoras del
sistema.

El daemon sí es capaz de escribir en el almacén: vuelve a montar
@file{/gnu/store} en modo lectura-escritura en su propio ``espacio de
nombres''.
@end defvr

@defvr {Variable Scheme} %binary-format-file-system
El sistema de ficheros @code{binfmt_misc}, que permite que el manejo de
tipos de ficheros ejecutables arbitrarios se delegue al espacio de
usuaria. Necesita la carga del módulo del núcleo @code{binfmt.ko}.
@end defvr

@defvr {Variable Scheme} %fuse-control-file-system
El sistema de ficheros @code{fusectl}, que permite a usuarias sin
privilegios montar y desmontar sistemas de ficheros de espacio de usuaria
FUSE. Necesita la carga del módulo del núcleo @code{fuse.ko}.
@end defvr

@node Btrfs file system
@subsection Btrfs file system

The Btrfs has special features, such as subvolumes, that merit being
explained in more details.  The following section attempts to cover basic as
well as complex uses of a Btrfs file system with the Guix System.

In its simplest usage, a Btrfs file system can be described, for example,
by:

@lisp
(file-system
  (mount-point "/home")
  (type "btrfs")
  (device (file-system-label "my-home")))
@end lisp

The example below is more complex, as it makes use of a Btrfs subvolume,
named @code{rootfs}.  The parent Btrfs file system is labeled
@code{my-btrfs-pool}, and is located on an encrypted device (hence the
dependency on @code{mapped-devices}):

@lisp
(file-system
  (device (file-system-label "my-btrfs-pool"))
  (mount-point "/")
  (type "btrfs")
  (options "subvol=rootfs")
  (dependencies mapped-devices))
@end lisp

Some bootloaders, for example GRUB, only mount a Btrfs partition at its top
level during the early boot, and rely on their configuration to refer to the
correct subvolume path within that top level.  The bootloaders operating in
this way typically produce their configuration on a running system where the
Btrfs partitions are already mounted and where the subvolume information is
readily available.  As an example, @command{grub-mkconfig}, the
configuration generator command shipped with GRUB, reads
@file{/proc/self/mountinfo} to determine the top-level path of a subvolume.

The Guix System produces a bootloader configuration using the operating
system configuration as its sole input; it is therefore necessary to extract
the subvolume name on which @file{/gnu/store} lives (if any)  from that
operating system configuration.  To better illustrate, consider a subvolume
named 'rootfs' which contains the root file system data.  In such situation,
the GRUB bootloader would only see the top level of the root Btrfs
partition, e.g.:

@example
/                   (top level)
├── rootfs          (subvolume directory)
    ├── gnu         (normal directory)
        ├── store   (normal directory)
[...]
@end example

Thus, the subvolume name must be prepended to the @file{/gnu/store} path of
the kernel, initrd binaries and any other files referred to in the GRUB
configuration that must be found during the early boot.

The next example shows a nested hierarchy of subvolumes and directories:

@example
/                   (top level)
├── rootfs          (subvolume)
    ├── gnu         (normal directory)
        ├── store   (subvolume)
[...]
@end example

This scenario would work without mounting the 'store' subvolume.  Mounting
'rootfs' is sufficient, since the subvolume name matches its intended mount
point in the file system hierarchy.  Alternatively, the 'store' subvolume
could be referred to by setting the @code{subvol} option to either
@code{/rootfs/gnu/store} or @code{rootfs/gnu/store}.

Finally, a more contrived example of nested subvolumes:

@example
/                           (top level)
├── root-snapshots          (subvolume)
    ├── root-current        (subvolume)
        ├── guix-store      (subvolume)
[...]
@end example

Here, the 'guix-store' subvolume doesn't match its intended mount point, so
it is necessary to mount it.  The subvolume must be fully specified, by
passing its file name to the @code{subvol} option.  To illustrate, the
'guix-store' subvolume could be mounted on @file{/gnu/store} by using a file
system declaration such as:

@lisp
(file-system
  (device (file-system-label "btrfs-pool-1"))
  (mount-point "/gnu/store")
  (type "btrfs")
  (options "subvol=root-snapshots/root-current/guix-store,\
compress-force=zstd,space_cache=v2"))
@end lisp

@node Dispositivos traducidos
@section Dispositivos traducidos

@cindex traducción de dispositivos
@cindex dispositivos traducidos
El núcleo Linux tiene una noción de @dfn{traducción de dispositivos}: un
dispositivo de bloques, como una partición de disco duro, puede
@dfn{traducirse} en otro dispositivo, habitualmente en @code{/dev/mapper/},
con un procesamiento adicional sobre los datos que fluyen a través de
ella@footnote{Fíjese que GNU@tie{}Hurd no diferencia entre el concepto de un
``dispositivo traducido'' y el de un sistema de ficheros: ambos se reducen a
@emph{traducir} operaciones de entrada/salida realizadas en un fichero a
operaciones en su almacenamiento subyacente. Por tanto, Hurd implementa
dispositivos traducidos, como sistemas de ficheros, usando el mecanismo
genérico de @dfn{traducción} (@pxref{Translators,,, hurd, The GNU Hurd
Reference Manual}).}. Un ejemplo típico es la traducción de dispositivos
para el cifrado: todas las escrituras en el dispositivo traducido se cifran,
y todas las lecturas se descifran, de forma transparente. Guix extiende esta
noción considerando cualquier dispositivo o conjunto de dispositivos que son
@dfn{transformados} de alguna manera para crear un nuevo dispositivo; por
ejemplo, los dispositivos RAID se obtienen @dfn{ensamblando} otros
dispositivos, como discos duros o particiones, en uno nuevo que se comporta
como una partición. Otros ejemplos, todavía no implementados, son los
volúmenes lógicos LVM.

Los dispositivos traducidos se declaran mediante el uso de la forma
@code{mapped-device}, definida a continuación; ejemplos más adelante.

@deftp {Tipo de datos} mapped-device
Objetos de este tipo representan traducciones de dispositivo que se llevarán
a cabo cuando el sistema arranque.

@table @code
@item source
Puede ser tanto una cadena que especifica el nombre de un dispositivo de
bloques a traducir, como @code{"/dev/sda3"}, o una lista de dichas cadenas
cuando varios dispositivos necesitan ser ensamblados para crear uno nuevo.

@item target
Esta cadena especifica el nombre del dispositivo traducido resultante. Para
traductores del núcleo como dispositivos de cifrado del tipo
@code{luks-device-mapping}, especificar @code{"mi-particion"} produce la
creación del dispositivo @code{"/dev/mapper/mi-particion"}. Para
dispositivos RAID de tipo @code{raid-device-mapping}, el nombre del
dispositivo completo como @code{"/dev/md0"} debe ser proporcionado.

@item type
Debe ser un objeto @code{mapped-device-kind}, que especifica cómo
@var{source} se traduce a @var{target}.
@end table
@end deftp

@defvr {Variable Scheme} luks-device-mapping
Define el cifrado de bloques LUKS mediante el uso de la orden
@command{cryptsetup} del paquete del mismo nombre. Depende del módulo
@code{dm-crypt} del núcleo Linux.
@end defvr

@defvr {Variable Scheme} raid-device-mapping
Define un dispositivo RAID, el cual se ensambla mediante el uso de la orden
@code{mdadm} del paquete del mismo nombre. Requiere la carga del módulo del
núcleo Linux para el nivel RAID apropiado, como @code{raid456} para RAID-4,
RAID-5 o RAID-6, o @code{raid10} para RAID-10.
@end defvr

@cindex cifrado de disco
@cindex LUKS
El siguiente ejemplo especifica una traducción de @file{/dev/sda3} a
@file{/dev/mapper/home} mediante el uso de LUKS---la
@url{https://gitlab.com/cryptsetup/cryptsetup,configuración de claves
unificada de Linux}, un mecanismo estándar para cifrado de disco. El
dispositivo @file{/dev/mapper/home} puede usarse entonces como el campo
@code{device} de una declaración @code{file-system} (@pxref{Sistemas de ficheros}).

@lisp
(mapped-device
  (source "/dev/sda3")
  (target "home")
  (type luks-device-mapping))
@end lisp

De manera alternativa, para independizarse de la numeración de dispositivos,
puede obtenerse el UUID LUKS (@dfn{identificador único}) del dispositivo
fuente con una orden así:

@example
cryptsetup luksUUID /dev/sda3
@end example

y usarlo como sigue:

@lisp
(mapped-device
  (source (uuid "cb67fc72-0d54-4c88-9d4b-b225f30b0f44"))
  (target "home")
  (type luks-device-mapping))
@end lisp

@cindex cifrado del intercambio
También es deseable cifrar el espacio de intercambio, puesto que el espacio
de intercambio puede contener información sensible. Una forma de conseguirlo
es usar un fichero de intercambio en un sistema de ficheros en un
dispositivo traducido a través del cifrado LUKS. @xref{Preparación para la instalación,,Particionado del disco}, para un ejemplo.

Un dispositivo RAID formado por las particiones @file{/dev/sda1} y
@file{/dev/sdb1} puede declararse como se muestra a continuación:

@lisp
(mapped-device
  (source (list "/dev/sda1" "/dev/sdb1"))
  (target "/dev/md0")
  (type raid-device-mapping))
@end lisp

El dispositivo @file{/dev/md0} puede usarse entonces como el campo
@code{device} de una declaración @code{file-system} (@pxref{Sistemas de ficheros}). Fíjese que no necesita proporcionar el nivel RAID; se selecciona
durante la creación inicial y formato del dispositivo RAID y después se
determina automáticamente.


@node Cuentas de usuaria
@section Cuentas de usuaria

@cindex usuarias
@cindex cuentas
@cindex cuentas de usuaria
Los grupos y cuentas de usuaria se gestionan completamente a través de la
declaración @code{operating-system}. Se especifican con las formas
@code{user-account} y @code{user-group}:

@lisp
(user-account
  (name "alicia")
  (group "users")
  (supplementary-groups '("wheel"   ;permite usar sudo, etc.
                          "audio"   ;tarjeta de sonido
                          "video"   ;dispositivos de vídeo como cámaras
                          "cdrom")) ;el veterano CD-ROM
  (comment "hermana de Roberto")
  (home-directory "/home/alicia"))
@end lisp

Durante el arranque o tras la finalización de @command{guix system
reconfigure}, el sistema se asegura de que únicamente las cuentas de usuaria
y grupos especificados en la declaración @code{operating-system} existen, y
con las propiedades especificadas. Por tanto, la creación o modificación de
cuentas o grupos realizadas directamente invocando órdenes como
@command{useradd} se pierden al reconfigurar o reiniciar el sistema. Esto
asegura que el sistema permanece exactamente como se declaró.

@deftp {Tipo de datos} user-account
Objetos de este tipo representan cuentas de usuaria. Los siguientes miembros
pueden ser especificados:

@table @asis
@item @code{name}
El nombre de la cuenta de usuaria.

@item @code{group}
@cindex grupos
Este es el nombre (una cadena) o identificador (un número) del grupo de
usuarias al que esta cuenta pertenece.

@item @code{supplementary-groups} (predeterminados: @code{'()})
Opcionalmente, esto puede definirse como una lista de nombres de grupo a los
que esta cuenta pertenece.

@item @code{uid} (predeterminado: @code{#f})
Este es el ID de usuaria para esta cuenta (un número), o @code{#f}. En el
último caso, un número es seleccionado automáticamente por el sistema cuando
la cuenta es creada.

@item @code{comment} (predeterminado: @code{""})
Un comentario sobre la cuenta, como el nombre completo de la propietaria.

@item @code{home-directory}
Este es el nombre del directorio de usuaria de la cuenta.

@item @code{create-home-directory?} (predeterminado: @code{#t})
Indica si el directorio de usuaria de esta cuenta debe ser creado si no
existe todavía.

@item @code{shell} (predeterminado: Bash)
Esto es una expresión-G denotando el nombre de fichero de un programa que
será usado como shell (@pxref{Expresiones-G}).

@item @code{system?} (predeterminado: @code{#f})
Este valor lógico indica si la cuenta es una cuenta ``del sistema''. Las
cuentas del sistema se tratan a veces de forma especial; por ejemplo, los
gestores gráficos de inicio no las enumeran.

@anchor{user-account-password}
@cindex contraseña, para cuentas de usuaria
@item @code{password} (predeterminada: @code{#f})
Normalmente debería dejar este campo a @code{#f}, inicializar la contraseña
de usuaria como @code{root} con la orden @command{passwd}, y entonces dejar
a las usuarias cambiarla con @command{passwd}. Las contraseñas establecidas
con @command{passwd} son, por supuesto, preservadas entre reinicio y
reinicio, y entre reconfiguraciones.

Si usted @emph{realmente quiere} tener una contraseña prefijada para una
cuenta, entonces este campo debe contener la contraseña cifrada, como una
cadena. Puede usar el procedimiento @code{crypt} para este fin:

@lisp
(user-account
  (name "carlos")
  (group "users")

  ;; Especifica una contraseña inicial mediante un hash SHA-512.
  (password (crypt "ContraseñaInicial!" "$6$abc")))
@end lisp

@quotation Nota
El hash de esta contraseña inicial estará disponible en un fichero en
@file{/gnu/store}, legible por todas las usuarias, por lo que este método
debe usarse con precaución.
@end quotation

@xref{Passphrase Storage,,, libc, The GNU C Library Reference Manual}, para
más información sobre el cifrado de contraseñas, y @ref{Encryption,,, guile,
GNU Guile Reference Manual}, para información sobre el procedimiento de
Guile @code{crypt}.

@end table
@end deftp

@cindex grupos
Las declaraciones de grupos incluso son más simples:

@lisp
(user-group (name "estudiantes"))
@end lisp

@deftp {Tipo de datos} user-group
Este tipo es para grupos de usuarias. Hay únicamente unos pocos campos:

@table @asis
@item @code{name}
El nombre del grupo.

@item @code{id} (predeterminado: @code{#f})
El identificador del grupo (un número). Si es @code{#f}, un nuevo número es
reservado automáticamente cuando se crea el grupo.

@item @code{system?} (predeterminado: @code{#f})
Este valor booleano indica si el grupo es un grupo ``del sistema''. Los
grupos del sistema tienen identificadores numéricos bajos.

@item @code{password} (predeterminada: @code{#f})
¿Qué? ¿Los grupos de usuarias pueden tener una contraseña? Bueno,
aparentemente sí. A menos que sea @code{#f}, este campo especifica la
contraseña del grupo.

@end table
@end deftp

Por conveniencia, una variable contiene una lista con todos los grupos de
usuarias básicos que se puede esperar:

@defvr {Variable Scheme} %base-groups
Esta es la lista de grupos de usuarias básicos que las usuarias y/o los
paquetes esperan que estén presentes en el sistema. Esto incluye grupos como
``root'', ``wheel'' y ``users'', así como grupos usados para controlar el
acceso a dispositivos específicos como ``audio'', ``disk'' y ``cdrom''.
@end defvr

@defvr {Variable Scheme} %base-user-accounts
Esta es la lista de cuentas de usuaria básicas que los programas pueden
esperar encontrar en un sistema GNU/Linux, como la cuenta ``nobody''.

Fíjese que la cuenta de ``root'' no se incluye aquí. Es un caso especial y
se añade automáticamente esté o no especificada.
@end defvr

@node Distribución de teclado
@section Distribución de teclado

@cindex distribución de teclado
@cindex asociación de teclas
Para especificar qué hace cada tecla de su teclado, necesita decirle al
sistema operativo qué @dfn{distribución de teclado} desea usar. La
predeterminada, cuando no se especifica ninguna, es la distribución QWERTY
de 105 teclas para PC de teclado inglés estadounidense. No obstante, las
personas germano-parlantes habitualmente prefieren la distribución QWERTZ
alemana, las franco-parlantes desearán la distribución AZERTY, etcétera; las
hackers pueden preferir Dvorak o bépo, y pueden incluso desear personalizar
más aún el efecto de determinadas teclas. Esta sección explica cómo hacerlo.

@cindex distribución de teclado, definición
Hay tres componentes que desearán conocer la distribución de su teclado:

@itemize
@item
El @emph{cargador de arranque} puede desear conocer cual es la distribución
de teclado que desea usar (@pxref{Configuración del gestor de arranque,
@code{keyboard-layout}}). Esto es útil si desea, por ejemplo, asegurarse de
que puede introducir la contraseña de cifrado de su partición raíz usando la
distribución correcta.

@item
El @emph{núcleo del sistema operativo}, Linux, la necesitará de manera que
la consola se configure de manera adecuada (@pxref{Referencia de operating-system, @code{keyboard-layout}}).

@item
El @emph{servidor gráfico}, habitualmente Xorg, también tiene su propia idea
de distribución de teclado (@pxref{Sistema X Window, @code{keyboard-layout}}).
@end itemize

Guix le permite configurar las tres distribuciones por separado pero,
afortunadamente, también le permite compartir la misma distribución de
teclado para los tres componentes.

@cindex XKB, distribuciones de teclado
Las distribuciones de teclado se representan mediante registros creados con
el procedimiento @code{keyboard-layout} de @code{(gnu system keyboard)}. A
imagen de la extensión de teclado de X (XKB), cada distribución tiene cuatro
atributos: un nombre (habitualmente un código de idioma como ``fi'' para
finés o ``jp'' para japonés), un nombre opcional de variante, un nombre
opcional de modelo de teclado y una lista posiblemente vacía de opciones
adicionales. En la mayor parte de los casos el nombre de la distribución es
lo único que le interesará. Aquí tiene algunos ejemplos:

@lisp
;; La distribución QWERTZ alemana. Se asume un modelo de
;; teclado "pc105" estándar.
(keyboard-layout "de")

;; La variante bépo de la distribución francesa.
(keyboard-layout "fr" "bepo")

;; La distribución de teclado para catalán.
(keyboard-layout "es" "cat")

;; Distribución de teclado árabe con "Alt-Shift" para cambiar
;; a la distribución de teclado de EEUU.
(keyboard-layout "ar,us" #:options '("grp:alt_shift_toggle"))

;; La distribución de teclado de latinoamérica. Además,
;; la tecla "Bloq Mayús" se usa como una tecla "Ctrl"
;; adicional, y la tecla "Menú" se usa como una tecla
;; "Componer/Compose" para introducir letras acentuadas.
(keyboard-layout "latam"
                 #:options '("ctrl:nocaps" "compose:menu"))

;; La distribución rusa para un teclado ThinkPad.
(keyboard-layout "ru" #:model "thinkpad")

;; La distribución estadounidense internacional, la cual es
;; la distribución estadounidense junto a teclas muertas para
;; introducir caracteres acentuados. Esta es para un teclado
;; Apple MackBook.
(keyboard-layout "us" "intl" #:model "macbook78")
@end lisp

Véase el directorio @file{share/X11/xkb} del paquete @code{xkeyboard-config}
para una lista completa de implementaciones de distribuciones, variantes y
modelos.

@cindex distribución de teclado, configuración
Digamos que desea que su sistema use la distribución de teclado turca a lo
largo de todo su sistema---cargador de arranque, consola y Xorg. Así es como
sería su configuración del sistema:

@findex set-xorg-configuration
@lisp
;; Usando la distribución turca para el cargador de
;; arranque, la consola y Xorg.

(operating-system
  ;; ...
  (keyboard-layout (keyboard-layout "tr"))  ;para la consola
  (bootloader (bootloader-configuration
                (bootloader grub-efi-bootloader)
                (target "/boot/efi")
                (keyboard-layout keyboard-layout))) ;para GRUB
  (services (cons (set-xorg-configuration
                    (xorg-configuration             ;para Xorg
                      (keyboard-layout keyboard-layout)))
                  %desktop-services)))
@end lisp

En el ejemplo previo, para GRUB y para Xorg, simplemente hemos hecho
referencia al campo @code{keyboard-layout} definido previamente, pero
también podíamos haber hecho referencia a una distribución diferente. El
procedimiento @code{set-xorg-configuration} comunica la configuración de
Xorg deseada al gestor gráfico de ingreso en el sistema, GDM por omisión.

Hemos tratado cómo especificar la distribución @emph{predeterminada} del
teclado de su sistema cuando arranca, pero también la puede modificar en
tiempo de ejecución:

@itemize
@item
Si usa GNOME, su panel de configuración tiene una entrada de ``Región e
Idioma'' donde puede seleccionar una o más distribuciones de teclado.

@item
En Xorg, la orden @command{setxkbmap} (del paquete con el mismo nombre) le
permite cambiar la distribución en uso actualmente. Por ejemplo, así es como
cambiaría a la distribución Dvorak estadounidense:

@example
setxkbmap us dvorak
@end example

@item
La orden @code{loadkeys} cambia la distribución de teclado en efecto en la
consola Linux. No obstante, tenga en cuenta que @code{loadkeys} @emph{no}
usa la categorización de distribuciones de XKB descrita previamente. La
orden a continuación carga la distribución francesa bépo:

@example
loadkeys fr-bepo
@end example
@end itemize

@node Localizaciones
@section Localizaciones

@cindex localización
Una @dfn{localización} define convenciones culturales para una lengua y
región del mundo particular (@pxref{Localizaciones,,, libc, The GNU C Library
Reference Manual}). Cada localización tiene un nombre que típicamente tiene
la forma de @code{@var{lengua}_@var{territorio}.@var{codificación}}---por
ejemplo, @code{fr_LU.utf8} designa la localización para la lengua francesa,
con las convenciones culturales de Luxemburgo, usando la codificación UTF-8.

@cindex definición de localización
Normalmente deseará especificar la localización predeterminada para la
máquina usando el campo @code{locale} de la declaración
@code{operating-system} (@pxref{Referencia de operating-system, @code{locale}}).

La localización seleccionada es automáticamente añadida a las
@dfn{definiciones de localización} conocidas en el sistema si es necesario,
con su codificación inferida de su nombre---por ejemplo, se asume que
@code{bo_CN.utf8} usa la codificación @code{UTF-8}. Definiciones de
localización adicionales pueden ser especificadas en el campo
@code{locale-definitions} de @code{operating-system}---esto es util, por
ejemplo, si la codificación no puede ser inferida del nombre de la
localización. El conjunto predeterminado de definiciones de localización
incluye algunas localizaciones ampliamente usadas, pero no todas las
disponibles, para ahorrar espacio.

Por ejemplo, para añadir la localización del frisio del norte para Alemania,
el valor de dicho campo puede ser:

@lisp
(cons (locale-definition
        (name "fy_DE.utf8") (source "fy_DE"))
      %default-locale-definitions)
@end lisp

De mismo modo, para ahorrar espacio, se puede desear que
@code{locale-definitions} contenga únicamente las localizaciones que son
realmente usadas, como en:

@lisp
(list (locale-definition
        (name "ja_JP.eucjp") (source "ja_JP")
        (charset "EUC-JP")))
@end lisp

@vindex LOCPATH
The compiled locale definitions are available at
@file{/run/current-system/locale/X.Y}, where @code{X.Y} is the libc version,
which is the default location where the GNU@tie{}libc provided by Guix looks
for locale data.  This can be overridden using the @env{LOCPATH} environment
variable (@pxref{locales-and-locpath, @env{LOCPATH} and locale packages}).

La forma @code{locale-definition} es proporcionada por el módulo @code{(gnu
system locale)}. Los detalles se proporcionan a continuación.

@deftp {Tipo de datos} locale-definition
Este es el tipo de datos de una definición de localización.

@table @asis

@item @code{name}
El nombre de la localización.  @xref{Locale Names,,, libc, The GNU C Library
Reference Manual}, para más información sobre nombres de localizaciones.

@item @code{source}
El nombre de la fuente para dicha localización. Habitualmente es la parte
@code{@var{idioma}_@var{territorio}} del nombre de localización.

@item @code{charset} (predeterminado: @code{"UTF-8"})
La ``codificación de caracteres'' o ``conjunto de caracteres'' para dicha
localización, @uref{https://www.iana.org/assignments/character-sets, como lo
define IANA}.

@end table
@end deftp

@defvr {Variable Scheme} %default-locale-definitions
Una lista de localizaciones UTF-8 usadas de forma común, usada como valor
predeterminado del campo @code{locale-definitions} en las declaraciones
@code{operating-system}.

@cindex nombre de localización
@cindex codificación normalizada en los nombres de localizaciones
Estas definiciones de localizaciones usan la @dfn{codificación normalizada}
para el fragmento tras el punto en el nombre (@pxref{Using gettextized
software, normalized codeset,, libc, The GNU C Library Reference
Manual}). Por lo que por ejemplo es válido @code{uk_UA.utf8} pero @emph{no},
digamos, @code{uk_UA.UTF-8}.
@end defvr

@subsection Consideraciones sobre la compatibilidad de datos de localización

@cindex incompatibilidad, de datos de localización
Las declaraciones @code{operating-system} proporcionan un campo
@code{locale-libcs} para especificar los paquetes GNU@tie{}libc que se
usarán para compilar las declaraciones de localizaciones
(@pxref{Referencia de operating-system}). ``¿Por qué debo preocuparme?'', puede
preguntarse. Bueno, sucede que el formato binario de los datos de
localización es ocasionalmente incompatible de una versión de libc a otra.

@c See <https://sourceware.org/ml/libc-alpha/2015-09/msg00575.html>
@c and <https://lists.gnu.org/archive/html/guix-devel/2015-08/msg00737.html>.
For instance, a program linked against libc version 2.21 is unable to read
locale data produced with libc 2.22; worse, that program @emph{aborts}
instead of simply ignoring the incompatible locale data@footnote{Versions
2.23 and later of GNU@tie{}libc will simply skip the incompatible locale
data, which is already an improvement.}.  Similarly, a program linked
against libc 2.22 can read most, but not all, of the locale data from libc
2.21 (specifically, @env{LC_COLLATE} data is incompatible); thus calls to
@code{setlocale} may fail, but programs will not abort.

El ``problema'' con Guix es que las usuarias tienen mucha libertad: pueden
elegir cuando e incluso si actualizar el software en sus perfiles, y pueden
estar usando una versión de libc diferente de la que la administradora del
sistema usó para construir los datos de localización comunes a todo el
sistema.

Fortunately, unprivileged users can also install their own locale data and
define @env{GUIX_LOCPATH} accordingly (@pxref{locales-and-locpath,
@env{GUIX_LOCPATH} and locale packages}).

No obstante, es mejor si los datos de localización globales del sistema en
@file{/run/current-system/locale} se construyen para todas las versiones de
libc realmente en uso en el sistema, de manera que todos los programas
puedan acceder a ellos---esto es especialmente crucial en un sistema
multiusuaria. Para hacerlo, la administradora puede especificar varios
paquetes libc en el campo @code{locale-libcs} de @code{operating-system}:

@lisp
(use-package-modules base)

(operating-system
  ;; @dots{}
  (locale-libcs (list glibc-2.21 (canonical-package glibc))))
@end lisp

Este ejemplo llevaría a un sistema que contiene definiciones de localización
tanto para libc 2.21 como para la versión actual de libc en
@file{/run/current-system/locale}.


@node Servicios
@section Servicios

@cindex servicios del sistema
Una parte importante de la preparación de una declaración
@code{operating-system} es listar los @dfn{servicios del sistema} y su
configuración (@pxref{Uso de la configuración del sistema}). Los servicios del
sistema típicamente son daemon lanzados cuando el sistema arrancha, u otras
acciones necesarias en ese momento---por ejemplo, configurar el acceso de
red.

Guix tiene una definición amplia de ``servicio'' (@pxref{Composición de servicios}), pero muchos servicios se gestionan por GNU@tie{}Shepherd
(@pxref{Servicios de Shepherd}). En un sistema en ejecución, la orden
@command{herd} le permite enumerar los servicios disponibles, mostrar su
estado, arrancarlos y pararlos, o realizar otras acciones específicas
(@pxref{Jump Start,,, shepherd, The GNU Shepherd Manual}). Por ejemplo:

@example
# herd status
@end example

La orden previa, ejecutada como @code{root}, enumera los servicios
actualmente definidos. La orden @command{herd doc} muestra una sinopsis del
servicio proporcionado y sus acciones asociadas:

@example
# herd doc nscd
Run libc's name service cache daemon (nscd).

# herd doc nscd action invalidate
invalidate: Invalidate the given cache--e.g., 'hosts' for host name lookups.
@end example

Las ordenes internas @command{start}, @command{stop} y @command{restart}
tienen el efecto de arrancar, parar y reiniciar el servicio,
respectivamente. Por ejemplo, las siguientes órdenes paran el servicio nscd
y reinician el servidor gráfico Xorg:

@example
# herd stop nscd
Service nscd has been stopped.
# herd restart xorg-server
Service xorg-server has been stopped.
Service xorg-server has been started.
@end example

Las siguientes secciones documentan los servicios disponibles, comenzando
con los servicios básicos, que pueden ser usados en una declaración
@code{operating-system}.

@menu
* Servicios base::           Servicios esenciales del sistema.
* Ejecución de tareas programadas::  El servicio mcron.
* Rotación del registro de mensajes::  El servicio rottlog.
* Servicios de red::         Configuración de red, daemon SSH, etc.
* Sistema X Window::         Interfaz gráfica.
* Servicios de impresión::  Soporte de impresoras locales y remotas.
* Servicios de escritorio::  D-Bus y servicios de escritorio.
* Servicios de sonido::      Servicios de ALSA y Pulseaudio.
* Servicios de bases de datos::  Bases de datos SQL, almacenes de 
                                   clave-valor, etc.
* Servicios de correo::      IMAP, POP3, SMTP y todo eso.
* Servicios de mensajería::  Servicios de mensajería.
* Servicios de telefonía::  Servicios de telefonía.
* Servicios de monitorización::  Servicios de monitorización.
* Servicios Kerberos::       Servicios Kerberos.
* Servicios LDAP::           Servicios LDAP.
* Servicios Web::            Servidores Web.
* Servicios de certificados::  Certificados TLS via Let's Encrypt.
* Servicios DNS::            Daemon de DNS.
* Servicios VPN::            Daemon de VPN.
* Sistema de ficheros en red::  Servicios relacionados con NFS.
* Integración continua::    El servicio Cuirass.
* Servicios de gestión de energía::  Extender la vida de la batería.
* Servicios de audio::       El MPD.
* Servicios de virtualización::  Servicios de virtualización.
* Servicios de control de versiones::  Proporcionar acceso remoto a 
                                         repositorios Git.
* Servicios de juegos::      Servidores de juegos.
* Servicio PAM Mount::       Servicio de montado de volúmenes en el ingreso 
                               al sistema.
* Servicios de Guix::        Servicios relacionados específicamente con 
                               Guix.
* Servicios de Linux::       Servicios asociados al núcleo Linux.
* Hurd Services::            Services specific for a Hurd System.
* Servicios misceláneos::   Otros servicios.
@end menu

@node Servicios base
@subsection Servicios base

El módulo @code{(gnu services base)} proporciona definiciones para los
servicios básicos que se esperan en el sistema. Los servicios exportados por
este módulo se enumeran a continuación.

@defvr {Variable Scheme} %base-services
Esta variable contiene una lista de servicios básicos (@pxref{Tipos de servicios y servicios}, para más información sobre los objetos servicio) que se
pueden esperar en el sistema: un servicio de ingreso al sistema (mingetty)
en cada tty, syslogd, el daemon de la caché del servicio de nombres (nscd),
el gestor de dispositivos udev, y más.

Este es el valor predeterminado del campo @code{services} de las
declaraciones @code{operating-system}. De manera habitual, cuando se
personaliza el sistema, es deseable agregar servicios a
@code{%base-services}, de esta forma:

@lisp
(append (list (service avahi-service-type)
              (service openssh-service-type))
        %base-services)
@end lisp
@end defvr

@defvr {Variable Scheme} special-files-service-type
El servicio que establece ``ficheros especiales'' como @file{/bin/sh}; una
instancia suya es parte de @code{%base-services}.

El valor asociado con servicios @code{special-file-service-type} debe ser
una lista de tuplas donde el primer elemento es el ``fichero especial'' y el
segundo elemento es su destino. El valor predeterminado es:

@cindex @file{/bin/sh}
@cindex @file{sh}, en @file{/bin}
@lisp
`(("/bin/sh" ,(file-append bash "/bin/sh")))
@end lisp

@cindex @file{/usr/bin/env}
@cindex @file{env}, en @file{/usr/bin}
Si quiere añadir, digamos, @code{/usr/bin/env} a su sistema, puede cambiar
su valor por:

@lisp
`(("/bin/sh" ,(file-append bash "/bin/sh"))
  ("/usr/bin/env" ,(file-append coreutils "/bin/env")))
@end lisp

Since this is part of @code{%base-services}, you can use
@code{modify-services} to customize the set of special files (@pxref{Referencia de servicios, @code{modify-services}}).  But the simple way to add a special
file is @i{via} the @code{extra-special-file} procedure (see below).
@end defvr

@deffn {Procedimiento Scheme} extra-special-file @var{fichero} @var{destino}
Usa @var{destino} como el ``fichero especial'' @var{fichero}.

Por ejemplo, la adición de las siguientes líneas al campo @code{services} de
su declaración de sistema operativo genera @file{/usr/bin/env} como un
enlace simbólico:

@lisp
(extra-special-file "/usr/bin/env"
                    (file-append coreutils "/bin/env"))
@end lisp
@end deffn

@deffn {Procedimiento Scheme} host-name-service @var{nombre}
Devuelve un servicio que establece el nombre de máquina a @var{nombre}.
@end deffn

@defvr {Variable Scheme} console-font-service-type
Instala las tipografías proporcionadas en las consolas virtuales (tty)
especificados (las tipografías se asocian a cada consola virtual con el
núcleo Linux). El valor de este servicio es una lista de pares
tty/tipografía. La tipografía puede ser el nombre de alguna de las
proporcionadas por el paquete @code{kbd} o cualquier parámetro válido para
la orden @command{setfont}, como en este ejemplo:

@lisp
`(("tty1" . "LatGrkCyr-8x16")
  ("tty2" . ,(file-append
                font-tamzen
                "/share/kbd/consolefonts/TamzenForPowerline10x20.psf"))
  ("tty3" . ,(file-append
                font-terminus
                "/share/consolefonts/ter-132n"))) ; para HDPI
@end lisp
@end defvr

@deffn {Procedimiento Scheme} login-service @var{config}
Devuelve un servicio para ejecutar el ingreso al sistema de acuerdo con
@var{config}, un objeto @code{<login-configuration>}, que especifica el
mensaje del día, entre otras cosas.
@end deffn

@deftp {Tipo de datos} login-configuration
Este es el tipo de datos que representa la configuración del ingreso al
sistema.

@table @asis

@item @code{motd}
@cindex mensaje del día
Un objeto tipo-fichero que contiene el ``mensaje del día''.

@item @code{allow-empty-passwords?} (predeterminado: @code{#t})
Permite contraseñas vacías por defecto para que las primeras usuarias puedan
ingresar en el sistema cuando la cuenta de ``root'' está recién creada.

@end table
@end deftp

@deffn {Procedimiento Scheme} mingetty-service @var{config}
Devuelve un servicio para ejecutar mingetty de acuerdo con @var{config}, un
objeto @code{<mingetty-configuration>}, que especifica el tty a ejecutar
entre otras cosas.
@end deffn

@deftp {Tipo de datos} mingetty-configuration
Este es el tipo de datos que representa la configuración de Mingetty, el
cual proporciona la implementación predeterminada de ingreso al sistema en
las consolas virtuales.

@table @asis

@item @code{tty}
El sistema de la consola en la que se ejecuta este Mingetty---por ejemplo,
@code{"tty1"}.

@item @code{auto-login} (predeterminado: @code{#f})
Cuando sea verdadero, este campo debe ser una cadena que denote el nombre de
usuaria bajo el cual el sistema ingresa automáticamente. Cuando es
@code{#f}, se deben proporcionar un nombre de usuaria y una contraseña para
ingresar en el sistema.

@item @code{login-program} (predeterminado: @code{#f})
Debe ser @code{#f}, en cuyo caso se usa el programa predeterminado de
ingreso al sistema (@command{login} de las herramientas Shadow), o una
expresión-G que determine el nombre del programa de ingreso al sistema.

@item @code{login-pause?} (predeterminado: @code{#f})
Cuando es @code{#t} en conjunción con @var{auto-login}, la usuaria deberá
presionar una tecla para lanzar el shell de ingreso al sistema.

@item @code{mingetty} (predeterminado: @var{mingetty})
El paquete Mingetty usado.

@end table
@end deftp

@deffn {Procedure Scheme} agetty-service @var{config}
Devuelve un servicio para ejecutar agetty de acuerdo con @var{config}, un
objeto @code{<agetty-configuration>}, que especifica el tty a ejecutar entre
otras cosas.
@end deffn

@deftp {Tipo de datos} agetty-configuration
Este es el tipo de datos que representa la configuración de agetty, que
implementa el ingreso al sistema en las consolas virtuales y serie. Véase la
página de manual @code{agetty(8)} para más información.

@table @asis

@item @code{tty}
The name of the console this agetty runs on, as a string---e.g.,
@code{"ttyS0"}.  This argument is optional, it will default to a reasonable
default serial port used by the kernel Linux.

Para ello, si hay un valor para una opción @code{agetty.tty} en la línea de
órdenes del núcleo, agetty extraerá el nombre del dispositivo del puerto
serie de allí y usará dicho valor.

Si no y hay un valor para la opción @code{console} con un tty en la línea de
órdenes de Linux, agetty extraerá el nombre del dispositivo del puerto serie
de allí y usará dicho valor.

En ambos casos, agetty dejará el resto de configuración de dispositivos
serie (tasa de transmisión, etc.)@: sin modificar---a la espera de que Linux
los haya fijado a los valores correctos.

@item @code{baud-rate} (predeterminado: @code{#f})
Una cadena que contenga una lista separada por comas de una o más tasas de
transmisión, en orden descendiente.

@item @code{term} (predeterminado: @code{#f})
A string containing the value used for the @env{TERM} environment variable.

@item @code{eight-bits?} (predeterminado: @code{#f})
En caso de ser @code{#t}, se asume que el tty permite el paso de 8 bits, y
la detección de paridad está desactivada.

@item @code{auto-login} (predeterminado: @code{#f})
Cuando se proporciona un nombre de ingreso al sistema, como una cadena, la
usuaria especificada ingresará automáticamente sin solicitar su nombre de
ingreso ni su contraseña.

@item @code{no-reset?} (predeterminado: @code{#f})
En caso de ser @code{#t}, no reinicia los modos de control del terminal
(cflags).

@item @code{host} (predeterminado: @code{#f})
This accepts a string containing the ``login_host'', which will be written
into the @file{/var/run/utmpx} file.

@item @code{remote?} (predeterminado: @code{#f})
Cuando se fija a @code{#t} en conjunción con @var{host}, se añadirá una
opción @code{-r} "fakehost" a la línea de órdenes del programa de ingreso al
sistema especificado en @var{login-program}.

@item @code{flow-control?} (predeterminado: @code{#f})
Cuando es @code{#t}, activa el control de flujo hardware (RTS/CTS).

@item @code{no-issue?} (predeterminado: @code{#f})
Cuando es @code{#t}, el contenido del fichero @file{/etc/issue} no se
mostrará antes de presentar el mensaje de ingreso al sistema.

@item @code{init-string} (predeterminada: @code{#f})
Esto acepta una cadena que se enviará al tty o módem antes de mandar nada
más. Puede usarse para inicializar un modem.

@item @code{no-clear?} (predeterminado: @code{#f})
Cuando es @code{#t}, agetty no limpiará la pantalla antes de mostrar el
mensaje de ingreso al sistema.

@item @code{login-program} (predeterminado: (file-append shadow "/bin/login"))
Esto debe ser o bien una expresión-g que denote el nombre del programa de
ingreso al sistema, o no debe proporcionarse, en cuyo caso el valor
predeterminado es @command{login} del conjunto de herramientas Shadow.

@item @code{local-line} (predeterminado: @code{#f})
Controla el selector la línea CLOCAL. Acepta uno de estos tres símbolos como
parámetros, @code{'auto}, @code{'always} (siempre) o @code{'never}
(nunca). Si es @code{#f}, el valor predeterminado elegido por agetty es
@code{'auto}.

@item @code{extract-baud?} (predeterminado: @code{#f})
Cuando es @code{#t}, instruye a agetty para extraer la tasa de transmisión
de los mensajes de estado producidos por ciertos tipos de módem.

@item @code{skip-login?} (predeterminado: @code{#f})
Cuando es @code{#t}, no solicita el nombre de la usuaria para el ingreso al
sistema. Puede usarse con el campo @var{login-program} para usar sistemas de
ingreso no estándar.

@item @code{no-newline?} (predeterminado: @code{#f})
Cuando es @code{#t}, no imprime una nueva línea antes de imprimir el fichero
@file{/etc/issue}.

@c Is this dangerous only when used with login-program, or always?
@item @code{login-options} (predeterminadas: @code{#f})
Esta opción acepta una cadena que contenga opciones para proporcionar al
programa de ingreso al sistema. Cuando se use con @var{login-program}, sea
consciente de que una usuaria con malas intenciones podría intentar
introducir un nombre que contuviese opciones embebidas que serían procesadas
por el programa de ingreso.

@item @code{login-pause} (predeterminada: @code{#f})
Cuando es @code{#t}, espera la pulsación de cualquier tecla antes de mostrar
el mensaje de ingreso al sistema. Esto puede usarse en conjunción con
@var{auto-login} para ahorrar memoria lanzando cada shell cuando sea
necesario.

@item @code{chroot} (predeterminado: @code{#f})
Cambia la raíz al directorio especificado. Esta opción acepta una ruta de
directorio como una cadena.

@item @code{hangup?} (predeterminado: @code{#f})
Usa la llamada del sistema Linux @code{vhangup} para colgar de forma virtual
el terminal especificado.

@item @code{keep-baud?} (predeterminado: @code{#f})
Cuando es @code{#t}, prueba a mantener la tasa de transmisión existente. Las
tasas de transmisión de @var{baud-rate} se usan cuando agetty recibe un
carácter @key{BREAK}.

@item @code{timeout} (predeterminado: @code{#f})
Cuando sea un valor entero, termina si no se pudo leer ningún nombre de
usuaria en @var{timeout} segundos.

@item @code{detect-case?} (predeterminado: @code{#f})
Cuando es @code{#t}, activa la detección de terminales únicamente con
mayúsculas. ESta configuración detectará un nombre de ingreso que contenga
únicamente letras mayúsculas como un indicativo de un terminal con letras
únicamente mayúsculas y activará las conversiones de mayúscula a
minúscula. Tenga en cuenta que esto no permitirá caracteres Unicode.

@item @code{wait-cr?} (predeterminado: @code{#f})
Cuando es @code{#t}, espera hasta que la usuaria o el modem envíen un
carácter de retorno de carro o de salto de línea antes de mostrar
@file{/etc/issue} o el mensaje de ingreso. Se usa de forma típica junto a la
opción @var{init-string}.

@item @code{no-hints?} (predeterminado: @code{#f})
Cuando es @code{#t}, no imprime avisos sobre el bloqueo numérico, las
mayúsculas o el bloqueo del desplazamiento.

@item @code{no-hostname?} (predeterminado: @code{#f})
El nombre de la máquina se imprime de forma predeterminada. Cuando esta
opción es @code{#t}, no se mostrará ningún nombre de máquina.

@item @code{long-hostname?} (predeterminado: @code{#f})
El nombre de máquina se imprime de forma predeterminada únicamente hasta el
primer punto. Cuando esta opción es @code{#t}, se muestra el nombre
completamente cualificado de la máquina mostrado por @code{gethostname} o
@code{getaddrinfo}.

@item @code{erase-characters} (predeterminado: @code{#f})
Esta opción acepta una cadena de caracteres adicionales que deben
interpretarse como borrado del carácter anterior cuando la usuaria introduce
su nombre de ingreso.

@item @code{kill-characters} (predeterminado: @code{#f})
This option accepts a string that should be interpreted to mean ``ignore all
previous characters'' (also called a ``kill'' character) when the user types
their login name.

@item @code{chdir} (predeterminado: @code{#f})
Esta opción acepta, como una cadena, una ruta de directorio que a la que se
cambiará antes del ingreso al sistema.

@item @code{delay} (predeterminado: @code{#f})
Esta opción acepta, como un entero, el número de segundos a esperar antes de
abrir el tty y mostrar el mensaje de ingreso al sistema.

@item @code{nice} (predeterminado: @code{#f})
Esta opción acepta, como un entero, el valor ``nice'' con el que se
ejecutará el programa @command{login}.

@item @code{extra-options} (predeterminadas: @code{'()})
This option provides an ``escape hatch'' for the user to provide arbitrary
command-line arguments to @command{agetty} as a list of strings.

@end table
@end deftp

@deffn {Procedimiento Scheme} kmscon-service-type @var{config}
Devuelve un servicio que ejecuta
@uref{https://www.freedesktop.org/wiki/Software/kmscon,kmscon} de acuerdo a
@var{config}, un objeto @code{<kmscon-configuration>}, que especifica el tty
sobre el que se ejecutará, entre otras cosas.
@end deffn

@deftp {Tipo de datos} kmscon-configuration
Este es el tipo de datos que representa la configuración de Kmscon, que
implementa el ingreso al sistema en consolas virtuales.

@table @asis

@item @code{virtual-terminal}
El sistema de la consola en la que se ejecuta este Kmscon---por ejemplo,
@code{"tty1"}.

@item @code{login-program} (predeterminado: @code{#~(string-append #$shadow "/bin/login")})
Una expresión-g que denota el programa de ingreso al sistema. El programa de
ingreso al sistema predeterminado es @command{login} del conjunto de
herramientas Shadow.

@item @code{login-arguments} (predeterminados: @code{'("-p")})
Una lista de parámetros para proporcionar a @command{login}.

@item @code{auto-login} (predeterminado: @code{#f})
Cuando se proporciona un nombre de ingreso al sistema, como una cadena, la
usuaria especificada ingresará automáticamente sin solicitar su nombre de
ingreso ni su contraseña.

@item @code{hardware-acceleration?} (predeterminado: #f)
Determina si se usará aceleración hardware.

@item @code{kmscon} (predeterminado: @var{kmscon})
El paquete Kmscon usado.

@end table
@end deftp

@cindex daemon de caché del servicio de nombres
@cindex nscd
@deffn {Procedimiento Scheme} nscd-service [@var{configuración}] [#:glibc glibc] @
                [#:name-services '()]
Devuelve un servicio que ejecuta el daemon de la caché del servicio de
nombres (nscd) con la @var{configuración} proporcionada---un objeto
@code{<nscd-configuration>}. @xref{Selector de servicios de nombres}, para un ejemplo.

Por conveniencia, el servicio ncsd de Shepherd proporciona las siguientes
acciones:

@table @code
@item invalidate
@cindex invalidación de caché, nscd
@cindex nscd, invalidación de caché
Esto invalida la caché dada. Por ejemplo, ejecutar:

@example
herd invalidate nscd hosts
@end example

@noindent
invalida la caché de búsqueda de nombres de máquinas de nscd.

@item statistics
Ejecutar @command{herd statistics nscd} muestra información del uso nscd y
la caché.
@end table

@end deffn

@defvr {Variable Scheme} %nscd-default-configuration
This is the default @code{<nscd-configuration>} value (see below) used by
@code{nscd-service}.  It uses the caches defined by
@code{%nscd-default-caches}; see below.
@end defvr

@deftp {Tipo de datos} nscd-configuration
Este tipo de datos representa la configuración del daemon de caché del
servicio de nombres (nscd).

@table @asis

@item @code{name-services} (predeterminados: @code{'()})
Lista de paquetes que indican los @dfn{servicios de nombres} que serán
visibles al nscd---por ejemplo, @code{(list @var{nss-mdns})}.

@item @code{glibc} (predeterminada: @var{glibc})
Paquete que denota la biblioteca C de GNU que proporciona la orden
@command{nscd}.

@item @code{log-file} (predeterminado: @code{"/var/log/nscd.log"})
Nombre del fichero de registro de nscd. Aquí es donde se almacena la salida
de depuración cuando @code{debug-level} es estrictamente positivo.

@item @code{debug-level} (predeterminado: @code{0})
Entero que indica el nivel de depuración. Números mayores significan que se
registra más salida de depuración.

@item @code{caches} (default: @code{%nscd-default-caches})
Lista de objetos @code{<nscd-cache>} que indican cosas a mantener en caché;
véase a continuación.

@end table
@end deftp

@deftp {Tipo de datos} nscd-cache
Tipo de datos que representa una base de datos de caché de nscd y sus
parámetros.

@table @asis

@item @code{base de datos}
Es un símbolo que representa el nombre de la base de datos de la que se
actúa como caché. Se aceptan los valores @code{passwd}, @code{group},
@code{hosts} y @code{services}, que designan las bases de datos NSS
correspondientes (@pxref{NSS Basics,,, libc, The GNU C Library Reference
Manual}).

@item @code{positive-time-to-live}
@itemx @code{negative-time-to-live} (predeterminado: @code{20})
Un número que representa el número de segundos durante los que una búsqueda
positiva o negativa permanece en la caché.

@item @code{check-files?} (predeterminado: @code{#t})
Si se comprobará en busca de actualizaciones los ficheros que correspondan
con @var{database}.

Por ejemplo, cuando @var{database} es @code{hosts}, la activación de esta
opción instruye a nscd para comprobar actualizaciones en @file{/etc/hosts} y
tenerlas en cuenta.

@item @code{persistent?} (predeterminada: @code{#t})
Determina si la caché debe almacenarse de manera persistente en disco.

@item @code{shared?} (predeterminado: @code{#t})
Determina si la caché debe compartirse entre las usuarias.

@item @code{max-database-size} (predeterminado: 32@tie{}MiB)
Tamaño máximo en bytes de la caché de la base de datos.

@c XXX: 'suggested-size' and 'auto-propagate?' seem to be expert
@c settings, so leave them out.

@end table
@end deftp

@defvr {Variable Scheme} %nscd-default-caches
Lista de objetos @code{<nscd-cache>} usados por omisión por
@code{nscd-configuration} (véase en la sección previa)

Activa el almacenamiento en caché persistente y agresivo de búsquedas de
servicios y nombres de máquina. La última proporciona un mejor rendimiento
en la búsqueda de nombres de máquina, resilencia en caso de nombres de
servidor no confiables y también mejor privacidad---a menudo el resultado de
las búsquedas de nombres de máquina está en la caché local, por lo que
incluso ni es necesario consultar servidores de nombres externos.
@end defvr

@anchor{syslog-configuration-type}
@cindex syslog
@cindex logging
@deftp {Tipo de datos} syslog-configuration
Este tipo de datos representa la configuración del daemon syslog.

@table @asis
@item @code{syslogd} (predeterminado: @code{#~(string-append #$inetutils "/libexec/syslogd")})
El daemon syslog usado.

@item @code{config-file} (predeterminado: @code{%default-syslog.conf})
El fichero de configuración de syslog usado.

@end table
@end deftp

@anchor{syslog-service}
@cindex syslog
@deffn {Procedimiento Scheme} syslog-service @var{config}
Devuelve un servicio que ejecuta el daemon de syslog de acuerdo a
@var{config}.

@xref{syslogd invocation,,, inetutils, GNU Inetutils}, para más información
sobre la sintaxis del fichero de configuración.
@end deffn

@defvr {Variable Scheme} guix-service-type
El tipo de servicio que ejecuta el daemon de construcción,
@command{guix-daemon} (@pxref{Invocación de guix-daemon}). Su valor debe ser un
registro @code{guix-configuration} como se describe a continuación.
@end defvr

@anchor{guix-configuration-type}
@deftp {Tipo de datos} guix-configuration
Este tipo de datos representa la configuración del daemon de construcción de
Guix. @xref{Invocación de guix-daemon}, para más información.

@table @asis
@item @code{guix} (predeterminado: @var{guix})
El paquete Guix usado.

@item @code{build-group} (predeterminado: @code{"guixbuild"})
El nombre del grupo de las cuentas de usuarias de construcción.

@item @code{build-accounts} (predeterminadas: @code{10})
Número de cuentas de usuarias de construcción a crear.

@item @code{authorize-key?} (predeterminado: @code{#t})
@cindex sustituciones, autorización de las mismas
Determina si se autoriza las claves de sustituciones listadas en
@code{authorized-keys}---predeterminada la de
@code{@value{SUBSTITUTE-SERVER}} (@pxref{Sustituciones}).

@vindex %default-authorized-guix-keys
@item @code{authorized-keys} (predeterminadas: @code{%default-authorized-guix-keys})
La lista de ficheros de claves autorizadas para importaciones de archivos,
como una lista de expresiones-G que evalúan a cadenas (@pxref{Invocación de guix archive}). Por defecto, contiene las de @code{@value{SUBSTITUTE-SERVER}}
(@pxref{Sustituciones}).

@item @code{use-substitutes?} (predeterminado: @code{#t})
Determina si se usarán sustituciones.

@item @code{substitute-urls} (predeterminado: @code{%default-substitute-urls})
La lista de URLs donde se buscarán sustituciones por defecto.

@item @code{max-silent-time} (predeterminado: @code{0})
@itemx @code{timeout} (predeterminado: @code{0})
El número de segundos de silencio y el número de segundos de actividad
respectivamente, tras los cuales el proceso de construcción supera el
plazo. Un valor de cero proporciona plazos ilimitados.

@item @code{log-compression} (predeterminado: @code{'bzip2})
El tipo de compresión usado en los log de construcción---o bien @code{gzip},
o bien @code{bzip2} o @code{none}.

@item @code{extra-options} (predeterminadas: @code{'()})
Lista de opciones de línea de órdenes adicionales para
@command{guix-daemon}.

@item @code{log-file} (predeterminado: @code{"/var/log/guix-daemon.log"})
Fichero al que se escriben la salida estándar y la salida estándar de error
de @command{guix-daemon}.

@cindex HTTP, proxy para @code{guix-daemon}
@cindex proxy, para el acceso HTTP de @code{guix-daemon}
@item @code{http-proxy} (predeterminado: @code{#f})
La URL de los proxy HTTP y HTTPS que se usa para la descarga de derivaciones
de salida fija y sustituciones.

También es posible cambiar el proxy del daemon en tiempo te ejecución con la
acción @code{set-http-proxy}, la cual lo reinicia:

@example
herd set-http-proxy guix-daemon http://localhost:8118
@end example

Para limpiar la configuración del proxy ejecute:

@example
herd set-http-proxy guix-daemon
@end example

@item @code{tmpdir} (predeterminado: @code{#f})
Una ruta de directorio donde @command{guix-daemon} realiza las
construcciones.

@end table
@end deftp

@deffn {Procedimiento Scheme} udev-service [#:udev @var{eudev} #:rules @code{'()}]
Run @var{udev}, which populates the @file{/dev} directory dynamically.  udev
rules can be provided as a list of files through the @var{rules} variable.
The procedures @code{udev-rule}, @code{udev-rules-service} and
@code{file->udev-rule} from @code{(gnu services base)} simplify the creation
of such rule files.

La orden @command{herd rules udev}, como root, devuelve el nombre del
directorio que contiene todas las reglas udev activas.
@end deffn

@deffn {Procedimiento Scheme} udev-rule [@var{nombre-fichero} @var{contenido}]
Devuelve un fichero de reglas de udev con nombre @var{nombre-fichero} que
contiene las reglas definidas en el literal @var{contenido}.

En el ejemplo siguiente se define una regla para un dispositivo USB que será
almacenada en el fichero @file{90-usb-cosa.rules}. Esta regla ejecuta un
script cuando se detecta un dispositivo USB con un identificador de producto
dado.

@lisp
(define %regla-ejemplo-udev
  (udev-rule
    "90-usb-cosa.rules"
    (string-append "ACTION==\"add\", SUBSYSTEM==\"usb\", "
                   "ATTR@{product@}==\"Ejemplo\", "
                   "RUN+=\"/ruta/al/ejecutable\"")))
@end lisp
@end deffn

@deffn {Scheme Procedure} udev-rules-service [@var{name} @var{rules}] @
               [#:groups @var{groups}] Return a service that extends
@code{udev-service-type } with @var{rules} and @code{account-service-type}
with @var{groups} as system groups.  This works by creating a singleton
service type @code{@var{name}-udev-rules}, of which the returned service is
an instance.

Here we show how it can be used to extend @code{udev-service-type} with the
previously defined rule @code{%example-udev-rule}.

@lisp
(operating-system
 ;; @dots{}
 (services
   (cons (udev-rules-service 'usb-thing %example-udev-rule)
         %desktop-services)))
@end lisp
@end deffn

@deffn {Procedimiento Scheme} file->udev-rule [@var{nombre-fichero} @var{fichero}]
Devuelve un fichero de udev con nombre @var{nombre-fichero} que contiene las
reglas definidas en @var{fichero}, un objeto tipo-fichero.

El ejemplo siguiente muestra cómo podemos usar un fichero de reglas
existente.

@lisp
(use-modules (guix download)     ;para url-fetch
             (guix packages)     ;para origin
             @dots{})

(define %reglas-android-udev
  (file->udev-rule
    "51-android-udev.rules"
    (let ((version "20170910"))
      (origin
       (method url-fetch)
       (uri (string-append "https://raw.githubusercontent.com/M0Rf30/"
                           "android-udev-rules/" version "/51-android.rules"))
       (sha256
        (base32 "0lmmagpyb6xsq6zcr2w1cyx9qmjqmajkvrdbhjx32gqf1d9is003"))))))
@end lisp
@end deffn

Adicionalmente, las definiciones de paquete Gui pueden ser incluidas en
@var{rules} para extender las reglas udev con las definiciones encontradas
bajo su subdirectorio @file{lib/udev/rules.d}. En vez del ejemplo previo de
@var{file->udev-rule}, podíamos haber usado el paquete
@var{android-udev-rules} que existe en Guix en el módulo @code{(gnu packages
android)}.

The following example shows how to use the @var{android-udev-rules} package
so that the Android tool @command{adb} can detect devices without root
privileges.  It also details how to create the @code{adbusers} group, which
is required for the proper functioning of the rules defined within the
@code{android-udev-rules} package.  To create such a group, we must define
it both as part of the @code{supplementary-groups} of our
@code{user-account} declaration, as well as in the @var{groups} of the
@code{udev-rules-service} procedure.

@lisp
(use-modules (gnu packages android)  ;para android-udev-rules
             (gnu system shadow)     ;para user-group
             @dots{})

(operating-system
  ;; @dots{}
  (users (cons (user-account
                ;; @dots{}
                (supplementary-groups
                 '("adbusers"   ;for adb
                   "wheel" "netdev" "audio" "video")))))
  ;; @dots{}
  (services
    (cons (udev-rules-service 'android android-udev-rules
                              #:groups '("adbusers"))
          %desktop-services)))
@end lisp

@defvr {Variable Scheme} urandom-seed-service-type
Save some entropy in @code{%random-seed-file} to seed @file{/dev/urandom}
when rebooting.  It also tries to seed @file{/dev/urandom} from
@file{/dev/hwrng} while booting, if @file{/dev/hwrng} exists and is
readable.
@end defvr

@defvr {Variable Scheme} %random-seed-file
Es el nombre del fichero donde algunos bytes aleatorios son almacenados por
el servicio @var{urandom-seed-service} para alimentar @file{/dev/urandom}
durante el reinicio. Su valor predeterminado es @file{/var/lib/random-seed}.
@end defvr

@cindex ratón
@cindex gpm
@defvr {Variable Scheme} gpm-service-type
Este es el tipo de servicio que ejecuta GPM, el @dfn{daemon de ratón de
propósito general}, que permite el uso del ratón en la consola Linux. GPM
permite a las usuarias el uso del ratón en la consola, notablemente la
selección, copia y pegado de texto.

El valor para servicios de este tipo debe ser un objeto
@code{gpm-configuration} (véase a continuación). Este servicio no es parte
de @code{%base-services}.
@end defvr

@deftp {Tipo de datos} gpm-configuration
Tipo de datos que representa la configuración de GPM.

@table @asis
@item @code{opciones} (predeterminadas: @code{%default-gpm-options})
Opciones de línea de órdenes proporcionadas a @command{gpm}. El conjunto
predeterminado de opciones instruye a @command{gpm} para esperar eventos de
ratón en @file{/dev/input/mice}. @xref{Command Line,,, gpm, gpm manual},
para más información.

@item @code{gpm} (predeterminado: @code{gpm})
El paquete GPM usado.

@end table
@end deftp

@anchor{guix-publish-service-type}
@deffn {Variable Scheme} guix-publish-service-type
Este es el tipo de servicio para @command{guix publish} (@pxref{Invocación de guix publish}). Su valor debe ser un objeto
@code{guix-publish-configuration}, como se describe a continuación.

Se asume que @file{/etc/guix} ya contiene el par de claves de firma como
@command{guix archive --generate-key} lo crea (@pxref{Invocación de guix archive}). Si no es el caso, el servicio fallará al arrancar.
@end deffn

@deftp {Tipo de datos} guix-publish-configuration
Tipo de datos que representa la configuración del servicio @code{guix
publish}.

@table @asis
@item @code{guix} (predeterminado: @code{guix})
El paquete Guix usado.

@item @code{port} (predeterminado: @code{80})
El puerto TCP en el que se esperan conexiones.

@item @code{host} (predeterminado: @code{"localhost"})
La dirección de red (y, por tanto, la interfaz de red) en la que se
esperarán conexiones. Use @code{"0.0.0.0"} para aceptar conexiones por todas
las interfaces de red.

@item @code{compression} (predeterminada: @code{'(("gzip" 3))})
Es una lista de tuplas método de compresión/nivel usadas para la compresión
de sustituciones. Por ejemplo, para comprimir todas las sustituciones
@emph{tanto con} lzip a nivel 8 @emph{como con} gzip a nivel 9, escriba:

@lisp
'(("lzip" 7) ("gzip" 9))
@end lisp

El nivel 9 obtiene la mejor relación de compresión con un incremento en el
uso del procesador, mientras que el nivel 1 realiza la compresión rápido.

Una lista vacía desactiva completamente la compresión.

@item @code{nar-path} (predeterminado: @code{"nar"})
The URL path at which ``nars'' can be fetched.  @xref{Invocación de guix publish,
@option{--nar-path}}, for details.

@item @code{cache} (predeterminado: @code{#f})
Cuando es @code{#f}, desactiva la caché y genera los archivos bajo
demanda. De otro modo, debería ser el nombre de un directorio---por ejemplo,
@code{"/var/cache/guix/publish"}---donde @command{guix pubish} almacena los
archivos y metadatos en caché listos para ser enviados. @xref{Invocación de guix publish, @option{--cache}}, para más información sobre sus ventajas e
inconvenientes.

@item @code{workers} (predeterminado: @code{#f})
Cuando es un entero, es el número de hilos de trabajo usados para la caché;
cuando es @code{#f}, se usa el número de procesadores. @xref{Invocación de guix publish, @option{--workers}}, para más información.

@item @code{ttl} (predeterminado: @code{#f})
Cuando es un entero, denota el @dfn{tiempo de vida} en segundos de los
archivos publicados. @xref{Invocación de guix publish, @option{--ttl}}, para más
información.
@end table
@end deftp

@anchor{rngd-service}
@deffn {Procedimiento Scheme} rngd-service [#:rng-tools @var{rng-tools}] @
            [#:device "/dev/hwrng"]
Devuelve un servicio que ejecuta el programa @command{rngd} de
@var{rng-tools} para añadir @var{device} a la fuente de entropía del
núcleo. El servicio emitirá un fallo si @var{device} no existe.
@end deffn

@anchor{pam-limits-service}
@cindex límites por sesión
@cindex ulimit
@cindex prioridad
@cindex tiempo real
@cindex jackd
@deffn {Procedimiento Scheme} pam-limits-service [#:limits @code{'()}]

Devuelve un servicio que instala un fichero de configuración para el
@uref{http://linux-pam.org/Linux-PAM-html/sag-pam_limits.html, módulo
@code{pam_limits}}. El procedimiento toma de manera opcional una lista de
valores @code{pam-limits-entry}, que se pueden usar para especificar límites
@code{ulimit} y limites de prioridad ``nice'' para sesiones de usuaria.

Las siguientes definiciones de límites establecen dos límites ``hard'' y
``soft'' para todas las sesiones de ingreso al sistema de usuarias
pertenecientes al grupo @code{realtime}:

@lisp
(pam-limits-service
 (list
  (pam-limits-entry "@@realtime" 'both 'rtprio 99)
  (pam-limits-entry "@@realtime" 'both 'memlock 'unlimited)))
@end lisp

La primera entrada incrementa la prioridad máxima de tiempo real para
procesos sin privilegios; la segunda entrada elimina cualquier restricción
sobre el espacio de direcciones que puede bloquearse en memoria. Estas
configuraciones se usan habitualmente para sistemas de sonido en tiempo
real.
@end deffn

@node Ejecución de tareas programadas
@subsection Ejecución de tareas programadas

@cindex cron
@cindex mcron
@cindex planificación de trabajos
El módulo @code{(gnu services mcron)} proporciona una interfaz a
GNU@tie{}mcron, un daemon para ejecutar trabajos planificados de antemano
(@pxref{Top,,, mcron, GNU@tie{}mcron}). GNU@tie{}mcron es similar al daemon
tradicional de Unix @command{cron}; la principal diferencia es que está
implementado en Scheme Guile, que proporciona mucha flexibilidad cuando se
especifica la planificación de trabajos y sus acciones.

El siguiente ejemplo define un sistema operativo que ejecuta las órdenes
@command{updatedb} (@pxref{Invoking updatedb,,, find, Finding Files}) y
@command{guix gc} (@pxref{Invocación de guix gc}) de manera diaria, así como la
orden @command{mkid} como una usuaria sin privilegios (@pxref{mkid
invocation,,, idutils, ID Database Utilitites}). Usa expresiones-g para
introducir definiciones de trabajos que serán proporcionados a mcron
(@pxref{Expresiones-G}).

@lisp
(use-modules (guix) (gnu) (gnu services mcron))
(use-package-modules base idutils)

(define trabajo-updatedb
  ;; Ejecuta 'updatedb' a las 3AM cada día. Aquí escribimos
  ;; las acciones del trabajo como un procedimiento Scheme.
  #~(job '(next-hour '(3))
         (lambda ()
           (execl (string-append #$findutils "/bin/updatedb")
                  "updatedb"
                  "--prunepaths=/tmp /var/tmp /gnu/store"))))

(define trabajo-recolector-basura
  ;; Recolecta basura 5 minutos después de media noche,
  ;; todos los días. La acción del trabajo es una orden
  ;; del shell.
  #~(job "5 0 * * *"            ;sintaxis de Vixie cron
         "guix gc -F 1G"))

(define trabajo-idutils
  ;; Actualiza el índice de la base de datos como "carlos" a las
  ;; 12:15 y a las 19:15.  Esto se ejecuta desde su directorio.
  #~(job '(next-minute-from (next-hour '(12 19)) '(15))
         (string-append #$idutils "/bin/mkid src")
         #:user "carlos"))

(operating-system
  ;; @dots{}
  (services (cons (service mcron-service-type
                           (mcron-configuration
                            (jobs (list trabajo-recolector-basura
                                        trabajo-updatedb
                                        trabajo-idutils))))
                  %base-services)))
@end lisp

Para trabajos más complejos definidos en Scheme donde necesita control en el
ámbito global, por ejemplo para introducir una forma @code{use-modules},
puede mover su código a un programa separado usando el procedimiento
@code{program-file} del módulo @code{(guix gexp)}
(@pxref{Expresiones-G}). El siguiente ejemplo ilustra este caso.

@lisp
(define %tarea-alerta-bateria
  ;; Pita cuando la carga de la batería es inferior a %CARGA-MIN
  #~(job
     '(next-minute (range 0 60 1))
     #$(program-file
        "alerta-batería.scm"
        (with-imported-modules (source-module-closure
                                '((guix build utils)))
          #~(begin
              (define %carga-min 20)
              (use-modules (guix build utils)
                           (ice-9 popen)
                           (ice-9 regex)
                           (ice-9 textual-ports)
                           (srfi srfi-2))
              (setenv "LC_ALL" "C")     ;Procesado de cadenas en inglés
              (and-let* ((entrada (open-pipe*
                                   OPEN_READ
                                   #$(file-append acpi "/bin/acpi")))
                         (salida (get-string-all entrada))
                         (m (string-match "Discharging, ([0-9]+)%" output))
                         (carga (string->number (match:substring m 1)))
                         ((< carga %carga-min)))
                (setenv "LC_ALL" "")     ;Mensaje de salida traducido
                (format #t "aviso: La carga de la batería es baja (~a%)~%"
                        carga)
                (invoke #$(file-append beep "/bin/beep") "-r5")))))))
@end lisp

@xref{Guile Syntax, mcron job specifications,, mcron, GNU@tie{}mcron}, para
más información sobre las especificaciones de trabajos de mcron. A
continuación se encuentra la referencia del servicio mcron.

En un sistema en ejecución puede usar la acción @code{schedule} del servicio
para visualizar los siguientes trabajos mcron que se ejecutarán:

@example
# herd schedule mcron
@end example

@noindent
El ejemplo previo enumera las siguientes cinco tareas que se ejecutarán,
pero también puede especificar el número de tareas a mostrar:

@example
# herd schedule mcron 10
@end example

@defvr {Variable Scheme} mcron-service-type
Este es el tipo del servicio @code{mcron}, cuyo valor es un objeto
@code{mcron-configuration}.

Este tipo de servicio puede ser objeto de una extensión de servicio que le
proporciona especificaciones de trabajo adicionales (@pxref{Composición de servicios}). En otras palabras, es posible definir servicios que
proporcionen trabajos mcron adicionales para su ejecución.
@end defvr

@deftp {Tipo de datos} mcron-configuration
Tipo de datos que representa la configuración de mcron.

@table @asis
@item @code{mcron} (predeterminado: @var{mcron})
El paquete mcron usado.

@item @code{jobs}
Es una lista de expresiones-G (@pxref{Expresiones-G}), donde cada
expresión-G corresponde a una especificación de trabajo de mcron
(@pxref{Syntax, mcron job specifications,, mcron, GNU@tie{}mcron}).
@end table
@end deftp


@node Rotación del registro de mensajes
@subsection Rotación del registro de mensajes

@cindex rottlog
@cindex rotación de logs
@cindex logging
Los ficheros de registro como los encontrados en @file{/var/log} tienden a
crecer indefinidamente, de modo que es buena idea @dfn{llevar a cabo una
rotación} de vez en cuando---es decir, archivar su contenido en ficheros
distintos, posiblemente comprimidos. El módulo @code{(gnu services admin)}
proporciona una interfaz con GNU@tie{}Rot[t]log, una herramienta de rotación
de registros (@pxref{Top,,, rottlog, GNU Rot[t]log Manual}).

Este servicio es parte de @code{%base-services}, y por lo tanto se activa de
manera predeterminada, con la configuración predeterminada, para ficheros de
registro que se pueden encontrar habitualmente. El siguiente ejemplo muestra
como extenderlo con una @dfn{rotación} adicional, en caso de que deba
hacerlo (habitualmente los servicios que producen ficheros de registro ya lo
hacen ellos mismos):

@lisp
(use-modules (guix) (gnu))
(use-service-modules admin)

(define mis-ficheros-de-registro
  ;; Ficheros que deseo rotar.
  '("/var/log/un-fichero.log" "/var/log/otro.log"))

(operating-system
  ;; @dots{}
  (services (cons (simple-service 'rota-mis-cosas
                                  rottlog-service-type
                                  (list (log-rotation
                                         (frequency 'daily)
                                         (files mis-ficheros-de-registro))))
                  %base-services)))
@end lisp

@defvr {Variable Scheme} rottlog-service-type
Este es el tipo del servicio Rottlog, cuyo valor es un objeto
@code{rottlog-configuration}.

Otros servicios pueden extenderlo con nuevos objetos @code{log-rotation}
(véase a continuación), aumentando de dicho modo el conjunto de ficheros a
rotar.

Este servicio puede definir trabajos de mcron (@pxref{Ejecución de tareas programadas}) para ejecutar el servicio rottlog.
@end defvr

@deftp {Tipo de datos} rottlog-configuration
Tipo de datos que representa la configuración de rottlog.

@table @asis
@item @code{rottlog} (predeterminado: @code{rottlog})
El paquete Rottlog usado.

@item @code{rc-file} (predeterminado: @code{(file-append rottlog "/etc/rc")})
El fichero de configuración de Rottlog usado (@pxref{Mandatory RC
Variables,,, rottlog, GNU Rot[t]log Manual}).

@item @code{rotations} (predeterminadas: @code{%default-rotations})
Una lista de objetos @code{log-rotation} como se define a continuación.

@item @code{jobs}
Esta es una lista de expresiones-G donde cada expresión-G corresponde a una
especificación de trabajo de mcron (@pxref{Ejecución de tareas programadas}).
@end table
@end deftp

@deftp {Tipo de datos} log-rotation
Tipo de datos que representa la rotación de un grupo de ficheros de log.

Tomando el ejemplo del manual de Rottlog (@pxref{Period Related File
Examples,,, rottlog, GNU Rot[t]log Manual}), una rotación de registros se
podría definir de esta manera:

@lisp
(log-rotation
  (frequency 'daily)
  (files '("/var/log/apache/*"))
  (options '("storedir apache-archives"
             "rotate 6"
             "notifempty"
             "nocompress")))
@end lisp

La lista de campos es como sigue:

@table @asis
@item @code{frequency} (predeterminada: @code{'weekly})
La frecuencia de rotación de logs, un símbolo.

@item @code{files}
La lista de ficheros o patrones extendidos de fichero a rotar.

@item @code{options} (predeterminadas: @code{'()})
La lista de opciones de rottlog para esta rotación (@pxref{Configuration
parameters,,, rottlog, GNU Rot[t]log Manual}).

@item @code{post-rotate} (predeterminado: @code{#f})
O bien @code{#f}, o bien una expresión-G que se ejecutará una vez la
rotación se haya completado.
@end table
@end deftp

@defvr {Variable Scheme} %default-rotations
Specifies weekly rotation of @code{%rotated-files} and of
@file{/var/log/guix-daemon.log}.
@end defvr

@defvr {Variable Scheme} %rotated-files
La lista de ficheros controlados por syslog que deben ser rotados. De manera
predeterminada es @code{'("/var/log/messages" "/var/log/secure"
"/var/log/maillog")}.
@end defvr

@node Servicios de red
@subsection Servicios de red

El módulo @code{(gnu services networking)} proporciona servicios para
configurar la interfaz de red.

@cindex DHCP, servicio de red
@defvr {Variable Scheme} dhcp-client-service-type
Este es el tipo de los servicios que ejecutan @var{dhcp}, un cliente del
protocolo de configuración dinámica de máquinas DHCP, en todas las
interfaces de red no locales. Su valor es el paquete del cliente DHCP,
@code{isc-dhcp} de manera predeterminada.
@end defvr

@deffn {Procedimiento Scheme} dhcpd-service-type
Este tipo define un servicio que ejecuta el daemon DHCP. Para crear un
servicio de este tipo debe proporcionar un objeto
@code{<dhcpd-configuration>}. Por ejemplo:

@lisp
(service dhcpd-service-type
         (dhcpd-configuration
          (config-file (local-file "mi-dhcpd.conf"))
          (interfaces '("enp0s25"))))
@end lisp
@end deffn

@deftp {Tipo de datos} dhcpd-configuration
@table @asis
@item @code{package} (predeterminado: @code{isc-dhcp})
El paquete que proporciona el daemon DHCP. Se espera que este paquete
proporcione el daemon en @file{sbin/dhcpd} de manera relativa a su
directorio de salida. El paquete predeterminado es el
@uref{https://www.isc.org/products/DHCP, servidor DHCP de ISC}.
@item @code{config-file} (predeterminado: @code{#f})
El fichero de configuración usado. Esta opción es necesaria. Se le
proporcionará a @code{dhcpd} a través de su opción @code{-cf}. Puede ser
cualquier objeto ``tipo-fichero'' (@pxref{Expresiones-G, objetos
``tipo-fichero''}). Véase @code{man dhcpd.conf} para detalles sobre la
sintaxis del fichero de configuración.
@item @code{version} (predeterminada: @code{"4"})
La versión DHCP usada. El servidor DHCP de ISC permite los valores ``4'',
``6'' y ``4o6''. Corresponden con las opciones @code{-4}, @code{-6} y
@code{-4o6} del programa @code{dhcpd}. Véase @code{man dhcpd} para más
detalles.
@item @code{run-directory} (predeterminado: @code{"/run/dhcpd"})
El directorio de ejecución usado. Durante la activación del servicio se
creará en caso de no existir.
@item @code{pid-file} (predeterminado: @code{"/run/dhcpd/dhcpd.pid"})
El fichero de PID usado. Corresponde con la opción @code{-pf} de
@code{dhcpd}. Véase @code{man dhcpd} para más detalles.
@item @code{interfaces} (predeterminadas: @code{'()})
Los nombres de las interfaces de red en las que dhcpd debería esperar
retransmisiones. Si la lista no está vacía, entonces sus elementos (que
deben ser cadenas) se añadirá a la invocación de @code{dhcpd} cuando se
inicie el daemon. Puede no ser necesaria la especificación explícita aquí de
ninguna interfaz; véase @code{man dhcpd} para más detalles.
@end table
@end deftp

@defvr {Variable Scheme} static-networking-service-type
@c TODO Document <static-networking> data structures.
Este es el tipo para las interfaces de red configuradas de forma estática.
@end defvr

@deffn {Procedimiento Scheme} static-networking-service @var{interfaz} @var{ip} @
       [#:netmask #f] [#:gateway #f] [#:name-servers @code{'()}] @ [#:requirement
@code{'(udev)}]
Devuelve un servicio que activa la @var{interfaz} con la dirección
@var{ip}. Si @var{netmask} es verdadero, se usa como máscara de red. Si
@var{gateway} es verdadero, se usa como cadena que especifica la pasarela
predeterminada de la red. @var{requirement} puede usarse para especificar
una dependencia en otro servicio antes de configurar la interfaz.

Se puede llamar a este procedimiento varias veces, una por cada interfaz de
red sobre la que se tenga interés. Internamente, lo que hace es extender
@code{static-networking-service-type} con interfaces de red adicionales que
gestionar.

Por ejemplo:

@lisp
(static-networking-service "eno1" "192.168.1.82"
                           #:gateway "192.168.1.2"
                           #:name-servers '("192.168.1.2"))
@end lisp
@end deffn

@cindex wicd
@cindex sin cables
@cindex WiFi
@cindex gestión de red
@deffn {Procedimiento Scheme} wicd-service [#:wicd @var{wicd}]
Devuelve un servicio que ejecuta @url{https://launchpad.net/wicd,Wicd}, un
daemon de gestión de red que intenta simplificar la gestión de redes
cableadas e inalámbricas.

Este servicio añade @var{wicd} al perfil global, proporcionando varias
ordenes destinadas a la interacción con el daemon y a la configuración de la
red: @command{wicd-client}, una interfaz gráfica, y las interfaces de
usuaria @command{wicd-cli} y @command{wicd-curses}.
@end deffn

@cindex ModemManager

@defvr {Variable Scheme} modem-manager-service-type
Este es el tipo de servicio para el servicio
@uref{https://wiki.gnome.org/Projects/ModemManager, ModemManager}. El valor
para este tipo de servicio es un registro
@code{modem-manager-configuration}.

Este servicio es parte de @code{%desktop-services} (@pxref{Servicios de escritorio}).
@end defvr

@deftp {Tipo de datos} modem-manager-configuration
Tipo de datos que representa la configuración de ModemManager.

@table @asis
@item @code{modem-manager} (predeterminado: @code{modem-manager})
El paquete de ModemManager usado.

@end table
@end deftp

@cindex USB_ModeSwitch
@cindex Cambio de modo (modeswitch)

@defvr {Variable Scheme} usb-modeswitch-service-type
Este es el tipo de servicio para el servicio
@uref{https://www.draisberghof.de/usb_modeswitch/, USB_ModeSwitch}. El valor
para este tipo de servicio es un registro
@code{usb-modeswitch-configuration}.

Cuando se conectan, algunos modem USB (y otros dispositivos USB) se
presentan inicialmente como medios de almacenamiento de sólo-lectura y no
como un modem. Deben @dfn{cambiar de modo} antes de poder usarse. El tipo de
servicio USB_ModeSwitch instala reglas de udev para cambiar automáticamente
de modo cuando se conecten estos dispositivos.

Este servicio es parte de @code{%desktop-services} (@pxref{Servicios de escritorio}).
@end defvr

@deftp {Tipo de datos} usb-modeswitch-configuration
Tipo de datos que representa la configuración de USB_ModeSwitch.

@table @asis
@item @code{usb-modeswitch} (predeterminado: @code{usb-modeswitch})
El paquete USB_ModeSwitch que proporciona los binarios para el cambio de
modo.

@item @code{usb-modeswitch-data} (predeterminado: @code{usb-modeswitch-data})
El paquete que proporciona los datos de dispositivos y las reglas de udev
usadas por USB_ModeSwitch.

@item @code{config-file} (predeterminado: @code{#~(string-append #$usb-modeswitch:dispatcher "/etc/usb_modeswitch.conf")})
Fichero de configuración usado para el gestor de eventos (dispatcher) de
USB_ModeSwitch. De manera predeterminada se usa el fichero que viene con
USB_ModeSwitch, que deshabilita el registro en @file{/var/log} junto a otras
configuraciones. Si se proporciona @code{#f} no se usa ningún fichero de
configuración. 

@end table
@end deftp

@cindex NetworkManager

@defvr {Variable Scheme} network-manager-service-type
Este es el tipo de servicio para el servicio
@uref{https://wiki.gnome.org/Projects/NetworkManager, NetworkManager}. El
valor para este tipo de servicio es un registro
@code{network-manager-configuration}.

Este servicio es parte de @code{%desktop-services} (@pxref{Servicios de escritorio}).
@end defvr

@deftp {Tipo de datos} network-manager-configuration
Tipo de datos que representa la configuración de NetworkManager.

@table @asis
@item @code{network-manager} (predeterminado: @code{network-manager})
El paquete de NetworkManager usado.

@item @code{dns} (predeterminado: @code{"default"})
Modo de procesamiento para DNS, que afecta la manera en la que
NetworkManager usa el fichero de configuración @code{resolv.conf}.

@table @samp
@item default
NetworkManager actualizará @code{resolv.conf} para reflejar los servidores
de nombres proporcionados por las conexiones activas actualmente.

@item dnsmasq
NetworkManager ejecutará @code{dnsmasq} como una caché local del servicio de
nombres, mediante un @dfn{reenvío condicional} si se encuentra conectada a
una VPN, y actualiza posteriormente @code{resolv.conf} para apuntar al
servidor de nombres local.

Con esta configuración puede compartir su conexión de red. Por ejemplo,
cuando desee compartir su conexión de red a otro equipo a través de un cable
Ethernet, puede abrir @command{nm-connection-editor} y configurar el método
de la conexión cableada para IPv4 y IPv6 ``Compartida con otros equipos'' y
restablecer la conexión (o reiniciar).

También puede configurar una @dfn{conexión anfitrión-invitado} a las
máquinas virtuales de QEMU (@pxref{Instalación de Guix en una máquina virtual}).  Con una
conexión anfitrión-invitado puede, por ejemplo, acceder a un servidor web
que se ejecute en la máquina virtual (@pxref{Servicios Web}) desde un
navegador web en su sistema anfitrión, o conectarse a la máquina virtual a
través de SSH (@pxref{Servicios de red,
@code{openssh-service-type}}). Para configurar una conexión
anfitrión-invitado, ejecute esta orden una única vez:

@example
nmcli connection add type tun \
 connection.interface-name tap0 \
 tun.mode tap tun.owner $(id -u) \
 ipv4.method shared \
 ipv4.addresses 172.28.112.1/24
@end example

Cada vez que arranque su máquina virtual de QEMU (@pxref{Ejecutar Guix en una máquina virtual}), proporcione @option{-nic tap,ifname=tap0,script=no,downscript=no} a
@command{qemu-system-...}.

@item none
NetworkManager no modificará @code{resolv.conf}.
@end table

@item @code{vpn-plugins} (predeterminados: @code{'()})
Esta es la lista de módulos disponibles para redes privadas virtuales
(VPN). Un ejemplo es el paquete @code{network-manager-openvpn}, que permite
a NetworkManager la gestión de redes VPN a través de OpenVPN.

@end table
@end deftp

@cindex Connman
@deffn {Variable Scheme} connman-service-type
Este es el tipo de servicio para la ejecución de
@url{https://01.org.connman,Connman}, un gestor de conexiones de red.

Su valor debe ser un registro @code{connman-configuration} como en este
ejemplo:

@lisp
(service connman-service-type
         (connman-configuration
           (disable-vpn? #t)))
@end lisp

Véase a continuación más detalles sobre @code{connman-configuration}.
@end deffn

@deftp {Tipo de datos} connman-configuration
Tipo de datos que representa la configuración de connman.

@table @asis
@item @code{connman} (predeterminado: @var{connman})
El paquete connman usado.

@item @code{disable-vpn?} (predeterminado: @code{#f})
Cuando es verdadero, desactiva el módulo vpn de connman.
@end table
@end deftp

@cindex WPA Supplicant
@defvr {Variable Scheme} wpa-supplicant-service-type
Este es el tipo de servicio para la ejecución de
@url{https://w1.fi/wpa_supplicant/,WPA supplicant}, un daemon de
identificación necesario para la identificación en redes WiFi o ethernet
cifradas.
@end defvr

@deftp {Tipo de datos} wpa-supplicant-configuration
Tipo de datos que representa la configuración de WPA Supplicant.

Toma los siguientes parámetros:

@table @asis
@item @code{wpa-supplicant} (predeterminado: @code{wpa-supplicant})
El paquete de WPA Supplicant usado.

@item @code{dbus?} (predeterminado: @code{#t})
Si se escuchan o no peticiones en D-Bus.

@item @code{pid-file} (predeterminado: @code{"/var/run/wpa_supplicant.pid"})
Dónde se almacena el fichero con el PID.

@item @code{interface} (predeterminado: @code{#f})
En caso de proporcionarse un valor, debe especificar el nombre de la
interfaz de red que WPA supplicant controlará.

@item @code{config-file} (predeterminado: @code{#f})
Fichero de configuración opcional usado.

@item @code{extra-options} (predeterminadas: @code{'()})
Lista de parámetros adicionales a pasar al daemon en la línea de órdenes.
@end table
@end deftp

@cindex hostapd service, for Wi-Fi access points
@cindex Wi-Fi access points, hostapd service
@defvr {Scheme Variable} hostapd-service-type
This is the service type to run the @uref{https://w1.fi/hostapd/, hostapd}
daemon to set up WiFi (IEEE 802.11) access points and authentication
servers.  Its associated value must be a @code{hostapd-configuration} as
shown below:

@lisp
;; Use wlan1 to run the access point for "My Network".
(service hostapd-service-type
         (hostapd-configuration
          (interface "wlan1")
          (ssid "My Network")
          (channel 12)))
@end lisp
@end defvr

@deftp {Data Type} hostapd-configuration
This data type represents the configuration of the hostapd service, with the
following fields:

@table @asis
@item @code{package} (default: @code{hostapd})
The hostapd package to use.

@item @code{interface} (default: @code{"wlan0"})
The network interface to run the WiFi access point.

@item @code{ssid}
The SSID (@dfn{service set identifier}), a string that identifies this
network.

@item @code{broadcast-ssid?} (default: @code{#t})
Whether to broadcast this SSID.

@item @code{channel} (default: @code{1})
The WiFi channel to use.

@item @code{driver} (default: @code{"nl80211"})
The driver interface type.  @code{"nl80211"} is used with all Linux mac80211
drivers.  Use @code{"none"} if building hostapd as a standalone RADIUS
server that does # not control any wireless/wired driver.

@item @code{extra-settings} (predeterminado: @code{""})
Extra settings to append as-is to the hostapd configuration file.  See
@uref{https://w1.fi/cgit/hostap/plain/hostapd/hostapd.conf} for the
configuration file reference.
@end table
@end deftp

@defvr {Scheme Variable} simulated-wifi-service-type
This is the type of a service to simulate WiFi networking, which can be
useful in virtual machines for testing purposes.  The service loads the
Linux kernel
@uref{https://www.kernel.org/doc/html/latest/networking/mac80211_hwsim/mac80211_hwsim.html,
@code{mac80211_hwsim} module} and starts hostapd to create a pseudo WiFi
network that can be seen on @code{wlan0}, by default.

The service's value is a @code{hostapd-configuration} record.
@end defvr

@cindex iptables
@defvr {Variable Scheme} iptables-service-type
Este es el tipo de servicio para la aplicación de configuración de
iptables. iptables es un entorno de trabajo para el filtrado de paquetes
implementado por el núcleo Linux. Este servicio permite la configuración de
iptables tanto para IPv4 como IPv6. Un ejemplo simple de cómo rechazar todas
las conexiones entrantes excepto aquellas al puerto 22 de ssh se muestra a
continuación.

@lisp
(service iptables-service-type
         (iptables-configuration
          (ipv4-rules (plain-file "reglas.iptables" "*filter
:INPUT ACCEPT
:FORWARD ACCEPT
:OUTPUT ACCEPT
-A INPUT -p tcp --dport 22 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-port-unreachable
COMMIT
"))
          (ipv6-rules (plain-file "reglas.ip6tables" "*filter
:INPUT ACCEPT
:FORWARD ACCEPT
:OUTPUT ACCEPT
-A INPUT -p tcp --dport 22 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp6-port-unreachable
COMMIT
"))))
@end lisp
@end defvr

@deftp {Tipo de datos} iptables-configuration
El tipo de datos que representa la configuración de iptables.

@table @asis
@item @code{iptables} (predeterminado: @code{iptables})
El paquete iptables que proporciona @code{iptables-restore} y
@code{ip6tables-restore}.
@item @code{ipv4-rules} (predeterminado: @code{%iptables-accept-all-rules})
Las reglas de iptables usadas. Se le proporcionarán a
@code{iptables-restore}. Puede ser cualquier objeto ``tipo-fichero''
(@pxref{Expresiones-G, objetos ``tipo-fichero''}).
@item @code{ipv6-rules} (predeterminadas: @code{%iptables-accept-all-rules})
Las reglas de ip6tables usadas. Se le proporcionarán a
@code{ip6tables-restore}. Puede ser cualquier objeto ``tipo-fichero''
(@pxref{Expresiones-G, objetos ``tipo-fichero''}).
@end table
@end deftp

@cindex nftables
@defvr {Variable Scheme} nftables-service-type
Es el tipo de servicio para levantar una configuración de nftables. nftables
es un proyecto de netfilter que quiere reemplazar los entornos ya existentes
iptables, ip6tables, arptables y ebtables. Proporciona un entorno de
filtrado de paquetes nuevo, una utilidad @command{nft} de espacio de usuaria
nueva y una capa de compatibilidad con iptables. El servicio viene con un
conjunto de reglas predeterminado @code{%default-nftables-ruleset} que
rechaza todas las conexiones entrantes excepto las del puerto 22. Para
usarlo, simplemente escriba:

@lisp
(service nftables-service-type)
@end lisp
@end defvr

@deftp {Tipo de datos} nftables-configuration
El tipo de datos que representa la configuración de nftables.

@table @asis
@item @code{package} (predeterminado: @code{nftables})
El paquete nftables que proporciona @command{nft}.
@item @code{ruleset} (predeterminados: @code{%default-nftables-ruleset})
El conjunto de reglas de nftables usado. Puede ser cualquier objeto
``tipo-fichero'' (@pxref{Expresiones-G, objetos ``tipo-fichero''}).
@end table
@end deftp

@cindex NTP (protocolo de tiempo de red), servicio
@cindex ntpd, servicio para el daemon del protocolo de tiempo de red NTP
@cindex reloj de tiempo real
@defvr {Variable Scheme} ntp-service-type
Este es el tipo del servicio que ejecuta el daemon del
@uref{https://www.ntp.org, protocolo de tiempo en red (NTP)},
@command{ntpd}. El daemon mantendrá el reloj del sistema sincronizado con el
de los servidores NTP especificados.

El valor de este servicio es un objeto @code{ntpd-configuration}, como se
describe a continuación.
@end defvr

@deftp {Tipo de datos} ntp-configuration
Este es el tipo de datos para la configuración del servicio NTP.

@table @asis
@item @code{servers} (predeterminados: @code{%ntp-servers})
La lista de servidores (registros @code{<ntp-server>}) con los que la
herramienta @command{ntpd} se sincronizará. Véase la información sobre el
tipo de datos @code{ntp-server} a continuación.

@item @code{allow-large-adjustment?} (predeterminado: @code{#t})
Esto determina si se le permite a @command{ntpd} realizar un ajuste inicial
de más de 1000 segundos.

@item @code{ntp} (predeterminado: @code{ntp})
El paquete NTP usado.
@end table
@end deftp

@defvr {Variable Scheme} %ntp-servers
Lista de nombres de máquinas usadas como servidores NTP predeterminados. Son
servidores del @uref{https://www.ntppool.org/en/, NTP Pool Project}.
@end defvr

@deftp {Tipo de datos} ntp-server
Tipo de datos que representa la configuración de un servidor NTP.

@table @asis
@item @code{type} (predeterminado: @code{'server})
El tipo del servidor NTP, proporcionado como un símbolo. Puede ser
@code{'pool}, @code{'server}, @code{'peer}, @code{'broadcast} o
@code{'manycastclient}.

@item @code{address}
La dirección del servidor, como una cadena.

@item @code{options}
Opciones de NTPD usadas en ese servidor específico, proporcionada como una
lista de nombres de opciones y/o tuplas de nombre y valor. El siguiente
ejemplo define un servidor con el que se usan las opciones @option{iburst} y
@option{prefer}, así como @option{version} 3 y un tiempo de 16 segundos para
@option{maxpoll}.

@example
(ntp-server
 (type 'server)
 (address "miservidor.ntp.server.org")
 (options `(iburst (version 3) (maxpoll 16) prefer))))
@end example
@end table
@end deftp

@cindex OpenNTPD
@deffn {Procedimiento Scheme} openntpd-service-type
Ejecuta @command{ntpd}, el daemon del protocolo de tiempo en red (NTP),
implementado por @uref{http://www.openntpd.org, OpenNTPD}. El daemon
mantendrá el reloj del sistema sincronizado con el de los servidores
proporcionados.

@lisp
(service
 openntpd-service-type
 (openntpd-configuration
  (listen-on '("127.0.0.1" "::1"))
  (sensor '("udcf0 correction 70000"))
  (constraint-from '("www.gnu.org"))
  (constraints-from '("https://www.google.com/"))
  (allow-large-adjustment? #t)))

@end lisp
@end deffn

@defvr {Variable Scheme} %openntpd-servers
This variable is a list of the server addresses defined in
@code{%ntp-servers}.
@end defvr

@deftp {Tipo de datos} openntpd-configuration
@table @asis
@item @code{openntpd} (predeterminado: @code{(file-append openntpd "/sbin/ntpd")})
El ejecutable openntpd usado.
@item @code{listen-on} (predeterminadas: @code{'("127.0.0.1" "::1")})
Una lista de direcciones IP o nombres de máquina en los que el daemon ntpd
debe escuchar conexiones.
@item @code{query-from} (predeterminadas: @code{'()})
Una lista de direcciones IP locales que el daemon ntpd debe usar para
consultas salientes.
@item @code{sensor} (predeterminados: @code{'()})
Especifica una lista de dispositivos de sensores de tiempo de ntpd debería
usar. @code{ntpd} escuchará cada sensor que realmente exista e ignora los
que no. Véase la @uref{https://man.openbsd.org/ntpd.conf, documentación de
las desarrolladoras originales} para más información.
@item @code{server} (predeterminado: @code{'()})
Especifica una lista de direcciones IP o nombres de máquina de servidores
NTP con los que sincronizarse.
@item @code{servers} (default: @code{%openntp-servers})
Una lista de direcciones IP o nombres de máquina con los que el daemon ntpd
se debe sincronizar.
@item @code{constraint-from} (predeterminado: @code{'()})
@code{ntpd} puede configurarse para que solicite la fecha a través del campo
``Date'' de servidores HTTPS en los que se confíe a través de TLS. Esta
información de tiempo no se usa por precisión pero actúa como una condición
verificada, por tanto reduciendo el impacto de ataques mediante la
intervención del tráfico con servidores NTP no verificados. Especifica una
lista de URL, direcciones IP o nombres de máquina de servidores HTTPS que
proporcionarán la condición.
@item @code{constraints-from} (predeterminadas: @code{'()})
Como en @var{constraint-from}, proporciona una lista de URL, direcciones IP
o nombres de máquina de servidores HTTP para proporcionar la condición. En
caso de que el nombre de máquina resuelva en múltiples direcciones IP,
@code{ntpd} calculará la condición mediana de todas ellas.
@item @code{allow-large-adjustment?} (predeterminado: @code{#f})
Determina si se permite a @code{ntpd} realizar un ajuste inicial de más de
180 segundos.
@end table
@end deftp

@cindex inetd
@deffn {Variable Scheme} inetd-service-type
Este servicio ejecuta el daemon @command{inetd} (@pxref{inetd invocation,,,
inetutils, GNU Inetutils}). @command{inetd} escucha conexiones en sockets de
internet, e inicia bajo demanda el programa servidor cuando se realiza una
conexión en uno de esos sockets.

El valor de este servicio es un objeto @code{inetd-configuration}. El
ejemplo siguiente configura el daemon @command{inetd} para proporcionar el
servicio @command{echo} implementado por él mismo, así como un servicio smtp
que reenvía el tráfico smtp por ssh a un servidor @code{servidor-smtp} tras
la pasarela @code{máquina}:

@lisp
(service
 inetd-service-type
 (inetd-configuration
  (entries (list
            (inetd-entry
             (name "echo")
             (socket-type 'stream)
             (protocol "tcp")
             (wait? #f)
             (user "root"))
            (inetd-entry
             (node "127.0.0.1")
             (name "smtp")
             (socket-type 'stream)
             (protocol "tcp")
             (wait? #f)
             (user "root")
             (program (file-append openssh "/bin/ssh"))
             (arguments
              '("ssh" "-qT" "-i" "/ruta/de/la/clave_ssh"
                "-W" "servidor-smtp:25" "usuaria@@maquina")))))))
@end lisp

A continuación se proporcionan más detalles acerca de
@code{inetd-configuration}.
@end deffn

@deftp {Tipo de datos} inetd-configuration
Tipo de datos que representa la configuración de @command{inetd}.

@table @asis
@item @code{program} (predeterminado: @code{(file-append inetutils "/libexec/inetd")})
El ejecutable @command{inetd} usado.

@item @code{entries} (predeterminadas: @code{'()})
Una lista de entradas de servicio de @command{inetd}. Cada entrada debe
crearse con el constructor @code{inted-entry}.
@end table
@end deftp

@deftp {Tipo de datos} inetd-entry
Tipo de datos que representa una entrada en la configuración de
@command{inetd}. Cada entrada corresponde a un socket en el que
@command{inetd} escuchará a la espera de peticiones.

@table @asis
@item @code{node} (predeterminado: @code{#f})
Cadena opcional, una lista separada por comas de direcciones locales que
@command{inetd} debería usar cuando se escuche para este
servicio. @xref{Configuration file,,, inetutils, GNU Inetutils} para una
descripción completa de todas las opciones.
@item @code{name}
Una cadena, el nombre debe corresponder con una entrada en
@code{/etc/services}.
@item @code{socket-type}
Puede ser @code{'stream}, @code{'dgram}, @code{'raw}, @code{'rdm} o
@code{'seqpacket}.
@item @code{protocol}
Una cadena, debe corresponder con una entrada en @code{/etc/protocols}.
@item @code{wait?} (predeterminado: @code{#t})
Si @command{inetd} debe esperar la salida del servidor antes de reiniciar la
escucha de nuevas peticiones de servicio.
@item @code{user}
Una cadena que contiene el nombre (y, opcionalmente, el grupo) de la usuaria
como la que se deberá ejecutar el servidor. El nombe de grupo se puede
especificar en un sufijo, separado por dos puntos o un punto normal, es
decir @code{"usuaria"}, @code{"usuaria:grupo"} o @code{"usuaria.grupo"}.
@item @code{program} (predeterminado: @code{"internal"})
El programa servidor que recibirá las peticiones, o @code{"internal"} si
@command{inetd} debería usar un servicio implementado internamente.
@item @code{arguments} (predeterminados: @code{'()})
Una lista de cadenas u objetos ``tipo-fichero'', que serán los parámetros
del programa servidor, empezando con el parámetro 0, es decir, el nombre del
programa en sí mismo. Para los servicios internos de @command{inetd}, esta
entrada debe ser @code{'()} o @code{'("internal")}.
@end table

@xref{Configuration file,,, inetutils, GNU Inetutils}, para una información
más detallada sobre cada campo de la configuración.
@end deftp

@cindex Tor
@defvr {Variable Scheme} tor-service-type
Este es el tipo para un servicio que ejecuta el daemon de red anónima
@uref{https://torproject.org, Tor}. El servicio se configura mediante un
registro @code{<tor-configuration>}. De manera predeterminada, el daemon Tor
se ejecuta como la usuaria sin privilegios @code{tor}, que es miembro del
grupo @code{tor}.

@end defvr

@deftp {Tipo de datos} tor-configuration
@table @asis
@item @code{tor} (predeterminado: @code{tor})
El paquete que proporciona el daemon Tor. Se espera que este paquete
proporcione el daemon en @file{bin/tor} de manera relativa al directorio de
su salida. El paquete predeterminado es la implementación del
@uref{https://www.torproject.org, Proyecto Tor}.

@item @code{config-file} (predeterminado: @code{(plain-file "empty" "")})
El fichero de configuración usado. Se agregará al final del fichero de
configuración predeterminado, y se proporcionará el fichero de configuración
resultante a @code{tor} a través de su opción @code{-f}. Puede ser cualquier
objeto ``tipo-fichero'' (@pxref{Expresiones-G, objetos
``tipo-fichero''}). Véase @code{man tor} para detalles sobre la sintaxis del
fichero de configuración.

@item @code{hidden-services} (predeterminados: @code{'()})
La lista de registros de servicios ocultos @code{<hidden-service>}
usados. Para cada servicio oculto que añada en esta lista, se activará la
configuración apropiada para su activación en el fichero de configuración
predeterminado. Puede crear registros @code{<hidden-service>} de manera
conveniente mediante el uso del procedimiento @code{tor-hidden-service}
descrito a continuación.

@item @code{socks-socket-type} (predeterminado: @code{'tcp})
El tipo socket predeterminado que Tor debe usar para su socket SOCKS. Debe
ser @code{'tcp} i @code{'unix}. Si es @code{'tcp}, Tor escuchará en el
puerto TCP 9050 de la interfaz local (es decir, localhost) de manera
predeterminada. Si es @code{'unix}, tor escuchará en el socket de dominio de
UNIX @file{/var/run/tor/socks-sock}, que tendrá permisos de escritura para
miembros del grupo @code{tor}.

Si desea personalizar el socket SOCKS de manera más detallada, mantenga
@code{socks-socket-type} con su valor predeterminado de @code{'tcp} y use
@code{config-file} para modificar el valor predeterminado proporcionando su
propia opción @code{SocksPort}.
@end table
@end deftp

@cindex servicio oculto
@deffn {Procedimiento Scheme} tor-hidden-service @var{nombre} @var{relación}
Define un @dfn{servicio oculto} Tor llamado @var{nombre} y que implementa la
@var{relación}. @var{relación} es una lista de tuplas puerto/máquina, como:

@example
 '((22 "127.0.0.1:22")
   (80 "127.0.0.1:8080"))
@end example

En este ejemplo, el puerto 22 del servicio oculto se asocia con el puerto 22
local, y el puerto 80 se asocia con el puerto 8080 local.

Esto crea un directorio @file{/var/lib/tor/hidden-services/@var{nombre}},
donde el fichero @file{hostname} contiene el nombre de máquina @code{.onion}
para el servicio oculto.

Véase @uref{https://www.torproject.org/docs/tor-hidden-service.html.en, la
documentación del proyecto Tor} para más información.
@end deffn

El módulo @code{(gnu services rsync)} proporciona los siguientes servicios:

Puede ser que desee un daemon rsync si tiene ficheros que desee tener
disponibles de modo que cualquiera (o simplemente usted) pueda descargar
ficheros existentes o subir nuevos ficheros.

@deffn {Variable Scheme} rsync-service-type
Este es el tipo de servicio para el daemon @uref{https://rsync.samba.org,
rsync}. El valor tipo de servicio es un registro
@command{rsync-configuration} como en este ejemplo.

@lisp
(service rsync-service-type)
@end lisp

Véase a continuación para detalles sobre @code{rsync-configuration}.
@end deffn

@deftp {Tipo de datos} rsync-configuration
Tipo de datos que representa la configuración para @code{rsync-service}.

@table @asis
@item @code{package} (predeterminado: @var{rsync})
Paquete @code{rsync} usado.

@item @code{port-number} (predeterminado: @code{873})
Puerto TCP en el que @command{rsync} escucha conexiones entrantes. Si el
puerto es menor a @code{1024}, @command{rsync} necesita iniciarse como
@code{root}, tanto usuaria como grupo.

@item @code{pid-file} (predeterminado: @code{"/var/run/rsyncd/rsyncd.pid"})
Nombre del fichero donde @command{rsync} escribe su PID.

@item @code{lock-file} (predeterminado: @code{"/var/run/rsyncd/rsyncd.lock"})
Nombre del fichero donde @command{rsync} escribe su fichero de bloqueo.

@item @code{log-file} (predeterminado: @code{"/var/log/rsyncd.log"})
Nombre del fichero donde @command{rsync} escribe su fichero de registros.

@item @code{use-chroot?} (predeterminado: @var{#t})
Si se debe usar ``chroot'' en el directorio compartido de @command{rsync}.

@item @code{share-path} (predeterminado: @file{/srv/rsync})
Localización del directorio compartido de @command{rsync}.

@item @code{share-comment} (predeterminado: @code{"Rsync share"})
Comentario del directorio compartido de @command{rsync}.

@item @code{read-only?} (predeterminado: @var{#f})
Permisos de lectura/escritura en el directorio compartido.

@item @code{timeout} (predeterminado: @code{300})
Plazo de la E/S en segundos.

@item @code{user} (predeterminada: @var{"root"})
Propietaria del proceso @code{rsync}.

@item @code{group} (predeterminado: @var{"root"})
Grupo del proceso @code{rsync}.

@item @code{uid} (predeterminado: @var{"rsyncd"})
Nombre o ID de usuaria bajo la cual se efectúan las transferencias desde y
hacia el módulo cuando el daemon se ejecuta como @code{root}.

@item @code{gid} (predeterminado: @var{"rsyncd"})
Nombre o ID de grupo que se usa cuando se accede al módulo.

@end table
@end deftp

Es más, @code{(gnu services ssh)} proporciona los siguientes servicios.
@cindex SSH
@cindex servidor SSH

@deffn {Procedimiento Scheme} lsh-service [#:host-key "/etc/lsh/host-key"] @
       [#:daemonic? #t] [#:interfaces '()] [#:port-number 22] @
  [#:allow-empty-passwords? #f] [#:root-login? #f] @
  [#:syslog-output? #t] [#:x11-forwarding? #t] @
  [#:tcp/ip-forwarding? #t] [#:password-authentication? #t] @
  [#:public-key-authentication? #t] [#:initialize? #t]
Ejecuta el programa @command{lshd} de @var{lsh} para escuchar en el puerto
@var{port-number}. @var{host-key} debe designar a un fichero que contiene la
clave de la máquina, y que sea legible únicamente por root.

Cuando @var{daemonic?} es verdadero, @command{lshd} se desligará del
terminal de control y registrará su salida con syslogd, a menos que se
establezca @var{syslog-output?} a falso. Obviamente, esto hace que
lsh-dependa de la existencia de un servicio syslogd. Cuando @var{pid-file?}
es verdadero, @command{lshd} escribe su PID al fichero llamado
@var{pid-file}.

Cuando @var{initialize?} es verdadero, crea automáticamente una semilla una
clave de máquina una vez se active el servicio si no existen todavía. Puede
tomar un tiempo prolongado y necesita interacción.

Cuando @var{initialize?} es falso, es cuestión de la usuaria la
inicialización del generador aleatorio (@pxref{lsh-make-seed,,, lsh, LSH
Manual}), la creación de un par de claves y el almacenamiento de la clave
privada en el fichero @var{host-key} (@pxref{lshd basics,,, lsh, LSH
Manual}).

Cuando @var{interfaces} está vacío, lshd escucha conexiones en todas las
interfaces de red; en otro caso, @var{interfaces} debe ser una lista de
nombres de máquina o direcciones.

@var{allow-empty-passwords?} especifica si se aceptará el ingreso al sistema
con una contraseña vacía y @var{root-login?} especifica si se acepta el
ingreso al sistema como root.

El resto de opciones deberían ser autodescriptivas.
@end deffn

@cindex SSH
@cindex servidor SSH
@deffn {Variable Scheme} openssh-service-type
Este es el tipo para el daemon de shell seguro @uref{http://www.openssh.org,
OpenSSH}, @command{sshd}. Su valor debe ser un registro
@code{openssh-configuration} como en este ejemplo:

@lisp
(service openssh-service-type
         (openssh-configuration
           (x11-forwarding? #t)
           (permit-root-login 'without-password)
           (authorized-keys
             `(("alicia" ,(local-file "alicia.pub"))
               ("rober" ,(local-file "rober.pub"))))))
@end lisp

Véase a continuación detalles sobre @code{openssh-configuration}.

Este servicio se puede extender con claves autorizadas adicionales, como en
este ejemplo:

@lisp
(service-extension openssh-service-type
                   (const `(("carlos"
                             ,(local-file "carlos.pub")))))
@end lisp
@end deffn

@deftp {Tipo de datos} openssh-configuration
Este es el registro de configuración para @command{sshd} de OpenSSH.

@table @asis
@item @code{pid-file} (predeterminado: @code{"/var/run/sshd.pid"})
Nombre del fichero donde @command{sshd} escribe su PID.

@item @code{port-number} (predeterminado: @code{22})
Puerto TCP en el que @command{sshd} espera conexiones entrantes.

@item @code{permit-root-login} (predeterminado: @code{#f})
Este fichero determina si y cuando se permite el ingreso al sistema como
root. Si es @code{#f}, el ingreso como root no está permitido; si es
@code{#f} está permitido. Si es el símbolo @code{'without-password}, se
permite el ingreso al sistema como root pero no con identificación basada en
contraseña.

@item @code{allow-empty-passwords?} (predeterminado: @code{#f})
Cuando es verdadero, las usuarias con contraseñas vacías pueden ingresar en
el sistema. Cuando es falso, no pueden.

@item @code{password-authentication?} (predeterminado: @code{#t})
Cuando es verdadero, las usuarias pueden ingresar al sistema con su
contraseña. En caso falso, tienen otros métodos de identificación.

@item @code{public-key-authentication?} (predeterminado: @code{#t})
Cuando es verdadero, las usuarias pueden ingresar en el sistema mediante el
uso de clave publica para su identificación. Cuando es falso, las usuarias
tienen que usar otros métodos de identificación.

Las claves públicas autorizadas se almacenan en
@file{~/.ssh/authorized_keys}. Se usa únicamente por la versión 2 del
protocolo.

@item @code{x11-forwarding?} (predeterminado: @code{#f})
Cuando verdadero, la retransmisión de conexiones del cliente gráfico X11
está desactivada---en otras palabras, las opciones @option{-X} y @option{-Y}
de @command{ssh} funcionarán.

@item @code{allow-agent-forwarding?} (predeterminado: @code{#t})
Si se permite la retransmisión del agente de claves.

@item @code{allow-tcp-forwarding?} (predeterminado: @code{#t})
Si se permite la retransmisión TCP.

@item @code{gateway-ports?} (predeterminado: @code{#f})
Si se permiten los puertos pasarela.

@item @code{challenge-response-authentication?} (predeterminado: @code{#f})
Especifica si la identificación mediante respuesta de desafío está permitida
(por ejemplo, a través de PAM).

@item @code{use-pam?} (predeterminado: @code{#t})
Permite el uso de la interfaz de módulos de identificación conectables
(PAM). Si es @code{#t} se activará la identificación PAM mediante el uso de
@code{challenge-response-authentication?} y @code{password-authentication?},
además del procesado de los módulos de cuenta usuaria y de sesión de PAM en
todos los tipos de identificación.

Debido a que la identificación mediante respuesta de desafío de PAM tiene un
rol equivalente a la identificación por contraseña habitualmente, debería
desactivar @code{challenge-response-authentication?} o
@code{password-authentication?}.

@item @code{print-last-log?} (predeterminado: @code{#t})
Especifica si @command{sshd} debe imprimir la fecha y hora del último
ingreso al sistema de la usuaria cuando una usuaria ingresa
interactivamente.

@item @code{subsystems} (predeterminados: @code{'(("sftp" "internal-sftp"))})
Configura subsistemas externos (por ejemplo, el daemon de transmisión de
ficheros).

Esta es una lista de listas de dos elementos, cada una de las cuales que
contienen el nombre del subsistema y una orden (con parámetros opcionales)
para ejecutar tras petición del subsistema.

The command @command{internal-sftp} implements an in-process SFTP server.
Alternatively, one can specify the @command{sftp-server} command:
@lisp
(service openssh-service-type
         (openssh-configuration
          (subsystems
           `(("sftp" ,(file-append openssh "/libexec/sftp-server"))))))
@end lisp

@item @code{accepted-environment} (predeterminado: @code{'()})
Una lista de cadenas que describe qué variables de entorno pueden ser
exportadas.

Cada cadena obtiene su propia línea. Véase la opción @code{AcceptEnv} en
@code{man sshd_config}.

This example allows ssh-clients to export the @env{COLORTERM} variable.  It
is set by terminal emulators, which support colors.  You can use it in your
shell's resource file to enable colors for the prompt and commands if this
variable is set.

@lisp
(service openssh-service-type
         (openssh-configuration
           (accepted-environment '("COLORTERM"))))
@end lisp

@item @code{authorized-keys} (predeterminadas: @code{'()})
@cindex claves autorizadas, SSH
@cindex SSH, claves autorizadas
Esta es la lista de claves autorizadas. Cada elemento de la lista es un
nombre de usuaria seguido de uno o más objetos ``tipo-fichero'' que
representan claves públicas SSH. Por ejemplo:

@lisp
(openssh-configuration
  (authorized-keys
    `(("rekado" ,(local-file "rekado.pub"))
      ("chris" ,(local-file "chris.pub"))
      ("root" ,(local-file "rekado.pub") ,(local-file "chris.pub")))))
@end lisp

@noindent
registra las claves públicas especificadas para las cuentas @code{rekado},
@code{chris} y @code{root}.

Se pueden especificar claves autorizadas adicionales a través de
@code{service-extension}.

Tenga en cuenta que esto @emph{no} interfiere con el uso de
@file{~/.ssh/authorized_keys}.

@item @code{log-level} (predeterminado: @code{'info})
Es un símbolo que especifica el nivel de detalle en los registros:
@code{quiet}, @code{fatal}, @code{error}, @code{info}, @code{verbose},
@code{debug}, etc. Véase la página del manual de @file{sshd_config} para la
lista completa de los nombres de nivel.

@item @code{extra-content} (predeterminado: @code{""})
Este campo puede usarse para agregar un texto arbitrario al fichero de
configuración. Es especialmente útil para configuraciones elaboradas que no
se puedan expresar de otro modo. Esta configuración, por ejemplo,
generalmente desactivaría el ingreso al sistema como root, pero lo permite
para una dirección IP específica:

@lisp
(openssh-configuration
  (extra-content "\
Match Address 192.168.0.1
  PermitRootLogin yes"))
@end lisp

@end table
@end deftp

@deffn {Procedimiento Scheme} dropbear-service [@var{config}]
Ejecuta el @uref{https://matt.ucc.asn.au/dropbear/dropbear.html,daemon
Dropbear SSH} con la @var{config}uración proporcionada, un objeto
@code{<dropbear-configuration>}.

Por ejemplo, para especificar un servicio Dropbear que escuche en el puerto
1234, añada esta llama al campo @code{services} de su sistema operativo:

@lisp
(dropbear-service (dropbear-configuration
                    (port-number 1234)))
@end lisp
@end deffn

@deftp {Tipo de datos} dropbear-configuration
Este tipo de datos representa la configuración del daemon Dropbear SSH.

@table @asis
@item @code{dropbear} (predeterminado: @var{dropbear})
El paquete de Dropbear usado.

@item @code{port-number} (predeterminado: 22)
Puerto TCP donde el daemon espera conexiones entrantes.

@item @code{syslog-output?} (predeterminado: @code{#t})
Determina si se envía la salida a syslog.

@item @code{pid-file} (predeterminado: @code{"/var/run/dropbear.pid"})
El nombre de fichero del fichero de PID del daemon.

@item @code{root-login?} (predeterminado: @code{#f})
Si se permite el ingreso al sistema como @code{root}.

@item @code{allow-empty-passwords?} (predeterminado: @code{#f})
Si se permiten las contraseñas vacías.

@item @code{password-authentication?} (predeterminado: @code{#t})
Determina si se usará identificación basada en contraseña.
@end table
@end deftp

@cindex AutoSSH
@deffn {Scheme Variable} autossh-service-type
This is the type for the @uref{https://www.harding.motd.ca/autossh, AutoSSH}
program that runs a copy of @command{ssh} and monitors it, restarting it as
necessary should it die or stop passing traffic.  AutoSSH can be run
manually from the command-line by passing arguments to the binary
@command{autossh} from the package @code{autossh}, but it can also be run as
a Guix service.  This latter use case is documented here.

AutoSSH can be used to forward local traffic to a remote machine using an
SSH tunnel, and it respects the @file{~/.ssh/config} of the user it is run
as.

For example, to specify a service running autossh as the user @code{pino}
and forwarding all local connections to port @code{8081} to
@code{remote:8081} using an SSH tunnel, add this call to the operating
system's @code{services} field:

@lisp
(service autossh-service-type
         (autossh-configuration
          (user "pino")
          (ssh-options (list "-T" "-N" "-L" "8081:localhost:8081" "remote.net"))))
@end lisp
@end deffn

@deftp {Data Type} autossh-configuration
This data type represents the configuration of an AutoSSH service.

@table @asis

@item @code{user} (default @code{"autossh"})
The user as which the AutoSSH service is to be run.  This assumes that the
specified user exists.

@item @code{poll} (default @code{600})
Specifies the connection poll time in seconds.

@item @code{first-poll} (default @code{#f})
Specifies how many seconds AutoSSH waits before the first connection test.
After this first test, polling is resumed at the pace defined in
@code{poll}.  When set to @code{#f}, the first poll is not treated specially
and will also use the connection poll specified in @code{poll}.

@item @code{gate-time} (default @code{30})
Specifies how many seconds an SSH connection must be active before it is
considered successful.

@item @code{log-level} (default @code{1})
The log level, corresponding to the levels used by syslog---so @code{0} is
the most silent while @code{7} is the chattiest.

@item @code{max-start} (default @code{#f})
The maximum number of times SSH may be (re)started before AutoSSH exits.
When set to @code{#f}, no maximum is configured and AutoSSH may restart
indefinitely.

@item @code{message} (default @code{""})
The message to append to the echo message sent when testing connections.

@item @code{port} (default @code{"0"})
The ports used for monitoring the connection.  When set to @code{"0"},
monitoring is disabled.  When set to @code{"@var{n}"} where @var{n} is a
positive integer, ports @var{n} and @var{n}+1 are used for monitoring the
connection, such that port @var{n} is the base monitoring port and
@code{n+1} is the echo port.  When set to @code{"@var{n}:@var{m}"} where
@var{n} and @var{m} are positive integers, the ports @var{n} and @var{n}+1
are used for monitoring the connection, such that port @var{n} is the base
monitoring port and @var{m} is the echo port.

@item @code{ssh-options} (default @code{'()})
The list of command-line arguments to pass to @command{ssh} when it is run.
Options @option{-f} and @option{-M} are reserved for AutoSSH and may cause
undefined behaviour.

@end table
@end deftp

@defvr {Variable Scheme} %facebook-host-aliases
Esta variable contiene una cadena para su uso en @file{/etc/hosts}
(@pxref{Host Names,,, libc, The GNU C Library Reference Manual}). Cada línea
contiene una entrada que asocia un nombre de servidor conocido del servicio
en línea Facebook---por ejemplo, @code{www.facebook.com}---a la máquina
local---@code{127.0.0.1} o su equivalente IPv6, @code{::1}.

Esta variable habitualmente se usa en el campo @code{hosts-file} de una
declaración @code{operating-system} (@pxref{Referencia de operating-system,
@file{/etc/hosts}}):

@lisp
(use-modules (gnu) (guix))

(operating-system
  (host-name "micompu")
  ;; ...
  (hosts-file
    ;; Crea un fichero /etc/hosts file con alias para "localhost"
    ;; y "micompu", así como los servidores de facebook.
    (plain-file "hosts"
                (string-append (local-host-aliases host-name)
                               %facebook-host-aliases))))
@end lisp

Este mecanismo puede impedir a los programas que se ejecutan localmente,
como navegadores Web, el acceso a Facebook.
@end defvr

El módulo @code{(gnu services avahi)} proporciona la siguiente definición.

@defvr {Variable Scheme} avahi-service-type
Es el servicio que ejecuta @command{avahi-daemon}, un servidor mDNS/DNS-SD a
nivel del sistema que permite el descubrimiento de servicios y la búsqueda
de nombres de máquina ``sin configuración/cero configuración'' (véase
@uref{https://avahi.org/}). Su valor debe ser un registro
@code{zero-configuration}---véase a continuación. 

Este servicio extiende el daemon de la caché del servicio de nombres (nscd)
de manera que pueda resolver nombres de máquina @code{.local} mediante el
uso de @uref{https://0pointer.de/lennart/projects/nss-mdns,
nss-mds}. @xref{Selector de servicios de nombres}, para información sobre la resolución
de nombres de máquina.

De manera adicional, añade el paquete @var{avahi} al perfil del sistema de
manera que ordenes como @command{avahi-browse} estén disponibles de manera
directa.
@end defvr

@deftp {Tipo de datos} avahi-configuration
Tipo de datos que representa la configuración de Avahi.

@table @asis

@item @code{host-name} (predeterminado: @code{#f})
Si es diferente de @code{#f}, se usa como el nombre de máquina a publicar
para esta máquina; en otro caso, usa el nombre actual de la máquina.

@item @code{publish?} (predeterminado: @code{#t})
Cuando es verdadero, permite la publicación (retransmisión) de nombres de
máquina y servicios a través de la red.

@item @code{publish-workstation?} (predeterminado: @code{#t})
Cuando es verdadero, @command{avahi-daemon} publica el nombre de máquina y
la dirección IP a través de mDNS en la red local. Para ver los nombres de
máquina publicados en su red local, puede ejecutar:

@example
avahi-browse _workstation._tcp
@end example

@item @code{wide-area?} (predeterminado: @code{#f})
Cuando es verdadero, se permite DNS-SD sobre DNS unicast.

@item @code{ipv4?} (predeterminado: @code{#t})
@itemx @code{ipv6?} (predeterminado: @code{#t})
Estos campos determinan si usar sockets IPv4/IPv6.

@item @code{domains-to-browse} (predeterminado: @code{'()})
Esta es la lista de dominios a explorar.
@end table
@end deftp

@deffn {Variable Scheme} openvswitch-service-type
Este es el tipo del servicio @uref{https://www.openvswitch.org, Open
vSwitch}, cuyo valor debe ser un objeto @code{openvswitch-configuration}.
@end deffn

@deftp {Tipo de datos} openvswitch-configuration
Tipo de datos que representa la configuración de Open vSwitch, un switch
virtual multicapa que está diseñado para permitir una automatización masiva
en la red a través de extensión programática.

@table @asis
@item @code{package} (predeterminado: @var{openvswitch})
El objeto paquete de Open vSwitch.

@end table
@end deftp

@defvr {Variable Scheme} pagekite-service-type
El tipo de servicio para el servicio @uref{https://pagekite.net, PageKite},
una solución de encaminado para hacer servidores de la red local visibles
públicamente, incluso detrás de cortafuegos restrictivos o NAT sin
redirección de puertos. El valor para este servicio es un registro
@code{pagekite-configuration}.

Este es un ejemplo que expone los daemon HTTP y SSH locales:

@lisp
(service pagekite-service-type
         (pagekite-configuration
           (kites '("http:@@kitename:localhost:80:@@kitesecret"
                    "raw/22:@@kitename:localhost:22:@@kitesecret"))
           (extra-file "/etc/pagekite.rc")))
@end lisp
@end defvr

@deftp {Tipo de datos} pagekite-configuration
Tipo de datos que representa la configuración de PageKite.

@table @asis
@item @code{package} (predeterminado: @var{pagekite})
El objeto paquete de PageKite.

@item @code{kitename} (predeterminado: @code{#f})
Nombre de PageKite para la identificación con el servidor de fachada.

@item @code{kitesecret} (predeterminado: @code{#f})
Secreto compartido para la comunicación con el servidor. Probablemente
debería almacenarlo dentro @code{extra-file} en vez de aquí.

@item @code{frontend} (predeterminado: @code{#f})
Conecta al servidor de fachada de PageKite con este nombre en vez de al
servicio de @uref{https://pagekite.net,,pagekite.net}.

@item @code{kites} (predeterminados: @code{'("http:@@kitename:localhost:80:@@kitesecret")})
Lista de servicios de publicación (kite) usados. Expone HTTP en el puerto 80
de manera predeterminada. El formato es
@code{protocolo:nombre-kite:máquina:puerto:secreto}.

@item @code{extra-file} (predeterminado: @code{#f})
Fichero adicional de configuración que debe leerse, el cual se espera que
sea creado de forma manual. Úselo para añadir opciones adicionales y
gestionar secretos compartidos fuera de banda.

@end table
@end deftp

@node Sistema X Window
@subsection Sistema X Window

@cindex X11
@cindex sistema X Window
@cindex gestor de ingreso en el sistema
El sistema gráfico X Window---específicamente Xorg---se proporciona en el
módulo @code{(gnu services xorg)}. Fíjese que no existe un procedimiento
@code{xorg-service}. En vez de eso, el servidor X se inicia por el
@dfn{gestor de ingreso al sistema}, de manera predeterminada el gestor de
acceso de GNOME (GDM).

@cindex GDM
@cindex GNOME, gestor de ingreso al sistema
GDM por supuesto que permite a las usuarias ingresar al sistema con gestores
de ventanas y entornos de escritorio distintos a GNOME; para aquellas que
usan GNOME, GDM es necesario para características como el bloqueo automático
de pantalla.

@cindex gestor de ventanas
Para usar X11, debe instalar al menos un @dfn{gestor de ventanas}---por
ejemplo los paquetes @code{windowmaker} o @code{openbox}---, preferiblemente
añadiendo el que desee al campo @code{packages} de su definición de sistema
operativo (@pxref{Referencia de operating-system, paquetes del sistema}).

@defvr {Variable Scheme} gdm-service-type
This is the type for the @uref{https://wiki.gnome.org/Projects/GDM/, GNOME
Desktop Manager} (GDM), a program that manages graphical display servers and
handles graphical user logins.  Its value must be a @code{gdm-configuration}
(see below).

@cindex tipos de sesión (X11)
@cindex X11, tipos de sesión
GDM busca @dfn{tipos de sesión} descritos por los ficheros @file{.desktop}
en @file{/run/current-system/profile/share/xsessions} y permite a las
usuarias seleccionar una sesión en la pantalla de ingreso. Paquetes como
@code{gnome}, @code{xfce} y @code{i3} proporcionan ficheros @file{.desktop};
su adición a la lista global de paquetes hace que estén automáticamente
disponibles en la pantalla de ingreso al sistema.

Además, se respetan los ficheros @file{~/.xsession}. Cuando esté disponible,
@file{~/.xsession} debe ser un ejecutable que inicie un gestor de ventanas
y/o otros clientes de X.
@end defvr

@deftp {Tipo de datos} gdm-configuration
@table @asis
@item @code{auto-login?} (predeterminado: @code{#f})
@itemx @code{default-user} (predeterminado: @code{#f})
Cuando @code{auto-login?} es falso, GDM presenta una pantalla de ingreso.

Cuando @code{auto-login?} es verdadero, GDM ingresa directamente al sistema
como @code{default-user}.

@item @code{debug?} (predeterminado: @code{#f})
Cuando tiene valor verdadero, GDM escribe los mensajes de depuración en su
registro.

@item @code{gnome-shell-assets} (predeterminados: ...)
Lista de activos de GNOME Shell necesarios para GDM: tema de iconos,
fuentes, etc.cc

@item @code{xorg-configuration} (predeterminada: @code{(xorg-configuration)})
Configuración del servidor gráfico Xorg.

@item @code{xsession} (predeterminado: @code{(xinitrc)})
Guión a ejecutar antes de iniciar una sesión X.

@item @code{dbus-daemon} (predeterminado: @code{dbus-daemon-wrapper})
El nombre de fichero del ejecutable @code{dbus-daemon}.

@item @code{gdm} (predeterminado: @code{gdm})
El paquete GDM usado.
@end table
@end deftp

@defvr {Variable Scheme} slim-service-type
Este es el tipo para el gestor de ingreso al sistema gráfico para X11 SLiM.

Como GDM, SLiM busca tipos de sesión descritos por ficheros @file{.desktop}
y permite a las usuarias la selección de sesión en la pantalla de ingreso al
sistema mediante el uso de @kbd{F1}. También respeta los ficheros
@file{~/.xsession}.

Al contrario que GDM, SLiM no lanza las sesiones de las usuarias en
terminales virtuales diferentes al usado para el ingreso, lo que significa
que únicamente puede iniciar una sesión gráfica. Si desea ejecutar varias
sesiones gráficas de manera simultánea, debe añadir múltiples servicios de
SLiM a los servicios de su sistema. El ejemplo siguiente muestra cómo
sustituir el servicio GDM predeterminado con dos servicios de SLiM en tty7 y
tty8.

@lisp
(use-modules (gnu services)
             (gnu services desktop)
             (gnu services xorg)
             (srfi srfi-1))  ;para 'remove'

(operating-system
  ;; ...
  (services (cons* (service slim-service-type (slim-configuration
                                               (display ":0")
                                               (vt "vt7")))
                   (service slim-service-type (slim-configuration
                                               (display ":1")
                                               (vt "vt8")))
                   (remove (lambda (service)
                             (eq? (service-kind service) gdm-service-type))
                           %desktop-services))))
@end lisp

@end defvr

@deftp {Tipo de datos} slim-configuration
Tipo de datos que representa la configuración de @code{slim-service-type}.

@table @asis
@item @code{allow-empty-passwords?} (predeterminado: @code{#t})
Si se permite el ingreso al sistema con contraseñas vacías.

@item @code{auto-login?} (predeterminado: @code{#f})
@itemx @code{default-user} (predeterminado: @code{""})
Cuando @code{auto-login?} es falso, SLiM presenta una pantalla de ingreso.

Cuando @code{auto-login?} es verdadero, SLiM ingresa en el sistema
directamente como @code{default-user}.

@item @code{theme} (predeterminado: @code{%default-slim-theme})
@itemx @code{theme-name} (predeterminado: @code{%default-slim-theme-name})
El tema gráfico usado y su nombre.

@item @code{auto-login-session} (predeterminado: @code{#f})
Si es verdadero, debe ser el nombre del ejecutable a arrancar como la sesión
predeterminada---por ejemplo, @code{(file-append windowmaker
"/bin/windowmaker")}.

Si es falso, se usará una sesión de las descritas en uno de los ficheros
@file{.desktop} disponibles en @code{/run/current-system/profile} y
@code{~/.guix-profile}.

@quotation Nota
Debe instalar al menos un gestor de ventanas en el perfil del sistema o en
su perfil de usuaria. En caso de no hacerlo, si @code{auto-login-session} es
falso, no podrá ingresar al sistema.
@end quotation

@item @code{xorg-configuration} (predeterminada @code{(xorg-configuration)})
Configuración del servidor gráfico Xorg.

@item @code{display} (predeterminada: @code{":0"})
La pantalla en la que se iniciará el servidor gráfico Xorg.

@item @code{vt} (predeterminado: @code{"vt7"})
El terminal virtual (VT) en el que se iniciará el servidor gráfico Xorg.

@item @code{xauth} (predeterminado: @code{xauth})
El paquete XAuth usado.

@item @code{shepherd} (predeterminado: @code{shepherd})
El paquete de Shepherd usado para la invocación de @command{halt} y
@command{reboot}.

@item @code{sessreg} (predeterminado: @code{sessreg})
El paquete sessreg usado para el registro de la sesión.

@item @code{slim} (predeterminado: @code{slim})
El paquete SLiM usado.
@end table
@end deftp

@defvr {Variable Scheme} %default-theme
@defvrx {Variable Scheme} %default-theme-name
El tema predeterminado de SLiM y su nombre.
@end defvr


@deftp {Tipo de datos} sddm-configuration
This is the data type representing the SDDM service configuration.

@table @asis
@item @code{display-server} (predeterminado: "x11")
Select display server to use for the greeter.  Valid values are @samp{"x11"}
or @samp{"wayland"}.

@item @code{numlock} (predeterminado: "on")
Valid values are @samp{"on"}, @samp{"off"} or @samp{"none"}.

@item @code{halt-command} (predeterminado @code{#~(string-apppend #$shepherd "/sbin/halt")})
Orden a ejecutar para parar el sistema.

@item @code{reboot-command} (predeterminado @code{#~(string-append #$shepherd "/sbin/reboot")})
Orden a ejecutar para reiniciar el sistema.

@item @code{theme} (predeterminado "maldives")
Theme to use.  Default themes provided by SDDM are @samp{"elarun"},
@samp{"maldives"} or @samp{"maya"}.

@item @code{themes-directory} (predeterminado "/run/current-system/profile/share/sddm/themes")
Directorio en el que buscar temas.

@item @code{faces-directory} (predeterminado "/run/current-system/profile/share/sddm/faces")
Directorio en el que buscar caras.

@item @code{default-path} (predeterminado "/run/current-system/profile/bin")
El valor predeterminado del PATH.

@item @code{minimum-uid} (predeterminado: 1000)
UID mínimo mostrado en SDDM y al que se le permite el acceso.

@item @code{maximum-uid} (predeterminado: 2000)
UID máximo mostrado en SDDM.

@item @code{remember-last-user?} (predeterminado #t)
Recuerda la última usuaria.

@item @code{remember-last-session?} (predeterminado #t)
Recuerda la última sesión.

@item @code{hide-users} (predeterminado "")
Nombres de usuaria a ocultar de la pantalla de inicio de SDDM.

@item @code{hide-shells} (predeterminado @code{#~(string-append #$shadow "/sbin/nologin")})
Las usuarias que tengan alguno de los shell enumerados se ocultarán de la
pantalla de inicio de SDDM.

@item @code{session-command} (predeterminado @code{#~(string-append #$sddm "/share/sddm/scripts/wayland-session")})
Guión a ejecutar antes de iniciar una sesión wayland.

@item @code{sessions-directory} (predeterminado "/run/current-system/profile/share/wayland-sessions")
Directorio en el que buscar ficheros desktop que inicien sesiones wayland.

@item @code{xorg-configuration} (predeterminada @code{(xorg-configuration)})
Configuración del servidor gráfico Xorg.

@item @code{xauth-path} (predeterminado @code{#~(string-append #$xauth "/bin/xauth")})
Ruta de xauth.

@item @code{xephyr-path} (predeterminado @code{#~(string-append #$xorg-server "/bin/Xephyr")})
Ruta de Xephyr.

@item @code{xdisplay-start} (predeterminado @code{#~(string-append #$sddm "/share/sddm/scripts/Xsetup")})
Guión a ejecutar tras iniciar xorg-server.

@item @code{xdisplay-stop} (predeterminado @code{#~(string-append #$sddm "/share/sddm/scripts/Xstop")})
Guión a ejecutar antes de parar xorg-server.

@item @code{xsession-command} (predeterminado: @code{xinitrc})
Guión a ejecutar antes de iniciar una sesión X.

@item @code{xsessions-directory} (predeterminado: "/run/current-system/profile/share/xsessions")
Directorio para buscar ficheros desktop que inicien sesiones X.

@item @code{minimum-vt} (predeterminado: 7)
VT mínimo usado.

@item @code{auto-login-user} (predeterminado "")
Usuaria usada para el ingreso automático en el sistema.

@item @code{auto-login-session} (predeterminado "")
Fichero desktop usado para el ingreso automático en el sistema.

@item @code{relogin?} (predeterminado #f)
Volver a ingresar en el sistema tras salir.

@end table
@end deftp

@cindex gestor de ingreso en el sistema
@cindex X11, ingreso al sistema
@defvr {Variable Scheme} sddm-service-type
Es el tipo del servicio que ejecuta el @uref{https://github.com/sddm/sddm,
gestor de entrada SDDM}. Su valor es un registro @code{sddm-configuration}
(véase a continuación).

Este es un ejemplo de su uso:

@lisp
(service sddm-service-type
         (sddm-configuration
           (auto-login-user "alicia")
           (auto-login-session "xfce.desktop")))
@end lisp
@end defvr

@deftp {Tipo de datos} sddm-configuration
Este tipo de datos representa la configuración del gestor de ingreso al
sistema SDDM. Los campos disponibles son:

@table @asis
@item @code{sddm} (predeterminado: @code{sddm})
El paquete SDDM usado.

@item @code{display-server} (predeterminado: @code{"x11"})
Debe ser o bien @code{"x11"} o bien @code{"wayland"}.

@c FIXME: Add more fields.

@item @code{auto-login-user} (predeterminado: @code{""})
Si no está vacío, es la cuenta de usuaria que ingresará al sistema de manera
automática.

@item @code{auto-login-session} (predeterminada: @code{""})
Si no está vacío, es el nombre de fichero @file{.desktop} usado en el
ingreso automático al sistema.
@end table
@end deftp

@cindex Xorg, configuración
@deftp {Tipo de datos} xorg-configuration
Este tipo de datos representa la configuración del servidor gráfico
Xorg. Fíjese que no existe un servicio Xorg; en vez de eso, el servidor X es
iniciado por un ``gestor de pantalla'' como GDM, SDDM y SLiM. Por tanto, la
configuración de estos gestores de pantalla agrega un registro
@code{xorg-configuration}.

@table @asis
@item @code{modules} (predeterminados: @code{%default-xorg-modules})
Esta es la lista de @dfn{paquetes de módulos} cargados por el servidor
Xorg---por ejemplo, @code{xf86-video-vesa}, @code{xf86-input-keyboard},
etcétera.

@item @code{fonts} (predeterminadas: @code{%default-xorg-fonts})
Es una lista de directorios de tipografías a añadir a la @dfn{ruta de
tipografías} del servidor.

@item @code{drivers} (predeterminados: @code{'()})
Debe ser o bien la lista vacía, en cuyo caso Xorg selecciona el controlador
gráfico automáticamente, o una lista de nombres de controladores que se
intentarán en el orden especificado---por ejemplo, @code{("modesetting"
"vesa")}.

@item @code{resolutions} (predeterminadas: @code{'()})
Cuando @code{resolutions} es la lista vacía, Xorg selecciona una resolución
de pantalla adecuada. En otro caso, debe ser una lista de resoluciones---por
ejemplo, @code{((1024 768) (640 480))}.

@cindex distribución de teclado, para Xorg
@cindex mapa de teclas, para Xorg
@item @code{keyboard-layout} (predeterminada: @code{#f})
Si es @code{#f}, Xorg usa la distribución de teclado
predeterminada---normalmente inglés de EEUU (``qwerty'') para un teclado de
PC de 105 teclas.

En otro caso, debe ser un objeto @code{keyboard-layout} que especifique la
distribución de teclado usada para la ejecución de Xorg. @xref{Distribución de teclado}, para más información sobre cómo especificar la distribución de
teclado.

@item @code{extra-config} (predeterminada: @code{'()})
Es una lista de cadenas u objetos añadida al final del fichero de
configuración. Se usa para proporcionar texto adicional para ser introducido
de forma literal en el fichero de configuración.

@item @code{server} (predeterminado: @code{xorg-server})
Este es el paquete que proporciona el servidor Xorg.

@item @code{server-arguments} (predeterminados: @code{%default-xorg-server-arguments})
Es la lista de parámetros de línea de órdenes que se proporcionarán al
servidor X. El valor predeterminado es @code{-nolisten tcp}.
@end table
@end deftp

@deffn {Procedimiento Scheme} set-xorg-configuration @var{config} @
  [@var{tipo-de-servicio-del-gestor-de-pantalla}]

Le dice al gestor de pantalla (de tipo
@var{tipo-de-servicio-del-gestor-de-pantalla}) que use @var{config}, un
registro @code{<xorg-configuration>}.

Debido a que la configuración de Xorg se embebe en la configuración del
gestor de ingreso en el sistema---por ejemplo,
@code{gdm-configuration}---este procedimiento proporciona un atajo para
establecer la configuración de Xorg.
@end deffn

@deffn {Procedimiento Scheme} xorg-start-command [@var{config}]
Devuelve un script @code{startx} en el que los módulos, las tipografías,
etcétera, especificadas en @var{config} están disponibles. El resultado debe
usarse en lugar de @code{startx}.

Habitualmente el servidor X es iniciado por un gestor de ingreso al sistema.
@end deffn


@deffn {Procedimiento Scheme} screen-locker-service @var{paquete} [@var{programa}]
Añade @var{paquete}, un paquete para un bloqueador de sesión o un
salvapantallas cuya orden es @var{programa}, al conjunto de programas setuid
y añade una entrada PAM para él. Por ejemplo:

@lisp
(screen-locker-service xlockmore "xlock")
@end lisp

permite usar el viejo XlockMore.
@end deffn


@node Servicios de impresión
@subsection Servicios de impresión

@cindex soporte de impresión con CUPS
El módulo @code{(gnu services cups)} proporciona una definición de servicio
Guix para el servicio de impresión CUPS. Para añadir el soporte de impresión
en un sistema Guix, añada un servicio @code{cups-service} en su definición
de sistema operativo:

@deffn {Variable Scheme} cups-service-type
El tipo de servicio para el servidor de impresión CUPS. Su valor debe ser
una configuración de CUPS válida (véase a continuación). Para usar la
configuración predeterminada, simplemente escriba:
@lisp
(service cups-service-type)
@end lisp
@end deffn

La configuración de CUPS controla los aspectos básicos de su instalación de
CUPS: sobre qué interfaces se escuchará, qué hacer si falla un trabajo de
impresión, cuanta información registrar, etcétera. Para realmente añadir una
impresora, debe visitar la URL @url{http://localhost:631}, o usar una
herramienta como los servicios de configuración de impresión de GNOME. De
manera predeterminada, la configuración de un servicio CUPS generará un
certificado auto-firmado en caso de ser necesario, para ofrecer conexiones
seguras con el servidor de impresión.

Suponiendo que desease activar la interfaz Web de CUPS, y también añadir el
paquete @code{escpr} para comunicarse con impresoras Epson y el paquete
@code{hplip-minimal} para hacerlo con impresoras HP. Puede hacerlo
directamente, de esta manera (debe usar el módulo @code{(gnu packages
cups)}:

@lisp
(service cups-service-type
         (cups-configuration
           (web-interface? #t)
           (extensions
             (list cups-filters escpr hplip-minimal))))
@end lisp

Fíjese: Si desea usar la interfaz gráfica basada en Qt5 que viene con el
paquete hplip se le sugiere que instale el paquete @code{hplip}, o bien en
su configuración del sistema operativo o bien como su usuaria.

A continuación se encuentran los parámetros de configuración disponibles. El
tipo de cada parámetro antecede la definición del mismo; por ejemplo,
@samp{string-list foo} indica que el parámetro @code{foo} debe especificarse
como una lista de cadenas. También existe la posibilidad de especificar la
configuración como una cadena, si tiene un fichero @code{cupsd.conf} antiguo
que quiere trasladar a otro sistema; véase el final para más detalles.

@c The following documentation was initially generated by
@c (generate-documentation) in (gnu services cups).  Manually maintained
@c documentation is better, so we shouldn't hesitate to edit below as
@c needed.  However if the change you want to make to this documentation
@c can be done in an automated way, it's probably easier to change
@c (generate-documentation) than to make it below and have to deal with
@c the churn as CUPS updates.


Los campos disponibles de @code{cups-configuration} son:

@deftypevr {parámetro de @code{cups-configuration}} package cups
El paquete CUPS.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} lista-paquetes extensions
Controladores y otras extensiones al paquete CUPS.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} ficheros-conf files-configuration
Configuración sobre dónde escribir los registros, qué directorios usar para
las colas de impresión y parámetros de configuración privilegiados
relacionados.

Los campos disponibles de @code{files-configuration} son:

@deftypevr {parámetro de @code{files-configuration}} ruta-registro access-log
Define el nombre de fichero del registro de acceso. La especificación de un
nombre de fichero en blanco desactiva la generación de registros de
acceso. El valor @code{stderr} hace que las entradas de registro se envíen
al fichero de la salida estándar de error cuando el planificador se ejecute
en primer plano, o al daemon de registro del sistema cuando se ejecute en
segundo plano. El valor @code{syslog} envía las entradas de registro al
daemon de registro del sistema. El nombre de servidor puede incluirse en los
nombres de fichero mediante el uso de la cadena @code{%s}, como en
@code{/var/log/cups/%s-access_log}.

El valor predeterminado es @samp{"/var/log/cups/access_log"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} nombre-fichero cache-dir
Donde CUPS debe almacenar los datos de la caché.

El valor predeterminado es @samp{"/var/cache/cups"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} string config-file-perm
Especifica los permisos para todos los ficheros de configuración que escriba
el planficador.

Tenga en cuenta que los permisos para el fichero printers.conf están
configurados actualmente de modo que únicamente la usuaria del planificador
(habitualmente root) tenga acceso. Se hace de esta manera debido a que las
URI de las impresoras a veces contienen información sensible sobre la
identificación que no debería conocerse de manera general en el sistema. No
hay forma de desactivar esta característica de seguridad.

El valor predeterminado es @samp{"0640"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} ruta-registro error-log
Define el nombre de fichero del registro de error. La especificación de un
nombre de fichero en blanco desactiva la generación de registros de
error. El valor @code{stderr} hace que las entradas del registro se envíen
al fichero de la salida de error estándar cuando el planificador se ejecute
en primer plano, o al daemon de registro del sistema cuando se ejecute en
segundo plano. El valor @code{syslog} provoca que las entradas del registro
se envíen al daemon de registro del sistema. El nombre del servidor puede
incluirse en los nombres de fichero mediante el uso de la cadena @code{%s},
como en @code{/var/log/cups/%s-error_log}.

El valor predeterminado es @samp{"/var/log/cups/error_log"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} string fatal-errors
Especifica qué errores son fatales, los cuales provocan la salida del
planificador. El tipo de cadenas son:

@table @code
@item none
Ningún error es fatal.

@item all
Todos los errores a continuación son fatales.

@item browse
Los errores de la inicialización de exploración son fatales, por ejemplo las
conexiones fallidas al daemon DNS-SD.

@item config
Los errores de sintaxis en el fichero de configuración son fatales.

@item listen
Los errores de escucha o de puertos son fatales, excepto fallos IPv6 en la
red local o en direcciones @code{any}.

@item log
Los errores de creación o escritura en el fichero de registros son fatales.

@item permissions
La mala configuración de los permisos de los ficheros al inicio son fatales,
por ejemplo certificados TLS compartidos y ficheros de claves con permisos
de escritura para todo el mundo.
@end table

El valor predeterminado es @samp{"all -browse"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} boolean file-device?
Especifica si el pseudo-dispositivo del fichero puede usarse para nuevas
colas de impresión. Siempre se permite la URI @uref{file:///dev/null}.

El valor predeterminado es @samp{#f}
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} string group
Especifica el nombre de grupo o ID usado para la ejecución de programas
externos.

El valor predeterminado es @samp{"lp"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} string log-file-perm
Especifica los permisos para todos los ficheros de registro que el
planificador escriba.

El valor predeterminado es @samp{"0644"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} ruta-registro page-log
Define el nombre de fichero del registro de páginas. La especificación de un
nombre de fichero en blanco desactiva la generación de registro de
páginas. El valor @code{stderr} hace que las entradas del registro se envíen
al fichero de la salida de error cuando el planificador se ejecute en primer
plano, o al daemon de registro del sistema cuando se ejecuten en segundo
plano. El valor @code{syslog} provoca que las entradas del registro se
envíen al daemon de registro del sistema. El nombre del servidor puede
incluirse en los nombres de fichero mediante el uso de la cadena @code{%s},
como en @code{/var/log/cups/%s-page_log}.

El valor predeterminado es @samp{"/var/log/cups/page_log"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} string remote-root
Especifica el nombre de la usuaria asociado con accesos sin identificación
por parte de clientes que digan ser la usuaria root. La usuaria
predeterminada es @code{remroot}.

El valor predeterminado es @samp{"remroot"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} nombre-fichero request-root
Especifica el directorio que contiene los trabajos de impresión y otros
datos de peticiones HTTP.

El valor predeterminado es @samp{"/var/spool/cups"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} aislamiento sandboxing
Especifica el nivel de seguridad del aislamiento (sandbox) que se aplica
sobre los filtros de impresión, motores y otros procesos lanzados por el
planificador; o bien @code{relaxed} o bien @code{strict}. Esta directiva
únicamente tiene uso actualmente en macOS.

El valor predeterminado es @samp{strict}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} nombre-fichero server-keychain
Specifies the location of TLS certificates and private keys.  CUPS will look
for public and private keys in this directory: @file{.crt} files for
PEM-encoded certificates and corresponding @file{.key} files for PEM-encoded
private keys.

El valor predeterminado es @samp{"/etc/cups/ssl"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} nombre-fichero server-root
Especifica el directorio que contiene los ficheros de configuración del
servidor.

El valor predeterminado es @samp{"/etc/cups"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} boolean sync-on-close?
Especifica si el planificador llama fsync(2) tras la escritura de los
ficheros de configuración o estado.

El valor predeterminado es @samp{#f}
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} cadenas-separadas-por-espacios system-group
Especifica el o los grupos usados para la identificación del grupo
@code{@@SYSTEM}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} nombre-fichero temp-dir
Especifica el directorio donde se escriben los ficheros temporales.

El valor predeterminado es @samp{"/var/spool/cups/tmp"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} string user
Especifica el nombre de usuaria o ID usado para la ejecución de programas
externos.

El valor predeterminado es @samp{"lp"}.
@end deftypevr

@deftypevr {parámetro de @code{files-configuration}} string set-env
Establece el valor de la variable de entorno especificada que se
proporcionará a los procesos lanzados.

El valor predeterminado es @samp{"variable value"}.
@end deftypevr
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} nivel-registro-acceso access-log-level
Especifica el nivel de registro para el fichero AccessLog. El nivel
@code{config} registra la adición, borrado o modificación de impresoras y
clases, y el acceso y modificación de los ficheros de configuración. El
nivel @code{actions} registra cuando los trabajos de impresión se envían,
mantienen a la espera, liberan, modifican o cancelan, además de todas las
condiciones de @code{config}. El nivel @code{all} registra todas las
peticiones.

El valor predeterminado es @samp{actions}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} boolean auto-purge-jobs?
Especifica si se purgan los datos del histórico de trabajos de manera
automática cuando ya no son necesarios para las cuotas.

El valor predeterminado es @samp{#f}
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} lista-cadenas-separada-comas browse-dns-sd-sub-types
Especifica una lista de subtipos de DNS-SD anunciados por cada impresora
compartida. Por ejemplo, @samp{"_cups" "_print"} le dirá a los clientes de
red que se implementa tanto la compartición con CUPS como IPP Everywhere.

El valor predeterminado es @samp{"_cups"}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} protocolos browse-local-protocols
Especifica qué protocolos deben usarse para compartir las impresoras
locales.

El valor predeterminado es @samp{dnssd}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} boolean browse-web-if?
Especifica si se anuncia la interfaz web de CUPS.

El valor predeterminado es @samp{#f}
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} boolean browsing?
Especifica si se anuncian las impresoras compartidas.

El valor predeterminado es @samp{#f}
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} string classification
Specifies the security classification of the server.  Any valid banner name
can be used, including @samp{"classified"}, @samp{"confidential"},
@samp{"secret"}, @samp{"topsecret"}, and @samp{"unclassified"}, or the
banner can be omitted to disable secure printing functions.

El valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} boolean classify-override?
Especifica si las usuarias pueden modificar la clasificación (página de
portada) de trabajos de impresión individuales mediante el uso de la opción
@code{job-sheets}.

El valor predeterminado es @samp{#f}
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} tipo-id-pred default-auth-type
Especifica el tipo de identificación usado por omisión.

El valor predeterminado es @samp{Basic}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} cifrado-pred default-encryption
Especifica si se usará cifrado para peticiones con identificación.

El valor predeterminado es @samp{Required}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} string default-language
Especifica el idioma predeterminado usado para el texto y contenido de la
web.

El valor predeterminado es @samp{"en"}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} cadena default-paper-size
Especifica el tamaño predeterminado del papel para colas de impresión
nuevas. @samp{"Auto"} usa el valor predeterminado de la localización,
mientras que @samp{"None"} especifica que no hay un tamaño de papel
predeterminado. Los nombres de tamaños específicos habitualmente son
@samp{"Letter"} o @samp{"A4"}@footnote{NdT: @samp{Letter} es el formato
estándar de ANSI, de 215,9x279,4 milímetros de tamaño, mientras que A4 es el
formato estándar de ISO, de 210x297 milímetros de tamaño.}.

El valor predeterminado es @samp{"Auto"}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} string default-policy
Especifica la política de acceso usada por omisión.

El valor predeterminado es @samp{"default"}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} boolean default-shared?
Especifica si las impresoras locales se comparten de manera predeterminada.

El valor predeterminado es @samp{#t}
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo dirty-clean-interval
Especifica el retraso para la actualización de los ficheros de configuración
y estado, en segundo. Un valor de 0 hace que la actualización se lleve a
cabo tan pronto sea posible, en algunos milisegundos habitualmente.

El valor predeterminado es @samp{30}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} política-error error-policy
Especifica qué hacer cuando ocurra un error. Los valores posibles son
@code{abort-job}, que descartará el trabajo de impresión fallido;
@code{retry-job}, que intentará llevar de nuevo a cabo el trabajo en un
momento posterior; @code{retry-current-job}, que reintenta el trabajo que
falló de manera inmediata; y @code{stop-printer}, que para la impresora.

El valor predeterminado es @samp{stop-printer}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo filter-limit
Especifica el coste máximo de filtros que se ejecutan de manera concurrente,
lo que puede usarse para minimizar problemas de recursos de disco, memoria y
procesador. Un límite de 0 desactiva la limitación del filtrado. Una
impresión media con una impresora no-PostScript necesita una limitación del
filtrado de 200 más o menos. Una impresora PostScript necesita cerca de la
mitad (100). Establecer un límite por debajo de estos valores limitará de
forma efectiva al planificador a la ejecución de un único trabajo de
impresión en cualquier momento.

El valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo filter-nice
Especifica la prioridad de planificación de los filtros que se ejecuten para
la impresión de un trabajo. El valor de ``nice'' va desde 0, la mayor
prioridad, a 19, la menor prioridad.

El valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} búsqueda-nombres-máquina host-name-lookups
Especifica si se realizarán las búsquedas inversas en las conexiones de
clientes. La opción @code{double} instruye a @code{cupsd} para que verifique
que el nombre de máquina al que resuelve la dirección corresponde con la
dirección devuelta por dicho nombre de máquina. Las búsquedas dobles también
evitan que clientes con direcciones sin registrar se conecten a su
servidor. Configure esta opción con @code{#t} o @code{double} únicamente si
es absolutamente necesario.

El valor predeterminado es @samp{#f}
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo job-kill-delay
Especifica el número de segundos a esperar antes de terminar los filtros y
el motor asociados con un trabajo cancelado o puesto en espera.

El valor predeterminado es @samp{30}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo job-retry-interval
Especifica el intervalo entre los reintentos de trabajos en segundos. Se usa
de manera habitual en colas de fax pero también puede usarse con colas de
impresión normales cuya política de error sea @code{retry-job} o
@code{retry-current-job}.

El valor predeterminado es @samp{30}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo job-retry-limit
Especifica el número de reintentos que se llevan a cabo con los trabajos. De
manera habitual se usa con colas de fax pero también puede usarse con colas
de impresión normal cuya política de error sea @code{retry-job} o
@code{retry-current-job}.

El valor predeterminado es @samp{5}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} boolean keep-alive?
Especifica si se permiten conexiones ``keep-alive'' de HTTP.

El valor predeterminado es @samp{#t}
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo keep-alive-timeout
Especifica por cuanto tiempo permanece abierta una conexión de cliente en
estado de espera, en segundos.

El valor predeterminado es @samp{30}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo limit-request-body
Especifica el tamaño máximo de los ficheros de impresión, peticiones IPP y
datos de formularios HTTP. Un límite de 0 desactiva la comprobación del
límite.

El valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} lista-cadenas-multilínea listen
Escucha a la espera de conexiones en las interfaces especificadas. Se
aceptan valores con la forma @var{dirección}:@var{puerto}, donde
@var{dirección} es o bien una dirección IPv6 entre corchetes, una dirección
IPv4 o @code{*} para indicar todas las direcciones. Los valores también
pueden ser nombres de fichero de sockets de dominio de UNIX locales. La
directiva ``Listen'' es similar a la directiva ``Port'', pero le permite la
restricción del acceso a interfaces o redes específicas.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo listen-back-log
Especifica el número de conexiones pendientes permitidas. Habitualmente
afecta de manera exclusiva a servidores con mucha carga de trabajo que han
alcanzado el límite de clientes ``MaxClients'', pero también puede ser
provocado por grandes números de conexiones simultaneas. Cuando se alcanza
el límite, el sistema operativo rechaza conexiones adicionales hasta que el
planificador pueda aceptar las pendientes.

El valor predeterminado es @samp{128}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} lista-location-access-control location-access-controls
Especifica un conjunto adicional de controles de acceso.

Los campos disponibles de @code{location-access-controls} son:

@deftypevr {parámetro de @code{location-access-controls}} nombre-fichero path
Especifica la ruta URI sobre la que el control de acceso tendrá efecto.
@end deftypevr

@deftypevr {parámetro de @code{location-access-controls}} lista-access-control access-controls
Controles de acceso para todos los accesos a esta ruta, en el mismo formato
que @code{access-controls} de @code{operation-access-control}.

El valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{location-access-controls}} lista-method-access-control method-access-controls
Controles de acceso para accesos con métodos específicos para esta ruta.

El valor predeterminado es @samp{()}.

Los campos disponibles de @code{method-access-controls} son:

@deftypevr {parámetro de @code{method-access-controls}} boolean reverse?
Si es @code{#t}, los controles de acceso son efectivos con todos los métodos
excepto los métodos listados. En otro caso, son efectivos únicamente con los
métodos listados.

El valor predeterminado es @samp{#f}
@end deftypevr

@deftypevr {parámetro de @code{method-access-controls}} lista-métodos methods
Métodos con los cuales este control de acceso es efectivo.

El valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{method-access-controls}} lista-control-acceso access-controls
Access control directives, as a list of strings.  Each string should be one
directive, such as @samp{"Order allow,deny"}.

El valor predeterminado es @samp{()}.
@end deftypevr
@end deftypevr
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo log-debug-history
Especifica el número de mensajes de depuración que se retienen para el
registro si sucede un error en un trabajo de impresión. Los mensajes de
depuración se registran independientemente de la configuración de
``LogLevel''.

El valor predeterminado es @samp{100}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} nivel-registro log-level
Especifica el nivel de depuración del fichero ``ErrorLog''. El valor
@code{none} inhibe todos los registros mientras que @code{debug2} registra
todo.

El valor predeterminado es @samp{info}
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} formato-tiempo-registro log-time-format
Especifica el formato de la fecha y el tiempo en los ficheros de
registro. El valor @code{standard} registra con segundos completos mientras
que @code{usecs} registra con microsegundos.

El valor predeterminado es @samp{standard}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo max-clients
Especifica el número de clientes simultáneos máximo que son admitidos por el
planificador.

El valor predeterminado es @samp{100}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo max-clients-per-host
Especifica el número de clientes simultáneos máximo que se permiten desde
una única dirección.

El valor predeterminado es @samp{100}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo max-copies
Especifica el número de copias máximo que una usuaria puede imprimir con
cada trabajo.

El valor predeterminado es @samp{9999}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo max-hold-time
Especifica el tiempo máximo que un trabajo puede permanecer en el estado de
espera @code{indefinite} antes de su cancelación. Un valor de 0 desactiva la
cancelación de trabajos en espera.

El valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo max-jobs
Especifica el número de trabajos simultáneos máximo permitido. El valor 0
permite un número ilimitado de trabajos.

El valor predeterminado es @samp{500}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo max-jobs-per-printer
Especifica el número de trabajos simultáneos máximo que se permite por
impresora. Un valor de 0 permite hasta ``MaxJobs'' por impresora.

El valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo max-jobs-per-user
Especifica el número de trabajos simultáneos máximo que se permite por
usuaria. Un valor de 0 permite hasta ``MaxJobs'' por usuaria.

El valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo max-job-time
Specifies the maximum time a job may take to print before it is canceled, in
seconds.  Set to 0 to disable cancellation of ``stuck'' jobs.

El valor predeterminado es @samp{10800}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo max-log-size
Especifica el tamaño máximo de los ficheros de registro antes de su
rotación, en bytes. El valor 0 desactiva la rotación de registros.

El valor predeterminado es @samp{1048576}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo multiple-operation-timeout
Especifica el tiempo máximo permitido entre ficheros en un trabajo de
impresión con múltiples ficheros, en segundos.

El valor predeterminado es @samp{300}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} string page-log-format
Especifica el formato de las líneas PageLog. Las secuencias de caracteres
que comiencen con el signo de porcentaje (@samp{%}) se reemplazan con la
información correspondiente, mientras que el resto de caracteres se copia de
manera literal. Se reconocen las siguientes secuencias:

@table @samp
@item %%
inserta literalmente un símbolo de porcentaje

@item %@{nombre@}
inserta el valor del atributo IPP especificado

@item %C
inserta el número de copias para la página actual

@item %P
inserta el número de página actual

@item %T
inserta la fecha y hora actuales en el formato común de registro

@item %j
introduce el ID del trabajo

@item %p
inserta el nombre de impresora

@item %u
inserta el nombre de usuaria
@end table

La cadena vacía desactiva el registro de página. La cadena @code{%p %u %j %T
%P %C %@{job-billing@} %@{job-originating-host-name@} %@{job-name@}
%@{media@} %@{sides@}} crea un registro de página con los elementos
estándar.

El valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} variables-entorno environment-variables
Proporciona la o las variables de entorno especificadas a los procesos
iniciados; una lista de cadenas.

El valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} lista-policy-configuration policies
Especifica las políticas de control de acceso con nombre.

Los campos disponibles de @code{policy-configuration} son:

@deftypevr {parámetro de @code{policy-configuration}} string name
El nombre de la política.
@end deftypevr

@deftypevr {parámetro de @code{policy-configuration}} string job-private-access
Especifica una lista de acceso para los valores privados de un
trabajo. @code{@@ACL} se sustituye con los valores
``requesting-user-name-allowed'' o ``requesting-user-name-denied'' de la
impresora. @code{@@OWNER} se sustituye con la propietaria del
trabajo. @code{@@SYSTEM} se sustituye con los grupos enumerados en el campo
@code{system-group} de la configuración @code{files-config}, que se traduce
en el fichero @code{cups-files.conf(5)}. Otros elementos de configuración de
la lista de acceso posibles incluyen nombres de usuaria específicos y
@code{@@@var{group}} para indicar miembros de un grupo específico. La lista
de acceso también puede simplemente ser @code{all} o @code{default}.

El valor predeterminado es @samp{"@@OWNER @@SYSTEM"}.
@end deftypevr

@deftypevr {parámetro de @code{policy-configuration}} string job-private-values
Especifica la lista de valores de trabajos a hacer privados, o bien
@code{all}, @code{default}, o @code{none}.

El valor predeterminado es @samp{"job-name job-originating-host-name
job-originating-user-name phone"}.
@end deftypevr

@deftypevr {parámetro de @code{policy-configuration}} string subscription-private-access
Especifica una lista de acceso para los valores privados de una
subscripción. @code{@@ACL} se sustituye con los valores
``requesting-user-name-allowed'' o ``requesting-user-name-denied'' de la
impresora. @code{@@OWNER} se sustituye con la propietaria del
trabajo. @code{@@SYSTEM} se sustituye con los grupos enumerados en el campo
@code{system-group} de la configuración @code{files-config}, que se traduce
en el fichero @code{cups-files.conf(5)}. Otros elementos de configuración de
la lista de acceso posibles incluyen nombres de usuaria específicos y
@code{@@@var{group}} para indicar miembros de un grupo específico. La lista
de acceso también puede simplemente ser @code{all} o @code{default}.

El valor predeterminado es @samp{"@@OWNER @@SYSTEM"}.
@end deftypevr

@deftypevr {parámetro de @code{policy-configuration}} string subscription-private-values
Especifica la lista de valores de trabajos a hacer privados, o bien
@code{all}, @code{default}, o @code{none}.

El valor predeterminado es @samp{"notify-events notify-pull-method
notify-recipient-uri notify-subscriber-user-name notify-user-data"}.
@end deftypevr

@deftypevr {parámetro de @code{policy-configuration}} lista-operation-access-control access-controls
Control de acceso para operaciones de IPP.

El valor predeterminado es @samp{()}.
@end deftypevr
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} boolean-o-entero-no-negativo preserve-job-files
Especifica si los ficheros del trabajo (documentos) se preservan tras la
impresión de un trabajo. Si se especifica un valor numérico, los ficheros
del trabajo se preservan durante el número indicado de segundos tras la
impresión. En otro caso, el valor booleano determina la conservación de
manera indefinida.

El valor predeterminado es @samp{86400}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} boolean-o-entero-no-negativo preserve-job-history
Especifica si la historia del trabajo se preserva tras la impresión de un
trabajo. Si se especifica un valor numérico, la historia del trabajo se
conserva tras la impresión el número de segundos indicado. Si es @code{#t},
la historia del trabajo se conserva hasta que se alcance el límite de
trabajos ``MaxJobs''.

El valor predeterminado es @samp{#t}
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo reload-timeout
Especifica el tiempo a esperar hasta la finalización del trabajo antes de
reiniciar el planificador.

El valor predeterminado es @samp{30}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} string rip-cache
Especifica la cantidad máxima de memoria usada durante la conversión de
documentos en imágenes para una impresora.

El valor predeterminado es @samp{"128m"}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} string server-admin
Especifica la dirección de correo electrónico de la administradora del
servidor.

El valor predeterminado es @samp{"root@@localhost.localdomain"}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} lista-nombres-máquina-o-* server-alias
La directiva ServerAlias se usa para la validación de la cabecera HTTP Host
cuando los clientes se conecten al planificador desde interfaces
externas. El uso del nombre especial @code{*} puede exponer su sistema a
ataques basados en el navegador web de reenlazado DNS ya conocidos, incluso
cuando se accede a páginas a través de un cortafuegos. Si el descubrimiento
automático de nombres alternativos no funcionase, le recomendamos enumerar
cada nombre alternativo con una directiva ServerAlias en vez del uso de
@code{*}.

El valor predeterminado es @samp{*}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} string server-name
Especifica el nombre de máquina completamente cualificado del servidor.

El valor predeterminado es @samp{"localhost"}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} server-tokens server-tokens
Especifica qué información se incluye en la cabecera Server de las
respuestas HTTP. @code{None} desactiva la cabecera
Server. @code{ProductOnly} proporciona @code{CUPS}. @code{Major} proporciona
@code{CUPS 2}. @code{Minor} proporciona @code{CUPS 2.0}. @code{Minimap}
proporciona @code{CUPS 2.0.0}. @code{OS} proporciona @code{CUPS 2.0.0
(@var{uname})} donde @var{uname} es la salida de la orden
@code{uname}. @code{Full} proporciona @code{CUPS 2.0.0 (@var{uname})
IPP/2.0}.

El valor predeterminado es @samp{Minimal}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} lista-cadenas-multilínea ssl-listen
Escucha en las interfaces especificadas a la espera de conexiones
cifradas. Se aceptan valores con la forma @var{dirección}:@var{puerto},
siendo @var{dirección} o bien una dirección IPv6 entre corchetes, o bien una
dirección IPv4, o bien @code{*} que representa todas las direcciones.

El valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} opciones-ssl ssl-options
Determina las opciones de cifrado. De manera predeterminada, CUPS permite
únicamente el cifrado mediante TLS v1.0 o superior mediante el uso de
modelos de cifrado de conocida seguridad. La seguridad se reduce cuando se
usan opciones @code{Allow} y se aumenta cuando se usan opciones
@code{Deny}. La opción @code{AllowRC4} permite el cifrado RC4 de 128 bits,
necesario para algunos clientes antiguos que no implementan los modelos más
modernos. La opción @code{AllowSSL3} desactiva SSL v3.0, necesario para
algunos clientes antiguos que no implementan TLS v1.0. La opción
@code{DenyCBC} desactiva todos los modelos de cifrado CBC. La opción
@code{DenyTLS1.0} desactiva TLS v1.0---esto fuerza la versión mínima del
protocolo a TLS v1.1.

El valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} boolean strict-conformance?
Especifica si el planificador exige que los clientes se adhieran de manera
estricta a las especificaciones IPP.

El valor predeterminado es @samp{#f}
@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} entero-no-negativo timeout
Especifica el plazo de las peticiones HTTP, en segundos.

El valor predeterminado es @samp{300}.

@end deftypevr

@deftypevr {parámetro de @code{cups-configuration}} boolean web-interface?
Especifica si se debe activar la interfaz web.

El valor predeterminado es @samp{#f}
@end deftypevr

En este punto probablemente esté pensando, ``querido manual de Guix, me
gusta todo esto, pero... ¡¿cuando se acaban las opciones de
configuración?!''. De hecho ya terminan. No obstante, hay un punto más:
puede ser que ya tenga un fichero @code{cupsd.conf} que desee usar. En ese
caso, puede proporcionar un objeto @code{opaque-cups-configuration} como la
configuración de @code{cups-service-type}.

Los campos disponibles de @code{opaque-cups-configuration} son:

@deftypevr {parámetro de @code{opaque-cups-configuration}} paquete cups
El paquete CUPS.
@end deftypevr

@deftypevr {parámetro de @code{opaque-cups-configuration}} string cupsd.conf
El contenido de @code{cupsd.conf}, como una cadena.
@end deftypevr

@deftypevr {parámetro de @code{opaque-cups-configuration}} string cups-files.conf
El contenido del fichero @code{cups-files.conf}, como una cadena.
@end deftypevr

Por ejemplo, si el contenido de sus ficheros @code{cupsd.conf} y
@code{cups-files.conf} estuviese en cadenas del mismo nombre, podría
instanciar un servicio CUPS de esta manera:

@lisp
(service cups-service-type
         (opaque-cups-configuration
           (cupsd.conf cupsd.conf)
           (cups-files.conf cups-files.conf)))
@end lisp


@node Servicios de escritorio
@subsection Servicios de escritorio

El módulo @code{(gnu services desktop)} proporciona servicios que son útiles
habitualmente en el contexto de una configuración de ``escritorio''---es
decir, en una máquina que ejecute un servidor gráfico, posiblemente con
interfaces gráficas, etcétera. También define servicios que proporcionan
entornos de escritorio específicos como GNOME, Xfce o MATE.

Para simplificar las cosas, el módulo define una variable que contiene el
conjunto de servicios que las usuarias esperarían de manera habitual junto a
un entorno gráfico y de red:

@defvr {Variable Scheme} %desktop-services
Es una lista de servicios que se construye en base a @code{%base-services} y
añade o ajusta servicios para una configuración de ``escritorio'' típica.

En particular, añade un gestor de ingreso al sistema gráfico (@pxref{Sistema X Window, @code{gdm-service-type}}), herramientas para el bloqueo de la
pantalla, una herramienta de gestión de redes (@pxref{Servicios de red,
@code{network-manager-service-type}}) y gestión de modem (@pxref{Servicios de red, @code{modem-manager-service-type}}), servicios de gestión de la
energía y el color, el gestor de asientos e ingresos al sistema
@code{elogind}, el servicio de privilegios Polkit, el servicio de
geolocalización GeoClue, el daemon AccountsService que permite a las
usuarias autorizadas el cambio de contraseñas del sistema, un cliente NTP
(@pxref{Servicios de red}), el daemon Avahi y configura el servicio del
selector de servicios de nombres para que pueda usar @code{nss-mdns}
(@pxref{Selector de servicios de nombres, mDNS}). 
@end defvr

La variable @code{%desktop-services} puede usarse como el campo
@code{services} de una declaración @code{operating-system}
(@pxref{Referencia de operating-system, @code{services}}).

De manera adicional, los procedimientos @code{gnome-desktop-service-type},
@code{xfce-desktop-service}, @code{mate-desktop-service-type} y
@code{enlightenment-desktop-service-type} pueden añadir GNOME, Xfce, MATE
y/o Enlightenment al sistema. ``Añadir GNOME'' significa que servicios a
nivel de sistema como las herramientas de ayuda para el ajuste de la
intensidad de luz de la pantalla y de gestión de energía se añaden al
sistema, extendiendo @code{polkit} y @code{dbus} de manera apropiada, y
permitiendo a GNOME operar con privilegios elevados en un número de
interfaces del sistema de propósito especial. Además, la adición de un
servicio generado por @code{gnome-desktop-service-type} añade el metapaquete
GNOME al perfil del sistema. Del mismo modo, la adición del servicio Xfde no
añade únicamente el metapaquete @code{xfce} al perfil del sistema, sino que
también le proporciona al gestor de ficheros Thunar la posibilidad de abrir
una ventana de gestión de ficheros en ``modo root'', si la usuaria se
identifica mediante la contraseña de administración a través de la interfaz
gráfica estándar polkit. ``Añadir MATE'' significa que @code{polkit} y
@code{dbus} se extienden de manera apropiada, permitiendo a MATE operar con
privilegios elevados en un número de interfaces del sistema de propósito
especial. De manera adicional, la adición de un servicio de tipo
@code{mate-desktop-service-type} añade el metapaquete MATE al perfil del
sistema. ``Añadir Enlightenment'' significa que @code{dbus} se extiende de
manera apropiada y varios ejecutables de Enlightenment se marcan como
``setuid'', para permitir el funcionamiento esperado del sistema bloqueo de
pantalla de Enlightenment entre otras funcionalidades.

Los entornos de escritorio en Guix usan el servidor gráfico Xorg de manera
predeterminada. Si desea usar el protocolo de servidor gráfico más nuevo
llamado Wayland, debe usar el servicio @code{sddm-service} en vez de GDM
como gestor gráfico de ingreso al sistema. Una vez hecho, debe seleccionar
la sesión ``GNOME (Wayland)'' en SDDM. Alternativamente, puede intentar
iniciar GNOME en Wayland de manera manual desde una TTY con la orden
``XDG_SESSION_TYPE=wayland exec dbus-run-session
gnome-session''. Actualmente únicamente GNOME tiene implementación para
Wayland.

@defvr {Variable Scheme} gnome-desktop-service-type
This is the type of the service that adds the @uref{https://www.gnome.org,
GNOME} desktop environment.  Its value is a
@code{gnome-desktop-configuration} object (see below).

Este servicio añade el paquete @code{gnome} al perfil del sistema, y
extiende polkit con las acciones de @code{gnome-settings-daemon}.
@end defvr

@deftp {Tipo de datos} gnome-desktop-configuration
Registro de configuración para el entorno de escritorio GNOME.

@table @asis
@item @code{gnome} (predeterminado: @code{gnome})
El paquete GNOME usado.
@end table
@end deftp

@defvr {Variable Scheme} xfce-desktop-service-type
This is the type of a service to run the @uref{Xfce, https://xfce.org/}
desktop environment.  Its value is an @code{xfce-desktop-configuration}
object (see below).

Este servicio añade el paquete @code{xfce} al perfil del sistema, y extiende
polkit con la capacidad de @code{thunar} para manipular el sistema de
ficheros como root dentro de una sesión de usuaria, tras la identificación
de la usuaria con la contraseña de administración.
@end defvr

@deftp {Tipo de datos} xfce-desktop-configuration
Registro de configuración para el entorno de escritorio Xfce.

@table @asis
@item @code{xfce} (predeterminado: @code{xfce})
El paquete Xfce usado.
@end table
@end deftp

@deffn {Variable Scheme} mate-desktop-service-type
This is the type of the service that runs the
@uref{https://mate-desktop.org/, MATE desktop environment}.  Its value is a
@code{mate-desktop-configuration} object (see below).

Este servicio añade el paquete @code{mate} al perfil del sistema, y extiende
polkit con acciones de @code{mate-settings-daemon}.
@end deffn

@deftp {Tipo de datos} mate-desktop-configuration
Registro de configuración para el entorno de escritorio MATE.

@table @asis
@item @code{mate} (predeterminado: @code{mate})
El paquete MATE usado.
@end table
@end deftp

@deffn {Variable Scheme} enlightenment-desktop-service-type
Devuelve un servicio que añade el paquete @code{enlightenment} al perfil del
sistema, y extiende dbus con acciones de @code{efl}.
@end deffn

@deftp {Tipo de datos} enlightenment-desktop-service-configuration
@table @asis
@item @code{enlightenment} (predeterminado: @code{enlightenment})
El paquete enlightenment usado.
@end table
@end deftp

Debido a que los servicios de escritorio GNOME, Xfce y MATE incorporan
tantos paquetes, la variable @code{%desktop-services} no incluye ninguno de
manera predeterminada. Para añadir GNOME, Xfce o MATE, simplemente use
@code{cons} junto a @code{%desktop-services} en el campo @code{services} de
su declaración @code{operating-system}:

@lisp
(use-modules (gnu))
(use-service-modules desktop)
(operating-system
  ...
  ;; cons* añade elementos a la lista proporcionada en el último
  ;; parámetro.
  (services (cons* (service gnome-desktop-service-type)
                   (service xfce-desktop-service)
                   %desktop-services))
  ...)
@end lisp

Una vez realizado, estos entornos de escritorio se encontrarán como opciones
disponibles en la ventana del gestor gráfico de ingreso al sistema.

Las definiciones de servicio incluidas realmente en @code{%desktop-services}
y proporcionadas por @code{(gnu services dbus)} y @code{(gnu services
desktop)} se describen a continuación.

@deffn {Procedimiento Scheme} dbus-service [#:dbus @var{dbus}] [#:services '()]
Devuelve un servicio que ejecuta el ``bus del sistema'', mediante el uso de
@var{dbus}, con configuración para @var{services}.

@uref{https://dbus.freedesktop.org/, D-Bus} es una herramienta para la
facilitación de intercomunicación entre procesos. Su bus del sistema se usa
para permitir la comunicación entre y la notificación de eventos a nivel de
sistema a los servicios.

@var{services} debe ser una lista de paquetes que proporcionen un directorio
@file{etc/dbus-1/system.d} que contenga ficheros de configuración y
políticas adicionales de D-Bus. Por ejemplo, para permitir a avahi-daemon el
uso del bus del sistema, @var{services} debe tener el valor @code{(list
avahi)}.
@end deffn

@deffn {Procedimiento Scheme} elogind-service [#:config @var{config}]
Devuelve un servicio que ejecuta el daemon de gestión de ingreso al sistema
y de asientos @code{elogind}. @uref{https://github.com/elogind/elogind,
Elogind} expone una interfaz D-Bus que puede usarse para conocer las
usuarias que han ingresado en el sistema, conocer qué tipo de sesiones
tienen abiertas, suspender el sistema o inhibir su suspensión, reiniciar el
sistema y otras tareas.

Elogind maneja la mayor parte de los eventos a nivel de sistema de
alimentación de su máquina, por ejemplo mediante la suspensión del sistema
cuando se cierre la tapa, o mediante el apagado al pulsar la tecla
correspondiente.

El parámetro @var{config} especifica la configuración de elogind, y debería
resultar en una invocación @code{(elogind-configuration (@var{parámetro}
@var{valor})...)}. Los parámetros disponibles y sus valores predeterminados
son:

@table @code
@item kill-user-processes?
@code{#f}
@item kill-only-users
@code{()}
@item kill-exclude-users
@code{("root")}
@item inhibit-delay-max-seconds
@code{5}
@item handle-power-key
@code{poweroff}
@item handle-suspend-key
@code{suspend}
@item handle-hibernate-key
@code{hibernate}
@item handle-lid-switch
@code{suspend}
@item handle-lid-switch-docked
@code{ignore}
@item power-key-ignore-inhibited?
@code{#f}
@item suspend-key-ignore-inhibited?
@code{#f}
@item hibernate-key-ignore-inhibited?
@code{#f}
@item lid-switch-ignore-inhibited?
@code{#t}
@item holdoff-timeout-seconds
@code{30}
@item idle-action
@code{ignore}
@item idle-action-seconds
@code{(* 30 60)}
@item runtime-directory-size-percent
@code{10}
@item runtime-directory-size
@code{#f}
@item remove-ipc?
@code{#t}
@item suspend-state
@code{("mem" "standby" "freeze")}
@item suspend-mode
@code{()}
@item hibernate-state
@code{("disk")}
@item hibernate-mode
@code{("platform" "shutdown")}
@item hybrid-sleep-state
@code{("disk")}
@item hybrid-sleep-mode
@code{("suspend" "platform" "shutdown")}
@end table
@end deffn

@deffn {Procedimiento Scheme} accountsservice-service @
       [#:accountsservice @var{accountsservice}]
Devuelve un servicio que ejecuta AccountsService, un servicio del sistema
para la enumeración de cuentas disponibles, el cambio de sus contraseñas,
etcétera. AccountsService se integra con PolicyKit para permitir a las
usuarias sin privilegios la adquisición de la capacidad de modificar la
configuración de su sistema. Véase
@uref{https://www.freedesktop.org/wiki/Software/AccountsService/, la página
web de AccountsService} para más información.

El parámetro @var{accountsservice} es el paquete @code{accountsservice} que
se expondrá como un servicio.
@end deffn

@deffn {Procedimiento Scheme} polkit-service @
                         [#:polkit @var{polkit}]
Devuelve un servicio que ejecuta el
@uref{https://www.freedesktop.org/wiki/Software/polkit/, servicio de gestión
de privilegios Polkit}, que permite a las administradoras del sistema la
concesión de permisos sobre operaciones privilegiadas de manera
estructurada. Mediante las consultas al servicio Polkit, un componente del
sistema con privilegios puede conocer cuando debe conceder capacidades
adicionales a usuarias ordinarias. Por ejemplo, se le puede conceder la
capacidad a una usuaria ordinaria de suspender el sistema si la usuaria
ingresó de forma local.
@end deffn

@defvr {Variable Scheme} polkit-wheel-service
Servicio que añade a las usuarias del grupo @code{wheel} como
administradoras del servicio Polkit. Esto hace que se solicite su propia
contraseña a las usuarias del grupo @code{wheel} cuando realicen acciones
administrativas en vez de la contraseña de @code{root}, de manera similar al
comportamiento de @code{sudo}.
@end defvr

@defvr {Variable Scheme} upower-service-type
Servicio que ejecuta @uref{https://upower.freedesktop.org/},
@command{upowerd}, un monitor a nivel de sistema de consumo de energía y
niveles de batería, con las opciones de configuración proporcionadas.

Implementa la interfaz D-Bus @code{org.freedesktop.UPower}, y se usa de
forma notable en GNOME.
@end defvr

@deftp {Tipo de datos} upower-configuration
Tipo de datos que representa la configuración de UPower.

@table @asis

@item @code{upower} (predeterminado: @var{upower})
Paquete usado para @code{upower}.

@item @code{watts-up-pro?} (predeterminado: @code{#f})
Permite el uso del dispositivo Watts Up Pro.

@item @code{poll-batteries?} (predeterminado: @code{#t})
Usa el servicio de consulta del núcleo para los cambios en niveles de
batería.

@item @code{ignore-lid?} (predeterminado: @code{#f})
Ignora el estado de la tapa, puede ser útil en caso de ser incorrecto un
dispositivo determinado.

@item @code{use-percentage-for-policy?} (predeterminado: @code{#f})
Determina si se debe usar la política basada en el porcentaje de batería. La
opción predeterminada es el uso del tiempo restante, cambie a @code{#t} para
usar el porcentaje.

@item @code{percentage-low} (predeterminado: @code{10})
Cuando @code{use-percentaje-for-policy?} es @code{#t}, determina el
porcentaje en el que la carga de la batería se considera baja.

@item @code{percentage-critical} (predeterminado: @code{3})
Cuando @code{use-percentaje-for-policy?} es @code{#t}, determina el
porcentaje en el que la carga de la batería se considera crítica.

@item @code{percentage-action} (predeterminado: @code{2})
Cuando @code{use-percentaje-for-policy?} es @code{#t}, determina el
porcentaje en el que se tomará la acción.

@item @code{time-low} (predeterminado: @code{1200})
Cuando @code{use-percentaje-for-policy?} es @code{#t}, determina el tiempo
restante en segundos con el que carga de la batería se considera baja.

@item @code{time-critical} (predeterminado: @code{300})
Cuando @code{use-percentaje-for-policy?} es @code{#t}, determina el tiempo
restante en segundos con el que carga de la batería se considera crítica.

@item @code{time-action} (predeterminado: @code{120})
Cuando @code{use-percentaje-for-policy?} es @code{#t}, determina el tiempo
restante en segundos con el que se tomará la acción.

@item @code{critical-power-action} (predeterminada: @code{'hybrid-sleep})
La acción tomada cuando se alcanza @code{percentage-action} o
@code{time-action} (dependiendo de la configuración de
@code{use-percentage-for-policy?}).

Los valores posibles son:

@itemize @bullet
@item
@code{'power-off}

@item
@code{'hibernate}

@item
@code{'hybrid-sleep}.
@end itemize

@end table
@end deftp

@deffn {Procedimiento Scheme} udisks-service [#:udisks @var{udisks}]
Devuelve un servicio para @uref{https://udisks.freedesktop.org/docs/latest/,
UDisks}, un daemon de @dfn{gestión de discos} que proporciona interfaces de
usuaria con notificaciones y formas de montar/desmontar discos.  Los
programas que se comunican con UDisk incluyen la orden @command{udisksctl},
parte de UDisks, y la utilidad ``Discos'' de GNOME.
@end deffn

@deffn {Variable Scheme} colord-service-type
Devuelve un servicio que ejecuta @command{colord}, un servicio del sistema
con una interfaz D-Bus para la gestión de perfiles de dispositivos de
entrada y salida como la pantalla y el escáner. Se usa de forma notable por
parte de la herramienta gráfica de ``Gestión de color'' de GNOME. Véase
@uref{https://www.freedesktop.org/software/colord/, la página web de colord}
para más información.
@end deffn

@deffn {Procedimiento Scheme} geoclue-application-name [#:allowed? #t] [#:system? #f] [#:users '()]
Devuelve una configuración que permite a una aplicación el acceso a los
datos de posicionamiento de GeoClue. @var{nombre} es el Desktop ID de la
aplicación, sin la parte @code{.desktop}. Si el valor de @var{allowed?} es
verdadero, la aplicación tendrá acceso a la información de posicionamiento
de manera predeterminada. El valor booleano @var{system?} indica si una
aplicación es un componente de sistema o no. Por último, @var{users} es una
lista de UID de todas las usuarias para las que esta aplicación tiene
permitido el acceso de información. Una lista de usuarias vacía significa
que se permiten todas las usuarias.
@end deffn

@cindex acceso al escáner
@deffn {Procedimiento Scheme} sane-service-type
Este servicio proporciona acceso a escáner a través de
@uref{http://www.sane-project.org, SANE} instalando las reglas de udev
necesarias.
@end deffn

@defvr {Variable Scheme} %standard-geoclue-applications
La lista estándar de configuraciones de GeoClue de aplicaciones conocidas,
proporcionando autoridad a la utilidad de fecha y hora de GNOME para obtener
la localización actual para ajustar la zona horaria, y permitiendo que los
navegadores Icecat y Epiphany puedan solicitar información de
localización. Tanto IceCat como Epiphany solicitan permiso a la usuaria
antes de permitir a una página web conocer la ubicación de la usuaria.
@end defvr

@deffn {Procedimiento Scheme} geoclue-service [#:colord @var{colord}] @
                         [#:whitelist '()] @ [#:wifi-geolocation-url
"https://location.services.mozilla.com/v1/geolocate?key=geoclue"] @
[#:submit-data? #f] [#:wifi-submission-url
"https://location.services.mozilla.com/v1/submit?key=geoclue"] @
[#:submission-nick "geoclue"] @ [#:applications
%standard-geoclue-applications]
Devuelve un servicio que ejecuta el servicio de posicionamiento GeoClue.
Proporciona una interfaz D-Bus que permite a las aplicaciones solicitar una
posición física de la usuaria, y de manera opcional añadir información a
bases de datos de posicionamiento en línea.  Véase
@uref{https://wiki.freedesktop.org/www/Software/GeoClue/, la página web de
GeoClue} para obtener más información.
@end deffn

@deffn {Procedimiento Scheme} bluetooth-service [#:bluez @var{bluez}] @
       [@w{#:auto-enable? #f}]
Devuelve un servicio que ejecuta el daemon @command{bluetoothd} que gestiona
todos los dispositivos Bluetooth y proporciona cierto número de interfaces
D-Bus. Cuando @var{auto-enable?} es verdadero, el controlador bluetooth
tendrá alimentación automáticamente tras el arranque, lo que puede ser útil
si se posee un teclado o un ratón bluetooth.

Las usuarias necesitan la pertenencia al grupo @code{lp} para el acceso al
servicio D-Bus.
@end deffn

@defvr {Variable Scheme} gnome-keyring-service-type
This is the type of the service that adds the
@uref{https://wiki.gnome.org/Projects/GnomeKeyring, GNOME Keyring}.  Its
value is a @code{gnome-keyring-configuration} object (see below).

Este servicio añade el paquete @code{gnome-keyring} al perfil del sistema y
extiende PAM con entradas que usan @code{pam_gnome_keyring.so}, las cuales
desbloquean el anillo de claves del sistema de la usuaria cuando ingrese en
el sistema o cambie su contraseña con passwd.
@end defvr

@deftp {Tipo de datos} gnome-keyring-configuration
Registro de configuración para el servicio del anillo de claves de GNOME.

@table @asis
@item @code{keyring} (predeterminado: @code{gnome-keyring})
El paquete GNOME keyring usado.

@item @code{pam-services}
Una lista de pares @code{(@var{servicio} . @var{tipo})} que denotan los
servicios de PAM que deben extenderse, donde @var{servicio} es el nombre de
un servicio existente que debe extenderse y @var{tipo} es @code{login} o
@code{passwd}.

Si se proporciona @code{login}, añade un campo opcional
@code{pam_gnome_keyring.so} al bloque de identificación sin parámetros y al
bloque de sesión con @code{auto_start}. Si se proporciona @code{passwd},
añade un campo opcional @code{pam_gnome_keyring.so} al bloque de contraseña
sin parámetros.

De manera predeterminada, este campo contiene ``gdm-password'' con el valor
@code{login} y ``passwd'' tiene valor @code{passwd}.
@end table
@end deftp


@node Servicios de sonido
@subsection Servicios de sonido

@cindex sonido
@cindex ALSA
@cindex PulseAudio, sonido

El módulo @code{(gnu services sound)} proporciona un servicio para la
configuración del sistema ALSA (arquitectura avanzada de sonido de Linux),
el cual establece PulseAudio como el controlador de ALSA preferido para
salida de sonido.

@deffn {Variable Scheme} alsa-service-type
Es el tipo para el sistema @uref{https://alsa-project.org/, ALSA}
(Arquitectura de sonido avanzada de Linux), que genera el fichero de
configuración @file{/etc/asound.conf}. El valor para este tipo es un
registro @command{alsa-configuration} como en el ejemplo:

@lisp
(service alsa-service-type)
@end lisp

Véase a continuación más detalles sobre @code{alsa-configuration}.
@end deffn

@deftp {Tipo de datos} alsa-configuration
Tipo de datos que representa la configuración para @code{alsa-service}.

@table @asis
@item @code{alsa-plugins} (predeterminados: @var{alsa-plugins})
El paquete @code{alsa-plugins} usado.

@item @code{pulseaudio?} (predeterminado: @var{#t})
Determina si las aplicaciones ALSA deben usar el servidor de sonido
@uref{https://www.pulseaudio.org/, PulseAudio} de manera transparente.

El uso de PulseAudio le permite la ejecución de varias aplicaciones que
produzcan sonido al mismo tiempo y su control individual mediante
@command{pavucontrol}, entre otras opciones.

@item @code{extra-options} (predeterminado: @var{""})
Cadena a añadir al final del fichero @file{/etc/asound.conf}.

@end table
@end deftp

Las usuarias individuales que deseen forzar la configuración de ALSA en el
sistema para sus cuentas pueden hacerlo con el fichero @file{~/.asoundrc}:

@example
# En guix tenemos que especificar la ruta absoluta del módulo.
pcm_type.jack @{
  lib "/home/alicia/.guix-profile/lib/alsa-lib/libasound_module_pcm_jack.so"
@}

# Redirección de ALSA a jack:
# <http://jackaudio.org/faq/routing_alsa.html>.
pcm.rawjack @{
  type jack
  playback_ports @{
    0 system:playback_1
    1 system:playback_2
  @}

  capture_ports @{
    0 system:capture_1
    1 system:capture_2
  @}
@}

pcm.!default @{
  type plug
  slave @{
    pcm "rawjack"
  @}
@}
@end example

Véase @uref{https://www.alsa-project.org/main/index.php/Asoundrc} para
obtener más detalles.

@deffn {Variable Scheme} pulseaudio-service-type
Tipo de servicio del servidor de sonido @url{https://www.pulseaudio.org/,
PulseAudio/,PulseAudio}. Existe para permitir los cambios a nivel de sistema
de la configuración predeterminada a través de
@code{pulseaudio-configuration}, véase a continuación.

@quotation Aviso
This service overrides per-user configuration files.  If you want PulseAudio
to honor configuraton files in @file{~/.config/pulse} you have to unset the
environment variables @env{PULSE_CONFIG} and @env{PULSE_CLIENTCONFIG} in
your @file{~/.bash_profile}.
@end quotation

@quotation Aviso
Este servicio no asegura en sí que el paquete @code{pulseaudio} exista en su
máquina. Únicamente añade los ficheros de configuración, como se detalla a
continuación. En el caso (ciertamente poco probable), de que se encuentre si
un paquete pulseaudio @code{pulseaudio}, considere activarlo a través del
tipo @code{alsa-service-type} mostrado previamente.
@end quotation
@end deffn

@deftp {Tipo de datos} pulseaudio-configuration
Tipo de datos que representa la configuración para
@code{pulseaudio-service}.

@table @asis
@item @var{client-conf} (predeterminada: @code{'()})
Lista de opciones de configuración de @file{client.conf}. Acepta una lista
de cadenas o pares símbolo-valor. Las cadenas se introducirán literalmente
añadiendo un salto de línea. Los pares tendrán formato ``clave = valor'', de
nuevo añadiendo un salto de línea.

@item @var{daemon-conf} (predeterminada: @code{'((flat-volumes . no))})
Lista de opciones de configuración de @file{daemon.conf}, con el mismo
formato que @var{client-conf}.

@item @var{script-file} (predeterminado: @code{(file-append pulseaudio "/etc/pulse/default.pa")})
Fichero del guión usado como @file{default.pa}

@item @var{system-script-file} (predeterminado: @code{(file-append pulseaudio "/etc/pulse/system.pa")})
Fichero del guión usado como @file{system.pa}
@end table
@end deftp

@deffn {Variable Scheme} ladspa-service-type
Este servicio proporciona valor a la variable @var{LADSPA_PATH}, de manera
que los programas que lo tengan en cuenta, por ejemplo PulseAudio, puedan
cargar módulos LADSPA.

El siguiente ejemplo configura el servicio para permitir la activación de
los módulos del paquete @code{swh-plugins}:

@lisp
(service ladspa-service-type
         (ladspa-configuration (plugins (list swh-plugins))))
@end lisp

Véase @uref{http://plugin.org.uk/ladspa-swh/docs/ladspa-swh.html} para
obtener más detalles.

@end deffn

@node Servicios de bases de datos
@subsection Servicios de bases de datos

@cindex base de datos
@cindex SQL
El módulo @code{(gnu services databases)} proporciona los siguientes
servicios.

@deffn {Procedimiento Scheme} postgresql-service [#:postgresql postgresql] @
       [#:config-file] [#:data-directory ``/var/lib/postgresql/data''] @ [#:port
5432] [#:locale ``en_US.utf8''] [#:extension-packages '()]
Devuelve un servicio que ejecuta @var{postgresql}, el servidor de bases de
datos PostgreSQL.

El daemon de PostgreSQL carga su configuración de tiempo de ejecución desde
@var{config-file}, crea un cluster de bases de datos con @var{locale} como
la localización predeterminada, almacenado en @var{data-directory}. Una vez
hecho esto, escucha en @var{port}.

@cindex paquetes de extensión de postgresql (extension-packages)
Las extensiones adicionales se cargan de paquetes enumerados en
@var{extension-packages}. Las extensiones están disponibles en tiempo de
ejecución. Por ejemplo, para crear una base de datos geográfica con la
extensión @code{postgis}, una usuaria podría configurar el servicio
postgresql-service como en este ejemplo:

@cindex postgis
@lisp
(use-package-modules databases geo)

(operating-system
  ...
  ;; postgresql es necesario para ejecutar `psql' pero no se necesita
  ;; postgis para un funcionamiento correcto.
  (packages (cons* postgresql %base-packages))
  (services
    (cons*
      (postgresql-service #:extension-packages (list postgis))
      %base-services)))
@end lisp

Una vez hecho, la extensión estará visible y podrá inicializar una base de
datos geográfica de este modo:

@example
psql -U postgres
> create database pruebapostgis;
> \connect pruebapostgis;
> create extension postgis;
> create extension postgis_topology;
@end example

No es necesaria la adición de este campo para extensiones incluidas en la
distribución oficial@footnote{NdT: ``contrib'' de ``contributed'' en inglés,
``contribuciones'' podría entenderse en castellano.} como hstore o dblink,
puesto que ya pueden cargarse en postgresql. Este campo únicamente es
necesario para extensiones proporcionadas por otros paquetes.
@end deffn

@deffn {Procedimiento Scheme} mysql-service [#:config (mysql-configuration)]
Devuelve un servicio que ejecuta @command{mysqld}, el servidor de base de
datos MySQL o MariaDB.

El parámetro opcional @var{config} especifica la configuración para
@command{mysqld}, que debe ser un objeto @code{<mysql-configuration>}.
@end deffn

@deftp {Tipo de datos} mysql-configuration
Tipo de datos que representa la configuración para @code{mysql-service}.

@table @asis
@item @code{mysql} (predeterminado: @var{mariadb})
Objeto de paquete del servidor de bases de datos MySQL, puede ser tanto
@var{mariadb} como @var{mysql}.

Para MySQL, se mostrará una contraseña de root temporal durante el tiempo de
activación.  Para MariaDB, la contraseña de root está vacía.

@item @code{port} (predeterminado: @code{3306})
Puerto TCP en el que escucha el servidor de bases de datos a la espera de
conexiones entrantes.
@end table
@end deftp

@defvr {Variable Scheme} memcached-service-type
Este es el tipo de servicio para el servicio @uref{https://memcached.org/,
Memcached}, que proporciona caché distribuida en memoria.  El valor para
este tipo de servicio es un objeto @code{memcached-configuration}.
@end defvr

@lisp
(service memcached-service-type)
@end lisp

@deftp {Tipo de datos} memcached-configuration
Tipo de datos que representa la configuración de memcached.

@table @asis
@item @code{memcached} (predeterminado: @code{memcached})
El paquete de Memcached usado.

@item @code{interfaces} (predeterminadas: @code{'("0.0.0.0")})
Interfaces de red por las que se esperan conexiones.

@item @code{tcp-port} (predeterminado: @code{11211})
Puerto en el que se deben aceptar conexiones,

@item @code{udp-port} (predeterminado: @code{11211})
Puerto en el que se deben aceptar conexiones UDP, el valor 0 desactiva la
escucha en un socket UDP.

@item @code{additional-options} (predeterminadas: @code{'()})
Opciones de línea de órdenes adicionales que se le proporcionarán a
@code{memcached}.
@end table
@end deftp

@defvr {Variable Scheme} mongodb-service-type
Este es el tipo de servicio para @uref{https://www.mongodb.com/,
MongoDB}. El valor para este tipo de servicio es un objeto
@code{mongodb-configuration}.
@end defvr

@lisp
(service mongodb-service-type)
@end lisp

@deftp {Tipo de datos} mongodb-configuration
Tipo de datos que representa la configuración de GPM.

@table @asis
@item @code{mongodb} (predeterminado: @code{mongodb})
El paquete MongoDB usado.

@item @code{config-file} (predeterminado: @code{%default-mongodb-configuration-file})
El fichero de configuración de MongoDB.

@item @code{data-directory} (predeterminado: @code{"/var/lib/mongodb"})
Este valor se usa para la creación del directorio, de modo que exista y sea
propiedad de la usuaria mongodb. Debe corresponder con el directorio de
datos para el que se ha configurado MongoDB a través del fichero de
configuración.
@end table
@end deftp

@defvr {Variable Scheme} redis-service-type
Es el tipo de servicio para el almacén de clave/valor
@uref{https://redis.io/, Redis}, cuyo valor es un objeto
@code{redis-configuration}.
@end defvr

@deftp {Tipo de datos} redis-configuration
Tipo de datos que representa la configuración de redis.

@table @asis
@item @code{redis} (predeterminado: @code{redis})
El paquete Redis usado.

@item @code{bind} (predeterminada: @code{"127.0.0.1"})
La interfaz de red en la que se escucha.

@item @code{port} (predeterminado: @code{6379})
Puerto en el que se aceptan conexiones, el valor 0 desactiva la escucha en
un socket TCP.

@item @code{working-directory} (predeterminado: @code{"/var/lib/redis"})
Directorio en el que se almacena los ficheros de base de datos y
relacionados.
@end table
@end deftp

@node Servicios de correo
@subsection Servicios de correo

@cindex correo
@cindex correo electrónico (email)
El módulo @code{(gnu services mail)} proporciona definiciones de servicios
Guix para servicios de correo electrónico: servidores IMAP, POP3 y LMTP, así
como agentes de transporte de correo (MTA). ¡Muchos acrónimos! Estos
servicios se detallan en las subsecciones a continuación.

@subsubheading Servicio Dovecot

@deffn {Procedimiento Scheme} dovecot-service [#:config (dovecot-configuration)]
Devuelve un servicio que ejecuta el servidor de correo IMAP/POP3/LMTP
Dovecot.
@end deffn

Habitualmente Dovecot no necesita mucha configuración; el objeto de
configuración predeterminado creado por @code{(dovecot-configuration)} es
suficiente si su correo se entrega en @code{~/Maildir}. Un certificado
auto-firmado se generará para las conexiones protegidas por TLS, aunque
Dovecot también escuchará en puertos sin cifrar de manera
predeterminada. Existe un amplio número de opciones no obstante, las cuales
las administradoras del correo puede que deban cambiar, y como en el caso de
otros servicios, Guix permite a la administradora del sistema la
especificación de dichos parámetros a través de una interfaz Scheme
uniforme.

Por ejemplo, para especificar que el correo se encuentra en
@code{maildir:~/.correo}, se debe instanciar el servicio de Dovecot de esta
manera:

@lisp
(dovecot-service #:config
                 (dovecot-configuration
                  (mail-location "maildir:~/.correo")))
@end lisp

A continuación se encuentran los parámetros de configuración disponibles. El
tipo de cada parámetro antecede la definición del mismo; por ejemplo,
@samp{string-list foo} indica que el parámetro @code{foo} debe especificarse
como una lista de cadenas. También existe la posibilidad de especificar la
configuración como una cadena, si tiene un fichero @code{dovecot.conf}
antiguo que quiere trasladar a otro sistema; véase el final para más
detalles.

@c The following documentation was initially generated by
@c (generate-documentation) in (gnu services mail).  Manually maintained
@c documentation is better, so we shouldn't hesitate to edit below as
@c needed.  However if the change you want to make to this documentation
@c can be done in an automated way, it's probably easier to change
@c (generate-documentation) than to make it below and have to deal with
@c the churn as dovecot updates.

Los campos disponibles de @code{dovecot-configuration} son:

@deftypevr {parámetro de @code{dovecot-configuration}} package dovecot
El paquete dovecot.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadenas-separada-comas listen
Una lista de direcciones IP o nombres de máquina donde se escucharán
conexiones. @samp{*} escucha en todas las interfaces IPv4, @samp{::} escucha
en todas las interfaces IPv6. Si desea especificar puertos distintos a los
predefinidos o algo más complejo, personalice los campos de dirección y
puerto del @samp{inet-listener} de los servicios específicos en los que
tenga interés.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-protocol-configuration protocols
Lista de protocolos que se desea ofrecer. Los protocolos disponibles
incluyen @samp{imap}, @samp{pop3} y @samp{lmtp}.

Los campos disponibles de @code{protocol-configuration} son:

@deftypevr {parámetro de @code{protocol-configuration}} string name
El nombre del protocolo.
@end deftypevr

@deftypevr {parámetro de @code{protocol-configuration}} string auth-socket-path
Ruta del socket de UNIX del servidor de identificación maestro para la
búsqueda de usuarias. Se usa por parte de imap (para usuarias compartidas) y
lda. Su valor predeterminado es @samp{"/var/run/dovecot/auth-userdb"}.
@end deftypevr

@deftypevr {parámetro de @code{protocol-configuration}} list-cadenas-separada-espacios mail-plugins
Lista separada por espacios de módulos a cargar.
@end deftypevr

@deftypevr {parámetro de @code{protocol-configuration}} entero-no-negativo mail-max-userip-connections
Número máximo de conexiones IMAP permitido para una usuaria desde cada
dirección IP. ATENCIÓN: El nombre de usuaria es sensible a las mayúsculas.
Su valor predeterminado es @samp{10}.
@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-service-configuration services
Lista de servicios activados. Los servicios disponibles incluyen
@samp{imap}, @samp{imap-login}, @samp{pop3}, @samp{pop3-login}, @samp{auth}
y @samp{lmtp}.

Los campos disponibles de @code{service-configuration} son:

@deftypevr {parámetro de @code{service-configuration}} string kind
El tipo del servicio. Entre los valores aceptados se incluye
@code{director}, @code{imap-login}, @code{pop3-login}, @code{lmtp},
@code{imap}, @code{pop3}, @code{auth}, @code{auth-worker}, @code{dict},
@code{tcpwrap}, @code{quota-warning} o cualquier otro.
@end deftypevr

@deftypevr {parámetro de @code{service-configuration}} lista-listener-configuration listeners
Procesos de escucha para el servicio.  Un proceso de escucha es un objeto
@code{unix-listener-configuration}, un objeto
@code{fifo-listener-configuration} o un objeto
@code{inet-listener-configuration}.
Su valor predeterminado es @samp{()}.

Los campos disponibles de @code{unix-listener-configuration} son:

@deftypevr {parámetro de @code{unix-listener-configuration}} string path
Ruta al fichero, relativa al campo @code{base-dir}. También se usa como
nombre de la sección.
@end deftypevr

@deftypevr {parámetro de @code{unix-listener-configuration}} string mode
Modo de acceso del socket.
Su valor predeterminado es @samp{"0600"}.
@end deftypevr

@deftypevr {parámetro de @code{unix-listener-configuration}} string user
Usuaria que posee el socket.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{unix-listener-configuration}} string group
Grupo que posee el socket.
Su valor predeterminado es @samp{""}.
@end deftypevr


Los campos disponibles de @code{fifo-listener-configuration} son:

@deftypevr {parámetro de @code{fifo-listener-configuration}} string path
Ruta al fichero, relativa al campo @code{base-dir}. También se usa como
nombre de la sección.
@end deftypevr

@deftypevr {parámetro de @code{fifo-listener-configuration}} string mode
Modo de acceso del socket.
Su valor predeterminado es @samp{"0600"}.
@end deftypevr

@deftypevr {parámetro de @code{fifo-listener-configuration}} string user
Usuaria que posee el socket.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{fifo-listener-configuration}} string group
Grupo que posee el socket.
Su valor predeterminado es @samp{""}.
@end deftypevr


Los campos disponibles de @code{inet-listener-configuration} son:

@deftypevr {parámetro de @code{inet-listener-configuration}} string protocol
El protocolo con el que se esperan las conexiones.
@end deftypevr

@deftypevr {parámetro de @code{inet-listener-configuration}} string address
La dirección en la que se escuchará, o vacío para escuchar en todas las
direcciones.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{inet-listener-configuration}} entero-no-negativo port
El puerto en el que esperarán conexiones.
@end deftypevr

@deftypevr {parámetro de @code{inet-listener-configuration}} boolean ssl?
Si se usará SSL para este servicio; @samp{yes} (sí), @samp{no} o
@samp{required} (necesario).
Su valor predeterminado es @samp{#t}.
@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{service-configuration}} entero-no-negativo client-limit
Número máximo de conexiones simultáneas por cliente por proceso. Una vez se
reciba este número de conexiones, la siguiente conexión entrante solicitará
a Dovecot el inicio de un nuevo proceso. Si se proporciona el valor 0, se
usa @code{default-client-limit}.

El valor predeterminado es @samp{0}.

@end deftypevr

@deftypevr {parámetro de @code{service-configuration}} entero-no-negativo service-count
Número de conexiones a manejar antes de iniciar un nuevo
proceso. Habitualmente los únicos valores útiles son 0 (ilimitadas) o 1. 1
es más seguro, pero 0 es más rápido. <doc/wiki/LoginProcess.txt>.
Su valor predeterminado es @samp{1}.

@end deftypevr

@deftypevr {parámetro de @code{service-configuration}} entero-no-negativo process-limit
Número máximo de procesos que pueden existir para este servicio. Si se
proporciona el valor 0, se usa @code{default-process-limit}.

El valor predeterminado es @samp{0}.

@end deftypevr

@deftypevr {parámetro de @code{service-configuration}} entero-no-negativo process-min-avail
Número de procesos que siempre permanecerán a la espera de más
conexiones. Su valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{service-configuration}} entero-no-negativo vsz-limit
Si proporciona @samp{service-count 0}, probablemente necesitará incrementar
este valor. Su valor predeterminado es @samp{256000000}.
@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} dict-configuration dict
Configuración de Dict, como la creada por el constructor
@code{dict-configuration}.

Los campos disponibles de @code{dict-configuration} son:

@deftypevr {parámetro de @code{dict-configuration}} campos-libres entries
Una lista de pares clave-valor que este diccionario debe incorporar.
Su valor predeterminado es @samp{()}.
@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-passdb-configuration passdbs
Una lista de configuraciones de passdb, cada una creada por el constructor
@code{passdb-configuration}.

Los campos disponibles de @code{passdb-configuration} son:

@deftypevr {parámetro de @code{passdb-configuration}} string driver
El controlador que passdb debe usar. Entre los valores aceptados se incluye
@samp{pam}, @samp{passwd}, @samp{shadow}, @samp{bsdauth} y @samp{static}.
Su valor predeterminado es @samp{"pam"}.
@end deftypevr

@deftypevr {parámetro de @code{passdb-configuration}} lista-cadenas-separada-espacios args
Lista de parámetros separados por espacios para proporcionar al controlador
passdb.
Su valor predeterminado es @samp{""}.
@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-userdb-configuration userdbs
Lista de configuraciones userdb, cada una creada por el constructor
@code{userdb-configuration}.

Los campos disponibles de @code{userdb-configuration} son:

@deftypevr {parámetro de @code{userdb-configuration}} string driver
El controlador que userdb debe usar. Entre los valores aceptados se incluye
@samp{passwd} y @samp{static}.
Su valor predeterminado es @samp{"passwd"}.
@end deftypevr

@deftypevr {parámetro de @code{userdb-configuration}} lista-cadenas-separada-espacios args
Lista separada por espacios de parámetros usados para el controlador userdb.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{userdb-configuration}} parámetros-libres override-fields
Sustituye los valores de campos de passwd.
Su valor predeterminado es @samp{()}.
@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} plugin-configuration plugin-configuration
Configuración del módulo, creada por el constructor
@code{plugin-configuration}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-namespace-configuration namespaces
Lista de espacios de nombres. Cada elemento de la lista debe crearse con el
constructor @code{namespace-configuration}.

Los campos disponibles de @code{namespace-configuration} son:

@deftypevr {parámetro de @code{namespace-configuration}} string name
Nombre para este espacio de nombres.
@end deftypevr

@deftypevr {parámetro de @code{namespace-configuration}} string type
Tipo del espacio de nombres: @samp{private}, @samp{shared} o @samp{public}.
Su valor predeterminado es @samp{"private"}.
@end deftypevr

@deftypevr {parámetro de @code{namespace-configuration}} string separator
Separador jerárquico usado. Debe usar el mismo separador para todos los
espacios de nombres o algunos clientes pueden confundirse. Habitualmente
@samp{/} es un buen valor. El valor predeterminado depende no obstante del
formato del almacenamiento de correo subyacente.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{namespace-configuration}} string prefix
Prefijo necesario para el acceso a este espacio de nombres. Tiene que ser
necesario para todos los espacios de nombres. Por ejemplo @samp{Public/}.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{namespace-configuration}} string location
Localización física de la bandeja de correo. En el mismo formato que la
localización del correo, que también es su valor predeterminado.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{namespace-configuration}} boolean inbox?
Únicamente puede existir una bandeja de entrada (INBOX), y esta
configuración define qué espacio de nombres la posee.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{namespace-configuration}} boolean hidden?
Si un espacio de nombres está oculto, no se anuncia a los clientes a través
de la extensión NAMESPACE. Lo más probable es que también desee proporcionar
@samp{list? #f}. Es útil principalmente durante la conversión desde otro
servidor de correo con espacios de nombres distintos que desea marcar como
obsoletos pero que todavía funcionan. Por ejemplo, puede crear espacios de
nombres ocultos con prefijos @samp{~/mail}, @samp{~%u/mail} y @samp{mail/}.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{namespace-configuration}} boolean list?
Muestra las bandejas de correo bajo este espacio de nombres con la orden
LIST. Hace que el espacio de nombres sea visible para clientes que no
permiten la extensión NAMESPACE. El valor especial @code{children} enumera
las bandejas de correo descendientes, pero oculta el prefijo del espacio de
nombres.
Su valor predeterminado es @samp{#t}.
@end deftypevr

@deftypevr {parámetro de @code{namespace-configuration}} boolean subscriptions?
El espacio de nombres maneja sus propias subscripciones. Si es @code{#f}, el
espacio de nombres superior las maneja. El prefijo vacío siempre debe tener
este valor como @code{#t}.
Su valor predeterminado es @samp{#t}.
@end deftypevr

@deftypevr {parámetro de @code{namespace-configuration}} lista-mailbox-configuration mailboxes
Lista de bandejas de correo predefinidas en este espacio de nombres.
Su valor predeterminado es @samp{()}.

Los campos disponibles de @code{mailbox-configuration} son:

@deftypevr {parámetro de @code{mailbox-configuration}} string name
Nombre de esta bandeja de correo.
@end deftypevr

@deftypevr {parámetro de @code{mailbox-configuration}} string auto
Con @samp{create} se crea de forma automática esta bandeja de correo. Con
@samp{subscribe} se crea y se suscribe a la bandeja de correo.
Su valor predeterminado es @samp{"no"}.
@end deftypevr

@deftypevr {parámetro de @code{mailbox-configuration}} lista-cadenas-separada-espacios special-use
Lista de atributos @code{SPECIAL-USE} de IMAP como se especifican en el RFC
6154. Entre los valores aceptados se incluye @code{\All}, @code{\Archive},
@code{\Drafts}, @code{\Flagged}, @code{\Junk}, @code{\Sent} y @code{\Trash}.
Su valor predeterminado es @samp{()}.
@end deftypevr

@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} nombre-fichero base-dir
Directorio base donde se almacenan los datos de tiempo de ejecución.
Su valor predeterminado es @samp{"/var/run/dovecot/"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string login-greeting
Mensaje de saludo para clientes.
Su valor predeterminado es @samp{"Dovecot ready."}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadenas-separada-espacios login-trusted-networks
Lista de rangos de red en los que se confía. Las conexiones desde estas IP
tienen permitido forzar sus direcciones IP y puertos (para el registro y las
comprobaciones de identidad). @samp{disable-plaintext-auth} también se
ignora en estas redes. Habitualmente aquí se especificarían los servidores
proxy IMAP.
Su valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadenas-separada-espacios login-access-sockets
Lista de sockets para la comprobación de acceso al sistema (por ejemplo
tcpwrap).
Su valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean verbose-proctitle?
Muestra títulos de procesamiento más detallados (en la
postdata). Actualmente muestra el nombre de la usuaria y su dirección IP. Es
útil para ver quién está usando procesos IMAP realmente (por ejemplo
bandejas de correo compartidas o si el mismo identificador numérico de
usuaria se usa para varias cuentas).
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean shutdown-clients?
Determina si se deben finalizar todos los procesos cuando el proceso maestro
de Dovecot termine su ejecución. El valor @code{#f} significa que Dovecot
puede actualizarse sin forzar el cierre de las conexiones existentes (aunque
esto puede ser un problema si la actualización se debe, por ejemplo, a la
corrección de una vulnerabilidad).
Su valor predeterminado es @samp{#t}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo doveadm-worker-count
Si es no-cero, ejecuta las ordenes del correo a través de este número de
conexiones al servidor doveadm, en vez de ejecutarlas directamente en el
mismo proceso.
Su valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string doveadm-socket-path
Socket UNIX o máquina:puerto usados para la conexión al servidor doveadm.
Su valor predeterminado es @samp{"doveadm-server"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadenas-separada-espacios import-environment
Lista de variables de entorno que se preservan al inicio de Dovecot y se
proporcionan a los procesos iniciados. También puede proporcionar pares
clave=valor para proporcionar siempre dicha configuración específica.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean disable-plaintext-auth?
Desactiva la orden LOGIN y todas las otras identificaciones en texto plano a
menos que se use SSL/TLS (capacidad LOGINDISABLED). Tenga en cuenta que si
la IP remota coincide con la IP local (es decir, se ha conectado desde la
misma máquina), la conexión se considera segura y se permite la
identificación en texto plano. Véase también la configuración ssl=required.
Su valor predeterminado es @samp{#t}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo auth-cache-size
Tamaño de la caché de identificaciones (por ejemplo, @samp{#e10e6}. 0
significa que está desactivada. Tenga en cuenta que bsdauth, PAM y vpopmail
necesitan un valor en @samp{cache-key} para que se use la caché.
Su valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string auth-cache-ttl
Tiempo de vida de los datos almacenados en caché. Los registros de caché no
se usan tras su expiración, *excepto* si la base de datos principal devuelve
un fallo interno. También se intentan manejar los cambios de contraseña de
manera automática: si la identificación previa de la usuaria fue
satisfactoria, pero no esta última, la caché no se usa. En estos momentos
únicamente funciona con identificación en texto plano.
Su valor predeterminado es @samp{"1 hour"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string auth-cache-negative-ttl
Tiempo de vida para fallos de búsqueda en la caché (usuaria no encontrada,
la contraseña no coincide). 0 desactiva completamente su almacenamiento en
caché.
Su valor predeterminado es @samp{"1 hour"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadenas-separada-espacios auth-realms
Lista de dominios para los mecanismos de identificación de SASL que
necesite. Puede dejarla vacía si no desea permitir múltiples
dominios. Muchos clientes simplemente usarán el primero de la lista, por lo
que debe mantener el dominio predeterminado en primera posición.
Su valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string auth-default-realm
Dominio predeterminado usado en caso de no especificar ninguno. Esto se usa
tanto en dominios SASL y como al añadir @@dominio al nombre de usuaria en
los ingresos al sistema a través de texto en claro.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string auth-username-chars
Lista de caracteres permitidos en los nombres de usuaria. Si el nombre de
usuaria proporcionado contiene un carácter no enumerado aquí, el login falla
automáticamente. Es únicamente una comprobación adicional para asegurarse de
que las usuarias no pueden explotar ninguna potencial vulnerabilidad con el
escape de comillas en bases de datos SQL/LDAP. Si desea permitir todos los
caracteres, establezca este valor a la cadena vacía.
Su valor predeterminado es
@samp{"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890.-_@@"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string auth-username-translation
Traducciones de caracteres de nombres de usuaria antes de que se busque en
las bases de datos. El valor contiene series de caracteres "original ->
transformado". Por ejemplo @samp{#@@/@@} significa que @samp{#} y @samp{/}
se traducen en @samp{@@}.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string auth-username-format
Formato proporcionado al nombre de usuaria antes de buscarlo en las bases de
datos. Puede usar variables estándar aquí, por ejemplo %Lu transformará el
nombre a minúsculas, %n eliminará el fragmento del dominio si se
proporcionó, o @samp{%n-AT-%d} cambiaría @samp{@@} en @samp{-AT-}. Esta
traducción se realiza tras los cambios de @samp{auth-username-translation}.
Su valor predeterminado es @samp{"%Lu"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string auth-master-user-separator
Si desea permitir que usuarias maestras ingresen mediante la especificación
del nombre de usuaria maestra dentro de la cadena de nombre de usuaria
normal (es decir, sin usar el mecanismo para ello implementado por SASL),
puede especificar aquí el carácter separador. El formato es entonces
<usuaria><separador><usuaria maestra>. UW-IMAP usa @samp{*} como separador,
por lo que esa puede ser una buena elección.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string auth-anonymous-username
Usuaria usada para las usuarias que ingresen al sistema con el mecanismo de
SASL ANONYMOUS.
Su valor predeterminado es @samp{"anonymous"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo auth-worker-max-count
Número máximo de procesos de trabajo dovecot-auth. Se usan para la ejecución
de consultas bloqueantes a passdb y userdb (por ejemplo MySQL y PAM). Se
crean y destruyen bajo demanda de manera automática.
Su valor predeterminado es @samp{30}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string auth-gssapi-hostname
Nombre de máquina usado en los nombres de GSSAPI principales. Por omisión se
usa el nombre devuelto por gethostname(). Use @samp{$ALL} (con comillas)
para permitir todas las entradas keytab.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string auth-krb5-keytab
Keytab de Kerberos usado para el mecanismo GSSAPI. Si no se especifica
ninguno, se usa el predeterminado del sistema (habitualmente
@file{/etc/krb5.keytab}). Puede ser necesario cambiar el servicio auth para
que se ejecute como root y tenga permisos de lectura sobre este fichero.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean auth-use-winbind?
Se identifica con NTLM y GSS-SPNEGO mediante el uso del daemon winbind de
Samba y la herramienta auxiliar
@samp{ntlm-auth}. <doc/wiki/Authentication/Mechanisms/Winbind.txt>.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} nombre-fichero auth-winbind-helper-path
Ruta al binario de la herramienta auxiliar @samp{ntlm-auth} de Samba.
Su valor predeterminado es @samp{"/usr/bin/ntlm_auth"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string auth-failure-delay
Tiempo de espera antes de responder a identificaciones fallidas.
Su valor predeterminado es @samp{"2 secs"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean auth-ssl-require-client-cert?
Es necesario un certificado de cliente SSL válido o falla la identificación.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean auth-ssl-username-from-cert?
Toma el nombre de usuaria del certificado de cliente SSL, mediante el uso de
@code{X509_NAME_get_text_by_NID()}, que devuelve el nombre común
(CommonName) del nombre de dominio (DN) del sujeto del certificado.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadenas-separada-espacios auth-mechanisms
Lista de mecanismos de identificación deseados. Los mecanismos permitidos
son: @samp{plain}, @samp{login}, @samp{digest-md5}, @samp{cram-md5},
@samp{ntlm}, @samp{rpa}, @samp{apop}, @samp{anonymous}, @samp{gssapi},
@samp{otp}, @samp{key}, and @samp{gss-spnego}.  ATENCIÓN: Véase también la
opción de configuración @samp{disable-plaintext-auth}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadenas-separada-espacios director-servers
Lista de IP o nombres de máquina de los servidores directores, incluyendo
este mismo. Los puertos se pueden especificar como ip:puerto. El puerto
predeterminado es el mismo que el usado por el servicio director
@samp{inet-listener}.
Su valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadenas-separada-espacios director-mail-servers
Lista de IP o nombres de máquina de los servidores motores de correo. Se
permiten también rangos, como 10.0.0.10-10.0.0.30.
Su valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string director-user-expire
Por cuanto tiempo se redirige a las usuarias a un servidor específico tras
pasar ese tiempo sin conexiones.
Su valor predeterminado es @samp{"15 min"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string director-username-hash
Cómo se traduce el nombre de usuaria antes de aplicar el hash. Entre los
valores útiles se incluye %Ln si la usuaria puede ingresar en el sistema con
o sin @@dominio, %Ld si las bandejas de correo se comparten dentro del
dominio.
Su valor predeterminado es @samp{"%Lu"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string log-path
Fichero de registro usado para los mensajes de error. @samp{syslog} los
envía a syslog, @samp{"/dev/stderr"} a la salida de error estándar.
Su valor predeterminado es @samp{"syslog"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string info-log-path
Fichero de registro usado para los mensajes informativos. Por omisión se usa
@samp{log-path}.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string debug-log-path
Fichero de registro usado para los mensajes de depuración. Por omisión se
usa @samp{info-log-path}.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string syslog-facility
Subsistema de syslog (facility) usado si se envía el registro a syslog. De
manera habitual, si desea que no se use @samp{mail}, se usará
local0..local7. Otros subsistemas estándar también están implementados.
Su valor predeterminado es @samp{"mail"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean auth-verbose?
Registra los intentos de identificación infructuosos y las razones por los
que fallaron.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string auth-verbose-passwords
En caso de no coincidir la contraseña, registra la contraseña que se
intentó. Los valores aceptados son ``no'', ``plain'' y ``sha1''. ``sha1''
puede ser útil para diferenciar intentos de descubrir la contraseña por
fuerza bruta frente a una usuaria simplemente intentando la misma contraseña
una y otra vez. También puede recortar el valor a n caracteres mediante la
adición de ":n" (por ejemplo ``sha1:6'').
Su valor predeterminado es @samp{"no"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean auth-debug?
Registros aún más detallados para facilitar la depuración. Muestra, por
ejemplo, las consultas SQL.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean auth-debug-passwords?
En caso de no coincidir la contraseña, registra las contraseñas y esquema
usadas de manera que el problema se pueda depurar. La activación de este
valor también provoca la activación de @samp{auth-debug}.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean mail-debug?
Permite la depuración de los procesos de correo. Puede ayudarle a comprender
los motivos en caso de que Dovecot no encuentre sus correos.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean verbose-ssl?
Muestra los errores a nivel de protocolo SSL.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string log-timestamp
Prefijo de cada línea registrada en el fichero. Los códigos % tienen el
formato de strftime(3).
Su valor predeterminado es @samp{"\"%b %d %H:%M:%S \""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadenas-separada-espacios login-log-format-elements
Lista de elementos que se desea registrar. Los elementos que tengan valor de
variable no-vacía se unen para la formación de una cadena separada por
comas.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string login-log-format
Formato del registro de ingresos al sistema. %s contiene la cadena
@samp{login-log-format-elements}, %$ contiene los datos que se desean
registrar.
Su valor predeterminado es @samp{"%$: %s"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mail-log-prefix
Prefijo de los registros de procesos de correo. Véase doc/wiki/Variables.txt
para obtener una lista de variables que puede usar.
Su valor predeterminado es @samp{"\"%s(%u)<%@{pid@}><%@{session@}>: \""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string deliver-log-format
Formato usado para el registro de las entregas de correo. Puede usar las
variables:
@table @code
@item %$
Mensaje de estado de entrega (por ejemplo: @samp{saved to INBOX})
@item %m
Message-ID
@item %s
Asunto
@item %f
De (dirección)
@item %p
Tamaño físico
@item %w
Tamaño virtual.
@end table
El valor predeterminado es @samp{"msgid=%m: %$"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mail-location
Localización de las bandejas de correo de las usuarias. El valor
predeterminado está vacío, lo que significa que Dovecot intenta encontrar
las bandejas de correo de manera automática. Esto no funciona si la usuaria
no tiene todavía ningún correo, por lo que debe proporcionarle a Dovecot la
ruta completa.

If you're using mbox, giving a path to the INBOX file (e.g.@:
@file{/var/mail/%u}) isn't enough.  You'll also need to tell Dovecot where
the other mailboxes are kept.  This is called the @emph{root mail
directory}, and it must be the first path given in the @samp{mail-location}
setting.

There are a few special variables you can use, e.g.:

@table @samp
@item %u
nombre de usuaria
@item %n
parte de la usuaria en usuaria@@dominio, idéntica a %u si no existe dominio
@item %d
parte del dominio en usuaria@@dominio, vacía si no existe dominio
@item %h
directorio de la usuaria
@end table

Véase doc/wiki/Variables.txt para obtener una lista completa. Algunos
ejemplos:
@table @samp
@item maildir:~/Correo
@item mbox:~/correo:INBOX=/var/mail/%u
@item mbox:/var/mail/%d/%1n/%n:INDEX=/var/indexes/%d/%1n/%
@end table
El valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mail-uid
Usuaria del sistema y grupo que realizan el acceso al correo. Si se usan
varias, userdb puede forzar su valor al devolver campos uid o gid. Se pueden
usar tanto identificadores numéricos como nominales. <doc/wiki/UserIds.txt>.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mail-gid

El valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mail-privileged-group
Group to enable temporarily for privileged operations.  Currently this is
used only with INBOX when either its initial creation or dotlocking fails.
Typically this is set to @samp{"mail"} to give access to @file{/var/mail}.
Defaults to @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mail-access-groups
Grant access to these supplementary groups for mail processes.  Typically
these are used to set up access to shared mailboxes.  Note that it may be
dangerous to set these if users can create symlinks (e.g.@: if @samp{mail}
group is set here, @code{ln -s /var/mail ~/mail/var} could allow a user to
delete others' mailboxes, or @code{ln -s /secret/shared/box ~/mail/mybox}
would allow reading it).  Defaults to @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean mail-full-filesystem-access?
Allow full file system access to clients.  There's no access checks other
than what the operating system does for the active UID/GID.  It works with
both maildir and mboxes, allowing you to prefix mailboxes names with e.g.@:
@file{/path/} or @file{~user/}.  Defaults to @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean mmap-disable?
Don't use @code{mmap()} at all.  This is required if you store indexes to
shared file systems (NFS or clustered file system).  Defaults to @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean dotlock-use-excl?
Confía en el correcto funcionamiento de @samp{O_EXCL} para la creación de
ficheros de bloqueo dotlock. NFS implementa @samp{O_EXCL} desde la versión
3, por lo que debería ser seguro usarlo hoy en día de manera predeterminada.
Su valor predeterminado es @samp{#t}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mail-fsync
Cuando se usarán las llamadas fsync() o fdatasync():
@table @code
@item optimized
Cuando sea necesario para evitar la perdida de datos importantes
@item always
Useful with e.g.@: NFS when @code{write()}s are delayed
@item never
Nunca se usa (mejor rendimiento, pero los fallos pueden producir pérdida de
datos)
@end table
Su valor predeterminado es @samp{"optimized"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean mail-nfs-storage?
El almacenamiento del correo se encuentra en NFS. Proporcionar un valor
afirmativo provoca que Dovecot vacíe la caché de NFS cuando sea
necesario. Si únicamente está usando un servidor de correo único esto no es
necesario.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean mail-nfs-index?
Los ficheros de índice de correo también se encuentran en NFS. Para
proporcionar un valor afirmativo es necesario también proporcionar
@samp{mmap-disable? #t} y @samp{fsync-disable? #f}.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string lock-method
Método de bloqueo para los ficheros de índice. Las alternativas son fcntl,
flock y dotlock. Dotlock utiliza técnicas que pueden provocar un consumo de
E/S mayor que otros métodos de bloqueo. Usuarias de NFS: flock no funciona,
recuerde que se debe cambiar @samp{mmap-disable}.
Su valor predeterminado es @samp{"fcntl"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} nombre-fichero mail-temp-dir
Directorio en el que LDA/LMTP almacena de manera temporal correos entrantes
de de más de 128 kB.
Su valor predeterminado es @samp{"/tmp"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo first-valid-uid
Rango de UID aceptado para las usuarias. Principalmente es para asegurarse
de que las usuarias no pueden ingresar en el sistema como un daemon u otras
usuarias del sistema. Tenga en cuenta que el binario de dovecot tiene código
que impide el ingreso al sistema como root y no puede llevarse a cabo
incluso aunque @samp{first-valid-uid} tenga el valor 0.
Su valor predeterminado es @samp{500}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo last-valid-uid

El valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo first-valid-gid
Rango de GID aceptado para las usuarias. Las usuarias que no posean GID
válido como ID primario de grupo no tienen permitido el ingreso al
sistema. Si la usuaria es miembro de grupos suplementarios con GID no
válido, no se activan dichos grupos.
Su valor predeterminado es @samp{1}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo last-valid-gid

El valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo mail-max-keyword-length
Longitud máxima permitida para nombres de palabras clave del correo. El
límite actúa únicamente en la creación de nuevas palabras clave.
Su valor predeterminado es @samp{50}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-archivos-sep-dos-puntos valid-chroot-dirs
List of directories under which chrooting is allowed for mail processes
(i.e.@: @file{/var/mail} will allow chrooting to @file{/var/mail/foo/bar}
too).  This setting doesn't affect @samp{login-chroot} @samp{mail-chroot} or
auth chroot settings.  If this setting is empty, @samp{/./} in home dirs are
ignored.  WARNING: Never add directories here which local users can modify,
that may lead to root exploit.  Usually this should be done only if you
don't allow shell access for users.  <doc/wiki/Chrooting.txt>.  Defaults to
@samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mail-chroot
Default chroot directory for mail processes.  This can be overridden for
specific users in user database by giving @samp{/./} in user's home
directory (e.g.@: @samp{/home/./user} chroots into @file{/home}).  Note that
usually there is no real need to do chrooting, Dovecot doesn't allow users
to access files outside their mail directory anyway.  If your home
directories are prefixed with the chroot directory, append @samp{/.} to
@samp{mail-chroot}.  <doc/wiki/Chrooting.txt>.  Defaults to @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} nombre-fichero auth-socket-path
Ruta al socket de UNIX al servidor maestro de identificación para la
búsqueda de usuarias. Se usa por parte de imap (para usuarias compartidas) y
lda.
Su valor predeterminado es @samp{"/var/run/dovecot/auth-userdb"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} nombre-fichero mail-plugin-dir
Directorio en el que se buscarán módulos de correo.
Su valor predeterminado es @samp{"/usr/lib/dovecot"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadena-separada-espacios mail-plugins
Lista de módulos cargados en todos los servicios. Los módulos específicos
para IMAP, LDA, etc.@: se añaden en esta lista en sus propios ficheros
.conf.
Su valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo mail-cache-min-mail-count
El número mínimo de correos en una bandeja antes de que las actualizaciones
se realicen en un fichero de caché. Permite optimizar el comportamiento de
Dovecot para reducir la tasa de escritura en el disco, lo que produce un
aumento de la tasa de lectura.
Su valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mailbox-idle-check-interval
Cuando se ejecute la orden IDLE, la bandeja de correo se comprueba de vez en
cuando para comprobar si existen nuevos correos o se han producido otros
cambios. Esta configuración define el tiempo mínimo entre dichas
comprobaciones. Dovecot también puede usar dnotify, inotify y kqueue para
recibir información inmediata sobre los cambios que ocurran.
Su valor predeterminado es @samp{"30 secs"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean mail-save-crlf?
Almacena los correos con CR+LF en vez de únicamente LF. Provoca que el envío
de dichos correos use menos el procesados, especialmente al usar la llamada
al sistema sendfile() con Linux y FreeBSD. Pero también aumenta la tasa de
E/S del disco, lo que puede ralentizar el proceso. También tenga en cuenta
que si otro software lee las bandejas mbox/maildir, se pueden tratar de
forma incorrecta los caracteres CR adicionales, lo que puede provocar
problemas.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean maildir-stat-dirs?
De manera predeterminada la orden LIST devuelve todas las entradas en
maildir cuyo nombre empiece en punto. La activación de esta opción hace que
Dovecot únicamente devuelva las entradas que sean directorios. Esto se lleva
a cabo llamando a stat() con cada entrada, lo que causa mayor E/S del
disco. (En sistemas que proporcionen valor a @samp{dirent->d_type} esta
comprobación no tiene coste alguno y se realiza siempre independientemente
del valor configurado aquí).
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean maildir-copy-with-hardlinks?
Cuando se copia un mensaje, se usan enlaces duros cuando sea posible. Esto
mejora mucho el rendimiento, y es difícil que produzca algún efecto
secundario.
Su valor predeterminado es @samp{#t}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean maildir-very-dirty-syncs?
Asume que Dovecot es el único MUA que accede a maildir: Recorre el
directorio cur/ únicamente cuando cambie su mtime de manera inesperada o
cuando no se pueda encontrar el correo de otra manera.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadena-separada-espacios mbox-read-locks
Qué métodos de bloqueo deben usarse para el bloque de mbox. Hay cuatro
disponibles:

@table @code
@item dotlock
Crea un fichero <bandeja>.lock. Esta es la solución más antigua y más segura
con NFS. Si desea usar un directorio como /var/mail/, las usuarias
necesitarán acceso de escritura a dicho directorio.
@item dotlock-try
Lo mismo que dotlock, pero si se produce un fallo debido a los permisos o a
que no existe suficiente espacio en disco, simplemente se omite el bloqueo.
@item fcntl
Use este a ser posible. Funciona también con NFS si se usa lockd.
@item flock
Puede no existir en todos los sistemas. No funciona con NFS.
@item lockf
Puede no existir en todos los sistemas. No funciona con NFS.
@end table

Puede usar múltiples métodos de bloqueo; en ese caso el orden en el que se
declaran es importante para evitar situaciones de bloqueo mutuo en caso de
que otros MTA/MUA usen también múltiples métodos de bloqueo. Algunos
sistemas operativos no permiten el uso de varios de ellos de manera
simultánea.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadena-separada-espacios mbox-write-locks

@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mbox-lock-timeout
Tiempo máximo esperado hasta el bloqueo (de todos los ficheros) antes de
interrumpir la operación.
Su valor predeterminado es @samp{"5 mins"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mbox-dotlock-change-timeout
Si existe el fichero dotlock pero la bandeja no se ha modificado de ninguna
manera, ignora el fichero de bloqueo tras este tiempo.
Su valor predeterminado es @samp{"2 mins"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean mbox-dirty-syncs?
Cuando el fichero mbox cambie de manera inesperada, se tiene que leer
completamente para encontrar los cambios. Si es grande puede tardar bastante
tiempo. Deido a que el cambio habitualmente es un nuevo correo añadido al
final, sería más rápido únicamente leer los correos nuevos. Si se activa
esta opción, Dovecot hace esto pero de todos modos vuelve a leer el fichero
mbox al completo cuando algo en la bandeja no se encuentra como se
esperaba. La única desventaja real de esta configuración es que si otro MUA
cambia las opciones de los mensajes, Dovecot no tiene constancia de ello de
manera inmediata. Tenga en cuenta que una sincronización completa se lleva a
cabo con las órdenes SELECT, EXAMINE, EXPUNGE y CHECK.
Su valor predeterminado es @samp{#t}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean mbox-very-dirty-syncs?
Como @samp{mbox-dirty-syncs}, pero no realiza sincronizaciones completas
tampoco con las órdenes SELECT, EXAMINE, EXPUNGE o CHECK. Si se configura
este valor, @samp{mbox-dirty-syncs} se ignora.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean mbox-lazy-writes?
Retrasa la escritura de las cabeceras de mbox hasta que se realice una
escritura completa sincronizada (con las órdenes EXPUNGE y CHECK, y al
cerrar la bandeja de correo). Es útil especialmente con POP3, donde el
cliente habitualmente borra todos los correos. La desventaja es que nuestros
cambios no son visibles para otros MUA de manera inmediata.
Su valor predeterminado es @samp{#t}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo mbox-min-index-size
Si el tamaño del fichero mbox es menor que este valor (por ejemplo, 100k),
no escribe ficheros de índice. Si el fichero de índice ya existe, todavía se
usa para la lectura, pero no se actualiza.
Su valor predeterminado es @samp{0}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo mdbox-rotate-size
Tamaño máximo del fichero dbox hasta su rotación.
Su valor predeterminado es @samp{10000000}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mdbox-rotate-interval
Antigüedad máxima del fichero dbox hasta que se produce su
rotación. Habitualmente en días. El día comienza a medianoche, por lo que 1d
= hoy, 2d = ayer, etcétera. 0 = comprobación desactivada.
Su valor predeterminado es @samp{"1d"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean mdbox-preallocate-space?
Cuando se crean nuevos ficheros mdbox, reserva inmediatamente un tamaño de
@samp{mbox-rotate-size}. Actualmente esta configuración funciona únicamente
en Linux con determinados sistemas de ficheros (ext4, xfs).
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mail-attachment-dir
sdbox y mdbox permiten el almacenamiento de adjuntos en ficheros externos,
lo que permite también su almacenamiento único. Otros motores no lo permiten
por el momento.

AVISO: Esta característica todavía no se ha probado mucho. Su uso queda bajo
su propia responsabilidad.

Directorio raíz donde almacenar los adjuntos de los correos. Se desactiva en
caso de estar vacío.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo mail-attachment-min-size
Los adjuntos de menor tamaño que este valor no se almacenan
externamente. También es posible la escritura de un módulo que deshabilite
el almacenamiento externo de adjuntos específicos.
Su valor predeterminado es @samp{128000}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mail-attachment-fs
Motor del sistema de ficheros usado para el almacenamiento de adjuntos:
@table @code
@item posix
Dovecot no lleva a cabo el SiS (aunque esto puede ayudar a la deduplicación
del propio sistema de ficheros)
@item sis posix
SiS con comparación inmediata byte-por-byte durante el almacenamiento.
@item sis-queue posix
SiS mediante comparación retrasada y deduplicación.
@end table
El valor predeterminado es @samp{"sis posix"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string mail-attachment-hash
Formato del hash usado en los ficheros adjuntos. Puede añadir cualquier
texto y variables: @code{%@{md4@}}, @code{%@{md5@}}, @code{%@{sha1@}},
@code{%@{sha256@}}, @code{%@{sha512@}}, @code{%@{size@}}.  Las variables
pueden reducirse, por ejemplo @code{%@{sha256:80@}} devuelve únicamente los
primeros 80 bits.
Su valor predeterminado es @samp{"%@{sha1@}"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo default-process-limit

El valor predeterminado es @samp{100}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo default-client-limit

El valor predeterminado es @samp{1000}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo default-vsz-limit
Límite predeterminado del tamaño de memoria virtual (VSZ) para procesos del
servicio. Esta principalmente orientado a la captura y parada de procesos
que pierden memoria antes de que utilicen toda la disponible.
Su valor predeterminado es @samp{256000000}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string default-login-user
Usuaria de ingreso al sistema para los procesos de ingreso al sistema. Es la
usuaria en la que menos se confía en el sistema Dovecot. No debería tener
acceso a nada en absoluto.
Su valor predeterminado es @samp{"dovenull"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string default-internal-user
Usuaria interna usada por procesos sin privilegios. Debería ser distinta a
la usuaria de ingreso, de modo que los procesos de ingreso al sistema no
interfieran con otros procesos.
Su valor predeterminado es @samp{"dovecot"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string ssl?
Si se permite SSL/TLS: @samp{yes} (sí), @samp{no}, @samp{required}
(necesario). <doc/wiki/SSL.txt>.
Su valor predeterminado es @samp{"required"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string ssl-cert
Certificado X.509 de SSL/TLS codificado con PEM (clave pública).
Su valor predeterminado es @samp{"</etc/dovecot/default.pem"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string ssl-key
Clave privada de SSL/TLS codificada con PEM. La clave se abre antes de
renunciar a los privilegios de root, por lo que debe mantenerse legible
únicamente para root.
Su valor predeterminado es @samp{"</etc/dovecot/private/default.pem"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string ssl-key-password
Si el fichero de la clave está protegido por contraseña, introduzca dicha
contraseña aquí. De manera alternativa, puede proporcionarla al iniciar
dovecot con el parámetro -p. Como este fichero es habitualmente legible por
todo el mundo, puede que desee desplazar esta opción a un fichero diferente.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string ssl-ca
Certificado usado como autoridad de certificación de confianza codificado en
PEM. Configure este valor únicamente si tiene intención de usar
@samp{ssl-verify-client-cert? #t}. El fichero debe contener el fichero de la
o las AC seguido de las CRL correspondientes (por ejemplo, @samp{ssl-ca
</etc/ssl/certs/ca.pem}).
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean ssl-require-crl?
Es necesario que la comprobación de CRL sea satisfactoria para certificados
de clientes..
Su valor predeterminado es @samp{#t}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean ssl-verify-client-cert?
Solicita al cliente el envío de un certificado. Si también desea que sea un
requisito, proporcione @samp{auth-ssl-require-client-cert? #t} en la sección
de identificación.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string ssl-cert-username-field
Cual es el campo del certificado que determina el nombre de
usuaria. ``commonName'' y ``x500UniqueIdentifier'' son las opciones
habituales. También tendrá proporcionar @samp{auth-ssl-username-from-cert?
#t}.
Su valor predeterminado es @samp{"commonName"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string ssl-min-protocol
Versión mínima aceptada del protocolo SSL.
Su valor predeterminado es @samp{"TLSv1"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string ssl-cipher-list
Protocolos de cifrado de SSL usados.
Su valor predeterminado es
@samp{"ALL:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW@@STRENGTH"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string ssl-crypto-device
Dispositivo de cifrado de SSL usado, ejecute "openssl engine" para obtener
los valores aceptados.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string postmaster-address
Dirección usada cuando se notifiquen correos rechazados. %d expande al
dominio receptor.
Su valor predeterminado es @samp{"postmaster@@%d"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string hostname
Nombre de máquina usado en diversas partes de los correos enviados (por
ejemplo, en Message-Id) y en las respuestas LMTP. Su valor predeterminado es
<el nombre real de la máquina>@@dominio.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean quota-full-tempfail?
Si la usuaria supera la cuota, devuelve un fallo temporal en vez de rechazar
el correo.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} nombre-fichero sendmail-path
Binario usado para el envío de correos.
Su valor predeterminado es @samp{"/usr/sbin/sendmail"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string submission-host
Si no está vacío, envía el correo a través de esta máquina[:puerto] SMTP en
vez de usar sendmail
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string rejection-subject
Asunto: cabecera usada en el rechazo de correos. Puede usar las mismas
variables que las indicadas en @samp{rejection-reason} a continuación.
Su valor predeterminado es @samp{"Rejected: %s"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string rejection-reason
Mensaje de error legible por personas para el rechazo de correos. Puede usar
variables:

@table @code
@item %n
CRLF
@item %r
razón
@item %s
asunto original
@item %t
receptora
@end table
El valor predeterminado es @samp{"Your message to <%t> was automatically
rejected:%n%r"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string recipient-delimiter
Carácter delimitador entre la parte local y el detalle en las direcciones de
correo. Su valor predeterminado es @samp{"+"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string lda-original-recipient-header
Cabecera de donde se obtiene la dirección receptora original (la dirección
de SMTP RCPT TO:) en caso de no estar disponible en otro lugar. El parámetro
-a de dovecot-lda reemplaza este valor. Una cabecera usada para esto de
manera común es X-Original-To.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean lda-mailbox-autocreate?
¿Se debe crear una bandeja de correo no existente de manera automática al
almacenar un correo?
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} boolean lda-mailbox-autosubscribe?
¿También Se deben crear suscripciones de manera automática a las bandejas de
correo creadas?
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} entero-no-negativo imap-max-line-length
Longitud máxima de la línea de órdenes de IMAP. Algunos clientes generan
líneas de órdenes muy largas con bandejas de correo enormes, por lo que debe
incrementarlo si recibe los errores ``Too long argument'' (parámetro
demasiado largo) o "IMAP command line too large" (línea de órdenes de IMAP
demasiado grande).
Su valor predeterminado es @samp{64000}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string imap-logout-format
Formato de la cadena de IMAP de salida del sistema:
@table @code
@item %i
número total de bytes leídos del cliente
@item %o
número total de bytes enviados al cliente.
@end table
Véase @file{doc/wiki/Variables.txt} para obtener una lista completa de todas
las variables que puede usar.
Su valor predeterminado es @samp{"in=%i out=%o deleted=%@{deleted@}
expunged=%@{expunged@} trashed=%@{trashed@} hdr_count=%@{fetch_hdr_count@}
hdr_bytes=%@{fetch_hdr_bytes@} body_count=%@{fetch_body_count@}
body_bytes=%@{fetch_body_bytes@}"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string imap-capability
Fuerza el valor de la respuesta de IMAP CAPABILITY. Si el valor comienza con
'+', añade las capacidades especificadas sobre las predeterminadas (por
ejemplo, +XFOO XBAR).
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string imap-idle-notify-interval
Durante cuanto tiempo se espera entre notificaciones "OK Still here" cuando
el cliente se encuentre en estado IDLE.
Su valor predeterminado es @samp{"2 mins"}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string imap-id-send
Nombres y valores de campos de identificación (ID) que se enviarán a los
clientes. El uso de * como un valor hace que Dovecot utilice el valor
predeterminado. Los siguientes campos tienen actualmente valores
predeterminados: name, version, os, os-version, support-url, support-email.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string imap-id-log
Campos de identificación (ID) enviados para su registro por
cliente. @code{*} significa todos.
Su valor predeterminado es @samp{""}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} lista-cadena-separada-espacios imap-client-workarounds
Soluciones temporales para varios errores de clientes:

@table @code
@item delay-newmail
Envía notificaciones de nuevo correo EXISTS/RECENT únicamente en respuesta a
ordenes NOOP o CHECK. Algunos clientes las ignoran en otro caso, por ejemplo
OSX Mail (<v2.1). Outlook Express tiene problemas mayores no obstante, sin
esto puede mostrar a la usuaria errores "Message no longer in server". Tenga
en cuenta que OE6 también falla con esta solución temporal si la
sincronización se establece como "Headers Only".

@item tb-extra-mailbox-sep
Thunderbird se confunde de algún modo con LAYOUT=fs (mbox y dbox) y añade
sufijos @samp{/} adicionales a los nombres de las bandejas de correo. Esta
opción hace que Dovecot ignore el carácter @samp{/} adicional en vez de
tratarlo como un nombre de bandeja de correo no válido.

@item tb-lsub-flags
Muestra las opciones \Noselect para respuestas LSUB con LAYOUT=fs (por
ejemplo mbox). Esto permite a Thunderbird ser consciente de que no se pueden
seleccionar y mostrarlas en gris, en vez de únicamente mostrar después el
mensaje de error "no seleccionable".
@end table
El valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{dovecot-configuration}} string imap-urlauth-host
Máquina permitida en las URL URLAUTH enviadas por el cliente. "*" permite
todas. Su valor predeterminado es @samp{""}.
@end deftypevr


¡Miau! Muchas opciones de configuración. Lo bueno es que Guix tiene una
interfaz completa al lenguage de configuración de Dovecot. Esto no permite
únicamente declarar configuraciones de forma bonita, sino que también ofrece
capacidades reflexivas: las usuarias pueden escribir código en Scheme para
inspeccionar y transformar configuraciones.

No obstante, puede ser que únicamente desee usar un fichero
@code{dovecot.conf} existente. En ese caso, puede proporcionar un objeto
@code{opaque-dovecot-configuration} como parámetro @code{#:config} a
@code{dovecot-service}. Como su nombre en inglés indica, una configuración
opaca no tiene gran capacidad reflexiva.

Los campos disponibles de @code{opaque-dovecot-configuration} son:

@deftypevr {parámetro de @code{opaque-dovecot-configuration}} package dovecot
El paquete dovecot.
@end deftypevr

@deftypevr {parámetro de @code{opaque-dovecot-configuration}} string string
El contenido de @code{dovecot.conf}, como una cadena.
@end deftypevr

Por ejemplo, si su @code{dovecot.conf} fuese simplemente la cadena vacía,
podría instanciar un servicio dovecot de esta manera:

@lisp
(dovecot-service #:config
                 (opaque-dovecot-configuration
                  (string "")))
@end lisp

@subsubheading Servicio OpenSMTPD

@deffn {Variable Scheme} opensmtpd-service-type
Es el tipo del servicio @uref{https://www.opensmtpd.org, OpenSMTPD}, cuyo
valor debe ser un objeto @code{opensmtpd-configuration} como en este
ejemplo:

@lisp
(service opensmtpd-service-type
         (opensmtpd-configuration
           (config-file (local-file "./mi-smtpd.conf"))))
@end lisp
@end deffn

@deftp {Tipo de datos} opensmtpd-configuration
Tipo de datos que representa la configuración de opensmtpd.

@table @asis
@item @code{package} (predeterminado: @var{opensmtpd})
El objeto paquete del servidor SMTP OpenSMTPD.

@item @code{config-file} (predeterminado: @code{%default-opensmtpd-file})
Objeto ``tipo-fichero'' del fichero de configuración de OpenSMTPD usado. De
manera predeterminada escucha en la interfaz de red local, y pone a
disposición de usuarias y daemon de la máquina local el servicio de correo,
así como el envío de correo a servidores remotos. Ejecute @command{man
smtpd.conf} para obtener más información.

@end table
@end deftp

@subsubheading Servicio Exim

@cindex agente para el envío de correo (MTA)
@cindex MTA (agente para el envío de correo)
@cindex SMTP

@deffn {Variable Scheme} exim-service-type
Este es el tipo del agente de transferencia de correo (MTA)
@uref{https://exim.org, Exim}, cuyo valor debe ser un objeto
@code{exim-configuration} como en este ejemplo:

@lisp
(service exim-service-type
         (exim-configuration
           (config-file (local-file "./mi-exim.conf"))))
@end lisp
@end deffn

Para usar un servicio @code{exim-service-type} debe tener también un
servicio @code{mail-aliases-service-type} presente en su declaración
@code{operating-system} (incluso aunque no exista ningún alias).

@deftp {Tipo de datos} exim-configuration
Tipo de datos que representa la configuración de exim.

@table @asis
@item @code{package} (predeterminado: @var{exim})
El objeto paquete del servidor Exim.

@item @code{config-file} (predeterminado: @code{#f})
Objeto ``tipo-fichero'' del fichero de configuración de Exim usado. Si su
valor es @code{#f} se usa el fichero de configuración predefinido
proporcionado por el paquete en @code{package}. El fichero de configuración
resultante se carga tras fijar las variables de configuración
@code{exim_user} y @code{exim_group}.

@end table
@end deftp

@subsubheading Servicio Getmail

@cindex IMAP
@cindex POP

@deffn {Variable Scheme} getmail-service-type
El tipo del receptor de correo @uref{http://pyropus.ca/software/getmail/,
Getmail}, cuyo valor debe ser un objeto @code{getmail-configuration}.
@end deffn

Los campos disponibles de @code{getmail-configuration} son:

@deftypevr {parámetro de @code{getmail-configuration}} símbolo name
Un símbolo que identifique el servicio getmail.

El valor predeterminado es @samp{"unset"}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-configuration}} package package
El paquete getmail usado.

@end deftypevr

@deftypevr {parámetro de @code{getmail-configuration}} string user
Usuaria que ejecuta getmail.

El valor predeterminado es @samp{"getmail"}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-configuration}} string group
Grupo que ejecuta getmail.

El valor predeterminado es @samp{"getmail"}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-configuration}} string directory
El directorio usado para getmail.

El valor predeterminado es @samp{"/var/lib/getmail/default"}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-configuration}} getmail-configuration-file rcfile
El fichero de configuración de getmail usado.

Los campos disponibles de @code{getmail-configuration-file} son:

@deftypevr {parámetro de @code{getmail-configuration-file}} getmail-retriever-configuration retriever
De qué cuenta de correo obtener el correo, y cómo acceder a dicha cuenta.

Los campos disponibles de @code{getmail-retriever-configuration} son:

@deftypevr {parámetro de @code{getmail-retriever-configuration}} string type
El controlador que userdb debe usar. Entre los valores aceptados se incluye
@samp{passwd} y @samp{static}.

El valor predeterminado es @samp{"SimpleIMAPSSLRetriever"}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-retriever-configuration}} string server
Usuaria que ejecutará el servidor de correo.

El valor predeterminado es @samp{unset}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-retriever-configuration}} string username
Usuaria que ejecutará el servidor de correo.

El valor predeterminado es @samp{unset}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-retriever-configuration}} entero-no-negativo port
Número de puerto al que conectarse.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{getmail-retriever-configuration}} string password
Sustituye los valores de campos de passwd.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-retriever-configuration}} list password-command
Sustituye los valores de campos de passwd.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-retriever-configuration}} string keyfile
Fichero de claves con formato PEM usado para la negociación TLS.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-retriever-configuration}} string certfile
Fichero de certificado con formato PEM usado para la negociación TLS.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-retriever-configuration}} string ca-certs
Certificados de autoridad de certificación (CA) usados.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-retriever-configuration}} parameter-alist extra-parameters
Parámetros adicionales del receptor de correo.

El valor predeterminado es @samp{()}.

@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{getmail-configuration-file}} getmail-destination-configuration destination
Qué hacer con los mensajes obtenidos.

Los campos disponibles de @code{getmail-destination-configuration} son:

@deftypevr {parámetro de @code{getmail-destination-configuration}} string type
Tipo de destino del correo. Entre los valores válidos se incluye
@samp{Maildir}, @samp{Mboxrd} y @samp{MDA_external}.

El valor predeterminado es @samp{unset}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-destination-configuration}} string-or-filelike path
Opción de ruta para el destino del correo. El comportamiento depende del
tipo seleccionado.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-destination-configuration}} parameter-alist extra-parameters
Parámetros adicionales del destino.

El valor predeterminado es @samp{()}.

@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{getmail-configuration-file}} getmail-options-configuration options
Configuración de getmail.

Los campos disponibles de @code{getmail-options-configuration} son:

@deftypevr {parámetro de @code{getmail-options-configuration}} entero-no-negativo verbose
Si tiene valor @samp{0}, getmail únicamente imprimirá mensajes de aviso y
errores. El valor @samp{1} significa que se imprimirán mensajes acerca de la
recepción y el borrado de mensajes. Si tiene valor @samp{2}, getmail
imprimirá mensajes con cada una de sus acciones.

El valor predeterminado es @samp{1}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-options-configuration}} boolean read-all
Si es verdadero, getmail obtendrá todos los mensajes disponibles. En otro
caso, únicamente recupera mensajes que no se hayan visto previamente.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{getmail-options-configuration}} boolean delete
Si se proporciona un valor verdadero, los mensajes se borrarán del servidor
tras su recuperación y entrega posterior satisfactoria. En otro caso, los
mensajes permanecerán en el servidor.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{getmail-options-configuration}} entero-no-negativo delete-after
Getmail borrará los mensajes tras este número de días después de haberlos
visto, si han sido entregados. Esto significa que los mensajes se mantendrán
en el servidor este número de días tras entregarlos. El valor @samp{0}
desactiva esta característica.

El valor predeterminado es @samp{0}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-options-configuration}} entero-no-negativo delete-bigger-than
Borra los mensajes de tamaño mayor que estos bytes tras recibirlos, incluso
si las opciones ``delete'' y ``delete-after'' están desactivadas. El valor
@samp{0} desactiva esta característica.

El valor predeterminado es @samp{0}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-options-configuration}} entero-no-negativo max-bytes-per-session
Obtiene mensajes hasta este número de bytes en total antes de cerrar la
sesión con el servidor. El valor @samp{0} desactiva esta característica.

El valor predeterminado es @samp{0}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-options-configuration}} entero-no-negativo max-message-size
No obtiene mensajes con mayor tamaño que este número de bytes. El valor
@samp{0} desactiva esta característica.

El valor predeterminado es @samp{0}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-options-configuration}} boolean delivered-to
Si es verdadero, getmail añadirá una cabecera ``Delivered-To'' a los
mensajes.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{getmail-options-configuration}} boolean received
Si es verdadero, getmail añadirá una cabecera ``Received'' a los mensajes.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{getmail-options-configuration}} string message-log
Getmail generará un registro de sus acciones en el fichero nombrado. El
valor @samp{""} desactiva esta característica.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-options-configuration}} boolean message-log-syslog
Si es verdadero, getmail registrará sus acciones a través del registro del
sistema.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{getmail-options-configuration}} boolean message-log-verbose
Si es verdadero, getmail registrará información sobre los mensajes que no se
hayan podido recuperar y la razón para no hacerlo, así como líneas de inicio
y fin informativas.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{getmail-options-configuration}} parameter-alist extra-parameters
Opciones adicionales a incluir.

El valor predeterminado es @samp{()}.

@end deftypevr

@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{getmail-configuration}} lista idle
Una lista de bandejas de correo en las que getmail debe esperar en el
servidor nuevas notificaciones de correo. Esto depende de que el servidor
implemente la extensión IDLE.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{getmail-configuration}} lista environment-variables
Variables de entorno proporcionadas a getmail.

El valor predeterminado es @samp{()}.

@end deftypevr

@subsubheading Servicios de alias de correo

@cindex correo electrónico, alias
@cindex alias, para direcciones de correo electrónico

@deffn {Variable Scheme} mail-aliases-service-type
Este es el tipo del servicio que proporciona @code{/etc/aliases}, donde se
especifica cómo entregar el correo a las usuarias de este sistema.

@lisp
(service mail-aliases-service-type
         '(("postmaster" "rober")
           ("rober" "rober@@example.com" "rober@@example2.com")))
@end lisp
@end deffn

La configuración del servicio @code{mail-aliases-service-type} es una lista
asociada que indica cómo se debe entregar el correo que viene del
sistema. Cada entrada tiene la forma @code{(alias direcciones ...)}, siendo
@code{alias} un alias (nombre) local y @code{direcciones} especifica dónde
se debe entregar el correo de esta usuaria.

No es necesario que los alias existan como usuarias en el sistema local. En
el ejemplo previo, no es necesario que exista una entrada @code{postmaster}
en el campo @code{user-accounts} de @code{operating-system} para que el
correo de @code{postmaster} se entregue a @code{rober} (que a su vez
entregará el correo a @code{rober@@example.com} y
@code{rober@@example2.com}).

@subsubheading daemon de IMAP3 de GNU Mailutils
@cindex daemon de IMAP3 de GNU Mailutils

@deffn {Variable Scheme} imap4d-service-type
Es el tipo del daemon IMAP4 de GNU Mailutils (@pxref{imap4d,,, mailutils,
GNU Mailutils Manual}), cuyo valor debe ser un objeto
@code{imap4d-configuration} como en este ejemplo:

@lisp
(service imap4d-service-type
         (imap4d-configuration
           (config-file (local-file "imap4d.conf"))))
@end lisp
@end deffn

@deftp {Tipo de datos} imap4d-configuration
Tipo de datos que representa la configuración de @command{imap4d}.

@table @asis
@item @code{package} (predeterminado: @code{mailutils})
El paquete que proporciona @command{imap4d}.

@item @code{config-file} (predeterminado: @code{%default-imap4d-config-file})
Objeto ``tipo-fichero'' con el fichero de configuración usado, de manera
predeterminada escucha en el puerto TCP 143 de
@code{localhost}. @xref{Conf-imap4d,,, mailutils, GNU Mailutils Manual},
para más detalles.

@end table
@end deftp

@node Servicios de mensajería
@subsection Servicios de mensajería

@cindex mensajería
@cindex jabber
@cindex XMPP
El módulo @code{(gnu services messaging)} proporciona definiciones de
servicios Guix para servicios de mensajería: actualmente únicamente Prosody
está implementado.

@subsubheading Servicio Prosody

@deffn {Variable Scheme} prosody-service-type
Este es el tipo para el @uref{https://prosody.im, servidor de comunicaciones
XMPP Prosody}. Su valor debe ser un registro @code{prosody-configuration}
como en este ejemplo:

@lisp
(service prosody-service-type
         (prosody-configuration
          (modules-enabled (cons* "groups" "mam" %default-modules-enabled))
          (int-components
           (list
            (int-component-configuration
             (hostname "conference.ejemplo.net")
             (plugin "muc")
             (mod-muc (mod-muc-configuration)))))
          (virtualhosts
           (list
            (virtualhost-configuration
             (domain "ejemplo.net"))))))
@end lisp

Véase a continuación detalles acerca de @code{prosody-configuration}.

@end deffn

De manera predeterminada, Prosody no necesita demasiada
configuración. Únicamente un campo @code{virtualhost} es necesario:
especifica el dominio en el que se desea que Prosody proporcione el
servicio.

Puede realizar varias comprobaciones preliminares sobre la configuración
generada con la orden @code{prosodyctl check}.

Prosodyctl también le ayudará con la importación de certificados del
directorio @code{letsencrypt} de modo que la usuaria @code{prosody} puede
acceder a ellos. Véase @url{https://prosody.im/doc/letsencrypt}.

@example
prosodyctl --root cert import /etc/letsencrypt/live
@end example

A continuación se encuentran los parámetros de configuración disponibles. El
tipo de cada parámetro antecede la definición del mismo; por ejemplo,
@samp{string-list foo} indica que el parámetro @code{foo} debe especificarse
como una lista de cadenas. Los tipos que empiezan con @code{maybe-}
identifican parámetros que no aparecerán en @code{prosody.cfg.lua} cuando su
valor sea @code{'disabled}.

También existe la posibilidad de especificar la configuración como una
cadena, por si tiene un fichero @code{prosody.cfg.lua} antiguo que desea
transportar desde otro sistema; véase más detalles al final.

El tipo @code{file-object} designa o bien un objeto ``tipo-fichero''
(@pxref{Expresiones-G, objetos ``tipo-fichero''}) o un nombre de fichero.

@c The following documentation was initially generated by
@c (generate-documentation) in (gnu services messaging).  Manually maintained
@c documentation is better, so we shouldn't hesitate to edit below as
@c needed.  However if the change you want to make to this documentation
@c can be done in an automated way, it's probably easier to change
@c (generate-documentation) than to make it below and have to deal with
@c the churn as Prosody updates.

Los campos disponibles de @code{prosody-configuration} son:

@deftypevr {parámetro de @code{prosody-configuration}} package prosody
El paquete Prosody.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} nombre-fichero data-path
Ruta del directorio de almacenamiento de datos de Prosody. Véase
@url{https://prosody.im/doc/configure}.
Su valor predeterminado es @samp{"/var/lib/prosody"}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} lista-file-object plugin-paths
Directorios de módulos adicionales. Los módulos se buscan en orden en todas
las rutas especificadas. Véase
@url{https://prosody.im/doc/plugins_directory}.
Su valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} nombre-fichero certificates
Cada máquina virtual y componente necesitan un certificado de manera que los
clientes y servidores puedan verificar su identidad de manera
segura. Prosody cargará de manera automática certificados/claves del
directorio especificado aquí.
Su valor predeterminado es @samp{"/etc/prosody/certs"}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} lista-string admins
Es una lista de cuentas con permisos de administración en el servidor. Tenga
en cuenta que debe crear las cuentas de manera separada. Véase
@url{https://prosody.im/doc/admins} y
@url{https://prosody.im/doc/creating_accounts}.  Ejemplo: @code{(admins
'("usuaria1@@example.com" "usuaria2@@example.net"))}
Su valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} boolean use-libevent?
Activa el uso de libevent para mejorar el rendimiento bajo altas cargas de
trabajo. Véase @url{https://prosody.im/doc/libevent}.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} lista-módulos modules-enabled
La lista de módulos de Prosody cargada durante el arranque. Busca en el
fichero de módulos @code{mod_nombremodulo.lua}, por lo que asegúrese de que
también exista. La documentación de los módulos puede encontrarse en:
@url{https://prosody.im/doc/modules}.
Su valor predeterminado es @samp{("roster" "saslauth" "tls" "dialback"
"disco" "carbons" "private" "blocklist" "vcard" "version" "uptime" "time"
"ping" "pep" "register" "admin_adhoc")}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} lista-string modules-disabled
@samp{"offline"}, @samp{"c2s"} y @samp{"s2s"} se cargan de manera
automática, pero puede desactivarlos si los añade a esta lista.
Su valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} file-object groups-file
Ruta a un fichero de texto donde se definan los grupos compartidos. Si esta
ruta está vacía, @samp{mod_groups} no hace nada. Véase
@url{https://prosody.im/doc/modules/mod_groups}.
Su valor predeterminado es @samp{"/var/lib/prosody/sharedgroups.txt"}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} boolean allow-registration?
Desactiva la creación de cuentas de manera predeterminada, por
seguridad. Véase @url{https://prosody.im/doc/creating_accounts}.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} maybe-ssl-configuration ssl
Estas opciones de configuración están relacionadas con SSL/TLS. La mayor
parte no se proporcionan para usar los valores predeterminados de
Prosody. Si no entiende completamente estas opciones, no las añada a su
configuración, es fácil aumentar la vulnerabilidad de su servidor si las
usa. Véase @url{https://prosody.im/doc/advanced_ssl_config}.

Los campos disponibles de @code{ssl-configuration} son:

@deftypevr {parámetro de @code{ssl-configuration}} maybe-string protocol
Determina el inicio del protocolo usado (handshake).
@end deftypevr

@deftypevr {parámetro de @code{ssl-configuration}} maybe-nombre-fichero key
Ruta a su fichero de clave privada.
@end deftypevr

@deftypevr {parámetro de @code{ssl-configuration}} maybe-nombre-fichero certificate
Ruta al fichero de su certificado.
@end deftypevr

@deftypevr {parámetro de @code{ssl-configuration}} file-object capath
Ruta al directorio que contiene los certificados raíz en los que desea que
Prosody confíe al verificar los certificados de servidores remotos.
Su valor predeterminado es @samp{"/etc/ssl/certs"}.
@end deftypevr

@deftypevr {parámetro de @code{ssl-configuration}} maybe-file-object cafile
Ruta al fichero que contiene los certificados raíz en los que desea que
Prosody confíe. Es similar a @code{capath} pero con todos los certificados
concatenados en el mismo fichero.
@end deftypevr

@deftypevr {parámetro de @code{ssl-configuration}} maybe-lista-string verify
Una lista de opciones de verificación (son de manera prácticamente directa
las opciones de @code{set_verify()} de OpenSSL).
@end deftypevr

@deftypevr {parámetro de @code{ssl-configuration}} maybe-lista-string options
Una lista de opciones generales relacionadas con SSL/TLS. Se relacionan
directamente con las opciones @code{set_options()} de OpenSSL. Para obtener
una lista completa de las opciones disponibles en LuaSec, véase los ficheros
de fuentes de LuaSec.
@end deftypevr

@deftypevr {parámetro de @code{ssl-configuration}} maybe-entero-no-negativo depth
Cómo de larga puede ser la cadena de autoridades de certificación a
comprobar cuando se busque un certificado de confianza.
@end deftypevr

@deftypevr {parámetro de @code{ssl-configuration}} maybe-string ciphers
Una cadena de algoritmos de cifrado de OpenSSL. Selecciona que algoritmos
ofrecerá Prosody a los clientes, y en qué orden.
@end deftypevr

@deftypevr {parámetro de @code{ssl-configuration}} maybe-nombre-fichero dhparam
Una ruta a un fichero que contenga parámetros para el intercambio de claves
Diffie-Hellman. Puede crear un fichero de este tipo con: @code{openssl
dhparam -out /etc/prosody/certs/dh-2048.pem 2048}
@end deftypevr

@deftypevr {parámetro de @code{ssl-configuration}} maybe-string curve
Curva para el protocolo Diffie-Hellman de curva elíptica. El valor
predeterminado de Prosody es @samp{"secp384r1"}.
@end deftypevr

@deftypevr {parámetro de @code{ssl-configuration}} maybe-string-list verifyext
A list of ``extra'' verification options.
@end deftypevr

@deftypevr {parámetro de @code{ssl-configuration}} maybe-string password
Contraseña para claves privadas cifradas.
@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} boolean c2s-require-encryption?
Determina si se fuerza que todas las conexiones cliente-servidor vayan
cifradas o no. Véase @url{https://prosody.im/doc/modules/mod_tls}.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} lista-string disable-sasl-mechanisms
Conjunto de mecanismos que no se ofrecerán nunca. Véase
@url{https://prosody.im/doc/modules/mod_saslauth}.
Su valor predeterminado es @samp{("DIGEST-MD5")}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} boolean s2s-require-encryption?
Determina si se fuerza que todas las conexiones servidor-servidor vayan
cifradas o no. Véase @url{https://prosody.im/doc/modules/mod_tls}.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} boolean s2s-secure-auth?
Determina si el cifrado y la identificación mediante certificado son
necesarias. Esto proporciona una seguridad ideal, pero necesita que los
servidores con los que se comunique permitan cifrado y tengan presentes
certificados válidos en los que se tenga confianza. Véase
@url{https://prosody.im/doc/s2s#security}.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} lista-string s2s-insecure-domains
Muchos servidores no permiten el cifrado o tienen certificados
auto-firmados. Puede proporcionar aquí una lista de dominios que no
necesitarán la identificación mediante certificado. Se identificarán
mediante DNS. Véase @url{https://prosody.im/doc/s2s#security}.
Su valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} lista-string s2s-secure-domains
Aún en el caso de mantener @code{s2s-secure-auth?}, puede exigir
certificados válidos para algunos dominios especificando una lista
aquí. Véase @url{https://prosody.im/doc/s2s#security}.
Su valor predeterminado es @samp{()}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} string authentication
Selecciona el motor de identificación usado. La implementación
predeterminada almacena las contraseñas en texto claro y usa el
almacenamiento de datos configurado en Prosody para los datos de
identificación. Si no confía en su servidor le recomendamos que visite
@url{https://prosody.im/doc/modules/mod_auth_internal_hashed} para obtener
información sobre el motor de almacenamiento tras hash. Véase también
@url{https://prosody.im/doc/authentication}.
Su valor predeterminado es @samp{"internal_plain"}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} maybe-string log
Determina las opciones del registro. La configuración avanzada del registro
no está implementada todavía para el servicio Prosody. Véase
@url{https://prosody.im/doc/logging}.
Su valor predeterminado es @samp{"*syslog"}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} nombre-fichero pidfile
Fichero en el que se escribirá el PID. Véase
@url{https://prosody.im/doc/modules/mod_posix}.
Su valor predeterminado es @samp{"/var/run/prosody/prosody.pid"}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} maybe-entero-no-negativo http-max-content-size
Tamaño máximo permitido del cuerpo (body) HTTP (en bytes)
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} maybe-string http-external-url
Algunos módulos exponen sus propias URL de diversas maneras. Esta URL se
construye en base al protocolo, máquina y puerto usados. Si Prosody se
encuentra tras un proxy, se usara @code{http-external-url} como URL
pública. Véase @url{https://prosody.im/doc/http#external_url}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} lista-virtualhost-configuration virtualhosts
Una máquina (host) en Prosody es un dominio en el que se pueden crear
cuentas de usuaria. Por ejemplo, si desea que sus usuarias tengan
direcciones como @samp{"juan.herrero@@example.com"} necesitará añadir una
máquina @samp{"example.com"}. Todas las opciones en esta lista son efectivas
únicamente en esa máquina.

Note: the name @emph{virtual} host is used in configuration to avoid
confusion with the actual physical host that Prosody is installed on.  A
single Prosody instance can serve many domains, each one defined as a
VirtualHost entry in Prosody's configuration.  Conversely a server that
hosts a single domain would have just one VirtualHost entry.

Véase @url{https://prosody.im/doc/configure#virtual_host_settings}.

Los campos disponibles de @code{virtualhost-configuration} son:

todos estos campos de @code{prosody-configuration}: @code{admins},
@code{use-libevent?}, @code{modules-enabled}, @code{modules-disabled},
@code{groups-file}, @code{allow-registration?}, @code{ssl},
@code{c2s-require-encryption?}, @code{disable-sasl-mechanisms},
@code{s2s-require-encryption?}, @code{s2s-secure-auth?},
@code{s2s-insecure-domains}, @code{s2s-secure-domains},
@code{authentication}, @code{log}, @code{http-max-content-size},
@code{http-external-url}, @code{raw-content}, además de:
@deftypevr {parámetro de @code{virtualhost-configuration}} string domain
Dominio en el que desea que Prosody proporcione servicio.
@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} lista-int-component-configuration int-components
Los componentes son servicios adicionales en un servidor que están
disponibles a los clientes, habitualmente en un subdominio del servidor
principal (como por ejemplo @samp{"micomponente.example.com"}). Algunos
ejemplos de componentes pueden ser los servidores de salas de conversación,
los directorios de usuarias o las pasarelas a otros protocolos.

Los componentes internos se implementan con módulos específicos de
Prosody. Para añadir un componente interno, simplemente rellene el campo del
nombre de máquina, y el módulo que desea usar para el componente.

Véase @url{https://prosody.im/doc/components}.
Su valor predeterminado es @samp{()}.

Los campos disponibles de @code{int-component-configuration} son:

todos estos campos de @code{prosody-configuration}: @code{admins},
@code{use-libevent?}, @code{modules-enabled}, @code{modules-disabled},
@code{groups-file}, @code{allow-registration?}, @code{ssl},
@code{c2s-require-encryption?}, @code{disable-sasl-mechanisms},
@code{s2s-require-encryption?}, @code{s2s-secure-auth?},
@code{s2s-insecure-domains}, @code{s2s-secure-domains},
@code{authentication}, @code{log}, @code{http-max-content-size},
@code{http-external-url}, @code{raw-content}, además de:
@deftypevr {parámetro de @code{int-component-configuration}} string hostname
Nombre de máquina del componente.
@end deftypevr

@deftypevr {parámetro de @code{int-component-configuration}} string plugin
Módulo que desea usar para el componente.
@end deftypevr

@deftypevr {parámetro de @code{int-component-configuration}} maybe-mod-muc-configuration mod-muc
Multi-user chat (MUC) es el módulo de Prosody que permite la creación de
salas de conversación/conferencias para usuarias XMPP. 

General information on setting up and using multi-user chatrooms can be
found in the ``Chatrooms'' documentation
(@url{https://prosody.im/doc/chatrooms}), which you should read if you are
new to XMPP chatrooms.

Véase también @url{https://prosody.im/doc/modules/mod_muc}.

Los campos disponibles de @code{mod-muc-configuration} son:

@deftypevr {parámetro de @code{mod-muc-configuration}} string name
El nombre devuelto en las respuestas de descubrimiento de servicios.
Su valor predeterminado es @samp{"Prosody Chatrooms"}.
@end deftypevr

@deftypevr {parámetro de @code{mod-muc-configuration}} string-o-boolean restrict-room-creation
Si es @samp{#t}, únicamente se permitirá a las administradoras la creación
de nuevas salas de conversación. En otro caso cualquiera puede crear una
sala. El valor @samp{"local"} restringe la creación a usuarias en el dominio
superior del servicio. Por ejemplo @samp{usuaria@@example.com} puede crear
grupos en @samp{rooms.example.com}. El valor @samp{"admin"} restringe el
servicio a las administradoras únicamente.
Su valor predeterminado es @samp{#f}.
@end deftypevr

@deftypevr {parámetro de @code{mod-muc-configuration}} entero-no-negativo max-history-messages
Número máximo de mensajes históricos que se enviarán a quien se acabe de
unir a la sala.
Su valor predeterminado es @samp{20}.
@end deftypevr

@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} lista-ext-component-configuration ext-components
Los componentes externos usan XEP-0114, el cual se implementa en la mayor
parte de componentes independientes. Para añadir un componente externo,
simplemente rellene el campo de nombre de máquina (hostname). Véase
@url{httos://prosody.im/doc/components}.
Su valor predeterminado es @samp{()}.

Los campos disponibles de @code{ext-component-configuration} son:

todos estos campos de @code{prosody-configuration}: @code{admins},
@code{use-libevent?}, @code{modules-enabled}, @code{modules-disabled},
@code{groups-file}, @code{allow-registration?}, @code{ssl},
@code{c2s-require-encryption?}, @code{disable-sasl-mechanisms},
@code{s2s-require-encryption?}, @code{s2s-secure-auth?},
@code{s2s-insecure-domains}, @code{s2s-secure-domains},
@code{authentication}, @code{log}, @code{http-max-content-size},
@code{http-external-url}, @code{raw-content}, además de:
@deftypevr {parámetro de @code{ext-component-configuration}} string component-secret
Contraseña usada por el componente para el ingreso al sistema.
@end deftypevr

@deftypevr {parámetro de @code{ext-component-configuration}} string hostname
Nombre de máquina del componente.
@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} lista-entero-no-negativo component-ports
Puerto o puertos en los que prosody escucha conexiones de componentes.
Su valor predeterminado es @samp{(5347)}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} string component-interface
Interfaz en la que Prosody escucha conexiones de componentes.
Su valor predeterminado es @samp{"127.0.0.1"}.
@end deftypevr

@deftypevr {parámetro de @code{prosody-configuration}} maybe-raw-content raw-content
Contenido que se añadirá directamente al fichero de configuración.
@end deftypevr

Puede ser que únicamente desee usar un fichero @code{prosody.cfg.lua} ya
creado. En ese caso, puede proporcionar un registro
@code{opaque-prosody-configuration} como el valor de
@code{prosody-service-type}. Como su nombre en inglés indica, una
configuración opaca no tiene gran capacidad reflexiva. Los campos
disponibles de @code{opaque-prosody-configuration} son:

@deftypevr {parámetro de @code{opaque-prosody-configuration}} package prosody
El paquete prosody.
@end deftypevr

@deftypevr {parámetro de @code{opaque-prosody-configuration}} string prosody.cfg.lua
El contenido usado para @code{prosody.cfg.lua}.
@end deftypevr

Por ejemplo, si su @code{prosody.cfg.lua} es simplemente la cadena vacía,
podría instanciar el servicio de Prosody de esta manera:

@lisp
(service prosody-service-type
         (opaque-prosody-configuration
          (prosody.cfg.lua "")))
@end lisp

@c end of Prosody auto-generated documentation

@subsubheading Servicio BitlBee

@cindex IRC (Internet Relay Chat)
@cindex pasarela IRC
@url{https://bitlbee.org,BitlBee} es una pasarela que proporciona una
interfaz IRC a una variedad de protocolos como XMPP.

@defvr {Variable Scheme} bitlbee-service-type
Este es el tipo de servicio para el daemon de pasarela IRC
@url{https://bitlbee.org,BitlBee}.  Su valor es un
@code{bitlbee-configuration} (véase a continuación).

Para que BitlBee escuche en el puerto 6667 de localhost, añada esta línea a
sus servicios:

@lisp
(service bitlbee-service-type)
@end lisp
@end defvr

@deftp {Tipo de datos} bitlbee-configuration
Esta es la configuración para BitlBee, con los siguientes campos:

@table @asis
@item @code{interface} (predeterminada: @code{"127.0.0.1"})
@itemx @code{port} (predeterminado: @code{6667})
Escucha en la interfaz de red correspondiente a la dirección IP especificada
en @var{interface}, en el puerto @var{port}.

Cuando @var{interface} es @code{127.0.0.1}, únicamente se permite la
conexión de clientes locales; cuando es @code{0.0.0.0}, las conexiones
pueden venir de cualquier interfaz de red.

@item @code{bitlbee} (predeterminado: @code{bitlbee})
El paquete BitlBee usado.

@item @code{plugins} (predeterminados: @code{'()})
Lista de paquetes de módulos usados---por ejemplo, @code{bitlbee-discord}.

@item @code{extra-settings} (predeterminado: @code{""})
Fragmento de configuración añadido tal cual al fichero de configuración de
BitlBee.
@end table
@end deftp

@subsubheading Servicio Quassel

@cindex IRC (Internet Relay Chat)
@url{https://quassel-irc.org/,Quassel} es un cliente IRC distribuido, lo que
significa que uno o más clientes se pueden conectar y desconectar del núcleo
central.

@defvr {Variable Scheme} quassel-service-type
Es el tipo de servicio del daemon del motor IRC de
@url{https://quassel-irc.org/,Quassel}.  Su valor es un
@code{quassel-configuration} (véase a continuación).
@end defvr

@deftp {Tipo de datos} quassel-configuration
Es la configuración para Quassel, con los siguientes campos:

@table @asis
@item @code{quassel} (predeterminado: @code{quassel})
El paquete Quassel usado.

@item @code{interface} (predeterminada: @code{"::,0.0.0.0"})
@item @code{port} (predeterminado: @code{4242})
Escucha en la o las interfaces de red que correspondan con las direcciones
IPv4 o IPv6 delimitadas por comas especificadas en @var{interface}, en el
puerto @var{port}.

@item @code{loglevel} (predeterminado: @code{"Info"})
El nivel de registro deseado. Los valores aceptados son Debug, Info, Warning
y Error.
@end table
@end deftp

@node Servicios de telefonía
@subsection Servicios de telefonía

@cindex Murmur (servidor VoIP)
@cindex servidor VoIP
Esta sección describe como configurar y poner en marcha un servidor
Murmur. Murmur es el servidor del paquete de voz-IP (VoIP)
@uref{https://mumble.info, Muble}

@deftp {Tipo de datos} murmur-configuration
El tipo de servicio del servidor Murmur. Una ejemplo de configuración podría
ser el siguiente:

@lisp
(service murmur-service-type
         (murmur-configuration
          (welcome-text
            "¡Bienvenida a este servidor Murmur que se ejecuta en Guix!")
          (cert-required? #t) ;no permite ingresos con una contraseña en texto
          (ssl-cert "/etc/letsencrypt/live/mumble.example.com/fullchain.pem")
          (ssl-key "/etc/letsencrypt/live/mumble.example.com/privkey.pem")))
@end lisp

Tras reconfigurar su sistema, puede establecer manualmente la contraseña de
@code{SuperUser} de Murmur con la orden que se imprime durante el proceso de
activación.

Se recomienda el registro de una cuenta de usuaria normal de Mumble y la
concesión de permisos de administración o moderación. Puede usar el cliente
@code{mumble} para ingresar como una nueva usuaria normal, registrarse usted
misma, y salir del sistema. En el siguiente paso ingrese en el sistema con
el nombre @code{SuperUser}, use la contraseña de @code{SuperUser} que fue
establecida con anterioridad, y conceda los permisos de administración o
moderación a su usuaria de nombre creada anteriormente y cree algunos
canales.

Los campos disponibles de @code{murmur-configuration} son:

@table @asis
@item @code{package} (predeterminado: @code{mumble})
Paquete que contiene @code{bin/murmurd}.

@item @code{user} (predeterminado: @code{"murmur"})
Usuaria que ejecutará el servidor Murmur.

@item @code{group} (predeterminado: @code{"murmur"})
Grupo de la usuaria que ejecutará el servidor murmur.

@item @code{port} (predeterminado: @code{64738})
Puerto en el que escucha el servidor.

@item @code{welcome-text} (predeterminado: @code{""})
Mensaje de bienvenida enviado a clientes tras su conexión.

@item @code{server-password} (predeterminada: @code{""})
Contraseña que debe introducirse para poder conectarse.

@item @code{max-users} (predeterminados: @code{100})
Número máximo de usuarias que pueden estar conectadas a la vez al servidor.

@item @code{max-user-bandwidth} (predeterminado: @code{#f})
Tráfico de voz máximo que una usuaria puede mandar por segundo.

@item @code{database-file} (predeterminado: @code{"/var/lib/murmur/db.sqlite"})
Nombre de fichero de la base de datos sqlite. La usuaria del servicio se
convertirá en propietaria del directorio.

@item @code{log-file} (predeterminado: @code{"/var/log/murmur/murmur.log"})
Nombre de fichero del fichero de registro. La usuaria del servicio se
convertirá en propietaria del directorio.

@item @code{autoban-attempts} (predeterminados: @code{10})
Número máximo de ingresos al sistema que una usuaria puede llevar a cabo en
@code{autoban-timeframe} sin bloquearse su acceso durante
@code{autoban-time}.

@item @code{autoban-timeframe} (predeterminado: @code{120})
Marco de tiempo del bloqueo automático en segundos.

@item @code{autoban-time} (predeterminado: @code{300})
Duración en segundos del periodo que permanecerá bloqueado un cliente cuando
viole los límites de bloqueo automático.

@item @code{opus-threshold} (predeterminado: @code{100})
Porcentaje de clientes que tienen que permitir opus antes de cambiar al
algoritmo de sonido opus.

@item @code{channel-nesting-limit} (predeterminado: @code{10})
Cual puede ser el nivel de recursión de los canales.

@item @code{channelname-regex} (predeterminado: @code{#f})
Una cadena en forma de expresión regular Qt que deben cumplir los nombres de
canal.

@item @code{username-regex} (predeterminado: @code{#f})
Una cadena en forma de expresión regular Qt que deben cumplir los nombres de
usuaria.

@item @code{text-message-length} (predeterminado: @code{5000})
Número máximo de bytes que una usuaria puede enviar en un mensaje de texto.

@item @code{image-message-length} (predeterminado: @code{(* 128 1024)})
Número máximo de bytes que una usuaria puede enviar en un mensaje de imagen.

@item @code{cert-required?} (predeterminado: @code{#f})
Si su valor es @code{#t} no se aceptarán los clientes que usen
identificación débil por contraseña. Las usuarias deben haber completado la
herramienta de creación de certificado para unirse.

@item @code{remember-channel?} (predeterminado: @code{#f})
Si murmur debe recordar el último canal en el que estaba cada usuaria cuando
se desconectó y debe colocarla en el canal recordado cuando vuelva a unirse.

@item @code{allow-html?} (predeterminado: @code{#f})
Si se permite html en mensajes de texto, comentarios de usuaria y
descripciones de canal.

@item @code{allow-ping?} (predeterminado: @code{#f})
Proporcionar un valor verdadero expone el número de usuarias actual, el
número máximo de usuarias y el ancho de banda máximo del servidor por
cliente a usuarias sin identificación. En el cliente Muble, esta información
se muestra en el diálogo Connect/Conexión.

Desactivar esta opción impedirá la escucha pública en el servidor.

@item @code{bonjour?} (predeterminado: @code{#f})
Si el servidor debe anunciarse a sí mismo en la red local a través del
protocolo ``bonjour''.

@item @code{send-version?} (predeterminado: @code{#f})
Si se debe exponer la versión del servidor murmur en las peticiones ping.

@item @code{log-days} (predeterminado: @code{31})
Murmur también almacena registros en la base de datos, los cuales son
accesibles mediante RPC. El valor predeterminado es 31 días del mes, pero
puede establecer esta configuración a 0 para mantener los registros para
siempre, o -1 para desactivar el registro en la base de datos.

@item @code{obfuscate-ips?} (predeterminado: @code{#t})
Si las IP registradas deben ofuscarse para proteger la privacidad de las
usuarias.

@item @code{ssl-cert} (predeterminado: @code{#f})
Nombre del fichero del certificado SSL/TLS usado para conexiones cifradas.

@lisp
(ssl-cert "/etc/letsencrypt/live/example.com/fullchain.pem")
@end lisp
@item @code{ssl-key} (predeterminada: @code{#f})
Ruta de fichero de la clave privada de ssl usada para las conexiones
cifradas.
@lisp
(ssl-key "/etc/letsencrypt/live/example.com/privkey.pem")
@end lisp

@item @code{ssl-dh-params} (predeterminado: @code{#f})
Nombre del fichero codificado con PEM con parámetros Diffie-Hellman para el
cifrado SSL/TLS. De manera alternativa puede establecer su valor a
@code{"@@ffdhe2048"}, @code{"@@ffdhe3072"}, @code{"@@ffdhe4096"},
@code{"@@ffdhe6144"} o @code{"@@ffdhe8192"} para usar los parámetros
contenidos en el RFC 7919.

@item @code{ssl-ciphers} (predeterminado: @code{#f})
La opción @code{ssl-ciphers} selecciona los protocolos de cifrado
disponibles para su uso en SSL/TLS.

Esta opción se especifica mediante el uso de la
@uref{https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT,
notación de listas de prot. de cifrado de OpenSSL}.

Se recomienda que pruebe su cadena de protocolos con 'openssl ciphers
<cadena>' antes de configurarla aquí, para que compruebe que protocolos
obtendrá. Tras establecer el valor de esta opción se recomienda que
inspeccione el registro de Murmur para asegurarse de que Murmur usa los
protocolos que esperaba que usase.

Fíjese: El cambio de esta opción puede impactar en la compatibilidad con
versiones anteriores de su servidor Murmur, y puede eliminar la posibilidad
de conexión desde clientes Mumble antiguos.

@item @code{public-registration} (predeterminado: @code{#f})
Debe ser un registro @code{<murmur-public-registration-configuration>} o
@code{#f}.

Puede registrar de manera opcional su servidor en la lista pública de
servidores que el cliente @code{mumble} muestra al inicio. No puede
registrar su servidor si tiene establecida una contraseña para el servidor
(@code{server-password}), o establece @code{allow-ping} como @code{#f}.

Puede tomar algunas horas hasta que se muestre en la lista pública.

@item @code{file} (predeterminado: @code{#f})
Forma opcional alternativa de forzar el valor de esta configuración.
@end table
@end deftp

@deftp {Tipo de datos} murmur-public-registration-configuration
Configuración para registro público de un servicio de murmur.

@table @asis
@item @code{name}
Este es el nombre mostrado de su servidor. No debe confundirse con el nombre
de máquina.

@item @code{password}
Una contraseña para identificar su registro. Las actualizaciones siguientes
necesitarán la misma contraseña. No pierda su contraseña.

@item @code{url}
Debe ser un enlace @code{http://} o @code{https://} a su página web.

@item @code{hostname} (predeterminado: @code{#f})
De manera predeterminada su servidor se enumerará por sus direcciones IP. Si
se usa esta opción, en vez de eso se enlazará a través de este nombre de
máquina.
@end table
@end deftp



@node Servicios de monitorización
@subsection Servicios de monitorización

@subsubheading Servicio Tailon

@uref{https://tailon.readthedocs.io/, Tailon} es una aplicación web para la
visualización y búsqueda en ficheros de registro.

El ejemplo siguiente configura el servicio con los valores
predeterminados. Por omisión, se puede acceder a Tailon en el puerto 8080
(@code{http://localhost:8080}).

@lisp
(service tailon-service-type)
@end lisp

El ejemplo siguiente personaliza más la configuración de Tailon, añadiendo
@command{sed} a la lista de órdenes permitidas.

@lisp
(service tailon-service-type
         (tailon-configuration
           (config-file
             (tailon-configuration-file
               (allowed-commands '("tail" "grep" "awk" "sed"))))))
@end lisp


@deftp {Tipo de datos} tailon-configuration
Tipo de datos que representa la configuración de Tailon. Este tipo tiene los
siguientes parámetros:

@table @asis
@item @code{config-file} (predeterminado: @code{(tailon-configuration-file)})
El fichero de configuración usado por Tailon. Su valor puede ser un registro
@code{tailon-configuration-file} o cualquier expresión-G
(@pxref{Expresiones-G}).

Por ejemplo, para usar un fichero local, se puede usar la función
@code{local-file}:

@lisp
(service tailon-service-type
         (tailon-configuration
           (config-file (local-file "./mi-tailon.conf"))))
@end lisp

@item @code{package} (predeterminado: @code{tailon})
El paquete tailon usado.

@end table
@end deftp

@deftp {Tipo de datos} tailon-configuration-file
Tipo de datos que representa las opciones de configuración de Tailon. Este
tipo tiene los siguientes parámetros:

@table @asis
@item @code{files} (predeterminados: @code{(list "/var/log")})
Lista de ficheros a mostrar. La lista puede incluir cadenas para un único
fichero o directorio, o una lista, donde el primer elemento es el nombre de
la subsección, y los elementos restantes son los ficheros o directorios de
dicha subsección.

@item @code{bind} (predeterminado: @code{"localhost:8080"})
Dirección y puerto al que Tailon debe asociarse.

@item @code{relative-root} (predeterminado: @code{#f})
Ruta URL usada por Tailon, use @code{#f} para no usar una ruta.

@item @code{allow-transfers?} (predeterminado: @code{#t})
Permite la descarga de ficheros de registro en la interfaz web.

@item @code{follow-names?} (predeterminado: @code{#t})
Permite la lectura de ficheros todavía no existentes.

@item @code{tail-lines} (predeterminado: @code{200})
Número de líneas a leer inicialmente de cada fichero.

@item @code{allowed-commands} (predeterminadas: @code{(list "tail" "grep" "awk")})
Órdenes cuya ejecución está permitida. Por defecto, @code{sed} está
desactivado.

@item @code{debug?} (predeterminado: @code{#f})
Proporcione el valor @code{#t} en @code{debug?} para mostrar mensajes de
depuración.

@item @code{wrap-lines} (predeterminado: @code{#t})
Estado inicial del recorte de líneas en la interfaz web. El valor @code{#t}
hace que las líneas se recorten inicialmente (comportamiento
predeterminado), y el valor @code{#f} hace que no se recorten de manera
inicial.

@item @code{http-auth} (predeterminado: @code{#f})
Identificación de HTTP usada. Use @code{#f} para no permitir la
identificación (el valor predeterminado). Los valores permitidos son
@code{"digest"} o @code{"basic"}.

@item @code{users} (predeterminado: @code{#f})
Si la identificación de HTTP está activa (véase @code{http-auth}), el acceso
se restringirá a las credenciales proporcionadas aquí. Para configurar
usuarias, use una lista de pares, donde el primer elemento del par es el
nombre de la usuaria, y el segundo elemento del par es la contraseña.

@lisp
(tailon-configuration-file
  (http-auth "basic")
  (users     '(("usuaria1" . "contraseña1")
               ("usuaria2" . "contraseña2"))))
@end lisp

@end table
@end deftp


@subsubheading Servicio Darkstat
@cindex darkstat
Darkstat es un programa de interceptación de paquetes que captura el tráfico
de la red, calcula estadísticas sobre su uso y proporciona informes a través
de HTTP.

@defvar {Variable Scheme} darkstat-service-type
Este es el tipo de servicio del servicio
@uref{https://unix4lyfe.org/darkstat/, darkstat}, su valor debe ser un
registro @code{darkstat-configuration} como en este ejemplo:

@lisp
(service darkstat-service-type
         (darkstat-configuration
           (interface "eno1")))
@end lisp
@end defvar

@deftp {Tipo de datos} darkstat-configuration
Tipo de datos que representa la configuración de @command{darkstat}.

@table @asis
@item @code{package} (predeterminado: @code{darkstat})
El paquete darkstat usado.

@item @code{interface}
Captura el tráfico en la interfaz de red especificada.

@item @code{port} (predeterminado: @code{"667"})
Asocia la interfaz web al puerto especificado.

@item @code{bind-address} (predeterminada: @code{"127.0.0.1"})
Asocia la interfaz web a la dirección especificada.

@item @code{base} (predeterminada: @code{"/"})
Especifica la ruta de la URL base. Puede ser util si @command{darkstat} se
accede a través de un proxy inverso.

@end table
@end deftp

@subsubheading Servicio del exportador de nodos Prometheus

@cindex prometheus-node-exporter
El ``exportador de nodos'' Prometheus pone a disposición del sistema de
monitorización Prometheus las estadísticas de hardware y el sistema
operativo proporcionadas por el núcleo Linux. Este servicio debe desplegarse
en todos los nodos físicos y máquinas virtuales, donde la monitorización de
estas estadísticas sea deseable.

@defvar {Variable Scheme} prometheus-node-exporter-service-type
Este es el tipo de servicio del servicio
@uref{https://github.com/prometheus/node_exporter/,
prometheus-node-exporter}, su valor debe ser un registro
@code{prometheus-node-exporter-configuration} como en este ejemplo:

@lisp
(service prometheus-node-exporter-service-type
         (prometheus-node-exporter-configuration
           (web-listen-address ":9100")))
@end lisp
@end defvar

@deftp {Tipo de datos} prometheus-node-exporter-configuration
Tipo de datos que representa la configuración de @command{node_exporter}.

@table @asis
@item @code{package} (predeterminado: @code{go-github-com-prometheus-node-exporter})
El paquete prometheus-node-exporter usado.

@item @code{web-listen-address} (predeterminada: @code{":9100"})
Asocia la interfaz web a la dirección especificada.

@end table
@end deftp

@subsubheading Servidor Zabbix
@cindex zabbix zabbix-server
Zabbix proporciona métricas de monitorización, entre otras el uso de red, la
carga de la CPU y el consumo de espacio en disco:

@itemize
@item Alto rendimiento, alta capacidad (capaz de monitorizar cientos de miles de dispositivos).
@item Detección automática de servidores, dispositivos de red e interfaces.
@item Descubrimiento a bajo nivel, que permite el inicio automático de la monitorización de nuevos elementos, sistemas de ficheros o interfaces de red entre otros.
@item Monitorización distribuida con administración web centralizada.
@item Agentes nativos de alto rendimiento.
@item Métricas SLA y KPI ITIL en los informes.
@item Visión de alto nivel (negocio) de los recursos monitorizados a través de pantallas de consola visual y paneles definidas por la usuaria.
@item Ejecución remota de ordenes a través de un proxy Zabbix.
@end itemize

@c %start of fragment

Los campos disponibles de @code{zabbix-server-configuration} son:

@deftypevr {parámetro de @code{zabbix-server-configuration}} package zabbix-server
El paquete zabbix-server.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} string user
Usuaria que ejecutará el servidor Zabbix.

El valor predeterminado es @samp{"zabbix"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} grupo group
Grupo que ejecutará el servidor Zabbix.

El valor predeterminado es @samp{"zabbix"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} string db-host
El nombre de máquina de la base de datos.

El valor predeterminado es @samp{"127.0.0.1"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} string db-name
Nombre de la base de datos.

El valor predeterminado es @samp{"zabbix"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} string db-user
Usuaria de la base de datos.

El valor predeterminado es @samp{"zabbix"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} string db-password
Contraseña de la base de datos. Por favor, en vez de esto use
@code{include-files} con @code{DBPassword=SECRET} dentro de un fichero
especificado.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} number db-port
Puerto de la base de datos.

El valor predeterminado es @samp{5432}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} string log-type
Especifica donde se escriben los mensajes de registro:

@itemize @bullet
@item
@code{system} - syslog.

@item
@code{file} - fichero especificado con el parámetro @code{log-file}.

@item
@code{console} - salida estándar.

@end itemize

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} string log-file
Nombre del fichero de registro para el parámetro @code{file} de
@code{log-type}.

El valor predeterminado es @samp{"/var/log/zabbix/server.log"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} string pid-file
Nombre del fichero de PID.

El valor predeterminado es @samp{"/var/run/zabbix/zabbix_server.pid"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} string ssl-ca-location
La localización de los ficheros de autoridades de certificación (CA) para la
verificación de certificados SSL de los servidores.

El valor predeterminado es @samp{"/etc/ssl/certs/ca-certificates.crt"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} string ssl-cert-location
Localización de los certificados SSL de los clientes.

El valor predeterminado es @samp{"/etc/ssl/certs"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} string extra-options
Opciones adicionales que se añadirán al final del fichero de configuración
de Zabbix.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-server-configuration}} ficheros-incluidos include-files
Puede incluir ficheros individuales o todos los ficheros en un directorio en
el fichero de configuración.

El valor predeterminado es @samp{()}.

@end deftypevr

@c %end of fragment

@subsubheading Agente Zabbix
@cindex zabbix zabbix-agent

El agente Zabbix (zabbix-agent) obtiene información del servidor Zabbix.

@c %start of fragment

Los campos disponibles de @code{zabbix-agent-configuration} son:

@deftypevr {parámetro de @code{zabbix-agent-configuration}} package zabbix-agent
El paquete zabbix-agent.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-agent-configuration}} string user
Usuaria que ejecutará el agente Zabbix.

El valor predeterminado es @samp{"zabbix"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-agent-configuration}} grupo group
Grupo que ejecutará el agente Zabbix.

El valor predeterminado es @samp{"zabbix"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-agent-configuration}} string hostname
Nombre de máquina único y sensible a mayúsculas que es necesario para la
comprobaciones activas y debe corresponder con el nombre de máquina
configurado en el servidor.

El valor predeterminado es @samp{"Zabbix server"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-agent-configuration}} string log-type
Especifica donde se escriben los mensajes de registro:

@itemize @bullet
@item
@code{system} - syslog.

@item
@code{file} - fichero especificado con el parámetro @code{log-file}.

@item
@code{console} - salida estándar.

@end itemize

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-agent-configuration}} string log-file
Nombre del fichero de registro para el parámetro @code{file} de
@code{log-type}.

El valor predeterminado es @samp{"/var/log/zabbix/agent.log"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-agent-configuration}} string pid-file
Nombre del fichero de PID.

El valor predeterminado es @samp{"/var/run/zabbix/zabbix_agent.pid"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-agent-configuration}} lista server
Lista de direcciones IP, opcionalmente en notación CIDR, o nombres de
máquina de servidores y proxy Zabbix. Se aceptarán conexiones entrantes
únicamente desde las máquinas proporcionadas aquí.

El valor predeterminado es @samp{"127.0.0.1"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-agent-configuration}} lista server-active
Lista de pares IP:puerto (o máquina:puerto) de servidores Zabbix y
servidores Zabbix para las comprobaciones activas. Si no se especifica un
puerto, se usa el puerto predeterminado. Si no se especifica este parámetro,
las comprobaciones activas se desactivan.

El valor predeterminado es @samp{"127.0.0.1"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-agent-configuration}} string extra-options
Opciones adicionales que se añadirán al final del fichero de configuración
de Zabbix.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-agent-configuration}} ficheros-incluidos include-files
Puede incluir ficheros individuales o todos los ficheros en un directorio en
el fichero de configuración.

El valor predeterminado es @samp{()}.

@end deftypevr

@c %end of fragment

@subsubheading Motor de visualización de Zabbix
@cindex zabbix zabbix-front-end

Este servicio proporciona una interfaz Web al servidor Zabbix.

@c %start of fragment

Los campos disponibles de @code{zabbix-front-end-configuration} son:

@deftypevr {parámetro de @code{zabbix-front-end-configuration}} lista-nginx-server-configuration nginx
Configuración de NGINX.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-front-end-configuration}} string db-host
El nombre de máquina de la base de datos.

El valor predeterminado es @samp{"localhost"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-front-end-configuration}} number db-port
Puerto de la base de datos.

El valor predeterminado es @samp{5432}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-front-end-configuration}} string db-name
Nombre de la base de datos.

El valor predeterminado es @samp{"zabbix"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-front-end-configuration}} string db-user
Usuaria de la base de datos.

El valor predeterminado es @samp{"zabbix"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-front-end-configuration}} string db-password
Contraseña de la base de datos. Por favor, en vez de esto use
@code{db-secret-file}.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-front-end-configuration}} string db-secret-file
Fichero secreto que se añadirá al final del fichero
@file{zabbix.conf.php}. Este fichero contiene las credenciales usadas por el
motor de visualización de Zabbix. Se espera que usted lo cree manualmente.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-front-end-configuration}} string zabbix-host
Nombre de máquina del servidor Zabbix.

El valor predeterminado es @samp{"localhost"}.

@end deftypevr

@deftypevr {parámetro de @code{zabbix-front-end-configuration}} number zabbix-port
Puerto del servidor Zabbix.

El valor predeterminado es @samp{10051}.

@end deftypevr


@c %end of fragment

@node Servicios Kerberos
@subsection Servicios Kerberos
@cindex Kerberos

El módulo @code{(gnu services kerberos)} proporciona servicios relacionados
con el protocolo de identificación @dfn{Kerberos}.

@subsubheading Servicio Krb5

Los programas que usan una biblioteca cliente de Kerberos habitualmente
esperan un fichero de configuración en la ruta @file{/etc/krb5.conf}. Este
servicio genera dicho fichero desde una definición proporcionada en la
declaración de sistema operativo. Esto no causa el inicio de ningún daemon.

Este servicio no crea ningún fichero ``keytab''---debe crearlos
explícitamente usted. Se ha comprobado que este servicio funciona con la
biblioteca de cliente @code{mit-krb5} del MIT. No se han probado otras
implementaciones.

@defvr {Variable Scheme} krb5-service-type
Un tipo de servicio para clientes Kerberos 5.
@end defvr

@noindent
Este es un ejemplo de su uso:
@lisp
(service krb5-service-type
         (krb5-configuration
          (default-realm "EXAMPLE.COM")
          (allow-weak-crypto? #t)
          (realms (list
                   (krb5-realm
                    (name "EXAMPLE.COM")
                    (admin-server "groucho.example.com")
                    (kdc "karl.example.com"))
                   (krb5-realm
                    (name "ARGRX.EDU")
                    (admin-server "kerb-admin.argrx.edu")
                    (kdc "keys.argrx.edu"))))))
@end lisp

@noindent
Este ejemplo proporciona una configuración de cliente Kerberos@tie{}5 que:
@itemize
@item Reconoce dos dominios, @i{sean:} ``EXAMPLE.COM'' y ``ARGRX.EDU'', los cuales
tienen distintos servidores administrativos y centros de distribución de
claves;
@item El valor predeterminado será ``EXAMPLE.COM'' si no se especifica el dominio
explícitamente por parte del cliente.
@item Acepta servicios cuyos únicos tipos de cifrado implementados se sabe que son débiles.
@end itemize

Los tipos @code{krb5-realm} y @code{krb5-configuration} contienen muchos
campos.  Aquí se describen únicamente los más habitualmente usados.  Para
obtener una lista complete y una explicación detallada de cada campo, véase
la documentación de
@uref{https://web.mit.edu/kerberos/krb5-devel/doc/admin/conf_files/krb5_conf.html,,krb5.conf}.


@deftp {Tipo de datos} krb5-realm
@cindex dominio (realm), kerberos
@table @asis
@item @code{name}
Este campo es una cadena que identifica el nombre del dominio. Una
convención habitual es el uso del nombre completo de DNS de su organización,
convertido a mayúsculas.

@item @code{admin-server}
Este campo es una cadena que identifica la máquina donde se ejecuta el
servidor administrativo.

@item @code{kdc}
Este campo es una cadena que identifica el centro de distribución de claves
para el dominio.
@end table
@end deftp

@deftp {Tipo de datos} krb5-configuration

@table @asis
@item @code{allow-weak-crypto?} (predeterminado: @code{#f})
Si esta opción es @code{#t} se aceptarán los servicios que únicamente
ofrezcan algoritmos de cifrado que se conozca que son débiles.

@item @code{default-realm} (predeterminado: @code{#f})
Este campo debe ser una cadena que identifique el dominio predeterminado de
Kerberos para los clientes. Debería proporcionar el nombre de su dominio
Kerberos. Si este valor es @code{#f}, el dominio debe especificarse en cada
principal de Kerberos cuando se invoquen programas como @command{kinit}.

@item @code{realms}
Debe ser una lista no vacía de objetos @code{krb5-realm}, accesibles por los
clientes. Normalmente, uno de ellos tendrá un campo @code{name} que
corresponda con el campo @code{default-realm}.
@end table
@end deftp


@subsubheading Servicio krb5 de PAM
@cindex pam-krb5

El servicio @code{pam-krb5} le permite la identificación para el ingreso al
sistema y la gestión de contraseñas mediante Kerberos. Este servicio es
necesario si desea que aplicaciones que permiten PAM lleven a cabo la
identificación de usuarias mediante el uso de Kerberos.

@defvr {Variable Scheme} pam-krb5-service-type
Un tipo de servicio para el módulo PAM de Kerberos 5.
@end defvr

@deftp {Tipo de datos} pam-krb5-configuration
Tipo de datos que representa la configuración del módulo PAM de Kerberos
5. Este tipo tiene los siguientes parámetros:
@table @asis
@item @code{pam-krb5} (predeterminado: @code{pam-krb5})
El paquete pam-krb5 usado.

@item @code{minimum-uid} (predeterminado: @code{1000})
El ID de usuaria mínimo con el que se permitirán los intentos de
identificación con Kerberos. El proceso de identificación de las cuentas
locales con valores menores fallará de manera silenciosa.
@end table
@end deftp


@node Servicios LDAP
@subsection Servicios LDAP
@cindex LDAP
@cindex nslcd, servicio LDAP

El módulo @code{(gnu services authentication)} proporciona el tipo
@code{nslcd-service-type}, que puede usarse para la identificación a través
de un servidor LDAP. Además de la configuración del servicio en sí, puede
desear añadir @code{ldap} como servicio de nombres en el selector de
servicios de nombres (NSS). @xref{Selector de servicios de nombres} para información
detallada.

Aquí se encuentra una declaración simple de sistema operativo con la
configuración predeterminada de @code{nslcd-service-type} y una
configuración del selector de servicios de nombre que consulta en último
lugar al servicios de nombres @code{ldap}:

@lisp
(use-service-modules authentication)
(use-modules (gnu system nss))
...
(operating-system
  ...
  (services
    (cons*
      (service nslcd-service-type)
      (service dhcp-client-service-type)
      %base-services))
  (name-service-switch
   (let ((services (list (name-service (name "db"))
                         (name-service (name "files"))
                         (name-service (name "ldap")))))
     (name-service-switch
      (inherit %mdns-host-lookup-nss)
      (password services)
      (shadow   services)
      (group    services)
      (netgroup services)
      (gshadow  services)))))
@end lisp

@c %start of generated documentation for nslcd-configuration

Los campos disponibles de @code{nslcd-configuration} son:

@deftypevr {parámetro de @code{nslcd-configuration}} package nss-pam-ldapd
El paquete @code{nss-pam-ldapd} usado.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-number threads
El número de hilos a iniciar que pueden gestionar peticiones y realizar
consultas en LDAP. Cada hilo abre una conexión separada al servidor LDAP. Se
inician 5 hilos de manera predeterminada.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} string uid
Especifica el id de usuaria con el que debe ejecutarse el daemon.

El valor predeterminado es @samp{"nslcd"}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} string gid
Especifica el id de grupo con el que debe ejecutarse el daemon.

El valor predeterminado es @samp{"nslcd"}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} opción-registro log
This option controls the way logging is done via a list containing SCHEME
and LEVEL.  The SCHEME argument may either be the symbols @samp{none} or
@samp{syslog}, or an absolute file name.  The LEVEL argument is optional and
specifies the log level.  The log level may be one of the following symbols:
@samp{crit}, @samp{error}, @samp{warning}, @samp{notice}, @samp{info} or
@samp{debug}.  All messages with the specified log level or higher are
logged.

El valor predeterminado es @samp{("/var/log/nslcd" info)}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} lista uri
La lista de URI de servidores LDAP. Normalmente, únicamente se usará el
primer servidor y los siguientes se usan en caso de fallo.

El valor predeterminado es @samp{"ldap://localhost:389/"}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string ldap-version
La versión del protocolo LDAP usada. El valor predeterminado usa la versión
máxima implementada por la biblioteca LDAP.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string binddn
Especifica el nombre distinguido con el que enlazarse en el servidor de
directorio para las búsquedas. El valor predeterminado se enlaza de forma
anónima.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string bindpw
Especifica las credenciales usadas para el enlace. Esta opción tiene
utilidad únicamente cuando se usa con binddn.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string rootpwmoddn
Especifica el nombre distinguido usado cuando la usuaria root intenta
modificar la contraseña de una usuaria mediante el módulo de PAM.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string rootpwmodpw
Especifica las credenciales con las que enlazarse si la usuaria root intenta
cambiar la contraseña de una usuaria. Esta opción tiene utilidad únicamente
cuando se usa con rootpwmoddn.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string sasl-mech
Especifica el mecanismo de SASL usado cuando se realice la identificación
con SASL.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string sasl-realm
Especifica el dominio de SASL usado cuando se realice la identificación con
SASL.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string sasl-authcid
Especifica la identidad de verificación usada cuando se realice la
identificación con SASL.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string sasl-authzid
Especifica la identidad de autorización usada cuando se realice la
identificación con SASL.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-boolean sasl-canonicalize?
Determina si el nombre de máquina del servidor LDAP debe transformarse a su
forma canónica. Si se activa, la librería LDAP realizará una búsqueda
inversa de nombre de máquina. De manera predeterminada, se delega en la
biblioteca la decisión de realizar esta comprobación o no.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string krb5-ccname
Establece el nombre para la caché de credenciales GSS-API de Kerberos.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} string base
El directorio de búsqueda base.

El valor predeterminado es @samp{"dc=example,dc=com"}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} opción-de-ámbito scope
Especifica el ámbito de búsqueda (subtree, oneleve, base o children). El
ámbito predeterminado es subtree; el ámbito base casi nunca es útil para
búsquedas del servicio de nombres; el ámbito children no está implementado
en todos los servidores.

El valor predeterminado es @samp{(subtree)}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-deref-option deref
Especifica la política para seguir las referencias de los alias. La política
predeterminada es nunca seguir las referencias de los alias.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-boolean referrals
Especifica si el seguimiento automático de referencias debe activarse. El
seguimiento de referencias es comportamiento predeterminado.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} lista-asociación-entrada maps
Esta opción permite que se busquen atributos personalizados en vez de los
atributos predeterminados de RFC 2307. Es una lista de asociaciones, de las
que cada una consiste en el nombre de la asociación, el atributo de RFC 2307
al que corresponde y la expresión de búsqueda del atributo en la forma que
esté disponible en el directorio.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} lista-asociación-entrada filters
Una lista de filtros que consiste en el nombre de una asociación a la que se
aplica el filtro y una expresión de filtrado de búsqueda de LDAP.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-number bind-timelimit
Especifica el tiempo límite usado en segundos durante la conexión al
servidor de directorio. El valor predeterminado son 10 segundos.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-number timelimit
Especifica el tiempo límite (en segundos) durante el que se esperará una
respuesta del servidor LDAP. Un valor de cero, por omisión, hace que se
espere de manera indefinida hasta que las búsquedas se completen.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-number idle-timelimit
Especifica el periodo de inactividad (en segundos) tras el cual se cerrará
la conexión con el servidor LDAP. El valor predeterminado no cierra las
conexiones por inactividad.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-number reconnect-sleeptime
Especifica en número de segundos que se dormirá cuando falle la conexión a
todos los servidores LDAP. De manera predeterminada se espera un segundo
entre el primer fallo y el primer reintento.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-number reconnect-retrytime
Especifica el tiempo tras el cual el servidor LDAP se considera no
disponible de manera permanente. Una vez se alcance este tiempo, los
reintentos se realizarán una vez en cada periodo de tiempo igual al
especificado. El valor predeterminado es 10 segundos.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-ssl-option ssl
Determina si se usa SSL/TLS o no (el comportamiento predeterminado es no
hacerlo). Si se especifica 'start-tls, se usa StartTLS en vez de la
transmisión del protocolo LDAP en crudo sobre SSL.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-tls-reqcert-option tls-reqcert
Especifica las comprobaciones que se deben realizar con un certificado
proporcionado por el servidor. El significado de los valores se describe en
la página de manual de ldap.conf(5). 

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string tls-cacertdir
Especifica el directorio que contiene los certificados X.509 para la
identificación de pares. Este parámetro se ignora si se usa GnuTLS.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string tls-cacertfile
Especifica la ruta al certificado X.509 para la identificación de pares.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string tls-randfile
Especifica la ruta de la fuente de entropía. Este parámetro se ignora si se
usa GnuTLS.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string tls-ciphers
Especifica como una cadena los algoritmos de cifrado usados para TLS.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string tls-cert
Especifica la ruta al fichero que contiene el certificado local para la
identificación de clientes con TLS.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string tls-key
Especifica la ruta al fichero que contiene la clave privada para la
identificación de clientes con TLS.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-number pagesize
Proporcione un valor superior a 0 para solicitar al servidor LDAP que
proporcione los resultados divididos en páginas de acuerdo con el
RFC2696. El valor predeterminado (0) no solicita resultados divididos en
páginas.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-ignore-users-option nss-initgroups-ignoreusers
Esta opción previene las búsquedas de pertenencia a grupos a través de LDAP
sobre las usuarias especificadas. De manera alternativa, se puede usar el
valor 'all-local. Con dicho valor nslcd construye al inicio una lista
completa de usuarias que no se encuentren en LDAP.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-number nss-min-uid
Esta opción hace que se ignoren las usuarias de LDAP con un identificador
numérico inferior al valor especificado.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-number nss-uid-offset
Esta opción especifica un desplazamiento que se añade a todos los
identificadores numéricos de usuaria de LDAP. Puede usarse para evitar
colisiones de identificadores con usuarias locales.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-number nss-gid-offset
Esta opción especifica un desplazamiento que se añade a todos los
identificadores numéricos de grupos de LDAP. Puede usarse para evitar
colisiones de identificadores con grupos locales.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-boolean nss-nested-groups
Cuando se activa esta opción, un grupo puede contener como atributo la
pertenencia a otro grupo. Los miembros de grupos anidados se devuelven en el
grupo superior y los grupos superiores se devuelven cuando se busquen los
grupos de una usuaria específica. El valor predeterminado determina que no
se realicen búsquedas adicionales para grupos anidados.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-boolean nss-getgrent-skipmembers
Cuando se activa esta opción, la lista de miembros de un grupo no se obtiene
en las búsquedas de grupos. Las búsquedas que busquen los grupos de los que
una usuaria es miembro continuarán funcionando de manera que probablemente a
la usuaria se le asignen los grupos correctos durante el ingreso al sistema.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-boolean nss-disable-enumeration
Cuando se activa esta opción, las funciones que provocan la carga de todas
las entradas usuaria/grupo del directorio no tendrán éxito al
realizarlo. Esto puede reducir de forma dramática la carga del servidor LDAP
cuando existe un gran número de usuarias y/o grupos. Esta opción no se
recomienda para la mayoría de las configuraciones.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string validnames
Esta opción puede usarse para especificar cómo se verifican en el sistema
los nombres de usuaria y grupo. Este patrón se usa para comprobar todos los
nombres de usuarias y grupos que se soliciten y proporcionen a través de
LDAP.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-boolean ignorecase
Especifica si se realizarán las búsquedas sin diferenciar mayúsculas y
minúsculas o no. Su activación puede abrir puntos vulnerables que permitan
la omisión de las comprobaciones de autorización e introducir
vulnerabilidades que permitan el envenenamiento de la caché de nscd, lo que
puede provocar la denegación del servicio.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-boolean pam-authc-ppolicy
Esta opción determina si los controles de la política de contraseñas se
solicitan y manejan desde el servidor LDAP cuando se realice la
identificación de usuarias.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string pam-authc-search
De manera predeterminada nslcd realiza una búsqueda LDAP con las
credenciales de la usuaria tras la orden BIND (identificación) para
asegurarse de que la opción BIND fue satisfactoria. La búsqueda
predeterminada es una simple comprobación de la existencia del DN de la
usuaria. Se puede especificar un filtro de búsqueda que se usará en vez de
dicha búsqueda. Debe devolver al menos una entrada.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string pam-authz-search
Esta opción permite la configuración detallada de las comprobaciones de
autorización que deben realizarse. El filtro de búsqueda especificado es
ejecutado, y si cualquier entrada corresponde se permite el acceso, el cual
se deniega en caso contrario.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} maybe-string pam-password-prohibit-message
Si se proporciona esta opción, se denegará la modificación de contraseñas a
través de pam_ldap y en vez de ello el mensaje especificado se presentará a
la usuaria. El mensaje puede usarse para redirigir a la usuaria a un medio
alternativo para el cambio de su contraseña.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{nslcd-configuration}} lista pam-services
Lista de nombres de servicio de PAM para los que la identificación de LDAP
debería ser suficiente.

El valor predeterminado es @samp{()}.

@end deftypevr

@c %end of generated documentation for nslcd-configuration


@node Servicios Web
@subsection Servicios Web

@cindex web
@cindex www
@cindex HTTP
El módulo @code{(gnu services web)} proporciona el servidor HTTP Apache, el
servidor web nginx y también un recubrimiento del daemon de fastcgi.

@subsubheading Servidor HTTP Apache

@deffn {Variable Scheme} httpd-service-type
Tipo de servicio para el servidor @uref{https://httpd.apache.org/, Apache
HTTP} (@dfn{httpd}).  El valor para este tipo de servicio es un registro
@code{httpd-configuration}.

Un ejemplo de configuración simple se proporciona a continuación.

@lisp
(service httpd-service-type
         (httpd-configuration
           (config
             (httpd-config-file
               (server-name "www.example.com")
               (document-root "/srv/http/www.example.com")))))
@end lisp

Otros servicios también pueden extender el tipo @code{httpd-service-type}
para añadir su contribución a la configuración.

@lisp
(simple-service 'servidor-www.example.com httpd-service-type
                (list
                  (httpd-virtualhost
                    "*:80"
                    (list (string-join '("ServerName "www.example.com"
                                         "DocumentRoot /srv/http/www.example.com")
                                       "\n")))))
@end lisp
@end deffn

Los detalles de los tipos de registro @code{httpd-configuration},
@code{httpd-module}, @code{httpd-config-file} y @code{httpd-virtualhost} se
proporcionan a continuación.

@deffn {Tipo de datos} httpd-configuration
Este tipo de datos representa la configuración del servicio httpd.

@table @asis
@item @code{package} (predeterminado: @code{httpd})
El paquete httpd usado.

@item @code{pid-file} (predeterminado: @code{"/var/run/httpd"})
El fichero pid usado por el servicio de Shepherd.

@item @code{config} (predeterminado: @code{(httpd-config-file)})
El fichero de configuración usado por el servicio httpd. El valor
predeterminado es un registro @code{httpd-config-file}, pero también puede
ser una expresión-G diferente que genere un fichero, por ejemplo mediante el
uso de @code{plain-file}. Un fichero externo al almacén se puede especificar
mediante una cadena.

@end table
@end deffn

@deffn {Tipo de datos} httpd-module
Este es el tipo de datos que representa un módulo para el servicio httpd.

@table @asis
@item @code{name}
El nombre del módulo.

@item @code{file}
El fichero para el módulo. La ruta puede ser relativa al paquete httpd
usado, la ruta absoluta de un fichero, o una expresión-G para un fichero
dentro del almacén, por ejemplo @code{(file-append mod-wsgi
"/modules/mod_wsgi.so")}.

@end table
@end deffn

@defvr {Variable Scheme} %default-httpd-modules
Una lista de objetos @code{httpd-module} predeterminados.
@end defvr

@deffn {Tipo de datos} httpd-config-file
Este tipo de datos representa un fichero de configuración para el servicio
httpd.

@table @asis
@item @code{modules} (predeterminados: @code{%default-httpd-modules})
Módulos que deben cargarse. Aquí pueden añadir módulos adicionales, o que se
carguen en la configuración adicional.

Por ejemplo, para manejar las peticiones de ficheros PHP, puede usar el
módulo @code{mod_proxy_fcgi} de Apache junto con
@code{php-fpm-service-type}:

@lisp
(service httpd-service-type
         (httpd-configuration
          (config
           (httpd-config-file
            (modules (cons*
                      (httpd-module
                       (name "modulo_proxy")
                       (file "modules/mod_proxy.so"))
                      (httpd-module
                       (name "module_proxy_fcgi")
                       (file "modules/mod_proxy_fcgi.so"))
                      %default-httpd-modules))
            (extra-config (list "\
<FilesMatch \\.php$>
    SetHandler \"proxy:unix:/var/run/php-fpm.sock|fcgi://localhost/\"
</FilesMatch>"))))))
(service php-fpm-service-type
         (php-fpm-configuration
          (socket "/var/run/php-fpm.sock")
          (socket-group "httpd")))
@end lisp

@item @code{server-root} (predeterminado: @code{httpd})
El campo @code{ServerRoot} (raíz del servidor) en el fichero de
configuración, cuyo valor predeterminado apunta al paquete httpd. Directivas
como @code{Include} and @code{LoadModule} se interpretan como relativas a la
raíz del servidor.

@item @code{server-name} (predeterminado: @code{#f})
El campo @code{ServerName} (nombre del servidor) en el fichero de
configuración, el cual se usa para especificar el esquema de peticiones,
nombre de máquina y puerto que el servidor usa para su propia
identificación.

No es necesario proporcionar un valor en la configuración del servidor, y
puede especificarse en las máquinas virtuales. El valor predeterminado es
@code{#f} que no especifica un campo @code{ServerName}.

@item @code{document-root} (predeterminado: @code{"/srv/http"})
La raíz (@code{DocumentRoot}) desde la que se proporcionan los archivos.

@item @code{listen} (predeterminado: @code{'("80")})
La lista de valores para las directivas @code{Listen} en el fichero de
configuración. El valor debe ser una lista de cadenas, donde cada cadena
puede especificar el número de puerto en el que se escucha, y de manera
opcional la dirección IP y el protocolo usados.

@item @code{pid-file} (predeterminado: @code{"/var/run/httpd"})
El fichero de PID usado (@code{PidFile}). Debe corresponder con el valor de
@code{pid-file} proporcionado en @code{httpd-configuration} de manera que el
servicio de Shepherd se configure de manera correcta.

@item @code{error-log} (predeterminado: @code{"/var/log/httpd/error_log"})
El fichero @code{ErrorLog} en el que el servidor registrará los errores.

@item @code{user} (predeterminada: @code{"httpd"})
La usuaria como la que el servidor responderá a las peticiones.

@item @code{group} (predeterminado: @code{"httpd"})
El grupo como el que el servidor responderá a las peticiones.

@item @code{extra-config} (predeterminadas: @code{(list "TypesConfig etc/httpd/mime.types")})
Una lista de cadenas y expresiones-G que se añadirán al final del fichero de
configuración.

Los valores con los que se extiende el servicio se añaden al final de esta
lista.

@end table
@end deffn

@deffn {Tipo de datos} httpd-virtualhost
Este tipo de datos representa un bloque de configuración de máquina virtual
del servicio httpd.

Se deben añadir a la configuración adicional extra-config del servicio
httpd-service.

@lisp
(simple-service 'servidor-www.example.com httpd-service-type
                (list
                  (httpd-virtualhost
                    "*:80"
                    (list (string-join '("ServerName "www.example.com"
                                         "DocumentRoot /srv/http/www.example.com")
                                       "\n")))))
@end lisp

@table @asis
@item @code{addresses-and-ports}
Las direcciones y puertos de la directiva @code{VirtualHost}.

@item @code{contents}
El contenido de la directiva @code{VirtualHost}; debe ser una lista de
cadenas y expresiones-G.

@end table
@end deffn

@subsubheading NGINX

@deffn {Variable Scheme} nginx-service-type
Tipo de servicio para el servidor web @uref{https://nginx.org/,NGinx}. El
valor para este tipo de servicio es un registro
@code{<nginx-configuration>}.

Un ejemplo de configuración simple se proporciona a continuación.

@lisp
(service nginx-service-type
         (nginx-configuration
           (server-blocks
             (list (nginx-server-configuration
                     (server-name '("www.example.com"))
                     (root "/srv/http/www.example.com"))))))
@end lisp

Además de añadiendo bloques de servidor a la configuración del servicio de
manera directa, este servicio puede extenderse con otros servicios para
añadir bloques de servidor, como en este ejemplo:

@lisp
(simple-service 'mi-servidor-adicional nginx-service-type
                (list (nginx-server-configuration
                        (root "/srv/http/sitio-adicional")
                        (try-files (list "$uri" "$uri/index.html")))))
@end lisp
@end deffn

Durante su inicio, @command{nginx} no ha leído todavía su fichero de
configuración, por lo que usa un fichero predeterminado para registrar los
mensajes de error. Si se produce algún fallo al cargar su fichero de
configuración, allí es donde se registran los mensajes de error. Tras la
carga del fichero de configuración, el fichero de registro de errores
predeterminado cambia al especificado allí. En nuestro caso, los mensajes de
error durante el inicio se pueden encontrar en
@file{/var/run/nginx/logs/error.log}, y tras la configuración en
@file{/var/log/nginx/error.log}. La segunda ruta puede cambiarse con las
opciones de configuración @var{log-directory}.

@deffn {Tipo de datos} nginx-configuration
Este tipo de datos representa la configuración para NGinx. Alguna
configuración puede llevarse a cabo a través de este y otros tipos de
registro proporcionados, o de manera alternativa se puede proporcionar un
fichero de configuración.

@table @asis
@item @code{nginx} (predeterminado: @code{nginx})
El paquete nginx usado.

@item @code{log-directory} (predeterminado: @code{"/var/log/nginx"})
Directorio en el que NGinx escribirá los ficheros de registro.

@item @code{run-directory} (predeterminado: @code{"/var/run/nginx"})
Directorio en el que NGinx crea el fichero de PID, y escribe ficheros
temporales.

@item @code{server-blocks} (predeterminados: @code{'()})
Una lista de @dfn{bloques de servidor} que se crearán en el fichero de
configuración generado; los elementos deben ser del tipo
@code{<nginx-server-configuration>}.

El ejemplo siguiente configura NGinx para proporcionar
@code{www.example.com} a partir del directorio
@code{/srv/http/www.example.com}, sin usar HTTPS.
@lisp
(service nginx-service-type
         (nginx-configuration
           (server-blocks
             (list (nginx-server-configuration
                     (server-name '("www.example.com"))
                     (root "/srv/http/www.example.com"))))))
@end lisp

@item @code{upstream-blocks} (predeterminados: @code{'()})
Una lista de @dfn{bloques upstream} creada en el fichero de configuración
generado, los elementos deben ser del tipo
@code{<nginx-upstream-configuration>}.

La configuración de proveedores a través de @code{upstream-blocks} puede ser
útil al combinarse con @code{location} en los registros
@code{<nginx-server-configuration>}. El siguiente ejemplo crea la
configuración de un servidor con una configuración de ruta, que hará de
intermediaria en las peticiones a la configuración de proveedores, que
delegarán las peticiones en dos servidores.

@lisp
(service
  nginx-service-type
  (nginx-configuration
    (server-blocks
      (list (nginx-server-configuration
              (server-name '("www.example.com"))
              (root "/srv/http/www.example.com")
              (locations
                (list
                  (nginx-location-configuration
                  (uri "/ruta1")
                  (body '("proxy_pass http://servidor-proxy;"))))))))
    (upstream-blocks
      (list (nginx-upstream-configuration
              (name "servidor-proxy")
              (servers (list "servidor1.example.com"
                             "servidor2.example.com")))))))
@end lisp

@item @code{file} (predeterminado: @code{#f})
Si se proporciona un fichero de configuración con @var{file}, se usará este,
en vez de generar un fichero de configuración a partir de los parámetros
@code{log-directory}, @code{run-directory}, @code{server-blocks} y
@code{upstream-blocks} proporcionados. Para conseguir un funcionamiento
adecuado, estos parámetros deben corresponder con el contenido de
@var{file}, lo que asegura que los directorios se hayan creado durante la
activación del servicio.

Esto puede ser útil si ya dispone de un fichero de configuración, o no es
posible hacer lo que necesita con el resto de opciones del registro
nginx-configuration.

@item @code{server-names-hash-bucket-size} (predeterminado: @code{#f})
Tamaño del cubo para las tablas hash de los nombres de servidor, cuyo valor
predeterminado es @code{#f} para que se use el tamaño de la línea de caché
de los procesadores.

@item @code{server-names-hash-bucket-max-size} (predeterminado: @code{#f})
Tamaño máximo del cubo para las tablas hash de nombres de servidor.

@item @code{modules} (predeterminados: @code{'()})
Lista de módulos dinámicos de nginx cargados. Debe ser una lista de nombres
de fichero de módulos cargables, como en este ejemplo:

@lisp
(modules
 (list
  (file-append nginx-accept-language-module "\
/etc/nginx/modules/ngx_http_accept_language_module.so")))
@end lisp

@item @code{global-directives} (predeterminadas: @code{'((events . ()))})
Lista asociativa de directivas globales para el nivel superior de la
configuración de nginx. Los valores en sí mismos pueden ser listas
asociativas.

@lisp
(global-directives
 `((worker_processes . 16)
   (pcre_jit . on)
   (events . ((worker_connections . 1024)))))
@end lisp

@item @code{extra-content} (predeterminado: @code{""})
Contenido adicional para el bloque @code{http}. Debe ser una cadena o una
expresión-G que evalúe a una cadena.

@end table
@end deffn

@deftp {Tipo de datos} nginx-server-configuration
Tipo de datos que representa la configuración de un bloque de servidor
nginx. Este tipo tiene los siguientes parámetros:

@table @asis
@item @code{listen} (predeterminadas: @code{'("80" "443 ssl")})
Cada directiva @code{listen} establece la dirección y el puerto para IP, o
la ruta para un socket de dominio de UNIX sobre el que el servidor acepta
peticiones. Se puede especificar tanto dirección y puerto como únicamente la
dirección o únicamente el puerto. Una dirección puede ser también un nombre
de máquina, por ejemplo:

@lisp
'("127.0.0.1:8000" "127.0.0.1" "8000" "*:8000" "localhost:8000")
@end lisp

@item @code{server-name} (predeterminados: @code{(list 'default)})
Una lista de nombres de servidor que este servidor
representa. @code{'default} representa el servidor predeterminado para
conexiones que no correspondan a otro servidor.

@item @code{root} (predeterminada: @code{"/srv/http"})
Raíz del sitio web que nginx proporcionará.

@item @code{locations} (predeterminado: @code{'()})
Una lista de registros @dfn{nginx-location-configuration} o
@dfn{nginx-named-location-configuration} usados dentro de este bloque de
servidor.

@item @code{index} (predeterminado: @code{(list "index.html")})
Ficheros de índice buscados cuando los clientes solicitan un directorio. Si
no se encuentra ninguno, Nginx enviará la lista de ficheros del directorio.

@item @code{try-files} (predeterminado: @code{'()})
Una lista de ficheros cuya existencia se comprueba en el orden
especificado. @code{nginx} usará el primer fichero que encuentre para
procesar la petición.

@item @code{ssl-certificate} (predeterminado: @code{#f})
Lugar donde se encuentra el certificado para conexiones seguras. Proporcione
@code{#f} si no dispone de un certificado o no desea usar HTTPS.

@item @code{ssl-certificate-key} (predeterminado: @code{#f})
Lugar donde se encuentra la clave privada para conexiones
seguras. Proporcione @code{#f} si no dispone de una clave o no desea usar
HTTPS.

@item @code{server-tokens?} (predeterminado: @code{#f})
Determina si el servidor debe añadir su configuración a las respuestas.

@item @code{raw-content} (predeterminado: @code{'()})
Una lista de líneas que se añadirán literalmente al bloque del servidor.

@end table
@end deftp

@deftp {Tipo de datos} nginx-upstream-configuration
Tipo de datos que representa la configuración de un bloque @code{upstream}
de nginx. Este tipo tiene los siguientes parámetros:

@table @asis
@item @code{name}
Nombre para este grupo de servidores.

@item @code{servers}
Especifica las direcciones de los servidores en el grupo. Las direcciones se
pueden proporcionar mediante direcciones IP (por ejemplo @samp{127.0.0.1}),
nombres de dominio (por ejemplo @samp{maquina1.example.com}) o rutas de
socket de UNIX mediante el prefijo @samp{unix:}. El puerto predeterminado
para las direcciones IP o nombres de dominio es el 80, y se puede
proporcionar un puerto de manera explícita.

@end table
@end deftp

@deftp {Tipo de datos} nginx-location-configuration
Tipo de datos que representa la configuración de un bloque @code{location}
de nginx. Este tipo tiene los siguientes parámetros:

@table @asis
@item @code{uri}
URI a la que corresponde este bloque de location.

@anchor{cuerpo de nginx-location-configuration}
@item @code{body}
Cuerpo del bloque de localización ``location'', especificado como una lista
de cadenas. Puede contener muchas directivas de configuración. Por ejemplo,
para pasar las peticiones a un grupo de servidores proveedores definido
mediante el uso de un bloque @code{nginx-upstream-configuration}, se
especificaría la siguiente directiva en el cuerpo @samp{(list \"proxy_pass
http://nombre-proveedor;\")}.

@end table
@end deftp

@deftp {Tipo de datos} nginx-named-location-configuration
Tipo de datos que representa la configuración de un bloque de localización
con nombre de nginx. Los bloques de localizaciones con nombre se usan para
la redirección de peticiones, y no se usan para el procesamiento regular de
peticiones. Este tipo tiene los siguientes parámetros:

@table @asis
@item @code{name}
Nombre que identifica este bloque de dirección @code{location}.

@item @code{body}
@xref{cuerpo de nginx-location-configuration}, como el cuerpo de los bloques
de localizaciones con nombre puede usarse de manera similar al @code{cuerpo
de nginx-location-configuration}. Una restricción es que el cuerpo de una
localización con nombre no puede contener bloques de localizaciones.

@end table
@end deftp

@subsubheading Caché Varnish
@cindex Varnish
Varnish es un servidor de caché rápida que se coloca entre aplicaciones web
y usuarios finales. Hace de intermediario (proxy) en las peticiones de los
clientes y almacena en caché las URL a las que se accede de manera que
múltiples peticiones al mismo recurso únicamente creen una petición al
motor.

@defvr {Variable Scheme} varnish-service-type
Tipo de servicio para el daemon Varnish.
@end defvr

@deftp {Tipo de datos} varnish-configuration
Tipo de datos que representa la configuración del servicio
@code{varnish}. Este tipo tiene los siguientes parámetros:

@table @asis
@item @code{package} (predeterminado: @code{varnish})
El paquete Varnish usado.

@item @code{name} (predeterminado: @code{"default"})
Un nombre para esta instancia de Varnish. Varnish creará un directorio en
@file{/var/varnish} con este nombre y mantendrá allí los ficheros
temporales. Si el nombre comienza con una barra, se interpreta como un
nombre absoluto de directorio.

Proporcione el parámetro @code{-n} a otros programas de Varnish para que se
conecten a la instancia de dicho nombre, por ejemplo @command{varnishncsa -n
default}.

@item @code{backend} (predeterminado: @code{"localhost:8080"})
Motor usado. Esta opción no tiene efecto si se usa @code{vcl}.

@item @code{vcl} (predeterminado: #f)
El programa @dfn{VCL} (lenguaje de configuración de Varnish) ejecutado. Si
se proporciona @code{#f}, Varnish actuará de intermediario (proxy) de
@code{backend} usando la configuración predeterminada. En otro caso debe ser
un objeto ``tipo-fichero'' con sintaxis válida para VCL.

@c Varnish does not support HTTPS, so keep this URL to avoid confusion.
Por ejemplo, para proporcionar un espejo de
@url{https://www.gnu.org,www.gnu.org} con VCL podría escribir algo parecido
a esto:

@lisp
(define %espejo-gnu
  (plain-file "gnu.vcl"
              "vcl 4.1;
backend gnu @{ .host = \"www.gnu.org\"; @}"))

(operating-system
  ;; @dots{}
  (services (cons (service varnish-service-type
                           (varnish-configuration
                            (listen '(":80"))
                            (vcl %espejo-gnu)))
                  %base-services)))
@end lisp

La configuración de una instancia de Varnish ya en ejecución se puede
inspeccionar y cambiar mediante el uso de la orden @command{varnishadm}.

Consulte la @url{https://varnish-cache.org/docs/,guía de usuaria de Varnish}
y @url{https://book.varnish-software.com/4.0/,el libro de Varnish} para
obtener la documentación completa de Varnish y su lenguaje de configuración.

@item @code{listen} (predeterminada: @code{'("localhost:80")})
Lista de direcciones en las que Varnish escucha.

@item @code{storage} (predeterminado: @code{'("malloc,128m")})
Lista de motores de almacenamiento que estarán disponibles en VCL.

@item @code{parameters} (predeterminados: @code{'()})
Lista de parámetros de tiempo de ejecución con la forma @code{'(("parámetro"
. "valor"))}.

@item @code{extra-options} (predeterminadas: @code{'()})
Parámetros adicionales a proporcional al proceso @command{varnishd}.

@end table
@end deftp

@subsubheading Patchwork
@cindex Patchwork
Patchwork es un sistema de seguimiento de parches. Puede recolectar parches
enviados a listas de correo y mostrarlos en una interfaz web.

@defvr {Variable Scheme} patchwork-service-type
Tipo de servicio para Patchwork.
@end defvr

El siguiente ejemplo muestra un servicio mínimo para Patchwork, para el
dominio @code{patchwork.example.com}.

@lisp
(service patchwork-service-type
         (patchwork-configuration
          (domain "patchwork.example.com")
          (settings-module
           (patchwork-settings-module
            (allowed-hosts (list domain))
            (default-from-email "patchwork@@patchwork.example.com")))
          (getmail-retriever-config
           (getmail-retriever-configuration
            (type "SimpleIMAPSSLRetriever")
            (server "imap.example.com")
            (port 993)
            (username "patchwork")
            (password-command
             (list (file-append coreutils "/bin/cat")
                   "/etc/getmail-patchwork-imap-password"))
            (extra-parameters
            '((mailboxes . ("Parches"))))))))

@end lisp

Existen tres registros para la configuración del servicio de Patchwork. El
registro @code{<patchwork-configuration>} está relacionado con la
configuración de Patchwork dentro del servicio HTTPD.

El campo @code{settings-module} dentro del registro
@code{<patchwork-configuration>} puede rellenarse con un registro
@code{<patchwork-settings-module>}, que describe un módulo de configuración
generado dentro del almacén de Guix.

En el campo @code{database-configuration} dentro del registro
@code{<patchwork-settings-module>}, debe usarse
@code{<patchwork-database-configuration>}.

@deftp {Tipo de datos} patchwork-configuration
Tipo de datos que representa la configuración del servicio Patchwok. Este
tipo tiene los siguientes parámetros:

@table @asis
@item @code{patchwork} (predeterminado: @code{patchwork})
El paquete Patchwork usado.

@item @code{domain}
Dominio usado por Patchwork, se usa en el servicio HTTPD como ``virtual
host''.

@item @code{settings-module}
Módulo de configuración usado para Patchwork. Como una aplicación de Django,
Patchwork se configura con un módulo Python que contiene los valores de
configuración. Esto puede ser una instancia de un registro
@code{<patchwork-settings-module>}, cualquier otro registro que represente
la configuración en el almacén, o un directorio fuera del almacén.

@item @code{static-path}  (predeterminada: @code{"/static/"})
Ruta bajo la cual el servicio HTTPD proporciona ficheros estáticos.

@item @code{getmail-retriever-config}
El valor del registro @code{getmail-retriever-configuration} usado con
Patchwork. En caso de configurar Getmail con este valor, los mensajes se
proporcionan a Patchwork.

@end table
@end deftp

@deftp {Tipo de datos} patchwork-settings-module
Tipo de datos que representa un módulo de configuración de
Patchwork. Algunas de estas opciones están directamente relacionadas con
Patchwork, pero otras son relativas a Django, el entorno web usado
Patchwork, o la biblioteca Django Rest Framework. Este tipo tiene los
siguientes parámetros:

@table @asis
@item @code{database-configuration} (predeterminada: @code{(patchwork-database-configuration)})
La configuración de la conexión a la base de datos usada para
Patchwork. Véase el tipo de registro
@code{<patchwork-database-configuration>} para más información.

@item @code{secret-key-file} (predeterminado: @code{"/etc/patchwork/django-secret-key"})
Patchwork, como una aplicación web Django, usa una clave secreta para firmar
criptográficamente valores. Este fichero debe contener un valor único e
impredecible.

Si este fichero no existe, el servicio de Shepherd patchwork-setup lo creará
y rellenará con un valor aleatorio.

Esta configuración está relacionada con Django.

@item @code{allowed-hosts}
Lista de nombres de máquina válidos para este servicio Patchwork. Al menos
debe incluir el dominio especificado en el registro
@code{<patchwork-configuration>}.

Esta es una opción de configuración de Django.

@item @code{default-from-email}
La dirección de correo desde de la que Patchwork debe enviar el correo de
manera predeterminada.

Esta es una opción de configuración de Patchwork.

@item @code{static-url} (predeterminada: @code{#f})
La URL usada para proporcionar objetos estáticos. Puede ser parte de una
URL, o una URL completa, pero debe terminar en @code{/}.

Si se usa el valor predeterminado, se usará el valor de @code{static-path}
del registro @code{<patchwork-configuration>}.

Esta es una opción de configuración de Django.

@item @code{admins} (predeterminadas: @code{'()})
Direcciones de correo electrónico a las que enviar los detalles de los
errores que ocurran. Cada valor debe ser una lista que contenga dos
elementos, el nombre y la dirección de correo electrónico en dicho orden.

Esta es una opción de configuración de Django.

@item @code{debug?} (predeterminado: @code{#f})
Determina si se ejecuta Patchwork en modo de depuración. Si se proporciona
@code{#t}, se mostrarán mensajes de error detallados.

Esta es una opción de configuración de Django.

@item @code{enable-rest-api?} (predeterminado: @code{#t})
Determina si se activa el API REST de Patchwork.

Esta es una opción de configuración de Patchwork.

@item @code{enable-xmlrpc?} (predeterminado: @code{#t})
Determina si se activa el API XML RPC.

Esta es una opción de configuración de Patchwork.

@item @code{force-https-links?} (predeterminado: @code{#t})
Determina si se usan enlaces HTTPS en las páginas de Patchwork.

Esta es una opción de configuración de Patchwork.

@item @code{extra-settings} (predeterminado: @code{""})
Código adicional que colocar al final del módulo de configuración de
Patchwork.

@end table
@end deftp

@deftp {Tipo de datos} patchwork-database-configuration
Tipo de datos que representa la configuración de base de datos de Patchwork.

@table @asis
@item @code{engine} (predeterminado: @code{"django.db.backends.postgresql_psycopg2"})
Motor de base de datos usado.

@item @code{name} (predeterminado: @code{"patchwork"})
Nombre de la base de datos usada.

@item @code{user} (predeterminada: @code{"httpd"})
Usuaria usada para la conexión a la base de datos.

@item @code{password} (predeterminada: @code{""})
Contraseña usada para la conexión a la base de datos.

@item @code{host} (predeterminada: @code{""})
Máquina usada para la conexión a la base de datos.

@item @code{port} (predeterminado: @code{""})
Puerto en el que se conecta a la base de datos.

@end table
@end deftp

@subsubheading Mumi

@cindex Mumi, interfaz web de Debbugs
@cindex Debbugs, interfaz web Mumi
@uref{https://git.elephly.net/gitweb.cgi?p=software/mumi.git, Mumi} es una
interfaz web al gestor de incidencias Debbugs, de manera predeterminada
apunta a @uref{https://bugs.gnu.org, la instancia de GNU}.  Mumi es un
servidor web, pero también obtiene e indexa los correos recibidos de
Debbugs.

@defvr {Variable Scheme} mumi-service-type
El tipo de servicio para Mumi.
@end defvr

@deftp {Tipo de datos} mumi-configuration
Tipo de datos que representa la configuración del servicio Mumi. Este tipo
tiene los siguientes campos:

@table @asis
@item @code{mumi} (predeterminado: @code{mumi})
El paquete Mumi usado.

@item @code{mailer?} (predeterminado: @code{#true})
Determina si se activa o desactiva el componente de correo @code{mailer}.

@item @code{mumi-configuration-sender}
La dirección de correo usada como remitente para los comentarios.

@item @code{mumi-configuration-smtp}
Una URI para las opciones de configuración de SMTP de Mailutils. Puede ser
algo parecido a @code{sendmail:///ruta/de/bin/msmtp} o cualquier otra URI
implementada por Mailutils.  @xref{SMTP Mailboxes, SMTP Mailboxes,,
mailutils, GNU@tie{}Mailutils}.

@end table
@end deftp


@subsubheading FastCGI
@cindex fastcgi
@cindex fcgiwrap
FastCGI es una interfaz entre la presentación (front-end) y el motor
(back-end) de un servicio web. Es en cierto modo una característica antigua;
los nuevos servicios web generalmente únicamente se comunican con HTTP entre
ambas partes. No obstante, existe cierto número de servicios de motor como
PHP o el acceso HTTP optimizado para repositorios Git que usan FastCGI, por
lo que debemos incluirlo en Guix.

Para usar FastCGI debe configurar el servidor web de entrada@footnote{NdT:
Front-end en inglés.} (por ejemplo, ngnix) para delegar un subconjunto de
sus peticiones al motor fastcgi, que escucha en un puerto TCP local o en un
socket de UNIX. Existe un programa de intermediación llamado @code{fcgiwrap}
que se posiciona entre el proceso del motor y el servidor web. El servidor
indica el programa del motor usado, proporcionando dicha información al
proceso @code{fcgiwrap}.

@defvr {Variable Scheme} fcgiwrap-service-type
El tipo de servicio para el proxy FastCGI @code{fcgiwrap}.
@end defvr

@deftp {Tipo de datos} fcgiwrap-configuration
Tipo de datos que representa la configuración del servicio
@code{fcgiwrap}. Este tipo tiene los siguientes parámetros:
@table @asis
@item @code{package} (predeterminado: @code{fcgiwrap})
El paquete fcgiwrap usado.

@item @code{socket} (predeterminado: @code{tcp:127.0.0.1:9000})
El socket donde el proceso @code{fcgiwrap} deba escuchar, como una cadena.
Los valores adecuados para @var{socket} socket incluyen
@code{unix:@var{/ruta/al/socket/unix}},
@code{tcp:@var{dirección.ip.con.puntos}:@var{puerto}} and
@code{tcp6:[@var{dirección_ipv6}]:puerto}.

@item @code{user} (predeterminado: @code{fcgiwrap})
@itemx @code{group} (predeterminado: @code{fcgiwrap})
Los nombres de usuaria y grupo, como cadenas, con los que se ejecutará el
proceso @code{fcgiwrap}. El servicio @code{fastcgi} se asegura, en caso de
solicitar específicamente el uso de nombres de usuaria o grupo
@code{fcgiwrap}, que la usuaria y/o grupo correspondientes se encuentren
presentes en el sistema.

Es posible configurar un servicio web proporcionado por FastCGI para que el
servidor de fachada proporcione la información de identificación HTTP al
motor, y para permitir que @code{fcgiwrap} se ejecute en el proceso del
motor como la usuaria local correspondiente. Para activar esta funcionalidad
en el motor, ejecute @code{fcgiwrap} mediante la usuaria y grupo
@code{root}. Tenga en cuenta de que esta funcionalidad debe configurarse del
mismo modo en el servidor de fachada.
@end table
@end deftp

@cindex php-fpm
PHP-FPM (FastCGI Process Manager) es una implementación alternativa de
FastCGI en PHP con algunas características adicionales útiles para sitios de
cualquier tamaño.

Estas características incluyen:
@itemize @bullet
@item Lanzamiento adaptativo de procesos
@item Estadísticas básicas (similares a mod_status de Apache)
@item Gestión avanzada de procesos con parada/arranque coordinados
@item Capacidad de iniciar procesos de trbajo con diferentes uid/gid/chroor/entorno
y diferentes php.ini (reemplaza a safe_mode)
@item Registro a través de la salida estándar y de error
@item Reinicio de emergencia en caso de destrucción accidental de la caché de opcode
@item Posibilidad de subida acelerada
@item Posibilidad de un "slowlog"
@item Mejoras a FastCGI, como fastcgi_finish_request() -
una función especial para terminar una petición y enviar todos los datos
mientras que se continua haciendo una tarea de alto consumo de tiempo
(conversión de vídeo, procesamiento de estadísticas, etcétera).
@end itemize
...@: y muchas más.

@defvr {Variable Scheme} php-fpm-service-type
Un tipo de servicio para @code{php-fpm}.
@end defvr

@deftp {Tipo de datos} php-fpm-configuration
Tipo de datos para la configuración del servicio php-fpm.
@table @asis
@item @code{php} (predeterminado: @code{php})
El paquete php usado.
@item @code{socket} (predeterminado: @code{(string-append "/var/run/php" (version-major (package-version php)) "-fpm.sock")})
La dirección desde la que FastCGI acepta peticiones. Las sintaxis válidas
son:
@table @asis
@item @code{"dir.ecc.ión.ip:puerto"}
Escucha con un socket TCP en la dirección especificada en un puerto
específico.
@item @code{"puerto"}
Escucha en un socket TCP en todas las direcciones sobre un puerto
específico.
@item @code{"/ruta/a/socket/unix"}
Escucha en un socket Unix.
@end table

@item @code{user} (predeterminada: @code{php-fpm})
Usuaria que poseerá los procesos de trabajo de php.
@item @code{group} (predeterminado: @code{php-fpm})
Grupo de los procesos de trabajo.
@item @code{socket-user} (predeterminado: @code{php-fpm})
Usuaria que puede comunicarse con el socket de php-fpm.
@item @code{socket-group} (predeterminado: @code{nginx})
Grupo que puede comunicarse con el socket de php-fpm.
@item @code{pid-file} (predeterminado: @code{(string-append "/var/run/php" (version-major (package-version php)) "-fpm.pid")})
El identificador de proceso del proceso de php-fpm se escribe en este
fichero cuando se ha iniciado el servicio.
@item @code{log-file} (predeterminado: @code{(string-append "/var/log/php" (version-major (package-version php)) "-fpm.log")})
Registro del proceso maestro de php-fpm.
@item @code{process-manager} (predeterminado: @code{(php-fpm-dynamic-process-manager-configuration)})
Configuración detallada para el gestor de procesos php-fpm. Debe ser uno de
los siguientes tipos:
@table @asis
@item @code{<php-fpm-dynamic-process-manager-configuration>}
@item @code{<php-fpm-static-process-manager-configuration>}
@item @code{<php-fpm-on-demand-process-manager-configuration>}
@end table
@item @code{display-errors} (predeterminado @code{#f})
Determina si los errores y avisos de php deben enviarse a los clientes para
que se muestren en sus navegadores. Esto es útil para la programación local
con php, pero un riesgo para la seguridad de sitios públicos, ya que los
mensajes de error pueden revelar contraseñas y datos personales.
@item @code{timezone} (predeterminado: @code{#f})
Especifica el parámetro @code{php_admin_value[date.timezone]}.
@item @code{workers-logfile} (predeterminado @code{(string-append "/var/log/php" (version-major (package-version php)) "-fpm.www.log")})
Este fichero registrará las salidas por @code{stderr} de los procesos de
trabajo de php. Puede proporcionarse @code{#f} para desactivar el registro.
@item @code{file} (predeterminado @code{#f})
Sustituye opcionalmente la configuración al completo. Puede usar la función
@code{mixed-text-file} o una ruta absoluta de un fichero para hacerlo.
@end table
@end deftp

@deftp {Tipo de datos} php-fpm-dynamic-process-manager-configuration
Tipo de datos para el gestor de procesos @code{dynamic} de php-fpm. Con el
gestor de procesos @code{dynamic}, se mantienen procesos de trabajo
disponibles en base a los límites configurados.
@table @asis
@item @code{max-children} (predeterminados: @code{5})
Número máximo de procesos de trabajo.
@item @code{start-servers} (predeterminados: @code{2})
Cuantos procesos de trabajo deben ejecutarse al inicio.
@item @code{min-spare-servers} (predeterminado: @code{1})
Cuantos procesos de trabajo deben mantenerse disponibles como mínimo.
@item @code{max-spare-servers} (predeterminados: @code{3})
Cuantos procesos de trabajo deben mantenerse disponibles como máximo.
@end table
@end deftp

@deftp {Tipo de datos} php-fpm-static-process-manager-configuration
Tipo de datos para el gestor de procesos @code{static} de php-fpm. Con el
gestor de procesos @code{static}, se crea un número fijo de procesos de
trabajo.
@table @asis
@item @code{max-children} (predeterminados: @code{5})
Número máximo de procesos de trabajo.
@end table
@end deftp

@deftp {Tipo de datos} php-fpm-on-demand-process-manager-configuration
Tipo de datos para el gestor de procesos @code{on-demand} de php-fpm. Con el
gestor de procesos @code{on-demand}, se crean procesos de trabajo únicamente
cuando se reciben peticiones.
@table @asis
@item @code{max-children} (predeterminados: @code{5})
Número máximo de procesos de trabajo.
@item @code{process-idle-timeout} (predeterminado: @code{10})
El tiempo en segundos tras el cual un proceso sin peticiones será eliminado.
@end table
@end deftp


@deffn {Scheme Procedure} nginx-php-location @
       [#:nginx-package nginx] @ [socket (string-append "/var/run/php" @
(version-major (package-version php)) @ "-fpm.sock")]
Función auxiliar para añadir php a una configuración
@code{nginx-server-configuration} rápidamente.
@end deffn

Una configuración simple de servicios para nginx con php puede ser más o
menos así:
@lisp
(services (cons* (service dhcp-client-service-type)
                 (service php-fpm-service-type)
                 (service nginx-service-type
                          (nginx-server-configuration
                           (server-name '("example.com"))
                           (root "/srv/http/")
                           (locations
                            (list (nginx-php-location)))
                           (listen '("80"))
                           (ssl-certificate #f)
                           (ssl-certificate-key #f)))
                 %base-services))
@end lisp

@cindex cat-avatar-generator
El generadores de avatares de gato es un servicio simple para demostrar el
uso de php-fpm en @code{Nginx}. Se usa para generar un avatar de gato desde
una semilla, por ejemplo el hash de la dirección de correo de la usuaria.

@deffn {Procedimiento Scheme} cat-avatar-generator-service @
       [#:cache-dir "/var/cache/cat-avatar-generator"] @ [#:package
cat-avatar-generator] @ [#:configuration (nginx-server-configuration)]
Devuelve una configuración de nginx-server-configuration que hereda de
@code{configuration}.  Extiende la configuración de nginx para añadir un
bloque de servidor que proporciona @code{package}, una versión de
cat-avatar-generator. Durante su ejecución, cat-avatar-generator podrá usar
@code{cache-dir} como su directorio de caché.
@end deffn

Una configuración simple para cat-avatar-generator puede ser más o menos
así:
@lisp
(services (cons* (cat-avatar-generator-service
                  #:configuration
                  (nginx-server-configuration
                    (server-name '("example.com"))))
                 ...
                 %base-services))
@end lisp

@subsubheading Hpcguix-web

@cindex hpcguix-web
El programa @uref{https://github.com/UMCUGenetics/hpcguix-web/, hpcguix-web}
es una interfaz web personalizable para buscar paquetes de Guix, diseñado
inicialmente para usuarias de clusters de computación de alto rendimiento
(HPC).

@defvr {Variable Scheme} hpcguix-web-service-type
El tipo de servicio para @code{hpcguix-web}.
@end defvr

@deftp {Tipo de datos} hpcguix-web-configuration
El tipo de datos para la configuración del servicio hpcguix-web.

@table @asis
@item @code{specs}
Una expresión-G (@pxref{Expresiones-G}) que especifica la configuración del
servicio hpcguix-web. Los elementos principales en esta especificación son:

@table @asis
@item @code{title-prefix} (predeterminado: @code{"hpcguix | "})
El prefijo del título de la página.

@item @code{guix-command} (predeterminada: @code{"guix"})
La orden @command{guix}.

@item @code{package-filter-proc} (predeterminado: @code{(const #t)})
Un procedimiento que especifica cómo filtrar los paquetes mostrados.

@item @code{package-page-extension-proc} (predeterminado: @code{(const '())})
Paquete de extensión para @code{hpcguix-web}.

@item @code{menu} (predeterminadas: @code{'()})
Entradas adicionales en el menú de la página.

@item @code{channels} (predeterminados: @code{%default-channels})
Lista de canales desde los que se construye la lista de paquetes
(@pxref{Canales}).

@item @code{package-list-expiration} (predeterminado: @code{(* 12 3600)})
El tiempo de expiración, en segundos, tras el cual la lista de paquetes se
reconstruye desde las últimas instancias de los canales proporcionados.
@end table

Véase el repositorio de hpcguix-web para un
@uref{https://github.com/UMCUGenetics/hpcguix-web/blob/master/hpcweb-configuration.scm,
ejemplo completo}.

@item @code{package} (predeterminado: @code{hpcguix-web})
El paquete hpcguix-web usado.
@end table
@end deftp

Una declaración típica del servicio hpcguix-web es más o menos así:

@lisp
(service hpcguix-web-service-type
         (hpcguix-web-configuration
          (specs
           #~(define site-config
               (hpcweb-configuration
                (title-prefix "Guix-HPC - ")
                (menu '(("/about" "ABOUT"))))))))
@end lisp

@quotation Nota
El servicio hpcguix-web actualiza periódicamente la lista de paquetes que
publica obteniendo canales con Git. Para ello, necesita acceder a
certificados X.509 de manera que pueda validar los servidores Git durante la
comunicación con HTTPS, y asume que @file{/etc/ssl/certs} contiene dichos
certificados.

Por lo tanto, asegúrese de añadir @code{nss-certs} u otro paquete de
certificados al campo @code{packages} de su configuración. @ref{Certificados X.509}, para más información sobre certificados X.509.
@end quotation

@node Servicios de certificados
@subsection Servicios de certificados

@cindex Web
@cindex HTTP, HTTPS
@cindex Let's Encrypt
@cindex certificados TLS
El módulo @code{(gnu services certbot)} proporciona un servicio para la
obtención automática de un certificado TLS válido de la autoridad de
certificación Let's Encrypt. Estos certificados pueden usarse para
proporcionar contenido de forma segura sobre HTTPS u otros protocolos
basados en TLS, con el conocimiento de que el cliente podrá verificar la
autenticidad del servidor.

@url{https://letsencrypt.org/, Let's Encrypt} proporciona la herramienta
@code{certbot} para automatizar el proceso de certificación. Esta
herramienta genera primero de manera segura una clave en el servidor. Una
vez hecho realiza una petición a la autoridad de certificación (AC, CA en
inglés) Let's Encrypt para que firme la clave. La AC comprueba que la
petición se origina en la máquina en cuestión mediante un protocolo de
desafío-respuesta, esperando que el servidor proporcione su respuesta a
través de HTTP. Si dicho protocolo se completa de manera satisfactoria, la
AC firma la clave, resultando en un certificado. Dicho certificado es válido
por un periodo de tiempo limitado y, por tanto, para continuar
proporcionando servicios TLS, el servidor necesita solicitar a la AC
periódicamente la renovación de su firma.

El servicio certbot automatiza este proceso: la generación inicial de la
clave, la petición inicial de certificación al servicio Let's Encrypt, la
integración del desafío/respuesta en el servidor web, la escritura del
certificado en disco, las renovaciones periódicas automáticas y el
despliegue de tareas asociadas con la renovación (por ejemplo la recarga de
servicios y la copia de claves con diferentes permisos).

Certbot se ejecuta dos veces al día, en un minuto aleatorio dentro de la
hora. No hará nada hasta que sus certificados estén pendientes de renovación
o sean revocados, pero su ejecución regular propociona a su servicio la
oportunidad de permanecer en línea en caso de que se produzca una revocación
iniciada por Let's Encrypt por alguna razón.

Mediante el uso de este servicio, usted acepta el acuerdo de suscripción
ACME, que se puede encontrar aquí:
@url{https://acme-v01.api.letsencrypt.org/directory}.

@defvr {Variable Scheme} certbot-service-type
Un tipo de servicio para el cliente de Let's Encrypt @code{certbot}. Su
valor debe ser un registro @code{certbot-configuration} como en este
ejemplo:

@lisp
(define %procedimiento-de-despliegue-nginx
  (program-file
   "procedimiento-de-despliegue-nginx"
   #~(let ((pid (call-with-input-file "/var/run/nginx/pid" read)))
       (kill pid SIGHUP))))

(service certbot-service-type
         (certbot-configuration
          (email "foo@@example.net")
          (certificates
           (list
            (certificate-configuration
             (domains '("example.net" "www.example.net"))
             (deploy-hook %procedimiento-de-despliegue-nginx))
            (certificate-configuration
             (domains '("bar.example.net")))))))
@end lisp

Véase a continuación los detalles de @code{certbot-configuration}.
@end defvr

@deftp {Tipo de datos} certbot-configuration
Tipo de datos que representa la configuración del servicio
@code{certbot}. Este tipo tiene los siguientes parámetros:

@table @asis
@item @code{package} (predeterminado: @code{certbot})
El paquete certbot usado.

@item @code{webroot} (predeterminado: @code{/var/www})
Directorio desde el que se proporcionan los ficheros de desafío/respuesta de
Let's Encrypt.

@item @code{certificates} (predeterminados: @code{()})
Una lista de configuraciones @code{certificates-configuration} para los
cuales se generan certificados y se solicitan firmas. Cada certificado tiene
un nombre (@code{name}) y varios dominios (@code{domains}).

@item @code{correo electrónico (email)}
Correo electrónico obligatorio usado para el registro, contacto de
recuperación y notificaciones importantes de la cuenta.

@item @code{server} (predeterminada: @code{#f})
URL opcional del servidor ACME. Esta configuración cambia el valor
predeterminado de certbot, que es el servidor de Let's Encrypt.

@item @code{rsa-key-size} (predeterminado: @code{2048})
Tamaño de la clave RSA.

@item @code{default-location} (predeterminada: @i{véase a continuación})
La configuración @code{nginx-location-configuration} predeterminada. Debido
a que @code{certbot} necesita proporcionar desafíos y respuestas, necesita
ser capaz de ejecutar un servidor web. Se lleva a cabo extendiendo el
servicio web @code{nginx} con una configuración
@code{nginx-server-configuration} que escucha en los dominios @var{domains}
en el puerto 80, y que contiene una configuración
@code{nginx-location-configuration} para el subespacio de rutas URI
@code{/.well-known/} usado por Let's Encrypt. @xref{Servicios Web}, para más
información sobre estos tipos de datos de configuración de nginx.

Las peticiones a otras rutas URL se compararán contra la dirección
predeterminada @code{default-location}, la cual, en caso de estar presente,
se añade a todas las configuraciones @code{nginx-server-configuration}.

De manera predeterminada, la dirección predeterminada
@code{default-location} emitirá una redirección
@code{http://@var{dominio}/...} a @code{https://@var{dominio}/...}, lo que
le permite definir qué proporcionará en su sitio web a través de
@code{https}.

Proporcione @code{#f} para no emitir una dirección predeterminada.
@end table
@end deftp

@deftp {Tipo de datos} certificate-configuration
Tipo de datos que representa la configuración de un certificado. Este tipo
tiene los siguientes parámetros:

@table @asis
@item @code{name} (predeterminado: @i{vea a continuación})
Este nombre se usa por Certbot para su mantenimiento interno y en las rutas
de ficheros; no afecta al contenido del certificado en sí mismo. Para ver
los nombres de certificados, ejecute @code{certbot certificates}.

Su valor predeterminado es el primer dominio proporcionado.

@item @code{domains} (predeterminado: @code{()})
El primer dominio proporcionado será el sujeto del nombre común (CN) del
certificado, y todos los dominios serán nombres alternativos (Subject
Alternative Names) en el certificado.

@item @code{challenge} (predeterminado: @code{#f})
El tipo de desafío que debe ejecutar certbot. Si se especifica @code{#f}, el
valor por omisión es desafío HTTP. Si se especifica un valor, el valor por
omisión es el módulo manual (véase @code{authentication-hook},
@code{cleanup-hook} y la documentación en
@url{https://certbot.eff.org/docs/using.html#hooks}), y concede permiso a
Let's Encrypt para registrar la IP pública de la máquina que realiza la
petición.

@item @code{authentication-hook} (predeterminado: @code{#t})
Orden ejecutada en un shell una vez por cada desafío de certificado que debe
contestarse. Durante su ejecución, la variable del shell
@code{$CERTBOT_DOMAIN} contiene el dominio que se está validando,
@code{$CERTBOT_VALIDATION} contiene la cadena de validación y
@code{$CERTBOT_TOKEN} contiene el nombre de fichero del recurso solicitado
cuando se realiza el desafío HTTP-01.

@item @code{cleanup-hook} (predeterminado: @code{#f})
Orden ejecutada en un shell una vez por cada desafío de certificado que haya
sido contestado por @code{auth-hook}. Durante su ejecución, las variables
del shell disponibles en el script @code{auth-hook} todavía están
disponibles, y adicionalmente @code{$CERTBOT_AUTH_OUTPUT} contendrá la
salida estándar que produjo @code{auth-hook}.

@item @code{deploy-hook} (predeterminado: @code{#f})
Orden ejecutada en un shell una vez por cada certificado emitido
satisfactoriamente. Durante su ejecución, la variable del shell
@code{$RENEWED_LINEAGE} apuntará al subdirectorio live de configuración (por
ejemplo, @samp{"/etc/letsencrypt/live/example.com"}) que contiene las nuevas
claves y certificados; la variable del shell @code{$RENEWED_DOMAINS}
contendrá una lista delimitada por espacios de certificados de dominio
renovados (por ejemplo, @samp{"example.com www.example.com"}).

@end table
@end deftp

Para cada configuración @code{certificate-configuration}, el certificado se
almacena @code{/etc/letsencrypt/live/@var{name}/fullchain.pem} y la clave se
almacena en @code{/etc/letsencrypt/live/@var{name}/privkey.pem}.
@node Servicios DNS
@subsection Servicios DNS
@cindex DNS (sistema de nombres de dominio)
@cindex sistema de nombres de dominio (DNS)

El módulo @code{(gnu services dns)} proporciona servicios relacionados con
el @dfn{sistema de nombres de dominio} (DNS). Proporciona un servicio de
servidor para el alojamiento de un servidor @emph{autorizado} DNS para
múltiples zonas, esclavo o maestro. Este servicio usa
@uref{https://www.knot-dns.cz/, Knot DNS}. Y también un servidor de caché y
reenvío de DNS para la red local, que usa
@uref{http://www.thekelleys.org.uk/dnsmasq/doc.html, dnsmasq}.

@subsubheading Servicio Knot

Esta es una configuración de ejemplo de un servidor de autoridad para dos
zonas, una maestra y otra esclava:

@lisp
(define-zone-entries example.org.zone
;; Name TTL Class Type Data
  ("@@"  ""  "IN"  "A"  "127.0.0.1")
  ("@@"  ""  "IN"  "NS" "ns")
  ("ns" ""  "IN"  "A"  "127.0.0.1"))

(define master-zone
  (knot-zone-configuration
    (domain "example.org")
    (zone (zone-file
            (origin "example.org")
            (entries example.org.zone)))))

(define slave-zone
  (knot-zone-configuration
    (domain "plop.org")
    (dnssec-policy "default")
    (master (list "plop-master"))))

(define plop-master
  (knot-remote-configuration
    (id "plop-master")
    (address (list "208.76.58.171"))))

(operating-system
  ;; ...
  (services (cons* (service knot-service-type
                     (knot-configuration
                       (remotes (list plop-master))
                       (zones (list master-zone slave-zone))))
                   ;; ...
                   %base-services)))
@end lisp

@deffn {Variable Scheme} knot-service-type
Este es el tipo de datos para el servidor DNS Knot.

Knot DNS es un servidor de autoridad de DNS, lo que significa que puede
servir múltiples zonas, es decir, nombres de dominio que compraría a una
autoridad de registro de nombres. Este servidor no es un resolvedor, lo que
significa que sólo puede resolver nombres para los que tiene autoridad. Este
servidor puede configurarse para servir zonas como servidor maestro o como
servidor esclavo con una granularidad al nivel de zona. Las zonas esclavas
obtendrán sus datos de los servidores maestros, y las proporcionarán como un
servidor de autoridad. Desde el punto de vista de un resolvedor, no hay
diferencia entre servidor maestro y esclavo.

Los siguientes tipos de datos se usan para configurar el servidor DNS Knot:
@end deffn

@deftp {Tipo de datos} knot-key-configuration
Tipo de datos que representa una clave. Este tipo tiene los siguientes
parámetros:

@table @asis
@item @code{id} (predeterminado: @code{""})
Un identificador para que otros campos de configuración hagan referencia a
esta clave. Los identificadores deben ser únicos y no deben estar vacíos.

@item @code{algorithm} (predeterminado: @code{#f})
El algoritmo usado. Debe seleccionarse entre @code{#f}, @code{'hmac-md5},
@code{'hmac-sha1}, @code{'hmac-sha224}, @code{'hmac-sha256},
@code{'hmac-sha384} y @code{'hmac-sha512}.

@item @code{secret} (predeterminado: @code{""})
La clave secreta en sí.

@end table
@end deftp

@deftp {Tipo de datos} knot-acl-configuration
Tipo de datos que representa una configuración de lista de control de acceso
(ACL). Este tipo tiene los siguientes parámetros:

@table @asis
@item @code{id} (predeterminado: @code{""})
Un identificador para que otros campos de configuración hagan referencia a
esta clave. Los identificadores deben ser únicos y no deben estar vacíos.

@item @code{address} (predeterminada: @code{'()})
Lista ordenada de direcciones IP, subredes o rangos de red representadas
como cadenas. La búsqueda debe corresponder con alguna. El valor vacío
significa que la comprobación de correspondencia de la dirección no es
necesaria.

@item @code{key} (predeterminada: @code{'()})
Lista ordenada de referencias a claves representadas como cadenas. La cadena
debe corresponder con un ID de clave definido en
@code{knot-key-configuration}. Ninguna clave significa que la comprobación
de claves no es necesaria para este control de acceso (ACL).

@item @code{action} (predeterminada: @code{'()})
Lista ordenada de acciones que se permiten o deniegan por este control de
acceso (ACL). Los valores posibles son listas de cero o más elementos entre
@code{'transfer}, @code{'notify} y @code{'update}.

@item @code{deny?} (predeterminado: @code{#f})
Cuando es verdadero, este ACL define restricciones. Las acciones enumeradas
no se permiten. Cuando es falso, las acciones enumeradas se permiten.

@end table
@end deftp

@deftp {Tipo de datos} zone-entry
Tipo de datos que representa una entrada de registro en un fichero de
zona. Este tipo tiene los siguientes parámetros:

@table @asis
@item @code{name} (predeterminado: @code{"@@"})
El nombre del registro.  @code{"@@"} hace referencia al origen de la
zona. Los nombres son relativos al origen de la zona. Por ejemplo, en la
zona @code{example.org}, @code{"ns.example.org"} en realidad hace referencia
a @code{ns.example.org.example.org}. Los nombres que terminan en un punto se
consideran absolutos, lo que significa que @code{"ns.example.org."} hace
referencia a @code{ns.example.org}.

@item @code{ttl} (predeterminado: @code{""})
El tiempo de vida (TTL) de este registro. Si no se proporciona, se usa el
TTL predeterminado.

@item @code{class} (predeterminada: @code{"IN"})
La clase del registro. Actualmente Knot implementa únicamente @code{"IN"} y
parcialmente @code{"CH"}.

@item @code{type} (predeterminado: @code{"A"})
El tipo del registro. Los tipos comunes incluyen A (dirección IPv4), AAAA
(dirección IPv6), NS (servidor de nombres@footnote{Name Server en inglés.})
y MX (pasarela de correo@footnote{Mail eXchange en inglés}). Otros muchos
tipos distintos se encuentran definidos.

@item @code{data} (predeterminados: @code{""})
Los datos que contiene el registro. Por ejemplo, una dirección IP asociada
con un registro A, o un nombre de dominio asociado con un registro
NS. Recuerde que los nombres de dominio son relativos al origen a menos que
terminen con punto.

@end table
@end deftp

@deftp {Tipo de datos} zone-file
Tipo de datos que representa el contenido de un fichero de zona. Este tipo
tiene los siguientes parámetros:

@table @asis
@item @code{entries} (predeterminadas: @code{'()})
La lista de entradas. El registro SOA se genera automáticamente, por lo que
no necesita ponerlo en la lista de entradas. Esta lista probablemente
debería contener una entrada apuntando a su servidor DNS de autoridad. En
vez de usar una lista de entradas directamente, puede usar
@code{define-zone-entries} para definir un objeto que contenga la lista de
entradas más fácilmente, que posteriormente puede proporcionar en el campo
@code{entries} del fichero @code{zone-file}.

@item @code{origin} (predeterminado: @code{""})
El nombre de su zona. Este parámetro no puede estar vacío.

@item @code{ns} (predeterminado: @code{"ns"})
El dominio de su servidor DNS primario de autoridad. El nombre es relativo
al origen, a menos que termine en punto. Es obligatorio que este servidor
DNS primario corresponda con un registro NS en la zona y que esté asociado a
una dirección IP en la lista de entradas.

@item @code{mail} (predeterminado: @code{"hostmaster"})
Dirección de correo a través de la cual la gente puede contactar con usted,
como propietaria de la zona. Se traduce a @code{<mail>@@<origin>}.

@item @code{serial} (predeterminado: @code{1})
Número serie de la zona. Como se usa para tener constancia de los cambios
tanto en servidores esclavos como en resolvedores, es obligatorio que
@emph{nunca} decremente. Incremente su valor siempre que haga cambios en su
zona.

@item @code{refresh} (predeterminado: @code{(* 2 24 3600)})
La frecuencia con la que los servidores esclavos realizarán una
transferencia de zona. Este valor es un número de segundos. Puede calcularse
con multiplicaciones o con @code{(string->duration)}.

@item @code{retry} (predeterminado: @code{(* 15 60)})
El periodo tras el cual un servidor esclavo reintentará el contacto con su
maestro cuando falle al intentarlo la primera vez.

@item @code{expiry} (predeterminado: @code{(* 14 24 3600)})
Tiempo de vida (TTL) predeterminado de los registros. Los registros
existentes se consideran correctos durante al menos este periodo de
tiempo. Tras este periodo, los resolvedores invalidarán su caché y
comprobarán de nuevo que todavía exista.

@item @code{nx} (predeterminado: @code{3600})
Tiempo de vida (TTL) de los registros inexistentes. Este retraso es
habitualmente corto ya que deseará que sus nuevos dominios estén disponibles
para cualquiera rápidamente.

@end table
@end deftp

@deftp {Tipo de datos} knot-remote-configuration
Tipo de datos que representa una configuración remota. Este tipo tiene los
siguientes parámetros:

@table @asis
@item @code{id} (predeterminado: @code{""})
Un identificador para que otros campos de configuración hagan referencia a
esta configuración remota. Los identificadores deben ser únicos y no deben
estar vacíos.

@item @code{address} (predeterminada: @code{'()})
Una lista ordenada de direcciones IP de destino. Las direcciones se prueban
en secuencia. Opcionalmente se puede proporcionar el puerto con el separador
@@. Por ejemplo: @code{(list "1.2.3.4" "2.3.4.5@@53")}. El puerto
predeterminado es el 53.

@item @code{via} (predeterminada: @code{'()})
Una lista ordenada de direcciones IP de fuente. Una lista vacía hará que
Knot seleccione una fuente IP apropiada. Opcionalmente se puede proporcionar
el puerto con el separador @@. De manera predeterminada se selecciona al
azar.

@item @code{key} (predeterminada: @code{#f})
Referencia a una clave, esto es una cadena que contiene el identificador de
una clave definida en el campo @code{knot-key-configuration}.

@end table
@end deftp

@deftp {Tipo de datos} knot-keystore-configuration
Tipo de datos que representa un almacén de claves para alojar claves de
dnssec. Este tipo tiene los siguientes parámetros:

@table @asis
@item @code{id} (predeterminado: @code{""})
El identificador del almacén de claves. No debe estar vacío.

@item @code{backend} (predeterminado: @code{'pem})
El motor en el que se almacenan las claves. Puede ser @code{'pem} o
@code{'pkcs11}.

@item @code{config} (predeterminada: @code{"/var/lib/knot/keys/keys"})
La cadena de configuración del motor.  Un ejemplo para PKCS#11 es:
@code{"pkcs11:token=knot;pin-value=1234
/gnu/store/.../lib/pkcs11/libsofthsm2.so"}. La cadena representa una ruta en
el sistema de ficheros para el motor pem.

@end table
@end deftp

@deftp {Tipo de datos} knot-policy-configuration
Tipo de datos que representa una política de dnssec. El DNS Knot es capaz de
firmar automáticamente sus zonas. Puede generar y gestionar sus claves de
manera automática o usar las claves que usted genere.

Dnssec se implementa habitualmente usando dos claves: una clave para firma
de claves (KSK) que se usa para firmar la segunda, y una clave para firma de
zona (ZSK) que se usa para firmar la zona. Para establecer la confianza, la
KSK necesita estar presente en la zona padre (habitualmente un dominio de
nivel superior). Si su entidad de registro permite dnssec, debe mandarle el
hash de su KSK de manera que puedan añadir un registro DS en su zona. No es
automático y debe realizarse cada vez que cambie su KSK.

La política también define el tiempo de vida de las claves. Habitualmente,
la ZSK puede cambiarse fácilmente y usa funciones criptográficas más débiles
(usa parámetros de menor magnitud) para firmar los registros rápidamente, ya
que cambian habitualmente. No obstante, la KSK requiere interacción manual
con la entidad de registro, por lo que se cambia menos habitualmente y usa
parámetros más fuertes debido a que únicamente firma un registro.

Este tipo tiene los siguientes parámetros:

@table @asis
@item @code{id} (predeterminado: @code{""})
El identificador de la política. No debe estar vacío.

@item @code{keystore} (predeterminado: @code{"default"})
Referencia a un almacén de claves, es decir una cadena que contiene el
identificador de un almacén de claves definido en un campo de
@code{knot-keystore-configuration}. El identificador predeterminado
@code{"default"} implica el uso del almacén de claves predeterminado (una
base de datos kasp que se configura para este servicio).

@item @code{manual?} (predeterminado: @code{#f})
Si la gestión de claves es manual o automática.

@item @code{single-type-signing?} (predeterminado: @code{#f})
Cuando sea @code{#t}, usa el esquema de firma de tipo único (Single-Type
Signing Scheme).

@item @code{algorithm} (predeterminado: @code{"ecdsap256sha256"})
Algoritmo para las claves de firma y las firmas emitidas.

@item @code{ksk-size} (predeterminado: @code{256})
La longitud de la KSK. Fíjese que este valor es correcto para el algoritmo
predeterminado, pero sería inseguro para otros algoritmos.

@item @code{zsk-size} (predeterminado: @code{256})
La longitud de la ZSK. Fíjese que este valor es correcto para el algoritmo
predeterminado, pero sería inseguro para otros algoritmos.

@item @code{dnskey-ttl} (predeterminado: @code{'default})
El valor del tiempo de vida (TTL) de los registros DNSKEY añadidos al
``apex'' de la zona. El valor especial @code{'default} significa el mismo
valor que el TTL del SOA de la zona.

@item @code{zsk-lifetime} (predeterminado: @code{(* 30 24 3600)})
El periodo entre la publicación de la ZSK y el inicio del siguiente ciclo de
renovación.

@item @code{propagation-delay} (predeterminado: @code{(* 24 3600)})
Retraso adicional añadido por cada paso del ciclo de renovación de
clave. Este valor debe ser suficientemente alto para cubrir la propagación
de datos del servidor maestro a todos los esclavos.

@item @code{rrsig-lifetime} (predeterminado: @code{(* 14 24 3600)})
Periodo de validez para las nuevas firmas emitidas.

@item @code{rrsig-refresh} (predeterminado: @code{(* 7 24 3600)})
Periodo de antelación con el que se realiza el refresco de la firma antes de
una expiración de la misma.

@item @code{nsec3?} (predeterminado: @code{#f})
Si es @code{#t}, se usa NSEC3 en vez de NSEC.

@item @code{nsec3-iterations} (predeterminado: @code{5})
Número de ejecuciones adicionales de la operación de hash.

@item @code{nsec3-salt-length} (predeterminado: @code{8})
La longitud del campo ``salt'' en octetos, que se añade al nombre de la
propietaria original antes de ejecutar la operación de hash.

@item @code{nsec3-salt-lifetime} (predeterminado: @code{(* 30 24 3600)})
El periodo de validez de los campos ``salt'' que se generen.

@end table
@end deftp

@deftp {Tipo de datos} knot-zone-configuration
Tipo de datos que representa una zona ofrecida por Knot. Este tipo tiene los
siguientes parámetros:

@table @asis
@item @code{domain} (predeterminado: @code{""})
El dominio ofrecido con esta configuración. No debe estar vacío.

@item @code{file} (predeterminado: @code{""})
El fichero donde se almacena esta zona. Este parámetro se ignora para zonas
maestras. Vacío significa la ruta predeterminada que depende del nombre del
dominio.

@item @code{zone} (predeterminado: @code{(zone-file)})
El contenido del fichero de zona. Este parámetro se ignora para zonas
esclavas. Debe contener un registro de fichero de zona.

@item @code{master} (predeterminado: @code{'()})
Lista de maestros remotos. Cuando está vacía, esta zona es maestra. Cuando
tiene contenido, esta zona es esclava. Es una lista de identificadores
remotos.

@item @code{ddns-master} (predeterminado: @code{#f})
Maestro principal. Cuando está vacío, apunta de manera predeterminada al
primer maestro en la lista de maestros.

@item @code{notify} (predeterminado: @code{'()})
Una lista de identificadores remotos de esclavos.

@item @code{acl} (predeterminado: @code{'()})
Lista de identificadores acl.

@item @code{semantic-checks?} (predeterminado: @code{#f})
Cuando es verdadero, añade más comprobaciones semánticas a la zona.

@item @code{disable-any?} (predeterminado: @code{#f})
Cuando es verdadero, no permite consultas de tipo ANY.

@item @code{zonefile-sync} (predeterminado: @code{0})
El retraso entre una modificación en memoria y en disco. 0 significa
sincronización inmediata.

@item @code{zonefile-load} (predeterminado: @code{#f})
La forma en la que los contenidos del fichero de zona se aplican durante la
carga de la zona. Los valores posibles son:

@itemize
@item @code{#f} para obtener el valor predeterminado de Knot,
@item @code{'none} para no usar el fichero de zona en absoluto,
@item @code{'difference} para calcular la diferencia entre los contenidos disponibles
actualmente y los contenidos de la zona y los aplica a los contenidos
actuales de la zona actual,
@item @code{'difference-no-serial} es igual que @code{'difference}, pero
ignora el código serie SOA en el fichero de zona, mientras que el servidor
se hace cargo de él de manera automática.
@item @code{'whole} para cargar los contenidos de la zona del fichero de zona.
@end itemize

@item @code{journal-content} (predeterminado: @code{'()})
La forma en la que se usa el diario para almacenar la zona y sus
cambios. Los posibles valores son @code{'none} para no usarlo en absoluto,
@code{'changes} para almacenar los cambios y @code{'all} para almacenar los
contenidos. @code{#f} proporciona un valor a esta opción, por lo que se usa
el valor predeterminado de Knot.

@item @code{max-journal-usage} (predeterminado: @code{#f})
Tamaño máximo del diario en disco. @code{#f} no proporciona un valor a esta
opción, por lo que se usa el valor predeterminado de Knot.

@item @code{max-journal-depth} (predeterminado: @code{#f})
Tamaño máximo de la historia. @code{#f} proporciona un valor a esta opción,
por lo que se usa el valor predeterminado de Knot.

@item @code{max-zone-size} (predeterminado: @code{#f})
Tamaño máximo del fichero de zona. Este límite se usa para transferencias
entrantes y actualizaciones. @code{#f} no proporciona un valor a esta
opción, por lo que se usa el valor predeterminado de Knot.

@item @code{dnssec-policy} (predeterminado: @code{#f})
Una referencia a un registro de @code{knot-policy-configuration}, o el
nombre especial @code{"default"}. Si el valor es @code{#f}, no se realiza
firma dnssec en esta zona.

@item @code{serial-policy} (predeterminado: @code{'increment})
Una política entre @code{'increment} y @code{'unixtime}.

@end table
@end deftp

@deftp {Tipo de datos} knot-configuration
Tipo de datos que representa la configuración Knot. Este tipo tiene los
siguientes parámetros:

@table @asis
@item @code{knot} (predeterminado: @code{knot})
El paquete Knot.

@item @code{run-directory} (predeterminado: @code{"/var/run/knot"})
El directorio de ejecución. Este directorio se usará para los ficheros de
PID y de sockets.

@item @code{includes} (predeterminada: @code{'()})
Una lista de cadenas u objetos ``tipo-fichero'' que denota otros ficheros
que deben incluirse al inicio del fichero de configuración.

@cindex secretos, servicio Knot
Puede usarse para gestionar secretos en un canal separado. Por ejemplo, las
claves secretas pueden almacenarse en un fichero fuera de banda no
gestionado por Guix, y por tanto no visible en @file{/gnu/store}---por
ejemplo, puede almacenar su configuración de clave secreta en
@file{/etc/knot/secrets.conf} e incluir este fichero en la lista
@code{includes}.

Se puede generar una clave secreta tsig (para nsupdate y transferencias de
zona) con la orden keymgr del paquete knot. Tenga en cuenta que el paquete
no se instala automáticamente con el servicio. El ejemplo siguiente muestra
como generar una clave tsig nueva:

@example
keymgr -t misecreto > /etc/knot/secrets.conf
chmod 600 /etc/knot/secrets.conf
@end example

Tenga también en cuenta que la clave generada se llamará @var{misecreto}, de
modo que ese nombre es el que debe usarse en el campo @var{key} del registro
@code{knot-acl-configuration} y en otros lugares que hagan referencia a esa
clave.

También puede usarse para añadir configuración no implementada por esta
interfaz.

@item @code{listen-v4} (predeterminada: @code{"0.0.0.0"})
La dirección IP en la que escuchar.

@item @code{listen-v6} (predeterminada: @code{"::"})
La dirección IP en la que escuchar.

@item @code{listen-port} (predeterminado: @code{53})
El puerto en el que escuchar.

@item @code{keys} (predeterminada: @code{'()})
La lista de configuraciones knot-key-configuration usadas por esta
configuración.

@item @code{acls} (predeterminado: @code{'()})
La lista de configuraciones knot-acl-configuration usadas por esta
configuración.

@item @code{remotes} (predeterminada: @code{'()})
La lista de configuraciones knot-remote-configuration usadas por esta
configuración.

@item @code{zones} (predeterminada: @code{'()})
La lista de configuraciones knot-zone-configuration usadas por esta
configuración.

@end table
@end deftp

@subsubheading Servicio de resolución de Knot

@deffn {Variable Scheme} knot-resolver-service-type
El tipo del servicio de resolución de knot, cuyo valor debe ser un objeto
@code{knot-resolver-configuration} como en este ejemplo:

@lisp
(service knot-resolver-service-type
         (knot-resolver-configuration
           (kresd-config-file (plain-file "kresd.conf" "
net.listen('192.168.0.1', 5353)
user('knot-resolver', 'knot-resolver')
modules = @{ 'hints > iterate', 'stats', 'predict' @}
cache.size = 100 * MB
"))))
@end lisp

Para más información, véase su
@url{https://knot-resolver.readthedocs.org/en/stable/daemon.html#configuration,
manual}.
@end deffn

@deftp {Tipo de datos} knot-resolver-configuration
Tipo de datos que representa la configuración de knot-resolver.

@table @asis
@item @code{package} (predeterminado: @var{knot-resolver})
El objeto paquete de la resolución de DNS de knot.

@item @code{kresd-config-file} (predeterminado: %kresd.conf)
Objeto ``tipo-fichero'' con el fichero de configuración de kresd usado, de
manera predeterminada escucha en @code{127.0.0.1} y @code{::1}.

@item @code{garbage-collection-interval} (predeterminado: 1000)
Número de milisegundos tras los que @code{kres-cache-gc} realiza una
limpieza periódica de la caché.

@end table
@end deftp


@subsubheading Servicio Dnsmasq

@deffn {Variable Scheme} dnsmasq-service-type
Es el tipo del servicio dnsmasq, cuyo valor debe ser un objeto
@code{dnsmasq-configuration} como en este ejemplo:

@lisp
(service dnsmasq-service-type
         (dnsmasq-configuration
           (no-resolv? #t)
           (servers '("192.168.1.1"))))
@end lisp
@end deffn

@deftp {Tipo de datos} dnsmasq-configuration
Tipo de datos que representa la configuración de dnsmasq.

@table @asis
@item @code{package} (predeterminado: @var{dnsmasq})
El objeto paquete del servidor dnsmasq.

@item @code{no-hosts?} (predeterminado: @code{#f})
Cuando es verdadero, no lee los nombres de máquina en /etc/hosts.

@item @code{port} (predeterminado: @code{53})
El puerto sobre el que se escucha. Proporcionar el valor cero deshabilita
las respuestas DNS completamente, dejando las funciones DHCP y/o TFTP
únicamente.

@item @code{local-service?} (predeterminado: @code{#t})
Acepta peticiones DNS únicamente de máquinas cuya dirección esté en una
subred local, es decir, subred para la que existe una interfaz en el
servidor.

@item @code{listen-addresses} (predeterminadas: @code{'()})
Escucha en las direcciones IP proporcionadas.

@item @code{resolv-file} (predeterminado: @code{"/etc/resolv.conf"})
Fichero en el que se obtienen las direcciones IP de los servidores de
nombres desde los que se obtienen datos.

@item @code{no-resolv?} (predeterminado: @code{#f})
Cuando tiene valor verdadero, no se lee @var{resolv-file}.

@item @code{servers} (predeterminados: @code{'()})
Especifica directamente la dirección IP de los servidores proveedores.

@item @code{addresses} (default: @code{'()})
For each entry, specify an IP address to return for any host in the given
domains.  Queries in the domains are never forwarded and always replied to
with the specified IP address.

This is useful for redirecting hosts locally, for example:

@lisp
(service dnsmasq-service-type
         (dnsmasq-configuration
           (addresses
             '(; Redirect to a local web-server.
               "/example.org/127.0.0.1"
               ; Redirect subdomain to a specific IP.
               "/subdomain.example.org/192.168.1.42"))))
@end lisp

Note that rules in @file{/etc/hosts} take precedence over this.

@item @code{cache-size} (predeterminado: @code{150})
Establece el tamaño de la caché de dnsmasq. Proporcionar el valor cero
desactiva el almacenamiento en caché.

@item @code{negative-cache?} (predeterminado: @code{#t})
Cuando es falso, desactiva la caché negativa.

@end table
@end deftp

@subsubheading Servicio ddclient

@cindex ddclient
El servicio de ddclient descrito a continuación ejecuta el daemon ddclient,
que se encarga de actualizar automáticamente entradas DNS para proveedores
de servicio como @uref{https://dyn.com/dns/, Dyn}.

El ejemplo siguiente muestra como instanciar el servicio con su
configuración predeterminada.

@lisp
(service ddclient-service-type)
@end lisp

Note that ddclient needs to access credentials that are stored in a
@dfn{secret file}, by default @file{/etc/ddclient/secrets} (see
@code{secret-file} below).  You are expected to create this file manually,
in an ``out-of-band'' fashion (you @emph{could} make this file part of the
service configuration, for instance by using @code{plain-file}, but it will
be world-readable @i{via} @file{/gnu/store}).  See the examples in the
@file{share/ddclient} directory of the @code{ddclient} package.

@c %start of fragment

Los campos disponibles de @code{ddclient-configuration} son:

@deftypevr {parámetro de @code{ddclient-configuration}} package ddclient
El paquete ddclient.

@end deftypevr

@deftypevr {parámetro de @code{ddclient-configuration}} integer daemon
Periodo tras el cual ddclient reintentará la comprobación de IP y de nombre
de dominio.

El valor predeterminado es @samp{300}.

@end deftypevr

@deftypevr {parámetro de @code{ddclient-configuration}} boolean syslog
Usa syslog para la salida.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{ddclient-configuration}} string mail
Envía por correo a la usuaria.

El valor predeterminado es @samp{"root"}.

@end deftypevr

@deftypevr {parámetro de @code{ddclient-configuration}} string mail-failure
Envía por correo las actualizaciones fallidas a la usuaria.

El valor predeterminado es @samp{"root"}.

@end deftypevr

@deftypevr {parámetro de @code{ddclient-configuration}} string pid
El fichero de PID de ddclient.

El valor predeterminado es @samp{"/var/run/ddclient/ddclient.pid"}.

@end deftypevr

@deftypevr {parámetro de @code{ddclient-configuration}} boolean ssl
Permite el uso de SSL.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{ddclient-configuration}} string user
Especifica el nombre de usuaria o ID usado para la ejecución del programa
ddclient.

El valor predeterminado es @samp{"ddclient"}.

@end deftypevr

@deftypevr {parámetro de @code{ddclient-configuration}} string group
Grupo de la usuaria que ejecutará el servidor ddclient.

El valor predeterminado es @samp{"ddclient"}.

@end deftypevr

@deftypevr {parámetro de @code{ddclient-configuration}} string secret-file
Fichero secreto que se añadirá al final del fichero
@file{ddclient.conf}. Este fichero contiene las credenciales usadas por
ddclient. Se espera que usted lo cree manualmente.

El valor predeterminado es @samp{"/etc/ddclient/secrets.conf"}.

@end deftypevr

@deftypevr {parámetro de @code{ddclient-configuration}} lista extra-options
Opciones adicionales a agregar al final del fichero @file{ddclient.conf}.

El valor predeterminado es @samp{()}.

@end deftypevr


@c %end of fragment


@node Servicios VPN
@subsection Servicios VPN
@cindex VPN (red privada virtual)
@cindex red privada virtual (VPN)

El módulo @code{(gnu services vpn)} proporciona servicios relacionados con
las @dfn{redes privadas virtuales} (VPN). Proporciona un servicio
@emph{cliente} para que su máquina se conecte a una VPN, y un servicio
@emph{servidor} para que su máquina aloje una VPN. Ambos servicios usan
@uref{https://openvpn.net/, OpenVPN}.

@deffn {Procedimiento Scheme} openvpn-client-service @
       [#:config (openvpn-client-configuration)]

Devuelve un servicio que ejecuta @command{openvpn}, un daemon VPN, como
cliente.
@end deffn

@deffn {Procedimiento Scheme} openvpn-server-service @
       [#:config (openvpn-server-configuration)]

Devuelve un servicio que ejecuta @command{openvpn}, un daemon VPN, como
servidor.

Pueden ejecutarse simultáneamente.
@end deffn

@c %automatically generated documentation

Los campos disponibles de @code{openvpn-client-configuration} son:

@deftypevr {parámetro de @code{openvpn-client-configuration}} package openvpn
El paquete OpenVPN.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} string pid-file
El fichero de pid de OpenVPN.

El valor predeterminado es @samp{"/var/run/openvpn/openvpn.pid"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} protocolo proto
El protocolo (UDP o TCP) usado para la apertura del canal entre clientes y
servidores.

El valor predeterminado es @samp{udp}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} dispositivo dev
El tipo de dispositivo usado para representar la conexión VPN.

El valor predeterminado es @samp{tun}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} string ca
La autoridad de certificación contra la que se comprueban las conexiones.

El valor predeterminado es @samp{"/etc/openvpn/ca.crt"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} string cert
El certificado de la máquina en la que se ejecuta el daemon. Debe estar
firmado por la autoridad proporcionada en @code{ca}.

El valor predeterminado es @samp{"/etc/openvpn/client.crt"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} string key
La clave de la máquina en la que se ejecuta el daemon. Debe ser la clave
cuyo certificado es @code{cert}.

El valor predeterminado es @samp{"/etc/openvpn/client.key"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} boolean comp-lzo?
Determina si se usa el algoritmo de compresión lzo.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} boolean persist-key?
No vuelve a leer los ficheros de claves tras la señal SIGUSR1 o
--ping-restart.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} boolean persist-tun?
No cierra y reabre el dispositivo TUN/TAP o ejecuta los guiones de parada e
inicio tras el reinicio provocado por SIGUSR1 o --ping-restart.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} boolean fast-io?
(Experimental) Optimiza las escrituras de E/S de TUN/TAP/UDP evitando llamar
poll/epoll/select antes de la operación de escritura (@code{write}).

El valor predeterminado es @samp{#f}
@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} number verbosity
Nivel de detalle en los mensajes.

El valor predeterminado es @samp{3}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} cliente-tls-auth tls-auth
Añade una capa adicional de verificación HMAC sobre el canal de control TLS
para protección contra ataques de denegación de servicio (DoS).

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} maybe-string auth-user-pass
Activa la identificación con el servidor mediante el uso de
usuaria/contraseña. La opción es un fichero que contiene en dos líneas el
nombre de usuaria y la contraseña. No use un objeto tipo-fichero, ya que se
añadiría al almacén y sería legible para cualquier usuaria.

El valor predeterminado es @samp{'disabled}.
@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} key-usage verify-key-usage?
Si se comprueba que el certificado del servidor tenga la extensión de uso de
servidor.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} bind bind?
Asociación a un número específico de puerto local.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-client-configuration}} resolv-retry resolv-retry?
Reintentos de resolución de la dirección del servidor.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro @code{openvpn-client-configuration}} lista-openvpn-remote remote
Una lista de servidores remotos a los que conectarse.

El valor predeterminado es @samp{()}.

Los campos disponibles de @code{openvpn-remote-configuration} son:

@deftypevr {parámetro de @code{openvpn-remote-configuration}} string name
Nombre del servidor.

El valor predeterminado es @samp{"my-server"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-remote-configuration}} number port
Puerto en el que escucha el servidor.

El valor predeterminado es @samp{1194}.

@end deftypevr

@end deftypevr
@c %end of automatic openvpn-client documentation

@c %automatically generated documentation

Los campos disponibles de @code{openvpn-server-configuration} son:

@deftypevr {parámetro de @code{openvpn-server-configuration}} package openvpn
El paquete OpenVPN.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} string pid-file
El fichero de pid de OpenVPN.

El valor predeterminado es @samp{"/var/run/openvpn/openvpn.pid"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} protocolo proto
El protocolo (UDP o TCP) usado para la apertura del canal entre clientes y
servidores.

El valor predeterminado es @samp{udp}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} dispositivo dev
El tipo de dispositivo usado para representar la conexión VPN.

El valor predeterminado es @samp{tun}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} string ca
La autoridad de certificación contra la que se comprueban las conexiones.

El valor predeterminado es @samp{"/etc/openvpn/ca.crt"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} string cert
El certificado de la máquina en la que se ejecuta el daemon. Debe estar
firmado por la autoridad proporcionada en @code{ca}.

El valor predeterminado es @samp{"/etc/openvpn/client.crt"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} string key
La clave de la máquina en la que se ejecuta el daemon. Debe ser la clave
cuyo certificado es @code{cert}.

El valor predeterminado es @samp{"/etc/openvpn/client.key"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} boolean comp-lzo?
Determina si se usa el algoritmo de compresión lzo.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} boolean persist-key?
No vuelve a leer los ficheros de claves tras la señal SIGUSR1 o
--ping-restart.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} boolean persist-tun?
No cierra y reabre el dispositivo TUN/TAP o ejecuta los guiones de parada e
inicio tras el reinicio provocado por SIGUSR1 o --ping-restart.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} boolean fast-io?
(Experimental) Optimiza las escrituras de E/S de TUN/TAP/UDP evitando llamar
poll/epoll/select antes de la operación de escritura (@code{write}).

El valor predeterminado es @samp{#f}
@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} number verbosity
Nivel de detalle en los mensajes.

El valor predeterminado es @samp{3}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} servidor-tls-auth tls-auth
Añade una capa adicional de verificación HMAC sobre el canal de control TLS
para protección contra ataques de denegación de servicio (DoS).

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} number port
Especifica el número de puerto en el que escucha el servidor.

El valor predeterminado es @samp{1194}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} ip-máscara server
Una IP y una máscara que especifiquen la subred dentro de la red virtual.

El valor predeterminado es @samp{"10.8.0.0 255.255.255.0"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} cidr6 server-ipv6
La especificación de una subred IPv6 dentro de la red virtual en notación
CIDR.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} string dh
El fichero de parámetros Diffie-Hellman.

El valor predeterminado es @samp{"/etc/openvpn/dh2048.pem"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} string ifconfig-pool-persist
El fichero que registra IP de clientes.

El valor predeterminado es @samp{"/etc/openvpn/ipp.txt"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} gateway redirect-gateway?
Cuando sea verdadero, el servidor actuará como una pasarela para sus
clientes.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} boolean client-to-client?
Cuando es verdadero, se permite la comunicación entre clientes dentro de la
VPN.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} keepalive keepalive
Hace que se envíen mensajes tipo-ping en ambas direcciones a través del
enlace de modo que cada extremo conozca si el otro extremo no está
disponible. @code{keepalive} necesita un par. El primer elemento es el
periodo de envío de ping, y el segundo elemento es el plazo máximo antes de
considerar que el otro extremo no está disponible.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} number max-clients
Número máximo de clientes.

El valor predeterminado es @samp{100}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} string status
El fichero de estado. Este fichero muestra un pequeño informe sobre la
conexión actual. Su contenido se borra y se reescribe cada minuto.

El valor predeterminado es @samp{"/var/run/openvpn/status"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-server-configuration}} lista-openvpn-ccd client-config-dir
Lista de configuración para algunos clientes.

El valor predeterminado es @samp{()}.

Los campos disponibles de @code{openvpn-ccd-configuration} son:

@deftypevr {parámetro de @code{openvpn-ccd-configuration}} string name
Nombre del cliente.

El valor predeterminado es @samp{"client"}.

@end deftypevr

@deftypevr {parámetro de @code{openvpn-ccd-configuration}} ip-máscara iroute
Red propia del cliente

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{openvpn-ccd-configuration}} ip-máscara ifconfig-push
IP de la VPN del cliente.

El valor predeterminado es @samp{#f}

@end deftypevr

@end deftypevr


@c %end of automatic openvpn-server documentation


@node Sistema de ficheros en red
@subsection Sistema de ficheros en red
@cindex NFS

El módulo @code{(gnu services nfs)} proporciona los siguientes servicios,
que se usan habitualmente en relación con el montado o la exportación de
árboles de directorios como @dfn{sistemas de ficheros en red} (NFS).

Mientras que es posible usar los componentes individuales de forma conjunta
para proporcionar un servicio del sistema de ficheros en red NFS,
recomendamos la configuración de un servidor NFS mediante
@code{nfs-service-type}.

@subsubheading Servicio NFS
@cindex NFS, servidor

El servicio NFS se hace cargo de configurar todos los servicios de
componentes de NFS, la configuración del núcleo de sistemas de ficheros e
instala los ficheros de configuración en las rutas que NFS espera.

@defvr {Variable Scheme} nfs-service-type
Este es el tipo de datos para un servidor NFS completo.
@end defvr

@deftp {Tipo de datos} nfs-configuration
Este tipo de datos representa la configuración del servicio NFS y todos sus
subsistemas.

Tiene los siguientes parámetros:
@table @asis
@item @code{nfs-utils} (predeterminado: @code{nfs-utils})
El paquete nfs-utils usado.

@item @code{nfs-versions} (predeterminadas: @code{'("4.2" "4.1" "4.0")})
Si se proporciona como valor una lista de cadenas, el daemon
@command{rpc.nfsd} se limitará a la implementación de las versiones del
protocolo NFS proporcionadas.

@item @code{exports} (predeterminada: @code{'()})
Una lista de directorios que el servidor NFS debe exportar. Cada entrada es
una lista que consiste en dos elementos: un nombre de directorio y una
cadena que contiene todas las opciones. Este es un ejemplo en el que el
directorio @file{/exportado} se proporciona a todos los clientes NFS en modo
de solo-lectura:

@lisp
(nfs-configuration
 (exports
  '(("/exportado"
     "*(ro,insecure,no_subtree_check,crossmnt,fsid=0)"))))
@end lisp

@item @code{rpcmountd-port} (predeterminado: @code{#f})
El puerto de red que el daemon @command{rpc.mountd} debe usar.

@item @code{rpcstatd-port} (predeterminado: @code{#f})
El puerto de red que el daemon @command{rpc.statd} debe usar.

@item @code{rpcbind} (predeterminado: @code{rpcbind})
El paquete rpcbind usado.

@item @code{idmap-domain} (predeterminado: @code{"localdomain"})
El nombre de dominio local de NFSv4.

@item @code{nfsd-port} (predeterminado: @code{2049})
El puerto de red que el daemon @command{nfsd} debe usar.

@item @code{nfsd-threads} (predeterminado: @code{8})
Número de hilos usados en el daemon @command{nfsd}.

@item @code{pipefs-directory} (predeterminado: @code{"/var/lib/nfs/rpc_pipefs"})
El directorio donde el sistema de ficheros pipefs debe montarse.

@item @code{debug} (predeterminada: @code{'()"})
Una lista de subsistemas para los cuales debe activarse la salida de
depuración. Es una lista de símbolos. Cualquiera de estos símbolos son
válidos: @code{nfsd}, @code{nfs}, @code{rpc}, @code{idmap}, @code{statd} o
@code{mountd}.
@end table
@end deftp

Si no necesita un servicio NFS completo o prefiere construirlo por su cuenta
puede usar los componentes individuales que se documentan a continuación.

@subsubheading Servicio RPC Bind
@cindex rpcbind

El servicio RPC Bind proporciona una forma de asociar números de programa
con direcciones universales. Muchos servicios relacionados con NFS usan esta
característica. De ahí que se inicie automáticamente cuando un servicio
dependiente se inicia.

@defvr {Variable Scheme} rpcbind-service-type
Un tipo de servicio para el daemon de asignación de puertos RPC.
@end defvr


@deftp {Tipo de datos} rpcbind-configuration
Tipo de datos que representa la configuración del servicio RPC Bind. Este
tipo tiene los siguientes parámetros:
@table @asis
@item @code{rpcbind} (predeterminado: @code{rpcbind})
El paquete rpcbind usado.

@item @code{warm-start?} (predeterminado: @code{#t})
Si este parámetro es @code{#t}, el daemon leerá el fichero de estado durante
el arranche, por tanto recargando la información del estado almacenada por
la instancia previa.
@end table
@end deftp


@subsubheading Pseudo-sistema de ficheros pipefs
@cindex pipefs
@cindex rpc_pipefs

El sistema de ficheros pipefs se usa para transferir datos relacionados con
NFS entre el núcleo y los programas de espacio de usuaria.

@defvr {Variable Scheme} pipefs-service-type
Un tipo de servicio para el pseudo-sistema de ficheros pipefs.
@end defvr

@deftp {Tipo de datos} pipefs-configuration
Tipo de datos que representa la configuración del servicio del
pseudo-sistema de ficheros pipefs. Este tipo tiene los siguientes
parámetros:
@table @asis
@item @code{mount-point} (predeterminado: @code{"/var/lib/nfs/rpc_pipefs"})
El directorio al que se debe asociar el sistema de ficheros.
@end table
@end deftp


@subsubheading Servicio del daemon GSS
@cindex GSSD
@cindex GSS
@cindex sistema de seguridad global (GSS)

El daemon @dfn{sistema de seguridad global} (GSS) proporciona fuertes
garantías de seguridad para protocolos basados en RPC. Antes de intercambiar
peticiones RPC el cliente debe establecer un contexto de
seguridad. Habitualmente esto se lleva a cabo con el uso de la orden
@command{kinit}o automáticamente durante el ingreso al sistema mediante el
uso de servicios PAM (@pxref{Servicios Kerberos}).

@defvr {Variable Scheme} gss-service-type
Un tipo de servicio para el daemon del sistema de seguridad global (GSS).
@end defvr

@deftp {Tipo de datos} gss-configuration
Tipo de datos que representa la configuración del servicio del daemon
GSS. Este tipo tiene los siguientes parámetros:
@table @asis
@item @code{nfs-utils} (predeterminado: @code{nfs-utils})
Paquete en el que se encuentra la orden @command{rpc.gssd}.

@item @code{pipefs-directory} (predeterminado: @code{"/var/lib/nfs/rpc_pipefs"})
El directorio donde el sistema de ficheros pipefs debe montarse.

@end table
@end deftp


@subsubheading Servicio del daemon IDMAP
@cindex idmapd
@cindex servicio de asociación de nombres

El servicio del daemon idmap proporciona una asociación entre
identificadores de usuaria y nombres de usuaria. Habitualmente es necesario
para acceder sistemas de ficheros montados con NFSv4.

@defvr {Variable Scheme} idmap-service-type
Un tipo de servicio para el daemon de asociación de identidades (IDMAP).
@end defvr

@deftp {Tipo de datos} idmap-configuration
Tipo de datos que representa la configuración del servicio del daemon
IDMAP. Este tipo tiene los siguientes parámetros:
@table @asis
@item @code{nfs-utils} (predeterminado: @code{nfs-utils})
Paquete en el que se encuentra la orden @command{rpc.idmapd}.

@item @code{pipefs-directory} (predeterminado: @code{"/var/lib/nfs/rpc_pipefs"})
El directorio donde el sistema de ficheros pipefs debe montarse.

@item @code{domain} (predeterminado: @code{#f})
El nombre de dominio local de NFSv4. Debe ser una cadena o @code{#f}. Si es
@code{#f} el daemon usará el nombre de dominio totalmente cualificado de la
máquina.

@item @code{verbosity} (predeterminado: @code{0})
El nivel de información de los mensajes del daemon.

@end table
@end deftp

@node Integración continua
@subsection Integración continua

@cindex integración continua
@uref{https://git.savannah.gnu.org/cgit/guix/guix-cuirass.git, Cuirass} es
una herramienta de integración continua para Guix. Puede usarse tanto para
el desarrollo como para proporcionar sustituciones a otras personas
(@pxref{Sustituciones}).

El módulo @code{(gnu services cuirass)} proporciona el siguiente servicio.

@defvr {Procedimiento Scheme} cuirass-service-type
El tipo del servicio Cuirass. Su valor debe ser un objeto
@code{cuirass-configuration}, como se describe a continuación.
@end defvr

To add build jobs, you have to set the @code{specifications} field of the
configuration.  Here is an example of a service that polls the Guix
repository and builds the packages from a manifest.  Some of the packages
are defined in the @code{"custom-packages"} input, which is the equivalent
of @env{GUIX_PACKAGE_PATH}.

@lisp
(define %especificacion-de-cuirass
  #~(list
     '((#:name . "mi-manifiesto")
       (#:load-path-inputs . ("guix"))
       (#:package-path-inputs . ("paquetes-personalizados"))
       (#:proc-input . "guix")
       (#:proc-file . "build-aux/cuirass/gnu-system.scm")
       (#:proc . cuirass-jobs)
       (#:proc-args . ((subset . "manifests")
                       (systems . ("x86_64-linux"))
                       (manifests . (("config" . "guix/manifest.scm")))))
       (#:inputs . (((#:name . "guix")
                     (#:url . "git://git.savannah.gnu.org/guix.git")
                     (#:load-path . ".")
                     (#:branch . "master")
                     (#:no-compile? . #t))
                    ((#:name . "config")
                     (#:url . "https://git.example.org/config.git")
                     (#:load-path . ".")
                     (#:branch . "master")
                     (#:no-compile? . #t))
                    ((#:name . "paquetes-personalizados")
                     (#:url . "https://git.example.org/paquetes-personalizados.git")
                     (#:load-path . ".")
                     (#:branch . "master")
                     (#:no-compile? . #t)))))))

(service cuirass-service-type
         (cuirass-configuration
          (specifications %especificacion-de-cuirass)))
@end lisp

Mientras que la información de los trabajos de construcción se encuentra
directamente en las especificaciones, la configuración global del proceso
@command{cuirass} está accesible en otros campos de
@code{cuirass-configuration}.

@deftp {Tipo de datos} cuirass-configuration
Tipo de datos que representa la configuración de Cuirass.

@table @asis
@item @code{log-file} (predeterminado: @code{"/var/log/cuirass.log"})
Localización del fichero de registro.

@item @code{web-log-file} (predeterminado: @code{"/var/log/cuirass-web.log"})
Localización del fichero de registro usado por la interfaz web.

@item @code{cache-directory} (predeterminado: @code{"/var/cache/cuirass"})
Localización de la caché del repositorio.

@item @code{user} (predeterminado: @code{"cuirass"})
Propietaria del proceso @code{cuirass}.

@item @code{group} (predeterminado: @code{"cuirass"})
Grupo propietario del proceso @code{cuirass}.

@item @code{interval} (predeterminado: @code{60})
Número de segundos entre las consulta de repositorios seguida de los
trabajos de Cuirass.

@item @code{database} (predeterminada: @code{"/var/lib/cuirass/cuirass.db"})
Ruta de la base de datos sqlite que contiene los resultados de construcción
y las especificaciones añadidas previamente.

@item @code{ttl} (predeterminado: @code{(* 30 24 3600)})
Especifica el tiempo de vida (TTL) en segundos de las raíces del recolector
de basura que se registran con resultados de construcciones. Esto significa
que los resultados de las construcciones se protegen de la recolección de
basura al menos @var{ttl} segundos.

@item @code{port} (predeterminado: @code{8081})
Número de puerto usado por el servidor HTTP.

@item @code{host} (predeterminado: @code{"localhost"})
Escucha en la interfaz de red de la dirección @var{host}. El comportamiento
predeterminado es aceptar conexiones desde la red local.

@item @code{specifications} (predeterminada: @code{#~'()})
Una expresión-G (@pxref{Expresiones-G}) que evalúa a una lista de
especificaciones, donde una especificación es una lista asociativa
(@pxref{Associations Lists,,, guile, GNU Guile Reference Manual}) cuyas
claves son palabras claves (@code{#:ejemplo-de-palabra-clave}) como se
muestra en el ejemplo anterior.

@item @code{use-substitutes?} (predeterminado: @code{#f})
Permite el uso de sustituciones para evitar la construcción desde las
fuentes de todas las dependencias de un trabajo.

@item @code{one-shot?} (predeterminado: @code{#f})
Evalúa las especificaciones y construye las derivaciones solo una vez.

@item @code{fallback?} (predeterminado: @code{#f})
Cuando la sustitución de un binario preconstruido falle, se intentará la
construcción local de los paquetes.

@item @code{extra-options} (predeterminadas: @code{'()})
Opciones adicionales proporcionadas a los procesos de Cuirass.

@item @code{cuirass} (predeterminado: @code{cuirass})
El paquete Cuirass usado.
@end table
@end deftp

@node Servicios de gestión de energía
@subsection Servicios de gestión de energía

@cindex tlp
@cindex gestión de energía con TLP
@subsubheading Daemon TLP

El módulo @code{(gnu services pm)} proporciona una definición de servicio
Guix para la herramienta de gestión de energía de Linux TLP.

TLP activa varios modos de ahorro de energía en el núcleo y en espacio de
usuaria. Al contrario que @code{upower-service}, no es una herramienta de
monitorización pasiva, puesto que aplicará una nueva configuración
personalizada cada vez que se detecte una nueva fuente de
energía/alimentación. Puede encontrar más información en
@uref{https://linrunner.de/en/tlp/tlp.html, la página de TLP}.

@deffn {Variable Scheme} tlp-service-type
El tipo de servicio para la herramienta TLP. Su valor debe ser una
configuración de TLP válida (véase a continuación). Para usar la
configuración predeterminada, simplemente escriba:
@lisp
(service tlp-service-type)
@end lisp
@end deffn

De manera predeterminada TLP no necesita mucha configuración, pero los
parámetros de TLP se pueden ajustar mediante el uso de
@code{tlp-configuration}.

El tipo de cada parámetro antecede la definición del mismo; por ejemplo,
@samp{boolean foo} indica que el parámetro @code{foo} debe especificarse
como un valor lógico booleano. Los tipos que empiezan con @code{maybe-}
indican parámetros que no aparecerán en el fichero de configuración de TLP
cuando su valor sea @code{'disabled}.

@c The following documentation was initially generated by
@c (generate-tlp-documentation) in (gnu services pm).  Manually maintained
@c documentation is better, so we shouldn't hesitate to edit below as
@c needed.  However if the change you want to make to this documentation
@c can be done in an automated way, it's probably easier to change
@c (generate-documentation) than to make it below and have to deal with
@c the churn as TLP updates.

Los campos disponibles de @code{tlp-configuration} son:

@deftypevr {parámetro de @code{tlp-configuration}} package tlp
El paquete TLP.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} boolean tlp-enable?
Proporcione un valor verdadero si desea activar TLP.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string tlp-default-mode
Modo predeterminado cuando no se puede detectar una fuente de
alimentación. Las alternativas son AC (corriente alterna) y BAT (batería).

El valor predeterminado es @samp{"AC"} (corriente alterna).

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} entero-no-negativo disk-idle-secs-on-ac
Número de segundos que el núcleo Linux debe esperar desde que el disco se
queda en espera, antes de sincronizar en corriente alterna (AC).

El valor predeterminado es @samp{0}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} entero-no-negativo disk-idle-secs-on-bat
Igual que @code{disk-idle-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{2}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} entero-no-negativo max-lost-work-secs-on-ac
Periodicidad de la evacuación de las páginas sucias, expresada en segundos.

El valor predeterminado es @samp{15}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} entero-no-negativo max-lost-work-secs-on-bat
Igual que @code{max-lost-work-secs-on-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{60}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-lista-cadena-separada-espacios cpu-scaling-governor-on-ac
Gobernador de escalado de frecuencia del procesador en modo de corriente
alterna (AC). Con el controlador intel_pstate, las alternativas son
``powersave'' (ahorro de energía) y ``performance'' (rendimiento). Con el
controlador acpi-cpufreq, las alternativas son ``ondemand'' (bajo demanda),
``powersave'', ``performance'' y ``conservative'' (conservativo).

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-lista-cadena-separada-espacios cpu-scaling-governor-on-bat
Igual que @code{max-lost-work-secs-on-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-entero-no-negativo cpu-scaling-min-freq-on-ac
Establece la frecuencia mínima disponible para el controlador de escalado en
AC.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-entero-no-negativo cpu-scaling-max-freq-on-ac
Establece la frecuencia máxima disponible para el controlador de escalado en
AC.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-entero-no-negativo cpu-scaling-min-freq-on-bat
Establece la frecuencia mínima disponible para el controlador de escalado en
BAT.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-entero-no-negativo cpu-scaling-max-freq-on-bat
Establece la frecuencia máxima disponible para el controlador de escalado en
BAT.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-entero-no-negativo cpu-min-perf-on-ac
Limita el estado-P mínimo para controlar la disipación de potencia del
procesador en modo AC. Los valores se indican como un porcentaje de
rendimiento disponible.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-entero-no-negativo cpu-max-perf-on-ac
Limita el estado-P máximo para controlar la disipación de potencia del
procesador en modo AC. Los valores se indican como un porcentaje de
rendimiento disponible.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-entero-no-negativo cpu-min-perf-on-bat
Igual que @code{cpu-min-perf-on-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-entero-no-negativo cpu-max-perf-on-bat
Igual que @code{cpu-max-perf-on-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-boolean cpu-boost-on-ac?
Activa la característica ``turbo boost'' del procesador en modo AC
(corriente alterna).

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-boolean cpu-boost-on-bat?
Igual que @code{cpu-boost-on-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} boolean sched-powersave-on-ac?
Permite al núcleo Linux minimizar el número de núcleos/hyper-thread del
procesador usados bajo condiciones de baja carga.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} boolean sched-powersave-on-bat?
Igual que @code{sched-powersave-on-ac?} pero en modo BAT (batería).

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} boolean nmi-watchdog?
Activa el proceso guardián (watchdog) NMI del núcleo Linux.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-string phc-controls
Para núcleos Linux con el parche PHC aplicado, cambia los voltajes del
procesador. Un valor de ejemplo sería @samp{"F:V F:V F:V F:V"}.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string energy-perf-policy-on-ac
Establece la política de alto rendimiento del procesador en vez del ahorro
de energía mientras durante el uso de corriente alterna (AC). Las
alternativas son ``performance'' (alto rendimiento), ``normal'' y
``powersave'' (ahorro de energía).

El valor predeterminado es @samp{"performance"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string energy-perf-policy-on-bat
Igual que @code{energy-perf-policy-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{"powersave"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} lista-cadena-separada-espacios disks-devices
Dispositivos de disco duro.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} lista-cadena-separada-espacios disk-apm-level-on-ac
Nivel de APM (gestión avanzada de energía) del disco duro.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} lista-cadena-separada-espacios disk-apm-level-on-bat
Igual que @code{disk-apm-bat} pero en modo BAT (batería).

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-lista-cadena-separada-espacios disk-spindown-timeout-on-ac
Plazo para la parada rotacional del disco duro. Se debe especificar un valor
por cada disco duro declarado.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-lista-cadena-separada-espacios disk-spindown-timeout-on-bat
Igual que @code{disk-spindown-timeout-on-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-lista-cadena-separada-espacios disk-iosched
Selecciona el planificador de E/S para dispositivos de disco. Se debe
especificar un valor por cada disco duro declarado. Ejemplos de alternativas
son ``cfq'', ``deadline'' y ``noop''.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string sata-linkpwr-on-ac
Nivel de gestión agresiva de energía del enlace (ALPM) de SATA. Las
alternativas son ``min_power'' (energía mínima), ``medium_power'' (energía
media) y ``max_performance'' (máximo rendimiento).

El valor predeterminado es @samp{"max_performance"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string sata-linkpwr-on-bat
Igual que @code{sata-linkpwr-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{"min_power"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-string sata-linkpwr-blacklist
Excluye los dispositivos SATA especificados de la gestión de energía del
enlace.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-on-off-boolean ahci-runtime-pm-on-ac?
Activa la gestión de energía de tiempo de ejecución para controladores AHCI
y discos en modo AC.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-on-off-boolean ahci-runtime-pm-on-bat?
Igual que @code{ahci-runtime-pm-on-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} entero-no-negativo ahci-runtime-pm-timeout
Segundos de inactividad antes de suspender el disco.

El valor predeterminado es @samp{15}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string pcie-aspm-on-ac
Nivel de gestión de energía de estado activo de PCI Express. Las
alternativas son ``default'' (predeterminado), ``performance'' (rendimiento)
y ``powersave'' (ahorro de energía).

El valor predeterminado es @samp{"performance"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string pcie-aspm-on-bat
Igual que @code{pcie-aspm-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{"powersave"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string radeon-power-profile-on-ac
Nivel de velocidad de reloj de gráficos Radeon. Las alternativas son ``low''
(bajo), ``mid'' (medio), ``high'' (alto), ``auto'' (automático) y
``default'' (predeterminado).

El valor predeterminado es @samp{"high"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string radeon-power-profile-on-bat
Igual que @code{radeon-power-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{"low"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string radeon-dpm-state-on-ac
Método de gestión de energía dinámica (DPM) de Radeon. Las alternativas son
``battery'' (batería) y ``performance'' (rendimiento).

El valor predeterminado es @samp{"performance"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string radeon-dpm-state-on-bat
Igual que @code{radeon-dpm-state-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{"battery"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string radeon-dpm-perf-level-on-ac
Nivel de rendimiento del DPM de Radeon. Las alternativas son ``auto''
(automático), ``low'' (bajo) y ``high'' (alto).

El valor predeterminado es @samp{"auto"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string radeon-dpm-perf-level-on-bat
Igual que @code{radeon-dpm-perf-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{"auto"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} on-off-boolean wifi-pwr-on-ac?
Modo de ahorro de energía de Wifi.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} on-off-boolean wifi-pwr-on-bat?
Igual que @code{wifi-power-ac?} pero en modo BAT (batería).

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} y-n-boolean wol-disable?
Desactiva el encendido desde la red local (wake on LAN).

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} entero-no-negativo sound-power-save-on-ac
Duración en segundos del plazo antes de activar el ahorro de energía de
audio en dispositivos Intel HDA y AC97. El valor 0 desactiva el ahorro de
energía.

El valor predeterminado es @samp{0}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} entero-no-negativo sound-power-save-on-bat
Igual que @code{sound-powersave-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{1}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} y-n-boolean sound-power-save-controller?
Desactiva el controlador en modo de ahorro de energía en dispositivos Intel
HDA.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} boolean bay-poweroff-on-bat?
Activa las unidades ópticas en UltraBay/MediaBay en modo BAT. La unidad
puede volver a alimentarse liberando (y reinsertando) la palanca de eyección
o presionando el botón de eyección de disco en modelos más modernos.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string bay-device
Nombre de la unidad de dispositivos ópticos a apagar.

El valor predeterminado es @samp{"sr0"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string runtime-pm-on-ac
Gestión de energía en tiempo de ejecución para dispositivos de bus
PCI(e). Las alternativas son ``on'' y ``auto''.

El valor predeterminado es @samp{"on"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} string runtime-pm-on-bat
Igual que @code{runtime-pm-ac} pero en modo BAT (batería).

El valor predeterminado es @samp{"auto"}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} boolean runtime-pm-all?
Gestión de energía en tiempo de ejecución (Runtime Power Management) para
todos los dispositivos del bus PCI(e), excepto los excluidos.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-lista-cadena-separada-espacios runtime-pm-blacklist
Excluye las direcciones de dispositivo PCI(e) especificadas de la gestión de
energía en tiempo de ejecución (Runtime Power Management).

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} lista-cadena-separada-espacios runtime-pm-driver-blacklist
Excluye los dispositivos PCI(e) asignados a los controladores especificados
de la gestión de energía en tiempo de ejecución (Runtime Power Management).

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} boolean usb-autosuspend?
Permite la suspensión automática de USB.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-string usb-blacklist
Excluye los dispositivos especificados de la suspensión automática de USB.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} boolean usb-blacklist-wwan?
Excluye los dispositivos WWAN de la suspensión automática de USB.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-string usb-whitelist
Incluye los dispositivos especificados en la suspensión automática de USB,
incluso cuando están excluidos por el controlador o a través de
@code{usb-blacklist-wwan?}.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} maybe-boolean usb-autosuspend-disable-on-shutdown?
Activa la suspensión automática de USB antes del apagado.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{tlp-configuration}} boolean restore-device-state-on-startup?
Restablece el estado de los dispositivos de radio (bluetooth, wifi, wwan)
previo al apagado durante el arranque del sistema.

El valor predeterminado es @samp{#f}

@end deftypevr

@cindex thermald
@cindex escalado de frecuencia de la CPU con thermald
@subsubheading Daemon Thermald

El módulo @code{(gnu services pm)} proporciona una interfaz con thermald, un
servicio de escalado de frecuencia de la CPU que ayuda a prevenir el
sobrecalentamiento.

@defvr {Variable Scheme} thermald-service-type
Este es el tipo de servicio para @uref{https://01.org/linux-thermal-daemon/,
thermald}, el daemon Thermal de Linux, que es responsable del control del
estado térmico de los procesadores y la prevención del sobrecalentamiento.
@end defvr

@deftp {Tipo de datos} thermald-configuration
Tipo de datos que representa la configuración de
@code{thermald-service-type}.

@table @asis
@item @code{ignore-cpuid-check?} (predeterminado: @code{#f})
Ignora la comprobación de cpuid durante la comprobación de procesadores
permitidos.

@item @code{thermald} (predeterminado: @var{thermald})
El objeto paquete de thermald.

@end table
@end deftp

@node Servicios de audio
@subsection Servicios de audio

El módulo @code{(gnu services audio)} proporciona un servicio para iniciar
MPD (el daemon de reproducción de música).

@cindex mpd
@subsubheading Daemon de reproducción de música (MPD)

El daemon de reproducción de música (MPD) es un servicio que puede
reproducir música mientras se controla desde la máquina local o sobre una
red por una multitud de clientes.

El siguiente ejemplo muestra como se puede ejecutar @code{mpd} como
@code{"rober"} en el puerto @code{6666}. Usa pulseaudio para su salida.

@lisp
(service mpd-service-type
         (mpd-configuration
          (user "rober")
          (port "6666")))
@end lisp

@defvr {Variable Scheme} mpd-service-type
El tipo de servicio para @command{mpd}.
@end defvr

@deftp {Tipo de datos} mpd-configuration
Tipo de datos que representa la configuración de @command{mpd}.

@table @asis
@item @code{user} (predeterminada: @code{"mpd"})
Usuaria que ejecuta mpd.

@item @code{music-dir} (predeterminado: @code{"~/Music"})
El directorio para buscar ficheros de música.

@item @code{playlist-dir} (predeterminado: @code{"~/.mpd/playlists"})
El directorio para almacenar listas de reproducción.

@item @code{db-file} (predeterminado: @code{"~/.mpd/tag_cache"})
La localización de la base de datos de música.

@item @code{state-file} (predeterminado: @code{"~/.mpd/state"})
La localización del fichero que almacena el estado actual de MPD.

@item @code{sticker-file} (predeterminado: @code{"~/.mpd/sticker.sql"})
La localización de la base de datos de pegatinas.

@item @code{port} (predeterminado: @code{"6600"})
Puerto sobre el que se ejecuta mpd.

@item @code{address} (predeterminada: @code{"any"})
Dirección a la que mpd se asociará. Para usar un socket de dominio de Unix
puede especificarse una ruta absoluta.

@item @code{outputs} (predeterminadas: @code{"(list (mpd-output))"})
Las salidas de audio que MPD puede usar. De manera predeterminada es una
salida de audio única usando pulseaudio.

@end table
@end deftp

@deftp {Tipo de datos} mpd-output
Tipo de datos que representa una salida de audio de @command{mpd}.

@table @asis
@item @code{name} (predeterminado: @code{"MPD"})
Nombre de la salida de audio.

@item @code{type} (predeterminado: @code{"pulse"})
Tipo de la salida de audio.

@item @code{enabled?} (predeterminado: @code{#t})
Especifica si esta salida de audio se activa cuando se inicia MPD. De manera
predeterminada se activan todas las salidas de audio. Esta es la
configuración predeterminada cuando no existe un fichero de estado; con un
fichero de estado se restaura el estado anterior.

@item @code{tags?} (predeterminado: @code{#t})
Si se proporciona el valor @code{#f} MPD no envia etiquetas a esta
salida. Es útil únicamente para módulos de salida que pueden recibir
etiquetas, por ejemplo el módulo de salida @code{httpd}.

@item @code{always-on?} (predeterminado: @code{#f})
Si se proporciona el valor @code{#t} MPD intenta mantener abierta siempre
esta salida de audio. Puede ser útil para servidores de retransmisión, donde
no desea que todos los clientes se desconecten incluso cuando la
reproducción se pare accidentalmente.

@item @code{mixer-type}
Este campo acepta un símbolo que especifica que mezclador debe usarse para
esta salida de audio: el mezclador @code{hardware}, el mezclador
@code{software}, el mezclador @code{null} (permite manejar el volumen pero
sin ningún efecto; puede usarse para implementar un mezclador externo) o
ningún mezclador (@code{none}).

@item @code{extra-options} (predeterminadas: @code{'()"})
Una lista asociativa de símbolos de opción con valores de cadenas que se
añadirán al final de la configuración de las salidas de audio.

@end table
@end deftp

El ejemplo siguiente muestra una configuración de @code{mpd} que proporciona
una salida de retransmisión de audio por HTTP.

@lisp
(service mpd-service-type
         (mpd-configuration
           (outputs
             (list (mpd-output
                     (name "streaming")
                     (type "httpd")
                     (mixer-type 'null)
                     (extra-options
                      `((encoder . "vorbis")
                        (port    . "8080"))))))))
@end lisp


@node Servicios de virtualización
@subsection Servicios de virtualización

El módulo @code{(gnu services virtualization)} proporciona servicios para
los daemon libvirt y virtlog, así como otros servicios relacionados con la
virtualización.

@subsubheading Daemon de Libvirt
@code{libvirtd} es un daemon del que se compone el lado del servidor del
sistema de gestión de virtualización libvirt. Este daemon se ejecuta en las
máquinas servidoras y realiza las tareas de gestión necesarias para los
sistemas virtualizados.

@deffn {Variable Scheme} libvirt-service-type
Este es el tipo para el @uref{https://libvirt.org, daemon de libvirt}. Su
valor debe ser un objeto @code{libvirt-configuration}.

@lisp
(service libvirt-service-type
         (libvirt-configuration
          (unix-sock-group "libvirt")
          (tls-port "16555")))
@end lisp
@end deffn

@c Auto-generated with (generate-libvirt-documentation)
Los campos disponibles de @code{libvirt-configuration} son:

@deftypevr {parámetro de @code{libvirt-configuration}} package libvirt
Paquete libvirt.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} boolean listen-tls?
Opción para la escucha de conexiones seguras TLS en el puerto TCP/IP
público. Debe haberse proporcionado valor a @code{listen} para que tenga
algún efecto.

Es necesario configurar una autoridad de certificación (CA) y emitir
certificados de servidor antes de usar esta característica.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} boolean listen-tcp?
Escucha de conexiones TCP sin cifrar en el puerto TCP/IP público. Debe
haberse proporcionado valor a @code{listen} para que tenga algún efecto.

El uso del socket TCP necesita de manera predeterminada identificación
SASL. Únicamente se permiten mecanismos SASL que implementen cifrado de
datos. Estos son DIGEST_MD5 y GSSAPI (Kerberos5).

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string tls-port
Puerto en el que se aceptan conexiones seguras. Puede ser un número de
puerto o un nombre de servicio.

El valor predeterminado es @samp{"16514"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string tcp-port
Puerto en el que se aceptan conexiones inseguras. Puede ser un número de
puerto o un nombre de servicio.

El valor predeterminado es @samp{"16509"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string listen-addr
Dirección IP o nombre de máquina usado para las conexiones de clientes.

El valor predeterminado es @samp{"0.0.0.0"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} boolean mdns-adv?
Opción que determina el anuncio mDNS del servicio libvirt.

De manera alternativa puede desactivarse para todos los servicios en una
máquina parando el daemon Avahi.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string mdns-name
Nombre predeterminado del anuncio mDNS. Debe ser único en la red de
distribución inmediata.

El valor predeterminado es @samp{"Virtualization Host <hostname>"}.<

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string unix-sock-group
Grupo propietario del socket de dominio de UNIX. Puede usarse para permitir
a un conjunto de usuarias ``de confianza'' acceso a las funcionalidades de
gestión sin convertirse en root.

El valor predeterminado es @samp{"root"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string unix-sock-ro-perms
Permisos del socket UNIX de sólo lectura@footnote{R/O: Read-Only en
inglés.}. Se usa únicamente para monitorizar el estado de las máquinas
virtuales.

El valor predeterminado es @samp{"0777"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string unix-sock-rw-perms
Permisos del socket UNIX de lectura/escritura@footnote{R/W: Read-Write en
inglés.}. El valor predeterminado únicamente permite acceso a root. Si
PolicyKit se encuentra activo en el socket, el valor predeterminado cambiará
para permitir acceso universal (es decir, 0777).

El valor predeterminado es @samp{"0770"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string unix-sock-admin-perms
Permisos del socket UNIX de administración. El valor predeterminado
únicamente permite acceso a la propietaria (root), no lo cambie a menos que
esté completamente segura de a quién expone el acceso.

El valor predeterminado es @samp{"0777"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string unix-sock-dir
Directorio en el que los sockets se encuentran/crean.

El valor predeterminado es @samp{"/var/run/libvirt"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string auth-unix-ro
Esquema de identificación para los sockets de solo-lectura de UNIX. Los
permisos predeterminados del socket permiten la conexión de cualquier
usuaria.

El valor predeterminado es @samp{"polkit"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string auth-unix-rw
Esquema de identificación para los sockets de lectura/escritura de UNIX. Los
permisos predeterminados del socket permiten la conexión únicamente a
root. Si se activó en la compilación de libvirt la interoperabilidad con
PolicyKit, el valor predeterminado es usar la identificación ``policykit''.

El valor predeterminado es @samp{"polkit"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string auth-tcp
Esquema de identificación para los sockets TCP. Si no activa SASL, todo el
tráfico TCP estará en texto plano. No lo haga más allá de un escenario de
desarrollo/pruebas.

El valor predeterminado es @samp{"sasl"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string auth-tls
Esquema de identificación para los sockets TLS. Los sockets TLS ya se
encuentran cifrados gracias a la capa TLS, y una identificación limitada se
realiza con los certificados.

También es posible hacer uso de cualquier mecanismo de identificación SASL
proporcionando ``sasl'' en esta opción.

El valor predeterminado es @samp{"none"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} lista-opcional access-drivers
Esquema de la API de control de acceso.

De manera predeterminada una usuaria identificada puede acceder a todas las
API. Los controladores de acceso pueden incluir restricciones de acceso
sobre ello.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string key-file
Ruta del fichero con la clave del servidor. Si se proporciona una cadena
vacía, no se carga ninguna clave privada.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string cert-file
Ruta del fichero con la clave del servidor. Si se proporciona una cadena
vacía, no se carga ningún certificado.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string ca-file
Ruta del fichero con la clave del servidor. Si se proporciona una cadena
vacía, no se carga ningún certificado de CA.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string crl-file
Ruta de la lista de revocaciones de certificado. Si se proporciona una
cadena vacía, no se carga ninguna lista.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} boolean tls-no-sanity-cert
Desactiva la verificación de los propios certificados del servidor.

Cuando libvirtd arranca, realiza algunas comprobaciones básicas sobre sus
propios certificados.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} boolean tls-no-verify-cert
Desactiva la verificación de certificados de clientes.

La verificación de certificados de cliente es el mecanismo primario de
identificación. Se rechazará cualquier cliente que no presente un
certificado firmado por la autoridad de certificación (CA).

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} lista-opcional tls-allowed-dn-list
Lista de nombres distinguidos (DN) x509 permitidos.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} lista-opcional sasl-allowed-usernames
Lista de nombres de usuaria SASL permitidos. El formato para el nombre de la
usuaria depende del mecanismo de identificación SASL.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string tls-priority
Override the compile time default TLS priority string.  The default is
usually @samp{"NORMAL"} unless overridden at build time.  Only set this is
it is desired for libvirt to deviate from the global default settings.

El valor predeterminado es @samp{"NORMAL"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer max-clients
Número máximo de conexiones concurrentes de clientes permitidas en todos los
sockets combinados.

El valor predeterminado es @samp{5000}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer max-queued-clients
Longitud máxima de la cola de conexiones a la espera de ser aceptadas por el
daemon. Fíjese que algunos protocolos que implementan la retransmisión
pueden obedecer esto de manera que un intento posterior de conexión tenga
éxito.

El valor predeterminado es @samp{1000}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer max-anonymous-clients
Longitud máxima de la cola de clientes aceptados pero no identificados
todavía. Proporcione el valor cero para desactivar esta característica.

El valor predeterminado es @samp{20}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer min-workers
Número de procesos de trabajo que se lanzarán inicialmente.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer max-workers
Número máximo de hilos de trabajo.

Si el número de clientes excede @code{min-workers}, se lanzan más hilos,
hasta el límite @code{max-workers}. Habitualmente se desea que
@code{max-workers} sea igual al número máximo de clientes permitido.

El valor predeterminado es @samp{20}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer prio-workers
Número de procesos de trabajo prioritarios. Si todos los hilos de trabajo
del conjunto previo se encuentran bloqueados, algunas llamadas marcadas como
de alta prioridad (notablemente domainDestroy) pueden ejecutarse en este
conjunto de hilos.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer max-requests
Límite global total de llamadas RPC concurrentes.

El valor predeterminado es @samp{20}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer max-client-requests
Límite de peticiones concurrentes desde una única conexión de cliente. Para
evitar que un cliente monopolice el servidor esto debe ser una pequeña
fracción de los parámetros globales ``max_requests'' y ``max_workers''.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer admin-min-workers
Igual que @code{min-workers} pero para la interfaz de administración.

El valor predeterminado es @samp{1}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer admin-max-workers
Igual que @code{max-workers} pero para la interfaz de administración.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer admin-max-clients
Igual que @code{max-clients} pero para la interfaz de administración.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer admin-max-queued-clients
Igual que @code{max-queued-clients} pero para la interfaz de administración.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer admin-max-client-requests
Igual que @code{max-client-requests} pero para la interfaz de
administración.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer log-level
Nivel de registro.  4 errores, 3 avisos, 2 información, 1 depuración.

El valor predeterminado es @samp{3}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string log-filters
Filtros del registro.

Un filtro permite la selección de un nivel de registro diferente para una
categoría dada de registros. El formato del filtro es uno de los siguientes:

@itemize @bullet
@item
x:nombre

@item
x:+nombre

@end itemize

where @code{name} is a string which is matched against the category given in
the @code{VIR_LOG_INIT()} at the top of each libvirt source file, e.g.,
@samp{"remote"}, @samp{"qemu"}, or @samp{"util.json"} (the name in the
filter can be a substring of the full category name, in order to match
multiple similar categories), the optional @samp{"+"} prefix tells libvirt
to log stack trace for each message matching name, and @code{x} is the
minimal level where matching messages should be logged:

@itemize @bullet
@item
1: DEBUG (depuración)

@item
2: INFO (información)

@item
3: WARNING (aviso)

@item
4: ERROR

@end itemize

Se pueden definir en una única sentencia múltiples filtros, únicamente hace
falta separarlos por espacios.

El valor predeterminado es @samp{"3:remote 4:event"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string log-outputs
Salidas de log.

Una salida es uno de esos lugares para almacenar información de logging. El
formato para una salida puede ser:

@table @code
@item x:stderr
la salida va a stderr

@item x:syslog:nombre
usa syslog para la salida y usa el nombre proporcionado como identificador

@item x:file:ruta_fichero
encamina la salida a un fichero, con la ruta proporcionada

@item x:journald
usa el sistema de logging journald

@end table

En todos los casos el prefijo x es el nivel mínimo, que actúa como filtro

@itemize @bullet
@item
1: DEBUG (depuración)

@item
2: INFO (información)

@item
3: WARNING (aviso)

@item
4: ERROR

@end itemize

Se pueden definir salidas múltiples, únicamente deben separarse por
espacios.

El valor predeterminado es @samp{"3:stderr"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer audit-level
Permite la alteración del uso del sistema de auditoría.

@itemize @bullet
@item
0: desactiva la auditoría

@item
1: activa la auditoría, únicamente si está activado en la máquina

@item
2: activa la auditoría, y sale si está desactivada en la máquina.

@end itemize

El valor predeterminado es @samp{1}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} boolean audit-logging
Envía los mensajes de auditoría a través de la infraestructura de registro
de libvirt.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string-opcional host-uuid
UUID de la máquina anfitriona. No pueden ser iguales todos los dígitos del
UUID.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} string host-uuid-source
Fuente de lectura del UUID de la máquina anfitriona.

@itemize @bullet
@item
@code{smbios}: obtiene el UUID de @code{dmidecode -s system-uuid}

@item
@code{machine-id}: obtiene el UUID de @code{/etc/machine-id}

@end itemize

Si @code{dmidecode} no proporciona un UUID válido, se generará un UUID
temporal.

El valor predeterminado es @samp{"smbios"}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer keepalive-interval
Un mensaje ``keepalive'' se envía al cliente tras @code{keepalive_interval}
segundos de inactividad para comprobar si el cliente todavía responde. Si se
proporciona el valor -1, libvirtd nunca enviará peticiones ``keepalive''; no
obstante los clientes todavía pueden mandarlas y el daemon enviará las
respuestas.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer keepalive-count
Número máximo de mensajes ``keepalive'' que se permite enviar a un cliente
sin obtener respuesta antes de considerar que se ha roto la conexión.

En otras palabras, la conexión se cierra automáticamente tras
@code{keepalive_interval * (keepalive_count + 1)} segundos tras la última
recepción de un mensaje desde el cliente. Cuando @code{keepalive_count}
tiene valor 0, las conexiones se cerrarán automáticamente tras
@code{keepalive-interval} segundos de inactividad sin mandar ningún mensaje
``keepalive''.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer admin-keepalive-interval
Igual que la opción anterior pero para la interfaz de administración.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer admin-keepalive-count
Igual que la opción anterior pero para la interfaz de administración.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{libvirt-configuration}} integer ovs-timeout
Plazo máximo para las llamadas a Open vSwitch.

La utilidad @code{ovs-vsctl} se usa para la configuración y su opción de
plazo máximo (timeout) tiene un valor de 5 segundos de manera predeterminada
para evitar que esperas potencialmente infinitas bloqueen libvirt.

El valor predeterminado es @samp{5}.

@end deftypevr

@c %end of autogenerated docs

@subsubheading Daemon Virtlog
El servicio virtlogd es un daemon del que se compone el lado servidor de
libvirt cuya finalidad es la gestión del registro de las consolas de las
máquinas virtuales.

Este daemon no se usa directamente en aplicaciones cliente de libvirt, sino
que @code{libvirtd} lo invoca en su nombre. Al mantener los registros en un
daemon independiente, el daemon @code{libvirtd} puede reiniciarse sin correr
el riesgo de perder registros. El daemon @code{virtlogd} tiene la capacidad
de ejecutar exec() sobre sí mismo al recibir @code{SIGUSR1}, para permitir
actualizaciones en vivo sin tiempo de parada.

@deffn {Variable Scheme} virtlog-service-type
Este es el tipo del daemon virtlog. Su valor debe ser un objeto
@code{virtlog-configuration}.

@lisp
(service virtlog-service-type
         (virtlog-configuration
          (max-clients 1000)))
@end lisp
@end deffn

@deftypevr {parámetro de @code{virtlog-configuration}} integer log-level
Nivel de registro.  4 errores, 3 avisos, 2 información, 1 depuración.

El valor predeterminado es @samp{3}.

@end deftypevr

@deftypevr {parámetro de @code{virtlog-configuration}} string log-filters
Filtros del registro.

Un filtro permite la selección de un nivel de registro diferente para una
categoría dada de registros. El formato del filtro es uno de los siguientes:

@itemize @bullet
@item
x:nombre

@item
x:+nombre

@end itemize

donde @code{nombre} es una cadena contra la que se compara la categoría
proporcionada en la llamada @code{VIR_LOG_INIT()} al principio de cada
fichero de fuentes de libvirt, por ejemplo "remote", "qemu" o "util.json"
(el nombre en el filtro puede ser una subcadena del nombre completo de la
categoría, para aceptar múltiples categorías con nombres similares), el
prefijo opcional "+" indica a libvirt que registre la pila de llamadas en
cada mensaje con el nombre correspondiente, y @code{x} es el nivel mínimo de
los mensajes que deben registrarse:

@itemize @bullet
@item
1: DEBUG (depuración)

@item
2: INFO (información)

@item
3: WARNING (aviso)

@item
4: ERROR

@end itemize

Se pueden definir en una única sentencia múltiples filtros, únicamente hace
falta separarlos por espacios.

El valor predeterminado es @samp{"3:remote 4:event"}.

@end deftypevr

@deftypevr {parámetro de @code{virtlog-configuration}} string log-outputs
Salidas de log.

Una salida es uno de esos lugares para almacenar información de logging. El
formato para una salida puede ser:

@table @code
@item x:stderr
la salida va a stderr

@item x:syslog:nombre
usa syslog para la salida y usa el nombre proporcionado como identificador

@item x:file:ruta_fichero
encamina la salida a un fichero, con la ruta proporcionada

@item x:journald
usa el sistema de logging journald

@end table

En todos los casos el prefijo x es el nivel mínimo, que actúa como filtro

@itemize @bullet
@item
1: DEBUG (depuración)

@item
2: INFO (información)

@item
3: WARNING (aviso)

@item
4: ERROR

@end itemize

Se pueden definir salidas múltiples, únicamente deben separarse por
espacios.

El valor predeterminado es @samp{"3:stderr"}.

@end deftypevr

@deftypevr {parámetro de @code{virtlog-configuration}} integer max-clients
Número máximo de conexiones concurrentes de clientes permitidas en todos los
sockets combinados.

El valor predeterminado es @samp{1024}.

@end deftypevr

@deftypevr {parámetro de @code{virtlog-configuration}} integer max-size
Tamaño máximo del fichero antes de pasar al siguiente.

El valor predeterminado es @samp{2MB}.

@end deftypevr

@deftypevr {parámetro de @code{virtlog-configuration}} integer max-backups
Número máximo de ficheros de backup que se deben mantener.

El valor predeterminado es @samp{3}.

@end deftypevr

@subsubheading Emulación transparente con QEMU

@cindex emulación
@cindex @code{binfmt_misc}
@code{qemu-binfmt-service-type} proporciona la capacidad de emular
transparentemente programas binarios construidos para arquitecturas
diferentes---por ejemplo, le permite ejecutar de manera transparente un
programa de ARMv7 en una máquina x86_64. Esto se consigue mediante la
combinación del emulador @uref{https://www.qemu.org, QEMU} y la
característica @code{binfmt_misc} del núcleo Linux.

@defvr {Variable Scheme} qemu-binfmt-service-type
Este es el tipo del servicio de emulación transparente QEMU/binfmt. Su valor
debe ser un objeto @code{qemu-binfmt-configuration}, que especifica el
paquete QEMU usado así como las arquitecturas que se desean emular:

@lisp
(service qemu-binfmt-service-type
         (qemu-binfmt-configuration
           (platforms (lookup-qemu-platforms "arm" "aarch64"))))
@end lisp

En este ejemplo se activa la emulación transparente para las plataformas ARM
y aarch64. La ejecución de @code{herd stop qemu-binfmt} la desactiva, y la
ejecución de @code{herd start qemu-binfmt} la vuelve a activar
(@pxref{Invoking herd, the @command{herd} command,, shepherd, The GNU
Shepherd Manual}).
@end defvr

@deftp {Tipo de datos} qemu-binfmt-configuration
Esta es la configuración para el servicio @code{qemu-binfmt}.

@table @asis
@item @code{platforms} (predeterminadas: @code{'()})
Lista de plataformas de QEMU emuladas. Cada elemento debe ser un @dfn{objeto
de plataforma} como los devueltos por @code{lookup-qemu-platforms} (véase a
continuación).

@item @code{guix-support?} (predeterminado: @code{#f})
When it is true, QEMU and all its dependencies are added to the build
environment of @command{guix-daemon} (@pxref{Invocación de guix-daemon,
@option{--chroot-directory} option}).  This allows the @code{binfmt_misc}
handlers to be used within the build environment, which in turn means that
you can transparently build programs for another architecture.

Por ejemplo, supongamos que está en una máquina x86_64 y tiene este
servicio:

@lisp
(service qemu-binfmt-service-type
         (qemu-binfmt-configuration
           (platforms (lookup-qemu-platforms "arm"))
           (guix-support? #t)))
@end lisp

Puede ejecutar:

@example
guix build -s armhf-linux inkscape
@end example

@noindent
Y construirá Inkscape para ARMv7 @emph{como si fuese una construcción
nativa}, de manera transparente mediante el uso de QEMU para emular la CPU
ARMv7. ¡Muy útil si quisiera probar la construcción de un paquete en una
arquitectura a la que no tenga acceso!

@item @code{qemu} (predeterminado: @code{qemu})
El paquete QEMU usado.
@end table
@end deftp

@deffn {Procedimiento Scheme} lookup-qemu-platforms @var{plataformas}@dots{}
Devuelve la lista de objetos de plataforma de QEMU que corresponden a
@var{plataformas}@dots{}. @var{plataformas} debe ser una lista de cadenas
que correspondan con nombres de plataforma, como @code{"arm"},
@code{"sparc"}, @code{"mips64el"}, etcétera.
@end deffn

@deffn {Procedimiento Scheme} qemu-platform? @var{obj}
Devuelve verdadero si @var{obj} es un objeto de plataforma.
@end deffn

@deffn {Procedimiento Scheme} qemu-platform-name @var{plataforma}
Devuelve el nombre de @var{plataforma}---una cadena como @code{"arm"}.
@end deffn

@node Servicios de control de versiones
@subsection Servicios de control de versiones

El módulo @code{(gnu services version-control)} proporciona un servicio para
permitir el acceso remoto a repositorios Git locales. Existen tres opciones:
el servicio @code{git-daemon-service}, que proporciona acceso a repositorios
a través del protocolo inseguro basado en TCP @code{git://}, la extensión
del servidor web @code{nginx} para redirigir algunas peticiones al motor
@code{git-http-backend}, o una interfaz web proporcionada por el servicio
@code{cgit-service-type}.

@deffn {Procedimiento Scheme} git-daemon-service [#:config (git-daemon-configuration)]

Devuelve un servicio que ejecuta @command{git daemon}, un servidor TCP
simple para exponer repositorios con el protocolo Git para acceso anónimo.

The optional @var{config} argument should be a
@code{<git-daemon-configuration>} object, by default it allows read-only
access to exported@footnote{By creating the magic file
@file{git-daemon-export-ok} in the repository directory.} repositories under
@file{/srv/git}.

@end deffn

@deftp {Tipo de datos} git-daemon-configuration
Tipo de datos que representa la configuración para
@code{git-daemon-service}.

@table @asis
@item @code{package} (predeterminado: @var{git})
El objeto paquete del sistema distribuido de control de versiones Git.

@item @code{export-all?} (predeterminado: @var{#f})
Determina si se permite el acceso a todos los repositorios Git, incluso si
no tienen el fichero @file{git-daemon-export-ok}.

@item @code{base-path} (predeterminado: @file{/srv/git})
Determina si se traducirán todas las rutas de las peticiones como relativas
a la ruta proporcionada. Si se encuentra en ejecución el daemon de git con
@var{(base-path "/srv/git"} en example.com, al realizar la solicitud de
@code{git://example.com/hello.git}, el daemon de git interpretará la ruta
como @code{/srv/git/hello.git}.

@item @code{user-path} (predeterminado: @var{#f})
Determina si se permite el uso de la notación @code{~user} en las
peticiones. Si se especifica una cadena vacía, una peticione de
@code{git://máquina/~alicia/algo} se tomará como una petición de acceso al
repositorio @code{algo} en el directorio de la usuaria @code{alicia}. Si se
especifica @var{(user-path "ruta")}, la misma petición se traducirá en una
petición de acceso al repositorio @code{ruta/algo} en el directorio de la
usuaria @code{alicia}.

@item @code{listen} (predeterminado: @var{'()})
Determina si se debe escuchar en direcciones IP o nombres de máquina
específicos, de manera predeterminada escucha en cualquiera.

@item @code{port} (predeterminado: @var{#f})
Determina si se escucha en un puerto alternativo, cuyo valor predeterminado
es 9418.

@item @code{whitelist} (predeterminado: @var{'()})
Si no está vacío, únicamente permite el acceso a esta lista de directorios.

@item @code{extra-options} (predeterminadas: @var{'()})
Opciones adicionales que se proporcionan a @code{git daemon}, para obtener
más información le rogamos que ejecute @command{man git-daemon}.

@end table
@end deftp

El protocolo @code{git://} carece de verificación. Cuando se obtienen datos
de un repositorio a través del protocolo @code{git://}, no puede tener plena
confianza en que los datos que reciba procedan realmente de la máquina que
ha indicado, y su conexión puede estar sujeta a interceptaciones. Es mejor
usar un transporte verificado y cifrado, como @code{https}. Aunque Git le
permite servir repositorios usando servidores web poco sofisticados basados
en ficheros, existe un protocolo más rápido implementado en el programa
@code{git-http-backend}. Este programa es el motor de un servicio web de Git
adecuado. Está diseñado para ejecutarse tras FastCGI. @xref{Servicios Web},
para más información sobre la ejecución del daemon @code{fcgiwrap}
necesario.

Guix tiene un tipo de datos de configuración distinto para proporcionar
repositorios Git sobre HTTP.

@deftp {Tipo de datos} git-http-configuration
Data type representing the configuration for a future
@code{git-http-service-type}; can currently be used to configure Nginx
trough @code{git-http-nginx-location-configuration}.

@table @asis
@item @code{package} (predeterminado: @var{git})
El objeto paquete del sistema distribuido de control de versiones Git.

@item @code{git-root} (predeterminada: @file{/srv/git})
Directorio que contiene los repositorios Git que se expondrán al mundo.

@item @code{export-all?} (predeterminado: @var{#f})
Determina si se expondrá el acceso a todos los repositorios en
@var{git-root}, incluso si no contienen el fichero
@file{git-daemon-export-ok}.

@item @code{uri-path} (predeterminada: @file{/git/})
Prefijo de la ruta del acceso de Git. Con el prefijo predeterminado
@code{/git/}, @code{http://@var{servidor}/git/@var{repositorio}.git} se
traducirá en @code{/srv/git/@var{repositorio}.git}. Las peticiones cuyas
rutas URI no comiencen con dicho prefijo no se pasan a esta instancia de
Git.

@item @code{fcgiwrap-socket} (predeterminado: @code{127.0.0.1:9000})
Socket en el que el daemon @code{fcgiwrap} escucha. @xref{Servicios Web}.
@end table
@end deftp

No existe actualmente @code{git-http-service-type}; en vez de eso puede
crear una configuración @code{nginx-location-configuration} desde
@code{git-http-configuration} y añadir dicha configuración al servidor web.

@deffn {Procedimiento Scheme} git-http-nginx-location-configuration @
       [config=(git-http-configuration)]
Calcula una configuración @code{nginx-location-configuration} que
corresponde con la configuración http de Git proporcionada. Un ejemplo de
definición de servicio nginx que ofrece el directorio predeterminado
@file{/srv/git} sobre HTTPS podría ser:

@lisp
(service nginx-service-type
         (nginx-configuration
          (server-blocks
           (list
            (nginx-server-configuration
             (listen '("443 ssl"))
             (server-name "git.mi-maquina.org")
             (ssl-certificate
              "/etc/letsencrypt/live/git.mi-maquina.org/fullchain.pem")
             (ssl-certificate-key
              "/etc/letsencrypt/live/git.mi-maquina.org/privkey.pem")
             (locations
              (list
               (git-http-nginx-location-configuration
                (git-http-configuration (uri-path "/"))))))))))
@end lisp

Este ejemplo asume que usa Let's Encrypt para obtener su certificado
TLS. @xref{Servicios de certificados}. El servicio predeterminado @code{certbot}
redirigirá todo el tráfico HTTP en @code{git.mi-maquina.org} hacia
HTTPS. También necesitará añadir @code{fcgiwrap} a sus servicios del
sistema. @xref{Servicios Web}.
@end deffn

@subsubheading Servicio Cgit

@cindex servicio Cgit
@cindex Git, interfaz web
@uref{https://git.zx2c4.com/cgit/, Cgit} es un servidor de fachada para
repositiorios Git escrito en C.

El ejemplo siguiente configura el servicio con los valores
predeterminados. Por omisión, se puede acceder a Cgit en el puerto 80
(@code{http://localhost:80}).

@lisp
(service cgit-service-type)
@end lisp

El tipo @code{file-object} designa o bien un objeto ``tipo-fichero''
(@pxref{Expresiones-G, objetos ``tipo-fichero''}), o bien una cadena.

@c %start of fragment

Los campos disponibles de @code{cgit-configuration} son:

@deftypevr {parámetro de @code{cgit-configuration}} package package
El paquete CGIT.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} lista-nginx-server-configuration nginx
Configuración de NGINX.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} file-object about-filter
Especifica una orden que se llamará para dar formato al contenido de las
páginas ``about'' (tanto al nivel superior como cada repositorio).

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string agefile
Especifica una ruta, relativa a cada ruta de repositorio, que puede usarse
para especificar una fecha y hora de la revisión más reciente del
repositorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} file-object auth-filter
Especifica una orden que se invocará para la validación de acceso al
repositorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string branch-sort
Opción que, cuando tiene valor @samp{age}, activa la ordenación por fecha en
la lista de referencias de ramas, y cuando tiene valor @samp{name} activa la
ordenación por nombre de rama.

El valor predeterminado es @samp{"name"}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string cache-root
Ruta usada para el almacenamiento de las entradas de caché de cgit.

El valor predeterminado es @samp{"/var/cache/cgit"}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer cache-static-ttl
Número que especifica el tiempo de vida, en minutos, de la versión en caché
de las páginas del repositiorio accedidas mediante un hash SHA1 fijo.

El valor predeterminado es @samp{-1}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer cache-dynamic-ttl
Número que especifica el tiempo de vida, en minutos, de la versión en caché
de las páginas del repositorio accedidas sin un hash SHA1 fijo.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer cache-repo-ttl
Número que especifica el tiempo de vida, en minutos, de la versión en caché
de la página de resumen del repositorio.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer cache-root-ttl
Número que especifica el tiempo de vida, en minutos, de la versión en caché
de la página del índice de repositorios.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer cache-scanrc-ttl
Número que especifica el tiempo de vida, en minutos, para el resultado de la
búsqueda en una ruta para repositorios Git.

El valor predeterminado es @samp{15}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer cache-about-ttl
Número que especifica el tiempo de vida, en minutos, de la versión en caché
de la página de información del repositorio.

El valor predeterminado es @samp{15}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer cache-snapshot-ttl
Número que especifica el tiempo de vida, en minutos, de la versión en caché
de las instantáneas.

El valor predeterminado es @samp{5}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer cache-size
El número máximo de entradas en la caché de cgit. Cuando el valor es
@samp{0}, se desactiva el almacenamiento en caché.

El valor predeterminado es @samp{0}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean case-sensitive-sort?
Ordena los elementos en la lista del repositorio diferenciando las
mayúsculas.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} lista clone-prefix
Lista de prefijos comunes que, cuando se combinen con la URL de un
repositorio, generan una URL que permite el clonado del repositorio.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} lista clone-url
Lista de plantillas @code{clone-url}.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} file-object commit-filter
Orden ejecutada para el formato de mensajes de revisión.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string commit-sort
Opción que, cuando tiene valor @samp{date}, activa la ordenación estricta
por fecha en el registro histórico de revisiones, y cuando tiene valor
@samp{topo} activa la ordenación estricta topológica.

El valor predeterminado es @samp{"git log"}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} file-object css
URL que especifica el documento css incluido en todas las páginas de cgit.

El valor predeterminado es @samp{"/share/cgit/cgit.css"}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} file-object email-filter
Especifica una orden que se llamará para dar formato a los nombres y las
direcciones de correo electrónico de las revisoras, autoras y etiquetadoras
con el que se representarán en varios lugares de la interfaz cgit.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean embedded?
Opción que, cuando tiene valor @samp{#t}, hace que cgit genere un fragmento
HTML adecuado para embeberse en otras páginas HTML.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-commit-graph?
Opción que, cuando tiene el valor @samp{#t}, hace que cgit imprima un grafo
histórico de la revisión de arte ASCII a la izquierda de los mensajes de
revisión en la página del histórico del repositorio.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-filter-overrides?
Opción que, cuando tiene valor @samp{#t}, permite que todas las
configuraciones de filtros se sustituyan en los ficheros cgitrc específicos
del repositorio.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-follow-links?
Opción que, cuando tiene valor @samp{#t}, permite a las usuarias seguir un
fichero en la vista de registro (log).

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-http-clone?
Si se proporciona @samp{#t}, cgit actuará como un simple servidor HTTP para
los clones de Git.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-index-links?
Opción que, cuando tiene valor @samp{#t}, hace que cgit genere enlaces
adicionales "summary" (resumen), "commit" (revisión) y "tree" (árbol) para
cada repositorio en el índice de repositorios.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-index-owner?
Opción que, cuando tiene valor @samp{#t}, hace que cgit muestre la
propietaria de cada repositorio en el índice del repositorios.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-log-filecount?
Opción que, cuando se proporciona el valor @samp{#t}, hace que cgit imprima
el número de ficheros modificados por cada revisión en la página de registro
histórico del repositorio ("log").

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-log-linecount?
Opción que, cuando se proporciona el valor @samp{#t}, hace que cgit imprima
el número de líneas añadidas y eliminadas en cada revisión en la página de
registro histórico ("log").

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-remote-branches?
Opción que, cuando se proporciona el valor @samp{#t}, hace que cgit muestre
ramas remotas en las vistas de resumen ("summary") y de referencias
("refs").

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-subject-links?
Opción que, cuando se proporciona el valor @samp{1}, hace que cgit use el
asunto de la revisión previa como texto del enlace cuando se generen enlaces
a revisiones previas en la vista de la revisión.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-html-serving?
Opción que, cuando se proporciona el valor @samp{#t}, hace que cgit use el
asunto de la revisión previa como texto del enlace cuando se generen enlaces
a revisiones previas en la vista de la revisión.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-tree-linenumbers?
Opción que, cuando se proporciona el valor @samp{#t}, hace que cgit genere
enlaces de números de línea para los ficheros (blob) de texto plano impresos
en la vista de árbol.

El valor predeterminado es @samp{#t}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean enable-git-config?
Opción que, cuando tiene valor @samp{#f}, permite que cgit use la
configuración de Git para fijar el valor de cualquier opción específica del
repositorio.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} file-object favicon
URL usada para icono de los enlaces a cgit.

El valor predeterminado es @samp{"/favicon.ico"}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string footer
El contenido del fichero especificado con esta opción se incluirá
literalmente en la parte inferior de todas las páginas (es decir, sustituye
al mensaje estándar "generated by...").

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string head-include
El contenido del fichero especificado con esta opción se incluirá
literalmente en la sección HEAD de HTML en todas las páginas.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string header
El contenido del fichero especificado con esta opción se incluirá
literalmente en la parte superior de todas las páginas.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} file-object include
Nombre de un fichero de configuración que debe incluirse antes de procesar
el resto del fichero de configuración actual.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string index-header
El contenido del fichero especificado en esta opción se incluirá
literalmente sobre el índice de repositorios.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string index-info
El contenido del fichero especificado con esta opción se incluirá de manera
literal bajo la cabecera en la página de índice del repositorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean local-time?
Opción que, cuando tiene valor @samp{#t}, hace que cgit imprima las fechas
de revisión y etiqueta en la zona horaria del servidor.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} file-object logo
URL que especifica la fuente de una imagen usada como logo en todas las
páginas de cgit.

El valor predeterminado es @samp{"/share/cgit/cgit.png"}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string logo-link
URL que se carga al pulsar la imagen del logo de cgit.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} file-object owner-filter
Orden que se ejecuta para dar formato a la columna de propietaria (Owner) de
la página principal.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer max-atom-items
Número de elementos a mostrar en la vista de ``atom feeds''.

El valor predeterminado es @samp{10}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer max-commit-count
Número de entradas a mostrar por página en la vista del registro histórico
("log").

El valor predeterminado es @samp{50}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer max-message-length
Número de caracteres del mensaje de la revisión a mostrar en la vista del
registro histórico ("log").

El valor predeterminado es @samp{80}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer max-repo-count
Especifica el número de entradas a mostrar por página en la página de índice
de repositorios.

El valor predeterminado es @samp{50}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer max-repodesc-length
Especifica el número máximo de caracteres mostrados en la descripción del
repositorio en la página del índice de repositorios.

El valor predeterminado es @samp{80}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer max-blob-size
Especifica el tamaño máximo de un fichero (blob) para mostrarlo en HTML en
kilobytes.

El valor predeterminado es @samp{0}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string max-stats
Periodo estadístico máximo. Son valores aceptados @samp{week}, @samp{month},
@samp{quarter} and @samp{year}.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} mimetype-alist mimetype
Tipo MIME para la extensión de fichero especificada.

El valor predeterminado es @samp{((gif "image/gif") (html "text/html") (jpg
"image/jpeg") (jpeg "image/jpeg") (pdf "application/pdf") (png "image/png")
(svg "image/svg+xml"))}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} file-object mimetype-file
Especifica el fichero usado para la búsqueda automática de tipos MIME.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string module-link
Texto que se usará como la cadena de formato para un enlace cuando un
submódulo se imprime en el listado del directorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean nocache?
Si se proporciona el valor @samp{#t}, se desactiva la caché.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean noplainemail?
Si se proporciona @samp{#t}, se desactiva la impresión de direcciones de
correo completas de las autoras.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean noheader?
Opción que, cuando tiene valor @samp{#t}, hace que cgit omita la cabecera
estándar en todas las páginas.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} lista-proyectos project-list
Una lista de subdirectorios dentro de @code{repository-directory}, relativa
a él, que debe cargarse como repositorios Git. La lista vacía significa que
se cargarán todos los subdirectorios.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} file-object readme
Texto usado como valor predeterminado para @code{cgit-repo-readme}.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean remove-suffix?
Si se proporciona @code{#t} y @code{repository-directory} está activo, si se
encuentra algún repositorio con el sufijo @code{.git}, se elimina dicho
sufijo de la URL y del nombre.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer renamelimit
Número máximo de ficheros considerados durante la detección de renombrados.

El valor predeterminado es @samp{-1}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string repository-sort
La forma de ordenar los repositorios de cada sección.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} lista-robots robots
Texto usado como contenido de la meta-etiqueta @code{robots}.

El valor predeterminado es @samp{("noindex" "nofollow")}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string root-desc
Texto impreso bajo la cabecera en la página de índice del repositorio.

El valor predeterminado es @samp{"a fast webinterface for the git dscm"}.<

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string root-readme
The content of the file specified with this option will be included verbatim
below the ``about'' link on the repository index page.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string root-title
Texto impreso como cabecera en la página de índice del repositorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean scan-hidden-path
If set to @samp{#t} and repository-directory is enabled,
repository-directory will recurse into directories whose name starts with a
period.  Otherwise, repository-directory will stay away from such
directories, considered as ``hidden''.  Note that this does not apply to the
@file{.git} directory in non-bare repos.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} lista snapshots
Texto que especifica el conjunto predeterminado de formatos de instantánea
para los que cgit genera enlaces.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} directorio-repositorio repository-directory
Nombre del directorio en el que se buscarán repositorios (representa
@code{scan-path}).

El valor predeterminado es @samp{"/srv/git"}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string section
Nombre actual de la sección de repositorios - todos los repositorios
definidos tras esta opción heredarán el nombre actual de sección.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string section-sort
Opción que, cuando tiene valor @samp{1}, ordenará las secciones en el
listado de repositorios por nombre.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer section-from-path
Número que, si se define antes de repository-directory, especifica cuantos
elementos de ruta de cada ruta de repositorio se usarán como nombre de
sección predeterminado.

El valor predeterminado es @samp{0}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} boolean side-by-side-diffs?
Si se proporciona el valor @samp{#t} se muestran las diferencias lado a lado
en vez de usar el formato universal de manera predeterminada.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} file-object source-filter
Especifica la orden que se ejecutará para dar formato a los ficheros (blob)
de texto plano en la vista de árbol.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer summary-branches
Specifies the number of branches to display in the repository ``summary''
view.

El valor predeterminado es @samp{10}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer summary-log
Specifies the number of log entries to display in the repository ``summary''
view.

El valor predeterminado es @samp{10}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} integer summary-tags
Specifies the number of tags to display in the repository ``summary'' view.

El valor predeterminado es @samp{10}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string strict-export
Nombre de fichero que, en caso de especificarse, debe estar presente en el
repositiorio para que se permita el acceso de cgit a dicho repositorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} string virtual-root
URL que, en caso de especificarse, se usará como raíz de todos los enlaces
de cgit.

El valor predeterminado es @samp{"/"}.

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} lista-repository-cgit-configuration repositories
Lista de registros @dfn{cgit-repo} usados con la configuración.

El valor predeterminado es @samp{()}.

Los campos disponibles de @code{repository-cgit-configuration} son:

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-list snapshots
Una máscara de los formatos de instantánea para este repositorio para los
que cgit genera enlaces, restringida por la opción de configuración global
@code{snapshots}.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-file-object source-filter
Sustituye al valor predeterminado de @code{source-filter}.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string url
La URL relativa usada para el acceso al repositorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-file-object about-filter
Sustituye al valor predeterminado de @code{about-filter}.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string branch-sort
Cuando se proporciona el valor @samp{age}, activa la ordenación por fecha en
la lista de referencias de ramas, y cuando se proporciona @samp{name} se
activa la ordenación por nombre de rama.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-list clone-url
Una lista de URL que se pueden usar para clonar el repositorio.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-file-object commit-filter
Sustituye al valor predeterminado de @code{commit-filter}.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string commit-sort
Opción que, cuando tiene valor @samp{date}, activa la ordenación estricta
por fecha en el registro histórico de revisiones, y cuando tiene valor
@samp{topo} activa la ordenación estricta topológica.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string defbranch
The name of the default branch for this repository.  If no such branch
exists in the repository, the first branch name (when sorted) is used as
default instead.  By default branch pointed to by HEAD, or ``master'' if
there is no suitable HEAD.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string desc
El valor a mostrar como descripción del repositorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string homepage
El valor a mostrar como página web principal del repositorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-file-object email-filter
Sustituye al valor predeterminado de @code{email-filter}.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} maybe-repo-boolean enable-commit-graph?
Esta opción se puede usar para forzar el valor de la opción de configuración
global @code{enable-commit-graph?}.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} maybe-repo-boolean enable-log-filecount?
Esta opción se puede usar para forzar el valor de la opción de configuración
global @code{enable-log-filecount?}.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} maybe-repo-boolean enable-log-linecount?
Esta opción se puede usar para forzar el valor de la opción de configuración
global @code{enable-log-linecount?}.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} maybe-repo-boolean enable-remote-branches?
Opción que, cuando se proporciona el valor @samp{#t}, hace que cgit muestre
ramas remotas en las vistas de resumen ("summary") y de referencias
("refs").

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} maybe-repo-boolean enable-subject-links?
Esta opción se puede usar para forzar el valor de la opción de configuración
global @code{enable-subject-links?}.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} maybe-repo-boolean enable-html-serving?
Esta opción se puede usar para forzar el valor de la opción de configuración
global @code{enable-html-serving?}.

El valor predeterminado es @samp{disabled}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-boolean hide?
Opción que, cuando tiene valor @samp{#t}, oculta el repositorio en el
índice.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-boolean ignore?
Opción que, cuando tiene valor @samp{#t}, ignora el repositorio.

El valor predeterminado es @samp{#f}

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-file-object logo
URL que especifica la fuente de una imagen que se usará como logo en las
páginas de este repositorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string logo-link
URL que se carga al pulsar la imagen del logo de cgit.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-file-object owner-filter
Sustituye al valor predeterminado de @code{owner-filter}.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string module-link
Texto que se usará como la cadena de formato de un enlace cuando un
submódulo se imprima en el listado de un directorio. Los parámetros para la
cadena de formato son la ruta y el SHA1 de la revisión del submódulo.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} ruta-enlace-módulo module-link
Texto que se usará como la cadena de formato de un enlace cuando un
submódulo con la ruta de subdirectorio especificada se imprima en el listado
de un directorio.

El valor predeterminado es @samp{()}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string max-stats
Sustituye al máximo periodo estadístico predeterminado.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string name
El valor a mostrar como nombre del repositorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string owner
Un valor usado para identificar a la propietaria del repositorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string path
La ruta absoluta al directorio del repositorio.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string readme
A path (relative to repo) which specifies a file to include verbatim as the
``About'' page for this repo.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-string section
Nombre actual de la sección de repositorios - todos los repositorios
definidos tras esta opción heredarán el nombre actual de sección.

El valor predeterminado es @samp{""}.

@end deftypevr

@deftypevr {parámetro de @code{repository-cgit-configuration}} repo-list extra-options
Opciones adicionales a agregar al final del fichero cgitrc.

El valor predeterminado es @samp{()}.

@end deftypevr

@end deftypevr

@deftypevr {parámetro de @code{cgit-configuration}} lista extra-options
Opciones adicionales a agregar al final del fichero cgitrc.

El valor predeterminado es @samp{()}.

@end deftypevr


@c %end of fragment

No obstante, puede ser que únicamente desee usar un fichero @code{cgitrc}
existente. En ese caso, puede proporcionar @code{opaque-cgit-configuration}
como un registro a @code{cgit-service-type}. Como su nombre en inglés
indica, una configuración opaca no tiene gran capacidad reflexiva.

Los campos disponibles de @code{opaque-cgit-configuration} son:

@deftypevr {parámetro de @code{opaque-cgit-configuration}} package cgit
El paquete cgit.
@end deftypevr

@deftypevr {parámetro de @code{opaque-cgit-configuration}} string string
El contenido de @code{cgitrc}, como una cadena.
@end deftypevr

Por ejemplo, si su @code{cgitrc} es simplemente la cadena vacía, puede
instanciar un servicio cgit de esta manera:

@lisp
(service cgit-service-type
         (opaque-cgit-configuration
          (cgitrc "")))
@end lisp

@subsubheading Servicio Gitolite

@cindex servicio Gitolite
@cindex Git, alojamiento
@uref{https://gitolite.com/gitolite/, Gitolite} es una herramienta para el
almacenamiento de repositorios Git en un servidor central.

Gitolite puede manejar múltiples repositorios y usuarias, y permite una
configuración flexible de los permisos de las usuarias sobre los
repositorios.

El siguiente ejemplo configuraría Gitolite con la usuaria predeterminada
@code{git} y la clave pública SSH proporcionada.

@lisp
(service gitolite-service-type
         (gitolite-configuration
           (admin-pubkey (plain-file
                           "sunombre.pub"
                           "ssh-rsa AAAA... guix@@example.com"))))
@end lisp

Gitolite se configura a través de un repositorio de administración especial
que puede clonar, por ejemplo, si configuró Gitolite en @code{example.org},
ejecutaría la siguiente orden para clonar el repositorio de administración.

@example
git clone git@@example.com:gitolite-admin
@end example

Cuando se activa el servicio Gitolite, la clave @code{admin-pubkey}
proporcionada se insertará en el directorio @file{keydir} en el repositorio
gitolite-admin. Si esto resultase en un cambio en el repositorio, la
revisión se almacenaría con el mensaje ``gitolite setup by GNU Guix''.

@deftp {Tipo de datos} gitolite-configuration
Tipo de datos que representa la configuración de
@code{gitolite-service-type}.

@table @asis
@item @code{package} (predeterminado: @var{gitolite})
Paquete Gitolite usado.

@item @code{user} (predeterminada: @var{git})
Usuaria usada por Gitolite. Esta será la usuaria a la que se conectará
cuando acceda a Gitolite a través de SSH.

@item @code{group} (predeterminado: @var{git})
Grupo usado por Gitolite.

@item @code{home-directory} (predeterminado: @var{"/var/lib/gitolite"})
Directorio en el que se almacenará la configuración y repositorios de
Gitolite.

@item @code{rc-file} (predeterminado: @var{(gitolite-rc-file)})
Un objeto ``tipo-fichero'' (@pxref{Expresiones-G, objetos
``tipo-fichero''}), que representa la configuración de Gitolite.

@item @code{admin-pubkey} (predeterminada: @var{#f})
Un objeto ``tipo-fichero'' (@pxref{Expresiones-G, objetos ``tipo-fichero''})
usado para la configuración de Gitolite. Se insertará en el directorio
@file{keydir} dentro del repositorio gitolite-admin.

Para especificar la clave SSH como una cadena, use la función
@code{plain-file}.

@lisp
(plain-file "sunombre.pub" "ssh-rsa AAAA... guix@@example.com")
@end lisp

@end table
@end deftp

@deftp {Tipo de datos} gitolite-rc-file
Tipo de datos que representa el fichero RC de Gitolite.

@table @asis
@item @code{umask} (predeterminada: @code{#o0077})
Controla los permisos que Gitolite establece en los repositorios y sus
contenidos.

Un valor como @code{#o0027} proporcionará acceso de lectura al grupo usado
por Gitolite (predeterminado: @code{git}). Es necesario cuando se usa
Gitolite con software como cgit o gitweb.

@item @code{git-config-keys} (predeterminadas: @code{""})
Gitolite allows you to set git config values using the @samp{config}
keyword. This setting allows control over the config keys to accept.

@item @code{roles} (predeterminados: @code{'(("READERS" . 1) ("WRITERS" . ))})
Establece los nombres de rol que se permite usar a las usuarias que ejecuten
la orden perms.

@item @code{enable} (predeterminados: @code{'("help" "desc" "info" "perms" "writable" "ssh-authkeys" "git-config" "daemon" "gitweb")})
Esta configuración controla las órdenes y características activadas dentro
de Gitolite.

@end table
@end deftp


@node Servicios de juegos
@subsection Servicios de juegos

@subsubheading El servicio de La batalla por Wesnoth
@cindex wesnothd
@uref{https://wesnoth.org, La batalla por Wesnoth} es un juego de estrategia
táctica, de fantasía y basado en turnos, con varias campañas de una
jugadora, y partidas para múltiples jugadoras (tanto en red como
localmente).

@defvar {Variable Scheme} wesnothd-service-type
Tipo de servicio para el servicio wesnothd. Su valor debe ser un objeto
@code{wesnothd-configuration}.  Puede instanciarlo de esta manera para
ejecutar wesnothd con la configuración predeterminada:

@lisp
(service wesnothd-service-type)
@end lisp
@end defvar

@deftp {Tipo de datos} wesnothd-configuration
Tipo de datos que representa la configuración de @command{wesnothd}.

@table @asis
@item @code{package} (predeterminado: @code{wesnoth-server})
El paquete del servidor wesnoth usado.

@item @code{port} (predeterminado: @code{15000})
Número de puerto usado por el servidor.
@end table
@end deftp


@node Servicio PAM Mount
@subsection Servicio PAM Mount
@cindex pam-mount

El módulo @code{(gnu services pam-mount)} proporciona un servicio que
permite a las usuarias montar volúmenes cuando ingresen al sistema. Debe ser
capaz de montar cualquier formato de volumen que el sistema permita.

@defvar {Variable Scheme} pam-mount-service-type
Tipo de servicio para la implementación de PAM Mount.
@end defvar

@deftp {Tipo de datos} pam-mount-configuration
Tipo de datos que representa la configuración de PAM Mount.

Toma los siguientes parámetros:

@table @asis
@item @code{rules}
Las reglas de configuración que se usarán para generar
@file{/etc/security/pam_mount.conf.xml}.

Las reglas de configuración son elementos SXML (@pxref{SXML,,, guile, GNU
Guile Reference Manual}), y las reglas predeterminadas no incluyen el
montado de ningún dispositivo para ningún usuario en el ingreso al sistema:

@lisp
`((debug (@@ (enable "0")))
  (mntoptions (@@ (allow ,(string-join
                          '("nosuid" "nodev" "loop"
                            "encryption" "fsck" "nonempty"
                            "allow_root" "allow_other")
                          ","))))
  (mntoptions (@@ (require "nosuid,nodev")))
  (logout (@@ (wait "0")
             (hup "0")
             (term "no")
             (kill "no")))
  (mkmountpoint (@@ (enable "1")
                   (remove "true"))))
@end lisp

Some @code{volume} elements must be added to automatically mount volumes at
login.  Here's an example allowing the user @code{alice} to mount her
encrypted @env{HOME} directory and allowing the user @code{bob} to mount the
partition where he stores his data:

@lisp
(define reglas-pam-mount
`((debug (@@ (enable "0")))
            (volume (@@ (user "alicia")
                       (fstype "crypt")
                       (path "/dev/sda2")
                       (mountpoint "/home/alicia")))
            (volume (@@ (user "rober")
                       (fstype "auto")
                       (path "/dev/sdb3")
                       (mountpoint "/home/rober/data")
                       (options "defaults,autodefrag,compress")))
            (mntoptions (@@ (allow ,(string-join
                                    '("nosuid" "nodev" "loop"
                                      "encryption" "fsck" "nonempty"
                                      "allow_root" "allow_other")
                                    ","))))
            (mntoptions (@@ (require "nosuid,nodev")))
            (logout (@@ (wait "0")
                       (hup "0")
                       (term "no")
                       (kill "no")))
            (mkmountpoint (@@ (enable "1")
                             (remove "true")))))

(service pam-mount-service-type
         (pam-mount-configuration
           (rules reglas-pam-mount)))
@end lisp

La lista completa de opciones posibles se puede encontrar en la página de
@command{man} de
@uref{http://pam-mount.sourceforge.net/pam_mount.conf.5.html,
pam_mount.conf}.
@end table
@end deftp


@node Servicios de Guix
@subsection Servicios de Guix

@subsubheading Servicio de datos de Guix
El @uref{http://data.guix.gnu.org,servicio de datos de Guix} procesa,
almacena y proporciona datos acerca de GNU Guix. Esto incluye información
sobre paquetes, derivaciones y avisos de ``lint''.

Los datos se almacenan en una base de datos PostgreSQL, y están disponibles
a través de una interfaz web.

@defvar {Variable Scheme} guix-data-service-type
Tipo de servicio para el servicio de datos de Guix. Su valor debe ser un
objeto @code{guix-data-service-configuration}. El servicio opcionalmente
extiende el servicio getmail, puesto que la lista de correo guix-commits se
usa para conocer los cambios del repositorio git de Guix.
@end defvar

@deftp {Tipo de datos} guix-data-service-configuration
Tipo de datos que representa la configuración del servicio de datos de Guix.

@table @asis
@item @code{package} (predeterminado: @code{guix-data-service})
El paquete del servicio de datos de Guix usado.

@item @code{user} (usuaria: @code{"guix-data-service"})
Usuaria del sistema que ejecuta el servicio.

@item @code{group} (predeterminado: @code{"guix-data-service"})
Grupo del sistema que ejecuta el servicio.

@item @code{port} (predeterminado: @code{8765})
El puerto al que se asociará el servicio web.

@item @code{host} (predeterminada: @code{"127.0.0.1"})
El nombre de máquina al que se asociará el servicio web.

@item @code{getmail-idle-mailboxes} (predeterminado: @code{#f})
Si se proporciona un valor, es la lista de bandejas de correo en las cuales
la configuración debe indicar su lectura al servicio getmail.

@item @code{commits-getmail-retriever-configuration} (predeterminado: @code{#f})
Si se proporciona un valor, es el objeto
@code{getmail-retriever-configuration} con el que se configura getmail para
obtener recibir el correo de la lista guix-commits.

@item @code{extra-options} (predeterminadas: @var{'()})
Opciones de línea de órdenes adicionales para @command{guix-data-service}.

@item @code{extra-process-jobs-options} (predeterminadas: @var{'()})
Opciones de línea de órdenes adicionales para
@command{guix-data-service-process-jobs}.

@end table
@end deftp

@node Servicios de Linux
@subsection Servicios de Linux

@cindex oom
@cindex gestor de llenado de la memoria (out of memory killer)
@cindex earlyoom
@cindex daemon Early OOM (early out of memory)
@subsubheading Servicio Early OOM

@uref{https://github.com/rfjakob/earlyoom,Early OOM}, también conocido como
Earlyoom, es un daemon minimalista de gestión del llenado de la
memoria@footnote{NdT: Del inglés Out Of Memory.} que se ejecuta en espacio
de usuaria y proporciona una alternativa al gestor del propio núcleo con una
respuesta más inmediata y más configurable. Es útil para prevenir que el
sistema no responda cuando se queda sin memoria.

@deffn {Variable Scheme} earlyoom-service-type
Tipo de servicio para el servicio @command{earlyoom}, el daemon Early
OOM. Su valor debe ser un objeto @code{earlyoom-configuration}, descrito a
continuación. El servicio se puede instanciar con su configuración
predeterminada de esta manera:

@lisp
(service earlyoom-service-type)
@end lisp
@end deffn

@deftp {Tipo de datos} earlyoom-configuration
Esta es el registro de configuración para el servicio
@code{earlyoom-service-type}.

@table @asis
@item @code{earlyoom} (predeterminado: @var{earlyoom})
El paquete Earlyoom usado.

@item @code{minimum-available-memory} (predeterminado: @code{10})
El límite inferior de memoria @emph{disponible}, en porcentaje.

@item @code{minimum-free-swap} (predeterminado: @code{10})
El límite inferior de memoria de intercambio libre, en porcentaje.

@item @code{prefer-regexp} (predeterminado: @code{#f})
Una expresión regular (como cadena) que corresponda con los nombres de los
procesos que preferiblemente deban pararse.

@item @code{avoid-regexp} (predeterminado: @code{#f})
Una expresión regular (como cadena) que corresponda con los nombres de los
procesos que @emph{no} deban pararse.

@item @code{memory-report-interval} (predeterminado: @code{0})
Intervalo en segundos con el cual se imprime el informe de memoria. No está
activo de manera predeterminada.

@item @code{ignore-positive-oom-score-adj?} (predeterminado: @code{#f})
Valor booleano que indica si se realizan ajustes positivos en
@file{/proc/*/oom_score_adj}.

@item @code{show-debug-messages?} (predeterminado: @code{#f})
Valor booleano que indica si los mensajes de depuración deben
imprimirse. Los registros se almacenan en @file{/var/log/earlyoom.log}.

@item @code{send-notification-command} (predeterminada: @code{#f})
Puede usarse para proporcionar una orden personalizada para el envío de
notificaciones.
@end table
@end deftp

@cindex modprobe
@cindex cargador de módulos del núcleo
@subsubheading Servicio de carga de módulos del núcleo

El servicio de carga de módulos del núcleo permite la carga de módulos del
núcleo durante el arranque. Esto es especialmente útil para módulos que no
se cargan automáticamente y deben cargarse de forma manual, como es el caso
con @code{ddcci}.

@deffn {Variable Scheme} kernel-module-loader-service-type
Tipo de servicio para la carga de módulos del núcleo durante el arranque con
@command{modprobe}. Su valor debe ser una lista de cadenas que representan
nombres de módulo. Por ejemplo, la carga de los controladores proporcionados
por @code{ddcci-driver-linux} en modo de depuración proporcionando algunos
parámetros para el módulo puede realizarse de la siguiente manera:

@lisp
(use-modules (gnu) (gnu services))
(use-package-modules linux)
(use-service-modules linux)

(define ddcci-config
  (plain-file "ddcci.conf"
              "options ddcci dyndbg delay=120"))

(operating-system
  ...
  (services (cons* (service kernel-module-loader-service-type
                            '("ddcci" "ddcci_backlight"))
                   (simple-service 'ddcci-config etc-service-type
                                   (list `("modprobe.d/ddcci.conf"
                                           ,ddcci-config)))
                   %base-services))
  (kernel-loadable-modules (list ddcci-driver-linux)))
@end lisp
@end deffn

@node Hurd Services
@subsection Hurd Services

@defvr {Scheme Variable} hurd-console-service-type
This service starts the fancy @code{VGA} console client on the Hurd.

The service's value is a @code{hurd-console-configuration} record.
@end defvr

@deftp {Data Type} hurd-console-configuration
This is the data type representing the configuration for the
hurd-console-service.

@table @asis
@item @code{hurd} (default: @var{hurd})
The Hurd package to use.
@end table
@end deftp

@deffn {Scheme Procedure} hurd-etc-service @var{os}
This service implements a minimal @code{etc-service}, adding some specifics
for the Hurd.

It is part of the @code{hurd-default-essential-services}.
@end deffn

@defvr {Scheme Variable} hurd-getty-service-type
This service starts a tty using the Hurd @code{getty} program.

The service's value is a @code{hurd-getty-configuration} record.
@end defvr

@deftp {Data Type} hurd-getty-configuration
This is the data type representing the configuration for the
hurd-getty-service.

@table @asis
@item @code{hurd} (default: @var{hurd})
The Hurd package to use.

@item @code{tty}
The name of the console this Getty runs on---e.g., @code{"tty1"}.

@item @code{baud-rate} (default: @code{38400})
An integer specifying the baud rate of the tty.

@end table
@end deftp

@node Servicios misceláneos
@subsection Servicios misceláneos

@cindex huella dactilar
@subsubheading Servicio de huella dactilar

El módulo @code{(gnu services authentication)} proporciona un servicio DBus
para leer e identificar huellas dactilares mediante un sensor de huellas.

@defvr {Variable Scheme} fprintd-service-type
El tipo de servicio para @command{fprintd}, que proporciona la capacidad de
lectura de huellas dactilares.

@lisp
(service fprintd-service-type)
@end lisp
@end defvr

@cindex sysctl
@subsubheading Servicios de control del sistema

El módulo @code{(gnu services sysctl)} proporciona servicios para configurar
parámetros del núcleo durante el arranque.

@defvr {Variable Scheme} sysctl-service-type
El tipo de servicio para @command{sysctl}, que modifica parámetros del
núcleo bajo @file{/proc/sys}. Para activar el encaminamiento de tráfico IPv4
se puede instanciar de esta manera:

@lisp
(service sysctl-service-type
         (sysctl-configuration
           (settings '(("net.ipv4.ip_forward" . "1")))))
@end lisp
@end defvr

@deftp {Tipo de datos} sysctl-configuration
Tipo de datos que representa la configuración de @command{sysctl}.

@table @asis
@item @code{sysctl} (predeterminado: @code{(file-append procps "/sbin/sysctl"})
El ejecutable @command{sysctl} usado.

@item @code{settings} (predeterminados: @code{'()})
Una lista asociativa que especifica parámetros del núcleo y sus valores.
@end table
@end deftp

@cindex pcscd
@subsubheading Servicio del daemon de tarjetas inteligentes PC/SC

El módulo @code{(gnu services security-token)} proporciona el siguiente
servicio para ejecutar @command{pcscd}, el daemon de tarjetas inteligentes
PC/SC.  @command{pcscd} es el programa del daemon para pcsc-lite y el
framework MuscleCard. Es un gestor de recursos que coordina la comunicación
con lectores de tarjetas inteligentes, las propias tarjetas y los
identificadores criptográficos conectados al sistema.

@defvr {Variable Scheme} pcscd-service-type
Tipo de servicio para el servicio @command{pcscd}. Su valor debe ser un
objeto @code{pcscd-configuration}. Puede instanciarlo de esta manera para
ejecutar pcscd con la configuración predeterminada:

@lisp
(service pcscd-service-type)
@end lisp
@end defvr

@deftp {Tipo de datos} pcscd-configuration
Tipo de datos que representa la configuración de @command{pcscd}.

@table @asis
@item @code{pcsc-lite} (predeterminado: @code{pcsc-lite})
El paquete pcsc-lite que proporciona pcscd.
@item @code{usb-drivers} (predeterminado: @code{(list ccid)})
Lista de paquetes que proporcionan los controladores USB para pcscd. Se
espera que los controladores se encuentren en el directorio
@file{pcsc/drivers} del directorio del almacén del paquete.
@end table
@end deftp

@cindex lirc
@subsubheading Servicio Lirc

El módulo @code{(gnu services lirc)} proporciona el siguiente servicio.

@deffn {Procedimiento Scheme} lirc-service [#:lirc lirc] @
       [#:device #f] [#:driver #f] [#:config-file #f] @ [#:extra-options '()]
Devuelve un servicio que ejecuta @url{http://www.lirc.org,LIRC}, un daemon
que decodifica señales infrarrojas de dispositivos de control remoto.

De manera opcional, se pueden especificar @var{device}, @var{driver} y
@var{config-file} (nombre del fichero de configuración) may be specified.
Véase el manual de @command{lircd} para obtener más detalles.

Por último, @var{extra-options} es una lista de opciones adicionales para la
línea de órdenes proporcionada a @command{lircd}.
@end deffn

@cindex spice
@subsubheading Servicio Spice

El módulo @code{(gnu services spice)} proporciona el siguiente servicio.

@deffn {Procedimiento Scheme} spice-vdagent-service [#:spice-vdagent]
Devuelve un servicio que ejecuta @url{https://www.spice-space.org,VDAGENT},
un daemon que permite compartir el portapapeles con una máquina virtual y la
configuración de la resolución de la pantalla de la máquina virtual cuando
la ventana de la consola gráfica cambia de tamaño.
@end deffn

@cindex inputattach
@subsubheading Servicio inputattach

@cindex entrada de tablet, para Xorg
@cindex entrada de pantalla táctil, para Xorg
El servicio @uref{https://linuxwacom.github.io/, inputattach} permite el uso
de dispositivos de entrada como tabletas Wacom, pantallas táctiles, o
joysticks con el servidor gráfico Xorg.

@deffn {Variable Scheme} inputattach-service-type
Tipo de un servicio que ejecuta @command{inputattach} con un dispositivo y
reenvía los eventos que produzca.
@end deffn

@deftp {Tipo de datos} inputattach-configuration
@table @asis
@item @code{device-type} (predeterminado: @code{"wacom"})
Tipo del dispositivo al que conectarse. Ejecute @command{inputattach
--help}, del paquete @code{inputattach}, para ver la lista de tipos de
dispositivo implementados.

@item @code{device} (predeterminado: @code{"/dev/ttyS0"})
El nombre de fichero para la conexión al dispositivo.

@item @code{baud-rate} (predeterminado: @code{#f})
Tasa de transmisión usada para las conexiones serie. Debe ser un número o
@code{#f}.

@item @code{log-file} (predeterminado: @code{#f})
Si es verdadero, debe ser el nombre de un fichero en el que registrar los
mensajes.
@end table
@end deftp

@subsubheading Dictionary Service
@cindex diccionario
El módulo @code{(gnu services dict)} proporciona el servicio siguiente:

@defvr {Scheme Variable} dicod-service-type
This is the type of the service that runs the @command{dicod} daemon, an
implementation of DICT server (@pxref{Dicod,,, dico, GNU Dico Manual}).
@end defvr

@deffn {Procedimiento Scheme} dicod-service [#:config (dicod-configuration)]
Devuelve un servicio que ejecuta el daemon @command{dicod}, una
implementación del servidor DICT (@pxref{Dicod,,, dico, GNU Dico Manual}).

El parámetro opcional @var{config} especifica la configuración para
@command{dicod}, que debe ser un objeto @code{<dicod-configuration>}, de
manera predeterminada proporciona el diccionario colaborativo internacional
de Inglés de GNU.

Puede añadir @command{open localhost} en su fichero @file{~/.dico} para
hacer que @code{localhost} sea el servidor predeterminado de su cliente
@command{dico} (@pxref{Initialization File,,, dico, GNU Dico Manual}).
@end deffn

@deftp {Tipo de datos} dicod-configuration
Tipo de datos que representa la configuración de dicod.

@table @asis
@item @code{dico} (predeterminado: @var{dico})
El objeto paquete del servidor de diccionario GNU Dico.

@item @code{interfaces} (predeterminada: @var{'("localhost")})
Es la lista de direcciones IP y puertos, y posiblemente nombres de fichero
de sockets, en los que se debe escuchar (@pxref{Server Settings,
@code{listen} directive,, dico, GNU Dico Manual}).

@item @code{handlers} (predeterminados: @var{'()})
Lista de objetos @code{<dicod-handler>} que identifican los controladores
(instancias de módulos).

@item @code{databases} (predeterminada: @var{(list %dicod-database:gcide)})
Lista de objetos @code{<dicod-database>} que identifican los diccionarios
proporcionados.
@end table
@end deftp

@deftp {Tipo de datos} dicod-handler
Tipo de datos que representa un controlador de diccionario (instancia de un
módulo).

@table @asis
@item @code{name}
Nombre del controlador (instancia de un módulo).

@item @code{module} (predeterminado: @var{#f})
Nombre del módulo del controlador de dicod (instancia). Si es @code{#f}, el
módulo tiene el mismo nombre que el controlador. (@pxref{Módulos,,, dico,
GNU Dico Manual}).

@item @code{options}
Lista de cadenas o expresiones-G que representan los parámetros al módulo de
control
@end table
@end deftp

@deftp {Tipo de datos} dicod-database
Tipo de datos que representa una base de datos de diccionario.

@table @asis
@item @code{name}
Nombre de la base de datos, será usada en las órdenes DICT.

@item @code{handler}
Nombre del controlador de dicod (instancia de un módulo) usado por esta base
de datos (@pxref{Handlers,,, dico, GNU Dico Manual}).

@item @code{complex?} (predeterminado: @var{#f})
Determina si se usará la configuración compleja. La configuración compleja
necesita un objeto @code{<dicod-handler>}, que no es necesario en otro caso.

@item @code{options}
Lista de cadenas o expresiones-g que representan los parámetros para la base
de datos (@pxref{Databases,,, dico, GNU Dico Manual}).
@end table
@end deftp

@defvr {Variable Scheme} %dicod-database:gcide
Un objeto @code{<dicod-service>} que ofrece el diccionario internacional
colaborativo de inglés de GNU usando el paquete @code{gcide}.
@end defvr

A continuación se encuentra un ejemplo de configuración de
@code{dicod-service}.

@lisp
(dicod-service #:config
  (dicod-configuration
   (handlers (list (dicod-handler
                    (name "wordnet")
                    (module "dictorg")
                    (options
                     (list #~(string-append "dbdir=" #$wordnet))))))
   (databases (list (dicod-database
                     (name "wordnet")
                     (complex? #t)
                     (handler "wordnet")
                     (options '("database=wn")))
                    %dicod-database:gcide))))
@end lisp

@cindex Docker
@subsubheading Servicio Docker

El módulo @code{(gnu services docker)} proporciona los siguientes servicios.

@defvr {Variable Scheme} docker-service-type

Este es el tipo del servicio que ejecuta @url{https://www.docker.com,
Docker}, un daemon que puede ejecutar empaquetados de aplicaciones (a los
que a veces nos referimos como ``contenedores'') en entornos aislados.

@end defvr

@deftp {Tipo de datos} docker-configuration
Este es el tipo de datos que representa la configuración de Docker y
Containerd.

@table @asis

@item @code{package} (predeterminado: @code{docker})
El paquete de Docker usado.

@item @code{containerd} (predeterminado: @var{containerd})
El paquete Containerd usado.

@end table
@end deftp

@cindex Audit
@subsubheading Servicio Auditd

El módulo @code{(gnu services auditd)} proporciona el servicio siguiente:

@defvr {Variable Scheme} auditd-service-type

Este es el tipo del servicio que ejecuta
@url{https://people.redhat.com/sgrubb/audit/,auditd}, un daemon que
recolecta información relevante a la seguridad en su sistema.

Ejemplos de cosas que se pueden recolectar:

@enumerate
@item
Acceso a ficheros
@item
Llamadas al sistema
@item
Órdenes invocadas
@item
Intentos fallidos de ingreso en el sistema
@item
Activaciones de filtros en el cortafuegos
@item
Accesos de red
@end enumerate

Se puede usar @command{auditctl} del paquete @code{audit} para añadir o
eliminar eventos a recolectar (hasta el siguiente reinicio). Para hacer
permanente la recolección de dichos eventos, introduzca los parámetros de la
línea de órdenes de auditctl en @file{/etc/audit/audit.rules}. Se puede usar
@command{aureport} del paquete @code{audit} para ver un informe de todos los
eventos registrados. El daemon audit habitualmente registra los eventos en
el fichero @file{/var/log/audit}.

@end defvr

@deftp {Tipo de datos} auditd-configuration
Este es el tipo de datos que representa la configuración de auditd.

@table @asis

@item @code{audit} (predeterminado: @code{audit})
El paquete audit usado.

@end table
@end deftp

@defvr {Variable Scheme} singularity-service-type
Tipo de servicio que le permite ejecutar
@url{https://www.sylabs.io/singularity/, Singularity}, una herramienta
tipo-Docker para crear y ejecutar aplicaciones empaquetadas (también
conocidas como ``contenedores''). El valor para este servicio es el paquete
de Singularity usado.

El servicio no instala un daemon; en vez de ello, instala programas
auxiliares con con el bit setuid de root (@pxref{Programas con setuid}) de modo
que usuarias sin privilegios puedan ejecutar @command{singularity run} y
ordenes similares.
@end defvr

@cindex Nix
@subsubheading Servicio Nix

El módulo @code{(gnu services nix)} proporciona el siguiente servicio.

@defvr {Variable Scheme} nix-service-type

Tipo del servicio que ejecuta el daemon de construcción del gestor de
paquetes @url{https://nixos.org/nix/, Nix}. Este es un ejemplo de cómo
usarlo:

@lisp
(use-modules (gnu))
(use-service-modules nix)
(use-package-modules package-management)

(operating-system
  ;; @dots{}
  (packages (append (list nix)
                    %base-packages))

  (services (append (list (service nix-service-type))
                    %base-services)))
@end lisp

Tras @command{guix system reconfigure}, configure Nix para su usuaria:

@itemize
@item Añada un canal Nix y lance una actualización. Véase
@url{https://nixos.org/nix/manual/, Nix Package Manager Guide}.

@item Cree un enlace simbólico a su perfil y active el perfil de Nix:
@end itemize

@example
$ ln -s "/nix/var/nix/profiles/per-user/$USER/profile" ~/.nix-profile
$ source /run/current-system/profile/etc/profile.d/nix.sh
@end example

@end defvr

@node Programas con setuid
@section Programas con setuid

@cindex programas con setuid
Some programs need to run with ``root'' privileges, even when they are
launched by unprivileged users.  A notorious example is the @command{passwd}
program, which users can run to change their password, and which needs to
access the @file{/etc/passwd} and @file{/etc/shadow} files---something
normally restricted to root, for obvious security reasons.  To address that,
these executables are @dfn{setuid-root}, meaning that they always run with
root privileges (@pxref{How Change Persona,,, libc, The GNU C Library
Reference Manual}, for more info about the setuid mechanism).

El almacén en sí @emph{no puede} contener programas setuid: sería un
problema de seguridad puesto que cualquier usuaria del sistema puede
escribir derivaciones que pueblen el almacén (@pxref{El almacén}). Por tanto,
se usa un mecanismo diferente: en vez de cambiar el bit de setuid
directamente en los ficheros que se encuentran en el almacén, se permite que
la administradora del sistema @emph{declare} qué programas deberían tener
setuid de root.

El campo @code{setuid-programs} de una declaración @code{operating-system}
contiene una lista de expresiones-G que denotan nombres de programas que
tendrán setuid de root (@pxref{Uso de la configuración del sistema}). Por
ejemplo, el programa @command{passwd}, que es parte del paquete Shadow,
puede designarse con esta expresión-G (@pxref{Expresiones-G}):

@example
#~(string-append #$shadow "/bin/passwd")
@end example

Un conjunto predeterminado de programas con el bit setuid se define en la
variable @code{%setuid-programs} del módulo @code{(gnu system)}.

@defvr {Variable Scheme} %setuid-programs
Una lista de expresiones-G que denotan programas comunes que se marcan con
setuid de root.

La lista incluye órdenes como @command{passwd}, @command{ping}, @command{su}
y @command{sudo}.
@end defvr

Para su implementación, los programas con setuid reales se crean en el
directorio @file{/run/setuid-programs} durante la activación del
sistema. Los ficheros en este directorio hacen referencia a los binarios
``reales'', que están en el almacén.

@node Certificados X.509
@section Certificados X.509

@cindex HTTPS, certificados
@cindex certificados X.509
@cindex TLS
En las conexiones HTTPS a servidores Web (esto es, HTTP sobre el mecanismo
de seguridad de la capa de transporte, TLS) se envía a los programas
clientes un @dfn{certificado X.509} que el cliente puede usar para
@emph{autentificar} al servidor. Para hacerlo, los clientes verifican que el
certificado del servidor está firmado por una de las llamadas
@dfn{autoridades de certificación} (AC, CA en inglés). Pero para verificar
la firma de una AC, los clientes deben haber obtenido previamente el
certificado de dicha AC.

Los navegadores Web como GNU@tie{}IceCat incluyen su propio conjunto de
certificados de AC, de manera que pueden verificar las firmas
independientemente.

No obstante, a la mayor parte de otros programas que pueden comunicarse a
través de HTTPS---@command{wget}, @command{git}, @command{w3m}, etc.---se
les debe informar de dónde pueden encontrar los certificados de CA.

@cindex @code{nss-certs}
En Guix, esto se lleva a cabo mediante la adición de un paquete que
proporcione certificados en el campo @code{packages} de la declaración
@code{operating-system} (@pxref{Referencia de operating-system}). Guix incluye
un paquete de este tipo, @code{nss-certs}, compuesto por un conjunto de
certificados de CA proporcionados como parte de los servicios de seguridad
de red de Mozilla (NSS).

Fíjese que @emph{no} es parte de @code{%base-packages}, por lo que debe ser
añadido explícitamente. El directorio @file{/etc/ssl/certs}, donde la mayor
parte de las aplicaciones y bibliotecas buscarán los certificados de manera
predeterminada, enlaza a los certificados instalados de manera global.

Unprivileged users, including users of Guix on a foreign distro, can also
install their own certificate package in their profile.  A number of
environment variables need to be defined so that applications and libraries
know where to find them.  Namely, the OpenSSL library honors the
@env{SSL_CERT_DIR} and @env{SSL_CERT_FILE} variables.  Some applications add
their own environment variables; for instance, the Git version control
system honors the certificate bundle pointed to by the @env{GIT_SSL_CAINFO}
environment variable.  Thus, you would typically run something like:

@example
guix install nss-certs
export SSL_CERT_DIR="$HOME/.guix-profile/etc/ssl/certs"
export SSL_CERT_FILE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
export GIT_SSL_CAINFO="$SSL_CERT_FILE"
@end example

As another example, R requires the @env{CURL_CA_BUNDLE} environment variable
to point to a certificate bundle, so you would have to run something like
this:

@example
guix install nss-certs
export CURL_CA_BUNDLE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
@end example

Para otras aplicaciones puede tener que buscar la variable de entorno
necesaria en la documentación relevante.


@node Selector de servicios de nombres
@section Selector de servicios de nombres

@cindex selector de servicios de nombres
@cindex NSS
El módulo @code{(gnu system nss)} proporciona una interfaz con el fichero de
configuración del @dfn{selector de servicios de nombres} o @dfn{NSS}
(@pxref{NSS Configuration File,,, libc, The GNU C Library Reference
Manual}). En resumen, NSS es un mecanismo que permite la extensión de libc
con nuevos métodos de búsqueda de ``nombres'', lo que incluye nombres de
máquinas, nombres de servicios, cuentas de usuaria y más (@pxref{Selector de servicios de nombres, System Databases and Name Service Switch,, libc, The GNU C
Library Reference Manual}).

La configuración de NSS especifica, para cada base de datos del sistema, que
método de búsqueda debe ser usado, y cómo los varios métodos se enlazan
entre sí---por ejemplo, bajo qué circunstancias NSS deberá probar con el
siguiente método en la lista. La configuración de NSS se proporciona en el
campo @code{name-service-switch} de las declaraciones
@code{operating-system} (@pxref{Referencia de operating-system,
@code{name-service-switch}}).

@cindex nss-mdns
@cindex .local, búsqueda de nombres de máquina
Como ejemplo, la siguiente declaración configura NSS para que use el
@uref{https://0pointer.de/lennart/projects/nss-mdns/, motor
@code{nss-mdns}}, que permite las búsquedas de nombres de máquinas sobre DNS
multicast (mDNS) para nombres de máquinas terminados en @code{.local}:

@lisp
(name-service-switch
   (hosts (list %files    ;primero, comprueba /etc/hosts

                ;; Si lo anterior no funcionó, prueba
                ;; con 'mdns_minimal'.
                (name-service
                  (name "mdns_minimal")

                  ;; 'mdns_minimal' tiene autoridad sobre
                  ;; '.local'.  Cuando devuelve 'not-found,
                  ;; no es necesario intentarlo con los
                  ;; métodos siguientes.
                  (reaction (lookup-specification
                             (not-found => return))))

                ;; Si no, usa DNS.
                (name-service
                  (name "dns"))

                ;; Finalmente, prueba con 'mdns' "al completo".
                (name-service
                  (name "mdns")))))
@end lisp

No se preocupe: la variable @code{%mdns-host-lookup-nss} (véase a
continuación) contiene esta configuración, de manera que no tiene que
escribirla si todo lo que desea es que funcione la búsqueda de nombres de
máquina en @code{.local}.

Fíjese que, en este caso, además de establecer el valor de
@code{name-service-switch} en la declaración @code{operating-system}, es
necesario también usar el servicio @code{avahi-service-type}
(@pxref{Servicios de red, @code{avahi-service-type}}) o
@code{%desktop-services}, donde está incluido. Esto permite el acceso a
@code{nss-mdsn} desde el daemon de la caché del servicio de nombres
(@pxref{Servicios base, @code{nscd-service}}).

Por conveniencia, las siguientes variables proporcionan configuraciones NSS
típicas.

@defvr {Variable Scheme} %default-nss
Esta es la configuración predeterminada del selector de servicios de
nombres, un objeto @code{name-service-switch}.
@end defvr

@defvr {Variable Scheme} %mdns-host-lookup-nss
Esta es la configuración del selector de servicios de nombres que permite la
búsqueda de nombres de máquinas por DNS multicast (mDNS) para nombres de
máquinas terminados en @code{.local}.
@end defvr

La referencia de la configuración del selector de servicios de nombres se
proporciona a continuación. Tiene una asociación directa con el formato del
fichero de configuración de la biblioteca C, por lo que se recomienda el
manual de la biblioteca C para obtener más información (@pxref{NSS
Configuration File,,, libc, The GNU C Library Reference Manual}). En
comparación con el formato del fichero de configuración del NSS de libc, no
solo tiene solo la ventaja de la cálida sensación proporcionada por la
adición de paréntesis que tanto nos gustan, sino que también tiene
comprobaciones estáticas: conocerá los errores sintácticos y tipográficos
con la ejecución de @command{guix system}.

@deftp {Tipo de datos} name-service-switch

El tipo de datos que representa la configuración del selector de servicios
de nombres (NSS). Cada campo a continuación representa una de las bases de
datos del sistema admitidas.

@table @code
@item aliases
@itemx ethers
@itemx group
@itemx gshadow
@itemx hosts
@itemx initgroups
@itemx netgroup
@itemx networks
@itemx password
@itemx public-key
@itemx rpc
@itemx services
@itemx shadow
Las bases de datos del sistema que maneja el NSS. Cada uno de estos campos
debe ser una lista de objetos @code{<name-service>} (véase a continuación).
@end table
@end deftp

@deftp {Tipo de datos} name-service

Este es el tipo de datos que representa un servicio de nombres real y la
acción de búsqueda asociada.

@table @code
@item name
Una cadena que denota el nombre de servicio (@pxref{Services in the NSS
configuration,,, libc, The GNU C Library Reference Manual}).

Fíjese que los servicios de nombres enumerados aquí deben ser visibles para
nscd. Esto se consigue mediante la adición del parámetro
@code{#:name-services} a @code{nscd-service} con la lista de paquetes que
proporcionan los servicios de nombres necesarios (@pxref{Servicios base,
@code{nscd-service}}).

@item reaction
Una acción especificada mediante el uso del macro
@code{lookup-specification} (@pxref{Actions in the NSS configuration,,,
libc, The GNU C Library Reference Manual}). Por ejemplo:

@lisp
(lookup-specification (unavailable => continue)
                      (success => return))
@end lisp
@end table
@end deftp

@node Disco en RAM inicial
@section Disco en RAM inicial

@cindex initrd
@cindex disco inicial de RAM
Para el propósito del arranque inicial, se le proporciona al núcleo
Linux-libre un @dfn{disco inicial de RAM}, o @dfn{initrd}. Un initrd
contiene un sistema de ficheros raíz temporal así como un guión de
inicialización. Este último es responsable del montaje del sistema de
ficheros raíz real, así como de la carga de cualquier módulo del núcleo que
pueda ser necesario para esta tarea.

El campo @code{initrd-modules} de una declaración @code{operating-system} le
permite especificar qué módulos del núcleo Linux-libre deben estar
disponibles en el initrd. En particular, aquí es donde se debe enumerar los
módulos que controlen realmente el disco duro donde su partición raíz se
encuentre---aunque el valor predeterminado de @code{initrd-modules} debería
cubrir la mayor parte de casos de uso. Por ejemplo, en caso de necesitar el
módulo @code{megaraid_sas} además de los módulos predeterminados para poder
acceder a sistema de ficheros raíz, se podría escribir:

@lisp
(operating-system
  ;; @dots{}
  (initrd-modules (cons "megaraid_sas" %base-initrd-modules)))
@end lisp

@defvr {Variable Scheme} %base-initrd-modules
Esta es la lista de módulos del núcleo que se incluyen en el initrd
predeterminado.
@end defvr

Más allá, si necesita personalizaciones de un nivel más bajo, el campo
@code{initrd} de una declaración @code{operating-system} le permite
especificar qué initrd desea usar. El módulo @code{(gnu system
linux-initrd)} proporciona tres formas de construir un initrd: el
procedimiento de alto nivel @code{base-initrd} y los procedimientos de bajo
nivel @code{raw-initrd} y @code{expression->initrd}.

El procedimiento @code{base-initrd} está pensado para cubrir la mayor parte
de usos comunes. Por ejemplo, si desea añadir algunos módulos del núcleo que
deben cargarse durante el arranque, puede definir el campo @code{initrd} de
la declaración de sistema operativo de esta forma:

@lisp
(initrd (lambda (sistemas-de-ficheros . resto)
          ;; Crea un initrd estándar pero configura la red
          ;; con los parámetros que QEMU espera por omisión.
          (apply base-initrd sistemas-de-ficheros
                 #:qemu-networking? #t
                 resto)))
@end lisp

El procedimiento @code{base-initrd} también maneja casos de uso comunes que
implican el uso del sistema en un anfitrión QEMU, o como un sistema ``live''
con un sistema de ficheros raíz volátil.

El procedimiento @code{base-initrd} se construye sobre el procedimiento
@code{raw-initrd}. Al contrario que @code{base-initrd}, @code{raw-initrd} no
funciona a alto nivel, como sería intentar deducir qué módulos del núcleo y
paquetes deben incluirse en el initrd. Un ejemplo de uso de
@code{raw-initrd} es cuando una usuaria tiene personalizada una
configuración del núcleo Linux y los módulos predeterminados del núcleo que
incluye @code{base-initrd} no están disponibles.

El disco inicial de RAM producido por @code{base-initrd} o @code{raw-initrd}
inspecciona varias opciones proporcionadas por la línea de órdenes al núcleo
Linux (esto es, argumentos pasados a través de la orden @code{linux} de
GRUB, o de la opción @code{-append} de QEMU), notablemente:

@table @code
@item --load=@var{arranque}
Indica al disco de RAM inicial que cargue @var{arranque}, un fichero que
contiene un programa Scheme, una vez haya montado el sistema de ficheros
raíz.

Guix usa esta opción para proporcionar el control a un programa de arranque
que ejecuta los programas de activación de servicios y lanza
GNU@tie{}Shepherd, el sistema de inicialización.

@item --root=@var{raíz}
Mount @var{root} as the root file system.  @var{root} can be a device name
like @code{/dev/sda1}, a file system label, or a file system UUID.  When
unspecified, the device name from the root file system of the operating
system declaration is used.

@item --system=@var{sistema}
Hace que @file{/run/booted-system} y @file{/run/current-system} apunten a
@var{sistema}.

@item modprobe.blacklist=@var{módulos}@dots{}
@cindex módulo, lista negra
@cindex lista negra, de módulos del núcleo
Indica al disco inicial de RAM así como a la orden @command{modprobe} (del
paquete kmod) que deben negarse a cargar @var{módulos}. @var{módulos} debe
ser una lista separada por comas de nombres de módulos---por ejemplo,
@code{usbkbd,9pnet}.

@item --repl
Inicia una sesión interactiva (REPL) desde el disco inicial de RAM antes de
que intente cargar los módulos del núcleo y del montaje del sistema de
ficheros raíz. Nuestro departamento comercial lo llama
@dfn{arranca-en-Guile}. Como amante de Scheme, lo adorará. @xref{Using Guile
Interactively,,, guile, GNU Guile Reference Manual}, para más información
sobre sesiones interactivas Guile.

@end table

Una vez conocidas todas las características que proporcionan los discos
iniciales de RAM que producen @code{base-initrd} y @code{raw-initrd}, a
continuación veremos cómo usarlas y personalizarlos más aún.

@cindex initrd
@cindex disco inicial de RAM
@deffn {Procedimiento Scheme} raw-initrd @var{sistemas-de-ficheros} @
       [#:linux-modules '()] [#:mapped-devices '()] @ [#:keyboard-layout #f] @
[#:helper-packages '()] [#:qemu-networking? #f] [#:volatile-root? #f] Return
a derivation that builds a raw initrd.  @var{file-systems} is a list of file
systems to be mounted by the initrd, possibly in addition to the root file
system specified on the kernel command line via @option{--root}.
@var{linux-modules} is a list of kernel modules to be loaded at boot time.
@var{mapped-devices} is a list of device mappings to realize before
@var{file-systems} are mounted (@pxref{Dispositivos traducidos}).
@var{helper-packages} is a list of packages to be copied in the initrd. It
may include @code{e2fsck/static} or other packages needed by the initrd to
check the root file system.

Cuando su valor es verdadero, @var{keyboard-layout} es un registro
@code{<keyboard-layout>} que denota la distribución de teclado en consola
deseada. Esto se realiza previamente a que los dispositivos configurados en
@var{mapped-devices} se inicien y antes de que los sistemas de ficheros en
@var{file-systems} se monten, de manera que, en caso de que la usuaria
tuviese que introducir una contraseña o usar la sesión interactiva, esto
suceda usando la distribución de teclado deseada.

Cuando @var{qemu-networking?} es verdadero, configura la red con los
parámetros QEMU estándar. Cuando @var{virtio?} es verdadero, carga módulos
adicionales para que la imagen en RAM pueda ser usada como un sistema
virtualizado por QEMU con controladores paravirtualizados de E/S.

Cuando @var{volatile-root?} es verdadero, el sistema de ficheros raíz tiene
permisos de escritura pero cualquier cambio realizado se perderá.
@end deffn

@deffn {Procedimiento Scheme} base-initrd @var{sistemas-de-ficheros} @
       [#:mapped-devices '()] [#:keyboard-layout #f] @ [#:qemu-networking? #f]
[#:volatile-root? #f] @ [#:linux-modules '()] Return as a file-like object a
generic initrd, with kernel modules taken from @var{linux}.
@var{file-systems} is a list of file-systems to be mounted by the initrd,
possibly in addition to the root file system specified on the kernel command
line via @option{--root}.  @var{mapped-devices} is a list of device mappings
to realize before @var{file-systems} are mounted.

Cuando su valor es verdadero, @var{keyboard-layout} es un registro
@code{<keyboard-layout>} que denota la distribución de teclado en consola
deseada. Esto se realiza previamente a que los dispositivos configurados en
@var{mapped-devices} se inicien y antes de que los sistemas de ficheros en
@var{file-systems} se monten, de manera que, en caso de que la usuaria
tuviese que introducir una contraseña o usar la sesión interactiva, esto
suceda usando la distribución de teclado deseada.

@var{qemu-networking?} y @var{volatile-root?} funcionan como en
@code{raw-initrd}.

El initrd incorpora automáticamente todos los módulos del núcleo necesarios
para @var{sistemas-de-ficheros} y para las opciones proporcionadas. Módulos
del núcleo adicionales pueden proporcionarse a través de
@var{linux-modules}. Se añadirán al initrd y se cargarán en tiempo de
arranque en el orden que aparezcan.
@end deffn

No es necesario decir que los initrd que producimos y usamos embeben un
Guile enlazado estáticamente, y que el programa de inicialización es un
programa Guile. Esto proporciona mucha flexibilidad. El procedimiento
@code{expression->initrd} construye un initrd de ese tipo, una vez
proporcionado el programa a ejecutar en dicho initrd.

@deffn {Procedimiento Scheme} expression->initrd @var{exp} @
       [#:guile %guile-3.0-static-stripped] [#:name "guile-initrd"] Return as a
file-like object a Linux initrd (a gzipped cpio archive)  containing
@var{guile} and that evaluates @var{exp}, a G-expression, upon booting.  All
the derivations referenced by @var{exp} are automatically copied to the
initrd.
@end deffn

@node Configuración del gestor de arranque
@section Configuración del gestor de arranque

@cindex bootloader
@cindex cargador de arranque

El sistema operativo permite varios cargadores de arranque. El cargador de
arranque se configura mediante el uso de la declaración
@code{bootloader-configuration}. Todos los campos de esta estructura son
independientes del cargador de arranque excepto uno, @code{bootloader}, que
indica el cargador de arranque a configurar e instalar.

Algunos de los cargadores de arranque no inspeccionan todos los campos de
@code{bootloader-configuration}. Por ejemplo, el cargador de arranque
extlinux no permite temas y por lo tanto ignora el campo @code{theme}.

@deftp {Tipo de datos} bootloader-configuration
El tipo de una declaración de configuración del cargador de arranque.

@table @asis

@item @code{bootloader}
@cindex EFI, cargador de arranque
@cindex UEFI, cargador de arranque
@cindex BIOS, cargador de arranque
El cargador de arranque usado, como un objeto @code{bootloader}. De momento
se aceptan @code{grub-bootloader}, @code{grub-efi-bootloader},
@code{extlinux-bootloader} y @code{u-boot-bootloader}.

@vindex grub-efi-bootloader
@code{grub-efi-bootloader} permite el arranque en sistemas modernos que usan
la @dfn{interfaz extendida de firmware unificada} (UEFI). Es el que debería
ser usado si la imagen de instalación contiene un directorio
@file{/sys/firmware/efi} cuando la arranca en su sistema.

@vindex grub-bootloader
@code{grub-bootloader} permite el arranque en máquinas basadas en Intel en
modo ``antiguo'' BIOS.

@cindex ARM, cargadores de arranque
@cindex AArch64, cargadores de arranque
Los cargadores de arranque se describen en los módulos @code{(gnu bootloader
@dots{})}. En particular, @code{(gnu bootloader u-boot)} contiene
definiciones de cargadores de arranque para un amplio rango de sistemas ARM
y AArch64, mediante el uso del @uref{https://www.denx.de/wiki/U-Boot/,
cargador de arranque U-Boot}.

@item @code{target}
Una cadena que indica donde se instalará el cargador de arranque.

La interpretación depende del cargador de arranque en cuestión. Para
@code{grub-bootloader}, por ejemplo, debe ser un nombre de dispositivo que
entienda la orden @command{install} del cargador de arranque, como
@code{/dev/sda} o @code{(hd0)} (@pxref{Invoking grub-install,,, grub, GNU
GRUB Manual}). Para @code{grub-efi-bootloader}, debe apuntar al punto de
montaje del sistema de ficheros EFI, habitualmente @file{/boot/efi}.

@item @code{menu-entries} (predeterminadas: @code{()})
Una lista posiblemente vacía de objetos @code{menu-entry} (véase a
continuación), que indican entradas que deben aparecer en el menú del
cargador de arranque, además de la entrada del sistema actual y la entrada
que apunta a generaciones previas del sistema.

@item @code{default-entry} (predeterminada: @code{0})
El índice de la entrada del menú de arranque por omisión. El índice 0 es
para la entrada del sistema actual.

@item @code{timeout} (predeterminado: @code{5})
El número de segundos que se esperará entrada por el teclado antes de
arrancar. El valor 0 indica que se debe arrancar de forma inmediata, y -1
que se debe esperar indefinidamente.

@cindex distribución de teclado, para el gestor de arranque
@item @code{keyboard-layout} (predeterminada: @code{#f})
Si es @code{#f}, el menú del cargador de arranque (si existe) usa la
distribución de teclado predeterminada, habitualmente inglés estadounidense
(``qwerty'').

En otro caso, debe ser un objeto @code{keyboard-layout} (@pxref{Distribución de teclado}).

@quotation Nota
Esta opción se ignora actualmente por todos los cargadores de arranque menos
@code{grub} y @code{grub-efi}.
@end quotation

@item @code{theme} (predeterminado: @var{#f})
El objeto del tema del cargador de arranque que describe el tema usado. Si
no se proporciona ningún tema, algunos cargadores de arranque pueden usar un
tema por omisión, lo cual es cierto en GRUB.

@item @code{terminal-outputs} (predeterminadas: @code{'(gfxterm)})
Los terminales de salida que se usarán para el menú de arranque, como una
lista de símbolos. GRUB acepta los valores: @code{console}, @code{serial},
@code{serial_@{0-3@}}, @code{gfxterm}, @code{vga_text}, @code{mda_text},
@code{morse} y @code{pkmodem}. Este campo corresponde con la variable
@code{GRUB_TERMINAL_OUTPUT} (@pxref{Simple configuration,,, grub, GNU GRUB
manual}).

@item @code{terminal-inputs} (predeterminadas: @code{'()})
Los terminales de entrada que se usarán para el menú de arranque, como una
lista de símbolos. Para GRUB, el valor predeterminado es el terminal nativo
de la plataforma determinado en tiempo de ejecución. GRUB acepta los
valores: @code{console}, @code{serial}, @code{serial@{0-3@}},
@code{at_keyboard} y @code{usb_keyboard}. Este campo corresponde a la
variable GRUB @code{GRUB_TERMINAL_INPUT} (@pxref{Simple configuration,,,
grub,GNU GRUB manual}).

@item @code{serial-unit} (predeterminada: @code{#f})
La unidad serie usada por el cargador de arranque, como un entero del 0 al
3. Para GRUB, se selecciona en tiempo de ejecución; actualmente GRUB
selecciona 0 lo que corresponde a COM1 (@pxref{Serial terminal,,, grub,GNU
GRUB manual}).

@item @code{serial-speed} (predeterminada: @code{#f})
La velocidad de la interfaz serie, como un entero. Para GRUB, el valor
predeterminado se selecciona en tiempo de ejecución, actualmente GRUB
selecciona 9600@tie{}bps (@pxref{Serial terminal,,, grub,GNU GRUB manual}).
@end table

@end deftp

@cindex arranque dual
@cindex menú de arranque
Si desease listar entradas adicionales para el menú de arranque a través del
campo @code{menu-entries} mostrado previamente, deberá crearlas con la forma
@code{menu-entry}. Por ejemplo, imagine que desea ser capaz de arrancar otra
distribución (¡difícil de imaginar!), puede definir una entrada de menú de
esta forma:

@lisp
(menu-entry
  (label "La otra distribución")
  (linux "/boot/old/vmlinux-2.6.32")
  (linux-arguments '("root=/dev/sda2"))
  (initrd "/boot/old/initrd"))
@end lisp

Los detalles se encuentran a continuación.

@deftp {Tipo de datos} menu-entry
El tipo de una entrada en el menú del cargador de arranque.

@table @asis

@item @code{label}
La etiqueta a mostrar en el menú---por ejemplo, @code{"GNU"}.

@item @code{linux}
La imagen del núcleo Linux a arrancar, por ejemplo:

@lisp
(file-append linux-libre "/bzImage")
@end lisp

Con GRUB, también es posible especificar un dispositivo explícitamente
mediante el uso de la convención de nombres de dispositivo de GRUB
(@pxref{Naming convention,,, grub, GNU GRUB manual}), por ejemplo:

@example
"(hd0,msdos1)/boot/vmlinuz"
@end example

Si se especifica el dispositivo explícitamente como en el ejemplo anterior,
el campo @code{device} se ignora completamente.

@item @code{linux-arguments} (predeterminados: @code{()})
La lista de parámetros extra de línea de órdenes para el núcleo Linux---por
ejemplo, @code{("console=ttyS0")}.

@item @code{initrd}
Una expresión-G o una cadena que contiene el nombre de fichero del disco
inicial en RAM usado (@pxref{Expresiones-G}).
@item @code{device} (predeterminado: @code{#f})
El dispositivo donde se encuentran el núcleo y el initrd---es decir, para
GRUB, @dfn{raíz} de esta entrada de menú (@pxref{root,,, grub, GNU GRUB
manual}).

Puede ser una etiqueta de sistema de ficheros (una cadena), un UUID de
sistema de ficheros (un vector de bytes, @pxref{Sistemas de ficheros}), o @code{#f},
en cuyo caso el cargador de arranque buscará el dispositivo que contenga el
fichero especificado por el campo @code{linux} (@pxref{search,,, grub, GNU
GRUB manual}). @emph{No} debe ser un nombre de dispositivo del SO como
@file{/dev/sda1}.

@end table
@end deftp

@cindex HDPI
@cindex HiDPI
@cindex resolución
@c FIXME: Write documentation once it's stable.
De momento únicamente GRUB permite el uso de temas. Los temas de GRUB se
crean mediante el uso de @code{grub-theme}, todavía no documentado
completamente.

@deftp {Tipo de datos} grub-theme
Tipo de datos que representa la configuración de un tema de GRUB.

@table @asis
@item @code{gfxmode} (predeterminado: @code{'("auto")})
El modo gráfico @code{gfxmode} de GRUB configurado (una lista de cadenas con
resoluciones de pantalla, @pxref{gfxmode,,, grub, GNU GRUB manual}).
@end table
@end deftp

@deffn {Scheme Procedure} grub-theme
Return the default GRUB theme used by the operating system if no
@code{theme} field is specified in @code{bootloader-configuration} record.

Viene con una bonita imagen de fondo que muestra los logos de GNU y Guix.
@end deffn

Por ejemplo, para usar una resolución distinta de la predeterminada, puede
usar algo como esto:

@lisp
(bootloader
 (bootloader-configuration
 ;; @dots{}
 (theme (grub-theme
         (inherit (grub-theme))
         (gfxmode '("1024x786x32" "auto"))))))
@end lisp

@node Invocación de guix system
@section Invocación de @code{guix system}

Una vez haya escrito la declaración de sistema operativo como se ha visto en
la sección previa, puede @dfn{instanciarse} mediante el uso de la orden
@command{guix system}. Su sinopsis es:

@example
guix system @var{opciones}@dots{} @var{acción} @var{fichero}
@end example

@var{fichero} debe ser el nombre de un fichero que contenga una declaración
@code{operating-system}. @var{acción} especifica cómo se instancia el
sistema operativo. Actualmente se permiten los siguientes valores:

@table @code
@item search
Muestra las definiciones de tipos de servicio disponibles que corresponden
con las expresiones regulares proporcionadas, ordenadas por relevancia:

@cindex HDPI
@cindex HiDPI
@cindex resolución
@example
$ guix system search console
name: console-fonts
location: gnu/services/base.scm:806:2
extends: shepherd-root
description: Install the given fonts on the specified ttys (fonts are per
+ virtual console on GNU/Linux).  The value of this service is a list of
+ tty/font pairs.  The font can be the name of a font provided by the `kbd'
+ package or any valid argument to `setfont', as in this example:
+
+      '(("tty1" . "LatGrkCyr-8x16")
+        ("tty2" . (file-append
+                      font-tamzen
+                      "/share/kbd/consolefonts/TamzenForPowerline10x20.psf"))
+        ("tty3" . (file-append
+                      font-terminus
+                      "/share/consolefonts/ter-132n"))) ; for HDPI
relevance: 9

name: mingetty
location: gnu/services/base.scm:1190:2
extends: shepherd-root
description: Provide console login using the `mingetty' program.
relevance: 2

name: login
location: gnu/services/base.scm:860:2
extends: pam
description: Provide a console log-in service as specified by its
+ configuration value, a `login-configuration' object.
relevance: 2

@dots{}
@end example

Como con @command{guix package --search}, el resultado se obtiene en formato
@code{recutils}, lo que facilita el filtrado de la salida (@pxref{Top, GNU
recutils databases,, recutils, GNU recutils manual}).

@item reconfigure
Construye el sistema operativo descrito en @var{fichero}, lo activa, y se
constituye como estado actual@footnote{Esta acción (y las acciones
relacionadas @code{switch-generation} y @code{roll-back}) son usables
únicamente en sistemas que ya ejecuten el sistema Guix.}.

@quotation Nota
@c The paragraph below refers to the problem discussed at
@c <https://lists.gnu.org/archive/html/guix-devel/2014-08/msg00057.html>.
Es altamente recomendable ejecutar @command{guix pull} antes de la primera
ejecución de @command{guix system reconfigure} (@pxref{Invocación de guix pull}). No hacerlo puede ocasionar que se obtenga una versión más antigua de
Guix una vez que @command{reconfigure} se haya completado.
@end quotation

Lleva a efecto toda la configuración especificada en @var{fichero}: cuentas
de usuaria, servicios del sistema, lista de paquetes global, programas con
setuid, etc. La orden inicia los servicios del sistema especificados en
@var{fichero} que no estén actualmente en ejecución; si un servicio se
encuentra en ejecución esta orden prepara su actualización durante la
próxima parada (por ejemplo, con @code{herd stop X} o @code{herd restart
X}).

Esta orden crea una nueva generación cuyo número es el sucesor de la
siguiente generación (como lo muestra @command{guix system
list-generations}). Si esa generación ya existe, será sobreescrita. Este
comportamiento es el mismo que el de @command{guix package} (@pxref{Invocación de guix package}).

También añade una entrada al cargador de arranque para la nueva
configuración del sistema operativo---en caso de que no se proporcione la
opción @option{--no-bootloader}. Con GRUB, mueve las entradas de
configuraciones antiguas a un submenú, permitiendo la selección de una
generación previa del sistema en tiempo de arranque en caso necesario.

@cindex seguimiento de procedencia, del sistema operativo
Tras la finalización, el nuevo sistema se despliega en
@file{/run/current-system}. Este directorio contiene @dfn{metadatos de
procedencia}: la lista de canales usados (@pxref{Canales}) y @var{fichero}
en sí, cuando esté disponible. Esta información es útil en caso de que desee
inspeccionar posteriormente cómo se construyó está generación en particular.

De hecho, asumiendo que @var{fichero} está autocontenido, puede construir de
nuevo la generación @var{n} de su sistema operativo con:

@example
guix time-machine \
  -C /var/guix/profiles/system-@var{n}-link/channels.scm -- \
  system reconfigure \
  /var/guix/profiles/system-@var{n}-link/configuration.scm
@end example

¡Puede pensar en ello como una especie de control de versiones incorporado
en Guix! Su sistema no es únicamente un artefacto binario: @emph{transporta
sus propias fuentes con él}. @xref{Referencia de servicios,
@code{provenance-service-type}}, para más información sobre el seguimiento
de procedencia.

@item switch-generation
@cindex generaciones
Cambia a una generación existente del sistema. Esta acción cambia
atómicamente el perfil del sistema a la generación del sistema
especificada. También redistribuye las entradas de sistema del menú de
arranque existentes. Marca como predeterminada la entrada de la generación
de sistema especificada y mueve las entradas de otras generaciones a un
submenú, si el cargador de arranque lo permite. La próxima vez que se
arranque el sistema, se usará la generación de sistema especificada.

El cargador de arranque en sí no se reinstala durante esta orden. Por tanto,
el cargador de arranque instalado se usa con un fichero de configuración
actualizado.

La generación deseada puede especificarse explícitamente con su numero de
generación. Por ejemplo, la siguiente invocación cambiaría a la generación 7
del sistema:

@example
guix system switch-generation 7
@end example

La generación deseada puede especificarse también de forma relativa a la
generación actual con la forma @code{+N} o @code{-N}, donde @code{+3}
significa ``3 generaciones después de la generación actual'', y @code{-1}
significa ``1 generación antes de la generación actual''. Cuando se
especifica un valor negativo como @code{-1} debe ir precedido de @code{--}
para evitar que se analice como una opción. Por ejemplo:

@example
guix system switch-generation -- -1
@end example

Actualmente, el efecto de la invocación de esta acción es @emph{únicamente}
cambiar el perfil del sistema a una generación existente y redistribuir las
entradas del menú de arranque. Para realmente empezar a usar la generación
deseada del sistema, debe reiniciar tras esta acción. En el futuro, se
actualizará para hacer lo mismo que @command{reconfigure}, como activación y
desactivación de servicios.

Esta acción fallará si la generación especificada no existe.

@item roll-back
@cindex vuelta atrás
Cambia a la generación de sistema previa. Tras el siguiente arranque del
sistema, usará la generación de sistema precedente. Es la operación inversa
de @command{reconfigure}, y es equivalente a la invocación de
@command{switch-generation} con @code{-1} como parámetro.

Actualmente, como con @command{switch-generation}, debe reiniciar tras la
ejecución de esta acción para realmente empezar a usar la generación de
sistema precedente.

@item delete-generations
@cindex borrado de generaciones del sistema
@cindex ahorro de espacio
Elimina generaciones del sistema, haciendo posible su recolección con la
basura (@pxref{Invocación de guix gc}, para información sobre como llevar a cabo
la ``recolección de basura'').

This works in the same way as @samp{guix package --delete-generations}
(@pxref{Invocación de guix package, @option{--delete-generations}}).  With no
arguments, all system generations but the current one are deleted:

@example
guix system delete-generations
@end example

También puede seleccionar las generaciones que desea eliminar. El siguiente
ejemplo elimina todas las generaciones del sistema que tienen más de dos
meses de antigüedad:

@example
guix system delete-generations 2m
@end example

La ejecución de esta orden reinstala automáticamente el cargador de arranque
con una lista de entradas del menú actualizada---por ejemplo, el submenú de
generaciones antiguas en GRUB no mostrará las generaciones que hayan sido
borradas.

@item build
Construye la derivación del sistema operativo, que incluye todos los
ficheros de configuración y programas necesarios para el arranque y la
ejecución del sistema. Esta acción no instala nada en realidad.

@item init
Construye el directorio dado con todos los ficheros necesarios para ejecutar
el sistema operativo especificado en @var{fichero}. Esto es útil para la
instalación inicial de Guix. Por ejemplo:

@example
guix system init mi-configuración-del-so.scm /mnt
@end example

copia a @file{/mnt} todos los elementos del almacén necesarios para la
configuración especificada en @file{mi-configuración-del-so.scm}. Esto
incluye los ficheros de configuración, paquetes y demás. También crea otros
ficheros esenciales necesarios para la correcta operación del sistema---por
ejemplo, los directorios @file{/etc}, @file{/var} y @file{/run}, y el
fichero @file{/bin/sh}.

Esta orden también instala el cargador de arranque en el destino
especificado en @file{mi-conf-del-so.scm}, siempre que no se proporcione la
opción @option{--no-bootloader}.

@item vm
@cindex máquina virtual
@cindex VM
@anchor{guix system vm}
Construye una máquina virtual que contiene el sistema operativo declarado en
@var{fichero}, y devuelve un guión que ejecuta dicha máquina virtual (VM).

@quotation Nota
La acción @code{vm} y otras presentadas a continuación pueden usar la
funcionalidad KVM del núcleo Linux-libre. Específicamente, si la máquina
permite la virtualización hardware, debe cargarse el correspondiente módulo
KVM del núcleo, debe existir el nodo del dispositivo @file{/dev/kvm} y tanto
la propia usuaria como las usuarias de construcción del daemon deben tener
acceso de lectura y escritura al mismo (@pxref{Configuración del entorno de construcción}).
@end quotation

Los parámetros proporcionados al guión se pasan a QEMU como en el siguiente
ejemplo, que activa la red y solicita 1@tie{}GiB de RAM para la máquina
emulada:

@example
$ /gnu/store/@dots{}-run-vm.sh -m 1024 -smp 2 -net user,model=virtio-net-pci
@end example

La VM comparte su almacén con el sistema anfitrión.

Additional file systems can be shared between the host and the VM using the
@option{--share} and @option{--expose} command-line options: the former
specifies a directory to be shared with write access, while the latter
provides read-only access to the shared directory.

El siguiente ejemplo crea una máquina virtual en la que el directorio de la
usuaria es accesible en modo solo-lecture, y donde el directorio
@file{/intercambio} esta asociado de forma lectura-escritura con
@file{$HOME/tmp} en el sistema anfitrión:

@example
guix system vm mi-configuración.scm \
   --expose=$HOME --share=$HOME/tmp=/intercambio
@end example

En GNU/Linux, lo predeterminado es arrancar directamente el núcleo; esto
posee la ventaja de necesitar únicamente una pequeña imagen del disco raíz
pequeña ya el el almacén de la anfitriona puede montarse.

The @option{--full-boot} option forces a complete boot sequence, starting
with the bootloader.  This requires more disk space since a root image
containing at least the kernel, initrd, and bootloader data files must be
created.  The @option{--image-size} option can be used to specify the size
of the image.

@cindex Imágenes de sistema, creación en varios formatos
@cindex Creación de imágenes del sistema en varios formatos
@item vm-image
@itemx disk-image
@itemx docker-image
Devuelve una máquina virtual, imagen de disco o imagen Docker del sistema
operativo declarado en @var{fichero} que es independiente. Por omisión,
@command{guix system} estima el tamaño de la imagen necesario para almacenar
el sistema, pero puede usar la opción @option{--image-size} para especificar
un valor. Las imágenes Docker se construyen para que contengan exactamente
lo que necesitan, por lo que la opción @option{--image-size} se ignora en el
caso de @code{docker-image}.

Puede especificar el sistema de ficheros raíz mediante el uso de la opción
@option{--file-system-type}. Su valor predeterminado es @code{ext4}.

Cuando se usa @code{vm-image}, la imagen devuelta está en formato qcow2, que
QEMU puede usar eficientemente. @xref{Ejecutar Guix en una máquina virtual}, para más
información sobre cómo ejecutar la imagen en una máquina virtual.

Con @code{disk-image} se produce una imagen de disco cruda; puede copiarse
tal cual en una memoria USB, por ejemplo. Asumiendo que @code{/dev/sdc} es
el dispositivo que corresponde a la memoria USB, se podría copiar la imagen
con la siguiente orden:

@example
# dd if=$(guix system disk-image mi-so.scm) of=/dev/sdc
@end example

Con @code{docker-image} se produce una imagen Docker. Guix construye la
imagen de cero, no de una imagen Docker base preexistente. Como resultado,
contiene @emph{exactamente} lo definido en el fichero de configuración del
sistema operativo. Puede cargar la imagen y ejecutar un contenedor Docker
mediante el uso de ordenes como las siguientes:

@example
id_imagen="`docker load < guix-system-docker-image.tar.gz`"
id_contenedor="`docker create $id_imagen`"
docker start $id_contenedor
@end example

Esta orden arranca un contenedor Docker nuevo a partir de la imagen
especificada. El sistema Guix se arrancará de la manera habitual, lo que
implica el inicio de cualquier servicio que se haya definido en la
configuración del sistema operativo. Puede iniciar una sesión de shell
interactiva en el contenedor mediante el uso de @command{docker exec}:

@example
docker exec -ti $container_id /run/current-system/profile/bin/bash --login
@end example

Dependiendo de lo que ejecute en el contenedor Docker, puede ser necesario
proporcionar permisos adicionales al contenedor. Por ejemplo, si pretende
construir software mediante el uso de Guix dentro del contenedor Docker,
puede tener que proporcionar la opción @option{--privileged} a @code{docker
create}.

Last, the @option{--network} option applies to @command{guix system
docker-image}: it produces an image where network is supposedly shared with
the host, and thus without services like nscd or NetworkManager.

@item container
Devuelve un guión de la ejecución del sistema operativo declarado en
@var{fichero} dentro de un contenedor. Los contenedores son un conjunto de
mecanismos de aislamiento ligeros que proporciona el núcleo Linux-libre. Los
contenedores necesitan sustancialmente menos recursos que máquinas virtuales
completas debido a que el núcleo, los objetos compartidos y otros recursos
pueden compartirse con el sistema anfitrión; esto también significa que
proporcionan un menor aislamiento.

En este momento, el guión debe ejecutarse como root para permitir más de una
única usuaria y grupo. El contenedor comparte su almacén con la máquina
anfitriona.

Como con la acción @code{vm} (@pxref{guix system vm}), sistemas de ficheros
adicionales a compartir entre la máquina anfitriona y el contenedor pueden
especificarse mediante el uso de las opciones @option{--share} y
@option{--expose}:

@example
guix system container mi-configuración.scm \
   --expose=$HOME --share=$HOME/tmp=/intercambio
@end example

@quotation Nota
Esta opción requiere Linux-libre 3.19 o posterior.
@end quotation

@end table

@var{opciones} puede contener cualquiera de las opciones de construcción
comunes (@pxref{Opciones comunes de construcción}). Además, @var{opciones} puede
contener una de las siguientes:

@table @option
@item --expression=@var{expr}
@itemx -e @var{expr}
Considera el sistema operativo al cual evalúa @var{expr}. Es una alternativa
a la especificación de un fichero que evalúe a un sistema operativo. Se usa
para la generación de la imagen de instalación de Guix (@pxref{Construcción de la imagen de instalación}).

@item --system=@var{sistema}
@itemx -s @var{sistema}
Intenta la construcción para @var{sistema} en vez de para el tipo de la
máquina anfitriona. Funciona como en @command{guix build} (@pxref{Invocación de guix build}).

@item --derivation
@itemx -d
Devuelve el nombre de fichero de la derivación del sistema operativo
proporcionado sin construir nada.

@cindex seguimiento de procedencia, del sistema operativo
@item --save-provenance
Como se ha mostrado previamente, @command{guix system init} y @command{guix
system reconfigure} siempre almacenan información de procedencia a través de
un servicio dedicado (@pxref{Referencia de servicios,
@code{provenance-service-type}}). No obstante, otras órdenes no hacen esto
de manera predeterminada. Si desea, digamos, crear una imagen de máquina
virtual que contenga información de procedencia, puede ejecutar:

@example
guix system vm-image --save-provenance config.scm
@end example

De este modo, la imagen resultante ``embeberá sus propias fuentes'' de
manera efectiva en forma de metadatos en @file{/run/current-system}. Con
dicha información se puede reconstruir la imagen para asegurarse de que
realmente contiene lo que dice contener; o se puede usar para derivar una
variante de la imagen.

@item --file-system-type=@var{tipo}
@itemx -t @var{tipo}
Para la acción @code{disk-image}, crea un sistema de ficheros del @var{tipo}
proporcionado en la imagen.

Cuando se omite esta opción, @command{guix system} usa @code{ext4}.

@cindex ISO-9660, formato
@cindex CD, formato de imagen
@cindex DVD, formato de imagen
@option{--file-system-type=iso9660} produces an ISO-9660 image, suitable for
burning on CDs and DVDs.

@item --image-size=@var{tamaño}
Junto a las acciones @code{vm-image} y @code{disk-image}, crea una imagen
del @var{ŧamaño} proporcionado. @var{tamaño} debe ser un número de bytes o
puede incluir una unidad como sufijo (@pxref{Block size, size
specifications,, coreutils, GNU Coreutils}).

Cuando se omite esta opción, @command{guix system} calcula una estimación
del tamaño de la imagen en función del tamaño del sistema declarado en
@var{fichero}.

@item --network
@itemx -N
Con la acción @code{container}, permite a los contenedores acceder a la red
de la máquina anfitriona, es decir, no crea un espacio de nombres de red.

@item --root=@var{fichero}
@itemx -r @var{fichero}
Hace que @var{fichero} sea un enlace simbólico al resultado, y lo registra
como una raíz del recolector de basura.

@item --skip-checks
Omite las comprobaciones de seguridad previas a la instalación.

Por omisión, @command{guix system init} y @command{guix system reconfigure}
realizan comprobaciones de seguridad: se aseguran de que los sistemas de
ficheros que aparecen en la declaración @code{operating-system} realmente
existen (@pxref{Sistemas de ficheros}) y que cualquier módulo del núcleo Linux que
pudiese necesitarse durante el arranque se encuentre en
@code{initrd-modules} (@pxref{Disco en RAM inicial}). El uso de esta opción
omite todas estas comprobaciones.

@cindex on-error
@cindex estrategia ``on-error''
@cindex estrategia en caso de error
@item --on-error=@var{estrategia}
Aplica @var{estrategia} cuando ocurre un error durante la lectura de
@var{fichero}. @var{estrategia} puede ser uno de los siguientes valores:

@table @code
@item nothing-special
Informa concisamente del error y termina la ejecución. Es la estrategia
predeterminada.

@item backtrace
Del mismo modo, pero también muestra la secuencia de llamadas.

@item debug
Informa del error y entra en el depurador de Guile. A partir de ahí, puede
ejecutar órdenes como @code{,bt} para obtener la secuencia de llamadas,
@code{,locals} para mostrar los valores de las variables locales, e
inspeccionar el estado del programa de forma más general. @xref{Debug
Commands,,, guile, GNU Guile Reference Manual}, para una lista de órdenes de
depuración disponibles.
@end table
@end table

Una vez haya construido, configurado, reconfigurado y re-reconfigurado su
instalación de Guix, puede encontrar útil enumerar las generaciones del
sistema operativo disponibles en el disco---y que puede seleccionar en el
menú de arranque:

@table @code

@item describe
Describe la generación actual del sistema: su nombre de fichero, el núcleo y
el cargador de arranque usados, etcétera, así como información de
procedencia cuando esté disponible.

@item list-generations
Muestra un resumen de cada generación del sistema operativo disponible en el
disco, de manera legible por humanos. Es similar a la opción
@option{--list-generations} de @command{guix package} (@pxref{Invocación de guix package}).

De manera opcional, se puede especificar un patrón, con la misma sintaxis
que la usada en @command{guix package --list-generations}, para restringir
la lista de generaciones mostradas. Por ejemplo, la siguiente orden muestra
generaciones que tienen hasta 10 días de antigüedad:

@example
$ guix system list-generations 10d
@end example

@end table

¡La orden @command{guix system} tiene aún más que ofrecer! Las siguientes
ordenes le permiten visualizar cual es la relación entre los servicios del
sistema:

@anchor{system-extension-graph}
@table @code

@item extension-graph
Emit in Dot/Graphviz format to standard output the @dfn{service extension
graph} of the operating system defined in @var{file} (@pxref{Composición de servicios}, for more information on service extensions).

La orden:

@example
$ guix system extension-graph @var{file} | xdot -
@end example

shows the extension relations among services.

@anchor{system-shepherd-graph}
@item shepherd-graph
Emite en formato Dot/Graphviz por la salida estándar el @dfn{grafo de
dependencias} de los servicios shepherd del sistema operativo definido en
@var{fichero}. @xref{Servicios de Shepherd}, para más información y un grafo de
ejemplo.

@end table

@node Invocación de guix deploy
@section Invocación de @command{guix deploy}

Ya hemos visto como usar declaraciones @code{operating-system} para
gestionar la configuración de una máquina de manera local. Supongamos no
obstante que necesita configurar múltiples máquinas---quizá esté gestionando
un servicio en la web que se componga de varios servidores. @command{guix
deploy} le permite usar las mismas declaraciones @code{operating-system}
para gestionar múltiples máquinas remotas como un único ``despliegue''
lógico.

@quotation Nota
La funcionalidad descrita en esta sección está todavía en desarrollo y
sujeta a cambios. Puede ponerse en contacto con nosotras a través de
@email{guix-devel@@gnu.org}.
@end quotation

@example
guix deploy @var{fichero}
@end example

Dicha invocación llevará a cabo en las máquinas el despliegue al cual el
@var{fichero} evalúe. Como ejemplo, @var{fichero} puede contener una
definición como esta:

@lisp
;; Este es un despliegue de Guix con una configuración en
;; mínima ("en los huesos"), sin servidor gráfico X11,
;; en una máquina con un daemon SSH escuchando en
;; localhost:2222. Una configuración como esta puede ser
;; apropiada para máquinas virtuales con puertos redirigidos
;; a la interfaz local de la máquina anfitriona.
(use-service-modules networking ssh)
(use-package-modules bootloaders)

(define %sistema
  (operating-system
   (host-name "despliegue-gnu")
   (timezone "Etc/UTC")
   (bootloader (bootloader-configuration
                (bootloader grub-bootloader)
                (target "/dev/vda")
                (terminal-outputs '(console))))
   (file-systems (cons (file-system
                        (mount-point "/")
                        (device "/dev/vda1")
                        (type "ext4"))
                       %base-file-systems))
   (services
    (append (list (service dhcp-client-service-type)
                  (service openssh-service-type
                           (openssh-configuration
                            (permit-root-login #t)
                            (allow-empty-passwords? #t))))
            %base-services))))

(list (machine
       (operating-system %sistema)
       (environment managed-host-environment-type)
       (configuration (machine-ssh-configuration
                       (host-name "localhost")
                       (system "x86_64-linux")
                       (user "alicia")
                       (identity "./id_rsa")
                       (port 2222)))))
@end lisp

The file should evaluate to a list of @var{machine} objects.  This example,
upon being deployed, will create a new generation on the remote system
realizing the @code{operating-system} declaration @code{%system}.
@code{environment} and @code{configuration} specify how the machine should
be provisioned---that is, how the computing resources should be created and
managed.  The above example does not create any resources, as a
@code{'managed-host} is a machine that is already running the Guix system
and available over the network.  This is a particularly simple case; a more
complex deployment may involve, for example, starting virtual machines
through a Virtual Private Server (VPS) provider.  In such a case, a
different @var{environment} type would be used.

Tenga en cuenta que primero debe generar un par de claves en la máquina
coordinadora para permitir al daemon exportar archivos firmados de ficheros
en el almacén (@pxref{Invocación de guix archive}):

@example
# guix archive --generate-key
@end example

@noindent
Cada máquina de destino debe autorizar a la clave de la máquina maestra para
que acepte elementos del almacén que reciba de la coordinadora:

@example
# guix archive --authorize < clave-publica-coordinadora.txt
@end example

La usuaria proporcionada en @code{user}, en este ejemplo, especifica la
cuenta de la usuaria con la que ingresar en el sistema para realizar el
despliegue. Su valor predeterminado es @code{root}, pero el ingreso al
sistema como root a través de SSH en algunos casos puede no estar
permitido. Para solventar este problema, @command{guix deploy} puede
ingresar al sistema como una usuaria sin privilegios y ejecutar @code{sudo}
para escalar privilegios. Esto funciona únicamente si @code{sudo} está
instalado en el sistema remoto y se puede invocar de manera no interactiva
como @code{user}. Es decir: la línea de @code{sudoers} que permite a la
usuaria @code{user} la capacidad de usar @code{sudo} debe contener la
etiqueta @code{NOPASSWD}. Esto se puede conseguir con el siguiente fragmento
de la configuración de sistema operativo:

@lisp
(use-modules ...
             (gnu system))               ;para %sudoers-specification

(define %usuaria "nombre")

(operating-system
  ...
  (sudoers-file
     (plain-file "sudoers"
                 (string-append (plain-file-content %sudoers-specification)
                                (format #f "~a ALL = NOPASSWD: ALL~%"
                                        %usuaria)))))

@end lisp

Para obtener más información sobre el formato del fichero @file{sudoers}
consulte @command{man sudoers}.

@deftp {Tipo de datos} machine
Tipo de datos que representa una máquina individual en un despliegue
heterogéneo de Guix.

@table @asis
@item @code{operating-system}
El objeto de la configuración de sistema operativo a desplegar.

@item @code{environment}
Un objeto @code{environment-type} que describe como debe aprovisionarse la
máquina.

@item @code{configuration} (predeterminado: @code{#f})
Un objeto que describe la configuración para el entorno (@code{environment})
de la máquina. Si @code{environment} tiene una configuración predeterminada,
puede usarse @code{#f}. No obstante, si se usa @code{#f} para un entorno sin
configuración predeterminada se emitirá un error.
@end table
@end deftp

@deftp {Tipo de datos} machine-ssh-configuration
Tipo de datos que representa los parámetros del cliente SSH para una máquina
con un entorno (@code{environment}) de tipo gestionado
(@code{managed-host-environment-type}).

@table @asis
@item @code{host-name}
@item @code{build-locally?} (predeterminado: @code{#t})
Si es falso, las derivaciones del sistema se construirán en la máquina sobre
la que se realiza el despliegue.
@item @code{system}
El tipo de sistema que describe la arquitectura de la máquina sobre la que
se realiza el despliegue---por ejemplo, @code{"x86_64-linux"}.
@item @code{authorize?} (predeterminado: @code{#t})
Si es verdadero, la clave de firma de la máquina coordinadora debe añadirse
al anillo de claves del control de acceso (ACL) de la máquina remota.
@item @code{port} (predeterminado: @code{22})
@item @code{user} (predeterminada: @code{"root"})
@item @code{identity} (predeterminada: @code{#f})
Cuando se especifica, indica la ruta al fichero que contiene la clave
privada de SSH para la identificación con la máquina remota.

@item @code{host-key} (predeterminada: @code{#f})
Esta debería ser la clave SSH de la máquina, que puede ser más o menos así:

@example
ssh-ed25519 AAAAC3Nz@dots{} root@@example.org
@end example

Cuando @code{host-key} es @code{#f}, el servidor se identifica con el
fichero @file{~/.ssh/known_hosts}, igual que hace el cliente @command{ssh}
de OpenSSH.

@end table
@end deftp

@deftp {Tipo de datos} digital-ocean-configuration
Tipo de datos que representa el Droplet que debe crearse para la máquina con
@code{environment} @code{digital-ocean-environment-type}.

@table @asis
@item @code{ssh-key}
La ruta al fichero que contiene la clave privada de SSH usada para la
identificación con la máquina remota. En el futuro este campo puede
desaparecer.
@item @code{tags}
Una lista de cadenas de etiquetas (``tags'') que identifican de manera
unívoca a la máquina. Debe comprobarse que en un despliegue no existan dos
máquinas que tengan el mismo conjunto de etiquetas.
@item @code{region}
Descriptor (slug) de región de Digital Ocean, como @code{"nyc3"}.
@item @code{size}
Descriptor (slug) de tamaño de Digital Ocean, como @code{"s-1vcpu-1gb"}
@item @code{enable-ipv6?}
Determina si droplet debe crearse con capacidad de usar redes IPv6 o no.
@end table
@end deftp

@node Ejecutar Guix en una máquina virtual
@section Ejecución de Guix en una máquina virtual

@cindex máquina virtual
Para ejecutar Guix en una máquina virtual (VM), se puede usar tanto la
imagen de máquina virtual de Guix preconstruida que se distribuye en
@indicateurl{@value{BASE-URL}/guix-system-vm-image-@value{VERSION}.x86_64-linux.xz}.
Esta imagen es una imagen comprimida con formato QCOW. Primero tendrá que
descomprimirla con @command{xz -d} y, una vez hecho, podrá proporcionarsela
a un emulador como QEMU (véase más detalles a continuación).

This image boots the Xfce graphical environment and it contains some
commonly-used tools.  You can install more software in the image by running
@command{guix package} in a terminal (@pxref{Invocación de guix package}).  You
can also reconfigure the system based on its initial configuration file
available as @file{/run/current-system/configuration.scm} (@pxref{Uso de la configuración del sistema}).

En vez de usar esta imagen preconstruida, se puede construir una imagen
propia para máquina virtual mediante el uso de @command{guix system
vm-image} (@pxref{Invocación de guix system}). La imagen devuelta se encuentra en
formato qcow2, el cual el @uref{https://qemu.org/, emulador QEMU} puede usar
de manera eficiente.

@cindex QEMU
Si ha construido su propia imagen, debe copiarla fuera del almacén y
proporcionarse a sí misma permisos de escritura sobre dicha copia antes de
usarla. En la invocación de QEMU debe elegir un emulador de sistema que sea
adecuado para su plataforma hardware. Esta es una invocación de QEMU mínima
que arrancará el resultado de @command{guix system vm-image} en hardware
x86_64:

@example
$ qemu-system-x86_64 \
   -nic user,model=virtio-net-pci \
   -enable-kvm -m 1024 \
   -device virtio-blk,drive=midisco \
   -drive if=none,file=/tmp/imagen-qemu,id=midisco
@end example

Aquí está el significado de cada una de esas opciones:

@table @code
@item qemu-system-x86_64
Esto especifica la plataforma hardware a emular. Debe corresponder con el
anfitrión.

@item -nic user,model=virtio-net-pci
Activa la pila de red en espacio de usuaria sin privilegios. El SO anfitrión
puede acceder a la máquina virtualizada pero no al revés. Este es el modo
más simple de poner la máquina en red. @code{model} especifica que
dispositivo de red emular: @code{virtio-net-pci} es un dispositivo especial
para sistemas operativos virtualizados y recomendado para la mayor parte de
usos. Asumiendo que su plataforma de hardware es x86_64, puede obtener una
lista de adaptadores de red disponibles ejecutando
@command{qemu-system-x86_64 -nic model=help}.

@item -enable-kvm
Si su sistema tiene extensiones de virtualización por hardware, la
activación de la implementación de máquinas virtuales (KVM) del núcleo Linux
hará que la ejecución sea más rápida.

@c To run Xfce + 'guix pull', we need at least 1G of RAM.
@item -m 1024
RAM disponible para el sistema operativo virtualizado, en mebibytes. El
valor predeterminado es 128@tie{}MiB, que puede ser insuficiente para
algunas operaciones.

@item -device virtio-blk,drive=midisco
Crea un dispositivo @code{virtio-blk} llamado ``midisco''. @code{virtio-blk}
es un mecanismo de ``paravirtualización'' de dispositivos de bloques que
permite a QEMU obtener un mejor rendimiento que se emulase una unidad de
disco completa. Véase la documentación de QEMU y KVM para más información.

@item -drive if=none,file=/tmp/imagen-qemu,id=midisco
Usa nuestra imagen QCOW, el fichero @file{/tmp/imagen-qemu}, como
almacenamiento físico para la unidad ``midisco''.
@end table

El guión @command{run-vm.sh} predeterminado que devuelve la invocación de
@command{guix system vm} no añade una opción @command{-nic user} de manera
predeterminada. Para obtener acceso a la red desde la máquina virtual añada
el servicio @code{(dhcp-client-service)} a su definición de sistema y
arranque la máquina virtual mediante el uso de @command{`guix system vm
config.scm` -nic user}. Un punto importante a tener en cuenta del uso de
@command{-ni user} para la obtención de red es que @command{ping} no
funcionará, puesto que usa el protocolo ICMP. Deberá usar una orden
diferente para comprobar la conectividad a la red, por ejemplo @command{guix
download}.

@subsection Conexión a través de SSH

@cindex SSH
@cindex servidor SSH
Para activar SSH dentro de una máquina virtual debe añadir un servidor SSH
como @code{(openssh-service-type)} en su máquina virtual (@pxref{Servicios de red, @code{openssh-service-type}}). Además debe que redirigir el puerto
SSH, el 22 por omisión, a la máquina anfitriona. Puede hacerlo con

@example
`guix system vm config.scm` -nic user,model=virtio-net-pci,hostfwd=tcp::10022-:22
@end example

Para conectarse a la máquina virtual puede ejecutar

@example
ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 10022
@end example

La @command{-p} indica a @command{ssh} el puerto al que se debe
conectar. @command{-o UserKnownHostsFile=/dev/null} evita que @command{ssh}
se queje cada vez que modifique su fichero @command{config.scm} y la orden
@command{-o StrictHostKeyChecking=no} evita que tenga que autorizar la
conexión a una máquina desconocida cada vez que se conecte.

@subsection Uso de @command{virt-viewer} con Spice

Como alternativa al cliente gráfico predeterminado de @command{qemu} puede
usar @command{remote-viewer} del paquete @command{virt-viewer}. Para
conectarse proporcione la opción @command{-spice
port=5930,disable-ticketing} a @command{qemu}. Véase la sección previa para
más información sobre cómo hacer esto.

Spice también le permite hacer cosas como compartir su portapapeles con su
máquina virtual. Para activarlo debe proporcionar también las siguientes
opciones a @command{qemu}:

@example
-device virtio-serial-pci,id=virtio-serial0,max_ports=16,bus=pci.0,addr=0x5
-chardev spicevmc,name=vdagent,id=vdagent
-device virtserialport,nr=1,bus=virtio-serial0.0,chardev=vdagent,
name=com.redhat.spice.0
@end example

You'll also need to add the @code{(spice-vdagent-service)} to your system
definition (@pxref{Servicios misceláneos, Spice service}).

@node Definición de servicios
@section Definición de servicios

Las secciones anteriores muestran los servicios disponibles y cómo se pueden
combinar en una declaración @code{operating-system}. ¿Pero cómo las
definimos en primer lugar? ¿Y qué es un servicio en cualquier caso?

@menu
* Composición de servicios::  El modelo para la composición de servicios.
* Tipos de servicios y servicios::  Tipos y servicios
* Referencia de servicios::  Referencia de la API.
* Servicios de Shepherd::    Un tipo de servicio particular.
@end menu

@node Composición de servicios
@subsection Composición de servicios

@cindex services
@cindex daemons
Definimos un @dfn{servicio} como, de manera genérica, algo que extiende la
funcionalidad del sistema operativo. Habitualmente un servicio es un
proceso---un @dfn{daemon}---iniciado cuando el sistema arranca: un servidor
de shell seguro, un servidor Web, el daemon de construcción de Guix, etc. A
veces un servicio es un daemon cuya ejecución puede ser iniciada por otro
daemon---por ejemplo, un servidor FTP iniciado por @command{inetd} o un
servicio D-Bus activado por @command{dbus-daemon}. De manera ocasional, un
servicio no se puede asociar a un daemon. Por ejemplo, el servicio
``account'' recopila cuentas de usuaria y se asegura que existen cuando el
sistema se ejecuta; el servicio ``udev'' recopila reglas de gestión de
dispositivos y los pone a disposición del daemon eudev; el servicio
@file{/etc} genera el contenido del directorio @file{/etc} del sistema.

@cindex extensiones de servicios
Los servicios de Guix se conectan a través de @dfn{extensiones}. Por
ejemplo, el servicio de shell seguro @emph{extiende} Shepherd---el sistema
de inicio, el cual se ejecuta como PID@tie{}1---proporcionando las líneas de
órdenes para arrancar y parar el daemon de shell seguro (@pxref{Servicios de red, @code{lsh-service}}); el servicio UPower extiende el servicio
D-Bus proporcionando su especificación @file{.service}, y extiende el
servicio udev al que proporciona reglas de gestión de dispositivos
(@pxref{Servicios de escritorio, @code{upower-service}}); el servicio del daemon de
Guix extiende Shepherd proporcionando las líneas de órdenes para arrancar y
parar el daemon, y extiende el servicio de cuentas proporcionando una lista
de cuentas de usuarias de construcción que necesita (@pxref{Servicios base}).

Al fin y al cabo, los servicios y sus relaciones de ``extensión'' forman un
grafo acíclico dirigido (GAD). Si representamos los servicios como cajas y
las extensiones como flechas, un sistema típico puede proporcionar algo de
este estilo:

@image{images/service-graph,,5in,Grafo típico de extensiones de servicios.}

@cindex servicio del sistema
En la base, podemos ver el @dfn{servicio del sistema}, el cual produce el
directorio que contiene todo lo necesario para ejecutar y arrancar el
sistema, como es devuelto por la orden @command{guix system
build}. @xref{Referencia de servicios}, para aprender acerca de otros servicios
mostrados aquí. @xref{system-extension-graph, la orden @command{guix system
extension-graph}}, para información sobre cómo generar esta representación
para una definición particular de sistema operativo.

@cindex tipos de servicio
Técnicamente, las desarrolladoras pueden definir @dfn{tipos de servicio}
para expresar estas relaciones. Puede haber cualquier número de servicios de
un tipo dado en el sistema---por ejemplo, un sistema que ejecuta dos
instancias del shell seguro GNU (lsh) tiene dos instancias de
@var{lsh-service-type}, con parámetros diferentes.

La siguiente sección describe la interfaz programática para tipos de
servicio y servicios.

@node Tipos de servicios y servicios
@subsection Tipos de servicios y servicios

Un @dfn{tipo de servicio} es un nodo en el GAD descrito
previamente. Empecemos con un ejemplo simple, el tipo de servicio para el
daemon de construcción Guix (@pxref{Invocación de guix-daemon}):

@lisp
(define guix-service-type
  (service-type
   (name 'guix)
   (extensions
    (list (service-extension shepherd-root-service-type guix-shepherd-service)
          (service-extension account-service-type guix-accounts)
          (service-extension activation-service-type guix-activation)))
   (default-value (guix-configuration))))
@end lisp

@noindent
Define tres cosas:

@enumerate
@item
Un nombre, cuyo único propósito es facilitar la inspección y la depuración.

@item
Una lista de @dfn{extensiones de servicio}, donde cada extensión designa el
tipo de servicio a extender y un procedimiento que, dados los parámetros del
servicio, devuelve una lista de objetos para extender el servicio de dicho
tipo.

Cada tipo de servicio tiene al menos una extensión de servicio. La única
excepción es el @dfn{tipo de servicio de arranque}, que es el último
servicio.

@item
De manera opcional, un valor predeterminado para instancias de este tipo.
@end enumerate

En este ejemplo, @code{guix-service-type} extiende tres servicios:

@table @code
@item shepherd-root-service-type
El procedimiento @code{guix-shepherd-service} define cómo se extiende el
servicio de Shepherd. Es decir, devuelve un objeto @code{<shepherd-service>}
que define cómo se arranca y para @command{guix-daemon} (@pxref{Servicios de Shepherd}).

@item account-service-type
@code{guix-accounts} crea la implementación de esta extensión para este
servicio, la cual devuelve una lista de objetos @code{user-group} y
@code{user-account} que representan las cuentas de usuarias de construcción
(@pxref{Invocación de guix-daemon}).

@item activation-service-type
Aquí @code{guix-activation} es un procedimiento que devuelve una
expresión-G, que es un fragmento de código a ejecutar en ``tiempo de
activación''---por ejemplo, cuando el servicio se arranca.
@end table

Un servicio de este tipo se puede instanciar de esta manera:

@lisp
(service guix-service-type
         (guix-configuration
           (build-accounts 5)
           (use-substitutes? #f)))
@end lisp

El segundo parámetro a la forma @code{service} es un valor que representa
los parámetros de esta instancia específica del
servicio. @xref{guix-configuration-type, @code{guix-configuration}}, para
información acerca del tipo de datos @code{guix-configuration}. Cuando se
omite el valor, se usa el valor predeterminado por @code{guix-service-type}:

@lisp
(service guix-service-type)
@end lisp

@code{guix-service-type} es bastante simple puesto que extiende otros
servicios pero no es extensible a su vez.

@c @subsubsubsection Extensible Service Types

El tipo de servicio para un servicio @emph{extensible} puede tener esta
forma:

@lisp
(define udev-service-type
  (service-type (name 'udev)
                (extensions
                 (list (service-extension shepherd-root-service-type
                                          udev-shepherd-service)))

                (compose concatenate)       ;concatena la lista de reglas
                (extend (lambda (config rules)
                          (match config
                            (($ <udev-configuration> udev initial-rules)
                             (udev-configuration
                              (udev udev)   ;el paquete udev usado
                              (rules (append initial-rules rules)))))))))
@end lisp

Este es el tipo de servicio para el
@uref{https://wiki.gentoo.org/wiki/Project:Eudev, daemon de gestión de
dispositivos eudev}. En comparación con el ejemplo previo, además de una
extensión de @code{shepherd-root-service-type}, podemos ver dos nuevos
campos:

@table @code
@item compose
Este es el procedimiento para @dfn{componer} la lista de extensiones en
servicios de este tipo.

Los servicios pueden extender el servicio udev proporcionandole una lista de
reglas; componemos estas extensiones mediante una simple concatenación.

@item extend
Este procedimiento define cómo el valor del servicio se @dfn{extiende} con
la composición de la extensión.

Las extensiones de udev se componen en una lista de reglas, pero el valor
del servicio udev es en sí un registro @code{<udev-configuration>}. Por
tanto aquí extendemos el registro agregando la lista de reglas que contiene
al final de la lista de reglas que se contribuyeron.

@item description
Es una cadena que proporciona una descripción del tipo de servicio. Dicha
cadena puede contener lenguaje de marcado Texinfo (@pxref{Overview,,,
texinfo, GNU Texinfo}). La orden @command{guix system search} busca estas
cadenas y las muestra (@pxref{Invocación de guix system}).
@end table

Puede haber únicamente una instancia de un tipo de servicio extensible como
@code{udev-service-type}. Si hubiese más, las especificaciones
@code{service-extension} serían ambiguas.

¿Todavía aquí? La siguiente sección proporciona una referencia de la
interfaz programática de los servicios.

@node Referencia de servicios
@subsection Referencia de servicios

Ya hemos echado un vistazo a los tipos de servicio (@pxref{Tipos de servicios y servicios}). Esta sección proporciona referencias sobre cómo manipular
servicios y tipos de servicio. Esta interfaz se proporciona en el módulo
@code{(gnu services)}.

@deffn {Procedimiento Scheme} service @var{tipo} [@var{valor}]
Return a new service of @var{type}, a @code{<service-type>} object (see
below).  @var{value} can be any object; it represents the parameters of this
particular service instance.

Cuando se omite @var{valor}, se usa el valor predeterminado especificado por
@var{tipo}; si @var{type} no especifica ningún valor, se produce un error.

Por ejemplo, esto:

@lisp
(service openssh-service-type)
@end lisp

@noindent
es equivalente a esto:

@lisp
(service openssh-service-type
         (openssh-configuration))
@end lisp

En ambos casos el resultado es una instancia de @code{openssh-service-type}
con la configuración predeterminada.
@end deffn

@deffn {Procedimiento Scheme} service? @var{obj}
Devuelve verdadero si @var{obj} es un servicio.
@end deffn

@deffn {Procedimiento Scheme} service-kind @var{servicio}
Devuelve el tipo de @var{servicio}---es decir, un objeto
@code{<service-type>}.
@end deffn

@deffn {Procedimiento Scheme} service-value @var{servicio}
Devuelve el valor asociado con @var{servicio}. Representa sus parámetros.
@end deffn

Este es un ejemplo de creación y manipulación de un servicio:

@lisp
(define s
  (service nginx-service-type
           (nginx-configuration
            (nginx nginx)
            (log-directory log-directory)
            (run-directory run-directory)
            (file config-file))))

(service? s)
@result{} #t

(eq? (service-kind s) nginx-service-type)
@result{} #t
@end lisp

La forma @code{modify-services} proporciona una manera fácil de cambiar los
parámetros de algunos servicios de una lista como @code{%base-services}
(@pxref{Servicios base, @code{%base-services}}). Evalúa a una lista de
servicios. Por supuesto, siempre puede usar operaciones estándar sobre
listas como @code{map} y @code{fold} para hacerlo (@pxref{SRFI-1, List
Library,, guile, GNU Guile Reference Manual}); @code{modify-services}
proporciona simplemente una forma más concisa para este patrón común.

@deffn {Sintaxis Scheme} modify-services @var{servicios} @
  (@var{tipo} @var{variable} => @var{cuerpo}) @dots{}

Modifica los servicios listados en @var{servicios} de acuerdo a las
cláusulas proporcionadas. Cada cláusula tiene la forma:

@example
(@var{tipo} @var{variable} => @var{cuerpo})
@end example

donde @var{tipo} es un tipo de servicio---por ejemplo,
@code{guix-service-type}---y @var{variable} es un identificador que se
asocia dentro del @var{cuerpo} a los parámetros del servicio---por ejemplo,
una instancia @code{guix-configuration}---del servicio original de dicho
@var{ŧipo}.

El @var{cuerpo} deve evaluar a los nuevos parámetros del servicio, que serán
usados para configurar el nuevo servicio. Este nuevo servicio reemplaza el
original en la lista resultante. Debido a que los parámetros de servicio de
un servicio se crean mediante el uso de @code{define-record-type*}, puede
escribir un breve @var{cuerpo} que evalúe a los nuevos parámetros del
servicio mediante el uso de la característica @code{inherit} que proporciona
@code{define-record-type*} para heredar los valores antiguos.

@xref{Uso de la configuración del sistema}, para ejemplos de uso.

@end deffn

A continuación se procede con la interfaz programática de los tipos de
servicios. Es algo que debe conocer para escribir definiciones de nuevos
servicios, pero no es cuando busque formas de personalizar su declaración
@code{operating-system}.

@deftp {Tipo de datos} service-type
@cindex tipo de servicio
Esta es la representación de un @dfn{tipo de servicio} (@pxref{Tipos de servicios y servicios}).

@table @asis
@item @code{name}
Es un símbolo, usado únicamente para simplificar la inspección y la
depuración.

@item @code{extensions}
Una lista no vacía de objetos @code{<service-extension>} (véase a
continuación).

@item @code{compose} (predeterminado: @code{#f})
Si es @code{#f}, entonces el tipo de servicio denota servicios que no pueden
extenderse---es decir, servicios que no pueden recibir ``valores'' de otros
servicios.

En otro caso, debe ser un procedimiento de un único parámetro. El
procedimiento es invocado en @code{fold-services} y se le proporciona una
lista de valores recibidos de las extensiones. Puede devolver un valor
único.

@item @code{extend} (predeterminado: @code{#f})
Si es @code{#f}, los servicios de este tipo no pueden extenderse.

En otro caso, debe ser un procedimiento que acepte dos parámetros:
@code{fold-services} lo invoca, proporcionandole el valor inicial del
servicio como el primer parámetro y el resultado de aplicar @code{compose} a
los valores de las extensiones como segundo parámetro. Debe devolver un
valor que es un parámetro válido para la instancia del servicio.
@end table

@xref{Tipos de servicios y servicios}, para ejemplos.
@end deftp

@deffn {Procedimiento Scheme} service-extension @var{tipo-deseado} @
                              @var{calcula}

Devuelve una nueva extensión para servicios del tipo
@var{tipo-deseado}. @var{calcula} debe ser un procedimiento de un único
parámetro: es llamado en @code{fold-services}, proporcionandole el valor
asociado con el servicio que proporciona la extensión; debe devolver un
valor válido para el servicio deseado.
@end deffn

@deffn {Procedimiento Scheme} service-extension? @var{obj}
Devuelve verdadero si @var{obj} es una expresión-G.
@end deffn

De manera ocasional, puede desear simplemente extender un servicio
existente. Esto implica la creación de un nuevo tipo de servicio y la
especificación de la extensión deseada, lo cual puede ser engorroso; el
procedimiento @code{simple-service} proporciona un atajo para ello.

@deffn {Procedimiento Scheme} simple-service @var{nombre} @var{deseado} @var{valor}
Devuelve un servicio que extiende @var{deseado} con @var{valor}. Esto
funciona creando una instancia única del tipo de servicio @var{nombre}, de
la cual el servicio devuelto es una instancia.

Por ejemplo, esto extiende mcron (@pxref{Ejecución de tareas programadas}) con una
tarea adicional:

@lisp
(simple-service 'mi-tarea-mcron mcron-service-type
                #~(job '(next-hour (3)) "guix gc -F 2G"))
@end lisp
@end deffn

En el núcleo de la abstracción de los servicios se encuentra el
procedimiento @code{fold-services}, que es responsable de la ``compilación''
de una lista de servicios en un único directorio que contiene todo lo
necesario para arrancar y ejecutar el sistema---el directorio mostrado por
la orden @command{guix system build} (@pxref{Invocación de guix system}). En
esencia, propaga las extensiones de servicios a través del grafo de
servicios, actualizando los parámetros de cada nodo en el camino, hasta que
alcanza el nodo raíz.

@deffn {Procedimiento Scheme} fold-services @var{servicios} @
                            [#:target-type @var{system-service-type}]
Recorre @var{servicios} propagando sus extensiones hasta la raíz del tipo
@var{target-type}; devuelve el servicio raíz tratado de la manera apropiada.
@end deffn

Por último, el módulo @code{(gnu services)} también define varios tipos
esenciales de servicios, algunos de los cuales se enumeran a continuación.

@defvr {Variable Scheme} system-service-type
Esta es la raíz del grafo de servicios. Produce el directorio del sistema
como lo devuelve la orden @code{guix system build}.
@end defvr

@defvr {Variable Scheme} boot-service-type
El tipo del ``servicio de arranque'', que produce un @dfn{guión de
arranque}. El guión de arranque es lo que ejecuta el disco inicial de RAM
cuando se arranca.
@end defvr

@defvr {Variable Scheme} etc-service-type
El tipo del servicio @file{/etc}. Este servicio se usa para crear los
ficheros en @file{/etc} y puede extenderse proporcionandole pares
nombre/fichero como estas:

@lisp
(list `("issue" ,(plain-file "issue" "¡Bienvenida!\n")))
@end lisp

En este ejemplo, el efecto sería la adición de un fichero @file{/etc/issue}
que apunte al fichero proporcionado.
@end defvr

@defvr {Variable Scheme} setuid-program-service-type
Tipo para el ``servicio de programas setuid''. Este servicio recopila listas
de nombres de ficheros ejecutables, proporcionados como expresiones-G, y los
añade al conjunto de programas con setuid de root en el sistema
(@pxref{Programas con setuid}).
@end defvr

@defvr {Variable Scheme} profile-service-type
Tipo del servicio que genera el @dfn{perfil del sistema}---es decir, los
programas en @file{/run/current-system/profile}. Otros servicios pueden
extenderlo proporcionandole listas de paquetes a añadir al perfil del
sistema.
@end defvr

@cindex seguimiento de procedencia, del sistema operativo
@defvr {Variable Scheme} provenance-service-type
Es el tipo del servicio que registra los @dfn{metadatos de procedencia} en
el sistema mismo. Crea varios ficheros en @file{/run/current-system}:

@table @file
@item channels.scm
Es un ``fichero de canales'' que se le puede proporcionar a @command{guix
pull -C} o @command{guix time-machine -C}, y que describe los canales usados
para construir el sistema, si dicha información estaba disponible
(@pxref{Canales}).

@item configuration.scm
Est es el fichero que se proporciona como valor para el servicio
@code{provenance-service-type}. De manera predeterminada, @command{guix
system reconfigure} proporciona automáticamente el fichero de configuración
del SO que recibió en la línea de órdenes.

@item provenance
Contiene la misma información que los otros dos ficheros, pero en un formato
que se puede procesar más fácilmente.
@end table

En general, estas dos piezas de información (canales y el fichero de
configuración) son suficientes para reproducir el sistema operativo ``desde
las fuentes''.

@quotation Advertencias
Esta información es necesaria para reconstruir su sistema operativo, pero no
siempre es suficiente. En particular, @file{configuration.scm} en sí es
insuficiente si no está autocontenido---si hace referencia a módulos
externos de Guile o a ficheros adicionales. Si desea que
@file{configuration.scm} sea autocontenido, le recomendamos que los módulos
o ficheros a los que haga referencia sean parte de un canal.

Además, la proveniencia de los metadatos es ``silenciosa'' en el sentido de
que no cambia los bits que contiene su sistema, @emph{excepto por los bits
de los metadatos en sí}. Dos configuraciones de SO diferentes o conjuntos de
canales pueden llevar al mismo sistema, bit a bit; cuando se usa
@code{provenance-service-type}, estos dos sistemas tendrán distintos
metadatos y por lo tanto distintos nombres de fichero en el almacén, lo que
hace no tan trivial dicha comparación.
@end quotation

Este servicio se añade automáticamente a la configuración de su sistema
operativo cuando usa @command{guix system reconfigure}, @command{guix system
init} o @command{guix deploy}.
@end defvr

@node Servicios de Shepherd
@subsection Servicios de Shepherd

@cindex servicios de shepherd
@cindex PID 1
@cindex sistema de inicio
El módulo @code{(gnu services shepherd)} proporciona una forma de definir
servicios gestionados por GNU@tie{}Shepherd, que es el sistema de
inicio---el primer proceso que se inicia cuando el sistema arranca, también
conocido como PID@tie{}1 (@pxref{Introducción,,, shepherd, The GNU Shepherd
Manual}).

Los servicios en Shepherd pueden depender de otros servicios. Por ejemplo,
el daemon SSH puede tener que arrancarse tras el arranque del daemon syslog,
lo cual a su vez puede suceder únicamente tras el montaje de todos los
sistemas de ficheros. El sistema operativo simple definido previamente
(@pxref{Uso de la configuración del sistema}) genera un grafo de servicios como
este:

@image{images/shepherd-graph,,5in,Grafo típico de servicios de shepherd.}

En realidad puede generar dicho grafo para cualquier definición de sistema
operativo mediante el uso de la orden @command{guix system shepherd-graph}
(@pxref{system-shepherd-graph, @command{guix system shepherd-graph}}).

@code{%shepherd-root-service} es un objeto de servicio que representa el
PID@tie{}1, del tipo @code{shepherd-root-service-type}; puede ser extendido
proporcionandole listas de objetos @code{<shepherd-service>}.

@deftp {Tipo de datos} shepherd-service
El tipo de datos que representa un servicio gestionado por Shepherd.

@table @asis
@item @code{provision}
Una lista de símbolos que indican lo que proporciona el servicio.

Esto son nombres que pueden proporcionarse a @command{herd start},
@command{herd status} y órdenes similares (@pxref{Invoking herd,,, shepherd,
The GNU Shepherd Manual}). @xref{Slots of services, the @code{provides}
slot,, shepherd, The GNU Shepherd Manual}, para más detalles.

@item @code{requirement} (predeterminada: @code{'()})
Lista de símbolos que indican los servicios Shepherd de los que este
depende.

@cindex servicios one-shot, para Shepherd
@item @code{one-shot?} (predeterminado: @code{#f})
Si este servicio es @dfn{one-shot}. Los servicios ``one-shot'' finalizan
inmediatamente después de que su acción @code{start} se
complete. @xref{Slots of services,,, shepherd, The GNU Shepherd Manual},
para más información.

@item @code{respawn?} (predeterminado: @code{#t})
Indica si se debe reiniciar el servicio cuando se para, por ejemplo cuando
el proceso subyacente muere.

@item @code{start}
@itemx @code{stop} (predeterminado: @code{#~(const #f)})
Los campos @code{start} y @code{stop} hacen referencia a las características
de Shepherd de arranque y parada de procesos respectivamente (@pxref{Service
De- and Constructors,,, shepherd, The GNU Shepherd Manual}). Se proporcionan
como expresiones-G que se expandirán en el fichero de configuración de
Shepherd (@pxref{Expresiones-G}).

@item @code{actions} (predeterminadas: @code{'()})
@cindex acciones, de servicios de Shepherd
Esta es la lista de objetos @code{shepherd-action} (véase a continuación)
que definen las @dfn{acciones} permitidas por el servicio, además de las
acciones estándar @code{start} y @code{stop}. Las acciones que se listan
aquí estarán disponibles como ordenes de @command{herd}:

@example
herd @var{acción} @var{servicio} [@var{parámetros}@dots{}]
@end example

@item @code{auto-start?} (predeterminado: @code{#t})
Determina si Shepherd debe iniciar este servicio de manera automática. Si es
@code{#f} el servicio debe iniciarse manualmente con @code{herd start}.

@item @code{documentación}
Una cadena de documentación, que se mostrará al ejecutar:

@example
herd doc @var{nombre-del-servicio}
@end example

donde @var{nombre-del-servicio} es uno de los símbolos en @code{provision}
(@pxref{Invoking herd,,, shepherd, The GNU Shepherd Manual}).

@item @code{modules} (predeterminados: @code{%default-modules})
Esta es la lista de módulos que deben estar dentro del ámbito cuando
@code{start} y @code{stop} son evaluados.

@end table
@end deftp

@deftp {Tipo de datos} shepherd-action
Este es el tipo de datos que define acciones adicionales implementadas por
un servicio Shepherd (vea previamente).

@table @code
@item name
Símbolo que nombra la acción.

@item documentación
Esta es una cadena de documentación para la acción. Puede verse ejecutando:

@example
herd doc @var{servicio} action @var{acción}
@end example

@item procedure
Debe ser una expresión-G que evalúa a un procedimiento de al menos un
parámetro, el cual es el ``valor de ejecución'' del servicio (@pxref{Slots
of services,,, shepherd, The GNU Shepherd Manual}).
@end table

El siguiente ejemplo define una acción llamada @code{di-hola} que saluda
amablemente a la usuaria:

@lisp
(shepherd-action
  (name 'di-hola)
  (documentation "¡Di hola!")
  (procedure #~(lambda (running . args)
                 (format #t "¡Hola, compa! parámetros: ~s\n"
                         args)
                 #t)))
@end lisp

Asumiendo que esta acción se añade al servicio @code{ejemplo}, puede
ejecutar:

@example
# herd di-hola ejemplo
¡Hola, compa! parámetros: ()
# herd di-hola ejemplo a b c
¡Hola, compa! parámetros: ("a" "b" "c")
@end example

Esta, como puede ver, es una forma un tanto sofisticada de decir
hola. @xref{Service Convenience,,, shepherd, The GNU Shepherd Manual}, para
más información sobre acciones.
@end deftp

@defvr {Variable Scheme} shepherd-root-service-type
El tipo de servicio para el ``servicio raíz'' de Shepherd---es decir,
PID@tie{}1.

El tipo de servicio que las extensiones declaran cuando desean crear
servicios shepherd (@pxref{Tipos de servicios y servicios}, para un
ejemplo). Cada extensión debe pasar una lista de @code{<shepherd-service>}.
@end defvr

@defvr {Variable Scheme} %shepherd-root-service
Este servicio representa el PID@tie{}1.
@end defvr


@node Documentación
@chapter Documentación

@cindex documentación, búsqueda
@cindex búsqueda de documentación
@cindex Info, formato de documentación
@cindex páginas man
@cindex páginas de manual
En la mayor parte de casos, los paquetes instalados con Guix contienen
documentación. Hay dos formatos principales de documentación: ``Info'', un
formato hipertextual navegable usado para software GNU, y ``páginas de
manual'' (o ``páginas man''), la documentación lineal encontrada
tradicionalmente en Unix. Se accede a los manuales Info con la orden
@command{info} o con Emacs, y las páginas man con @command{man}.

Puede buscar documentación de software instalado en su sistema por palabras
clave. Por ejemplo, la siguiente orden busca información sobre ``TLS'' en
manuales Info:

@example
$ info -k TLS
"(emacs)Network Security" -- STARTTLS
"(emacs)Network Security" -- TLS
"(gnutls)Core TLS API" -- gnutls_certificate_set_verify_flags
"(gnutls)Core TLS API" -- gnutls_certificate_set_verify_function
@dots{}
@end example

@noindent
La orden siguiente busca por la misma palabra clave en páginas man:

@example
$ man -k TLS
SSL (7)              - OpenSSL SSL/TLS library
certtool (1)         - GnuTLS certificate tool
@dots {}
@end example

Estas búsquedas son completamente locales en su máquina de modo que tiene la
garantía de que la documentación que encuentre corresponde con lo que está
realmente instalado, puede acceder a ella sin conexión a la red, y se
respeta su privacidad.

Una vez tenga estos resultados, puede ver la documentación relevante
mediante la ejecución de, digamos:

@example
$ info "(gnutls)Core TLS API"
@end example

@noindent
o:

@example
$ man certtool
@end example

Los manuales Info contienen secciones e índices, así como enlaces como
aquellos encontrados en páginas Web. El lector @command{info} (@pxref{Top,
Info reader,, info-stnd, Stand-alone GNU Info}) y su contraparte en Emacs
(@pxref{Misc Help,,, emacs, The GNU Emacs Manual}) proporcionan
combinaciones de teclas intuitivas para la navegación en los
manuales. @xref{Getting Started,,, info, Info: An Introduction}, para una
introducción a la navegación en Info.

@node Instalación de ficheros de depuración
@chapter Instalación de ficheros de depuración

@cindex ficheros de depuración
Los programas binarios, como los producidos por los compiladores GCC por
ejemplo, se escriben típicamente en el formato ELF, con una sección que
contiene @dfn{información de depuración}. La información de depuración es lo
que permite que el depurador, GDB, asocie código binario a código fuente; es
necesaria para depurar un programa compilado en condiciones adecuadas.

El problema con la información de depuración es que ocupa un espacio
considerable en el disco. Por ejemplo, la información de depuración de la
biblioteca C de GNU ocupa más de 60 MiB. Por tanto, como usuaria, mantener
toda la información de depuración de todos los programas instalados no es
habitualmente una opción. No obstante, el ahorro de espacio no debe ser
impedir la depuración---especialmente en el sistema GNU, que debería
facilitar a sus usuarias ejercitar su libertad de computación (@pxref{Distribución GNU}).

Afortunadamente, las utilidades binarias GNU (Binutils) y GDB proporcionan
un mecanismo que permite a las usuarias obtener lo mejor de ambos mundos: la
información de depuración puede extraerse de los binarios y almacenarse en
ficheros separados. GDB es capaz entonces de cargar la información de
depuración desde esos ficheros, cuando estén disponibles (@pxref{Separate
Debug Files,,, gdb, Debugging with GDB}).

La distribución GNU toma ventaja de este hecho almacenando la información de
depuración en el subdirectorio @code{lib/debug} de una salida separada del
paquete llamada @code{debug} (@pxref{Paquetes con múltiples salidas}). Las
usuarias pueden elegir si instalan la salida @code{debug} de un paquete
cuando la necesitan. Por ejemplo, la siguiente orden instala la información
de depuración para la biblioteca C de GNU y para GNU Guile.

@example
guix install glibc:debug guile:debug
@end example

Se debe decir entonces a GDB que busque los ficheros de depuración en el
perfil de la usuaria, proporcionando un valor a la variable
@code{debug-file-directory} (considere hacerlo en el fichero
@file{~/.gdbinit}, @pxref{Startup,,, gdb, Debugging with GDB}):

@example
(gdb) set debug-file-directory ~/.guix-profile/lib/debug
@end example

From there on, GDB will pick up debugging information from the @file{.debug}
files under @file{~/.guix-profile/lib/debug}.

Además, probablemente desee que GDB sea capaz de mostrar el código fuente
que está depurando. Para hacerlo, tiene que desempaquetar el código fuente
del paquete de su interés (obtenido con @code{guix build --source},
@pxref{Invocación de guix build}) e indicar a GDB cual es el directorio de
fuentes mediante el uso de la orden @code{directory} (@pxref{Source Path,
@code{directory},, gdb, Debugging with GDB}).

@c XXX: keep me up-to-date
El mecanismo de la salida @code{debug} en Guix se implementa por el sistema
de construcción @code{gnu-build-system} (@pxref{Sistemas de construcción}). Ahora mismo
necesita una activación explícita---la información de depuración está
disponible únicamente para paquetes con definiciones que declaren
explícitamente una salida @code{debug}. Esto puede cambiarse por una
activación implícita en el futuro si nuestras granjas de construcción pueden
soportar la carga. Para comprobar si un paquete tiene una salida
@code{debug}, use @command{guix package --list-available} (@pxref{Invocación de guix package}).


@node Actualizaciones de seguridad
@chapter Actualizaciones de seguridad

@cindex actualizaciones de seguridad
@cindex vulnerabilidades de seguridad
Occasionally, important security vulnerabilities are discovered in software
packages and must be patched.  Guix developers try hard to keep track of
known vulnerabilities and to apply fixes as soon as possible in the
@code{master} branch of Guix (we do not yet provide a ``stable'' branch
containing only security updates).  The @command{guix lint} tool helps
developers find out about vulnerable versions of software packages in the
distribution:

@smallexample
$ guix lint -c cve
gnu/packages/base.scm:652:2: glibc@@2.21: probablemente vulnerable a CVE-2015-1781, CVE-2015-7547
gnu/packages/gcc.scm:334:2: gcc@@4.9.3: probablemente vulnerable a CVE-2015-5276
gnu/packages/image.scm:312:2: openjpeg@@2.1.0: probablemente vulnerable a CVE-2016-1923, CVE-2016-1924
@dots{}
@end smallexample

@xref{Invocación de guix lint}, para más información.

Guix sigue una disciplina funcional de gestión de paquetes
(@pxref{Introducción}), lo que implica que, cuando se cambia un paquete,
@emph{todos los paquetes que dependen de él} deben ser reconstruidos. Esto
puede ralentizar de manera significativa el despliegue de correcciones en
paquetes básicos como libc o Bash, ya que básicamente la distribución al
completo debe reconstruirse. El uso de binarios preconstruidos ayuda
(@pxref{Sustituciones}), pero el despliegue aún puede tomar más tiempo del
deseado.

@cindex injertos (grafts en inglés)
Para afrontar esto, Guix implementa @dfn{injertos}, un mecanismo que permite
un rápido despliegue de actualizaciones críticas sin los costes asociados
con una reconstrucción completa de la distribución. La idea es reconstruir
únicamente el paquete que hace falta parchear, y entonces ``injertarlo'' en
los paquetes explícitamente instalados por la usuaria y que previamente
hacían referencia al paquete original. El coste de realizar un injerto es
menor que una reconstrucción completa de la cadena de dependencias.

@cindex reemplazos de paquetes, para injertos
Por ejemplo, supongamos que es necesario incorporar una actualización de
seguridad en Bash. Las desarrolladoras de Guix proporcionarán una definición
de paquete para la versión ``corregida'' de Bash, digamos @code{bash-fixed},
de la manera habitual (@pxref{Definición de paquetes}). Una vez hecho, la
definición original del paquete es aumentada con un campo @code{replacement}
que apunta al paquete que contiene la corrección del error:

@lisp
(define bash
  (package
    (name "bash")
    ;; @dots{}
    (replacement bash-fixed)))
@end lisp

De ahí en adelante, cualquier paquete que dependa directa o indirectamente
de Bash---como informa de ello @command{guix gc --requisites}
(@pxref{Invocación de guix gc})---que se instale se ``reescribe'' automáticamente
para hacer referencia a @code{bash-fixed} en vez de @code{bash}. Este
proceso de injerto toma un tiempo proporcional al tamaño del paquete,
normalmente menos de un minuto para un paquete ``medio'' en una máquina
reciente. El injertado es recursivo: cuando una dependencia indirecta
requiere un injerto, el injerto se ``propagará'' hasta el paquete que la
usuaria esté instalando.

Actualmente, la longitud del nombre y la versión del injerto y aquella del
paquete que reemplaza (@var{bash-fixed} y @var{bash} en el ejemplo previo)
debe ser igual. Esta restricción viene principalmente del hecho de que el
injertado funciona mediante la aplicación de parches en ficheros, incluyendo
ficheros binarios, directamente. Otras restricciones pueden ser aplicables:
por ejemplo, durante la adición de un injerto a un paquete que proporciona
una biblioteca compartida, la biblioteca compartida y su reemplazo deben
tener el mismo @code{SONAME} y deben ser compatibles a nivel binario.

La opción de línea de órdenes @option{--no-grafts} le permite anular
voluntariamente el proceso de injerto (@pxref{Opciones comunes de construcción,
@option{--no-grafts}}). Por tanto, la orden:

@example
guix build bash --no-grafts
@end example

@noindent
devuelve el nombre de fichero del almacén de la versión original de Bash,
mientras que:

@example
guix build bash
@end example

@noindent
devuelve el nombre de fichero del almacén de la versión ``corregida'',
reemplazo de Bash. Esto le permite distinguir entre las dos variantes de
Bash.

Para verificar a qué Bash hace referencia su perfil al completo, puede
ejecutar (@pxref{Invocación de guix gc}):

@example
guix gc -R `readlink -f ~/.guix-profile` | grep bash
@end example

@noindent
@dots{} y compare los nombres de fichero del almacén que obtendrá con los
ejemplos previos. Del mismo modo, para una generación completa del sistema
Guix:

@example
guix gc -R `guix system build mi-configuración.scm` | grep bash
@end example

Por último, para comprobar qué versión de Bash están usando los procesos en
ejecución, puede usar la orden @command{lsof}:

@example
lsof | grep /gnu/store/.*bash
@end example


@node Lanzamiento inicial
@chapter Lanzamiento inicial

@c Adapted from the ELS 2013 paper.

@cindex lanzamiento inicial

El lanzamiento inicial en nuestro contexto hace referencia a cómo la
distribución se construye ``de la nada''. Recuerde que el entorno de
construcción de una derivación no contiene más que sus entradas declaradas
(@pxref{Introducción}). Por lo que hay un evidente problema ``del huevo y la
gallina'': ¿cómo se construye el primer paquete? ¿Cómo se compila el primer
compilador? Fíjese que esta es una cuestión de interés únicamente para la
hacker curiosa, no para la usuaria normal, así que puede pasar por encima
está sección sin ninguna vergüenza si se considera una ``usuaria normal''.

@cindex binarios del lanzamiento inicial
El sistema GNU está compuesto principalmente de código C, con libc en su
base. El sistema de construcción GNU en sí asume la disponibilidad del shell
Bourne y las herramientas de línea de órdenes proporcionadas por GNU
Coreutils, Awk, Findutils, `sed' y `grep'. Además, los programas de
construcción---programas que ejecutan @code{./configure}, @code{make},
etc.---están escritos en Scheme Guile
(@pxref{Derivaciones}). Consecuentemente, para ser capaz de construir
cualquier cosa, desde cero, Guix depende en binarios preconstruidos de
Guile, GCC, Binutils, libc y otros paquetes mencionados anteriormente---los
@dfn{binarios del lanzamiento inicial}.

These bootstrap binaries are ``taken for granted'', though we can also
re-create them if needed (@pxref{Preparación para usar los binarios del lanzamiento inicial}).

@menu
* Lanzamiento inicial a partir de la semilla binaria reducida::  Un 
                                                                   lanzamiento 
                                                                   inicial a 
                                                                   la altura 
                                                                   de GNU.
* Preparación para usar los binarios del lanzamiento inicial::  Construcción 
                                                                   de lo que 
                                                                   más 
                                                                   importa.
@end menu

@node Lanzamiento inicial a partir de la semilla binaria reducida
@section El lanzamiento inicial a partir de la semilla binaria reducida

Guix---al igual que otras distribuciones de GNU/Linux---se lanza
inicialmente desde un conjunto de binarios de manera tradicional: un shell
Bourne, herramientas de línea de órdenes que proporcionan GNU Coreutils,
Awk, Findutils, `sed' y `grep' y Guile, GCC, Binutils y la biblioteca de C
de GNU (@pxref{Lanzamiento inicial}). Habitualmente dichos binarios se ``dan por
hecho''. 

Taking the bootstrap binaries for granted means that we consider them to be
a correct and trustworthy ``seed'' for building the complete system.
Therein lies a problem: the combined size of these bootstrap binaries is
about 250MB (@pxref{Bootstrappable Builds,,, mes, GNU Mes}).  Auditing or
even inspecting these is next to impossible.

En @code{i686-linux} y @code{x86_64-linux}, Guix basa su lanzamiento inicial
en una ``semilla binaria reducida''@footnote{Nos gustaría decir:
``lanzamiento inicial completamente desde las fuentes'' pero, aunque estamos
trabajando por alcanzar ese objetivo, sería una hipérbole usar dicho término
para describir el proceso que seguimos en la actualidad.}.

The Reduced Binary Seed bootstrap removes the most critical tools---from a
trust perspective---from the bootstrap binaries: GCC, Binutils and the GNU C
Library are replaced by: @code{bootstrap-mescc-tools} (a tiny assembler and
linker) and @code{bootstrap-mes} (a small Scheme Interpreter and a C
compiler written in Scheme and the Mes C Library, built for TinyCC and for
GCC).

Using these new binary seeds the ``missing'' Binutils, GCC, and the GNU C
Library are built from source.  From here on the more traditional bootstrap
process resumes.  This approach has reduced the bootstrap binaries in size
to about 145MB in Guix v1.1.

The next step that Guix has taken is to replace the shell and all its
utilities with implementations in Guile Scheme, the @emph{Scheme-only
bootstrap}.  Gash (@pxref{Gash,,, gash, The Gash manual}) is a
POSIX-compatible shell that replaces Bash, and it comes with Gash Utils
which has minimalist replacements for Awk, the GNU Core Utilities, Grep,
Gzip, Sed, and Tar.  The rest of the bootstrap binary seeds that were
removed are now built from source.

Building the GNU System from source is currently only possibly by adding
some historical GNU packages as intermediate steps@footnote{Packages such as
@code{gcc-2.95.3}, @code{binutils-2.14}, @code{glibc-2.2.5},
@code{gzip-1.2.4}, @code{tar-1.22}, and some others.  For details, see
@file{gnu/packages/commencement.scm}.}.  As Gash and Gash Utils mature, and
GNU packages become more bootstrappable again (e.g., new releases of GNU Sed
will also ship as gzipped tarballs again, as alternative to the hard to
bootstrap @code{xz}-compression), this set of added packages can hopefully
be reduced again.

The graph below shows the resulting dependency graph for
@code{gcc-core-mesboot0}, the bootstrap compiler used for the traditional
bootstrap of the rest of the Guix System.

@c ./pre-inst-env guix graph -e '(@@ (gnu packages commencement) gcc-core-mesboot0)' | sed -re 's,((bootstrap-mescc-tools|bootstrap-mes|guile-bootstrap).*shape =) box,\1 ellipse,' > doc/images/gcc-core-mesboot0-graph.dot
@image{images/gcc-core-mesboot0-graph,6in,,Dependency graph of
gcc-core-mesboot0}

The only significant binary bootstrap seeds that remain@footnote{ Ignoring
the 68KB @code{mescc-tools}; that will be removed later, together with
@code{mes}.} are a Scheme intepreter and a Scheme compiler: GNU Mes and GNU
Guile@footnote{Not shown in this graph are the static binaries for
@file{bash}, @code{tar}, and @code{xz} that are used to get Guile running.}.

This further reduction has brought down the size of the binary seed to about
60MB for @code{i686-linux} and @code{x86_64-linux}.

Work is ongoing to remove all binary blobs from our free software bootstrap
stack, working towards a Full Source Bootstrap.  Also ongoing is work to
bring these bootstraps to the @code{arm-linux} and @code{aarch64-linux}
architectures and to the Hurd.

If you are interested, join us on @samp{#bootstrappable} on the Freenode IRC
network or discuss on @email{bug-mes@@gnu.org} or
@email{gash-devel@@nongnu.org}.

@node Preparación para usar los binarios del lanzamiento inicial
@section Preparación para usar los binarios del lanzamiento inicial

@c As of Emacs 24.3, Info-mode displays the image, but since it's a
@c large image, it's hard to scroll.  Oh well.
@image{images/bootstrap-graph,6in,,Grafo de dependencias de las derivaciones
del lanzamiento inicial temprano}

La figura previa muestra el auténtico inicio del grafo de dependencias de la
distribución, correspondiente a las definiciones de paquete del módulo
@code{(gnu packages bootstrap)}. Un gráfico similar puede generarse con
@command{guix graph} (@pxref{Invocación de guix graph}), más o menos así:

@example
guix graph -t derivation \
  -e '(@@@@ (gnu packages bootstrap) %bootstrap-gcc)' \
  | dot -Tps > gcc.ps
@end example

or, for the further Reduced Binary Seed bootstrap

@example
guix graph -t derivation \
  -e '(@@@@ (gnu packages bootstrap) %bootstrap-mes)' \
  | dot -Tps > mes.ps
@end example

En este nivel de detalle, las cosas son ligeramente complejas. Primero,
Guile en sí consiste en un ejecutable ELF, junto a muchas fuentes y ficheros
compilados Scheme que se cargan dinámicamente durante la ejecución. Esto se
almacena en el archivador tar @file{guile-2.0.7.tar.xz} mostrado en este
grafo. Este archivador es parte de la distribución de ``fuentes'' de Guix, y
se inserta en el almacén con @code{add-to-store} (@pxref{El almacén}).

¿Pero cómo escribimos una derivación que extraiga este archivador y lo añada
al almacén? Para resolver este problema, la derivación
@code{guile-bootstrap-2.0.drv}---la primera en construirse---usa @code{bash}
como su constructor, que ejecuta @code{build-bootstrap-guile.sh}, que a su
vez llama a @code{tar} para extraer el archivador. Por tanto, @file{bash},
@file{tar}, @file{xz} y @file{mkdir} son binarios enlazados estáticamente,
también parte de la distribución de fuentes de Guix, cuyo único propósito es
permitir la extracción del archivador de Guile.

Once @code{guile-bootstrap-2.0.drv} is built, we have a functioning Guile
that can be used to run subsequent build programs.  Its first task is to
download tarballs containing the other pre-built binaries---this is what the
@file{.tar.xz.drv} derivations do.  Guix modules such as
@code{ftp-client.scm} are used for this purpose.  The
@code{module-import.drv} derivations import those modules in a directory in
the store, using the original layout.  The @code{module-import-compiled.drv}
derivations compile those modules, and write them in an output directory
with the right layout.  This corresponds to the @code{#:modules} argument of
@code{build-expression->derivation} (@pxref{Derivaciones}).

Finalmente, los archivadores tar son extraídos por las derivaciones
@code{gcc-bootstrap-0.drv}, @code{glibc-bootstrap-0.drv}, or
@code{bootstrap-mes-0.drv} y @code{bootstrap-mescc-tools-0.drv}, hasta el
punto en el que disponemos de una cadena de herramientas C funcional.

@unnumberedsec Construcción de las herramientas de construcción

El lanzamiento inicial está completo cuando tenemos una cadena de
herramientas completa que no depende en las herramientas preconstruidas del
lanzamiento inicial descritas previamente. Este requisito de no-dependencia
se verifica comprobando si los ficheros de la cadena de herramientas final
contienen referencias a directorios de @file{/gnu/store} de las entradas del
lanzamiento. El proceso que lleva a esta cadena de herramientas ``final'' es
descrito por las definiciones de paquetes encontradas en el módulo
@code{(gnu packages commencement)}.

La orden @command{guix graph} nos permite ``distanciarnos'' en comparación
con el grafo previo, mirando al nivel de objetos de paquetes en vez de
derivaciones individuales---recuerde que un paquete puede traducirse en
varias derivaciones, típicamente una derivación para descargar sus fuentes,
una para construir los módulos Guile que necesita y uno para realmente
construir el paquete de las fuentes. La orden:

@example
guix graph -t bag \
  -e '(@@@@ (gnu packages commencement)
          glibc-final-with-bootstrap-bash)' | xdot -
@end example

@noindent
displays the dependency graph leading to the ``final'' C
library@footnote{You may notice the @code{glibc-intermediate} label,
suggesting that it is not @emph{quite} final, but as a good approximation,
we will consider it final.}, depicted below.

@image{images/bootstrap-packages,6in,,Grafo de dependencias de los primeros
paquetes}

@c See <https://lists.gnu.org/archive/html/gnu-system-discuss/2012-10/msg00000.html>.
La primera herramienta que se construye con los binarios del lanzamiento
inicial es GNU@tie{}Make---marcado como @code{make-boot0} en el grafo---,
que es un pre-requisito para todos los paquetes siguientes. Una vez hecho se
construyen Findutils y Diffutils.

Then come the first-stage Binutils and GCC, built as pseudo cross
tools---i.e., with @option{--target} equal to @option{--host}.  They are
used to build libc.  Thanks to this cross-build trick, this libc is
guaranteed not to hold any reference to the initial tool chain.

From there the final Binutils and GCC (not shown above) are built.  GCC uses
@command{ld} from the final Binutils, and links programs against the
just-built libc.  This tool chain is used to build the other packages used
by Guix and by the GNU Build System: Guile, Bash, Coreutils, etc.

¡Y voilà! En este punto tenemos un conjunto completo de herramientas de
construcción esperadas por el sistema de construcción GNU. Están en la
variable @code{%final-inputs} del módulo @code{(gnu packages commencement)},
y se usan implícitamente por cualquier paquete que use
@code{gnu-build-system} (@pxref{Sistemas de construcción, @code{gnu-build-system}}).


@unnumberedsec Construir los binarios de lanzamiento

@cindex binarios del lanzamiento inicial
Debido a que la cadena de herramientas final no depende de los binarios de
lanzamiento, estos rara vez necesitan ser actualizados. No obstante, es útil
tener una forma automatizada de producirlos en caso de que se dé una
actualización, y esto es lo que proporciona el módulo @code{(gnu packages
make-bootstrap)}.

La siguiente orden construye los archivadores que contienen los binarios de
lanzamiento (Binutils, GCC, glibc para el lanzamiento inicial tradicional y
linux-libre-headers, bootstrap-mescc-tools y bootstrap-mes para el
lanzamiento inicial basado en la semilla binaria reducida, y Guile y un
archivador que contiene una mezcla de Coreutils y otras herramientas básicas
de línea de órdenes):

@example
guix build bootstrap-tarballs
@end example

Los archivadores ``tar'' generados son aquellos a cuya referencia debe
encontrarse en el módulo @code{(gnu packages bootstrap)} mencionado al
inicio de esta sección.

¿Todavía aquí? Entonces quizá se habrá empezado a preguntar: ¿cuándo
llegamos a un punto fijo? ¡Esa es una pregunta interesante! La respuesta es
desconocida, pero si pudiese investigar más a fondo (y tiene unos recursos
computacionales y de almacenamiento significativos para hacerlo) háganoslo
saber.

@unnumberedsec Reducción del conjunto de binarios de lanzamiento

Nuestros binarios de lanzamiento actualmente incluyen GCC, GNU Libc, Guile,
etc. ¡Eso es mucho código binario! ¿Por qué es eso un problema? Es un
problema porque esos grandes fragmentos de código binario no son auditables
en la práctica, lo que hace difícil establecer qué código fuente los
produjo. Cada binario no-auditable también nos deja vulnerables a puertas
traseras en los compiladores, como describió Ken Thompson en su publicación
de 1984 @emph{Reflections on Trusting Trust}.

Esto se mitiga por el hecho de que nuestros binarios de lanzamiento fueron
generados por una revisión anterior de Guix. No obstante, esto no posee el
nivel de transparencia que obtenemos en el resto del grado de dependencias
de los paquetes, donde Guix siempre nos da una asociación de
fuente-a-binario. Por lo tanto, nuestro objetivo es reducir el conjunto de
binarios de lanzamiento al mínimo posible.

El @uref{https://bootstrappable.org, sitio web Bootstrappable.org} enumera
proyectos en activo realizándolo. Uno de ellos está a punto de sustituir el
GCC de lanzamiento con una secuencia de ensambladores, interpretes y
compiladores de complejidad incremental, que pueden ser construidos desde
las fuentes empezando con un código ensamblador simple y auditable.

Nuestro primer logro de importancia es la sustitución de GCC, la biblioteca
de C de GNU y Binutils por MesCC-Tools (un enlazador hexadecimal y un
macro-ensamblador) y Mes (@pxref{Top, GNU Mes Reference Manual,, mes, GNU
Mes}, un intérprete de Scheme y compilador de C en Scheme). Ni MesCC-Tools
ni Mes pueden lanzarse inicialmente a sí mismas completamente todavía y por
lo tanto se inyectan como semillas binarias. A esto es lo que llamamos la
semilla binaria reducida del lanzamiento inicial, ¡ya que ha reducido a la
mitad el tamaño de nuestros binarios del lanzamiento inicial! También ha
eliminado el binario del compilador de C; los paquetes de Guix en i686-linux
y x86_64-linux se generan a partir de un lanzamiento inicial sin ningún
binario que sea un compilador de C.

Se está trabajando en hacer que MesCC-Tools y Mes puedan lanzarse
inicialmente de manera completa, y también se buscan otros binarios para el
lanzamiento inicial. ¡Su ayuda es bienvenida!

@node Transportar
@chapter Transportar a una nueva plataforma

Como se explicó previamente, la distribución GNU es autocontenida, lo cual
se consigue dependiendo de unos ``binarios del lanzamiento inicial''
preconstruidos (@pxref{Lanzamiento inicial}). Estos binarios son específicos para
un núcleo del sistema operativo, arquitectura de la CPU e interfaz binaria
de aplicaciones (ABI). Por tanto, para transportar la distribución a una
nueva plataforma que no está soportada todavía, se deben construir estos
binarios del lanzamiento inicial, y actualizar el módulo @code{(gnu packages
bootstrap)} para usarlos en dicha plataforma.

Por suerte, Guix puede @emph{compilar de forma cruzada} esos binarios del
lanzamiento inicial. Cuando todo va bien, y asumiendo que la cadena de
herramientas GNU soporta para la plataforma deseada, esto puede ser tan
simple como ejecutar una orden así:

@example
guix build --target=armv5tel-linux-gnueabi bootstrap-tarballs
@end example

Para que esto funcione, el procedimiento @code{glibc-dynamic-linker} en
@code{(gnu packages bootstrap)} debe aumentarse para devolver el nombre de
fichero correcto para el enlazador dinámico de libc en dicha plataforma; de
igual manera, @code{system->linux-architecture} en @code{(gnu packages
linux)} debe modificarse para la nueva plataforma.

Una vez construidos, el módulo @code{(gnu packages bootstrap)} debe ser
actualizado para hacer referencia a estos binarios en la plataforma
deseada. Esto es, los hash y las URL de los archivadores del lanzamiento
inicial de la nueva plataforma deben añadirse junto a aquellos de las
plataformas disponibles actualmente. El archivador tar del Guile usado para
el lanzamiento inicial se trata de forma especial: se espera que esté
disponible localmente, y @file{gnu/local.mk} tiene reglas que lo descargan
para las arquitecturas disponibles; se debe añadir una regla para la nueva
plataforma también.

In practice, there may be some complications.  First, it may be that the
extended GNU triplet that specifies an ABI (like the @code{eabi} suffix
above) is not recognized by all the GNU tools.  Typically, glibc recognizes
some of these, whereas GCC uses an extra @option{--with-abi} configure flag
(see @code{gcc.scm} for examples of how to handle this).  Second, some of
the required packages could fail to build for that platform.  Lastly, the
generated binaries could be broken for some reason.

@c *********************************************************************
@include contributing.es.texi

@c *********************************************************************
@node Reconocimientos
@chapter Reconocimientos

Guix is based on the @uref{https://nixos.org/nix/, Nix package manager},
which was designed and implemented by Eelco Dolstra, with contributions from
other people (see the @file{nix/AUTHORS} file in Guix).  Nix pioneered
functional package management, and promoted unprecedented features, such as
transactional package upgrades and rollbacks, per-user profiles, and
referentially transparent build processes.  Without this work, Guix would
not exist.

Las distribuciones de software basadas en Nix, Nixpkgs y NixOS, también han
sido una inspiración para Guix.

GNU@tie{}Guix en sí es un trabajo colectivo con contribuciones de un número
de gente. Mire el fichero @file{AUTHORS} en Guix para más información sobre
esa gente maja. El fichero @file{THANKS} enumera personas que han ayudado
informando de errores, se han encargado de infraestructura, han
proporcionando arte y temas, han realizado sugerencias, y más---¡gracias!


@c *********************************************************************
@node Licencia de documentación libre GNU
@appendix Licencia de documentación libre GNU
@cindex licencia, GNU Free Documentation License
@include fdl-1.3.texi

@c *********************************************************************
@node Índice de conceptos
@unnumbered Índice de conceptos
@printindex cp

@node Índice programático
@unnumbered Índice programático
@syncodeindex tp fn
@syncodeindex vr fn
@printindex fn

@bye

@c Local Variables:
@c ispell-local-dictionary: "american";
@c End:
