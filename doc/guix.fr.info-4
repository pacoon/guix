This is guix.fr.info, produced by makeinfo version 6.7 from
guix.fr.texi.

Copyright © 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 Ludovic
Courtès
Copyright © 2013, 2014, 2016 Andreas Enge
Copyright © 2013 Nikita Karetnikov
Copyright © 2014, 2015, 2016 Alex Kost
Copyright © 2015, 2016 Mathieu Lirzin
Copyright © 2014 Pierre-Antoine Rault
Copyright © 2015 Taylan Ulrich Bayırlı/Kammer
Copyright © 2015, 2016, 2017, 2019, 2020 Leo Famulari
Copyright © 2015, 2016, 2017, 2018, 2019, 2020 Ricardo Wurmus
Copyright © 2016 Ben Woodcroft
Copyright © 2016, 2017, 2018 Chris Marusich
Copyright © 2016, 2017, 2018, 2019, 2020 Efraim Flashner
Copyright © 2016 John Darrington
Copyright © 2016, 2017 Nikita Gillmann
Copyright © 2016, 2017, 2018, 2019, 2020 Jan Nieuwenhuizen
Copyright © 2016, 2017, 2018, 2019, 2020 Julien Lepiller
Copyright © 2016 Alex ter Weele
Copyright © 2016, 2017, 2018, 2019 Christopher Baines
Copyright © 2017, 2018, 2019 Clément Lassieur
Copyright © 2017, 2018 Mathieu Othacehe
Copyright © 2017 Federico Beffa
Copyright © 2017, 2018 Carlo Zancanaro
Copyright © 2017 Thomas Danckaert
Copyright © 2017 humanitiesNerd
Copyright © 2017 Christopher Allan Webber
Copyright © 2017, 2018, 2019, 2020 Marius Bakke
Copyright © 2017, 2019, 2020 Hartmut Goebel
Copyright © 2017, 2019, 2020 Maxim Cournoyer
Copyright © 2017, 2018, 2019, 2020 Tobias Geerinckx-Rice
Copyright © 2017 George Clemmer
Copyright © 2017 Andy Wingo
Copyright © 2017, 2018, 2019 Arun Isaac
Copyright © 2017 nee
Copyright © 2018 Rutger Helling
Copyright © 2018 Oleg Pykhalov
Copyright © 2018 Mike Gerwitz
Copyright © 2018 Pierre-Antoine Rouby
Copyright © 2018, 2019 Gábor Boskovits
Copyright © 2018, 2019 Florian Pelz
Copyright © 2018 Laura Lazzati
Copyright © 2018 Alex Vong
Copyright © 2019 Josh Holland
Copyright © 2019, 2020 Diego Nicola Barbato
Copyright © 2019 Ivan Petkov
Copyright © 2019 Jakob L. Kreuze
Copyright © 2019 Kyle Andrews
Copyright © 2019 Alex Griffin
Copyright © 2019 Guillaume Le Vaillant
Copyright © 2020 Leo Prikler
Copyright © 2019, 2020 Simon Tournier
Copyright © 2020 Wiktor Żelazny
Copyright © 2020 Damien Cassou
Copyright © 2020 Jakub Kądziołka
Copyright © 2020 Jack Hill
Copyright © 2020 Naga Malleswari
Copyright © 2020 Brice Waegeneire
Copyright © 2020 R Veera Kumar
Copyright © 2020 Pierre Langlois
Copyright © 2020 pinoaffe

   Vous avez la permission de copier, distribuer ou modifier ce document
sous les termes de la Licence GNU Free Documentation, version 1.3 ou
toute version ultérieure publiée par la Free Software Foundation ; sans
section invariante, texte de couverture et sans texte de quatrième de
couverture. Une copie de la licence est incluse dans la section
intitulée « GNU Free Documentation License ».
INFO-DIR-SECTION Administration système
START-INFO-DIR-ENTRY
* Guix: (guix.fr).           Gérer les logiciels installés et la
                               configuration du système.
* guix package : (guix.fr)Invoquer guix package.  Installer, supprimer et
                                                      mettre à jour des
                                                      paquets.
* guix gc : (guix.fr)Invoquer guix gc.  Récupérer de l’espace disque
                                            inutilisé.
* guix pull : (guix.fr)Invoquer guix pull.  Mettre à jour la liste des
                                                paquets disponibles.
* guix system : (guix.fr)Invoquer guix system.  Gérer la configuration du
                                                    système d’exploitation.
* guix deploy: (guix)Invoking guix deploy.  Manage operating system
                                              configurations for remote hosts.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Développement logiciel
START-INFO-DIR-ENTRY
* guix environment : (guix.fr)Invoquer guix environment.  Construire des
                                                              environnements
                                                              de construction
                                                              avec Guix.
* guix build : (guix.fr)Invoquer guix build.  Construire des paquets.
* guix pack : (guix.fr) Invoquer guix pack.  Créer des lots binaires.
END-INFO-DIR-ENTRY


File: guix.fr.info,  Node: Services de certificats,  Next: Services DNS,  Prev: Services web,  Up: Services

8.8.17 Services de certificats
------------------------------

Le module ‘(gnu services certbot)’ fournit un service qui récupère
automatiquement un certificat TLS valide de l’autorité de certification
Let’s Encrypt. Ces certificats peuvent ensuite être utilisés pour servir
du contenu de manière sécurisée sur HTTPS et d’autres protocoles basés
sur TLS, en sachant que le client sera capable de vérifier
l’authenticité du serveur.

   Let’s Encrypt (https://letsencrypt.org/) fournit l’outil ‘certbot’
pour automatiser le processus de certification. Cet outil génère d’abord
un clef sur le serveur de manière sécurisée. Ensuite il demande à
l’autorité de certification Let’s Encrypt de signer la clef. La CA
vérifie que la requête provient de l’hôte en question en utilisant un
protocole de défi-réponse, ce qui requiert que le serveur fournisse sa
réponse par HTTP. Si ce protocole se passe sans encombre, la CA signe la
clef et on obtient un certificat. Ce certificat est valide pour une
durée limitée et donc, pour continuer à fournir des services en TLS, le
serveur doit régulièrement demander à la CA de renouveler sa signature.

   Le service certbot automatise ce processus : la génération initiale
de la clef, la demande de certification initiale au service Let’s
Encrypt, l’intégration du protocole de défi/réponse dans le serveur web,
l’écriture du certificat sur le disque, les renouvellements périodiques
et les taches de déploiement avec le renouvellement (p. ex. recharger
les services, copier les clefs avec d’autres permissions).

   Certbot est lancé deux fois par jour, à une minute aléatoire dans
l’heure. Il ne fera rien sauf si vos certificats doivent être renouvelés
ou sont révoqués, mais le lancer régulièrement permettra à vos services
de rester en ligne si Let’s Encrypt décide de révoquer votre certificat.

   En utilisant ce service, vous acceptez le document « ACME Subscriber
Agreement », qu’on peut trouver ici :
<https://acme-v01.api.letsencrypt.org/directory>.

 -- Variable Scheme : certbot-service-type
     Un type de service pour le client Let’s Encrypt ‘certbot’. Sa
     valeur doit être un enregistrement ‘certbot-configuration’ comme
     dans cet exemple :

          (define %nginx-deploy-hook
            (program-file
             "nginx-deploy-hook"
             #~(let ((pid (call-with-input-file "/var/run/nginx/pid" read)))
                 (kill pid SIGHUP))))

          (service certbot-service-type
                   (certbot-configuration
                    (email "foo@example.net")
                    (certificates
                     (list
                      (certificate-configuration
                       (domains '("example.net" "www.example.net"))
                       (deploy-hook %nginx-deploy-hook))
                      (certificate-configuration
                       (domains '("bar.example.net")))))))

     Voir plus bas pour des détails sur ‘certbot-configuration’.

 -- Type de données : certbot-configuration
     Type données représentant la configuration du service ‘certbot’. Ce
     type a les paramètres suivants :

     ‘package’ (par défaut : ‘certbot’)
          Le paquet certbot à utiliser.

     ‘webroot’ (par défaut : ‘/var/www’)
          Le répertoire depuis lequel servir les fichiers du
          défi/réponse de Let’s Encrypt.

     ‘certificates’ (par défaut : ‘()’)
          Une liste de ‘certificates-configuration’ pour lesquels
          générer des certificats et demander des signatures. Chaque
          certificat a un ‘name’ et plusieurs ‘domains’.

     ‘email’
          Courriel obligatoire utilisé pour la création de compte, le
          contact en cas de problème et des notifications importantes
          sur le compte.

     ‘server’ (default: ‘#f’)
          Optional URL of ACME server. Setting this overrides certbot’s
          default, which is the Let’s Encrypt server.

     ‘rsa-key-size’ (par défaut : ‘2048’)
          Taille de la clef RSA.

     ‘default-location’ (par défaut : voir plus bas)
          Le ‘nginx-location-configuration’ par défaut. Comme ‘certbot’
          doit pouvoir servir les défis et les réponses, il doit être
          capable de lancer un serveur web. Cela se fait en étendant le
          service web ‘nginx’ avec un ‘nginx-server-configuration’ qui
          écoute sur les DOMAINS sur le port 80 et qui a un
          ‘nginx-location-configuration’ pour le chemin ‘/.well-known/’
          utilisé par Let’s Encrypt. *Note Services web:: pour plus
          d’information sur les types de données de la configuration de
          nginx.

          Les requêtes vers d’autres URL correspondra à
          ‘default-location’, qui, s’il est présent, sera ajout é à tous
          les ‘nginx-server-configuration’.

          Par défaut, le ‘default-location’ sera une redirection de
          ‘http://DOMAIN/…’ vers ‘https://DOMAIN/…’, en vous laissant
          définir ce que vous voulez servir sur votre site en ‘https’.

          Passez ‘#f’ pour ne pas utiliser de location par défaut.

 -- Type de données : certificate-configuration
     Type de données représentant la configuration d’un certificat. Ce
     type a les paramètres suivants :

     ‘name’ (par défaut : voir plus bas)
          Ce nom est utilisé par Certbot pour ses tâches quotidiennes et
          dans les chemins de fichiers ; il n’affecte pas le contenu des
          certificats eux-mêmes. Pour voir les noms des certificats,
          lancez ‘certbot certificates’.

          Sa valeur par défaut est le premier domaine spécifié.

     ‘domains’ (par défaut : ‘()’)
          Le premier domaine spécifié sera le CN du sujet du certificat,
          et tous les domaines seront les noms alternatifs du sujet dans
          le certificat.

     ‘challenge’ (par défaut : ‘#f’)
          The challenge type that has to be run by certbot. If ‘#f’ is
          specified, default to the HTTP challenge. If a value is
          specified, defaults to the manual plugin (see
          ‘authentication-hook’, ‘cleanup-hook’ and the documentation at
          <https://certbot.eff.org/docs/using.html#hooks>), and gives
          Let’s Encrypt permission to log the public IP address of the
          requesting machine.

     ‘authentication-hook’ (par défaut : ‘#t’)
          Commande à lancer dans un shell une fois par défi de
          certificat auquel répondre. Pour cette commande, la variable
          shell ‘$CERTBOT_DOMAIN’ contiendra le domaine à authentifier,
          ‘$CERTBOT_VALIDATION’ contiendra la chaîne de validation et
          ‘$CERTBOT_TOKEN’ contiendra le nom de fichier de la ressource
          demandée pour le défi HTTP-01.

     ‘cleanup-hook’ (par défaut : ‘#f’)
          Commande à lancer dans un shell une fois par défi de
          certificat auquel ‘auth-hook’ a répondu. Pour cette commande,
          les variables shell disponibles dans le script ‘auth-hook’
          sont toujours disponibles, et en plus ‘$CERTBOT_AUTH_OUTPUT’
          contiendra la sortie standard du script ‘auth-hook’.

     ‘deploy-hook’ (par défaut : ‘#f’)
          Commande à lancer dans un shell une fois par certificat
          récupéré avec succès. Pour cette commande, la variable
          ‘$RENEWED_LINEAGE’ pointera sur le sous-répertoire live (par
          exemple, ‘"/etc/letsencrypt/live/example.com"’) contenant le
          nouveau certificat et la clef ; la variable ‘$RENEWED_DOMAINS’
          contiendra les noms de domaines séparés par des espaces (par
          exemple ‘"example.com www.example.com"’).

   Pour chaque ‘certificate-configuration’, le certificat est sauvegardé
dans ‘/etc/letsencrypt/live/NAME/fullchain.pem’ et la clef est
sauvegardée dans ‘/etc/letsencrypt/live/NAME/privkey.pem’.


File: guix.fr.info,  Node: Services DNS,  Next: Services VPN,  Prev: Services de certificats,  Up: Services

8.8.18 Services DNS
-------------------

Le module ‘(gnu services dns)’ fournit des services liés au “système de
noms de domaines” (DNS). Il fournit un service de serveur pour héberger
un serveur DNS _faisant autorité_ pour plusieurs zones, en esclave ou en
maître. Ce service utilise Knot DNS (https://www.knot-dns.cz/). Il
fournit aussi un service de cache et de renvoie DNS pour le LAN, qui
utilise dnsmasq (http://www.thekelleys.org.uk/dnsmasq/doc.html).

Service Knot
............

Voici un exemple de configuration pour un serveur faisant autorité sur
deux zone, un maître et un esclave :

     (define-zone-entries example.org.zone
     ;; Name TTL Class Type Data
       ("@"  ""  "IN"  "A"  "127.0.0.1")
       ("@"  ""  "IN"  "NS" "ns")
       ("ns" ""  "IN"  "A"  "127.0.0.1"))

     (define master-zone
       (knot-zone-configuration
         (domain "example.org")
         (zone (zone-file
                 (origin "example.org")
                 (entries example.org.zone)))))

     (define slave-zone
       (knot-zone-configuration
         (domain "plop.org")
         (dnssec-policy "default")
         (master (list "plop-master"))))

     (define plop-master
       (knot-remote-configuration
         (id "plop-master")
         (address (list "208.76.58.171"))))

     (operating-system
       ;; ...
       (services (cons* (service knot-service-type
                          (knot-configuration
                            (remotes (list plop-master))
                            (zones (list master-zone slave-zone))))
                        ;; ...
                        %base-services)))

 -- Variable Scheme : knot-service-type
     C’est le type pour le serveur DNS Knot.

     Knot DNS est un serveur DNS faisant autorité, ce qui signifie qu’il
     peut servir plusieurs zones, c’est-à-dire des noms de domaines que
     vous achetez à un registrar. Ce serveur n’est pas un résolveur, ce
     qui signifie qu’il ne peut pas résoudre les noms pour lesquels il
     ne fait pas autorité. Ce serveur peut être configuré pour servir
     des zones comme un serveur maître ou comme un serveur esclave, en
     fonction des zones. Les zones esclaves récupèrent leurs données des
     maîtres, et seront servies comme faisant autorité. Du point de vue
     d’un résolveur, il n’y a pas de différence entre un maître et un
     esclave(1).

     Les types de données suivants sont utilisés pour configurer le
     serveur DNS Knot :

 -- Type de données : knot-key-configuration
     Type de données représentant une clef. Ce type a les paramètres
     suivants :

     ‘id’ (par défaut : ‘""’)
          Un identifiant pour d’autres champs de configuration qui se
          réfèrent à cette clef. Les ID doivent être uniques et non
          vides.

     ‘algorithm’ (par défaut : ‘#f’)
          L’algorithme à utiliser. Choisissez entre ‘#f’, ‘'hmac-md5’,
          ‘'hmac-sha1’, ‘'hmac-sha224’, ‘'hmac-sha256’, ‘'hmac-sha384’
          et ‘'hmac-sha512’.

     ‘secret’ (par défaut : ‘""’)
          La clef secrète elle-même.

 -- Type de données : knot-acl-configuration
     Type de données représentant une configuration de liste de contrôle
     d’accès (ACL). Ce type a les paramètres suivants :

     ‘id’ (par défaut : ‘""’)
          Un identifiant pour d’autres champs de configuration qui se
          réfèrent à cette clef. Les ID doivent être uniques et non
          vides.

     ‘address’ (par défaut : ‘'()’)
          Une liste ordonnée d’adresses IP, de sous-réseaux ou
          d’intervalles de réseaux représentés par des chaînes de
          caractères. La requête doit correspondre à l’une d’entre
          elles. La valeur vide signifie que l’adresse n’a pas besoin de
          correspondre.

     ‘key’ (par défaut : ‘'()’)
          Une liste ordonnées de références à des clefs représentés par
          des chaînes. La chaîne doit correspondre à un ID définie dans
          un ‘knot-key-configuration’. Aucune clef signifie qu’une clef
          n’est pas nécessaire pour correspondre à l’ACL.

     ‘action’ (par défaut : ‘'()’)
          Une liste ordonnée d’actions permises ou interdites par cet
          ACL. Les valeurs possibles sont une liste de zéro ou plus
          d’éléments entre ‘'transfer’, ‘'notify’ et ‘'update’.

     ‘deny?’ (par défaut : ‘#f’)
          Lorsque la valeur est vraie, l’ACL définie des restrictions.
          Les actions listées sont interdites. Lorsque la valeur est
          fausse, les actions listées sont autorisées.

 -- Type de données : zone-entry
     Data type representing a record entry in a zone file. This type has
     the following parameters:

     ‘name’ (par défaut : ‘"@"’)
          Le nom de l’enregistrement. ‘"@"’ se réfère à l’origine de la
          zone. Les noms sont relatifs à l’origine de la zone. Par
          exemple, dans la zone ‘example.org’, ‘"ns.example.org"’ se
          réfère en fait à ‘ns.example.org.example.org’. Les noms qui
          finissent par un point sont absolus, ce qui signifie que
          ‘"ns.example.org."’ se réfère bien à ‘ns.example.org’.

     ‘ttl’ (par défaut : ‘""’)
          La durée de vie (TTL) de cet enregistrement. S’il n’est pas
          indiqué, le TTL par défaut est utilisé.

     ‘class’ (par défaut : ‘"IN"’)
          La classe de l’enregistrement. Knot ne supporte actuellement
          que ‘"IN"’ et partiellement ‘"CH"’.

     ‘type’ (par défaut : ‘"A"’)
          Le type d’enregistrement. Les types usuels sont A (une adresse
          IPv4), NS (serveur de nom) et MX (serveur de courriel). Bien
          d’autres types sont définis.

     ‘data’ (par défaut : ‘""’)
          Les données contenues dans l’enregistrement. Par exemple une
          adresse IP associée à un enregistrement A, ou un nom de
          domaine associé à un enregistrement NS. Rappelez-vous que les
          noms de domaines sont relatifs à l’origine à moins qu’ils ne
          finissent par un point.

 -- Type de données : zone-file
     Type données représentant le contenu d’un fichier de zone. Ce type
     a les paramètres suivants :

     ‘entries’ (par défaut : ‘'()’)
          La liste des entrées. On s’occupe de l’enregistrement SOA,
          donc vous n’avez pas besoin de l’ajouter dans la liste des
          entrées. Cette liste devrait contenir une entrée pour votre
          serveur DNS primaire faisant autorité. En plus d’utiliser une
          liste des entrées directement, vous pouvez utiliser
          ‘define-zone-entries’ pour définir un objet contenant la liste
          des entrées plus facilement, que vous pouvez ensuite passer au
          champ ‘entries’ de ‘zone-file’.

     ‘origin’ (par défaut : ‘""’)
          Le nom de votre zone. Ce paramètre ne peut pas être vide.

     ‘ns’ (par défaut : ‘"ns"’)
          Le domaine de votre serveur DNS primaire faisant autorité. Le
          nom est relatif à l’origine, à moins qu’il finisse par un
          point. Il est nécessaire que ce serveur DNS primaire
          corresponde à un enregistrement NS dans la zone et qu’il soit
          associé à une adresse IP dans la liste des entrées.

     ‘mail’ (par défaut : ‘"hostmaster"’)
          Une adresse de courriel pour vous contacter en tant que
          propriétaire de la zone. Cela se transforme en
          ‘<mail>@<origin>’.

     ‘serial’ (par défaut : ‘1’)
          Le numéro de série de la zone. Comme c’est utilisé pour
          vérifier les changements à la fois par les esclaves et par les
          résolveurs, il est nécessaire qu’il ne décroisse _jamais_.
          Incrémentez-le toujours quand vous faites un changement sur
          votre zone.

     ‘refresh’ (par défaut : ‘(* 2 24 3600)’)
          La fréquence à laquelle les esclaves demanderont un transfert
          de zone. Cette valeur est un nombre de secondes. On peut le
          calculer avec des multiplications ou avec
          ‘(string->duration)’.

     ‘retry’ (par défaut : ‘(* 15 60)’)
          La période après laquelle un esclave essaiera de contacter son
          maître lorsqu’il échoue à le faire la première fois.

     ‘expiry’ (par défaut : ‘(* 14 24 3600)’)
          TTL par défaut des enregistrements. Les enregistrements
          existants sont considérés corrects pour au moins cette durée.
          Après cette période, les résolveurs invalideront leur cache et
          vérifieront de nouveau qu’ils existent toujours.

     ‘nx’ (par défaut : ‘3600’)
          TTL par défaut des enregistrement inexistants. Ce TTL est
          habituellement court parce que vous voulez que vous nouveaux
          domaines soient disponibles pour tout le monde le plus
          rapidement possible.

 -- Type de données : knot-remote-configuration
     Type de données représentant une configuration de serveurs
     distants. Ce type a les paramètres suivants :

     ‘id’ (par défaut : ‘""’)
          Un identifiant pour que les autres champs de configuration se
          réfèrent à ce serveur distant. les ID doivent être uniques et
          non vides.

     ‘address’ (par défaut : ‘'()’)
          Une liste ordonnée d’adresses IP de destination. Ces adresses
          sont essayées en séquence. Un port facultatif peut être donné
          avec le séparateur @. Par exemple ‘(list "1.2.3.4"
          "2.3.4.5@53")’. Le port par défaut est le 53.

     ‘via’ (par défaut : ‘'()’)
          Une liste ordonnée d’adresses IP sources. Une liste vide fera
          choisir une IP source appropriée à Knot. Un port facultatif
          peut être donné avec le séparateur @. La valeur par défaut est
          de choisir aléatoirement.

     ‘key’ (par défaut : ‘#f’)
          Une référence à une clef, c’est-à-dire une chaîne contenant
          l’identifiant d’une clef définie dans un champ
          ‘knot-key-configuration’.

 -- Type de données : knot-keystore-configuration
     Type de données représentant une base de clefs pour garder les
     clefs dnssec. Ce type a les paramètres suivants :

     ‘id’ (par défaut : ‘""’)
          L’id de cette base de clefs. Il ne doit pas être vide.

     ‘backend’ (par défaut : ‘'pem’)
          Le moteur de stockage des clefs. Cela peut être ‘'pem’ ou
          ‘'pkcs11’.

     ‘config’ (par défaut : ‘"/var/lib/knot/keys/keys"’)
          The configuration string of the backend. An example for the
          PKCS#11 is: ‘"pkcs11:token=knot;pin-value=1234
          /gnu/store/.../lib/pkcs11/libsofthsm2.so"’. For the pem
          backend, the string represents a path in the file system.

 -- Type de données : knot-policy-configuration
     Type de données représentant une politique dnssec. Knot DNS est
     capable de signer automatiquement vos zones. Il peut soit générer
     et gérer vos clefs automatiquement ou utiliser des clefs que vous
     générez.

     Dnssec est habituellement implémenté avec deux clefs : une KSK (key
     signing key) qui est utilisé pour signer une seconde, la ZSK (zone
     signing key) qui est utilisée pour signer la zone. Pour pouvoir
     être de confiance, la KSK doit être présente dans la zone parente
     (normalement un domaine de haut niveau). Si votre registrar
     supporte dnssec, vous devrez leur envoyer le hash de votre KSK pour
     qu’il puisse ajouter un enregistrement DS dans la zone parente. Ce
     n’est pas automatique et vous devrez le faire à chaque fois que
     vous changerez votre KSK.

     La politique définie aussi la durée de vie des clefs.
     Habituellement, la ZSK peut être changée facilement et utilise des
     fonctions cryptographiques plus faibles (avec un paramètre plus
     faible) pour signer les enregistrements rapidement, donc elles sont
     changées très régulièrement. La KSK en revanche requiert une
     interaction manuelle avec le registrar, donc elle change moins
     souvent et utilise des paramètres plus robustes puisqu’elle ne
     signe qu’un seul enregistrement.

     Ce type a les paramètres suivants :

     ‘id’ (par défaut : ‘""’)
          L’id de la politique. Il ne doit pas être vide.

     ‘keystore’ (par défaut : ‘"default"’)
          Une référence à une base de clefs, c’est-à-dire une chaîne
          contenant l’identifiant d’une base de clefs définie dans un
          champ ‘knot-keystore-configuration’. L’identifiant ‘"default"’
          signifie la base par défaut (une base de données kasp
          initialisée par ce service).

     ‘manual?’ (par défaut : ‘#f’)
          Indique si la clef est gérée manuellement ou automatiquement.

     ‘single-type-signing?’ (par défaut : ‘#f’)
          Lorsque la valeur est ‘#t’, utilise le schéma de signature
          Single-Type.

     ‘algorithm’ (par défaut : ‘"ecdsap256sha256"’)
          Un algorithme de clef de signature et de signatures.

     ‘ksk-size’ (par défaut : ‘256’)
          La longueur de la KSK. Remarquez que cette valeur est correcte
          pour l’algorithme par défaut, mais ne serait pas sécurisée
          pour d’autres algorithmes.

     ‘zsk-size’ (par défaut : ‘256’)
          La longueur de la ZSK. Remarquez que cette valeur est correcte
          pour l’algorithme par défaut, mais ne serait pas sécurisée
          pour d’autres algorithmes.

     ‘dnskey-ttl’ (par défaut : ‘'default’)
          La valeur du TTL pour les enregistrements DNSKEY ajoutés au
          sommet de la zone. La valeur spéciale ‘'default’ signifie la
          même valeur que le TTL du SOA de la zone.

     ‘zsk-lifetime’ (par défaut : ‘(* 30 24 3600)’)
          La période entre la publication d’une ZSK et l’initialisation
          d’un nouveau changement.

     ‘propagation-delay’ (par défaut : ‘(* 24 3600)’)
          Un délai supplémentaire pour chaque étape du changement. Cette
          valeur devrait être assez grande pour couvrir le temps de
          propagation des données entre le serveur primaire et tous les
          secondaires.

     ‘rrsig-lifetime’ (par défaut : ‘(* 14 24 3600)’)
          Une période de validité des nouvelles signatures.

     ‘rrsig-refresh’ (par défaut : ‘(* 7 24 3600)’)
          Une période qui indique combien de temps avant l’expiration
          d’une signature elle sera rafraîchie.

     ‘nsec3?’ (par défaut : ‘#f’)
          Lorsque la valeur est ‘#t’, on utilisera NSEC3 au lien de
          NSEC.

     ‘nsec3-iterations’ (par défaut : ‘5’)
          Le nombre de fois supplémentaires que le hash est effectué.

     ‘nsec3-salt-length’ (par défaut : ‘8’)
          La longueur du champ de sel en octets, ajouté au nom du
          propriétaire avant de hasher.

     ‘nsec3-salt-lifetime’ (par défaut : ‘(* 30 24 3600)’)
          La période de validité des nouveaux champs sel.

 -- Type de données : knot-zone-configuration
     Type de données représentant la zone servie par Knot. ce type a les
     paramètres suivants :

     ‘domain’ (par défaut : ‘""’)
          Le domaine servi par cette configuration. Il ne doit pas être
          vide.

     ‘file’ (par défaut : ‘""’)
          Le fichier où la zone est sauvegardée. Ce paramètre est ignoré
          pour les zones maîtres. La valeur vide signifie l’emplacement
          par défaut qui dépend du nom de domaine.

     ‘zone’ (par défaut : ‘(zone-file)’)
          Le contenu du fichier de zone. Ce paramètre est ignoré par les
          zones esclaves. Il doit contenir un enregistrement zone-file.

     ‘master’ (par défaut : ‘'()’)
          Une liste des serveurs distants maîtres. Lorsque la liste est
          vide, cette zone est un maître. Lorsque la valeur est
          indiquée, cette zone est un esclave. C’est al liste des
          identifiants des serveurs distants.

     ‘ddns-master’ (par défaut : ‘#f’)
          Le maître principal. Lorsque la valeur est vide, la valeur par
          défaut est le premier maître de la liste des maîtres.

     ‘notify’ (par défaut : ‘'()’)
          Une liste d’identifiants de groupe de serveurs esclaves.

     ‘acl’ (par défaut : ‘'()’)
          Une liste d’identifiants d’ACL.

     ‘semantic-checks?’ (par défaut : ‘#f’)
          Lorsque la valeur est indiquée, cela ajoute plus de
          vérifications sémantiques à la zone.

     ‘disable-any?’ (par défaut : ‘#f’)
          Lorsque la valeur est vraie, cela interdit les requêtes de
          type ANY.

     ‘zonefile-sync’ (par défaut : ‘0’)
          Le délai entre une modification en mémoire et sur le disque. 0
          signifie une synchronisation immédiate.

     ‘zonefile-load’ (par défaut : ‘#f’)
          La manière dont le contenu du fichier de zone influe sur le
          chargement de la zone. Les valeurs possibles sont :

             • ‘#f’ pour utilise la valeur par défaut de Knot,
             • ‘'none’ pour ne pas utiliser le fichier de zone du tout,
             • ‘'difference’ pour calculer les différences entre le
               contenu déjà disponible et le contenu du fichier de zone
               et les appliquer au contenu actuel de la zone,
             • ‘'difference-no-serial’ pour la même chose que
               ‘'difference’, mais en ignorant le serial du SOA du
               fichier de zone, pour que le serveur s’en charge
               automatiquement.
             • ‘'whole’ pour charger le contenu de la zone depuis le
               fichier de zone.

     ‘journal-content’ (par défaut : ‘#f’)
          La manière dont le journal est utilisé pour stocker la zone et
          ses changements. Les valeurs possibles sont ‘'none’ pour ne
          pas l’utiliser du tout, ‘'changes’ pour stocker les
          changements et ‘'all’ pour stocker le contenu. ‘#f’ ne met pas
          en place cette option et la valeur par défaut de Knot est
          utilisée.

     ‘max-journal-usage’ (par défaut : ‘#f’)
          La taille maximale du journal sur le disque. ‘#f’ ne met pas
          en place cette option et la valeur par défaut de Knot est
          utilisée.

     ‘max-journal-depth’ (par défaut : ‘#f’)
          La taille maximale de l’historique. ‘#f’ ne met pas en place
          cette option et la valeur par défaut de Knot est utilisée.

     ‘max-zone-size’ (par défaut : ‘#f’)
          La taille maximale du fichier de zone. Cette limite est prise
          en charge pour les transferts entrants et les mises à jour.
          ‘#f’ ne met pas en place cette option et la valeur par défaut
          de Knot est utilisée.

     ‘dnssec-policy’ (par défaut : ‘#f’)
          Une référence à un enregistrement ‘knot-policy-configuration’,
          ou le nom spécial ‘"default"’. Si la valeur est ‘#f’, cette
          zone n’est pas signée.

     ‘serial-policy’ (par défaut : ‘'increment’)
          Une politique entre ‘'increment’ et ‘'unixtime’.

 -- Type de données : knot-configuration
     Type de données représentant la configuration de Knot. Ce type a
     les paramètres suivants :

     ‘knot’ (par défaut : ‘knot’)
          Le paquet Knot.

     ‘run-directory’ (par défaut : ‘"/var/run/knot"’)
          Le répertoire de travail. Ce répertoire sera utilisé pour le
          fichier pid et les sockets.

     ‘includes’ (par défaut : ‘'()’)
          Une liste plate de chaînes ou d’objets simili-fichiers qui
          seront inclus en haut du fichier de configuration.

          Cela peut être utile pour gérer des secrets hors-bande. Par
          exemple, on peut stocker des clefs secrètes dans un fichier
          hors-bande qui n’est pas géré par Guix, et donc pas visible
          dans ‘/gnu/store’ — p. ex. vous pouvez stocker la
          configuration des clefs secrètes dans ‘/etc/knot/secrets.conf’
          et ajouter ce fichier à la lite ‘includes’.

          One can generate a secret tsig key (for nsupdate and zone
          transfers with the keymgr command from the knot package. Note
          that the package is not automatically installed by the
          service. The following example shows how to generate a new
          tsig key:

               keymgr -t mysecret > /etc/knot/secrets.conf
               chmod 600 /etc/knot/secrets.conf

          Also note that the generated key will be named MYSECRET, so it
          is the name that needs to be used in the KEY field of the
          ‘knot-acl-configuration’ record and in other places that need
          to refer to that key.

          Cela peut aussi être utilisé pour ajouter des configurations
          qui ne sont pas prises en charge par cette interface.

     ‘listen-v4’ (par défaut : ‘"0.0.0.0"’)
          Une adresse IP sur laquelle écouter.

     ‘listen-v6’ (par défaut : ‘"::"’)
          Une adresse IP sur laquelle écouter.

     ‘listen-port’ (par défaut : ‘53’)
          Un port sur lequel écouter.

     ‘keys’ (par défaut : ‘'()’)
          La liste des knot-key-configuration utilisés par cette
          configuration.

     ‘acls’ (par défaut : ‘'()’)
          La liste des knot-acl-configuration utilisés par cette
          configuration.

     ‘remotes’ (par défaut : ‘'()’)
          La liste des knot-remote-configuration utilisés par cette
          configuration.

     ‘zones’ (par défaut : ‘'()’)
          La liste des knot-zone-configuration utilisés par cette
          configuration.

Knot Resolver Service
.....................

 -- Scheme Variable : knot-resolver-service-type
     This this the type of the knot resolver service, whose value should
     be an ‘knot-resolver-configuration’ object as in this example:

          (service knot-resolver-service-type
                   (knot-resolver-configuration
                     (kresd-config-file (plain-file "kresd.conf" "
          net.listen('192.168.0.1', 5353)
          user('knot-resolver', 'knot-resolver')
          modules = { 'hints > iterate', 'stats', 'predict' }
          cache.size = 100 * MB
          "))))

     For more information, refer its manual
     (https://knot-resolver.readthedocs.org/en/stable/daemon.html#configuration).

 -- Data Type : knot-resolver-configuration
     Data type representing the configuration of knot-resolver.

     ‘package’ (default: KNOT-RESOLVER)
          Package object of the knot DNS resolver.

     ‘kresd-config-file’ (default: %kresd.conf)
          File-like object of the kresd configuration file to use, by
          default it will listen on ‘127.0.0.1’ and ‘::1’.

     ‘garbage-collection-interval’ (default: 1000)
          Number of milliseconds for ‘kres-cache-gc’ to periodically
          trim the cache.

Services Dnsmasq
................

 -- Variable Scheme : dnsmasq-service-type
     C’est le type du service dnsmasq, dont la valeur devrait être un
     objet ‘dnsmasq-configuration’ comme dans cet exemple :

          (service dnsmasq-service-type
                   (dnsmasq-configuration
                     (no-resolv? #t)
                     (servers '("192.168.1.1"))))

 -- Type de données : dnsmasq-configuration
     Type de données qui représente la configuration de dnsmasq.

     ‘package’ (par défaut : DNSMASQ)
          L’objet de paquet du serveur dnsmasq.

     ‘no-hosts?’ (par défaut : ‘#f’)
          Lorsque la valeur est vraie, ne pas lire les noms d’hôte dans
          /etc/hosts.

     ‘port’ (par défaut : ‘53’)
          Le port sur lequel écouter. Le mettre à zéro désactive
          complètement les réponses DNS, ce qui ne laisse que les
          fonctions DHCP et TFTP.

     ‘local-service?’ (par défaut : ‘#t’)
          Accepte les requêtes DNS seulement des hôtes dont les adresses
          sont sur le sous-réseau local, c.-à-d. sur un sous-réseau pour
          lequel une interface existe sur le serveur.

     ‘listen-addresses’ (par défaut : ‘'()’)
          Écoute sur le adresses IP données.

     ‘resolv-file’ (par défaut : ‘"/etc/resolv.conf"’)
          Le fichier où lire l’adresse IP des serveurs de noms en amont.

     ‘no-resolv?’ (par défaut : ‘#f’)
          Lorsque la valeur est vraie, ne pas lire RESOLV-FILE.

     ‘servers’ (par défaut : ‘'()’)
          Spécifiez l’adresse IP des serveurs en amont directement.

     ‘addresses’ (default: ‘'()’)
          For each entry, specify an IP address to return for any host
          in the given domains. Queries in the domains are never
          forwarded and always replied to with the specified IP address.

          This is useful for redirecting hosts locally, for example:

               (service dnsmasq-service-type
                        (dnsmasq-configuration
                          (addresses
                            '(; Redirect to a local web-server.
                              "/example.org/127.0.0.1"
                              ; Redirect subdomain to a specific IP.
                              "/subdomain.example.org/192.168.1.42"))))

          Note that rules in ‘/etc/hosts’ take precedence over this.

     ‘cache-size’ (par défaut : ‘150’)
          Indique la taille du cache de dnsmasq. Indiquer 0 désactive le
          cache.

     ‘negative-cache?’ (par défaut : ‘#t’)
          Lorsque la valeur est fausse, désactive le cache des réponses
          négatives.

Service ddclient
................

Le service ddclient décrit plus bas lance le démon ddclient, qui prend
en charge la mise à jour automatique des entrées DNS pour les
fournisseurs de service comme Dyn (https://dyn.com/dns/).

   L’exemple suivant montre comment instantier le service avec sa
configuration par défaut :

     (service ddclient-service-type)

   Note that ddclient needs to access credentials that are stored in a
“secret file”, by default ‘/etc/ddclient/secrets’ (see ‘secret-file’
below). You are expected to create this file manually, in an
“out-of-band” fashion (you _could_ make this file part of the service
configuration, for instance by using ‘plain-file’, but it will be
world-readable via ‘/gnu/store’). See the examples in the
‘share/ddclient’ directory of the ‘ddclient’ package.

   Les champs de ‘ddclient-configuration’ disponibles sont :

 -- paramètre de ‘ddclient-configuration’ : package ddclient
     Le paquet ddclient.

 -- paramètre de ‘ddclient-configuration’ : integer daemon
     La période après laquelle ddclient réessaiera de vérifier l’IP et
     le nom de domaine.

     La valeur par défaut est ‘300’.

 -- paramètre de ‘ddclient-configuration’ : boolean syslog
     Utiliser syslog pour la sortie.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘ddclient-configuration’ : string mail
     Courriel de l’utilisateur.

     La valeur par défaut est ‘"root"’.

 -- paramètre de ‘ddclient-configuration’ : string mail-failure
     Courriel de l’utilisateur pour les échecs.

     La valeur par défaut est ‘"root"’.

 -- paramètre de ‘ddclient-configuration’ : string pid
     Le fichier de PID de ddclient.

     La valeur par défaut est ‘"/var/run/ddclient/ddclient.pid"’.

 -- paramètre de ‘ddclient-configuration’ : boolean ssl
     Activer le support de SSL.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘ddclient-configuration’ : string user
     Spécifie le nm d’utilisateur ou l’ID qui est utilisé pour lancer le
     programme ddclient.

     La valeur par défaut est ‘"ddclient"’.

 -- paramètre de ‘ddclient-configuration’ : string group
     Groupe de l’utilisateur qui lancera le programme ddclient.

     La valeur par défaut est ‘"ddclient"’.

 -- paramètre de ‘ddclient-configuration’ : string secret-file
     Fichier de secrets qui sera ajouté au fichier ‘ddclient.conf’. Ce
     fichier contient les paramètres d’authentification utilisés par
     ddclient. On s’attend à ce que vous le créiez manuellement.

     La valeur par défaut est ‘"/etc/ddclient/secrets.conf"’.

 -- paramètre de ‘ddclient-configuration’ : list extra-options
     Options supplémentaires qui seront ajoutées au fichier
     ‘ddclient.conf’.

     La valeur par défaut est ‘()’.

   ---------- Footnotes ----------

   (1) NdT : Voir la conférence en Français de Stéphane Bortzmeyer pour
en apprendre plus sur le DNS :
<https://iletaitunefoisinternet.fr/dns-bortzmeyer/index.html>


File: guix.fr.info,  Node: Services VPN,  Next: Système de fichiers en réseau,  Prev: Services DNS,  Up: Services

8.8.19 Services VPN
-------------------

Le module ‘(gnu services vpn)’ fournit des services liés aux “réseaux
privés virtuels” (VPN). Il fournit un srevice _client_ pour que votre
machine se connecte à un VPN et un service _serveur_ pour que votre
machine héberge un VPN. Les deux services utilisent OpenVPN
(https://openvpn.net/).

 -- Procédure Scheme : openvpn-client-service [#:config
          (openvpn-client-configuration)]

     Renvoie un service qui lance ‘openvpn’, un démon VPN, en tant que
     client.

 -- Procédure Scheme : openvpn-server-service [#:config
          (openvpn-server-configuration)]

     Renvoie un service qui lance ‘openvpn’, un démon VPN, en tant que
     serveur.

     Les deux services peuvent être lancés en même temps.

   Les champs de ‘openvpn-client-configuration’ disponibles sont :

 -- paramètre de ‘openvpn-client-configuration’ : package openvpn
     Le paquet OpenVPN.

 -- paramètre de ‘openvpn-client-configuration’ : string pid-file
     Le fichier de PID d’OpenVPN.

     La valeur par défaut est ‘"/var/run/openvpn/openvpn.pid"’.

 -- paramètre de ‘openvpn-client-configuration’ : proto proto
     Le protocole (UDP ou TCP) utilisé pour ouvrir un canal entre les
     clients et les serveurs.

     La valeur par défaut est ‘udp’.

 -- paramètre de ‘openvpn-client-configuration’ : dev dev
     Le périphérique utilisé pour représenter la connexion VPN.

     La valeur par défaut est ‘tun’.

 -- paramètre de ‘openvpn-client-configuration’ : string ca
     L’autorité de certification qui sert à vérifier les connexions.

     La valeur par défaut est ‘"/etc/openvpn/ca.crt"’.

 -- paramètre de ‘openvpn-client-configuration’ : string cert
     Le certificat de la machine sur laquelle tourne le démon. Il
     devrait être signé par l’autorité indiquée dans ‘ca’.

     La valeur par défaut est ‘"/etc/openvpn/client.crt"’.

 -- paramètre de ‘openvpn-client-configuration’ : string key
     La clef de la machine sur laquelle tourne le démon. Elle doit être
     la clef dont le certificat est donné dans ‘cert’.

     La valeur par défaut est ‘"/etc/openvpn/client.key"’.

 -- paramètre de ‘openvpn-client-configuration’ : boolean comp-lzo?
     Indique s’il faut utiliser l’algorithme de compression lzo.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘openvpn-client-configuration’ : boolean persist-key?
     Ne pas relire les fichiers de clefs entre les SIGUSR1 et les
     –ping-restart.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘openvpn-client-configuration’ : boolean persist-tun?
     Ne pas fermer et rouvrir les périphériques TUN/TAP ou lancer de
     scripts de démarrage/d’arrêt entre les SIGUSR1 et les
     –ping-restart.

     La valeur par défaut est ‘#t’.

 -- ‘openvpn-client-configuration’ parameter : boolean fast-io?
     (Experimental) Optimize TUN/TAP/UDP I/O writes by avoiding a call
     to poll/epoll/select prior to the write operation.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘openvpn-client-configuration’ : number verbosity
     Niveau de verbosité.

     La valeur par défaut est ‘3’.

 -- paramètre de ‘openvpn-client-configuration’ : tls-auth-client
          tls-auth
     Ajoute une couche d’authentification HMAC supplémentaire au dessus
     du canal de contrôle TLS pour se protéger contre les attaques DoS.

     La valeur par défaut est ‘#f’.

 -- ‘openvpn-client-configuration’ parameter : maybe-string
          auth-user-pass
     Authenticate with server using username/password. The option is a
     file containing username/password on 2 lines. Do not use a
     file-like object as it would be added to the store and readable by
     any user.

     Defaults to ‘'disabled’.

 -- paramètre de ‘openvpn-client-configuration’ : key-usage
          verify-key-usage?
     Indique s’il faut vérifier que le certificat du serveur a
     l’extension d’utilisation.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘openvpn-client-configuration’ : bind bind?
     Se lier à un port spécifique.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘openvpn-client-configuration’ : resolv-retry
          resolv-retry?
     Réessayer de résoudre l’adresse du serveur.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘openvpn-client-configuration’ : openvpn-remote-list
          remote
     Une liste de serveurs distants sur lesquels se connecter.

     La valeur par défaut est ‘()’.

     Les champs de ‘openvpn-remote-configuration’ disponibles sont :

      -- paramètre de ‘openvpn-remote-configuration’ : string name
          Nom du serveur.

          La valeur par défaut est ‘"my-server"’.

      -- paramètre de ‘openvpn-remote-configuration’ : number port
          Numéro de port sur lequel écoute le serveur.

          La valeur par défaut est ‘1194’.

   Les champs de ‘openvpn-server-configuration’ disponibles sont :

 -- paramètre de ‘openvpn-server-configuration’ : package openvpn
     Le paquet OpenVPN.

 -- paramètre de ‘openvpn-server-configuration’ : string pid-file
     Le fichier de PID d’OpenVPN.

     La valeur par défaut est ‘"/var/run/openvpn/openvpn.pid"’.

 -- paramètre de ‘openvpn-server-configuration’ : proto proto
     Le protocole (UDP ou TCP) utilisé pour ouvrir un canal entre les
     clients et les serveurs.

     La valeur par défaut est ‘udp’.

 -- paramètre de ‘openvpn-server-configuration’ : dev dev
     Le périphérique utilisé pour représenter la connexion VPN.

     La valeur par défaut est ‘tun’.

 -- paramètre de ‘openvpn-server-configuration’ : string ca
     L’autorité de certification qui sert à vérifier les connexions.

     La valeur par défaut est ‘"/etc/openvpn/ca.crt"’.

 -- paramètre de ‘openvpn-server-configuration’ : string cert
     Le certificat de la machine sur laquelle tourne le démon. Il
     devrait être signé par l’autorité indiquée dans ‘ca’.

     La valeur par défaut est ‘"/etc/openvpn/client.crt"’.

 -- paramètre de ‘openvpn-server-configuration’ : string key
     La clef de la machine sur laquelle tourne le démon. Elle doit être
     la clef dont le certificat est donné dans ‘cert’.

     La valeur par défaut est ‘"/etc/openvpn/client.key"’.

 -- paramètre de ‘openvpn-server-configuration’ : boolean comp-lzo?
     Indique s’il faut utiliser l’algorithme de compression lzo.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘openvpn-server-configuration’ : boolean persist-key?
     Ne pas relire les fichiers de clefs entre les SIGUSR1 et les
     –ping-restart.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘openvpn-server-configuration’ : boolean persist-tun?
     Ne pas fermer et rouvrir les périphériques TUN/TAP ou lancer de
     scripts de démarrage/d’arrêt entre les SIGUSR1 et les
     –ping-restart.

     La valeur par défaut est ‘#t’.

 -- ‘openvpn-server-configuration’ parameter : boolean fast-io?
     (Experimental) Optimize TUN/TAP/UDP I/O writes by avoiding a call
     to poll/epoll/select prior to the write operation.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘openvpn-server-configuration’ : number verbosity
     Niveau de verbosité.

     La valeur par défaut est ‘3’.

 -- paramètre de ‘openvpn-server-configuration’ : tls-auth-server
          tls-auth
     Ajoute une couche d’authentification HMAC supplémentaire au dessus
     du canal de contrôle TLS pour se protéger contre les attaques DoS.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘openvpn-server-configuration’ : number port
     Spécifie le numéro de port sur lequel les serveurs écoutent.

     La valeur par défaut est ‘1194’.

 -- paramètre de ‘openvpn-server-configuration’ : ip-mask server
     Une ip et un masque de sous-réseau spécifiant le sous-réseau dans
     le réseau virtuel.

     La valeur par défaut est ‘"10.8.0.0 255.255.255.0"’.

 -- paramètre de ‘openvpn-server-configuration’ : cidr6 server-ipv6
     Une notation CIDR pour spécifier le sous-réseau IPv6 dans le réseau
     virtuel.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘openvpn-server-configuration’ : string dh
     Le fichier de paramètres Diffie-Hellman.

     La valeur par défaut est ‘"/etc/openvpn/dh2048.pem"’.

 -- paramètre de ‘openvpn-server-configuration’ : string
          ifconfig-pool-persist
     Le fichier qui enregistre les IP des clients.

     La valeur par défaut est ‘"/etc/openvpn/ipp.txt"’.

 -- paramètre de ‘openvpn-server-configuration’ : gateway
          redirect-gateway?
     Lorsque la valeur est vraie, le serveur agira comme une passerelle
     pour ses clients.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘openvpn-server-configuration’ : boolean
          client-to-client?
     Lorsque la valeur est vraie, les clients sont autorisés à se parler
     entre eux dans le VPN.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘openvpn-server-configuration’ : keepalive keepalive
     Fait que des messages de ping sont envoyés régulièrement dans les
     deux sens pour que chaque côté sache quand l’autre n’est plus
     disponible. ‘keepalive’ a besoin d’une paire. Le premier élément
     est la période d’envoi du ping, et le second élément est le délai
     d’attente avant de considéré que l’autre côté n’est plus
     disponible.

 -- paramètre de ‘openvpn-server-configuration’ : number max-clients
     Le nombre maximum de clients.

     La valeur par défaut est ‘100’.

 -- paramètre de ‘openvpn-server-configuration’ : string status
     Le fichier de statut. Ce fichier montre un court rapport sur les
     connexions actuelles. Il est tronqué et réécrit toutes les minutes.

     La valeur par défaut est ‘"/var/run/openvpn/status"’.

 -- paramètre de ‘openvpn-server-configuration’ : openvpn-ccd-list
          client-config-dir
     La liste des configuration pour certains clients.

     La valeur par défaut est ‘()’.

     Les champs de ‘openvpn-ccd-configuration’ disponibles sont :

      -- paramètre de ‘openvpn-ccd-configuration’ : string name
          Nom du client.

          La valeur par défaut est ‘"client"’.

      -- paramètre de ‘openvpn-ccd-configuration’ : ip-mask iroute
          Le réseau du client

          La valeur par défaut est ‘#f’.

      -- paramètre de ‘openvpn-ccd-configuration’ : ip-mask
               ifconfig-push
          IP du client sur le VPN.

          La valeur par défaut est ‘#f’.


File: guix.fr.info,  Node: Système de fichiers en réseau,  Next: Intégration continue,  Prev: Services VPN,  Up: Services

8.8.20 Système de fichiers en réseau
------------------------------------

Le module ‘(gnu services nfs)’ fournit les services suivants, qui sont
tous utilisés pour monter et exporter des arborescences de répertoires
en “network file systems” (NFS).

   While it is possible to use the individual components that together
make up a Network File System service, we recommended to configure an
NFS server with the ‘nfs-service-type’.

NFS Service
...........

The NFS service takes care of setting up all NFS component services,
kernel configuration file systems, and installs configuration files in
the locations that NFS expects.

 -- Scheme Variable : nfs-service-type
     A service type for a complete NFS server.

 -- Data Type : nfs-configuration
     This data type represents the configuration of the NFS service and
     all of its subsystems.

     It has the following parameters:
     ‘nfs-utils’ (par défaut : ‘nfs-utils’)
          The nfs-utils package to use.

     ‘nfs-versions’ (default: ‘'("4.2" "4.1" "4.0")’)
          If a list of string values is provided, the ‘rpc.nfsd’ daemon
          will be limited to supporting the given versions of the NFS
          protocol.

     ‘exports’ (default: ‘'()’)
          This is a list of directories the NFS server should export.
          Each entry is a list consisting of two elements: a directory
          name and a string containing all options. This is an example
          in which the directory ‘/export’ is served to all NFS clients
          as a read-only share:

               (nfs-configuration
                (exports
                 '(("/export"
                    "*(ro,insecure,no_subtree_check,crossmnt,fsid=0)"))))

     ‘rpcmountd-port’ (default: ‘#f’)
          The network port that the ‘rpc.mountd’ daemon should use.

     ‘rpcstatd-port’ (default: ‘#f’)
          The network port that the ‘rpc.statd’ daemon should use.

     ‘rpcbind’ (par défaut : ‘rpcbind’)
          Le paquet rpcbind à utiliser.

     ‘idmap-domain’ (default: ‘"localdomain"’)
          The local NFSv4 domain name.

     ‘nfsd-port’ (default: ‘2049’)
          The network port that the ‘nfsd’ daemon should use.

     ‘nfsd-threads’ (default: ‘8’)
          The number of threads used by the ‘nfsd’ daemon.

     ‘pipefs-directory’ (par défaut : ‘"/var/lib/nfs/rpc_pipefs"’)
          Le répertoire où le système de fichier pipefs doit être monté.

     ‘debug’ (default: ‘'()"’)
          A list of subsystems for which debugging output should be
          enabled. This is a list of symbols. Any of these symbols are
          valid: ‘nfsd’, ‘nfs’, ‘rpc’, ‘idmap’, ‘statd’, or ‘mountd’.

   If you don’t need a complete NFS service or prefer to build it
yourself you can use the individual component services that are
documented below.

Service RPC Bind
................

Le service RPC Bind fournit un dispositif pour faire correspondre les
numéros de programmes à des adresses universelles. De nombreux services
liés à NFS utilisent ce dispositif. Donc il est automatiquement démarré
lorsqu’un service qui en dépend est démarré.

 -- Variable Scheme : rpcbind-service-type
     Un type de service pour le démon RPC portmapper.

 -- Type de données : rpcbind-configuration
     Type données représentant la configuration du service RPC Bind. Ce
     type a les paramètres suivants :
     ‘rpcbind’ (par défaut : ‘rpcbind’)
          Le paquet rpcbind à utiliser.

     ‘warm-start?’ (par défaut : ‘#t’)
          Si ce paramètre est ‘#t’, alors le démon lira un fichier
          d’état au démarrage ce qui lui fait recharger les informations
          d’états sauvegardés par une instance précédente.

Pseudo-système de fichiers Pipefs
.................................

Le système de fichiers pipefs est utilisé pour transférer des données
liées à NFS entre le noyau et les programmes en espace utilisateur.

 -- Variable Scheme : pipefs-service-type
     Un type de service pour le pseudo-système de fichiers pipefs.

 -- Type de données : pipefs-configuration
     Type de données représentant la configuration du service du
     pseudo-système de fichiers pipefs. Ce type a les paramètres
     suivants :
     ‘mount-point’ (par défaut : ‘"/var/lib/nfs/rpc_pipefs"’)
          Le répertoire dans lequel le système de fichiers est attaché.

Service de démon GSS
....................

Le démon du “système de sécurité global” (GSS) fournit une sécurité
forte pour les protocoles basés sur des RPC. Avant d’échanger des
requêtes RPC, un client RPC doit établir un contexte sécurisé.
Typiquement cela se fait avec la commande Kerberos ‘kinit’ ou
automatiquement à la connexion avec les services PAM (*note Services
Kerberos::).

 -- Variable Scheme : gss-service-type
     Un type de service pour le démon du système de sécurité global
     (GSS).

 -- Type de données : gss-configuration
     Type de données représentant la configuration du service du démon
     GSS. Ce type a les paramètres suivants :
     ‘nfs-utils’ (par défaut : ‘nfs-utils’)
          Le paquet dans lequel la commande ‘rpc.gssd’ se trouve.

     ‘pipefs-directory’ (par défaut : ‘"/var/lib/nfs/rpc_pipefs"’)
          Le répertoire où le système de fichier pipefs doit être monté.

Service de démon IDMAP
......................

Le service du démon idmap fournit une correspondance entre les ID
utilisateur et les noms d’utilisateurs. Typiquement, cela est requis
pour accéder aux systèmes de fichiers montés via NFSv4.

 -- Variable Scheme : idmap-service-type
     Un type de service pour le démon de correspondance d’identité
     (IDMAP).

 -- Type de données : idmap-configuration
     Type de données représentant la configuration du service du démon
     IDMAP. Ce type a les paramètres suivants :
     ‘nfs-utils’ (par défaut : ‘nfs-utils’)
          Le paquet dans lequel se trouve la commande ‘rpc.idmapd’.

     ‘pipefs-directory’ (par défaut : ‘"/var/lib/nfs/rpc_pipefs"’)
          Le répertoire où le système de fichier pipefs doit être monté.

     ‘domain’ (par défaut : ‘#f’)
          Le nom de domaine NFSv4 local. Il faut que ce soit une chaîne
          de caractères ou ‘#f’. Si la valeur est ‘#f’ le démon
          utilisera le nom de domaine pleinement qualifié de l’hôte.

     ‘verbosity’ (default: ‘0’)
          The verbosity level of the daemon.


File: guix.fr.info,  Node: Intégration continue,  Next: Services de gestion de l'énergie,  Prev: Système de fichiers en réseau,  Up: Services

8.8.21 Intégration continue
---------------------------

Cuirass (https://git.savannah.gnu.org/cgit/guix/guix-cuirass.git) est un
outil d’intégration continue pour Guix. On peut l’utiliser aussi bien
pour le développement que pour fournir des substituts à d’autres (*note
Substituts::).

   Le module ‘(gnu services cuirass)’ fournit le service suivant.

 -- Procédure Scheme : cuirass-service-type
     Le type du service Cuirass. Sa valeur doit être un objet
     ‘cuirass-configuration’, décrit ci-dessous.

   To add build jobs, you have to set the ‘specifications’ field of the
configuration. Here is an example of a service that polls the Guix
repository and builds the packages from a manifest. Some of the packages
are defined in the ‘"custom-packages"’ input, which is the equivalent of
‘GUIX_PACKAGE_PATH’.

     (define %cuirass-specs
       #~(list
          '((#:name . "my-manifest")
            (#:load-path-inputs . ("guix"))
            (#:package-path-inputs . ("custom-packages"))
            (#:proc-input . "guix")
            (#:proc-file . "build-aux/cuirass/gnu-system.scm")
            (#:proc . cuirass-jobs)
            (#:proc-args . ((subset . "manifests")
                            (systems . ("x86_64-linux"))
                            (manifests . (("config" . "guix/manifest.scm")))))
            (#:inputs . (((#:name . "guix")
                          (#:url . "git://git.savannah.gnu.org/guix.git")
                          (#:load-path . ".")
                          (#:branch . "master")
                          (#:no-compile? . #t))
                         ((#:name . "config")
                          (#:url . "https://git.example.org/config.git")
                          (#:load-path . ".")
                          (#:branch . "master")
                          (#:no-compile? . #t))
                         ((#:name . "custom-packages")
                          (#:url . "https://git.example.org/custom-packages.git")
                          (#:load-path . ".")
                          (#:branch . "master")
                          (#:no-compile? . #t)))))))

     (service cuirass-service-type
              (cuirass-configuration
               (specifications %cuirass-specs)))

   Tandis que les informations liés aux travaux de construction sont
directement dans les spécifications, les paramètres globaux pour le
processus ‘cuirass’ sont accessibles dans les autres champs de
‘cuirass-configuration’.

 -- Type de données : cuirass-configuration
     Type de données représentant la configuration de Cuirass.

     ‘log-file’ (par défaut : ‘"/var/log/cuirass.log"’)
          Emplacement du fichier de journal.

     ‘web-log-file’ (default: ‘"/var/log/cuirass-web.log"’)
          Location of the log file used by the web interface.

     ‘cache-directory’ (par défaut : ‘"/var/cache/cuirass"’)
          Emplacement du cache du dépôt.

     ‘user’ (par défaut : ‘"cuirass"’)
          Propriétaire du processus ‘cuirass’.

     ‘group’ (par défaut : ‘"cuirass"’)
          Groupe du propriétaire du processus ‘cuirass’.

     ‘interval’ (par défaut : ‘60’)
          Nombre de secondes entre les mises à jour du dépôt suivis des
          travaux de Cuirass.

     ‘database’ (par défaut : ‘"/var/lib/cuirass/cuirass.db"’)
          Emplacement de la base de données sqlite qui contient les
          résultats de construction et les spécifications précédemment
          ajoutées.

     ‘ttl’ (par défaut : ‘(* 30 24 3600)’)
          Spécifie la durée de vie (TTL) en seconde des racines du
          ramasse-miette qui sont enregistrés comme des résultats de
          construction. Cela signifie que les résultats de construction
          ne seront pas glanés pendant au moins TTL secondes.

     ‘port’ (par défaut : ‘8081’)
          Numéro de port utilisé pour le serveur HTTP.

     ‘host’ (par défaut : ‘"localhost"’)
          Écoute sur l’interface réseau de HOST. La valeur par défaut
          est d’accepter les connexions depuis localhost.

     ‘specifications’ (par défaut : ‘#~'()’)
          Une gexp (*note G-Expressions::) qui s’évalue en une liste de
          spécifications, où une spécification est une liste
          d’association (*note (guile)Associations Lists::) dont les
          clefs sont des mots-clefs (‘#:exemple-de-mot-clef’) comme dans
          l’exemple plus haut.

     ‘use-substitutes?’ (par défaut : ‘#f’)
          Cela permet d’utiliser des substituts pour éviter de
          construire toutes les dépendance d’un travail depuis les
          sources.

     ‘one-shot?’ (par défaut : ‘#f’)
          N’évaluer les spécification et construire les dérivations
          qu’une seule fois.

     ‘fallback?’ (par défaut : ‘#f’)
          Lorsque la substitution d’un binaire pré-construit échoue,
          revenir à la construction locale du paquet.

     ‘extra-options’ (par défaut : ‘'()’)
          Extra options to pass when running the Cuirass processes.

     ‘cuirass’ (par défaut : ‘cuirass’)
          Le paquet Cuirass à utiliser.


File: guix.fr.info,  Node: Services de gestion de l'énergie,  Next: Services audio,  Prev: Intégration continue,  Up: Services

8.8.22 Services de gestion de l’énergie
---------------------------------------

démon TLP
.........

Le module ‘(gnu services pm)’ fournit une définition de service Guix
pour l’outil de gestion d’énergie Linux TLP.

   TLP active plusieurs modes un espace utilisateur et dans le noyau.
Contrairement à ‘upower-service’, ce n’est pas un outil passif de
surveillance, puisqu’il applique des paramètres personnalisés à chaque
fois qu’il détecte une nouvelle source d’énergie. Vous pouvez trouver
plus d’informations sur la page d’accueil de TLP
(https://linrunner.de/en/tlp/tlp.html).

 -- Variable Scheme : tlp-service-type
     Le type de service pour l’outil TLP. Sa valeur devrait être une
     configuration valide de TLP (voir plus bas). Pour utiliser les
     paramètres par défaut, écrivez simplement :
          (service tlp-service-type)

   Par défaut TLP n’a pas besoin de beaucoup de configuration mais la
plupart des paramètres de TLP peuvent être modifiés avec
‘tlp-configuration’.

   Chaque définition de paramètre est précédée par son type ; par
exemple, ‘boolean foo’ indique que le paramètre ‘foo’ doit être spécifié
comme un booléen. Les types qui commencent par ‘maybe-’ dénotent des
paramètres qui n’apparaîtront pas dans la configuration de TLP lorsque
leur valeur est ‘'disabled’.

   Les champs de ‘tlp-configuration’ disponibles sont :

 -- paramètre de ‘tlp-configuration’ : package tlp
     Le paquet TLP.

 -- paramètre de ‘tlp-configuration’ : boolean tlp-enable?
     Indiquez vrai si vous souhaitez activer TLP.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘tlp-configuration’ : string tlp-default-mode
     Mode par défaut lorsqu’aucune source d’énergie ne peut être
     détectée. Les possibilités sont AC et BAT.

     La valeur par défaut est ‘"AC"’.

 -- paramètre de ‘tlp-configuration’ : non-negative-integer
          disk-idle-secs-on-ac
     Nombre de secondes que le noyau Linux doit attendre après que les
     disques s’arrêtent pour se synchroniser quand il est sur secteur.

     La valeur par défaut est ‘0’.

 -- paramètre de ‘tlp-configuration’ : non-negative-integer
          disk-idle-secs-on-bat
     Comme ‘disk-idle-ac’ mais en mode batterie.

     La valeur par défaut est ‘2’.

 -- paramètre de ‘tlp-configuration’ : non-negative-integer
          max-lost-work-secs-on-ac
     Périodicité du nettoyage des pages invalidées, en secondes.

     La valeur par défaut est ‘15’.

 -- paramètre de ‘tlp-configuration’ : non-negative-integer
          max-lost-work-secs-on-bat
     Comme ‘max-lost-work-secs-on-ac’ mais en mode batterie.

     La valeur par défaut est ‘60’.

 -- paramètre de ‘tlp-configuration’ : maybe-space-separated-string-list
          cpu-scaling-governor-on-ac
     Gouverneur de fréquence d’horloge sur secteur. Avec le pilote
     intel_pstate, les possibilités sont powersave et performance. Avec
     le pilote acpi-cpufreq, les possibilités sont ondemand, powersave,
     performance et conservative.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-space-separated-string-list
          cpu-scaling-governor-on-bat
     Comme ‘cpu-scaling-governor-on-ac’ mais en mode batterie.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-non-negative-integer
          cpu-scaling-min-freq-on-ac
     Indique la fréquence d’horloge minimale pour le gouverneur sur
     secteur.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-non-negative-integer
          cpu-scaling-max-freq-on-ac
     Indique la fréquence d’horloge maximale pour le gouverneur sur
     secteur.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-non-negative-integer
          cpu-scaling-min-freq-on-bat
     Indique la fréquence d’horloge minimale pour le gouverneur sur
     batterie.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-non-negative-integer
          cpu-scaling-max-freq-on-bat
     Indique la fréquence d’horloge maximale pour le gouverneur sur
     batterie.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-non-negative-integer
          cpu-min-perf-on-ac
     Limite le P-état minimum pour contrôler la dissipation de puissance
     dans le CPU, sur secteur. Les valeurs sont indiqués comme un
     pourcentage des performances disponibles.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-non-negative-integer
          cpu-max-perf-on-ac
     Limite le P-état maximum pour contrôler la dissipation de puissance
     dans le CPU, sur secteur. Les valeurs sont indiqués comme un
     pourcentage des performances disponibles.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-non-negative-integer
          cpu-min-perf-on-bat
     Comme ‘cpu-min-perf-on-ac’ mais en mode batterie.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-non-negative-integer
          cpu-max-perf-on-bat
     Comme ‘cpu-max-perf-on-ac’ mais en mode batterie.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-boolean cpu-boost-on-ac?
     Active la fonctionnalité turbo boost du CPU sur secteur.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-boolean cpu-boost-on-bat?
     Comme ‘cpu-boost-on-ac?’ mais en mode batterie.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : boolean sched-powersave-on-ac?
     Permet au noyau Linux de minimiser le nombre de cœurs/hyper-threads
     CPU utilisés lorsque la charge est faible.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘tlp-configuration’ : boolean sched-powersave-on-bat?
     Comme ‘sched-powersave-on-ac?’ mais en mode batterie.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘tlp-configuration’ : boolean nmi-watchdog?
     Active le chien de garde NMI du noyau Linux.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘tlp-configuration’ : maybe-string phc-controls
     Pour les noyaux Linux avec le correctif PHC, change le voltage du
     CPU. Une valeur serait par exemple ‘"F:V F:V F:V F:V"’.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : string energy-perf-policy-on-ac
     Indique le niveau de performance du CPU par rapport à la politique
     de gestion de l’énergie sur secteur. Les possibilités sont
     performance, normal et powersave.

     La valeur par défaut est ‘"performance"’.

 -- paramètre de ‘tlp-configuration’ : string energy-perf-policy-on-bat
     Comme ‘energy-perf-policy-ac’ mais en mode batterie.

     La valeur par défaut est ‘"powersave"’.

 -- paramètre de ‘tlp-configuration’ : space-separated-string-list
          disks-devices
     Périphériques de disque dur.

 -- paramètre de ‘tlp-configuration’ : space-separated-string-list
          disk-apm-level-on-ac
     Niveau de gestion de l’énergie avancé des disques durs.

 -- paramètre de ‘tlp-configuration’ : space-separated-string-list
          disk-apm-level-on-bat
     Comme ‘disk-apm-bat’ mais en mode batterie.

 -- paramètre de ‘tlp-configuration’ : maybe-space-separated-string-list
          disk-spindown-timeout-on-ac
     Délai d’attente pour arrêter de faire tourner les disques. Une
     valeur doit être spécifiée pour chaque disque dur déclaré.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-space-separated-string-list
          disk-spindown-timeout-on-bat
     Comme ‘disk-spindown-timeout-on-ac’ mais en mode batterie.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-space-separated-string-list
          disk-iosched
     Sélectionne l’ordonnanceur d’entrées-sorties pour le disque. Une
     valeur doit être spécifiée pour chaque disque déclaré. Les
     possibilités sont par exemple cfq, deadline et noop.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : string sata-linkpwr-on-ac
     Niveau de gestion de l’énergie des lien SATA aggressive (ALPM). Les
     possibilités sont min_power, medium_power et max_performance.

     La valeur par défaut est ‘"max_performance"’.

 -- paramètre de ‘tlp-configuration’ : string sata-linkpwr-on-bat
     Comme ‘sata-linkpwr-ac’ mais en mode batterie.

     La valeur par défaut est ‘"min_power"’.

 -- paramètre de ‘tlp-configuration’ : maybe-string
          sata-linkpwr-blacklist
     Exclu les périphériques SATA spécifiés de la gestion de l’énergie
     des liens.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-on-off-boolean
          ahci-runtime-pm-on-ac?
     Active la gestion de l’énergie à l’exécution pour les contrôleurs
     AHCI et les disques, sur secteur.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-on-off-boolean
          ahci-runtime-pm-on-bat?
     Comme ‘ahci-runtime-pm-on-ac’ mais en mode batterie.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : non-negative-integer
          ahci-runtime-pm-timeout
     Secondes d’inactivités avant de suspendre les disques.

     La valeur par défaut est ‘15’.

 -- paramètre de ‘tlp-configuration’ : string pcie-aspm-on-ac
     Niveau de gestion de l’énergie des états actifs de PCI Express. Les
     possibilités sont default, performance et powersave.

     La valeur par défaut est ‘"performance"’.

 -- paramètre de ‘tlp-configuration’ : string pcie-aspm-on-bat
     Comme ‘pcie-aspm-ac’ mais en mode batterie.

     La valeur par défaut est ‘"powersave"’.

 -- paramètre de ‘tlp-configuration’ : string radeon-power-profile-on-ac
     Niveau de vitesse de l’horloge des cartes graphiques Radeon. Les
     possibilités sont low, mid, high, auto et default.

     La valeur par défaut est ‘"high"’.

 -- paramètre de ‘tlp-configuration’ : string
          radeon-power-profile-on-bat
     Comme ‘radeon-power-ac’ mais en mode batterie.

     La valeur par défaut est ‘"low"’.

 -- paramètre de ‘tlp-configuration’ : string radeon-dpm-state-on-ac
     Méthode de gestion de l’énergie dynamique de Radeon (DPM). Les
     possibilités sont battery et performance.

     La valeur par défaut est ‘"performance"’.

 -- paramètre de ‘tlp-configuration’ : string radeon-dpm-state-on-bat
     Comme ‘radeon-dpm-state-ac’ mais en mode batterie.

     La valeur par défaut est ‘"battery"’.

 -- paramètre de ‘tlp-configuration’ : string
          radeon-dpm-perf-level-on-ac
     Niveau de performance de DPM. Les possibilités sont auto, low et
     high.

     La valeur par défaut est ‘"auto"’.

 -- paramètre de ‘tlp-configuration’ : string
          radeon-dpm-perf-level-on-bat
     Comme ‘radeon-dpm-perf-ac’ mais en mode batterie.

     La valeur par défaut est ‘"auto"’.

 -- paramètre de ‘tlp-configuration’ : on-off-boolean wifi-pwr-on-ac?
     Mode de gestion de l’énergie wifi.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘tlp-configuration’ : on-off-boolean wifi-pwr-on-bat?
     Comme ‘wifi-power-ac?’ mais en mode batterie.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘tlp-configuration’ : y-n-boolean wol-disable?
     Désactive wake on LAN.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘tlp-configuration’ : non-negative-integer
          sound-power-save-on-ac
     Durée d’attente en secondes avant d’activer la gestion de l’énergie
     audio sur les périphériques Intel HDA et AC97. La valeur 0
     désactive la gestion de l’énergie.

     La valeur par défaut est ‘0’.

 -- paramètre de ‘tlp-configuration’ : non-negative-integer
          sound-power-save-on-bat
     Comme ‘sound-powersave-ac’ mais en mode batterie.

     La valeur par défaut est ‘1’.

 -- paramètre de ‘tlp-configuration’ : y-n-boolean
          sound-power-save-controller?
     Désactive le contrôleur en mode de gestion de l’énergie sur les
     périphériques Intel HDA.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘tlp-configuration’ : boolean bay-poweroff-on-bat?
     Active le périphérique optique AltraBay/MediaBay en mode batterie.
     Le périphérique peut être de nouveau alimenté en lâchant (et en
     réinsérant) le levier d’éjection ou en appuyant sur le bouton
     d’éjection sur les modèles plus récents.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘tlp-configuration’ : string bay-device
     Nom du périphérique optique à éteindre.

     La valeur par défaut est ‘"sr0"’.

 -- paramètre de ‘tlp-configuration’ : string runtime-pm-on-ac
     Gestion de l’énergie à l’exécution sur les bus PCI(e). Les
     possibilités sont on et auto.

     La valeur par défaut est ‘"on"’.

 -- paramètre de ‘tlp-configuration’ : string runtime-pm-on-bat
     Comme ‘runtime-pm-ac’ mais en mode batterie.

     La valeur par défaut est ‘"auto"’.

 -- paramètre de ‘tlp-configuration’ : boolean runtime-pm-all?
     Gestion de l’énergie à l’exécution pour tous les bus PCI(e), sauf
     ceux en liste noire.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘tlp-configuration’ : maybe-space-separated-string-list
          runtime-pm-blacklist
     Exclue les adresses des périphériques PCI(e) spécifiés de la
     gestion de l’énergie à l’exécution.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : space-separated-string-list
          runtime-pm-driver-blacklist
     Exclue les périphériques PCI(e) assignés aux pilotes spécifiés de
     la gestion de l’énergie à l’exécution.

 -- paramètre de ‘tlp-configuration’ : boolean usb-autosuspend?
     Active la fonctionnalité de mise en veille automatique de l’USB.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘tlp-configuration’ : maybe-string usb-blacklist
     Exclue les périphériques spécifiés de la mise en veille automatique
     de l’USB.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : boolean usb-blacklist-wwan?
     Exclue les périphériques WWAN de la mise en veille automatique de
     l’USB.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘tlp-configuration’ : maybe-string usb-whitelist
     Inclue les périphériques spécifiés dans la mise en veille
     automatique de l’USB, même s’ils sont déjà exclus par le pilote ou
     via ‘usb-blacklist-wwan?’.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : maybe-boolean
          usb-autosuspend-disable-on-shutdown?
     Active la mise en veille de l’USB avant l’arrêt.

     La valeur par défaut est ‘disabled’.

 -- paramètre de ‘tlp-configuration’ : boolean
          restore-device-state-on-startup?
     Restaure l’état des périphériques radio (bluetooth, wifi, wwan) du
     dernier arrêt au démarrage du système.

     La valeur par défaut est ‘#f’.

démon Thermald
..............

Le module ‘(gnu services pm)’ fournit une interface pour thermald, un
service de gestion de l’horloge CPU qui aide à éviter la surchauffe.

 -- Variable Scheme : thermald-service-type
     C’est le type de service pour thermald
     (https://01.org/linux-thermal-daemon/), le démon de température de
     Linux, responsable du contrôle de l’état thermique des processeurs
     et d’éviter la surchauffe.

 -- Type de données : thermald-configuration
     Type de données représentant la configuration de
     ‘thermald-service-type’.

     ‘ignore-cpuid-check?’ (par défaut : ‘#f’)
          Ignore la vérification des modèles CPU supportés avec cpuid.

     ‘thermald’ (par défaut : THERMALD)
          Objet du paquet de thermald.


File: guix.fr.info,  Node: Services audio,  Next: Services de virtualisation,  Prev: Services de gestion de l'énergie,  Up: Services

8.8.23 Services audio
---------------------

Le module ‘(gnu services audio)’ fournit un service qui lance MPD (le
démon de lecture de musique).

Music Player Daemon
...................

Le démon de lecture de musique (MPD) est un service qui joue de la
musique tout en étant contrôlé depuis la machine locale ou à travers le
réseau par divers clients.

   L’exemple suivant montre comment on peut lancer ‘mpd’ en tant
qu’utilisateur ‘"bob"’ sur le port ‘6666’. Il utilise pulseaudio pour la
sortie audio.

     (service mpd-service-type
              (mpd-configuration
               (user "bob")
               (port "6666")))

 -- Variable Scheme : mpd-service-type
     Le type de service pour ‘mpd’.

 -- Type de données : mpd-configuration
     Type de données représentant la configuration de ‘mpd’.

     ‘user’ (par défaut : ‘"mpd"’)
          L’utilisateur qui lance mpd.

     ‘music-dir’ (par défaut : ‘"~/Music"’)
          Le répertoire à scanner pour trouver les fichiers de musique.

     ‘playlist-dir’ (par défaut : ‘"~/.mpd/playlists"’)
          Le répertoire où stocker les playlists.

     ‘db-file’ (par défaut : ‘"~/.mpd/tag_cache"’)
          Emplacement de la base de données de musiques.

     ‘state-file’ (par défaut : ‘"~/.mpd/state"’)
          Emplacement du fichier qui stocke l’état actuel de MPD.

     ‘sticker-file’ (par défaut : ‘"~/.mpd/sticker.sql"’)
          Emplacement de la base de données de stickers.

     ‘port’ (par défaut : ‘"6600"’)
          Le port sur lequel lancer mpd.

     ‘address’ (par défaut : ‘"any"’)
          L’adresse sur laquelle se lie mpd. Pour utiliser un socket
          Unix domain, un chemin absolu peut être spécifié ici.

     ‘outputs’ (default: ‘"(list (mpd-output))"’)
          The audio outputs that MPD can use. By default this is a
          single output using pulseaudio.

 -- Data Type : mpd-output
     Data type representing an ‘mpd’ audio output.

     ‘name’ (default: ‘"MPD"’)
          The name of the audio output.

     ‘type’ (default: ‘"pulse"’)
          The type of audio output.

     ‘enabled?’ (default: ‘#t’)
          Specifies whether this audio output is enabled when MPD is
          started. By default, all audio outputs are enabled. This is
          just the default setting when there is no state file; with a
          state file, the previous state is restored.

     ‘tags?’ (default: ‘#t’)
          If set to ‘#f’, then MPD will not send tags to this output.
          This is only useful for output plugins that can receive tags,
          for example the ‘httpd’ output plugin.

     ‘always-on?’ (default: ‘#f’)
          If set to ‘#t’, then MPD attempts to keep this audio output
          always open. This may be useful for streaming servers, when
          you don’t want to disconnect all listeners even when playback
          is accidentally stopped.

     ‘mixer-type’
          This field accepts a symbol that specifies which mixer should
          be used for this audio output: the ‘hardware’ mixer, the
          ‘software’ mixer, the ‘null’ mixer (allows setting the volume,
          but with no effect; this can be used as a trick to implement
          an external mixer External Mixer) or no mixer (‘none’).

     ‘extra-options’ (default: ‘'()"’)
          An association list of option symbols to string values to be
          appended to the audio output configuration.

   The following example shows a configuration of ‘mpd’ that provides an
HTTP audio streaming output.

     (service mpd-service-type
              (mpd-configuration
                (outputs
                  (list (mpd-output
                          (name "streaming")
                          (type "httpd")
                          (mixer-type 'null)
                          (extra-options
                           `((encoder . "vorbis")
                             (port    . "8080"))))))))


File: guix.fr.info,  Node: Services de virtualisation,  Next: Services de contrôle de version,  Prev: Services audio,  Up: Services

8.8.24 services de virtualisation
---------------------------------

Le module ‘(gnu services virtualization)’ fournit des services pour les
démons libvirt et virtlog, ainsi que d’autres services liés à la
virtualisation.

démon libvirt
.............

‘libvirtd’ est le démon côté serveur du système de gestion de
virtualisation libvirt. Ce démon tourne sur des serveurs hôtes et
effectue les taches de gestion requises pour les clients virtualisés.

 -- Variable Scheme : libvirt-service-type
     C’est le type du démon libvirt (https://libvirt.org). Sa valeur
     doit être un ‘libvirt-configuration’.

          (service libvirt-service-type
                   (libvirt-configuration
                    (unix-sock-group "libvirt")
                    (tls-port "16555")))

   Les champs de ‘libvirt-configuration’ disponibles sont :

 -- paramètre de ‘libvirt-configuration’ : package libvirt
     Paquet libvirt.

 -- paramètre de ‘libvirt-configuration’ : boolean listen-tls?
     Indique s’il faut écouter des connexions TLS sécurisées sur le port
     TCP/IP public. Vous devez remplir le champ ‘listen’ pour que cela
     ait un effet.

     Il est nécessaire de mettre en place une CA et de créer un
     certificat serveur avant d’utiliser cette fonctionnalité.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘libvirt-configuration’ : boolean listen-tcp?
     Écoute des connexions non-chiffrées sur le port TCP/IP public. Vous
     devez remplir le champ ‘listen’ pour que cela ait un effet.

     L’utilisation des sockets TCP requiert une authentification SASL
     par défaut. Seuls les mécanismes SASL qui supportent le chiffrement
     des données sont permis. Il s’agit de DIGEST_MD5 et GSSAPI
     (Kerberos5).

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘libvirt-configuration’ : string tls-port
     Port pour accepter les connexions TLS sécurisées. Il peut s’agir
     d’un numéro de port ou d’un nom de service

     La valeur par défaut est ‘"16514"’.

 -- paramètre de ‘libvirt-configuration’ : string tcp-port
     Port sur lequel accepter les connexions TCP non sécurisées. Cela
     peut être un numéro de port ou un nom de service

     La valeur par défaut est ‘"16509"’.

 -- paramètre de ‘libvirt-configuration’ : string listen-addr
     Adresse IP ou nom d’hôte utilisé pour les connexions des clients.

     La valeur par défaut est ‘"0.0.0.0"’.

 -- paramètre de ‘libvirt-configuration’ : boolean mdns-adv?
     Indique s’il faut publier le service libvirt en mDNS.

     Autrement, vous pouvez désactiver cela pour tous les services en
     stoppant le démon Avahi.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘libvirt-configuration’ : string mdns-name
     Nom publié par défaut sur mDNS. Cela doit être unique sur le réseau
     local.

     La valeur par défaut est ‘"Virtualization Host <hostname>"’.

 -- paramètre de ‘libvirt-configuration’ : string unix-sock-group
     Groupe propriétaire du socket Unix domain. Cela peut être utilisé
     pour permettre à un ensemble d’utilisateurs « de confiance » de
     gérer les fonctionnalités sans devenir root.

     La valeur par défaut est ‘"root"’.

 -- paramètre de ‘libvirt-configuration’ : string unix-sock-ro-perms
     Permission Unix pour le socket en lecture seule. Il est utilisé
     pour surveiller le statut des VM uniquement.

     La valeur par défaut est ‘"0777"’.

 -- paramètre de ‘libvirt-configuration’ : string unix-sock-rw-perms
     Permission Unix pour le socket en lecture-écriture. La valeur par
     défaut n’autorise que root. Si PolicyKit est activé sur le socket,
     la valeur par défaut change et permet tout le monde (c.-à-d. 0777).

     La valeur par défaut est ‘"0770"’.

 -- paramètre de ‘libvirt-configuration’ : string unix-sock-admin-perms
     Permissions Unix pour le socket d’administration. La valeur par
     défaut ne permet que le propriétaire (root), ne la changez pas à
     moins que vous ne soyez sûr de savoir à qui vous exposez cet accès.

     La valeur par défaut est ‘"0777"’.

 -- paramètre de ‘libvirt-configuration’ : string unix-sock-dir
     Le répertoire dans lequel les sockets sont créés.

     La valeur par défaut est ‘"/var/run/libvirt"’.

 -- paramètre de ‘libvirt-configuration’ : string auth-unix-ro
     Schéma d’authentification pour les socket Unix en lecture-seule.
     Par défaut les permissions des socket permettent à n’importe qui de
     se connecter

     La valeur par défaut est ‘"polkit"’.

 -- paramètre de ‘libvirt-configuration’ : string auth-unix-rw
     Schéma d’authentification pour les socket UNIX en lecture-écriture.
     Par défaut les permissions du socket ne permettent que root. Si le
     support de PolicyKit a été compilé dans libvirt, la valeur par
     défaut utilise l’authentification « polkit ».

     La valeur par défaut est ‘"polkit"’.

 -- paramètre de ‘libvirt-configuration’ : string auth-tcp
     Schéma d’authentification pour les sockets TCP. Si vous n’avez pas
     activé SASL, alors tout le trafic TCP est en clair. Ne le faites
     pas en dehors de scénario de développement ou de test.

     La valeur par défaut est ‘"sasl"’.

 -- paramètre de ‘libvirt-configuration’ : string auth-tls
     Schéma d’authentification pour les sockets TLS. Les sockets TLS
     sont déjà chiffrés par la couche TLS, et une authentification
     limitée est effectuée avec les certificats.

     Il est possible d’utiliser de n’importe quel mécanisme
     d’authentification SASL en utilisant « sasl » pour cette option

     La valeur par défaut est ‘"none"’.

 -- paramètre de ‘libvirt-configuration’ : optional-list access-drivers
     Schéma de contrôle d’accès à l’API.

     Par défaut un utilisateur authentifié peut accéder à toutes les
     API. Les pilotes d’accès peuvent placer des restrictions là-dessus.

     La valeur par défaut est ‘()’.

 -- paramètre de ‘libvirt-configuration’ : string key-file
     Chemin de fichier de la clef du serveur. Si la valeur est une
     chaîne vide, aucune clef privée n’est chargée.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘libvirt-configuration’ : string cert-file
     Chemin de fichier de la clef du serveur. Si la chaîne est vide,
     aucun certificat n’est chargé.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘libvirt-configuration’ : string ca-file
     Chemin de fichier de la clef du serveur. Si la chaîne est vide,
     aucun certificat de CA n’est chargé.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘libvirt-configuration’ : string crl-file
     Chemin de la liste de révocation des certificats. Si la chaîne est
     vide, aucun CRL n’est chargé.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘libvirt-configuration’ : boolean tls-no-sanity-cert
     Désactive la vérification de nos propres certificats serveurs.

     Lorsque libvirtd démarre il effectue des vérifications de routine
     sur ses propres certificats.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘libvirt-configuration’ : boolean tls-no-verify-cert
     Désactive la vérification des certificats clients.

     La vérification des certificats clients est le mécanisme
     d’authentification principal. Tout client qui ne présent pas de
     certificat signé par la CA sera rejeté.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘libvirt-configuration’ : optional-list
          tls-allowed-dn-list
     Liste blanche des Distinguished Name x509 autorisés.

     La valeur par défaut est ‘()’.

 -- paramètre de ‘libvirt-configuration’ : optional-list
          sasl-allowed-usernames
     Liste blanche des noms d’utilisateur SASL permis. Le format des
     noms d’utilisateurs dépend du mécanisme d’authentification SASL.

     La valeur par défaut est ‘()’.

 -- paramètre de ‘libvirt-configuration’ : string tls-priority
     Override the compile time default TLS priority string. The default
     is usually ‘"NORMAL"’ unless overridden at build time. Only set
     this is it is desired for libvirt to deviate from the global
     default settings.

     La valeur par défaut est ‘"NORMAL"’.

 -- paramètre de ‘libvirt-configuration’ : integer max-clients
     Nombre maximum de connexions clientes en même temps sur tous les
     sockets.

     La valeur par défaut est ‘5000’.

 -- paramètre de ‘libvirt-configuration’ : integer max-queued-clients
     Longueur maximum de la queue de connexions en attente d’acceptation
     du démon. Remarquez que certains protocoles supportant la
     retransmission peuvent obéir à ce paramètre pour qu’une connexion
     ultérieure réussisse.

     La valeur par défaut est ‘1000’.

 -- paramètre de ‘libvirt-configuration’ : integer max-anonymous-clients
     Longueur maximum de la queue des clients acceptés mais pas
     authentifiés. Indiquez zéro pour désactiver ce paramètre

     La valeur par défaut est ‘20’.

 -- paramètre de ‘libvirt-configuration’ : integer min-workers
     Nombre de processus de travail démarrés initialement.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘libvirt-configuration’ : integer max-workers
     Nombre maximum de threads de travail.

     Si le nombre de clients actifs dépasse ‘min-workers’, plus de
     threads seront démarrés, jusqu’à la limite de max_workers.
     Typiquement vous voulez que max_workers soit égal au nombre maximum
     de clients permis.

     La valeur par défaut est ‘20’.

 -- paramètre de ‘libvirt-configuration’ : integer prio-workers
     Nombre de travailleurs prioritaires. Si tous les threads de travail
     du groupe ci-dessus sont bloqués, certains appels marqués comme
     prioritaires (notamment domainDestroy) peuvent être exécutés par ce
     groupe.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘libvirt-configuration’ : integer max-requests
     Limite globale totale sur les appels RPC concurrents.

     La valeur par défaut est ‘20’.

 -- paramètre de ‘libvirt-configuration’ : integer max-client-requests
     Limite de requêtes concurrentes depuis une connexion cliente
     unique. Pour éviter qu’un client ne monopolise le serveur, vous
     devriez indiquer une petite partie des paramètres global
     max_requests et max_workers.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘libvirt-configuration’ : integer admin-min-workers
     Comme ‘min-workers’ mais pour l’interface d’administration.

     La valeur par défaut est ‘1’.

 -- paramètre de ‘libvirt-configuration’ : integer admin-max-workers
     Comme ‘max-workers’ mais pour l’interface d’administration.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘libvirt-configuration’ : integer admin-max-clients
     Comme ‘max-clients’ mais pour l’interface d’administration.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘libvirt-configuration’ : integer
          admin-max-queued-clients
     Comme ‘max-queued-clients’ mais pour l’interface d’administration.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘libvirt-configuration’ : integer
          admin-max-client-requests
     Comme ‘max-client-requests’ mais pour l’interface d’administration.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘libvirt-configuration’ : integer log-level
     Niveau de journalisation. 4 : erreurs, 3 : avertissements, 2 :
     information, 1 : débogage.

     La valeur par défaut est ‘3’.

 -- paramètre de ‘libvirt-configuration’ : string log-filters
     Filtres de journalisation.

     Un filtre qui permet de sélectionner plusieurs niveaux de
     journalisation pour une catégorie donnée. Le format d’un filtre est
     :

        • x:nom

        • x:+nom

     where ‘name’ is a string which is matched against the category
     given in the ‘VIR_LOG_INIT()’ at the top of each libvirt source
     file, e.g., ‘"remote"’, ‘"qemu"’, or ‘"util.json"’ (the name in the
     filter can be a substring of the full category name, in order to
     match multiple similar categories), the optional ‘"+"’ prefix tells
     libvirt to log stack trace for each message matching name, and ‘x’
     is the minimal level where matching messages should be logged:

        • 1 : DEBUG

        • 2 : INFO

        • 3 : WARNING

        • 4 : ERROR

     On peut définir plusieurs filtres dans une seule déclaration de
     filtres, ils doivent juste être séparés par des espaces.

     La valeur par défaut est ‘"3:remote 4:event"’.

 -- paramètre de ‘libvirt-configuration’ : string log-outputs
     Sorties de débogage.

     Une sortie est l’un des endroits où les journaux sont enregistrés.
     Le format d’une sortie peut être :

     ‘x:stderr’
          la sortie va vers stderr

     ‘x:syslog:nom’
          utilise syslog comme sortie et utilise le nom donné comme
          identifiant

     ‘x:file:chemin_fichier’
          la sortie va vers un fichier, avec le chemin donné

     ‘x:journald’
          la sortie va vers le système de journalisation journald

     Dans tous les cas, le préfixe x est le niveau minimal, qui agit
     comme un filtre

        • 1 : DEBUG

        • 2 : INFO

        • 3 : WARNING

        • 4 : ERROR

     Plusieurs sorties peuvent être définies, elles doivent juste être
     séparées par des espaces.

     La valeur par défaut est ‘"3:stderr"’.

 -- paramètre de ‘libvirt-configuration’ : integer audit-level
     Permet de modifier l’utilisation du sous-système d’audit

        • 0 : désactive tout audit

        • 1 : active l’audit, seulement s’il est activé sur l’hôte

        • 2 : active l’audit, et quitte s’il est désactivé sur l’hôte.

     La valeur par défaut est ‘1’.

 -- paramètre de ‘libvirt-configuration’ : boolean audit-logging
     Envoie les messages d’audit via l’infrastructure de journalisation
     de libvirt.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘libvirt-configuration’ : optional-string host-uuid
     UUID de l’hôte. L’UUID ne doit pas avoir tous ses nombres
     identiques.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘libvirt-configuration’ : string host-uuid-source
     Source où lire l’UUID de l’hôte.

        • ‘smbios’ : récupère l’UUID à partir de ‘dmidecode -s
          system-uuid’

        • ‘machine-id’ : récupère l’UUID à partir de ‘/etc/machine-id’

     Si ‘dmidecode’ ne fournit pas un UUID valide, un UUID temporaire
     sera généré.

     La valeur par défaut est ‘"smbios"’.

 -- paramètre de ‘libvirt-configuration’ : integer keepalive-interval
     Un message keepalive est envoyé au client après
     ‘keepalive_interval’ secondes d’inactivité pour vérifier si le
     client répond toujours. Si la valeur est -1, libvirtd n’enverra
     jamais de requête keepalive ; cependant les clients peuvent
     toujours en envoyer et le démon y répondra.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘libvirt-configuration’ : integer keepalive-count
     Nombre maximum de messages keepalive qui peuvent être envoyés au
     client sans réponse avant que la connexion ne soit considérée comme
     cassée.

     En d’autres termes, la connexion est approximativement fermée après
     ‘keepalive_interval * (keepalive_count + 1)’ secondes après le
     dernier message reçu de la part du client. Lorsque
     ‘keepalive-count’ est à 0, les connexions seront automatiquement
     fermées après ‘keepalive-interval’ secondes d’inactivité sans
     envoyer le moindre message keepalive.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘libvirt-configuration’ : integer
          admin-keepalive-interval
     Comme précédemment, mais pour l’interface d’administration.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘libvirt-configuration’ : integer admin-keepalive-count
     Comme précédemment, mais pour l’interface d’administration.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘libvirt-configuration’ : integer ovs-timeout
     Délai d’attente pour les appels Open vSwitch.

     L’utilitaire ‘ovs-vsctl’ est utilisé pour la configuration et son
     option de délai d’attente est à 5 secondes pour éviter qu’une
     attente infinie ne bloque libvirt.

     La valeur par défaut est ‘5’.

démon Virrlog
.............

Le service virtlogd est un démon côté serveur qui fait partie de
libvirt, utilisé pour gérer les journaux des consoles des machines
virtuelles.

   Ce démon n’est pas utilisé directement par les clients libvirt, mais
il est appelé pour eux par ‘libvirtd’. En maintenant les journaux dans
un démon séparé, le démon ‘libvirtd’ principal peut être redémarré sans
risque de perte de journaux. Le démon ‘virtlogd’ a la possibilité de
ré-exécuter exec() sur lui-même quand il reçoit ‘SIGUSR1’, pour
permettre des mises à jour à chaux sans temps mort.

 -- Variable Scheme : virtlog-service-type
     Le type de service pour le démon virtlogd. Sa valeur doit être un
     ‘virtlog-configuration’.

          (service virtlog-service-type
                   (virtlog-configuration
                    (max-clients 1000)))

 -- paramètre de ‘virtlog-configuration’ : integer log-level
     Niveau de journalisation. 4 : erreurs, 3 : avertissements, 2 :
     information, 1 : débogage.

     La valeur par défaut est ‘3’.

 -- paramètre de ‘virtlog-configuration’ : string log-filters
     Filtres de journalisation.

     Un filtre qui permet de sélectionner plusieurs niveaux de
     journalisation pour une catégorie donnée. Le format d’un filtre est
     :

        • x:nom

        • x:+nom

     où ‘nom’ est une chaîne de caractères qui correspond à la catégorie
     donnée dans ‘VIR_LOG_INIT()’ au début de chaque fichier source de
     libvirt, p. ex. « remote », « qemu » ou « util.json » (le nom dans
     le filtre peut être une sous-chaîne du nom complet de la catégorie,
     pour pouvoir correspondre à plusieurs catégories similaires), le
     préfixe facultatif « + » dit à libvirt d’enregistrer les traces de
     piles pour chaque message qui correspond au nom, et ‘x’ est le
     niveau minimal des messages qui devraient être enregistrés :

        • 1 : DEBUG

        • 2 : INFO

        • 3 : WARNING

        • 4 : ERROR

     On peut définir plusieurs filtres dans une seule déclaration de
     filtres, ils doivent juste être séparés par des espaces.

     La valeur par défaut est ‘"3:remote 4:event"’.

 -- paramètre de ‘virtlog-configuration’ : string log-outputs
     Sorties de débogage.

     Une sortie est l’un des endroits où les journaux sont enregistrés.
     Le format d’une sortie peut être :

     ‘x:stderr’
          la sortie va vers stderr

     ‘x:syslog:nom’
          utilise syslog comme sortie et utilise le nom donné comme
          identifiant

     ‘x:file:chemin_fichier’
          la sortie va vers un fichier, avec le chemin donné

     ‘x:journald’
          la sortie va vers le système de journalisation journald

     Dans tous les cas, le préfixe x est le niveau minimal, qui agit
     comme un filtre

        • 1 : DEBUG

        • 2 : INFO

        • 3 : WARNING

        • 4 : ERROR

     Plusieurs sorties peuvent être définies, elles doivent juste être
     séparées par des espaces.

     La valeur par défaut est ‘"3:stderr"’.

 -- paramètre de ‘virtlog-configuration’ : integer max-clients
     Nombre maximum de connexions clientes en même temps sur tous les
     sockets.

     La valeur par défaut est ‘1024’.

 -- paramètre de ‘virtlog-configuration’ : integer max-size
     Taille de fichier maximale avant roulement.

     La valeur par défaut est ‘2MB’.

 -- paramètre de ‘virtlog-configuration’ : integer max-backups
     Nombre maximal de fichiers de sauvegardes à garder.

     La valeur par défaut est ‘3’.

Émulation transparente avec QEMU
................................

‘qemu-binfmt-service-type’ fournit le support de l’émulation
transparente de binaires construits pour des architectures différentes —
p. ex. il permet d’exécuter de manière transparente des programmes ARMv
sur une machine x86_64. Cela se fait en combinant l’émulateur QEMU
(https://www.qemu.org) et la fonctionnalité ‘binfmt_misc’ du noyau
Linux.

 -- Variable Scheme : qemu-binfmt-service-type
     Le type du service QEMU/binfmt pour l’émulation transparente. Sa
     valeur doit être un objet ‘qemu-binfmt-configuration’, qui spécifie
     le paquet QEMU à utiliser ainsi que l’architecture que vous voulez
     émuler :

          (service qemu-binfmt-service-type
                   (qemu-binfmt-configuration
                     (platforms (lookup-qemu-platforms "arm" "aarch64"))))

     Dans cet exemple, on active l’émulation transparente pour les
     plateformes ARM et aarch64. Lancer ‘herd stop qemu-binfmt’ l’éteint
     et lancer ‘herd start qemu-binfmt’ le rallume (*note the ‘herd’
     command: (shepherd)Invoking herd.).

 -- Type de données : qemu-binfmt-configuration
     La configuration du service ‘qemu-binfmt’.

     ‘platforms’ (par défaut : ‘'()’)
          La liste des plates-formes émulées par QEMU. Chaque élément
          doit être un objet “platform object” tel que renvoyé par
          ‘lookup-qemu-platforms’ (voir plus bas).

     ‘guix-support?’ (par défaut : ‘#f’)
          When it is true, QEMU and all its dependencies are added to
          the build environment of ‘guix-daemon’ (*note
          ‘--chroot-directory’ option: Invoquer guix-daemon.). This
          allows the ‘binfmt_misc’ handlers to be used within the build
          environment, which in turn means that you can transparently
          build programs for another architecture.

          Par exemple, supposons que vous soyez sur une machine x86_64
          et que vous avez ce services :

               (service qemu-binfmt-service-type
                        (qemu-binfmt-configuration
                          (platforms (lookup-qemu-platforms "arm"))
                          (guix-support? #t)))

          Vous pouvez lancer :

               guix build -s armhf-linux inkscape

          et cela construira Inkscape pour ARMv7 _comme s’il s’agissait
          d’une construction native_, de manière transparente avec QEMU
          pour émuler un CPU ARMv7. Plutôt pratique si vous voulez
          tester un paquet construit pour une architecture à laquelle
          vous n’avez pas accès !

     ‘qemu’ (par défaut : ‘qemu’)
          Le paquet QEMU à utiliser.

 -- Procédure Scheme : lookup-qemu-platforms PLATFORMS...
     Renvoie la liste des objets de plates-formes QEMU correspondant à
     PLATFORMS.... PLATFORMS doit être une liste de chaînes de
     caractères correspondant aux noms de plates-formes, comme ‘"arm"’,
     ‘"sparc"’, ‘"mips64el"’ etc.

 -- Procédure Scheme : qemu-platform? OBJ
     Renvoie vrai s iOBJ est un objet de plate-forme.

 -- Procédure Scheme : qemu-platform-name PLATFORM
     Renvoie le nom de PLATFORM — une chaîne comme ‘"arm"’.


File: guix.fr.info,  Node: Services de contrôle de version,  Next: Services de jeu,  Prev: Services de virtualisation,  Up: Services

8.8.25 Services de contrôle de version
--------------------------------------

Le module ‘(gnu services version-control)’ fournit un service pour
permettre l’accès à distance à des dépôts Git locaux. Il y a trois
options : en utilisant ‘git-daemon-service’ qui fournit un accès aux
dépôts via le protocole non sécurisé ‘git://’ basé sur TCP, en étendant
le serveur web ‘nginx’ pour relayer les requêtes vers ‘git-http-backend’
ou en fournissant une interface web avec ‘cgit-service-type’.

 -- Procédure Scheme : git-daemon-service [#:config
          (git-daemon-configuration)]

     Renvoie un service qui lance ‘git daemon’, un serveur TCP simple
     pour exposer des dépôts sur le protocole Git pour des accès
     anonymes.

     The optional CONFIG argument should be a
     ‘<git-daemon-configuration>’ object, by default it allows read-only
     access to exported(1) repositories under ‘/srv/git’.

 -- Type de données : git-daemon-configuration
     Type de données représentnt la configuration de
     ‘git-daemon-service’.

     ‘package’ (par défaut : GIT)
          Objet de paquet du système de contrôle de version distribué
          Git.

     ‘export-all?’ (par défaut : #F)
          Indique s’il faut permettre l’accès à tous les dépôts Git,
          même s’ils n’ont pas le fichier ‘git-daemon-export-ok’.

     ‘base-path’ (par défaut : ‘/srv/git’)
          Indique s’il faut traduire toutes les requêtes de chemins
          relativement au chemin actuel. Si vous lancez le démon git
          avec (BASE-PATH "/SRV/GIT") sur example.com, si vous essayez
          ensuite de récupérer ‘git://example.com/hello.git’, le démon
          git interprétera ce chemin comme étant ‘/srv/git/hello.git’.

     ‘user-path’ (par défaut : #F)
          Indique s’il faut permettre la notation ‘~user’ dans les
          requêtes. Lorsque spécifié avec une chaîne vide, les requêtes
          à ‘git://host/~alice/foo’ sont des requêtes d’accès au dépôt
          ‘foo’ dans le répertoire personnel de l’utilisateur ‘alice’.
          Si (USER-PATH "CHEMIN") est spécifié, la même requête est
          interprétée comme accédant au répertoire ‘chemin/foo’ dans le
          répertoire personnel de l’utilisateur ‘alice’.

     ‘listen’ (par défaut : ’())
          Indique s’il faut écouter sur des adresses IP ou des noms
          d’hôtes particuliers, par défaut tous.

     ‘port’ (par défaut : #F)
          Indique s’il faut écouter sur un port particulier, par défaut
          le 9418.

     ‘whitelist’ (par défaut : ’())
          Si la liste n’est pas vide, n’autoriser l’accès qu’aux
          dossiers spécifiés.

     ‘extra-options’ (par défaut : ’())
          Options supplémentaires qui seront passées à ‘git daemon’,
          lancez ‘man git-daemon’ pour plus d’informations.

   The ‘git://’ protocol lacks authentication. When you pull from a
repository fetched via ‘git://’, you don’t know whether the data you
receive was modified or is even coming from the specified host, and your
connection is subject to eavesdropping. It’s better to use an
authenticated and encrypted transport, such as ‘https’. Although Git
allows you to serve repositories using unsophisticated file-based web
servers, there is a faster protocol implemented by the
‘git-http-backend’ program. This program is the back-end of a proper Git
web service. It is designed to sit behind a FastCGI proxy. *Note
Services web::, for more on running the necessary ‘fcgiwrap’ daemon.

   Guix a un type de données de configuration séparé pour servir des
dépôts Git par HTTP.

 -- Type de données : git-http-configuration
     Data type representing the configuration for a future
     ‘git-http-service-type’; can currently be used to configure Nginx
     trough ‘git-http-nginx-location-configuration’.

     ‘package’ (par défaut : GIT)
          Objet de paquet du système de contrôle de version distribué
          Git.

     ‘git-root’ (par défaut : ‘/srv/git’)
          Répertoire contenant les dépôts Git à exposer au monde.

     ‘export-all?’ (par défaut : #F)
          Indique s’il faut exposer l’accès de tous les dépôts Git dans
          GIT-ROOT, même s’ils n’ont pas le fichier
          ‘git-daemon-export-ok’.

     ‘uri-path’ (par défaut : ‘/git/’)
          Préfixe du chemin pour l’accès Git. Avec le préfixe ‘/git/’
          par défaut, cela traduira ‘http://SERVER/git/REPO.git’ en
          ‘/sr/git/REPO.git’. Les requêtes dont les chemins d’URI ne
          commencent pas par ce préfixe ne seront pas passées à cette
          instance de Git.

     ‘fcgiwrap-socket’ (par défaut : ‘127.0.0.1:9000’)
          Le socket sur lequel le démon ‘fcgiwrap’ écoute. *Note
          Services web::.

   Il n’y a pas de ‘git-http-service-type’, actuellement ; à la place
vous pouvez créer un ‘nginx-location-configuration’ à partir d’un
‘git-http-configuration’ puis ajouter cela au serveur web.

 -- Procédure Scheme : git-http-nginx-location-configuration
          [config=(git-http-configuration)]
     Calcule un ‘nginx-location-configuration’ qui correspond à la
     configuration http Git donnée. Voici un exemple de définition de
     service nginx qui sert le répertoire ‘/srv/git’ par défaut en HTTPS
     :

          (service nginx-service-type
                   (nginx-configuration
                    (server-blocks
                     (list
                      (nginx-server-configuration
                       (listen '("443 ssl"))
                       (server-name "git.my-host.org")
                       (ssl-certificate
                        "/etc/letsencrypt/live/git.my-host.org/fullchain.pem")
                       (ssl-certificate-key
                        "/etc/letsencrypt/live/git.my-host.org/privkey.pem")
                       (locations
                        (list
                         (git-http-nginx-location-configuration
                          (git-http-configuration (uri-path "/"))))))))))

     Ce exemple suppose que vous utilisez Let’s Encrypt pour récupérer
     votre certificat TLS. *Note Services de certificats::. Le service
     ‘certbot’ par défaut redirigera tout le trafic HTTP de
     ‘git.my-host.org’ en HTTPS. Vous devrez aussi ajouter un mandataire
     ‘fcgiwrap’ à vos services systèmes. *Note Services web::.

Service Cgit
............

Cgit (https://git.zx2c4.com/cgit/) est une interface web pour des dépôts
Git écrite en C.

   L’exemple suivant configurera le service avec les valeurs par défaut.
Par défaut, on peut accéder à Cgit sur le port (‘http://localhost:80’).

     (service cgit-service-type)

   Le type ‘file-object’ désigne soit un objet simili-fichier (*note
file-like objects: G-Expressions.), soit une chaîne.

   Les champs de ‘cgit-configuration’ disponibles sont :

 -- paramètre de ‘cgit-configuration’ : package package
     Le paquet cgit.

 -- paramètre de ‘cgit-configuration’ : nginx-server-configuration-list
          nginx
     Configuration Nginx.

 -- paramètre de ‘cgit-configuration’ : file-object about-filter
     Spécifie une commande qui doit être invoquée pour formater le
     contenu des pages « à propos » (au plus haut niveau et pour chaque
     dépôt).

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : string agefile
     Spécifie un chemin, relativement à chaque dépôt, qui peut être
     utilisé pour spécifier la date et l’heure du plus récent commit du
     dépôt.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : file-object auth-filter
     Spécifie une commande qui sera invoquée pour authentifier l’accès
     au dépôt.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : string branch-sort
     Drapeau qui, lorsqu’il vaut ‘age’, active le trie par date dans la
     liste des branches, et le trie par nom lorsqu’il vaut ‘name’.

     La valeur par défaut est ‘"name"’.

 -- paramètre de ‘cgit-configuration’ : string cache-root
     Chemin utilisé pour stocker les entrées de cache de cgit.

     La valeur par défaut est ‘"/var/cache/cgit"’.

 -- paramètre de ‘cgit-configuration’ : integer cache-static-ttl
     Nombre qui spécifie le temps de vie, en minute, des versions en
     cache des pages du dépôt accédées par leur SHA-1.

     La valeur par défaut est ‘-1’.

 -- paramètre de ‘cgit-configuration’ : integer cache-dynamic-ttl
     Nombre qui spécifie le temps de vie, en minutes, des version en
     cache des pages du dépôt accédées sans leur SHA1.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘cgit-configuration’ : integer cache-repo-ttl
     Nombre qui spécifie le temps de vie, en minute, des version en
     cache de la page de résumé du dépôt.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘cgit-configuration’ : integer cache-root-ttl
     Nombre qui spécifie le temps de vie, en minutes, de la version en
     cache de la page d’index du dépôt.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘cgit-configuration’ : integer cache-scanrc-ttl
     Nombre qui spécifie le temps de vie, en minutes, de la version en
     cache du résultat du scan d’un chemin dans le dépôt Git.

     La valeur par défaut est ‘15’.

 -- paramètre de ‘cgit-configuration’ : integer cache-about-ttl
     Nombre qui spécifie le temps de vie, en minutes, de la version en
     cache de la page « à propos » du dépôt.

     La valeur par défaut est ‘15’.

 -- paramètre de ‘cgit-configuration’ : integer cache-snapshot-ttl
     Nombre qui spécifie le temps de vie, en minutes, de la version en
     cache des archives.

     La valeur par défaut est ‘5’.

 -- paramètre de ‘cgit-configuration’ : integer cache-size
     Le nombre maximum d’entrées dans le cache de cgit. Lorsque la
     valeur est ‘0’, le cache est désactivé.

     La valeur par défaut est ‘0’.

 -- paramètre de ‘cgit-configuration’ : boolean case-sensitive-sort?
     Indique si le tri des éléments est sensible à la casse.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘cgit-configuration’ : list clone-prefix
     Liste des préfixes communs qui, lorsqu’ils sont combinés à l’URL du
     dépôt, génèrent des URL de clone valides pour le dépôt.

     La valeur par défaut est ‘()’.

 -- paramètre de ‘cgit-configuration’ : list clone-url
     Liste des modèles ‘clone-url’

     La valeur par défaut est ‘()’.

 -- paramètre de ‘cgit-configuration’ : file-object commit-filter
     Commande qui sera invoquée pour formater les messages de commit.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : string commit-sort
     Drapeau qui, s’il vaut ‘date’, active le tri par date strict dans
     le messages de commit, et le tri topologique strict lorsqu’il vaut
     ‘topo’.

     La valeur par défaut est ‘"git log"’.

 -- paramètre de ‘cgit-configuration’ : file-object css
     URL qui spécifie le document css à inclure dans les pages cgit.

     La valeur par défaut est ‘"/share/cgit/cgit.css"’.

 -- paramètre de ‘cgit-configuration’ : file-object email-filter
     Spécifie une commande qui sera invoquée pour formater les noms et
     l’adresse de courriel des commiteurs, des auteurs et des taggueurs,
     représentés à plusieurs endroits dans l’interface cgit.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : boolean embedded?
     Drapeau qui, s’il vaut ‘#t’, fera générer un fragment HTML à cgit
     qu’il sera possible d’inclure dans d’autres pages HTML.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-commit-graph?
     Drapeau qui, lorsqu’il vaut ‘#t’, fera afficher un historique en
     ASCII-art à gauche des messages de commit dans la page de log du
     dépôt.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-filter-overrides?
     Drapeau qui, lorsqu’il vaut ‘#t’, permet à tous les paramètres de
     filtrage d’être modifiés dans des fichiers cgitrc spécifiques au
     dépôt.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-follow-links?
     Drapeau qui, s’il vaut ‘#t’, permet aux utilisateurs de suivre un
     fichier dans la vue « log ».

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-http-clone?
     Si la valeur est ‘#t’, cgit agira comme un point d’accès HTTP idiot
     pour les clones Git.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-index-links?
     Drapeau qui, s’il vaut ‘#t’, fera générer des liens « résumé », «
     commit » et « arborescence » supplémentaires poru chaque dépôt dans
     l’index des dépôts.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-index-owner?
     Drapeau qui, s’il vaut ‘#t’, fera afficher le propriétaire de
     chaque dépôt dans l’index des dépôts.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-log-filecount?
     Drapeau qui, s’il vaut ‘#t’, fera afficher à cgit le nombre de
     fichiers modifiés pour chaque commit sur la page de log du dépôt.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-log-linecount?
     Drapeau qui, s’il vaut ‘#t’, fera afficher à cgit le nombre de
     lignes ajoutées et enlevées pour chaque commit de la page de log du
     dépôt.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-remote-branches?
     Drapeau qui, s’il vaut ‘#t’, fera afficher les branches distantes
     dans les vues du résumé et des références.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-subject-links?
     Drapeau qui, s’il vaut ‘1’, fera utiliser à cgit le sujet du commit
     parent comme texte du lien lors de la génération des liens vers les
     commits parents dans la vue des commits.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-html-serving?
     Drapeau qui, s’il vaut ‘#t’, fera utiliser à cgit l esujet du
     commit parent comme texte du lien lors de la génération des liens
     vers le commit parent dans la vue des commits.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-tree-linenumbers?
     Drapeau qui, s’il vaut ‘#t’, fera générer à cgit des liens vers le
     numéro de ligne pour les blobs en texte brut affichés dans la vue
     de l’arborescence.

     La valeur par défaut est ‘#t’.

 -- paramètre de ‘cgit-configuration’ : boolean enable-git-config?
     Drapeau qui, s’il vaut ‘#t’, permettra à cgit d’utiliser la
     configuration Git pour spécifier des paramètres spécifiques au
     dépôt.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : file-object favicon
     URL utilisée comme lien vers un icône pour cgit.

     La valeur par défaut est ‘"/favicon.ico"’.

 -- paramètre de ‘cgit-configuration’ : string footer
     Le contenu du fichier spécifié avec cette option sera inclus
     directement au bas de toutes les pages (c.-à-d. qu’il remplace le
     message « généré par … » générique).

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : string head-include
     Le contenu du fichier spécifié dans cette option sera inclus
     directement dans la section HEAD HTML de toutes les pages.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : string header
     Le contenu du fichier spécifié avec cette option sera inclus
     directement au début de toutes les pages.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : file-object include
     Nom d’un fichier de configuration à inclure avant que le reste du
     fichier de configuration actuel ne soit analysé.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : string index-header
     Le contenu du fichier spécifié avec cette option sera inclus
     directement au dessus de l’index des dépôts.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : string index-info
     Le contenu du fichier spécifié avec cette option sera inclus
     directement en dessous de l’en-tête sur la page d’index du dépôt.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : boolean local-time?
     Drapeau qui, s’il vaut ‘#t’, fera afficher à cgit l’heure et la
     date de commit et de tag dans le fuseau horaire du serveur.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : file-object logo
     URL qui spécifie la source d’une image utilisé comme logo sur
     toutes les pages cgit.

     La valeur par défaut est ‘"/share/cgit/cgit.png"’.

 -- paramètre de ‘cgit-configuration’ : string logo-link
     URL chargée lors du clic sur l’image du logo de cgit.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : file-object owner-filter
     Commande qui sera invoquée pour formater la colonne propriétaire
     sur la page principale.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : integer max-atom-items
     Nombre d’éléments à afficher dans la vue des flux atom.

     La valeur par défaut est ‘10’.

 -- paramètre de ‘cgit-configuration’ : integer max-commit-count
     Nombre d’éléments à lister par page dans la vue « log ».

     La valeur par défaut est ‘50’.

 -- paramètre de ‘cgit-configuration’ : integer max-message-length
     Nombre caractères de messages de commit à afficher dans la vue «
     log ».

     La valeur par défaut est ‘80’.

 -- paramètre de ‘cgit-configuration’ : integer max-repo-count
     Spécifie le nombre d’éléments à lister par page sur la page de
     l’index des dépôts.

     La valeur par défaut est ‘50’.

 -- paramètre de ‘cgit-configuration’ : integer max-repodesc-length
     Spécifie le nombre maximum de caractères de description de dépôts à
     afficher sur la page d’index des dépôts.

     La valeur par défaut est ‘80’.

 -- paramètre de ‘cgit-configuration’ : integer max-blob-size
     Spécifie la taille maximale d’un blob pour lequel afficher du HTML
     en kilo-octets.

     La valeur par défaut est ‘0’.

 -- paramètre de ‘cgit-configuration’ : string max-stats
     Période de statistiques maximale. Les valeurs valides sont ‘week’,
     ‘month’, ‘quarter’ et ‘year’.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : mimetype-alist mimetype
     Type mime pour l’extension de fichier spécifiée.

     La valeur par défaut est ‘((gif "image/gif") (html "text/html")
     (jpg "image/jpeg") (jpeg "image/jpeg") (pdf "application/pdf") (png
     "image/png") (svg "image/svg+xml"))’.

 -- paramètre de ‘cgit-configuration’ : file-object mimetype-file
     Spécifie le fichier à utiliser pour la recherche automatique de
     type mime.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : string module-link
     Texte qui sera utilisé comme chaîne de formatage pour un lien
     hypertexte lorsqu’un sous-module est affiché dans la liste du
     répertoire.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : boolean nocache?
     Si la valeur est ‘#t’, le cache est désactivé.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : boolean noplainemail?
     Si la valeur est ‘#t’, l’affichage des adresse de courriel des
     auteurs sera désactivé.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : boolean noheader?
     Drapeau qui, s’il vaut ‘#t’, fera omettre à cgit l’en-tête standard
     sur toutes les pages.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : project-list project-list
     UNe liste de sous-répertoires dans ‘repository-directory’,
     relativement à lui, qui devrait être chargé comme des dépôts Git.
     Une liste vide signifie que tous les sous-répertoires seront
     chargés.

     La valeur par défaut est ‘()’.

 -- paramètre de ‘cgit-configuration’ : file-object readme
     Texte utilisé comme valeur par défaut pour ‘cgit-repo-readme’.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : boolean remove-suffix?
     Si la valeur est ‘#t’ et que ‘repository-directory’ est activé, si
     un dépôt avec un suffixe de ‘.git’ est trouvé, ce suffixe sera
     supprimé de l’URL et du nom.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : integer renamelimit
     Nombre maximum de fichiers à considérer lors de la détection des
     renommages.

     La valeur par défaut est ‘-1’.

 -- paramètre de ‘cgit-configuration’ : string repository-sort
     La manière dont les dépôt de chaque section sont rangés.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : robots-list robots
     Texte utilisé comme contenu du méta-attribut ‘robots’.

     La valeur par défaut est ‘("noindex" "nofollow")’.

 -- paramètre de ‘cgit-configuration’ : string root-desc
     Texte affiché en dessous de l’en-tête de la page d’index des
     dépôts.

     La valeur par défaut est ‘"a fast webinterface for the git dscm"’.

 -- paramètre de ‘cgit-configuration’ : string root-readme
     The content of the file specified with this option will be included
     verbatim below the “about” link on the repository index page.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : string root-title
     Texte affiché sur la page d’index des dépôts.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : boolean scan-hidden-path
     If set to ‘#t’ and repository-directory is enabled,
     repository-directory will recurse into directories whose name
     starts with a period. Otherwise, repository-directory will stay
     away from such directories, considered as “hidden”. Note that this
     does not apply to the ‘.git’ directory in non-bare repos.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : list snapshots
     Texte qui spécifie l’ensemble des formats d’archives par défaut
     pour lesquelles cgit générera un lien.

     La valeur par défaut est ‘()’.

 -- paramètre de ‘cgit-configuration’ : repository-directory
          repository-directory
     Nom du répertoire à scanner pour trouver les dépôts (représente
     ‘scan-path’).

     La valeur par défaut est ‘"/srv/git"’.

 -- paramètre de ‘cgit-configuration’ : string section
     Le nom de la section de dépôts actuelle — tous les dépôts définis
     après ce point hériterons du nom de section actuel.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : string section-sort
     Drapeau qui, s’il vaut ‘1’, triera les sections dans la liste des
     dépôts par nom.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : integer section-from-path
     Un nombre qui, s’il est défini avant repository-directory,
     spécifier combien d’éléments de chemin de chaque chemin de dépôt
     utiliser comme nom de section par défaut.

     La valeur par défaut est ‘0’.

 -- paramètre de ‘cgit-configuration’ : boolean side-by-side-diffs?
     Si la valeur est ‘#t’, afficher des diffs côte à côte au lieu des
     unidiffs par défaut.

     La valeur par défaut est ‘#f’.

 -- paramètre de ‘cgit-configuration’ : file-object source-filter
     Spécifie une commande qui sera invoquée pour formater les blobs en
     texte brut dans la vue de l’arborescence.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : integer summary-branches
     Specifies the number of branches to display in the repository
     “summary” view.

     La valeur par défaut est ‘10’.

 -- paramètre de ‘cgit-configuration’ : integer summary-log
     Specifies the number of log entries to display in the repository
     “summary” view.

     La valeur par défaut est ‘10’.

 -- paramètre de ‘cgit-configuration’ : integer summary-tags
     Specifies the number of tags to display in the repository “summary”
     view.

     La valeur par défaut est ‘10’.

 -- paramètre de ‘cgit-configuration’ : string strict-export
     Nom de fichier qui, s’il est spécifié, doit être présent dans le
     dépôt pour que cgit accorde l’accès à ce dépôt.

     La valeur par défaut est ‘""’.

 -- paramètre de ‘cgit-configuration’ : string virtual-root
     URL qui, si elle est spécifiée, sera utilisée comme racine pour
     tous les liens cgit.

     La valeur par défaut est ‘"/"’.

 -- paramètre de ‘cgit-configuration’ :
          repository-cgit-configuration-list repositories
     Une liste d’enregistrements “cgit-repo” à utiliser avec config.

     La valeur par défaut est ‘()’.

     Les champs de ‘repository-cgit-configuration’ disponibles sont :

      -- paramètre de ‘repository-cgit-configuration’ : repo-list
               snapshots
          Un masque de formats d’archives pour ce dépôt pour lesquelles
          cgit générera un lien, restreint par le paramètre ‘snapshots’
          global.

          La valeur par défaut est ‘()’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-file-object
               source-filter
          Modifie le ‘source-filter’ par défaut.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string url
          URL relative utilisée pour accéder au dépôt.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-file-object
               about-filter
          Modifie le paramètre ‘about-filter’ par défaut.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string
               branch-sort
          Drapeau qui, s’il vaut ‘age’, active le tri par date dans la
          liste des branches, et lorsqu’il vaut ‘name’, le tri par nom.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-list
               clone-url
          Un liste d’URL qui peuvent être utilisées pour cloner ce
          dépôt.

          La valeur par défaut est ‘()’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-file-object
               commit-filter
          Modifie le paramètre ‘commit-filter’ par défaut.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string
               commit-sort
          Drapeau qui, s’il vaut ‘date’, active le tri par date strict
          dans le messages de commit, et le tri topologique strict
          lorsqu’il vaut ‘topo’.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string
               defbranch
          The name of the default branch for this repository. If no such
          branch exists in the repository, the first branch name (when
          sorted) is used as default instead. By default branch pointed
          to by HEAD, or “master” if there is no suitable HEAD.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string desc
          La valeur à afficher comme description du dépôt.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string
               homepage
          La valeur à afficher comme page d’accueil du dépôt.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-file-object
               email-filter
          Modifie le paramètre ‘email-filter’ par défaut.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ :
               maybe-repo-boolean enable-commit-graph?
          Un drapeau qui peut être utilisé pour désactiver le paramètre
          ‘enable-commit-graph?’ global.

          La valeur par défaut est ‘disabled’.

      -- paramètre de ‘repository-cgit-configuration’ :
               maybe-repo-boolean enable-log-filecount?
          Un drapeau qui peut être utilisé pour désactiver le paramètre
          ‘enable-log-filecount?’ global.

          La valeur par défaut est ‘disabled’.

      -- paramètre de ‘repository-cgit-configuration’ :
               maybe-repo-boolean enable-log-linecount?
          Un drapeau qui peut être utilisé pour désactiver le paramètre
          ‘enable-log-linecount?’ global.

          La valeur par défaut est ‘disabled’.

      -- paramètre de ‘repository-cgit-configuration’ :
               maybe-repo-boolean enable-remote-branches?
          Drapeau qui, s’il vaut ‘#t’, fera afficher les branches
          distantes dans les vues du résumé et des références.

          La valeur par défaut est ‘disabled’.

      -- paramètre de ‘repository-cgit-configuration’ :
               maybe-repo-boolean enable-subject-links?
          Un drapeau qui peut être utilisé pour modifier le paramètre
          ‘enable-subject-links?’ global.

          La valeur par défaut est ‘disabled’.

      -- paramètre de ‘repository-cgit-configuration’ :
               maybe-repo-boolean enable-html-serving?
          Un drapeau qui peut être utilisé pour modifier le paramètre
          ‘enable-html-serving?’ global.

          La valeur par défaut est ‘disabled’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-boolean
               hide?
          Drapeau qui, s’il vaut ‘#t’, cache le dépôt de l’index des
          dépôts.

          La valeur par défaut est ‘#f’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-boolean
               ignore?
          Drapeau qui, s’il vaut ‘#t’, ignore le dépôt.

          La valeur par défaut est ‘#f’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-file-object
               logo
          URL qui spécifie la source d’une image qui sera utilisée comme
          logo sur les pages de ce dépôt.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string
               logo-link
          URL chargée lors du clic sur l’image du logo de cgit.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-file-object
               owner-filter
          Modifie le paramètre ‘owner-filter’ par défaut.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string
               module-link
          Texte qui sera utilisé comme chaîne de formatage pour un lien
          hypertexte lorsqu’un sous-module est affiché dans une liste de
          fichiers. Les arguments pour la chaîne de formatage sont le
          chemin et le SHA1 du commit du sous-module.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : module-link-path
               module-link-path
          Texte qui sera utilisé comme chaîne de formatage lorsqu’un
          sous-module avec un chemin spécifié sera affiché dans une
          liste de fichiers.

          La valeur par défaut est ‘()’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string
               max-stats
          Modifie la période de statistique maximale par défaut.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string name
          La valeur à afficher comme nom de dépôt.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string
               owner
          Une valeur utilisée pour identifier le propriétaire du dépôt.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string path
          Un chemin absolu vers le répertoire du dépôt.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string
               readme
          A path (relative to repo) which specifies a file to include
          verbatim as the “About” page for this repo.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-string
               section
          Le nom de la section de dépôts actuelle — tous les dépôts
          définis après ce point hériterons du nom de section actuel.

          La valeur par défaut est ‘""’.

      -- paramètre de ‘repository-cgit-configuration’ : repo-list
               extra-options
          Options supplémentaires ajoutées à la fin du fichier cgitrc.

          La valeur par défaut est ‘()’.

 -- paramètre de ‘cgit-configuration’ : list extra-options
     Options supplémentaires ajoutées à la fin du fichier cgitrc.

     La valeur par défaut est ‘()’.

   Cependant, vous pourriez vouloir simplement récupérer un ‘cgitrc’ et
l’utiliser. Dans ce cas, vous pouvez passer un
‘opaque-cgit-configuration’ comme enregistrement à ‘cgit-service-type’.
Comme son nom l’indique, une configuration opaque n’a pas de capacité de
réflexion facile.

   Les champs de ‘opaque-cgit-configuration’ disponibles sont :

 -- paramètre de ‘opaque-cgit-configuration’ : package cgit
     Le paquet cgit.

 -- paramètre de ‘opaque-cgit-configuration’ : string string
     Le contenu de ‘cgitrc’, en tant que chaîne de caractère.

   Par exemple, si votre ‘cgitrc’ est juste la chaîne vide, vous pouvez
instancier un service cgit ainsi :

     (service cgit-service-type
              (opaque-cgit-configuration
               (cgitrc "")))

Service Gitolite
................

Gitolite (https://gitolite.com/gitolite/) est un outil pour héberger des
dépôts Git sur un serveur central.

   Gitolite peut gérer plusieurs dépôts et utilisateurs et supporte une
configuration flexible des permissions pour les utilisateurs sur ces
dépôts.

   L’exemple suivant configure Gitolite en utilisant l’utilisateur ‘git’
par défaut et la clef SSH fournie.

     (service gitolite-service-type
              (gitolite-configuration
                (admin-pubkey (plain-file
                                "yourname.pub"
                                "ssh-rsa AAAA... guix@example.com"))))

   Gitolite est configuré via un dépôt d’administration spécial que vous
pouvez cloner. Par exemple, si vous hébergez Gitolite sur ‘example.com’,
vous pouvez lancer la commande suivante pour cloner le dépôt
d’administration.

     git clone git@example.com:gitolite-admin

   Lorsque le service Gitolite est activé, la clef ‘admin-pubkey’
fournie sera insérée dans le répertoire ‘keydir’ du dépôt
gitolite-admin. Si cela change le dépôt, un commit sera effectué avec le
message « gitolite setup by GNU Guix ».

 -- Type de données : gitolite-configuration
     Type de données représentant la configuration de
     ‘gitolite-service-type’.

     ‘package’ (par défaut : GITOLITE)
          Le paquet Gitolite à utiliser.

     ‘user’ (par défaut : GIT)
          Utilisateur pour utiliser Gitolite. Cela sera l’utilisateur à
          utiliser pour accéder à Gitolite par SSH.

     ‘group’ (par défaut : GIT)
          Groupe à utiliser pour Gitolite.

     ‘home-directory’ (par défaut : "/VAR/LIB/GITOLITE")
          Répertoire dans lequel stocker la configuration et les dépôts
          de Gitolite.

     ‘rc-file’ (par défaut : (GITOLITE-RC-FILE))
          Un objet « simili-fichier » (*note file-like objects:
          G-Expressions.) représentant la configuration de Gitolite.

     ‘admin-pubkey’ (par défaut : #F)
          Un objet « simili-fichier » (*note file-like objects:
          G-Expressions.) utilisé pour paramétrer Gitolite. Il sera
          inséré dans le répertoire ‘keydir’ dans le dépôt
          gitolite-admin.

          Pour spécifier la clef SSH comme chaîne de caractère, utilisez
          la fonction ‘plain-file’.

               (plain-file "yourname.pub" "ssh-rsa AAAA... guix@example.com")

 -- Type de données : gitolite-rc-file
     Type de données représentant le fichier RC de Gitolite.

     ‘umask’ (par défaut : ‘#o0077’)
          Cela contrôle les permissions que Gitolite propose sur les
          dépôts et leur contenu.

          Une valeur comme ‘#o0027’ donnera accès en lecture au groupe
          utilisé par Gitolite (par défaut : ‘git’). Cel aest nécessaire
          lorsque vous utilise Gitolite avec un logiciel comme cgit ou
          gitweb.

     ‘git-config-keys’ (par défaut : ‘""’)
          Gitolite allows you to set git config values using the
          ‘config’ keyword. This setting allows control over the config
          keys to accept.

     ‘roles’ (par défaut : ‘'(("READERS" . 1) ("WRITERS" . ))’)
          Indique les noms des rôles qui peuvent être utilisés par les
          utilisateurs avec la commande perms.

     ‘enable’ (par défaut : ‘'("help" "desc" "info" "perms" "writable" "ssh-authkeys" "git-config" "daemon" "gitweb")’)
          Ce paramètre contrôle les commandes et les fonctionnalités à
          activer dans Gitolite.

   ---------- Footnotes ----------

   (1) By creating the magic file ‘git-daemon-export-ok’ in the
repository directory.


File: guix.fr.info,  Node: Services de jeu,  Next: PAM Mount Service,  Prev: Services de contrôle de version,  Up: Services

8.8.26 Services de jeu
----------------------

Le service de la Bataille pour Wesnoth
......................................

La Bataille pour Wesnoth (https://wesnoth.org) est un jeu de stratégie
en tour par tour dans un univers fantastique, avec plusieurs campagnes
solo et des parties multijoueurs (en réseau et en local).

 -- Variable : Variable Scheme wesnothd-service-type
     Type de service pour le service wesnothd. Sa valeur doit être un
     objet ‘wesnothd-configuration’. Pour lancer wesnothd avec la
     configuration par défaut, instanciez-le ainsi :

          (service wesnothd-service-type)

 -- Type de données : wesnothd-configuration
     Type de donées représentant la configuration de ‘wesnothd’.

     ‘package’ (par défaut : ‘wesnoth-server’)
          Le paquet de serveur de wesnoth à utiliser.

     ‘port’ (par défaut : ‘15000’)
          Le pour sur lequel lier le serveur.


File: guix.fr.info,  Node: PAM Mount Service,  Next: Guix Services,  Prev: Services de jeu,  Up: Services

8.8.27 PAM Mount Service
------------------------

The ‘(gnu services pam-mount)’ module provides a service allowing users
to mount volumes when they log in. It should be able to mount any volume
format supported by the system.

 -- Variable : Scheme Variable pam-mount-service-type
     Service type for PAM Mount support.

 -- Data Type : pam-mount-configuration
     Data type representing the configuration of PAM Mount.

     Il prend les paramètres suivants :

     ‘rules’
          The configuration rules that will be used to generate
          ‘/etc/security/pam_mount.conf.xml’.

          The configuration rules are SXML elements (*note
          (guile)SXML::), and the the default ones don’t mount anything
          for anyone at login:

               `((debug (@ (enable "0")))
                 (mntoptions (@ (allow ,(string-join
                                         '("nosuid" "nodev" "loop"
                                           "encryption" "fsck" "nonempty"
                                           "allow_root" "allow_other")
                                         ","))))
                 (mntoptions (@ (require "nosuid,nodev")))
                 (logout (@ (wait "0")
                            (hup "0")
                            (term "no")
                            (kill "no")))
                 (mkmountpoint (@ (enable "1")
                                  (remove "true"))))

          Some ‘volume’ elements must be added to automatically mount
          volumes at login. Here’s an example allowing the user ‘alice’
          to mount her encrypted ‘HOME’ directory and allowing the user
          ‘bob’ to mount the partition where he stores his data:

               (define pam-mount-rules
               `((debug (@ (enable "0")))
                           (volume (@ (user "alice")
                                      (fstype "crypt")
                                      (path "/dev/sda2")
                                      (mountpoint "/home/alice")))
                           (volume (@ (user "bob")
                                      (fstype "auto")
                                      (path "/dev/sdb3")
                                      (mountpoint "/home/bob/data")
                                      (options "defaults,autodefrag,compress")))
                           (mntoptions (@ (allow ,(string-join
                                                   '("nosuid" "nodev" "loop"
                                                     "encryption" "fsck" "nonempty"
                                                     "allow_root" "allow_other")
                                                   ","))))
                           (mntoptions (@ (require "nosuid,nodev")))
                           (logout (@ (wait "0")
                                      (hup "0")
                                      (term "no")
                                      (kill "no")))
                           (mkmountpoint (@ (enable "1")
                                            (remove "true")))))

               (service pam-mount-service-type
                        (pam-mount-configuration
                          (rules pam-mount-rules)))

          The complete list of possible options can be found in the man
          page for pam_mount.conf
          (http://pam-mount.sourceforge.net/pam_mount.conf.5.html).


File: guix.fr.info,  Node: Guix Services,  Next: Linux Services,  Prev: PAM Mount Service,  Up: Services

8.8.28 Guix Services
--------------------

Guix Data Service
.................

The Guix Data Service (http://data.guix.gnu.org) processes, stores and
provides data about GNU Guix. This includes information about packages,
derivations and lint warnings.

   The data is stored in a PostgreSQL database, and available through a
web interface.

 -- Variable : Scheme Variable guix-data-service-type
     Service type for the Guix Data Service. Its value must be a
     ‘guix-data-service-configuration’ object. The service optionally
     extends the getmail service, as the guix-commits mailing list is
     used to find out about changes in the Guix git repository.

 -- Data Type : guix-data-service-configuration
     Data type representing the configuration of the Guix Data Service.

     ‘package’ (default: ‘guix-data-service’)
          The Guix Data Service package to use.

     ‘user’ (default: ‘"guix-data-service"’)
          The system user to run the service as.

     ‘group’ (default: ‘"guix-data-service"’)
          The system group to run the service as.

     ‘port’ (default: ‘8765’)
          The port to bind the web service to.

     ‘host’ (default: ‘"127.0.0.1"’)
          The host to bind the web service to.

     ‘getmail-idle-mailboxes’ (default: ‘#f’)
          If set, this is the list of mailboxes that the getmail service
          will be configured to listen to.

     ‘commits-getmail-retriever-configuration’ (default: ‘#f’)
          If set, this is the ‘getmail-retriever-configuration’ object
          with which to configure getmail to fetch mail from the
          guix-commits mailing list.

     ‘extra-options’ (par défaut : ’())
          Extra command line options for ‘guix-data-service’.

     ‘extra-process-jobs-options’ (default: ’())
          Extra command line options for
          ‘guix-data-service-process-jobs’.


File: guix.fr.info,  Node: Linux Services,  Next: Hurd Services,  Prev: Guix Services,  Up: Services

8.8.29 Linux Services
---------------------

Early OOM Service
.................

Early OOM (https://github.com/rfjakob/earlyoom), also known as Earlyoom,
is a minimalist out of memory (OOM) daemon that runs in user space and
provides a more responsive and configurable alternative to the in-kernel
OOM killer. It is useful to prevent the system from becoming
unresponsive when it runs out of memory.

 -- Scheme Variable : earlyoom-service-type
     The service type for running ‘earlyoom’, the Early OOM daemon. Its
     value must be a ‘earlyoom-configuration’ object, described below.
     The service can be instantiated in its default configuration with:

          (service earlyoom-service-type)

 -- Data Type : earlyoom-configuration
     This is the configuration record for the ‘earlyoom-service-type’.

     ‘earlyoom’ (default: EARLYOOM)
          The Earlyoom package to use.

     ‘minimum-available-memory’ (default: ‘10’)
          The threshold for the minimum _available_ memory, in
          percentages.

     ‘minimum-free-swap’ (default: ‘10’)
          The threshold for the minimum free swap memory, in
          percentages.

     ‘prefer-regexp’ (default: ‘#f’)
          A regular expression (as a string) to match the names of the
          processes that should be preferably killed.

     ‘avoid-regexp’ (default: ‘#f’)
          A regular expression (as a string) to match the names of the
          processes that should _not_ be killed.

     ‘memory-report-interval’ (default: ‘0’)
          The interval in seconds at which a memory report is printed.
          It is disabled by default.

     ‘ignore-positive-oom-score-adj?’ (default: ‘#f’)
          A boolean indicating whether the positive adjustments set in
          ‘/proc/*/oom_score_adj’.

     ‘show-debug-messages?’ (default: ‘#f’)
          A boolean indicating whether debug messages should be printed.
          The logs are saved at ‘/var/log/earlyoom.log’.

     ‘send-notification-command’ (default: ‘#f’)
          This can be used to provide a custom command used for sending
          notifications.

Kernel Module Loader Service
............................

The kernel module loader service allows one to load loadable kernel
modules at boot. This is especially useful for modules that don’t
autoload and need to be manually loaded, as it’s the case with ‘ddcci’.

 -- Scheme Variable : kernel-module-loader-service-type
     The service type for loading loadable kernel modules at boot with
     ‘modprobe’. Its value must be a list of strings representing module
     names. For example loading the drivers provided by
     ‘ddcci-driver-linux’, in debugging mode by passing some module
     parameters, can be done as follow:

          (use-modules (gnu) (gnu services))
          (use-package-modules linux)
          (use-service-modules linux)

          (define ddcci-config
            (plain-file "ddcci.conf"
                        "options ddcci dyndbg delay=120"))

          (operating-system
            ...
            (services (cons* (service kernel-module-loader-service-type
                                      '("ddcci" "ddcci_backlight"))
                             (simple-service 'ddcci-config etc-service-type
                                             (list `("modprobe.d/ddcci.conf"
                                                     ,ddcci-config)))
                             %base-services))
            (kernel-loadable-modules (list ddcci-driver-linux)))


File: guix.fr.info,  Node: Hurd Services,  Next: Services divers,  Prev: Linux Services,  Up: Services

8.8.30 Hurd Services
--------------------

 -- Scheme Variable : hurd-console-service-type
     This service starts the fancy ‘VGA’ console client on the Hurd.

     The service’s value is a ‘hurd-console-configuration’ record.

 -- Data Type : hurd-console-configuration
     This is the data type representing the configuration for the
     hurd-console-service.

     ‘hurd’ (default: HURD)
          The Hurd package to use.

 -- Scheme Procedure : hurd-etc-service OS
     This service implements a minimal ‘etc-service’, adding some
     specifics for the Hurd.

     It is part of the ‘hurd-default-essential-services’.

 -- Scheme Variable : hurd-getty-service-type
     This service starts a tty using the Hurd ‘getty’ program.

     The service’s value is a ‘hurd-getty-configuration’ record.

 -- Data Type : hurd-getty-configuration
     This is the data type representing the configuration for the
     hurd-getty-service.

     ‘hurd’ (default: HURD)
          The Hurd package to use.

     ‘tty’
          The name of the console this Getty runs on—e.g., ‘"tty1"’.

     ‘baud-rate’ (default: ‘38400’)
          An integer specifying the baud rate of the tty.


File: guix.fr.info,  Node: Services divers,  Prev: Hurd Services,  Up: Services

8.8.31 Services divers
----------------------

Service d’empreintes digitales
..............................

Le module ‘(gnu services authentication)’ fournit un service DBus pour
lire et identifier les empreintes digitales via un lecteur d’empreinte.

 -- Variable Scheme : fprintd-service-type
     Le type de service pour ‘fprintd’, qui fournit des capacités de
     lecture d’empreinte.

          (service fprintd-service-type)

Service de contrôle du système
..............................

Le module ‘(gnu services sysctl)’ fournit un service pour configurer les
paramètres du noyau au démarrage.

 -- Variable Scheme : sysctl-service-type
     Le type de service pour ‘sysctl’, qui modifie les paramètres du
     noyau dans ‘/proc/sys/’. Pour activer le transfert d’IPv4, vous
     pouvez l’instancier ainsi :

          (service sysctl-service-type
                   (sysctl-configuration
                     (settings '(("net.ipv4.ip_forward" . "1")))))

 -- Type de données : sysctl-configuration
     Le type de données représentant la configuration de ‘sysctl’.

     ‘sysctl’ (par défaut : ‘(file-append procps "/sbin/sysctl"’)
          L’exécutable ‘sysctl’ à utiliser.

     ‘settings’ (par défaut : ‘'()’)
          Une liste d’association spécifiant les paramètres du noyau et
          leur valeur.

Service du démon PC/SC Smart Card
.................................

Le module ‘(gnu services security-token)’ fournit le service suivant qui
lance ‘pcscd’, le démon PC/SC Smart Card. ‘pcscd’ est le démon pour
pcsc-lite et MuscleCard. C’est un gestionnaire de ressource qui
coordonne les communications avec les lecteurs de smart cards, les smart
cards et les jetons cryptographiques connectés au système.

 -- Variable Scheme : pcscd-service-type
     Le type de service pour le service ‘pcscd’. Sa valeur doit être un
     objet ‘pcscd-configuration’. Pour lancer pcscd dans sa
     configuration par défaut, instantiez-le avec :

          (service pcscd-service-type)

 -- Type de données : pcscd-configuration
     Type de données représentant la configuration de ‘pcscd’.

     ‘pcsc-lite’ (par défaut : ‘pcsc-lite’)
          Le paquet pcsc-lite qui fournit pcscd.
     ‘usb-drivers’ (par défaut : ‘(list ccid)’)
          Liste des paquets qui fournissent des pilotes USB à pcscd. Les
          pilotes doivent être dans ‘pcsc/drivers’ dans le répertoire du
          dépôt du paquet.

Service Lirc
............

Le module ‘(gnu services lirc)’ fournit le service suivant.

 -- Procédure Scheme : lirc-service [#:lirc lirc] [#:device #f]
          [#:driver #f] [#:config-file #f] [#:extra-options '()]
     Renvoie un service qui lance LIRC (http://www.lirc.org), un démon
     qui décode les signaux infrarouges des télécommandes.

     Éventuellement, DEVICE, DRIVER et CONFIG-FILE (le nom du fichier de
     configuration) peuvent être spécifiés. Voir le manuel de ‘lircd’
     pour plus de détails.

     Enfin, EXTRA-OPTIONS est une liste d’options de la ligne de
     commande supplémentaires à passer à ‘lircd’.

Service Spice
.............

Le module ‘(gnu services spice)’ fournit le service suivant.

 -- Procédure Scheme : spice-vdagent-service [#:spice-vdagent]
     Renvoie un service qui lance VDAGENT (https://www.spice-space.org),
     un démon qui permet le partage du presse-papier avec une vm et de
     configurer la résolution d’affichage du client lorsque la fenêtre
     de la console graphique est redimensionnée.

Service inputattach
...................

Le service inputattach (https://linuxwacom.github.io/) vous permet
d’utiliser des périphériques d’entrée comme les tablettes Wacom, les
écrans tactiles ou les joysticks avec le serveur d’affichage Xorg.

 -- Variable Scheme : inputattach-service-type
     Type d’un service qui lance ‘inputattach’ sur un appareil et envie
     les événements qu’il reçoit.

 -- Type de données : inputattach-configuration
     ‘device-type’ (par défaut : ‘"wacom"’)
          Le type du périphérique à gérer. Lancez ‘inputattach --help’,
          du paquet ‘inputattach’, pour voir la liste des types de
          périphériques supportés.

     ‘device’ (par défaut : ‘"/dev/ttyS0"’)
          Le fichier de périphérique pour s’y connecter.

     ‘baud-rate’ (par défaut : ‘#f’)
          Baud rate to use for the serial connection. Should be a number
          or ‘#f’.

     ‘log-file’ (par défaut : ‘#f’)
          Si la valeur est vraie, cela doit être le nom d’un fichier où
          enregistrer les messages.

Dictionary Service
..................

Le module ‘(gnu services dict)’ fournit le service suivant :

 -- Scheme Variable : dicod-service-type
     This is the type of the service that runs the ‘dicod’ daemon, an
     implementation of DICT server (*note (dico)Dicod::).

 -- Procédure Scheme : dicod-service [#:config (dicod-configuration)]
     Renvoie un service qui lance le démon ‘dicod’, une implémentation
     du serveur DICT (*note (dico)Dicod::).

     The optional CONFIG argument specifies the configuration for
     ‘dicod’, which should be a ‘<dicod-configuration>’ object, by
     default it serves the GNU Collaborative International Dictionary of
     English.

     Vous pouvez ajouter ‘open localhost’ à votre fichier ‘~/.dico’ pour
     faire de ‘localhost’ le serveur par défaut du client ‘dico’ (*note
     (dico)Initialization File::).

 -- Type de données : dicod-configuration
     Type de données représentant la configuration de dicod.

     ‘dico’ (par défaut : DICO)
          Objet de paquet du serveur de dictionnaire GNU Dico.

     ‘interfaces’ (par défaut : ’("LOCALHOST"))
          C’est la liste des adresses IP et des ports et éventuellement
          des noms de fichiers de socket sur lesquels écouter (*note
          ‘listen’ directive: (dico)Server Settings.).

     ‘handlers’ (par défaut : ’())
          Liste des objets ‘<dicod-handler>’ qui définissent des
          gestionnaires (des instances de modules).

     ‘databases’ (par défaut : (LIST %DICOD-DATABASE:GCIDE))
          Liste d’objets ‘<dicod-database>’ qui définissent des
          dictionnaires à servir.

 -- Type de données : dicod-handler
     Type de données représentant un gestionnaire de dictionnaire
     (instance de module).

     ‘name’
          Nom du gestionnaire (instance de module).

     ‘module’ (par défaut : #F)
          Nom du module dicod du gestionnaire (instance). Si la valeur
          est ‘#f’, le module a le même nom que le gestionnaire. (*note
          (dico)Modules::).

     ‘options’
          Liste de chaînes ou de gexps représentant les arguments pour
          le gestionnaire de module

 -- Type de données : dicod-database
     Type de données représentant une base de données de dictionnaire.

     ‘name’
          Nom de la base de données, qui sera utilisée dans les commande
          DICT.

     ‘handler’
          Nom du gestionnaire dicod (instance de module) utilisé par
          cette base de données (*note (dico)Handlers::).

     ‘complex?’ (par défaut : #F)
          Indique si la configuration est pour une base de données
          complexe. La configuration complexe a besoin d’un objet
          ‘<dicod-handler>’ correspondant, sinon inutile.

     ‘options’
          Liste de chaînes ou de gexps représentant les arguments pour
          la base de données (*note (dico)Databases::).

 -- Variable Scheme : %dicod-database:gcide
     Un objet ‘<dicod-database>’ servant le dictionnaire international
     collaboratif en anglais via le paquet ‘gcide’.

   Voici un exemple de configuration de ‘dicod-service’.

     (dicod-service #:config
       (dicod-configuration
        (handlers (list (dicod-handler
                         (name "wordnet")
                         (module "dictorg")
                         (options
                          (list #~(string-append "dbdir=" #$wordnet))))))
        (databases (list (dicod-database
                          (name "wordnet")
                          (complex? #t)
                          (handler "wordnet")
                          (options '("database=wn")))
                         %dicod-database:gcide))))

Service Docker
..............

The ‘(gnu services docker)’ module provides the following services.

 -- Variable Scheme : docker-service-type

     C’est le type du service qui lance Docker (https://www.docker.com),
     un démon qui peut exécuter des lots applicatifs (aussi appelés «
     conteneurs ») dans des environnements isolés.

 -- Type de données : docker-configuration
     Le type de données qui représente la configuration de Docker et
     Containerd.

     ‘package’ (par défaut : ‘docker’)
          Le paquet Docker à utiliser.

     ‘containerd’ (par défaut : CONTAINERD)
          Le paquet Containerd à utiliser.

Auditd Service
..............

The ‘(gnu services auditd)’ module provides the following service.

 -- Scheme Variable : auditd-service-type

     This is the type of the service that runs auditd
     (https://people.redhat.com/sgrubb/audit/), a daemon that tracks
     security-relevant information on your system.

     Examples of things that can be tracked:

       1. File accesses
       2. System calls
       3. Invoked commands
       4. Failed login attempts
       5. Firewall filtering
       6. Network access

     ‘auditctl’ from the ‘audit’ package can be used in order to add or
     remove events to be tracked (until the next reboot). In order to
     permanently track events, put the command line arguments of
     auditctl into ‘/etc/audit/audit.rules’. ‘aureport’ from the ‘audit’
     package can be used in order to view a report of all recorded
     events. The audit daemon usually logs into the directory
     ‘/var/log/audit’.

 -- Data Type : auditd-configuration
     This is the data type representing the configuration of auditd.

     ‘audit’ (default: ‘audit’)
          The audit package to use.

 -- Scheme Variable : singularity-service-type
     This is the type of the service that allows you to run Singularity
     (https://www.sylabs.io/singularity/), a Docker-style tool to create
     and run application bundles (aka. “containers”). The value for this
     service is the Singularity package to use.

     The service does not install a daemon; instead, it installs helper
     programs as setuid-root (*note Programmes setuid::) such that
     unprivileged users can invoke ‘singularity run’ and similar
     commands.

Nix service
...........

The ‘(gnu services nix)’ module provides the following service.

 -- Scheme Variable : nix-service-type

     This is the type of the service that runs build daemon of the Nix
     (https://nixos.org/nix/) package manager. Here is an example
     showing how to use it:

          (use-modules (gnu))
          (use-service-modules nix)
          (use-package-modules package-management)

          (operating-system
            ;; ...
            (packages (append (list nix)
                              %base-packages))

            (services (append (list (service nix-service-type))
                              %base-services)))

     After ‘guix system reconfigure’ configure Nix for your user:

        • Add a Nix channel and update it. See Nix Package Manager Guide
          (https://nixos.org/nix/manual/).

        • Create a symlink to your profile and activate Nix profile:

          $ ln -s "/nix/var/nix/profiles/per-user/$USER/profile" ~/.nix-profile
          $ source /run/current-system/profile/etc/profile.d/nix.sh


File: guix.fr.info,  Node: Programmes setuid,  Next: Certificats X.509,  Prev: Services,  Up: Configuration système

8.9 Programmes setuid
=====================

Some programs need to run with “root” privileges, even when they are
launched by unprivileged users. A notorious example is the ‘passwd’
program, which users can run to change their password, and which needs
to access the ‘/etc/passwd’ and ‘/etc/shadow’ files—something normally
restricted to root, for obvious security reasons. To address that, these
executables are “setuid-root”, meaning that they always run with root
privileges (*note (libc)How Change Persona::, for more info about the
setuid mechanism).

   Le dépôt lui-même ne _peut pas_ contenir de programmes setuid ; cela
serait un problème de sécurité puisque n’importe quel utilisateur du
système peut écrire une dérivation qui rempli le dépôt (*note Le
dépôt::). Donc, un mécanisme différent est utilisé : au lieu de changer
le bit setuid directement sur les fichiers qui sont dans le dépôt, nous
laissons à l’administrateur système le soit de _déclarer_ les programmes
qui devraient être setuid root.

   Le champ ‘setuid-programs’ d’une déclaration ‘operating-system’
contient une liste de G-expressions qui dénotent les noms des programmes
à rendre setuid-root (*note Utiliser le système de configuration::). Par
exemple, le programme ‘passwd’, qui fait partie du paquet Shadow, peut
être désigné par cette G-expression (*note G-Expressions::) :

     #~(string-append #$shadow "/bin/passwd")

   Un ensemble de programmes par défaut est défini par la variable
‘%setuid-programs’ du module ‘(gnu system)’.

 -- Variable Scheme : %setuid-programs
     Une liste de G-expressions qui dénotent les programmes communément
     setuid-root.

     La liste inclus des commandes comme ‘passwd’, ‘ping’, ‘su’ et
     ‘sudo’.

   Sous le capot, les programmes setuid sont créés dans le répertoire
‘/run/setuid-programs’ au moment de l’activation du système. Les
fichiers dans ce répertoire se réfèrent aux « vrais » binaires, qui sont
dans le dépot.


File: guix.fr.info,  Node: Certificats X.509,  Next: Name Service Switch,  Prev: Programmes setuid,  Up: Configuration système

8.10 Certificats X.509
======================

Les serveurs web disponibles par HTTPS (c’est-à-dire HTTP sur le
mécanisme de la couche de transport sécurisée, TLS) envoient aux clients
un “certificat X.509” que les clients peuvent utiliser pour
_authentifier_ le serveur. Pour cela, les clients vérifient que le
certificat du serveur est signé par une “autorité de certification” (AC
ou CA). Mais pour vérifier la signature de la CA, les clients doivent
d’abord avoir récupéré le certificat de la CA.

   Les navigateurs web comme GNU IceCat incluent leur propre liste de
certificats, pour qu’ils puissent vérifier les signatures des CA
directement.

   Cependant, la plupart des autres programmes qui peuvent parler HTTPS
— ‘wget’, ‘git’, ‘w3m’, etc — doivent savoir où trouver les certificats
des CA.

   Dans Guix, cela se fait en ajoutant un paquet qui fournit les
certificats dans le champ ‘packages’ de la déclaration
‘operating-system’ (*note Référence de système d'exploitation::). Guix
inclut l’un de ces paquets, ‘nss-certs’, qui est un ensemble de
certificats de CA fourni par les services de sécurité réseau de Mozilla
(nss).

   Note that it is _not_ part of ‘%base-packages’, so you need to
explicitly add it. The ‘/etc/ssl/certs’ directory, which is where most
applications and libraries look for certificates by default, points to
the certificates installed globally.

   Unprivileged users, including users of Guix on a foreign distro, can
also install their own certificate package in their profile. A number of
environment variables need to be defined so that applications and
libraries know where to find them. Namely, the OpenSSL library honors
the ‘SSL_CERT_DIR’ and ‘SSL_CERT_FILE’ variables. Some applications add
their own environment variables; for instance, the Git version control
system honors the certificate bundle pointed to by the ‘GIT_SSL_CAINFO’
environment variable. Thus, you would typically run something like:

     guix install nss-certs
     export SSL_CERT_DIR="$HOME/.guix-profile/etc/ssl/certs"
     export SSL_CERT_FILE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
     export GIT_SSL_CAINFO="$SSL_CERT_FILE"

   As another example, R requires the ‘CURL_CA_BUNDLE’ environment
variable to point to a certificate bundle, so you would have to run
something like this:

     guix install nss-certs
     export CURL_CA_BUNDLE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"

   Pour d’autres applications vous pourriez avoir besoin de chercher la
variable d’environnement requise dans leur documentation.


File: guix.fr.info,  Node: Name Service Switch,  Next: Disque de RAM initial,  Prev: Certificats X.509,  Up: Configuration système

8.11 Name Service Switch
========================

Le module ‘(gnu system nss)’ fournit des liaisons pour le fichier de
configuration du “name service switch” ou “NSS” de la libc (*note
(libc)NSS Configuration File::). En résumé, NSS est un mécanisme qui
permet à la libc d’être étendue avec de nouvelles méthodes de résolution
de « noms » dans les bases de données du système, comme les noms
d’hôtes, les noms des services, les comptes utilisateurs et bien plus
(*note System Databases and Name Service Switch: (libc)Name Service
Switch.).

   La configuration de NSS spécifie, pour chaque base de données du
système, quelle méthode de résolution utiliser, et comment les diverses
méthodes sont enchaînées — par exemple, sous certaines circonstances,
NSS devrait essayer la méthode suivante de la liste. La configuration de
NSS est donnée dans le champ ‘name-service-switch’ de la déclaration
‘operating-system’ (*note ‘name-service-switch’: Référence de système
d'exploitation.).

   As an example, the declaration below configures the NSS to use the
‘nss-mdns’ back-end (https://0pointer.de/lennart/projects/nss-mdns/),
which supports host name lookups over multicast DNS (mDNS) for host
names ending in ‘.local’:

     (name-service-switch
        (hosts (list %files    ;first, check /etc/hosts

                     ;; Si ce qui précède n'a pas fonctionné, essayer
                     ;; avec « mdns_minimal ».
                     (name-service
                       (name "mdns_minimal")

                       ;; « mdns_minimal » fait autorité pour
                       ;; « .local ».  Lorsqu'il renvoie « pas trouvé »,
                       ;; inutile d'essayer la méthode suivante.
                       (reaction (lookup-specification
                                  (not-found => return))))

                     ;; Puis revenir sur DNS.
                     (name-service
                       (name "dns"))

                     ;; Enfin, essayer avec « mdns complet ».
                     (name-service
                       (name "mdns")))))

   Ne vous inquiétez pas : la variable ‘%mdns-host-lookup-nss’ (voir
plus bas) contient cette configuration, donc vous n’avez pas besoin de
tout taper si vous voulez simplement que la résolution de nom en
‘.local’ fonctionne.

   Note that, in this case, in addition to setting the
‘name-service-switch’ of the ‘operating-system’ declaration, you also
need to use ‘avahi-service-type’ (*note ‘avahi-service-type’: Services
réseau.), or ‘%desktop-services’, which includes it (*note Services de
bureaux::). Doing this makes ‘nss-mdns’ accessible to the name service
cache daemon (*note ‘nscd-service’: Services de base.).

   Pour votre confort, les variables suivantes contiennent des
configurations NSS typiques.

 -- Variable Scheme : %default-nss
     C’est la configuration NSS par défaut, un objet
     ‘name-service-switch’.

 -- Variable Scheme : %mdns-host-lookup-nss
     C’est la configuration NSS avec le support de la résolution de noms
     sur DNS multicast (mDNS) pour les noms d’hôtes en ‘.local’.

   La référence pour la configuration de NSS est donnée ci-dessous.
C’est une correspondance directe avec le format de fichier de la
bibliothèque C, donc référez-vous au manuel de la bibliothèque C pour
plus d’informations (*note (libc)NSS Configuration File::). Comparé au
format de fichier de configuration de NSS, cette configuration a
l’avantage non seulement d’ajouter ces bonnes vieilles parenthèses, mais
aussi des vérifications statiques ; vous saurez s’il y a des erreurs de
syntaxe et des coquilles dès que vous lancerez ‘guix system’.

 -- Type de données : name-service-switch

     C’est le type de données représentant la configuration de NSS.
     Chaque champ ci-dessous représente l’un des système de bases de
     données supportés.

     ‘aliases’
     ‘ethers’
     ‘group’
     ‘gshadow’
     ‘hosts’
     ‘initgroups’
     ‘netgroup’
     ‘networks’
     ‘password’
     ‘public-key’
     ‘rpc’
     ‘services’
     ‘shadow’
          Les bases de données du système gérées par NSS. Chaque champ
          doit être une liste d’objets ‘<name-service>’ (voir plus bas).

 -- Type de données : name-service

     C’est le type de données représentant un service de noms et
     l’action de résolution associée.

     ‘name’
          Une chaîne dénotant le service de nom (*note (libc)Services in
          the NSS configuration::).

          Remarquez que les services de dnoms listés ici doivent être
          visibles à nscd. Cela se fait en passant la liste des paquets
          fournissant les services de noms à l’argument
          ‘#:name-services’ de ‘nscd-service’ (*note ‘nscd-service’:
          Services de base.).

     ‘reaction’
          Une action spécifiée par la macro ‘lookup-specification’
          (*note (libc)Actions in the NSS configuration::). Par exemple
          :

               (lookup-specification (unavailable => continue)
                                     (success => return))


File: guix.fr.info,  Node: Disque de RAM initial,  Next: Configuration du chargeur d'amorçage,  Prev: Name Service Switch,  Up: Configuration système

8.12 Disque de RAM initial
==========================

Pour le démarrage, on passe au noyau Linux-Libre un “disque de RAM
initial” ou “initrd”. Un initrd contient un système de fichier racine
temporaire ainsi qu’un script d’initialisation. Ce dernier est
responsable du montage du vrai système de fichier racine et du
chargement des modules du noyau qui peuvent être nécessaires à cette
tâche.

   Le champ ‘initrd-modules’ d’une déclaration ‘operating-system’ vous
permet de spécifier les modules du noyau Linux-Libre qui doivent être
disponibles dans l’initrd. En particulier, c’est là où vous devez lister
les modules requis pour effectivement piloter le disque dur où se trouve
la partition racine — bien que la valeur par défaut de ‘initrd-modules’
couvre la plupart des cas. Par exemple, en supposant que vous ayez
besoin du module ‘megaraid_sas’ en plus des modules par défaut pour
accéder à votre système de fichiers racine, vous écririez :

     (operating-system
       ;; ...
       (initrd-modules (cons "megaraid_sas" %base-initrd-modules)))

 -- Variable Scheme : %base-initrd-modules
     C’est la liste des modules du noyau inclus dans l’initrd par
     défaut.

   En plus, si vous avez besoin de paramétrages plus bas niveau, le
champ ‘initrd’ d’une déclaration ‘operating-system’ vous permet de
spécifier quel initrd vous voudriez utiliser. Le module ‘(gnu system
linux-initrd)’ fournit trois manières de construire un initrd : la
procédure ‘base-initrd’ de haut niveau et les procédures ‘raw-initrd’ et
‘expression->initrd’ de bas niveau.

   La procédure ‘base-initrd’ est conçue pour couvrir la plupart des
usages courants. Par exemple, si vous voulez ajouter des modules du
noyau à charger au démarrage, vous pouvez définir le champ ‘initrd’ de
votre déclaration de système d’exploitation ainsi :

     (initrd (lambda (file-systems . rest)
               ;; Crée un initrd standard mais paramètre le réseau
               ;; avec les paramètres que QEMU attend par défaut.
               (apply base-initrd file-systems
                      #:qemu-networking? #t
                      rest)))

   La procédure ‘base-initrd’ gère aussi les cas d’utilisation courants
qui concernent l’utilisation du système comme client QEMU, ou comme un
système « live » avec un système de fichier racine volatile.

   La procédure ‘base-initrd’ est construite à partir de la procédure
‘raw-initrd’. Contrairement à ‘base-initrd’, ‘raw-initrd’ ne fait rien à
haut-niveau, comme essayer de deviner les modules du noyau et les
paquets qui devraient être inclus dans l’initrd. Un exemple
d’utilisation de ‘raw-initrd’ serait si un utilisateur a une
configuration personnalisée du noyau Linux et que les modules du noyau
inclus par défaut par ‘base-initrd’ ne sont pas disponibles.

   Le disque de RAM initial produit par ‘base-initrd’ ou ‘raw-initrd’
honore plusieurs options passées par la ligne de commande du noyau Linux
(c’est-à-dire les arguments passés via la commande ‘linux’ de GRUB ou
l’option ‘-append’ de QEMU), notamment :

‘--load=BOOT’
     Dit au disque de RAM initial de charger BOOT, un fichier contenant
     un programme Scheme, une fois qu’il a monté le système de fichier
     racine.

     Guix utilise cette option pour donner le contrôle à un programme de
     démarrage qui lance les programmes d’activation de services puis
     démarre le GNU Shepherd, le système d’initialisation.

‘--root=ROOT’
     Mount ROOT as the root file system. ROOT can be a device name like
     ‘/dev/sda1’, a file system label, or a file system UUID. When
     unspecified, the device name from the root file system of the
     operating system declaration is used.

‘--system=SYSTÈME’
     S’assure que ‘/run/booted-system’ et ‘/run/current-system’ pointent
     vers SYSTEM.

‘modprobe.blacklist=MODULES...’
     Dit au disque de RAM initial ainsi qu’à la commande ‘modprobe’ (du
     paquet kmod) de refuser de charger MODULES. MODULES doit être une
     liste de noms de modules séparés par des virgules — p. ex.
     ‘usbkbd,9pnet’.

‘--repl’
     Démarre une boucle lecture-évaluation-affichage (REPL) depuis le
     disque de RAM initial avant qu’il n’essaye de charger les modules
     du noyau et de monter le système de fichiers racine. Notre équipe
     commerciale appelle cela “boot-to-Guile”. Le Schemeur en vous va
     adorer. *Note (guile)Using Guile Interactively::, pour plus
     d’information sur le REPL de Guile.

   Maintenant que vous connaissez toutes les fonctionnalités des disques
de RAM initiaux produits par ‘base-initrd’ et ‘raw-initrd’, voici
comment l’utiliser le personnalisé plus avant.

 -- Procédure Scheme : raw-initrd FILE-SYSTEMS [#:linux-modules '()]
          [#:mapped-devices '()]  [#:keyboard-layout #f]
          [#:helper-packages '()] [#:qemu-networking? #f]
          [#:volatile-root? #f] Return
     a derivation that builds a raw initrd. FILE-SYSTEMS is a list of
     file systems to be mounted by the initrd, possibly in addition to
     the root file system specified on the kernel command line via
     ‘--root’. LINUX-MODULES is a list of kernel modules to be loaded at
     boot time. MAPPED-DEVICES is a list of device mappings to realize
     before FILE-SYSTEMS are mounted (*note Périphériques mappés::).
     HELPER-PACKAGES is a list of packages to be copied in the initrd.
     It may include ‘e2fsck/static’ or other packages needed by the
     initrd to check the root file system.

     Lorsque la valeur est vraie, KEYBOARD-LAYOUT est un enregistrement
     ‘<keyboard-layout>’ dénotant la disposition du clavier désirée pour
     la console. Cela est effectuée avant que les MAPPED-DEVICES ne
     soient créés et avant que les FILE-SYSTEMS ne soient montés, de
     sorte que, si l’utilisateur au besoin de saisir une phrase de passe
     ou d’utiliser le REPL, cela arrive avec la disposition du clavier
     voulue.

     Lorsque QEMU-NETWORKING? est vrai, paramètre le réseau avec les
     paramètres QEMU standards. Lorsque VIRTIO? est vrai, charge des
     modules supplémentaires pour que l’initrd puisse être utilisé comme
     client QEMU avec les pilotes I/O para-virtualisés.

     Lorsque VOLATILE-ROOT? est vrai, le système de fichier racine est
     inscriptible mais tous les changements seront perdus.

 -- Procédure Scheme : base-initrd FILE-SYSTEMS [#:mapped-devices '()]
          [#:keyboard-layout #f]  [#:qemu-networking? #f]
     [#:volatile-root? #f]  [#:linux-modules ’()] Return as a file-like
     object a generic initrd, with kernel modules taken from LINUX.
     FILE-SYSTEMS is a list of file-systems to be mounted by the initrd,
     possibly in addition to the root file system specified on the
     kernel command line via ‘--root’. MAPPED-DEVICES is a list of
     device mappings to realize before FILE-SYSTEMS are mounted.

     Lorsque la valeur est vraie, KEYBOARD-LAYOUT est un enregistrement
     ‘<keyboard-layout>’ dénotant la disposition du clavier désirée pour
     la console. Cela est effectuée avant que les MAPPED-DEVICES ne
     soient créés et avant que les FILE-SYSTEMS ne soient montés, de
     sorte que, si l’utilisateur au besoin de saisir une phrase de passe
     ou d’utiliser le REPL, cela arrive avec la disposition du clavier
     voulue.

     QEMU-NETWORKING? et VOLATILE-ROOT? se comportent comme pour
     ‘raw-initrd’.

     L’initrd est automatiquement remplie avec tous les modules du noyau
     requis pour FILE-SYSTEMS et pour les options données. On peut
     lister des modules supplémentaires dans LINUX-MODULES. Ils seront
     ajoutés à l’initrd et chargés au démarrage dans l’ordre dans lequel
     ils apparaissent.

   Inutile de le dire, les initrds que nous produisons et utilisons
incluent une version de Guile liée statiquement, et le programme
d’initialisation est un programme Guile. Cela donne beaucoup de
flexibilité. La procédure ‘expression->initrd’ construit un tel initrd,
étant donné le programme à lancer dans cet initrd.

 -- Procédure Scheme : expression->initrd EXP [#:guile
          %guile-3.0-static-stripped] [#:name "guile-initrd"] Return as
          a
     file-like object a Linux initrd (a gzipped cpio archive) containing
     GUILE and that evaluates EXP, a G-expression, upon booting. All the
     derivations referenced by EXP are automatically copied to the
     initrd.


File: guix.fr.info,  Node: Configuration du chargeur d'amorçage,  Next: Invoquer guix system,  Prev: Disque de RAM initial,  Up: Configuration système

8.13 Configuration du chargeur d’amorçage
=========================================

Le système d’exploitation supporte plusieurs chargeurs d’amorçage. La
configuration du chargeur d’amorçage se fait avec la déclaration
‘bootloader-configuration’. Tous les champs de cette structure sont
indépendants du chargeur d’amorçage sauf un, ‘bootloader’ qui indique le
chargeur d’amorçage à configurer et à installer.

   Certains chargeurs d’amorçage ne respectent pas tous les champs de
‘bootloader-configuration’. Par exemple, le chargeur d’amorçage extlinux
ne supporte pas les thèmes et ignore donc le champ ‘theme’.

 -- Type de données : bootloader-configuration
     Le type d’une déclaration de configuration de chargeur d’amorçage.

     ‘bootloader’
          Le chargeur d’amorçage à utiliser, comme objet ‘bootloader’.
          Pour l’instant ‘grub-bootloader’, ‘grub-efi-bootloader’,
          ‘extlinux-bootloader’ et ‘u-boot-bootloader’ sont supportés.

          ‘grub-efi-bootloader’ permet de démarrer sur un système
          moderne qui utilise l’UEFI (“Unified Extensible Firmware
          Interface”). C’est ce que vous devriez utiliser si l’image
          d’installation contient un répertoire ‘/sys/firmware/efi’
          lorsque vous démarrez dessus sur votre machine.

          ‘grub-bootloader’ vous permet de démarrer en particulier sur
          des machines Intel en mode BIOS « legacy ».

          Les chargeurs d’amorçage disponibles sont décrits dans les
          modules ‘(gnu bootloader ...)’. En particulier, ‘(gnu
          bootloader u-boot)’ contient des définitions de chargeurs
          d’amorçage pour une large gamme de systèmes ARM et AArch, à
          l’aide du chargeur d’amorçage U-Boot
          (https://www.denx.de/wiki/U-Boot/)

     ‘target’
          C’est une chaîne qui dénote la cible sur laquelle installer le
          chargeur d’amorçage.

          L’interprétation dépend du chargeur d’amorçage en question.
          Pour ‘grub-bootloader’ par exemple, cela devrait être un nom
          de périphérique compris par la commande ‘installer’ du
          chargeur d’amorçage, comme ‘/dev/sda’ ou ‘(hd0)’ (*note
          (grub)Invoking grub-install::). Pour ‘grub-efi-bootloader’,
          cela devrait être le point de montage du système de fichiers
          EFI, typiquement ‘/boot/efi’.

     ‘menu-entries’ (par défaut : ‘()’)
          Une liste éventuellement vide d’objets ‘menu-entry’ (voir plus
          bas), dénotant les entrées qui doivent apparaître dans le menu
          du chargeur d’amorçage, en plus de l’entrée pour le système
          actuel et l’entrée pointant vers les générations précédentes.

     ‘default-entry’ (par défaut : ‘0’)
          L’index de l’entrée du menu de démarrage par défaut. L’index 0
          correspond au système actuel.

     ‘timeout’ (par défaut : ‘5’)
          Le nombre de secondes à attendre une entrée clavier avant de
          démarrer. Indiquez 0 pour démarre immédiatement, et -1 pour
          attendre indéfiniment.

     ‘keyboard-layout’ (par défaut : ‘#f’)
          Si c’est ‘#f’, le menu du chargeur d’amorçage (s’il y en a un)
          utilise la disposition du clavier par défaut, normalement pour
          l’anglais américain (« qwerty »).

          Sinon, cela doit être un objet ‘keyboard-layout’ (*note
          Disposition du clavier::).

               Remarque : Cette option est actuellement ignorée par les
               chargeurs d’amorçage autre que ‘grub’ et ‘grub-efi’.

     ‘theme’ (par défaut : #F)
          L’objet de thème du chargeur d’amorçage décrivant le thème
          utilisé. Si aucun thème n’est fournit, certains chargeurs
          d’amorçage peuvent utiliser un thème par défaut, c’est le cas
          de GRUB.

     ‘terminal-outputs’ (default: ‘'(gfxterm)’)
          Les terminaux de sortie utilisés par le menu de démarrage du
          chargeur d’amorçage, en tant que liste de symboles. GRUB
          accepte les valeurs ‘console’, ‘serial’, ‘serial_{0-3}’,
          ‘gfxterm’, ‘vga_text’, ‘mda_text’, ‘morse’ et ‘pkmodem’. Ce
          champ correspond à la variable GRUB ‘GRUB_TERMINAL_OUTPUT’
          (*note (grub)Simple configuration::).

     ‘terminal-inputs’ (par défaut : ‘'()’)
          Les terminaux d’entrée utilisés par le menu de démarrage du
          chargeur d’amorçage, en tant que liste de symboles. Pour GRUB,
          la valeur par défaut est le terminal natif de la plate-forme
          déterminé à l’exécution. GRUB accepte les valeurs ‘console’,
          ‘serial’, ‘serial_{0-3}’, ‘at_keyboard’ et ‘usb_keyboard’. Ce
          champ correspond à la variable GRUB ‘GRUB_TERMINAL_INPUT’
          (*note (grub)Simple configuration::).

     ‘serial-unit’ (par défaut : ‘#f’)
          L’unitié série utilisée par le chargeur d’amorçage, en tant
          qu’entier entre 0 et 3. Pour GRUB, il est choisi à l’exécution
          ; actuellement GRUB choisi 0, ce qui correspond à COM1 (*note
          (grub)Serial terminal::).

     ‘serial-speed’ (par défaut : ‘#f’)
          La vitesse de l’interface série, en tant qu’entier. Pour GRUB,
          la valeur par défaut est choisie à l’exécution ; actuellement
          GRUB choisi 9600 bps (*note (grub)Serial terminal::).

   Si vous voulez lister des entrées du menu de démarrage
supplémentaires via le champ ‘menu-entries’ ci-dessus, vous devrez les
créer avec la forme ‘menu-entry’. Par exemple, imaginons que vous
souhaitiez pouvoir démarrer sur une autre distro (c’est difficile à
concevoir !), vous pourriez alors définir une entrée du menu comme ceci
:

     (menu-entry
       (label "L'autre distro")
       (linux "/boot/old/vmlinux-2.6.32")
       (linux-arguments '("root=/dev/sda2"))
       (initrd "/boot/old/initrd"))

   Les détails suivent.

 -- Type de données : menu-entry
     Le type d’une entrée dans le menu du chargeur d’amorçage.

     ‘label’
          L’étiquette à montrer dans le menu — p. ex. ‘"GNU"’.

     ‘linux’
          L’image du noyau Linux à démarrer, par exemple :

               (file-append linux-libre "/bzImage")

          Pour GRUB, il est aussi possible de spécifier un périphérique
          explicitement dans le chemin de fichier avec la convention de
          nommage de GRUB (*note (grub)Naming convention::), par exemple
          :

               "(hd0,msdos1)/boot/vmlinuz"

          Si le périphérique est spécifié explicitement comme au-dessus,
          le champ ‘device’ est complètement ignoré.

     ‘linux-arguments’ (par défaut : ‘()’)
          La liste des arguments de la ligne de commande du noyau
          supplémentaires — p. ex. ‘("console=ttyS0")’.

     ‘initrd’
          Une G-expression ou une chaîne dénotant le nom de fichier du
          disque de RAM initial à utiliser (*note G-Expressions::).
     ‘device’ (par défaut : ‘#f’)
          Le périphérique où le noyau et l’initrd se trouvent — c.-à-d.
          pour GRUB, l’option “root” de cette entrée de menu (*note
          (grub)root::).

          Cela peut être une étiquette de système de fichiers (une
          chaîne), un UUID de système de fichiers (un vecteur d’octets,
          *note Systèmes de fichiers::) ou ‘#f’, auquel cas le chargeur
          d’amorçage recherchera le périphérique contenant le fichier
          spécifié par le champ ‘linux’ (*note (grub)search::). Cela ne
          doit _pas_ être un nom de périphérique donné par l’OS comme
          ‘/dev/sda1’.

   For now only GRUB has theme support. GRUB themes are created using
the ‘grub-theme’ form, which is not fully documented yet.

 -- Data Type : grub-theme
     Data type representing the configuration of the GRUB theme.

     ‘gfxmode’ (default: ‘'("auto")’)
          The GRUB ‘gfxmode’ to set (a list of screen resolution
          strings, see *note (grub)gfxmode::).

 -- Scheme Procedure : grub-theme
     Return the default GRUB theme used by the operating system if no
     ‘theme’ field is specified in ‘bootloader-configuration’ record.

     Il contient une image de fond sympathique avec les logos de GNU et
     de Guix.

   For example, to override the default resolution, you may use
something like

     (bootloader
      (bootloader-configuration
      ;; ...
      (theme (grub-theme
              (inherit (grub-theme))
              (gfxmode '("1024x786x32" "auto"))))))


File: guix.fr.info,  Node: Invoquer guix system,  Next: Invoking guix deploy,  Prev: Configuration du chargeur d'amorçage,  Up: Configuration système

8.14 Invoquer ‘guix system’
===========================

Une fois que vous avez écrit une déclaration de système d’exploitation
comme nous l’avons vu dans les sections précédentes, elle peut être
instanciée avec la commande ‘guix system’. Voici le résumé de la
commande :

     guix system OPTIONS... ACTION FILE

   FILE doit être le nom d’un fichier contenant une déclaration
‘operating-system’. ACTION spécifie comme le système d’exploitation est
instancié. Actuellement les valeurs suivantes sont supportées :

‘search’
     Affiche les définitions des types de services disponibles qui
     correspondent aux expressions régulières données, triées par
     pertinence :

          $ guix system search console
          name: console-fonts
          location: gnu/services/base.scm:806:2
          extends: shepherd-root
          description: Install the given fonts on the specified ttys (fonts are per
          + virtual console on GNU/Linux).  The value of this service is a list of
          + tty/font pairs.  The font can be the name of a font provided by the `kbd'
          + package or any valid argument to `setfont', as in this example:
          +
          +      '(("tty1" . "LatGrkCyr-8x16")
          +        ("tty2" . (file-append
          +                      font-tamzen
          +                      "/share/kbd/consolefonts/TamzenForPowerline10x20.psf"))
          +        ("tty3" . (file-append
          +                      font-terminus
          +                      "/share/consolefonts/ter-132n"))) ; for HDPI
          relevance: 9

          name: mingetty
          location: gnu/services/base.scm:1190:2
          extends: shepherd-root
          description: Provide console login using the `mingetty' program.
          relevance: 2

          name: login
          location: gnu/services/base.scm:860:2
          extends: pam
          description: Provide a console log-in service as specified by its
          + configuration value, a `login-configuration' object.
          relevance: 2

          ...

     Comme pour ‘guix package --search’, le résultat est écrit au format
     ‘recutils’, ce qui rend facile le filtrage de la sortie (*note GNU
     recutils databases: (recutils)Top.).

‘reconfigure’
     Construit le système d’exploitation décrit dans FILE, l’active et
     passe dessus(1).

          Remarque : Il est grandement recommandé de lancer ‘guix pull’
          une fois avant de lancer ‘guix system reconfigure’ pour la
          première fois (*note Invoquer guix pull::). Sans cela, vous
          verriez une version plus ancienne de Guix une fois
          ‘reconfigure’ terminé.

     Cela met en application toute la configuration spécifiée dans FILE
     : les comptes utilisateurs, les services du système, la liste
     globale des paquets, les programmes setuid, etc. La commande
     démarre les services systèmes spécifiés dans FILE qui ne sont pas
     actuellement lancés ; si un service est actuellement exécuté cette
     commande s’arrange pour qu’il soit mis à jour la prochaine fois
     qu’il est stoppé (p. ex par ‘herd stop X’ ou ‘herd restart X’).

     Cette commande crée une nouvelle génération dont le numéro est un
     de plus que la génération actuelle (rapportée par ‘guix system
     list-generations’). Si cette génération existe déjà, elle sera
     réécrite. Ce comportement correspond à celui de ‘guix package’
     (*note Invoquer guix package::).

     Elle ajoute aussi une entrée de menu du chargeur d’amorçage pour la
     nouvelle configuration, à moins que ‘--no-bootloader’ ne soit
     passé. Pour GRUB, elle déplace les entrées pour les anciennes
     configurations dans un sous-menu, ce qui vous permet de choisir une
     ancienne génération au démarrage si vous en avez besoin.

     Upon completion, the new system is deployed under
     ‘/run/current-system’. This directory contains “provenance
     meta-data”: the list of channels in use (*note Canaux::) and FILE
     itself, when available. This information is useful should you later
     want to inspect how this particular generation was built.

     In fact, assuming FILE is self-contained, you can later rebuild
     generation N of your operating system with:

          guix time-machine \
            -C /var/guix/profiles/system-N-link/channels.scm -- \
            system reconfigure \
            /var/guix/profiles/system-N-link/configuration.scm

     You can think of it as some sort of built-in version control! Your
     system is not just a binary artifact: _it carries its own source_.
     *Note ‘provenance-service-type’: Référence de service, for more
     information on provenance tracking.

‘switch-generation’
     Switch to an existing system generation. This action atomically
     switches the system profile to the specified system generation. It
     also rearranges the system’s existing bootloader menu entries. It
     makes the menu entry for the specified system generation the
     default, and it moves the entries for the other generations to a
     submenu, if supported by the bootloader being used. The next time
     the system boots, it will use the specified system generation.

     Le chargeur d’amorçage lui-même n’est pas réinstallé avec cette
     commande. Ainsi, le chargeur d’amorçage est utilisé avec un fichier
     de configuration plus à jour.

     La génération cible peut être spécifiée explicitement par son
     numéro de génération. Par exemple, l’invocation suivante passerait
     à la génération 7 du système :

          guix system switch-generation 7

     La génération cible peut aussi être spécifiée relativement à la
     génération actuelle avec la forme ‘+N’ ou ‘-N’, où ‘+3’ signifie «
     trois générations après la génération actuelle » et ‘-1’ signifie «
     une génération précédent la génération actuelle ». Lorsque vous
     spécifiez un nombre négatif comme ‘-1’, il doit être précédé de
     ‘--’ pour éviter qu’il ne soit compris comme une option. Par
     exemple :

          guix system switch-generation -- -1

     Actuellement, l’effet de l’invocation de cette action est
     _uniquement_ de passer au profil du système vers une autre
     génération existante et de réarranger le menu du chargeur
     d’amorçage. Pour vraiment commencer à utiliser la génération
     spécifiée, vous devez redémarrer après avoir lancé cette action.
     Dans le futur, elle sera corrigée pour faire la même chose que
     ‘reconfigure’, comme réactiver et désactiver les services.

     Cette action échouera si la génération spécifiée n’existe pas.

‘roll-back’
     Passe à la génération précédente du système. Au prochain démarrage,
     la génération précédente sera utilisée. C’est le contraire de
     ‘reconfigure’, et c’est exactement comme invoquer
     ‘switch-generation’ avec pour argument ‘-1’.

     Actuellement, comme pour ‘switch-generation’, vous devez redémarrer
     après avoir lancé cette action pour vraiment démarrer sur la
     génération précédente du système.

‘delete-generations’
     Supprimer des générations du système, ce qui les rend disponibles
     pour le ramasse-miettes (*note Invoquer guix gc::, pour des
     informations sur la manière de lancer le « ramasse-miettes »).

     This works in the same way as ‘guix package --delete-generations’
     (*note ‘--delete-generations’: Invoquer guix package.). With no
     arguments, all system generations but the current one are deleted:

          guix system delete-generations

     Vous pouvez aussi choisir les générations que vous voulez
     supprimer. L’exemple plus bas supprime toutes les génération du
     système plus vieilles que deux mois :

          guix system delete-generations 2m

     Lancer cette commande réinstalle automatiquement le chargeur
     d’amorçage avec une liste à jour d’entrées de menu — p. ex. le
     sous-menu « anciennes générations » dans GRUB ne liste plus les
     générations qui ont été supprimées.

‘build’
     Construit la dérivation du système d’exploitation, ce qui comprend
     tous les fichiers de configuration et les programmes requis pour
     démarrer et lancer le système. Cette action n’installe rien.

‘init’
     Rempli le répertoire donné avec tous les fichiers nécessaires à
     lancer le système d’exploitation spécifié dans FILE. C’est utile
     pour la première installation de Guix System. Par exemple :

          guix system init my-os-config.scm /mnt

     copie tous les éléments du dépôt requis par la configuration
     spécifiée dans ‘my-os-config.scm’ dans ‘/mnt’. Cela comprend les
     fichiers de configuration, les paquets, etc. Elle crée aussi
     d’autres fichiers essentiels requis pour que le système fonctionne
     correctement — p. ex. les répertoires ‘/etc’, ‘/var’ et ‘/run’ et
     le fichier ‘/bin/sh’.

     Cette commande installe aussi le chargeur d’amorçage sur la cible
     spécifiée dans ‘my-os-config’, à moins que l’option
     ‘--no-bootloader’ ne soit passée.

‘vm’
     Construit une machine virtuelle qui contient le système
     d’exploitation déclaré dans FILE et renvoie un script pour lancer
     cette machine virtuelle (VM).

          Remarque : Les actions ‘vm’ et les autres plus bas peuvent
          utiliser la prise en charge KVM du noyau Linux-libre. Plus
          spécifiquement, si la machine prend en charge la
          virtualisation matérielle, le module noyau KVM correspondant
          devrait être chargé, et le nœud de périphérique ‘/dev/kvm’
          devrait exister et être lisible et inscriptible pour
          l’utilisateur et pour les utilisateurs de construction du
          démon (*note Réglages de l'environnement de construction::).

     Les arguments passés au script sont passés à QEMU comme dans
     l’exemple ci-dessous, qui active le réseau et demande 1 Go de RAM
     pour la machine émulée :

          $ /gnu/store/...-run-vm.sh -m 1024 -smp 2 -net user,model=virtio-net-pci

     La VM partage sont dépôt avec le système hôte.

     Additional file systems can be shared between the host and the VM
     using the ‘--share’ and ‘--expose’ command-line options: the former
     specifies a directory to be shared with write access, while the
     latter provides read-only access to the shared directory.

     L’exemple ci-dessous crée une VM dans laquelle le répertoire
     personnel de l’utilisateur est accessible en lecture-seule, et où
     le répertoire ‘/exchange’ est une correspondance en
     lecture-écriture à ‘$HOME/tmp’ sur l’hôte :

          guix system vm my-config.scm \
             --expose=$HOME --share=$HOME/tmp=/exchange

     Sur GNU/Linux, le comportement par défaut consiste à démarrer
     directement sur le noyau ; cela a l’avantage de n’avoir besoin que
     d’une toute petite image disque puisque le dépôt de l’hôte peut
     ensuite être monté.

     The ‘--full-boot’ option forces a complete boot sequence, starting
     with the bootloader. This requires more disk space since a root
     image containing at least the kernel, initrd, and bootloader data
     files must be created. The ‘--image-size’ option can be used to
     specify the size of the image.

‘vm-image’
‘disk-image’
‘docker-image’
     Renvoie une machine virtuelle, une image disque ou une image Docker
     du système d’exploitation déclaré dans FILE qui se suffit à
     elle-même. Par défaut, ‘guix system’ estime la taille de l’image
     requise pour stocker le système, mais vous pouvez utiliser l’option
     ‘--image-size’ pour spécifier une valeur. Les images Docker sont
     construites pour contenir exactement ce dont elles ont besoin, donc
     l’option ‘--image-size’ est ignorée dans le cas de ‘docker-image’.

     Vous pouvez spécifier le type de système de fichiers racine avec
     l’option ‘--file-system-type’. La valeur par défaut est ‘ext4’.

     Lorsque vous utilisez ‘vm-image’, l’image renvoyée est au format
     qcow2, que l’émulateur QEMU peut utiliser efficacement. *Note
     Lancer Guix dans une VM::, pour plus d’informations sur la manière
     de lancer l’image dans une machine virtuelle.

     Lorsque vous utilisez ‘disk-image’, une image disque brute est
     produite ; elle peut être copiée telle quelle sur un périphérique
     USB. En supposant que ‘/dev/sdc’ est le périphérique correspondant
     à une clef USB, on peut copier l’image dessus avec la commande
     suivante :

          # dd if=$(guix system disk-image my-os.scm) of=/dev/sdc

     En utilisant ‘docker-image’, on produit une image Docker. Guix
     construit l’image de zéro, et non à partir d’une image Docker de
     base pré-existante. En conséquence, elle contient _exactly_ ce que
     vous avez défini dans le fichier de configuration du système. Vous
     pouvez ensuite charger l’image et lancer un conteneur Docker avec
     des commande comme :

          image_id="`docker load < guix-system-docker-image.tar.gz`"
          container_id="`docker create $image_id`"
          docker start $container_id

     This command starts a new Docker container from the specified
     image. It will boot the Guix system in the usual manner, which
     means it will start any services you have defined in the operating
     system configuration. You can get an interactive shell running in
     the container using ‘docker exec’:

          docker exec -ti $container_id /run/current-system/profile/bin/bash --login

     Depending on what you run in the Docker container, it may be
     necessary to give the container additional permissions. For
     example, if you intend to build software using Guix inside of the
     Docker container, you may need to pass the ‘--privileged’ option to
     ‘docker create’.

     Last, the ‘--network’ option applies to ‘guix system docker-image’:
     it produces an image where network is supposedly shared with the
     host, and thus without services like nscd or NetworkManager.

‘conteneur’
     Renvoie un script qui lance le système d’exploitation déclaré dans
     FILE dans un conteneur. Les conteneurs sont un ensemble de
     mécanismes d’isolation légers fournis par le noyau Linux-libre. Les
     conteneurs sont substantiellement moins gourmands en ressources que
     les machines virtuelles complètes car le noyau, les objets partagés
     et d’autres ressources peuvent être partagés avec le système hôte ;
     cela signifie aussi une isolation moins complète.

     Actuellement, le script doit être lancé en root pour pouvoir
     supporter plus d’un utilisateur et d’un groupe. Le conteneur
     partage son dépôt avec le système hôte.

     Comme avec l’action ‘vm’ (*note guix system vm::), des systèmes de
     fichiers supplémentaires peuvent être partagés entre l’hôte et le
     conteneur avec les options ‘--share’ et ‘--expose’ :

          guix system container my-config.scm \
             --expose=$HOME --share=$HOME/tmp=/exchange

          Remarque : Cette option requiert Linux-libre ou supérieur.

   OPTIONS peut contenir n’importe quelle option commune de construction
(*note Options de construction communes::). En plus, OPTIONS peut
contenir l’une de ces options :

‘--expression=EXPR’
‘-e EXPR’
     Considère le système d’exploitation en lequel s’évalue EXPR. C’est
     une alternative à la spécification d’un fichier qui s’évalue en un
     système d’exploitation. C’est utilisé pour générer l’installateur
     du système Guix (*note Construire l'image d'installation::).

‘--system=SYSTÈME’
‘-s SYSTÈME’
     Essaye de construire pour SYSTEM au lieu du type du système hôte.
     Cela fonction comme pour ‘guix build’ (*note Invoquer guix
     build::).

‘--derivation’
‘-d’
     Renvoie le nom du fichier de dérivation du système d’exploitation
     donné sans rien construire.

‘--save-provenance’
     As discussed above, ‘guix system init’ and ‘guix system
     reconfigure’ always save provenance information via a dedicated
     service (*note ‘provenance-service-type’: Référence de service.).
     However, other commands don’t do that by default. If you wish to,
     say, create a virtual machine image that contains provenance
     information, you can run:

          guix system vm-image --save-provenance config.scm

     That way, the resulting image will effectively “embed its own
     source” in the form of meta-data in ‘/run/current-system’. With
     that information, one can rebuild the image to make sure it really
     contains what it pretends to contain; or they could use that to
     derive a variant of the image.

‘--file-system-type=TYPE’
‘-t TYPE’
     Pour l’action ‘disk-image’, crée un système de fichier du TYPE
     donné sur l’image.

     Lorsque cette option est omise, ‘guix system’ utilise ‘ext4’.

     ‘--file-system-type=iso9660’ produces an ISO-9660 image, suitable
     for burning on CDs and DVDs.

‘--image-size=SIZE’
     Pour les actions ‘vm-image’ et ‘disk-image’, crée une image de la
     taille donnée SIZE. SIZE peut être un nombre d’octets ou contenir
     un suffixe d’unité (*note size specifications: (coreutils)Block
     size.).

     Lorsque cette option est omise, ‘guix system’ calcule une
     estimation de la taille de l’image en fonction de la taille du
     système déclaré dans FILE.

‘--network’
‘-N’
     For the ‘container’ action, allow containers to access the host
     network, that is, do not create a network namespace.

‘--root=FICHIER’
‘-r FICHIER’
     Fait de FICHIER un lien symbolique vers le résultat, et
     l’enregistre en tant que racine du ramasse-miettes.

‘--skip-checks’
     Passe les vérifications de sécurité avant l’installation.

     Par défaut, ‘guix system init’ et ‘guix system reconfigure’
     effectuent des vérifications de sécurité : ils s’assurent que les
     systèmes de fichiers qui apparaissent dans la déclaration
     ‘operating-system’ existent vraiment (*note Systèmes de fichiers::)
     et que les modules de noyau Linux qui peuvent être requis au
     démarrage sont listés dans ‘initrd-modules’ (*note Disque de RAM
     initial::). Passer cette option saute ces vérifications
     complètement.

‘--on-error=STRATEGY’
     Applique STRATEGY lorsqu’une erreur arrive lors de la lecture de
     FILE. STRATEGY peut être l’une des valeurs suivantes :

     ‘nothing-special’
          Rapporte l’erreur de manière concise et quitte. C’est la
          stratégie par défaut.

     ‘backtrace’
          Pareil, mais affiche aussi une trace de débogage.

     ‘debug’
          Rapporte l’erreur et entre dans le débogueur Guile. À partir
          de là, vous pouvez lancer des commandes comme ‘,bt’ pour
          obtenir une trace de débogage, ‘,locals’ pour afficher les
          valeurs des variables locales et plus généralement inspecter
          l’état du programme. *Note (guile)Debug Commands::, pour une
          liste de commandes de débogage disponibles.

   Une fois que vous avez construit, re-configuré et re-re-configuré
votre installation Guix, vous pourriez trouver utile de lister les
générations du système disponibles sur le disque — et que vous pouvez
choisir dans le menu du chargeur d’amorçage :

‘describe’
     Describe the current system generation: its file name, the kernel
     and bootloader used, etc., as well as provenance information when
     available.

‘list-generations’
     Affiche un résumé de chaque génération du système d’exploitation
     disponible sur le disque, dans un format lisible pour un humain.
     C’est similaire à l’option ‘--list-generations’ de ‘guix package’
     (*note Invoquer guix package::).

     Éventuellement, on peut spécifier un motif, avec la même syntaxe
     utilisée pour ‘guix package --list-generations’, pour restreindre
     la liste des générations affichées. Par exemple, la commande
     suivante affiche les générations de moins de 10 jours :

          $ guix system list-generations 10d

   La commande ‘guix system’ a même plus à proposer ! Les sous-commandes
suivantes vous permettent de visualiser comme vos services systèmes sont
liés les uns aux autres :

‘extension-graph’
     Emit in Dot/Graphviz format to standard output the “service
     extension graph” of the operating system defined in FILE (*note
     Composition de services::, for more information on service
     extensions).

     La commande :

          $ guix system extension-graph FILE | xdot -

     shows the extension relations among services.

‘shepherd-graph’
     Affiche le “graphe de dépendance” des services shepherd du système
     d’exploitation défini dans FILE au format Dot/Graphviz sur la
     sortie standard. *Note Services Shepherd::, pour plus
     d’informations et un exemple de graphe.

   ---------- Footnotes ----------

   (1) Cette action (et les action liées que sont ‘switch-generation’ et
‘roll-back’) ne sont utilisables que sur les systèmes sous Guix System.


File: guix.fr.info,  Node: Invoking guix deploy,  Next: Lancer Guix dans une VM,  Prev: Invoquer guix system,  Up: Configuration système

8.15 Invoking ‘guix deploy’
===========================

We’ve already seen ‘operating-system’ declarations used to manage a
machine’s configuration locally. Suppose you need to configure multiple
machines, though—perhaps you’re managing a service on the web that’s
comprised of several servers. ‘guix deploy’ enables you to use those
same ‘operating-system’ declarations to manage multiple remote hosts at
once as a logical “deployment”.

     Remarque : The functionality described in this section is still
     under development and is subject to change. Get in touch with us on
     <guix-devel@gnu.org>!

     guix deploy FILE

   Such an invocation will deploy the machines that the code within FILE
evaluates to. As an example, FILE might contain a definition like this:

     ;; This is a Guix deployment of a "bare bones" setup, with
     ;; no X11 display server, to a machine with an SSH daemon
     ;; listening on localhost:2222. A configuration such as this
     ;; may be appropriate for virtual machine with ports
     ;; forwarded to the host's loopback interface.

     (use-service-modules networking ssh)
     (use-package-modules bootloaders)

     (define %system
       (operating-system
        (host-name "gnu-deployed")
        (timezone "Etc/UTC")
        (bootloader (bootloader-configuration
                     (bootloader grub-bootloader)
                     (target "/dev/vda")
                     (terminal-outputs '(console))))
        (file-systems (cons (file-system
                             (mount-point "/")
                             (device "/dev/vda1")
                             (type "ext4"))
                            %base-file-systems))
        (services
         (append (list (service dhcp-client-service-type)
                       (service openssh-service-type
                                (openssh-configuration
                                 (permit-root-login #t)
                                 (allow-empty-passwords? #t))))
                 %base-services))))

     (list (machine
            (operating-system %system)
            (environment managed-host-environment-type)
            (configuration (machine-ssh-configuration
                            (host-name "localhost")
                            (system "x86_64-linux")
                            (user "alice")
                            (identity "./id_rsa")
                            (port 2222)))))

   The file should evaluate to a list of MACHINE objects. This example,
upon being deployed, will create a new generation on the remote system
realizing the ‘operating-system’ declaration ‘%system’. ‘environment’
and ‘configuration’ specify how the machine should be provisioned—that
is, how the computing resources should be created and managed. The above
example does not create any resources, as a ‘'managed-host’ is a machine
that is already running the Guix system and available over the network.
This is a particularly simple case; a more complex deployment may
involve, for example, starting virtual machines through a Virtual
Private Server (VPS) provider. In such a case, a different ENVIRONMENT
type would be used.

   Do note that you first need to generate a key pair on the coordinator
machine to allow the daemon to export signed archives of files from the
store (*note Invoquer guix archive::).

     # guix archive --generate-key

Each target machine must authorize the key of the master machine so that
it accepts store items it receives from the coordinator:

     # guix archive --authorize < coordinator-public-key.txt

   ‘user’, in this example, specifies the name of the user account to
log in as to perform the deployment. Its default value is ‘root’, but
root login over SSH may be forbidden in some cases. To work around this,
‘guix deploy’ can log in as an unprivileged user and employ ‘sudo’ to
escalate privileges. This will only work if ‘sudo’ is currently
installed on the remote and can be invoked non-interactively as ‘user’.
That is, the line in ‘sudoers’ granting ‘user’ the ability to use ‘sudo’
must contain the ‘NOPASSWD’ tag. This can be accomplished with the
following operating system configuration snippet:

     (use-modules ...
                  (gnu system))               ;for %sudoers-specification

     (define %user "username")

     (operating-system
       ...
       (sudoers-file
          (plain-file "sudoers"
                      (string-append (plain-file-content %sudoers-specification)
                                     (format #f "~a ALL = NOPASSWD: ALL~%"
                                             %user)))))


   For more information regarding the format of the ‘sudoers’ file,
consult ‘man sudoers’.

 -- Data Type : machine
     This is the data type representing a single machine in a
     heterogeneous Guix deployment.

     ‘operating-system’
          The object of the operating system configuration to deploy.

     ‘environment’
          An ‘environment-type’ describing how the machine should be
          provisioned.

     ‘configuration’ (default: ‘#f’)
          An object describing the configuration for the machine’s
          ‘environment’. If the ‘environment’ has a default
          configuration, ‘#f’ may be used. If ‘#f’ is used for an
          environment with no default configuration, however, an error
          will be thrown.

 -- Data Type : machine-ssh-configuration
     This is the data type representing the SSH client parameters for a
     machine with an ‘environment’ of ‘managed-host-environment-type’.

     ‘host-name’
     ‘build-locally?’ (default: ‘#t’)
          If false, system derivations will be built on the machine
          being deployed to.
     ‘system’
          The system type describing the architecture of the machine
          being deployed to—e.g., ‘"x86_64-linux"’.
     ‘authorize?’ (default: ‘#t’)
          If true, the coordinator’s signing key will be added to the
          remote’s ACL keyring.
     ‘port’ (par défaut : ‘22’)
     ‘user’ (default: ‘"root"’)
     ‘identity’ (default: ‘#f’)
          If specified, the path to the SSH private key to use to
          authenticate with the remote host.

     ‘host-key’ (default: ‘#f’)
          This should be the SSH host key of the machine, which looks
          like this:

               ssh-ed25519 AAAAC3Nz... root@example.org

          When ‘host-key’ is ‘#f’, the server is authenticated against
          the ‘~/.ssh/known_hosts’ file, just like the OpenSSH ‘ssh’
          client does.

 -- Data Type : digital-ocean-configuration
     This is the data type describing the Droplet that should be created
     for a machine with an ‘environment’ of
     ‘digital-ocean-environment-type’.

     ‘ssh-key’
          The path to the SSH private key to use to authenticate with
          the remote host. In the future, this field may not exist.
     ‘tags’
          A list of string “tags” that uniquely identify the machine.
          Must be given such that no two machines in the deployment have
          the same set of tags.
     ‘region’
          A Digital Ocean region slug, such as ‘"nyc3"’.
     ‘taille’
          A Digital Ocean size slug, such as ‘"s-1vcpu-1gb"’
     ‘enable-ipv6?’
          Whether or not the droplet should be created with IPv6
          networking.


File: guix.fr.info,  Node: Lancer Guix dans une VM,  Next: Définir des services,  Prev: Invoking guix deploy,  Up: Configuration système

8.16 Exécuter Guix sur une machine virtuelle
============================================

Pour exécuter Guix sur une machine virtuelle (VM), on peut soit utiliser
l’image de VM Guix pré-construite sur
‘https://ftp.gnu.org/gnu/guix/guix-system-vm-image-1.0.1.17089-7e269.x86_64-linux.xz’
. Cette image est une image compressée au format QCOW. Vous devrez
d’abord la décompresser avec ‘xz -d’ puis la passer à un émulateur comme
QEMU (voir plus bas pour des détails).

   This image boots the Xfce graphical environment and it contains some
commonly-used tools. You can install more software in the image by
running ‘guix package’ in a terminal (*note Invoquer guix package::).
You can also reconfigure the system based on its initial configuration
file available as ‘/run/current-system/configuration.scm’ (*note
Utiliser le système de configuration::).

   Au lieu d’utiliser cette image pré-construite, on peut construire sa
propre image de machine virtuelle avec ‘guix system vm-image’ (*note
Invoquer guix system::). L’image renvoyée est au format qcow2, que
l’émulateur QEMU (https://qemu.org/) peut utiliser efficacement.

   Si vous construisez votre propre image, vous devez la copier en
dehors du dépôt (*note Le dépôt::) et vous donner la permission d’écrire
sur la copie avant de pouvoir l’utiliser. Lorsque vous invoquez QEMU,
vous devez choisir un émulateur système correspondant à votre
plate-forme matérielle. Voici une invocation minimale de QEMU qui
démarrera le résultat de ‘guix system vm-image’ sur un matériel x8_64 :

     $ qemu-system-x86_64 \
        -nic user,model=virtio-net-pci \
        -enable-kvm -m 1024 \
        -device virtio-blk,drive=myhd \
        -drive if=none,file=/tmp/qemu-image,id=myhd

   Voici la signification de ces options :

‘qemu-system-x86_64’
     Cela spécifie la plate-forme matérielle à émuler. Elle doit
     correspondre à l’hôte.

‘-nic user,model=virtio-net-pci’
     Enable the unprivileged user-mode network stack. The guest OS can
     access the host but not vice versa. This is the simplest way to get
     the guest OS online. ‘model’ specifies which network device to
     emulate: ‘virtio-net-pci’ is a special device made for virtualized
     operating systems and recommended for most uses. Assuming your
     hardware platform is x86_64, you can get a list of available NIC
     models by running ‘qemu-system-x86_64 -nic model=help’.

‘-enable-kvm’
     Si votre système a des extensions de virtualisation matérielle,
     activer le support des machines virtuelles de Linux (KVM)
     accélérera les choses.

‘-m 1024’
     RAM disponible sur l’OS émulé, en mébioctets. La valeur par défaut
     est 128 Mo, ce qui peut ne pas suffire pour certaines opérations.

‘-device virtio-blk,drive=myhd’
     Crée un lecteur ‘virtio-blk’ nommé « myhd ». ‘virtio-blk’ est un
     mécanisme de « paravirtualisation » pour les périphériques blocs
     qui permet à QEMU d’avoir de meilleures performances que s’il
     émulait un disque complet. Voir la documentation de QEMU et KVM
     pour plus d’info.

‘-drive if=none,file=/tmp/qemu-image,id=myhd’
     Utilise notre image QCOW, le fichier ‘/tmp/qemu-image’, comme
     stockage pour le lecteur « myhd ».

   The default ‘run-vm.sh’ script that is returned by an invocation of
‘guix system vm’ does not add a ‘-nic user’ flag by default. To get
network access from within the vm add the ‘(dhcp-client-service)’ to
your system definition and start the VM using ‘`guix system vm
config.scm` -nic user’. An important caveat of using ‘-nic user’ for
networking is that ‘ping’ will not work, because it uses the ICMP
protocol. You’ll have to use a different command to check for network
connectivity, for example ‘guix download’.

8.16.1 Se connecter par SSH
---------------------------

Pour activer SSH dans une VM vous devez ajouter un serveur SSH comme
‘opennssh-service-type’ à votre VM (*note ‘openssh-service-type’:
Services réseau.). En plus vous devez transférer le port 22, par défaut,
à l’hôte. Vous pouvez faire cela avec

     `guix system vm config.scm` -nic user,model=virtio-net-pci,hostfwd=tcp::10022-:22

   Pour vous connecter à la VM vous pouvez lancer

     ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 10022

   Le ‘-p’ donne le port auquel vous voulez vous connecter à ‘ssh’, ‘-o
UserKnownHostsFile=/dev/null’ évite que ‘ssh’ ne se plaigne à chaque
fois que vous modifiez le fichier ‘config.scm’ et ‘-o
StrictHostKeyChecking=no’ évite que vous n’ayez à autoriser une
connexion à un hôte inconnu à chaque fois que vous vous connectez.

8.16.2 Utiliser ‘virt-viewer’ avec Spice
----------------------------------------

Alternativement au client graphique ‘qemu’ par défaut vous pouvez
utiliser ‘remote-viewer’ du paquet ‘virt-viewer’. Pour vous connecter,
passez le drapeau ‘-spice port=5930,disable-ticketing’ à ‘qemu’. Voir
les sections précédentes pour plus d’informations sur comment faire
cela.

   Spice a aussi de chouettes fonctionnalités comme le partage de votre
presse-papier avec la VM. Pour activer cela vous devrez aussi passer les
drapeaux suivants à ‘qemu’ :

     -device virtio-serial-pci,id=virtio-serial0,max_ports=16,bus=pci.0,addr=0x5
     -chardev spicevmc,name=vdagent,id=vdagent
     -device virtserialport,nr=1,bus=virtio-serial0.0,chardev=vdagent,
     name=com.redhat.spice.0

   You’ll also need to add the ‘(spice-vdagent-service)’ to your system
definition (*note Spice service: Services divers.).


File: guix.fr.info,  Node: Définir des services,  Prev: Lancer Guix dans une VM,  Up: Configuration système

8.17 Définir des services
=========================

Les sections précédentes montrent les services disponibles et comment on
peut les combiner dans une déclaration ‘operating-system’. Mais, déjà,
comment les définir ? Et qu’est-ce qu’un service au fait ?

* Menu:

* Composition de services::  Le modèle de composition des services.
* Types service et services::  Types et services.
* Référence de service::   Référence de l’API.
* Services Shepherd::        Un type de service particulier.


File: guix.fr.info,  Node: Composition de services,  Next: Types service et services,  Up: Définir des services

8.17.1 Composition de services
------------------------------

Ici nous définissons un “service” comme étant, assez largement, quelque
chose qui étend la fonctionnalité d’un système d’exploitation. Souvent
un service est un processus — un “démon” — démarré lorsque le système
démarre : un serveur ssh, un serveur web, le démon de construction de
Guix, etc. Parfois un service est un démon dont l’exécution peut être
déclenchée par un autre démon — p. ex. un serveur FTP démarré par
‘inetd’ ou un service D-Bus activé par ‘dbus-daemon’. Parfois, un
service ne correspond pas à un démon. Par exemple, le service « de
comptes » récupère la liste des comptes utilisateurs et s’assure qu’ils
existent bien lorsque le système est lancé ; le service « udev »
récupère les règles de gestion des périphériques et les rend disponible
au démon eudev ; le service ‘/etc’ rempli le répertoire ‘/etc’ du
système.

   Les services de Guix sont connectés par des “extensions”. Par
exemple, le service ssh “étend” le Shepherd — le système
d’initialisation de GuixSD, qui tourne en tant que PID 1 — en lui
donnant les lignes de commande pour démarrer et arrêter le démon ssh
(*note ‘lsh-service’: Services réseau.) ; le service UPower étend le
service D-Bus en lui passant sa spécification ‘.service’ et étend le
service udev en lui passant des règles de gestion de périphériques
(*note ‘upower-service’: Services de bureaux.) ; le démon Guix étend le
Shepherd en lui passant les lignes de commande pour démarrer et arrêter
le démon et étend le service de comptes en lui passant une liste des
comptes utilisateurs de constructions requis (*note Services de base::).

   En définitive, les services et leurs relation « d’extensions »
forment un graphe orienté acyclique (DAG). Si nous représentons les
services comme des boîtes et les extensions comme des flèches, un
système typique pourrait fournir quelque chose comme cela :

[Graphe d'extension des services typique.]
   En bas, on voit le “service système” qui produit le répertoire
contenant tout et lançant et démarrant le système, renvoyé par la
commande ‘guix system build’. *Note Référence de service::, pour
apprendre les autres types de services montrés ici. *Note the ‘guix
system extension-graph’ command: system-extension-graph, pour plus
d’informations sur la manière de générer cette représentation pour une
définition de système d’exploitation particulière.

   Techniquement, on peut définir des “types de services” pour exprimer
ces relations. Il peut y avoir n’importe quel quantité de services d’un
type donné sur le système — par exemple, un système sur lequel tournent
deux instances du serveur ssh de GNU (lsh) a deux instance de
LSH-SERVICE-TYPE, avec des paramètres différents.

   La section suivante décrit l’interface de programmation des types de
services et des services.


File: guix.fr.info,  Node: Types service et services,  Next: Référence de service,  Prev: Composition de services,  Up: Définir des services

8.17.2 Types service et services
--------------------------------

Un “type de service” est un nœud dans le DAG décrit plus haut.
Commençons avec un exemple simple, le type de service pour le démon de
construction de Guix (*note Invoquer guix-daemon::) :

     (define guix-service-type
       (service-type
        (name 'guix)
        (extensions
         (list (service-extension shepherd-root-service-type guix-shepherd-service)
               (service-extension account-service-type guix-accounts)
               (service-extension activation-service-type guix-activation)))
        (default-value (guix-configuration))))

Il définit trois choses :

  1. Un nom, dont le seul but de rendre l’inspection et le débogage plus
     faciles.

  2. Une liste d’“extensions de services”, où chaque extension désigne
     le type de service cible et une procédure qui, étant donné les
     paramètres du service, renvoie une liste d’objets pour étendre le
     service de ce type.

     Chaque type de service a au moins une extension de service. La
     seule exception est le “type de service boot”, qui est le service
     ultime.

  3. Éventuellement, une valeur par défaut pour les instances de ce
     type.

   Dans cet exemple, GUIX-SERVICE-TYPE étend trois services :

‘shepherd-root-service-type’
     La procédure GUIX-SHEPHERD-SERVICE définit comment le service du
     Shepherd est étendu. En fait, elle renvoie un objet
     ‘<shepherd-service>’ qui définit comment ‘guix-daemon’ est démarré
     et stoppé (*note Services Shepherd::).

‘account-service-type’
     Cette extension pour ce service est calculée par GUIX-ACCOUNTS, qui
     renvoie une liste d’objets ‘user-group’ et ‘user-account’
     représentant les comptes des utilisateurs de construction (*note
     Invoquer guix-daemon::).

‘activation-service-type’
     Ici, GUIX-ACTIVATION est une procédure qui renvoie une gexp, qui
     est un bout de code qui s’exécute au moment de l’activation — p.
     ex. lorsque le service est démarré.

   Un service de ce type est instancié de cette manière :

     (service guix-service-type
              (guix-configuration
                (build-accounts 5)
                (use-substitutes? #f)))

   Le deuxième argument de la forme ‘service’ est une valeur
représentant les paramètres de cet instance spécifique du service. *Note
‘guix-configuration’: guix-configuration-type, pour plus d’informations
sur le type de données ‘guix-configuration’. Lorsque la valeur est
omise, la valeur par défaut spécifiée par ‘guix-service-type’ est
utilisée :

     (service guix-service-type)

   GUIX-SERVICE-TYPE est très simple car il étend d’autres services mais
ne peut pas être étendu.

   Le type de service pour un service _extensible_ ressemble à ceci :

     (define udev-service-type
       (service-type (name 'udev)
                     (extensions
                      (list (service-extension shepherd-root-service-type
                                               udev-shepherd-service)))

                     (compose concatenate)       ; concatène la liste des règles
                     (extend (lambda (config rules)
                               (match config
                                 (($ <udev-configuration> udev initial-rules)
                                  (udev-configuration
                                   (udev udev)   ; le paquet udev à utiliser
                                   (rules (append initial-rules rules)))))))))

   C’est le type de service pour le le démon de gestion des
périphériques eudev (https://wiki.gentoo.org/wiki/Project:Eudev).
Comparé à l’exemple précédent, en plus d’une extension de
SHEPHERD-ROOT-SERVICE-TYPE, on trouve deux nouveaux champs :

‘compose’
     C’est la procédure pour “composer” la liste des extensions de
     services de ce type.

     Les services peuvent étendre le service udev en lui passant des
     listes de règles ; on compose ces extensions simplement en les
     concaténant.

‘extend’
     Cette procédure définie comme la valeur du service est “étendue”
     avec la composition des extensions.

     Les extensions Udev sont composés en une liste de règles, mais la
     valeur du service udev est elle-même un enregistrement
     ‘<udev-configuration>’. Donc ici, nous étendons cet enregistrement
     en ajoutant la liste des règle contribuées à la liste des règles
     qu’il contient déjà.

‘description’
     C’est une chaîne donnant un aperçu du type de service. Elle peut
     contenir du balisage Texinfo (*note (texinfo)Overview::). La
     commande ‘guix system search’ permet de rechercher dans ces chaînes
     et de les afficher (*note Invoquer guix system::).

   Il ne peut y avoir qu’une instance d’un type de service extensible
comme UDEV-SERVICE-TYPE. S’il y en avait plus, les spécification
‘service-extension’ seraient ambiguës.

   Toujours ici ? La section suivante fournit une référence de
l’interface de programmation des services.


File: guix.fr.info,  Node: Référence de service,  Next: Services Shepherd,  Prev: Types service et services,  Up: Définir des services

8.17.3 Référence de service
---------------------------

Nous avons vu un résumé des types de services (*note Types service et
services::). Cette section fournit une référence sur la manière de
manipuler les services et les types de services. Cette interface est
fournie par le module ‘(gnu services)’.

 -- Procédure Scheme : service TYPE [VALUE]
     Return a new service of TYPE, a ‘<service-type>’ object (see
     below). VALUE can be any object; it represents the parameters of
     this particular service instance.

     Lorsque VALUE est omise, la valeur par défaut spécifiée par TYPE
     est utilisée ; si TYPE ne spécifie pas de valeur par défaut, une
     erreur est levée.

     Par exemple ceci :

          (service openssh-service-type)

     est équivalent à ceci :

          (service openssh-service-type
                   (openssh-configuration))

     Dans les deux cas le résultat est une instance de
     ‘openssh-service-type’ avec la configuration par défaut.

 -- Procédure Scheme : service? OBJ
     Renvoie vrai si OBJ est un service.

 -- Procédure Scheme : service-kind SERVICE
     Renvoie le type de SERVICE — c.-à-d. un objet ‘<service-type>’.

 -- Procédure Scheme : service-value SERVICE
     Renvoie la valeur associée à SERVICE. Elle représente ses
     paramètres.

   Voici un exemple de la manière dont un service est créé et manipulé :

     (define s
       (service nginx-service-type
                (nginx-configuration
                 (nginx nginx)
                 (log-directory log-directory)
                 (run-directory run-directory)
                 (file config-file))))

     (service? s)
     ⇒ #t

     (eq? (service-kind s) nginx-service-type)
     ⇒ #t

   La forme ‘modify-services’ fournit une manière pratique de modifier
les paramètres de certains services d’une liste comme %BASE-SERVICES
(*note ‘%base-services’: Services de base.). Elle s’évalue en une liste
de services. Bien sûr, vous pouvez toujours utiliser les combinateurs de
liste standards comme ‘map’ et ‘fold’ pour cela (*note List Library:
(guile)SRFI-1.) ; ‘modify-services’ fournit simplement une manière plus
concise pour ce besoin commun.

 -- Syntaxe Scheme : modify-services SERVICES (TYPE VARIABLE => BODY)
          ...

     Modifie les services listés dans SERVICES en fonction des clauses
     données. Chaque clause à la forme :

          (TYPE VARIABLE => BODY)

     où TYPE est un type de service — p. ex. ‘guix-service-type’ — et
     VARIABLE est un identifiant lié dans BODY aux paramètres du service
     — p. ex. une instance de ‘guix-configuration’ — du service original
     de ce TYPE.

     La variable BODY devrait s’évaluer en de nouveaux paramètres de
     service, qui seront utilisés pour configurer le nouveau service. Ce
     nouveau service remplacera l’original dans la liste qui en résulte.
     Comme les paramètres d’un service sont créés avec
     ‘define-record-type*’, vous pouvez écrire un BODY court qui
     s’évalue en de nouveaux paramètres pour le services en utilisant
     ‘inherit’, fourni par ‘define-record-type*’.

     *Note Utiliser le système de configuration:: pour des exemples
     d’utilisation.

   Suit l’interface de programmation des types de services. Vous devrez
la connaître pour écrire de nouvelles définitions de services, mais pas
forcément lorsque vous cherchez des manières simples de personnaliser
votre déclaration ‘operating-system’.

 -- Type de données : service-type
     C’est la représentation d’un “type de service” (*note Types service
     et services::).

     ‘name’
          C’est un symbole, utilisé seulement pour simplifier
          l’inspection et le débogage.

     ‘extensions’
          Une liste non-vide d’objets ‘<service-extension>’ (voir plus
          bas).

     ‘compose’ (par défaut : ‘#f’)
          S’il s’agit de ‘#f’, le type de service dénote des services
          qui ne peuvent pas être étendus — c.-à-d. qui ne reçoivent pas
          de « valeurs » d’autres services.

          Sinon, ce doit être une procédure à un argument. La procédure
          est appelée par ‘fold-services’ et on lui passe une liste de
          valeurs collectées par les extensions. Elle peut renvoyer
          n’importe quelle valeur simple.

     ‘extend’ (par défaut : ‘#f’)
          Si la valeur est ‘#f’, les services de ce type ne peuvent pas
          être étendus.

          Sinon, il doit s’agir ’une procédure à deux arguments :
          ‘fold-services’ l’appelle et lui passe la valeur initiale du
          service comme premier argument et le résultat de l’application
          de ‘compose’ sur les valeurs d’extension en second argument.
          Elle doit renvoyer une valeur qui est une valeur de paramètre
          valide pour l’instance du service.

     *Note Types service et services::, pour des exemples.

 -- Procédure Scheme : service-extension TARGET-TYPE COMPUTE
     Renvoie une nouvelle extension pour les services de type
     TARGET-TYPE. COMPUTE doit être une procédure à un argument :
     ‘fold-services’ l’appelle et lui passe la valeur associée au
     service qui fournit cette extension ; elle doit renvoyer une valeur
     valide pour le service cible.

 -- Procédure Scheme : service-extension? OBJ
     Renvoie vrai si OBJ est une extension de service.

   Parfois, vous voudrez simplement étendre un service existant. Cela
implique de créer un nouveau type de service et de spécifier l’extension
qui vous intéresse, ce qui peut être assez verbeux ; la procédure
‘simple-service’ fournit un raccourci pour ce cas.

 -- Procédure Scheme : simple-service NAME TARGET VALUE
     Renvoie un service qui étend TARGET avec VALUE. Cela fonctionne en
     créant un type de service singleton NAME, dont le service renvoyé
     est une instance.

     Par exemple, cela étend mcron (*note Exécution de tâches
     planifiées::) avec une tâche supplémentaire :

          (simple-service 'my-mcron-job mcron-service-type
                          #~(job '(next-hour (3)) "guix gc -F 2G"))

   Au cœur de l’abstraction des services se cache la procédure
‘fold-services’, responsable de la « compilation » d’une liste de
services en un répertoire unique qui contient tout ce qui est nécessaire
au démarrage et à l’exécution du système — le répertoire indiqué par la
commande ‘guix system build’ (*note Invoquer guix system::). En soit,
elle propage les extensions des services le long du graphe des services,
en mettant à jour chaque paramètre des nœuds sur son chemin, jusqu’à
atteindre le nœud racine.

 -- Procédure Scheme : fold-services SERVICES [#:target-type
          SYSTEM-SERVICE-TYPE]
     Replie SERVICES en propageant leurs extensions jusqu’à la racine de
     type TARGET-TYPE ; renvoie le service racine ajusté de cette
     manière.

   Enfin, le module ‘(gnu services)’ définie aussi divers types de
services essentiels, dont certains sont listés ci-dessous.

 -- Variable Scheme : system-service-type
     C’est la racine du graphe des services. Il produit le répertoire du
     système renvoyé par la commande ‘guix system build’.

 -- Variable Scheme : boot-service-type
     Le type du service « boot », qui produit le “script de démarrage”.
     Le script de démarrage est ce que le disque de RAM initial lance au
     démarrage.

 -- Variable Scheme : etc-service-type
     Le type du service ‘/etc’. Ce service est utilisé pour créer des
     fichiers dans ‘/etc’ et peut être étendu en lui passant des tuples
     nom/fichier comme ceci :

          (list `("issue" ,(plain-file "issue" "Bienvenue !\n")))

     Dans cet exemple, l’effet serait d’ajouter un fichier ‘/etc/issue’
     pointant vers le fichier donné.

 -- Variable Scheme : setuid-program-service-type
     Le type du « service setuid ». Ce service récupère des listes de
     noms de fichiers exécutables, passés en tant que gexps, et les
     ajoute à l’ensemble des programmes setuid root sur le système
     (*note Programmes setuid::).

 -- Variable Scheme : profile-service-type
     De type du service qui rempli le “profil du système” — c.-à-d. les
     programmes dans ‘/run/current-system/profile’. Les autres services
     peuvent l’étendre en lui passant des listes de paquets à ajouter au
     profil du système.

 -- Scheme Variable : provenance-service-type
     This is the type of the service that records “provenance meta-data”
     in the system itself. It creates several files under
     ‘/run/current-system’:

     ‘channels.scm’
          This is a “channel file” that can be passed to ‘guix pull -C’
          or ‘guix time-machine -C’, and which describes the channels
          used to build the system, if that information was available
          (*note Canaux::).

     ‘configuration.scm’
          This is the file that was passed as the value for this
          ‘provenance-service-type’ service. By default, ‘guix system
          reconfigure’ automatically passes the OS configuration file it
          received on the command line.

     ‘provenance’
          This contains the same information as the two other files but
          in a format that is more readily processable.

     In general, these two pieces of information (channels and
     configuration file) are enough to reproduce the operating system
     “from source”.

          Caveats : This information is necessary to rebuild your
          operating system, but it is not always sufficient. In
          particular, ‘configuration.scm’ itself is insufficient if it
          is not self-contained—if it refers to external Guile modules
          or to extra files. If you want ‘configuration.scm’ to be
          self-contained, we recommend that modules or files it refers
          to be part of a channel.

          Besides, provenance meta-data is “silent” in the sense that it
          does not change the bits contained in your system, _except for
          the meta-data bits themselves_. Two different OS
          configurations or sets of channels can lead to the same
          system, bit-for-bit; when ‘provenance-service-type’ is used,
          these two systems will have different meta-data and thus
          different store file names, which makes comparison less
          trivial.

     This service is automatically added to your operating system
     configuration when you use ‘guix system reconfigure’, ‘guix system
     init’, or ‘guix deploy’.


File: guix.fr.info,  Node: Services Shepherd,  Prev: Référence de service,  Up: Définir des services

8.17.4 Services Shepherd
------------------------

Le module ‘(gnu services shepherd)’ fournit une manière de définir les
services gérés par le GNU Shepherd, qui est le système d’initialisation
— le premier processus démarré lorsque le système démarre, aussi connu
comme étant le PID 1 (*note (shepherd)Introduction::).

   Les services dans le Shepherd peuvent dépendre les uns des autres.
Par exemple, le démon SSH peut avoir besoin d’être démarré après le
démon syslog, qui à son tour doit être démarré après le montage des
systèmes de fichiers. Le système d’exploitation simple déclaré
précédemment (*note Utiliser le système de configuration::) crée un
graphe de service comme ceci :

[Graphe de service typique du shepherd.]
   Vous pouvez générer un tel graphe pour n’importe quelle définition de
système d’exploitation avec la commande ‘guix system shepherd-graph’
(*note ‘guix system shepherd-graph’: system-shepherd-graph.).

   La variable %SHEPHERD-ROOT-SERVICE est un objet de service
représentant le PID 1, de type SHEPHERD-ROOT-SERVICE-TYPE ; il peut être
étendu en lui passant des listes d’objets ‘<shepherd-service>’.

 -- Type de données : shepherd-service
     Le type de données représentant un service géré par le Shepherd.

     ‘provision’
          C’est une liste de symboles dénotant ce que le service
          fournit.

          Ce sont les noms qui peuvent être passés à ‘herd start’, ‘herd
          status’ et les commandes similaires (*note (shepherd)Invoking
          herd::). *Note the ‘provides’ slot: (shepherd)Slots of
          services, pour plus de détails.

     ‘requirement’ (default: ‘'()’)
          Liste de symboles dénotant les services du Shepherd dont
          celui-ci dépend.

     ‘one-shot?’ (par défaut : ‘#f’)
          Indique si ce service est “ponctuel”. Les services ponctuels
          s’arrêtent immédiatement à la fin de leur action ‘start’.
          *Note (shepherd)Slots of services::, pour plus d’infos.

     ‘respawn?’ (par défaut : ‘#t’)
          Indique s’il faut redémarrer le service lorsqu’il s’arrête,
          par exemple si le processus sous-jacent meurt.

     ‘start’
     ‘stop’ (par défaut : ‘#~(const #f)’)
          Les champs ‘start’ et ‘stop’ se réfèrent à la capacité du
          Shepherd de démarrer et d’arrêter des processus (*note
          (shepherd)Service De- and Constructors::). Ils sont donnés
          comme des G-expressions qui sont étendues dans le fichier de
          configuration du Shepherd (*note G-Expressions::).

     ‘actions’ (par défaut : ‘'()’)
          C’est une liste d’objets ‘shepherd-action’ (voir plus bas)
          définissant des “actions” supportées par le service, en plus
          des actions ‘start’ et ‘stop’ standards. Les actions listées
          ici sont disponibles en tant que sous-commande de ‘herd’ :

               herd ACTION SERVICE [ARGUMENTS...]

     ‘auto-start?’ (default: ‘#t’)
          Whether this service should be started automatically by the
          Shepherd. If it is ‘#f’ the service has to be started manually
          with ‘herd start’.

     ‘documentation’
          Une chaîne de documentation, montrée lorsqu’on lance :

               herd doc SERVICE-NAME

          où SERVICE-NAME est l’un des symboles dans PROVISION (*note
          (shepherd)Invoking herd::).

     ‘modules’ (par défaut : ‘%default-modules’)
          C’est la liste des modules qui doivent être dans le contexte
          lorsque ‘start’ et ‘stop’ sont évalués.

 -- Type de données : shepherd-action
     C’est le type de données qui définie des actions supplémentaires
     implémentées par un service Shepherd (voir au-dessus).

     ‘name’
          Symbole nommant l’action.

     ‘documentation’
          C’est une chaîne de documentation pour l’action. Elle peut
          être consultée avec :

               herd doc SERVICE action ACTION

     ‘procedure’
          Cela devrait être une gexp qui s’évalue en une procédure à au
          moins un argument, la « valeur de lancement » du service
          (*note (shepherd)Slots of services::).

     L’exemple suivant définie une action nommée ‘dire-bonjour’ qui
     salue amicalement l’utilisateur :

          (shepherd-action
            (name 'dire-bonjour)
            (documentation "Dit salut !")
            (procedure #~(lambda (running . args)
                           (format #t "Salut, l'ami ! arguments : ~s\n"
                                   args)
                           #t)))

     En supposant que cette action est ajoutée dans le service
     ‘example’, vous pouvez écrire :

          # herd dire-bonjour example
          Salut, l'ami ! arguments : ()
          # herd dire-bonjour example a b c
          Salut, l'ami ! arguments : ("a" "b" "c")

     Comme vous pouvez le voir, c’est une manière assez sophistiquée de
     dire bonjour. *Note (shepherd)Service Convenience::, pour plus
     d’informations sur les actions.

 -- Variable Scheme : shepherd-root-service-type
     Le type de service pour le « service racine » du Shepherd — c.-à-d.
     le PID 1.

     C’est le type de service que les extensions ciblent lorqu’elles
     veulent créer un service shepherd (*note Types service et
     services::, pour un exemple). Chaque extension doit passer une
     liste de ‘<shepherd-service>’.

 -- Variable Scheme : %shepherd-root-service
     Ce service représente le PID 1.


File: guix.fr.info,  Node: Documentation,  Next: Installer les fichiers de débogage,  Prev: Configuration système,  Up: Top

9 Documentation
***************

Dans la plupart des cas les paquets installés avec Guix ont une
documentation. Il y a deux formats de documentation principaux : « Info
», un format hypertexte navigable utilisé par les logiciels GNU et les «
pages de manuel » (ou « pages de man »), le format de documentation
linéaire traditionnel chez Unix. Les manuels Info sont disponibles via
la commande ‘info’ ou avec Emacs, et les pages de man sont accessibles
via la commande ‘man’.

   Vous pouvez chercher de la documentation pour les logiciels installés
sur votre système par mot-clef. Par exemple, la commande suivante
recherche des informations sur « TLS » dans les manuels Info :

     $ info -k TLS
     "(emacs)Network Security" -- STARTTLS
     "(emacs)Network Security" -- TLS
     "(gnutls)Core TLS API" -- gnutls_certificate_set_verify_flags
     "(gnutls)Core TLS API" -- gnutls_certificate_set_verify_function
     ...

La commande suivante recherche le même mot-clef dans les pages de man :

     $ man -k TLS
     SSL (7)              - OpenSSL SSL/TLS library
     certtool (1)         - GnuTLS certificate tool
     ...

   Ces recherches sont purement locales à votre ordinateur donc vous
savez que la documentation trouvée correspond à ce qui est effectivement
installé, vous pouvez y accéder hors ligne et votre vie privée est
préservée.

   Une fois que vous avez ces résultats, vous pouvez visualiser la
documentation appropriée avec, disons :

     $ info "(gnutls)Core TLS API"

ou :

     $ man certtool

   Les manuels Info contiennent des sections et des indexs ainsi que des
hyperliens comme ce qu’on trouve sur les pages Web. Le lecteur ‘info’
(*note Info reader: (info-stnd)Top.) et sa contre-partie dans Emacs
(*note (emacs)Misc Help::) fournissent des raccourcis claviers intuitifs
pour naviguer dans les manuels *Note (info)Getting Started:: pour
trouver une introduction sur la navigation dans info.

