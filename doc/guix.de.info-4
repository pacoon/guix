This is guix.de.info, produced by makeinfo version 6.7 from
guix.de.texi.

Copyright © 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 Ludovic
Courtès
Copyright © 2013, 2014, 2016 Andreas Enge
Copyright © 2013 Nikita Karetnikov
Copyright © 2014, 2015, 2016 Alex Kost
Copyright © 2015, 2016 Mathieu Lirzin
Copyright © 2014 Pierre-Antoine Rault
Copyright © 2015 Taylan Ulrich Bayırlı/Kammer
Copyright © 2015, 2016, 2017, 2019, 2020 Leo Famulari
Copyright © 2015, 2016, 2017, 2018, 2019, 2020 Ricardo Wurmus
Copyright © 2016 Ben Woodcroft
Copyright © 2016, 2017, 2018 Chris Marusich
Copyright © 2016, 2017, 2018, 2019, 2020 Efraim Flashner
Copyright © 2016 John Darrington
Copyright © 2016, 2017 Nikita Gillmann
Copyright © 2016, 2017, 2018, 2019, 2020 Jan Nieuwenhuizen
Copyright © 2016, 2017, 2018, 2019, 2020 Julien Lepiller
Copyright © 2016 Alex ter Weele
Copyright © 2016, 2017, 2018, 2019 Christopher Baines
Copyright © 2017, 2018, 2019 Clément Lassieur
Copyright © 2017, 2018 Mathieu Othacehe
Copyright © 2017 Federico Beffa
Copyright © 2017, 2018 Carlo Zancanaro
Copyright © 2017 Thomas Danckaert
Copyright © 2017 humanitiesNerd
Copyright © 2017 Christopher Allan Webber
Copyright © 2017, 2018, 2019, 2020 Marius Bakke
Copyright © 2017, 2019, 2020 Hartmut Goebel
Copyright © 2017, 2019, 2020 Maxim Cournoyer
Copyright © 2017, 2018, 2019, 2020 Tobias Geerinckx-Rice
Copyright © 2017 George Clemmer
Copyright © 2017 Andy Wingo
Copyright © 2017, 2018, 2019 Arun Isaac
Copyright © 2017 nee
Copyright © 2018 Rutger Helling
Copyright © 2018 Oleg Pykhalov
Copyright © 2018 Mike Gerwitz
Copyright © 2018 Pierre-Antoine Rouby
Copyright © 2018, 2019 Gábor Boskovits
Copyright © 2018, 2019 Florian Pelz
Copyright © 2018 Laura Lazzati
Copyright © 2018 Alex Vong
Copyright © 2019 Josh Holland
Copyright © 2019, 2020 Diego Nicola Barbato
Copyright © 2019 Ivan Petkov
Copyright © 2019 Jakob L. Kreuze
Copyright © 2019 Kyle Andrews
Copyright © 2019 Alex Griffin
Copyright © 2019 Guillaume Le Vaillant
Copyright © 2020 Leo Prikler
Copyright © 2019, 2020 Simon Tournier
Copyright © 2020 Wiktor Żelazny
Copyright © 2020 Damien Cassou
Copyright © 2020 Jakub Kądziołka
Copyright © 2020 Jack Hill
Copyright © 2020 Naga Malleswari
Copyright © 2020 Brice Waegeneire
Copyright © 2020 R Veera Kumar
Copyright © 2020 Pierre Langlois
Copyright © 2020 pinoaffe

   Es ist Ihnen gestattet, dieses Dokument zu vervielfältigen,
weiterzugeben und/oder zu verändern, unter den Bedingungen der GNU Free
Documentation License, entweder gemäß Version 1.3 der Lizenz oder (nach
Ihrer Option) einer späteren Version, die von der Free Software
Foundation veröffentlicht wurde, ohne unveränderliche Abschnitte, ohne
vorderen Umschlagtext und ohne hinteren Umschlagtext. Eine Kopie der
Lizenz finden Sie im Abschnitt mit dem Titel „GNU Free Documentation
License“.
INFO-DIR-SECTION Systemadministration
START-INFO-DIR-ENTRY
* Guix: (guix.de).           Installierte Software und Systemkonfigurationen
                               verwalten.
* guix package: (guix.de)guix package aufrufen.  Pakete installieren,
                                                   entfernen und
                                                   aktualisieren.
* guix gc: (guix.de)guix gc aufrufen.  Unbenutzten Plattenspeicher wieder
                                         freigeben.
* guix pull: (guix.de)guix pull aufrufen.  Die Liste verfügbarer Pakete
                                             aktualisieren.
* guix system: (guix.de)guix system aufrufen.  Die
                                                 Betriebssystemkonfiguration
                                                 verwalten.
* guix deploy: (guix.de)guix deploy aufrufen.  Betriebssystemkonfigurationen
                                                 entfernter Rechner verwalten.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Softwareentwicklung
START-INFO-DIR-ENTRY
* guix environment: (guix.de)guix environment aufrufen.  Umgebungen für
                                                           Entwickler
                                                           erstellen
* guix build: (guix.de)guix build aufrufen.  Erstellen von Paketen.
* guix pack: (guix.de)guix pack aufrufen.  Bündel aus Binärdateien
                                             erstellen.
END-INFO-DIR-ENTRY


File: guix.de.info,  Node: Kerberos-Dienste,  Next: LDAP-Dienste,  Prev: Systemüberwachungsdienste,  Up: Dienste

8.8.14 Kerberos-Dienste
-----------------------

Das ‘(gnu services kerberos)’-Modul stellt Dienste zur Verfügung, die
mit dem Authentifizierungsprotokoll “Kerberos” zu tun haben.

Krb5-Dienst
...........

Programme, die eine Kerberos-Clientbibliothek benutzen, erwarten meist,
dass sich eine Konfigurationsdatei in ‘/etc/krb5.conf’ befindet. Dieser
Dienst erzeugt eine solche Datei aus einer Definition, die in der
Betriebssystemdeklaration angegebenen wurde. Durch ihn wird kein Daemon
gestartet.

   Keine „Schlüsseltabellen“-Dateien werden durch diesen Dienst zur
Verfügung gestellt — Sie müssen sie ausdrücklich selbst anlegen. Dieser
Dienst funktioniert bekanntermaßen mit der MIT-Clientbibliothek
‘mit-krb5’. Andere Implementierungen wurden nicht getestet.

 -- Scheme-Variable: krb5-service-type
     Ein Diensttyp für Kerberos-5-Clients.

Hier ist ein Beispiel, wie man ihn benutzt:
     (service krb5-service-type
              (krb5-configuration
               (default-realm "EXAMPLE.COM")
               (allow-weak-crypto? #t)
               (realms (list
                        (krb5-realm
                         (name "EXAMPLE.COM")
                         (admin-server "groucho.example.com")
                         (kdc "karl.example.com"))
                        (krb5-realm
                         (name "ARGRX.EDU")
                         (admin-server "kerb-admin.argrx.edu")
                         (kdc "keys.argrx.edu"))))))

Dieses Beispiel stellt eine Client-Konfiguration für Kerberos 5 zur
Verfügung, mit der:
   • Zwei Administrationsbereiche erkannt werden, nämlich: „EXAMPLE.COM“
     und „ARGRX.EDU“, die beide verschiedene Administrationsserver und
     Schlüsselverteilungszentren haben,
   • als Vorgabe der Administrationsbereich „EXAMPLE.COM“ verwendet
     wird, falls der Administrationsbereich von Clients nicht
     ausdrücklich angegeben wurde, und
   • auch Dienste angenommen werden, die nur Verschlüsselungstypen
     unterstützen, die bekanntermaßen schwach sind.

   Die Typen ‘krb5-realm’ und ‘krb5-configuration’ haben viele Felder.
Hier werden nur die am häufigsten benutzten beschrieben. Eine
vollständige Liste und jeweils detailliertere Erklärungen finden Sie in
der Dokumentation von krb5.conf vom MIT.

 -- Datentyp: krb5-realm
     ‘name’
          Dieses Feld enthält eine Zeichenkette, die den Namen des
          Administrationsbereichs bezeichnet. Üblich ist, den
          vollständigen DNS-Namen („Fully Qualified DNS Name“) Ihrer
          Organisation nur in Großbuchstaben zu benutzen.

     ‘admin-server’
          Dieses Feld enthält eine Zeichenkette, die den Rechner
          benennt, auf dem der Administrationsserver läuft.

     ‘kdc’
          Dieses Feld enthält eine Zeichenkette, die das
          Schlüsselverteilungszentrum für den Administrationsbereich
          angibt.

 -- Datentyp: krb5-configuration

     ‘allow-weak-crypto?’ (Vorgabe: ‘#f’)
          Wenn diese Option auf ‘#t’ gesetzt ist, werden auch Dienste
          akzeptiert, die nur Verschlüsselungsalgorithmen anbieten, die
          bekanntermaßen schwach sind.

     ‘default-realm’ (Vorgabe: ‘#f’)
          Dieses Feld sollte eine Zeichenkette enthalten, die den
          voreingestellten Kerberos-Administrationsbereich für den
          Client angibt. Sie sollten in diesem Feld den Namen Ihres
          Kerberos-Administrationsbereichs eintragen. Wenn der Wert ‘#f’
          ist, dann muss ein Administrationsbereich mit jedem
          Kerberos-Prinzipal zusammen angegeben werden, wenn Programme
          wie ‘kinit’ aufgerufen werden.

     ‘realms’
          Hierin sollte eine nichtleere Liste von je einem
          ‘krb5-realm’-Objekt pro Administrationsbereich stehen, auf den
          Clients zugreifen können. Normalerweise hat einer davon ein
          ‘name’-Feld, das mit dem ‘default-realm’-Feld übereinstimmt.

PAM-krb5-Dienst
...............

Der ‘pam-krb5’-Dienst ermöglicht es, bei der Anmeldung und
Passwortverwaltung Benutzer über Kerberos zu authentifizieren. Sie
brauchen diesen Dienst, damit Anwendungen, die PAM benutzen können,
Nutzer über Kerberos authentifizieren können.

 -- Scheme-Variable: pam-krb5-service-type
     Ein Diensttyp für das PAM-Modul zu Kerberos 5.

 -- Datentyp: pam-krb5-configuration
     Der Datentyp, der die Konfiguration des PAM-Moduls für Kerberos 5
     repräsentiert. Dieser Typ hat die folgenden Parameter:
     ‘pam-krb5’ (Vorgabe: ‘pam-krb5’)
          Das pam-krb5-Paket, das benutzt werden soll.

     ‘minimum-uid’ (Vorgabe: ‘1000’)
          Der kleinste Benutzeridentifikator (UID), für den
          Authentifizierung über Kerberos versucht werden soll. Lokale
          Benutzerkonten mit niedrigeren Zahlwerten können sich nicht
          authentisieren und bekommen dazu keine Meldung angezeigt.


File: guix.de.info,  Node: LDAP-Dienste,  Next: Web-Dienste,  Prev: Kerberos-Dienste,  Up: Dienste

8.8.15 LDAP-Dienste
-------------------

Das Modul ‘(gnu services authentication)’ stellt den Diensttyp
‘nslcd-service-type’ zur Verfügung, mit dem sich Benutzer gegenüber
einem LDAP-Server authentisieren können. Sie möchten dabei
wahrscheinlich nicht nur den Dienst konfigurieren, sondern auch ‘ldap’
als einen Namensdienst („Name Service“) für den Name Service Switch
hinzufügen. Siehe *note Name Service Switch:: für Details.

   Hier ist ein Beispiel für eine einfache Betriebssystemdeklaration mit
einer der Vorgabe entsprechenden Konfiguration des ‘nslcd-service-type’
und einer Konfiguration des Name Service Switch, die den
‘ldap’-Namensdienst zuletzt prüft:

     (use-service-modules authentication)
     (use-modules (gnu system nss))
     ...
     (operating-system
       ...
       (services
         (cons*
           (service nslcd-service-type)
           (service dhcp-client-service-type)
           %base-services))
       (name-service-switch
        (let ((services (list (name-service (name "db"))
                              (name-service (name "files"))
                              (name-service (name "ldap")))))
          (name-service-switch
           (inherit %mdns-host-lookup-nss)
           (password services)
           (shadow   services)
           (group    services)
           (netgroup services)
           (gshadow  services)))))

   Verfügbare ‘nslcd-configuration’-Felder sind:

 -- ‘nslcd-configuration’-Parameter: „package“ nss-pam-ldapd
     Das ‘nss-pam-ldapd’-Paket, was benutzt werden soll.

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zahl threads
     Die Anzahl zu startender Threads, die Anfragen bearbeiten und
     LDAP-Abfragen durchführen können. Jeder Thread öffnet eine separate
     Verbindung zum LDAP-Server. Die Vorgabe ist, 5 Threads zu starten.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Zeichenkette uid
     Gibt den Benutzeridentifikator an, unter dem der Daemon ausgeführt
     werden soll.

     Die Vorgabe ist ‘"nslcd"’.

 -- ‘nslcd-configuration’-Parameter: Zeichenkette gid
     Gibt den Gruppenidentifikator an, unter dem der Daemon ausgeführt
     werden soll.

     Die Vorgabe ist ‘"nslcd"’.

 -- ‘nslcd-configuration’-Parameter: Protokolleinstellung log
     This option controls the way logging is done via a list containing
     SCHEME and LEVEL. The SCHEME argument may either be the symbols
     ‘none’ or ‘syslog’, or an absolute file name. The LEVEL argument is
     optional and specifies the log level. The log level may be one of
     the following symbols: ‘crit’, ‘error’, ‘warning’, ‘notice’, ‘info’
     or ‘debug’. All messages with the specified log level or higher are
     logged.

     Die Vorgabe ist ‘("/var/log/nslcd" info)’.

 -- ‘nslcd-configuration’-Parameter: Liste uri
     Die Liste der LDAP-Server-URIs. Normalerweise wird nur der erste
     Server benutzt; nachfolgende Server dienen als Ersatz.

     Die Vorgabe ist ‘("ldap://localhost:389/")’.

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette
          ldap-version
     Die zu benutzende Version des LDAP-Protokolls. Nach Vorgabe wird
     die höchste Version benutzt, die von der LDAP-Bibliothek
     unterstützt wird.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette binddn
     Gibt den „Distinguished Name“ an, der an den Verzeichnisserver
     („Directory Server“) gebunden wird, um Einträge aufzulösen. Nach
     Vorgabe wird anonym gebunden.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette bindpw
     Gibt die Zugangsinformationen an, mit denen gebunden wird. Diese
     Einstellung ist nur dann wirksam, wenn sie mit binddn benutzt wird.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette rootpwmoddn
     Gibt den „Distinguished Name“ an, der benutzt wird, wenn der
     Administratornutzer „root“ versucht, das Passwort eines Benutzers
     mit Hilfe des PAM-Moduls zu verändern.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette rootpwmodpw
     Gibt die Zugangsinformationen an, die benutzt werden, wenn der
     Administratornutzer „root“ versucht, das Passwort eines Benutzers
     zu verändern. Diese Einstellung ist nur dann wirksam, wenn sie mit
     rootpwmoddn benutzt wird.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette sasl-mech
     Gibt an, welcher SASL-Mechanismus benutzt werden soll, um
     Authentifizierung über SASL durchzuführen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette sasl-realm
     Gibt den SASL-Administrationsbereich an, um Authentifizierungen
     über SASL durchzuführen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette
          sasl-authcid
     Gibt die Authentisierungsidentität an, um Authentifizierungen über
     SASL durchzuführen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette
          sasl-authzid
     Gibt die Autorisierungsidentität an, um Authentifizierungen über
     SASL durchzuführen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Boolescher-Ausdruck
          sasl-canonicalize?
     Legt fest, ob der kanonische Rechnername („Hostname“) des
     LDAP-Servers ermittelt werden soll. Wenn ja, wird die
     LDAP-Bibliothek eine inverse Auflösung („Reverse Lookup“) des
     Rechnernamens durchführen. Die Vorgabe ist, es der LDAP-Bibliothek
     zu überlassen, ob eine solche Überprüfung durchgeführt wird.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette krb5-ccname
     Legt den Namen für den Zwischenspeicher der
     GSS-API-Kerberos-Zugangsdaten fest.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Zeichenkette base
     Basis für die Verzeichnissuche.

     Vorgegeben ist ‘"dc=example,dc=com"’.

 -- ‘nslcd-configuration’-Parameter: Suchbereichs-Einstellung scope
     Legt den Suchbereich fest als subtree (Teilbaum), onelevel (eine
     Ebene), base (Basis) oder children (Kinder). Die Vorgabe für den
     Suchbereich ist subtree; base ist fast nie geeignet für
     Namensdienstauflösungen; children wird nicht auf allen Servern
     unterstützt.

     Die Vorgabe ist ‘(subtree)’.

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Deref-Einstellung deref
     Legt die Richtlinie für das Dereferenzieren von Alias-Namen fest.
     Die vorgegebene Richtlinie ist, Alias-Namen niemals zu
     dereferenzieren.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Boolescher-Ausdruck
          referrals
     Gibt an, ob Verweise („Referrals“) automatisch verfolgt werden
     sollen. Das vorgegebene Verhalten ist, sie zu verfolgen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Liste-von-Abbildungseinträgen maps
     Diese Option ermöglicht es, eigene Attribute bei der Auflösung
     anstelle der vorgegebenen RFC-2307-Attribute zu verwenden. Es ist
     eine Liste von Abbildungen („Maps“), von denen jede aus dem Namen
     der Abbildung, dem abzubildenden RFC-2307-Attribut und einem
     Anfrageausdruck besteht, mit dem es anhand des Verzeichnisses
     aufgelöst wird.

     Die Vorgabe ist ‘()’.

 -- ‘nslcd-configuration’-Parameter: Liste-von-Filtereinträgen filters
     Eine Liste von Filtern, von denen jeder aus dem Namen einer
     Abbildung, auf die sich der Filter auswirkt, und einem
     LDAP-Suchfilter-Ausdruck besteht.

     Die Vorgabe ist ‘()’.

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zahl bind-timelimit
     Gibt die Zeitbeschränkung in Sekunden an, wie lange eine Verbindung
     zum Verzeichnisserver dauern darf. Die Vorgabe ist 10 Sekunden.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zahl timelimit
     Gibt die Zeitbeschränkung (in Sekunden) an, wie lange auf eine
     Antwort vom LDAP-Server gewartet wird. Ein Wert von null, was die
     Vorgabe ist, bewirkt, dass beliebig lange gewartet wird, bis Suchen
     abgeschlossen sind.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zahl idle-timelimit
     Gibt an, wie lange bei Inaktivität gewartet wird (in Sekunden), bis
     die Verbindung zum LDAP-Server geschlossen wird. Die Vorgabe ist,
     dass es zu keiner Zeitüberschreitung bei Verbindungen kommen kann.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zahl reconnect-sleeptime
     Gibt die Anzahl an Sekunden an, wie lange „schlafend“ gewartet
     wird, wenn zu _keinem_ LDAP-Server eine Verbindung hergestellt
     werden kann. Die Vorgabe ist, zwischen dem ersten Fehlversuch und
     dem ersten neuen Versuch 1 Sekunde zu warten.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zahl reconnect-retrytime
     Gibt an, nach wieviel Zeit der LDAP-Server als dauerhaft nicht
     verfügbar angesehen wird. Sobald dieser Fall eintritt, wird eine
     Verbindungsaufnahme nur noch einmal pro weiterem Ablauf dieser
     Zeitperiode versucht. Der Vorgabewert beträgt 10 Sekunden.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-SSL-Einstellung ssl
     Gibt an, ob SSL/TLS benutzt werden soll oder nicht (die Vorgabe
     ist, es _nicht_ zu benutzen). Wenn ’start-tls angegeben wird, dann
     wird StartTLS statt schlichtem LDAP über SSL benutzt.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter:
          Vielleicht-„tls-reqcert“-Einstellung tls-reqcert
     Gibt an, welche Überprüfungen auf einem vom Server empfangenen
     Zertifikat durchgeführt werden sollen. Die Bedeutung der Werte wird
     auf der Handbuchseite zu ldap.conf(5) beschrieben.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette
          tls-cacertdir
     Gibt das Verzeichnis an, das X.509-Zertifikate zur Authentifikation
     von Kommunikationspartnern enthält. Dieser Parameter wird
     ignoriert, wenn Sie GnuTLS benutzen lassen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette
          tls-cacertfile
     Gibt den Dateipfad zu dem X.509-Zertifikat zur Authentifikation von
     Kommunikationspartnern an.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette
          tls-randfile
     Gibt den Pfad zu einer Entropiequelle an. Dieser Parameter wird
     ignoriert, wenn Sie GnuTLS benutzen lassen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette tls-ciphers
     Gibt als eine Zeichenkette an, welche Ciphers für TLS benutzt
     werden sollen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette tls-cert
     Gibt den Pfad zu der Datei an, die das lokale Zertifikat zur
     TLS-Authentisierung als Client enthält.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette tls-key
     Gibt den Pfad zu der Datei an, die den privaten Schlüssel zur
     TLS-Authentisierung als Client enthält.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zahl pagesize
     Geben Sie hier eine Zahl größer als 0 an, um beim LDAP-Server
     seitenweise Antworten anzufordern, entsprechend RFC2696. Die
     Vorgabe (0) fordert alle Ergebnisse auf einmal an.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter:
          Vielleicht-„ignore-users“-Einstellung
          nss-initgroups-ignoreusers
     Diese Einstellung verhindert, dass für die angegebenen Benutzer die
     Gruppenmitgliedschaft über LDAP aufgelöst wird. Alternativ kann der
     Wert ’all-local verwendet werden. Für diesen Wert erzeugt nslcd
     eine vollständige Liste aller Nicht-LDAP-Benutzer, wenn es startet.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zahl nss-min-uid
     Diese Einstellung lässt sicherstellen, dass LDAP-Benutzer, deren
     numerischer Benutzeridentifikator kleiner als der angegebene Wert
     ist, ignoriert werden.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zahl nss-uid-offset
     Diese Einstellung gibt einen Versatz an, der auf den numerischen
     Benutzeridentifikator jedes LDAP-Nutzers aufaddiert wird. Damit
     können Konflikte zwischen den Benutzeridentifikatoren lokaler
     Benutzerkonten und LDAP vermieden werden.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zahl nss-gid-offset
     Diese Einstellung gibt einen Versatz an, der auf den numerischen
     Gruppenidentifikator jedes LDAP-Nutzers aufaddiert wird. Damit
     können Konflikte zwischen den Gruppenidentifikatoren lokaler
     Gruppen und LDAP vermieden werden.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Boolescher-Ausdruck
          nss-nested-groups
     Wenn diese Einstellung aktiviert ist, können die Attribute einer
     Gruppe auch wieder Verweise auf eine andere Gruppe sein. Attribute
     darin verschachtelter („nested“) Gruppen werden für die Gruppe auf
     höherer Ebene ebenfalls zurückgeliefert und Elterngruppen werden
     zurückgeliefert, wenn nach den Gruppen eines bestimmten Nutzers
     gesucht wird. Die Vorgabe ist, keine zusätzlichen Suchen nach
     verschachtelten Gruppen durchzuführen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Boolescher-Ausdruck
          nss-getgrent-skipmembers
     Wenn diese Einstellung aktiviert ist, wird die Liste der
     Gruppenmitglieder beim Auflösen von Gruppen nicht angefragt. Zu
     welchen Gruppen ein Benutzer gehört, kann weiterhin angefragt
     werden, damit dem Benutzer bei der Anmeldung wahrscheinlich dennoch
     die richtigen Gruppen zugeordnet werden.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Boolescher-Ausdruck
          nss-disable-enumeration
     Wenn diese Einstellung aktiviert ist, scheitern Funktionen, die
     alle Benutzer-/Gruppeneinträge aus dem Verzeichnis zu laden
     versuchen. Dadurch kann die Auslastung von LDAP-Servern wesentlich
     reduziert werden, wenn es eine große Anzahl von Benutzern und/oder
     Gruppen gibt. Diese Einstellung wird für die meisten
     Konfigurationen _nicht_ empfohlen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette validnames
     Mit dieser Einstellung kann festgelegt werden, wie Benutzer- und
     Gruppennamen vom System geprüft werden. Das angegebene Muster wird
     zur Prüfung aller Benutzer- und Gruppennamen benutzt, die über LDAP
     angefragt und zurückgeliefert werden.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Boolescher-Ausdruck
          ignorecase
     Hiermit wird festgelegt, ob bei Suchen nach passenden Einträgen
     _nicht_ auf Groß- und Kleinschreibung geachtet wird. Wenn Sie dies
     aktivieren, könnte es zu Sicherheitslücken kommen, mit denen
     Autorisierungen umgangen („Authorization Bypass“) oder der
     nscd-Zwischenspeicher vergiftet werden kann („Cache Poisoning“),
     was gezielte Überlastungen ermöglichen würde („Denial of Service“).

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Boolescher-Ausdruck
          pam-authc-ppolicy
     Mit dieser Einstellung wird festgelegt, ob
     Passwortrichtliniensteuerung vom LDAP-Server angefragt und
     behandelt wird, wenn Nutzer authentifiziert werden.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette
          pam-authc-search
     Nach Vorgabe führt nslcd eine LDAP-Suche nach jeder BIND-Operation
     (zur Authentisierung) durch, um sicherzustellen, dass die
     BIND-Operation erfolgreich durchgeführt wurde. Die vorgegebene
     Suche ist eine einfache Überprüfung, ob der DN eines Benutzers
     existiert. Hier kann ein Suchfilter angegeben werden, der
     stattdessen benutzt werden soll. Er sollte mindestens einen Eintrag
     liefern.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette
          pam-authz-search
     Diese Einstellung ermöglicht flexible Feineinstellungen an der
     durchzuführenden Autorisierungsprüfung. Der angegebene Suchfilter
     wird ausgeführt, woraufhin Zugriff gewährt wird, wenn mindestens
     ein Eintrag passt, andernfall wird der Zugriff verweigert.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Vielleicht-Zeichenkette
          pam-password-prohibit-message
     Wenn diese Einstellung festgelegt wurde, werden Passwortänderungen
     über pam_ldap abgelehnt und dem Anwender wird stattdessen die
     festgelegte Nachricht gezeigt. Die Nachricht kann benutzt werden,
     um den Anwender auf alternative Methoden aufmerksam zu machen, wie
     er sein Passwort ändern kann.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘nslcd-configuration’-Parameter: Liste pam-services
     Die Liste der PAM-Dienstnamen, für die eine LDAP-Authentisierung
     als ausreichend gilt.

     Die Vorgabe ist ‘()’.


File: guix.de.info,  Node: Web-Dienste,  Next: Zertifikatsdienste,  Prev: LDAP-Dienste,  Up: Dienste

8.8.16 Web-Dienste
------------------

Das Modul ‘(gnu services web)’ stellt den Apache-HTTP-Server, den
nginx-Webserver und auch einen fastcgi-Wrapperdienst bereit.

Apache-HTTP-Server
..................

 -- Scheme-Variable: httpd-service-type
     Diensttyp für den Apache-HTTP-Server (https://httpd.apache.org/)
     “httpd”. Der Wert dieses Diensttyps ist ein
     ‘httpd-configuration’-Verbund.

     Es folgt ein einfaches Beispiel der Konfiguration.

          (service httpd-service-type
                   (httpd-configuration
                     (config
                       (httpd-config-file
                         (server-name "www.example.com")
                         (document-root "/srv/http/www.example.com")))))

     Andere Dienste können den ‘httpd-service-type’ auch erweitern, um
     etwas zur Konfiguration hinzuzufügen.

          (simple-service 'www.example.com-server httpd-service-type
                          (list
                            (httpd-virtualhost
                              "*:80"
                              (list (string-join '("ServerName www.example.com"
                                                    "DocumentRoot /srv/http/www.example.com")
                                                 "\n")))))

   Nun folgt eine Beschreibung der Verbundstypen ‘httpd-configuration’,
‘httpd-module’, ‘httpd-config-file’ und ‘httpd-virtualhost’.

 -- Datentyp: httpd-configuration
     Dieser Datentyp repräsentiert die Konfiguration des httpd-Dienstes.

     ‘package’ (Vorgabe: ‘httpd’)
          Das zu benutzende httpd-Paket.

     ‘pid-file’ (Vorgabe: ‘"/var/run/httpd"’)
          Die vom Shepherd-Dienst benutzte PID-Datei.

     ‘config’ (Vorgabe: ‘(httpd-config-file)’)
          Die vom httpd-Dienst zu benutzende Konfigurationsdatei.
          Vorgegeben ist ein ‘httpd-config-file’-Verbundsobjekt, aber
          als Wert kann auch ein anderer G-Ausdruck benutzt werden, der
          eine Datei erzeugt, zum Beispiel ein ‘plain-file’. Es kann
          auch eine Datei außerhalb des Stores mit einer Zeichenkette
          angegeben werden.

 -- Datentyp: httpd-module
     Dieser Datentyp steht für ein Modul des httpd-Dienstes.

     ‘name’
          Der Name des Moduls.

     ‘file’
          Die Datei, in der das Modul steht. Sie kann relativ zum
          benutzten httpd-Paket oder als absoluter Pfad einer Datei oder
          als ein G-Ausdruck für eine Datei im Store angegeben werden,
          zum Beispiel ‘(file-append mod-wsgi "/modules/mod_wsgi.so")’.

 -- Scheme-Variable: %default-httpd-modules
     Eine vorgegebene Liste von ‘httpd-module’-Objekten.

 -- Datentyp: httpd-config-file
     Dieser Datentyp repräsentiert eine Konfigurationsdatei für den
     httpd-Dienst.

     ‘modules’ (Vorgabe: ‘%default-httpd-modules’)
          Welche Module geladen werden sollen. Zusätzliche Module können
          hier eingetragen werden oder durch eine zusätzliche
          Konfigurationsangabe geladen werden.

          Um zum Beispiel Anfragen nach PHP-Dateien zu behandeln, können
          Sie das Modul ‘mod_proxy_fcgi’ von Apache zusammen mit
          ‘php-fpm-service-type’ benutzen:

               (service httpd-service-type
                        (httpd-configuration
                         (config
                          (httpd-config-file
                           (modules (cons*
                                     (httpd-module
                                      (name "proxy_module")
                                      (file "modules/mod_proxy.so"))
                                     (httpd-module
                                      (name "proxy_fcgi_module")
                                      (file "modules/mod_proxy_fcgi.so"))
                                     %default-httpd-modules))
                           (extra-config (list "\
               <FilesMatch \\.php$>
                   SetHandler \"proxy:unix:/var/run/php-fpm.sock|fcgi://localhost/\"
               </FilesMatch>"))))))
               (service php-fpm-service-type
                        (php-fpm-configuration
                         (socket "/var/run/php-fpm.sock")
                         (socket-group "httpd")))

     ‘server-root’ (Vorgabe: ‘httpd’)
          Die ‘ServerRoot’ in der Konfigurationsdatei, vorgegeben ist
          das httpd-Paket. Direktiven wie ‘Include’ und ‘LoadModule’
          werden relativ zur ServerRoot interpretiert.

     ‘server-name’ (Vorgabe: ‘#f’)
          Der ‘ServerName’ in der Konfigurationsdatei, mit dem das
          Anfrageschema (Request Scheme), der Rechnername (Hostname) und
          Port angegeben wird, mit denen sich der Server identifiziert.

          Es muss nicht als Teil der Server-Konfiguration festgelegt
          werden, sondern kann auch in virtuellen Rechnern (Virtual
          Hosts) festgelegt werden. Vorgegeben ist ‘#f’, wodurch kein
          ‘ServerName’ festgelegt wird.

     ‘document-root’ (Vorgabe: ‘"/srv/http"’)
          Das ‘DocumentRoot’-Verzeichnis, in dem sich die Dateien
          befinden, die man vom Server abrufen kann.

     ‘listen’ (Vorgabe: ‘'("80")’)
          Die Liste der Werte für die ‘Listen’-Direktive in der
          Konfigurationsdatei. Als Wert sollte eine Liste von
          Zeichenketten angegeben werden, die jeweils die Portnummer,
          auf der gelauscht wird, und optional auch die zu benutzende
          IP-Adresse und das Protokoll angeben.

     ‘pid-file’ (Vorgabe: ‘"/var/run/httpd"’)
          Hiermit wird die PID-Datei als ‘PidFile’-Direktive angegeben.
          Der Wert sollte mit der ‘pid-file’-Datei in der
          ‘httpd-configuration’ übereinstimmen, damit der
          Shepherd-Dienst richtig konfiguriert ist.

     ‘error-log’ (Vorgabe: ‘"/var/log/httpd/error_log"’)
          Der Ort, an den der Server mit der ‘ErrorLog’-Direktive
          Fehlerprotokolle schreibt.

     ‘user’ (Vorgabe: ‘"httpd"’)
          Der Benutzer, als der der Server durch die ‘User’-Direktive
          Anfragen beantwortet.

     ‘group’ (Vorgabe: ‘"httpd"’)
          Die Gruppe, mit der der Server durch die ‘Group’-Direktive
          Anfragen beantwortet.

     ‘extra-config’ (Vorgabe: ‘(list "TypesConfig etc/httpd/mime.types")’)
          Eine flache Liste von Zeichenketten und G-Ausdrücken, die am
          Ende der Konfigurationsdatei hinzugefügt werden.

          Alle Werte, mit denen dieser Dienst erweitert wird, werden an
          die Liste angehängt.

 -- Datentyp: httpd-virtualhost
     Dieser Datentyp repräsentiert einen Konfigurationsblock für einen
     virtuellen Rechner (Virtual Host) des httpd-Dienstes.

     Sie sollten zur zusätzlichen Konfiguration extra-config des
     httpd-Dienstes hinzugefügt werden.

          (simple-service 'www.example.com-server httpd-service-type
                          (list
                            (httpd-virtualhost
                              "*:80"
                              (list (string-join '("ServerName www.example.com"
                                                    "DocumentRoot /srv/http/www.example.com")
                                                 "\n")))))

     ‘addresses-and-ports’
          Adressen und Ports für die ‘VirtualHost’-Direktive.

     ‘contents’
          Der Inhalt der ‘VirtualHost’-Direktive. Er sollte als Liste
          von Zeichenketten und G-Ausdrücken angegeben werden.

NGINX
.....

 -- Scheme-Variable: nginx-service-type
     Diensttyp für den NGinx-Webserver (https://nginx.org/). Der Wert
     des Dienstes ist ein ‘<nginx-configuration>’-Verbundsobjekt.

     Es folgt ein einfaches Beispiel der Konfiguration.

          (service nginx-service-type
                   (nginx-configuration
                     (server-blocks
                       (list (nginx-server-configuration
                               (server-name '("www.example.com"))
                               (root "/srv/http/www.example.com"))))))

     Außer durch direktes Hinzufügen von Server-Blöcken zur
     Dienstkonfiguration kann der Dienst auch durch andere Dienste
     erweitert werden, um Server-Blöcke hinzuzufügen, wie man im
     folgenden Beispiel sieht:

          (simple-service 'my-extra-server nginx-service-type
                          (list (nginx-server-configuration
                                  (root "/srv/http/extra-website")
                                  (try-files (list "$uri" "$uri/index.html")))))

   Beim Starten hat ‘nginx’ seine Konfigurationsdatei noch nicht gelesen
und benutzt eine vorgegebene Datei, um Fehlermeldungen zu
protokollieren. Wenn er seine Konfigurationsdatei nicht laden kann,
landen Fehlermeldungen also dort. Nachdem die Konfigurationsdatei
geladen ist, werden Fehlerprotokolle nach Voreinstellung in die Datei
geschrieben, die in der Konfiguration angegeben ist. In unserem Fall
können Sie Fehlermeldungen beim Starten in
‘/var/run/nginx/logs/error.log’ finden und nachdem die Konfiguration
eingelesen wurde, finden Sie sie in ‘/var/log/nginx/error.log’.
Letzterer Ort kann mit der Konfigurationsoption LOG-DIRECTORY geändert
werden.

 -- Datentyp: nginx-configuration
     Dieser Datentyp repräsentiert die Konfiguration von NGinx. Ein Teil
     der Konfiguration kann hierüber und über die anderen zu Ihrer
     Verfügung stehenden Verbundstypen geschehen, alternativ können Sie
     eine Konfigurationsdatei mitgeben.

     ‘nginx’ (Vorgabe: ‘nginx’)
          Das zu benutzende nginx-Paket.

     ‘log-directory’ (Vorgabe: ‘"/var/log/nginx"’)
          In welches Verzeichnis NGinx Protokolldateien schreiben wird.

     ‘run-directory’ (Vorgabe: ‘"/var/run/nginx"’)
          In welchem Verzeichnis NGinx eine PID-Datei anlegen und
          temporäre Dateien ablegen wird.

     ‘server-blocks’ (Vorgabe: ‘'()’)
          Eine Liste von “Server-Blöcken”, die in der erzeugten
          Konfigurationsdatei stehen sollen. Die Elemente davon sollten
          den Typ ‘<nginx-server-configuration>’ haben.

          Im folgenden Beispiel wäre NGinx so eingerichtet, dass
          Anfragen an ‘www.example.com’ mit Dateien aus dem Verzeichnis
          ‘/srv/http/www.example.com’ beantwortet werden, ohne HTTPS zu
          benutzen.
               (service nginx-service-type
                        (nginx-configuration
                          (server-blocks
                            (list (nginx-server-configuration
                                    (server-name '("www.example.com"))
                                    (root "/srv/http/www.example.com"))))))

     ‘upstream-blocks’ (Vorgabe: ‘'()’)
          Eine Liste von “Upstream-Blöcken”, die in der erzeugten
          Konfigurationsdatei stehen sollen. Ihre Elemente sollten den
          Typ ‘<nginx-upstream-configuration>’ haben.

          Upstreams als ‘upstream-blocks’ zu konfigurieren, kann
          hilfreich sein, wenn es mit ‘locations’ in
          ‘<nginx-server-configuration>’ verbunden wird. Das folgende
          Beispiel erzeugt eine Server-Konfiguration mit einer
          Location-Konfiguration, bei der Anfragen als Proxy
          entsprechend einer Upstream-Konfiguration weitergeleitet
          werden, wodurch zwei Server diese beantworten können.

               (service
                 nginx-service-type
                 (nginx-configuration
                   (server-blocks
                     (list (nginx-server-configuration
                             (server-name '("www.example.com"))
                             (root "/srv/http/www.example.com")
                             (locations
                               (list
                                 (nginx-location-configuration
                                 (uri "/path1")
                                 (body '("proxy_pass http://server-proxy;"))))))))
                   (upstream-blocks
                     (list (nginx-upstream-configuration
                             (name "server-proxy")
                             (servers (list "server1.example.com"
                                            "server2.example.com")))))))

     ‘file’ (Vorgabe: ‘#f’)
          Wenn eine Konfigurationsdatei als FILE angegeben wird, dann
          wird diese benutzt und _keine_ Konfigurationsdatei anhand der
          angegebenen ‘log-directory’, ‘run-directory’, ‘server-blocks’
          und ‘upstream-blocks’ erzeugt. Trotzdem sollten diese
          Argumente bei einer richtigen Konfiguration mit denen in der
          Datei FILE übereinstimmen, damit die Verzeichnisse bei
          Aktivierung des Dienstes erzeugt werden.

          Das kann nützlich sein, wenn Sie schon eine bestehende
          Konfigurationsdatei haben oder das, was Sie brauchen, nicht
          mit anderen Teilen eines nginx-configuration-Verbundsobjekts
          umgesetzt werden kann.

     ‘server-names-hash-bucket-size’ (Vorgabe: ‘#f’)
          Größe der Behälter (englisch „Buckets“) für die Hashtabelle
          der Servernamen; vorgegeben ist ‘#f’, wodurch die Größe der
          Cache-Lines des Prozessors verwendet wird.

     ‘server-names-hash-bucket-max-size’ (Vorgabe: ‘#f’)
          Maximale Behältergröße für die Hashtabelle der Servernamen.

     ‘modules’ (Vorgabe: ‘'()’)
          Die Liste zu ladender dynamisch gebundener Module für nginx.
          Die dynamischen Module sollten als Liste von Dateinamen
          ladbarer Module angegeben werden. Zum Beispiel:

               (modules
                (list
                 (file-append nginx-accept-language-module "\
               /etc/nginx/modules/ngx_http_accept_language_module.so")))

     ‘global-directives’ (Vorgabe: ‘'((events . ()))’)
          Assoziative Liste von globalen Direktiven für die oberste
          Ebene der nginx-Konfiguration. Als Werte können wiederum
          assoziative Listen angegeben werden.

               (global-directives
                `((worker_processes . 16)
                  (pcre_jit . on)
                  (events . ((worker_connections . 1024)))))

     ‘extra-content’ (Vorgabe: ‘""’)
          Zusätzlicher Inhalt des ‘http’-Blocks. Er sollte eine
          Zeichenkette oder ein zeichenkettenwertiger G-Ausdruck.

 -- Datentyp: nginx-server-configuration
     Der Datentyp, der die Konfiguration eines nginx-Serverblocks
     repräsentiert. Dieser Typ hat die folgenden Parameter:

     ‘listen’ (Vorgabe: ‘'("80" "443 ssl")’)
          Jede ‘listen’-Direktive legt Adresse und Port für eine IP fest
          oder gibt einen Unix-Socket an, auf dem der Server Anfragen
          beantwortet. Es können entweder sowohl Adresse als auch Port
          oder nur die Adresse oder nur der Port angegeben werden. Als
          Adresse kann auch ein Rechnername („Hostname“) angegeben
          werden, zum Beispiel:

               '("127.0.0.1:8000" "127.0.0.1" "8000" "*:8000" "localhost:8000")

     ‘server-name’ (Vorgabe: ‘(list 'default)’)
          Eine Liste von Servernamen, die dieser Server repräsentiert.
          ‘'default’ repräsentiert den voreingestellten Server, der für
          Verbindungen verwendet wird, die zu keinem anderen Server
          passen.

     ‘root’ (Vorgabe: ‘"/srv/http"’)
          Wurzelverzeichnis des Webauftritts, der über nginx abgerufen
          werden kann.

     ‘locations’ (Vorgabe: ‘'()’)
          Eine Liste von “nginx-location-configuration”- oder
          “nginx-named-location-configuration”-Verbundsobjekten, die
          innerhalb des Serverblocks benutzt werden.

     ‘index’ (Vorgabe: ‘(list "index.html")’)
          Index-Dateien, mit denen Anfragen nach einem Verzeichnis
          beantwortet werden. Wenn _keine_ davon gefunden wird,
          antwortet Nginx mit der Liste der Dateien im Verzeichnis.

     ‘try-files’ (Vorgabe: ‘'()’)
          Eine Liste der Dateien, bei denen in der angegebenen
          Reihenfolge geprüft wird, ob sie existieren. ‘nginx’
          beantwortet die Anfrage mit der ersten Datei, die es findet.

     ‘ssl-certificate’ (Vorgabe: ‘#f’)
          Wo das Zertifikat für sichere Verbindungen gespeichert ist.
          Sie sollten es auf ‘#f’ setzen, wenn Sie kein Zertifikat haben
          oder kein HTTPS benutzen möchten.

     ‘ssl-certificate-key’ (Vorgabe: ‘#f’)
          Wo der private Schlüssel für sichere Verbindungen gespeichert
          ist. Sie sollten ihn auf ‘#f’ setzen, wenn Sie keinen
          Schlüssel haben oder kein HTTPS benutzen möchten.

     ‘server-tokens?’ (Vorgabe: ‘#f’)
          Ob der Server Informationen über seine Konfiguration bei
          Antworten beilegen soll.

     ‘raw-content’ (Vorgabe: ‘'()’)
          Eine Liste von Zeilen, die unverändert in den Serverblock
          eingefügt werden.

 -- Datentyp: nginx-upstream-configuration
     Der Datentyp, der die Konfiguration eines nginx-‘upstream’-Blocks
     repräsentiert. Dieser Typ hat folgende Parameter:

     ‘name’
          Der Name dieser Servergruppe.

     ‘servers’
          Gibt die Adressen der Server in der Gruppe an. Die Adresse
          kann als IP-Adresse (z.B. ‘127.0.0.1’), Domänenname (z.B.
          ‘backend1.example.com’) oder als Pfad eines Unix-Sockets mit
          dem vorangestellten Präfix ‘unix:’ angegeben werden. Wenn
          Adressen eine IP-Adresse oder einen Domänennamen benutzen, ist
          der voreingestellte Port 80, aber ein abweichender Port kann
          auch explizit angegeben werden.

 -- Datentyp: nginx-location-configuration
     Der Datentyp, der die Konfiguration eines nginx-‘location’-Blocks
     angibt. Der Typ hat die folgenden Parameter:

     ‘uri’
          Die URI, die auf diesen Block passt.

     ‘body’
          Der Rumpf des location-Blocks, der als eine Liste von
          Zeichenketten angegeben werden muss. Er kann viele
          Konfigurationsdirektiven enthalten, zum Beispiel können
          Anfragen an eine Upstream-Servergruppe weitergeleitet werden,
          die mit einem ‘nginx-upstream-configuration’-Block angegeben
          wurde, indem diese Direktive im Rumpf angegeben wird: ‘(list
          "proxy_pass http://upstream-name;")’.

 -- Datentyp: nginx-named-location-configuration
     Der Datentyp repräsentiert die Konfiguration eines mit Namen
     versehenen nginx-location-Blocks („Named Location Block“). Ein mit
     Namen versehener location-Block wird zur Umleitung von Anfragen
     benutzt und nicht für die normale Anfrageverarbeitung. Dieser Typ
     hat die folgenden Parameter:

     ‘name’
          Der Name, mit dem dieser location-Block identifiziert wird.

     ‘body’
          Siehe *note nginx-location-configuration body::, weil der
          Rumpf („Body“) eines mit Namen versehenen location-Blocks wie
          ein ‘nginx-location-configuration body’ benutzt werden kann.
          Eine Einschränkung ist, dass der Rumpf eines mit Namen
          versehenen location-Blocks keine location-Blöcke enthalten
          kann.

Varnish Cache
.............

Varnish ist ein schneller zwischenspeichernder Server, der zwischen
Web-Anwendungen und deren Endbenutzern sitzt. Er leitet Anfragen von
Clients weiter und lagert die URLs, auf die zugegriffen wird, in einen
Zwischenspeicher ein, damit bei mehreren Anfragen auf dieselbe Ressource
nur eine Anfrage an die Hintergrundanwendung gestellt wird.

 -- Scheme-Variable: varnish-service-type
     Diensttyp für den Varnish-Daemon.

 -- Datentyp: varnish-configuration
     Der Datentyp, der die Konfiguration des ‘varnish’-Dienstes
     repräsentiert. Dieser Typ hat die folgenden Parameter:

     ‘package’ (Vorgabe: ‘varnish’)
          Das Varnish-Paket, was benutzt werden soll.

     ‘name’ (Vorgabe: ‘"default"’)
          Ein Name für diese Varnish-Instanz. Varnish wird ein
          Verzeichnis in ‘/var/varnish/’ mit diesem Namen erzeugen und
          dort temporäre Dateien speichern. Wenn der Name mit einem
          Schrägstrich beginnt, wird er als absoluter Verzeichnispfad
          interpretiert.

          Übergeben Sie die Befehlszeilenoption ‘-n’ an andere
          Varnish-Programme, um sich mit der Instanz diesen Namens zu
          verbinden, z.B. ‘varnishncsa -n default’.

     ‘backend’ (Vorgabe: ‘"localhost:8080"’)
          Welcher Hintergrunddienst benutzt werden soll. Diese Option
          wird ignoriert, wenn ‘vcl’ gesetzt ist.

     ‘vcl’ (Vorgabe: #f)
          Das “VCL”-Programm (in der Varnish Configuration Language),
          das ausgeführt werden soll. Ist dies auf ‘#f’ gesetzt,
          fungiert Varnish als Proxy für den Hintergrunddienst ‘backend’
          mit der voreingestellten Konfiguration. Andernfalls muss dies
          ein dateiartiges Objekt mit gültiger VCL-Syntax sein.

          Um zum Beispiel mit VCL einen Spiegelserver für www.gnu.org
          (https://www.gnu.org) einzurichten, können Sie so etwas
          benutzen:

               (define %gnu-mirror
                 (plain-file "gnu.vcl"
                             "vcl 4.1;
               backend gnu { .host = \"www.gnu.org\"; }"))

               (operating-system
                 ;; ...
                 (services (cons (service varnish-service-type
                                          (varnish-configuration
                                           (listen '(":80"))
                                           (vcl %gnu-mirror)))
                                 %base-services)))

          Die Konfiguration einer bereits laufenden Varnish-Instanz kann
          mit dem Programm ‘varnishadm’ eingesehen und verändert werden.

          Ziehen Sie die Varnish User Guide
          (https://varnish-cache.org/docs/) und das Varnish Book
          (https://book.varnish-software.com/4.0/) zu Rate, wenn Sie
          eine umfassende Dokumentation zu Varnish und seiner
          Konfigurationssprache suchen.

     ‘listen’ (Vorgabe: ‘'("localhost:80")’)
          Liste der Adressen, auf denen Varnish lauschen soll.

     ‘storage’ (Vorgabe: ‘'("malloc,128m")’)
          Liste der Speicher-Hintergrunddienste („Storage Backends“),
          die von der VCL aus benutzt werden können.

     ‘parameters’ (Vorgabe: ‘'()’)
          Liste der Laufzeitparameter von der Form ‘'(("Parameter" .
          "Wert"))’.

     ‘extra-options’ (Vorgabe: ‘'()’)
          Zusätzliche Argumente, die an den ‘varnishd’-Prozess übergeben
          werden.

Patchwork
.........

Patchwork ist ein System, um eingereichten Patches zu folgen. Es kann an
eine Mailing-Liste geschickte Patches sammeln und auf einer
Web-Oberfläche anzeigen.

 -- Scheme-Variable: patchwork-service-type
     Diensttyp für Patchwork.

   Es folgt ein Minimalbeispiel für einen Patchwork-Dienst, der auf der
Domain ‘patchwork.example.com’ läuft.

     (service patchwork-service-type
              (patchwork-configuration
               (domain "patchwork.example.com")
               (settings-module
                (patchwork-settings-module
                 (allowed-hosts (list domain))
                 (default-from-email "patchwork@patchwork.example.com")))
               (getmail-retriever-config
                (getmail-retriever-configuration
                 (type "SimpleIMAPSSLRetriever")
                 (server "imap.example.com")
                 (port 993)
                 (username "patchwork")
                 (password-command
                  (list (file-append coreutils "/bin/cat")
                        "/etc/getmail-patchwork-imap-password"))
                 (extra-parameters
                 '((mailboxes . ("Patches"))))))))


   Der Patchwork-Dienst wird über drei Verbundsobjekte konfiguriert. Die
‘<patchwork-configuration>’ hat mit der Konfiguration von Patchwork
innerhalb des HTTPD-Dienstes zu tun.

   Das ‘settings-module’-Feld innerhalb des
‘<patchwork-configuration>’-Verbundsobjekts kann mit einem
‘<patchwork-settings-module>’-Verbundsobjekt ausgefüllt werden, das ein
im Guix-Store angelegtes Einstellungsmodul beschreibt.

   Für das ‘database-configuration’-Feld innerhalb des
‘<patchwork-settings-module>’ muss eine
‘<patchwork-database-configuration>’ benutzt werden.

 -- Datentyp: patchwork-configuration
     Der Datentyp, der die Konfiguration des Patchwork-Dienstes
     repräsentiert. Dieser Typ hat die folgenden Parameter:

     ‘patchwork’ (Vorgabe: ‘patchwork’)
          Welches Patchwork-Paket benutzt werden soll.

     ‘domain’
          Welche Domain für Patchwork benutzt werden soll. Sie findet
          Verwendung in Patchworks virtuellen Rechner („Virtual Host“)
          für den HTTPD-Dienst.

     ‘settings-module’
          Das durch Patchwork benutzte Einstellungsmodul. Als eine
          Django-Anwendung wird Patchwork mit einem Python-Modul
          konfiguriert, das die Einstellungen speichert. Es kann
          entweder eine Instanz des
          ‘<patchwork-settings-module>’-Verbundstyps sein, ein
          beliebiges anderes Verbundsobjekt sein, das die Einstellungen
          im Store repräsentiert, oder ein Verzeichnis außerhalb des
          Stores.

     ‘static-path’ (Vorgabe: ‘"/static/"’)
          Der Pfad, auf dem der HTTPD-Dienst die statischen Dateien
          anbieten soll.

     ‘getmail-retriever-config’
          Das durch Patchwork benutzte
          getmail-retriever-configuration-Verbundsobjekt. Getmail wird
          mit diesem Wert konfiguriert. Die Mitteilungen werden mit
          Patchwork als Empfänger zugestellt.

 -- Datentyp: patchwork-settings-module
     Der Datentyp, der das Einstellungsmodul für Patchwork
     repräsentiert. Manche dieser Einstellungen haben direkt mit
     Patchwork zu tun, andere beziehen sich auf Django, dem
     Web-Framework auf dem Patchwork aufsetzt, oder dessen
     Django-Rest-Framework-Bibliothek. Dieser Typ verfügt über die
     folgenden Parameter:

     ‘database-configuration’ (Vorgabe: ‘(patchwork-database-configuration)’)
          Die für Patchwork benutzten Datenbankverbindungseinstellungen.
          Siehe den ‘<patchwork-database-configuration>’-Verbundstyp für
          weitere Informationen.

     ‘secret-key-file’ (Vorgabe: ‘"/etc/patchwork/django-secret-key"’)
          Patchwork benutzt als eine Django-Webanwendung einen geheimen
          Schlüssel, um Werte kryptographisch zu signieren. Diese Datei
          sollte einen einzigartigen, unvorhersehbaren Wert enthalten.

          Wenn diese Datei nicht existiert, wird sie erzeugt und ein
          zufälliger Wert wird durch den Shepherd-Dienst für
          patchwork-setup hineingeschrieben.

          Diese Einstellung bezieht sich auf Django.

     ‘allowed-hosts’
          Eine Liste zulässiger Netzwerkschnittstellen (Hosts), auf
          denen dieser Patchwork-Dienst antwortet. Sie sollte wenigstens
          die im ‘<patchwork-configuration>’-Verbundsobjekt genannte
          Domain enthalten.

          Dies ist eine Django-Einstellung.

     ‘default-from-email’
          Die E-Mail-Adresse, von der aus Patchwork nach Voreinstellung
          E-Mails verschicken soll.

          Dies ist eine Patchwork-Einstellung.

     ‘static-url’ (Vorgabe: ‘#f’)
          Die URL, über die statische Dokumente angeboten werden. Es
          kann eine teilweise URL oder eine vollständige URL angegeben
          werden, aber sie muss auf ‘/’ enden.

          Wenn der Vorgabewert benutzt wird, wird der ‘static-path’-Wert
          aus dem ‘<patchwork-configuration>’-Verbundsobjekt benutzt.

          Dies ist eine Django-Einstellung.

     ‘admins’ (Vorgabe: ‘'()’)
          Die E-Mail-Adressen, an die Details zu auftretenden Fehlern
          versendet werden. Jeder Wert sollte eine zweielementige Liste
          mit dem Namen und der E-Mail-Adresse sein.

          Dies ist eine Django-Einstellung.

     ‘debug?’ (Vorgabe: ‘#f’)
          Ob Patchwork im Fehlersuchmodus („Debug Mode“) ausgeführt
          werden soll. Wenn dies auf ‘#t’ steht, werden detaillierte
          Fehlermeldungen angezeigt.

          Dies ist eine Django-Einstellung.

     ‘enable-rest-api?’ (Vorgabe: ‘#t’)
          Ob Patchworks REST-Programmschnittstelle („REST-API“)
          aktiviert werden soll.

          Dies ist eine Patchwork-Einstellung.

     ‘enable-xmlrpc?’ (Vorgabe: ‘#t’)
          Ob die XML-Programmschnittstelle für entfernte Prozeduraufrufe
          („XML-RPC-API“) aktiviert werden soll.

          Dies ist eine Patchwork-Einstellung.

     ‘force-https-links?’ (Vorgabe: ‘#t’)
          Ob auf den Webseiten von Patchwork die Verweise auf andere
          Seiten HTTPS verwenden sollen.

          Dies ist eine Patchwork-Einstellung.

     ‘extra-settings’ (Vorgabe: ‘""’)
          Zusätzlicher Code, der am Ende des
          Patchwork-Einstellungsmoduls platziert werden soll.

 -- Datentyp: patchwork-database-configuration
     Der Datentyp, der die Datenbankkonfiguration für Patchwork
     repräsentiert.

     ‘engine’ (Vorgabe: ‘"django.db.backends.postgresql_psycopg2"’)
          Welcher Datenbanktreiber („Engine“) benutzt werden soll.

     ‘name’ (Vorgabe: ‘"patchwork"’)
          Der Name der zu benutzenden Datenbank.

     ‘user’ (Vorgabe: ‘"httpd"’)
          Der Benutzer, als der sich Patchwork mit der Datenbank
          verbindet.

     ‘password’ (Vorgabe: ‘""’)
          Das Passwort, das zum Herstellen einer Verbindung zur
          Datenbank verwendet werden soll.

     ‘host’ (Vorgabe: ‘""’)
          Der Rechner, mit dem die Datenbankverbindung hergestellt wird.

     ‘port’ (Vorgabe: ‘""’)
          Der Port, auf dem sich Patchwork mit der Datenbank verbindet.

Mumi
....

Mumi (https://git.elephly.net/gitweb.cgi?p=software/mumi.git) ist eine
Weboberfläche für Debbugs, einem System, um Fehlerberichte zu verwalten.
Nach Vorgabe zeigt es die bei GNU angebotene Debbugs-Instanz
(https://bugs.gnu.org). Mumi ist ein Web-Server, er lädt aber auch
E-Mails von Debbugs herunter und indiziert diese.

 -- Scheme-Variable: mumi-service-type
     Dies ist der Diensttyp für Mumi.

 -- Datentyp: mumi-configuration
     Der Datentyp, der die Konfiguration des Mumi-Dienstes
     repräsentiert. Dieser Typ hat die folgenden Felder:

     ‘mumi’ (Vorgabe: ‘mumi’)
          Das zu verwendende Mumi-Paket.

     ‘mailer?’ (Vorgabe: ‘#true’)
          Ob die Komponente zum Mailversand aktiviert sein soll oder
          nicht.

     ‘mumi-configuration-sender’
          Die E-Mail-Adresse, die bei Kommentaren als Absender angegeben
          wird.

     ‘mumi-configuration-smtp’
          Eine URI, um die SMTP-Einstellungen für Mailutils
          einzurichten. Hierfür könnte etwas wie
          ‘sendmail:///path/to/bin/msmtp’ angegeben werden, oder eine
          beliebige andere URI, die von Mailutils unterstützt wird.
          Siehe *note SMTP Mailboxes: (mailutils)SMTP Mailboxes.

FastCGI
.......

FastCGI ist eine Schnittstelle zwischen den Anwendungen im Vordergrund
(„Front-End“) und Hintergrund („Back-End“) eines Webdienstes. Die Rolle,
die es ausübt, ist nicht mehr ganz aktuell, weil neue Webdienste im
Allgemeinen einfach über HTTP zwischen Vorder- und Hintergrund
kommunizieren sollten. Allerdings gibt es eine Menge von
Hintergrunddiensten wie PHP oder den optimierten Git-Repository-Zugang
über HTTP, welche FastCGI benutzen, also wird es auch in Guix
unterstützt.

   Um FastCGI zu benutzen, konfigurieren Sie den Webserver im
Vordergrund (z.B. nginx) so, dass er eine Teilmenge der Anfragen an die
fastcgi-Hintergrundanwendung weiterleitet, dass auf einem lokalen TCP-
oder Unix-Socket lauscht. Ein dazwischenliegendes ‘fcgiwrap’-Programm
sitzt zwischen dem eigentlichen Hintergrundprozess und dem Webserver.
Vom Vordergrund wird angezeigt, welches Hintergrundprogramm ausgeführt
werden soll. Diese Informationen werden an den ‘fcgiwrap’-Prozess
übermittelt.

 -- Scheme-Variable: fcgiwrap-service-type
     Ein Diensttyp für den ‘fcgiwrap’-FastCGI-Proxy.

 -- Datentyp: fcgiwrap-configuration
     Der Datentyp, der die Konfiguration des ‘fcgiwrap’-Dienstes
     repräsentiert. Dieser Typ hat die folgenden Parameter:
     ‘package’ (Vorgabe: ‘fcgiwrap’)
          Welches fcgiwrap-Paket benutzt werden soll.

     ‘socket’ (Vorgabe: ‘tcp:127.0.0.1:9000’)
          Der Socket, auf dem der ‘fcgiwrap’-Prozess lauschen soll, als
          eine Zeichenkette. Gültige Werte für SOCKET wären unter
          anderem ‘unix:/PFAD/ZUM/UNIX/SOCKET’,
          ‘tcp:VIER.TEILE.GEPUNKT.ET:PORT’ und
          ‘tcp6:[IPV6-ADRESSE]:Port’.

     ‘user’ (Vorgabe: ‘fcgiwrap’)
     ‘group’ (Vorgabe: ‘fcgiwrap’)
          Die Benutzerkonten- und Gruppennamen als Zeichenketten, unter
          denen der ‘fcgiwrap’-Prozess ausgeführt werden soll. Der
          ‘fastcgi’-Dienst wird sicherstellen, dass, wenn der Nutzer den
          Benutzer- oder Gruppennamen ‘fcgiwrap’ verlangt, der
          entsprechende Benutzer und/oder Gruppe auch auf dem System
          existiert.

          Es ist möglich, einen FastCGI-gestützten Webdienst so zu
          konfigurieren, dass er HTTP-Authentisierungsinformationen vom
          Vordergrundserver an das Hintergrundsystem weiterreicht und es
          ‘fcgiwrap’ möglich macht, den Hintergrundprozess als ein
          entsprechender lokaler Nutzer auszuführen. Um dem
          Hintergrundsystem diese Funktionalität anzubieten, lassen Sie
          ‘fcgiwrap’ als der Administratornutzer ‘root’ mit selbiger
          Gruppe ausführen. Beachten Sie, dass die Funktionalität auch
          auf dem Vordergrundsystem erst eingerichtet werden muss.

   PHP-FPM (FastCGI Process Manager) ist eine alternative
PHP-FastCGI-Implementierung, die über einige zusätzliche
Funktionalitäten verfügt, die für Webauftritte jeder Größe nützlich
sind.

   Zu diesen Funktionalitäten gehören:
   • Prozesserzeugung nach Bedarf
   • Grundlegende Statistiken (ähnlich wie Apaches mod_status)
   • Fortschrittliche Prozessverwaltung mit sanftem Stoppen und Starten
   • Die Möglichkeit, Arbeiter-Threads mit verschiedenen UIDs, GIDs,
     Chroot- oder Umgebungseinstellungen zu starten und mit
     verschiedener php.ini (als Ersatz für safe_mode)
   • Protokollierung der Standard- und Standardfehlerausgabe
   • Neustart im Notfall einer ungewollten Zerstörung des
     Befehlscode-Zwischenspeichers
   • Unterstützung für beschleunigtes Hochladen
   • Unterstützung für „langsames Protokollieren“ („slowlog“)
   • Verbesserungen gegenüber FastCGI, wie z.B. fastcgi_finish_request()
     — eine besondere Funktion, um eine Anfrage fertig abzuarbeiten und
     alle Daten zu Ende zu verarbeiten, während etwas Zeitintensives
     abläuft (Videokonvertierung, Statistikverarbeitung usw.)
   … und vieles mehr.

 -- Scheme-Variable: php-fpm-service-type
     Ein Diensttyp für ‘php-fpm’.

 -- Datentyp: php-fpm-configuration
     Datentyp für die Konfiguration des php-fpm-Dienstes.
     ‘php’ (Vorgabe: ‘php’)
          Das zu benutzende PHP-Paket.
     ‘socket’ (Vorgabe: ‘(string-append "/var/run/php" (version-major (package-version php)) "-fpm.sock")’)
          Die Adresse, auf der FastCGI-Anfragen angenommen werden.
          Gültige Syntax hierfür ist:
          ‘"ip.ad.res.se:Port"’
               Lässt auf einem TCP-Socket auf der angegebenen Adresse
               auf dem angegebenen Port lauschen.
          ‘"port"’
               Lässt auf einem TCP-Socket auf allen Adressen auf dem
               angegebenen Port lauschen.
          ‘"/pfad/zum/unix/socket"’
               Lässt auf einem Unix-Socket lauschen.

     ‘user’ (Vorgabe: ‘php-fpm’)
          Der Benutzer, dem die PHP-Arbeiterprozesse gehören werden.
     ‘group’ (Vorgabe: ‘php-fpm’)
          Die Gruppe für die Arbeiterprozesse.
     ‘socket-user’ (Vorgabe: ‘php-fpm’)
          Der Benutzer, der mit dem php-fpm-Socket kommunizieren kann.
     ‘socket-group’ (Vorgabe: ‘nginx’)
          Die Gruppe, die mit dem php-fpm-Socket kommunizieren kann.
     ‘pid-file’ (Vorgabe: ‘(string-append "/var/run/php" (version-major (package-version php)) "-fpm.pid")’)
          Der Prozessidentifikator des php-fpm-Prozesses wird in diese
          Datei geschrieben, sobald der Dienst gestartet wurde.
     ‘log-file’ (Vorgabe: ‘(string-append "/var/log/php" (version-major (package-version php)) "-fpm.log")’)
          Wohin das Protokoll für den php-fpm-Hauptprozess geschrieben
          wird.
     ‘process-manager’ (Vorgabe: ‘(php-fpm-dynamic-process-manager-configuration)’)
          Detaillierte Einstellungen für die php-fpm-Prozessverwaltung.
          Sie müssen eines der Folgenden sein:
          ‘<php-fpm-dynamic-process-manager-configuration>’
          ‘<php-fpm-static-process-manager-configuration>’
          ‘<php-fpm-on-demand-process-manager-configuration>’
     ‘display-errors’ (Vorgabe: ‘#f’)
          Legt fest, ob PHP-Fehler und Warnungen an Clients geschickt
          und in ihren Browsern angezeigt werden. Dies ist nützlich für
          lokale PHP-Entwicklung, aber ein Sicherheitsrisiko für
          öffentliche Webauftritte, weil Fehlermeldungen Passwörter und
          Passwortdaten offenlegen können.
     ‘timezone’ (Vorgabe: ‘#f’)
          Legt den Parameter ‘php_admin_value[date.timezone]’ fest.
     ‘workers-logfile’ (Vorgabe: ‘(string-append "/var/log/php" (version-major (package-version php)) "-fpm.www.log")’)
          In dieser Datei werden ‘stderr’-Ausgaben von
          PHP-Arbeiterprozessen protokolliert. Das Feld kann auf ‘#f’
          gesetzt werden, damit nicht protokolliert wird.
     ‘file’ (Vorgabe: ‘#f’)
          Optional kann hier ein vorrangig benutzter Ersatz für die
          gesamte Konfigurationsdatei angegeben werden. Sie können dafür
          die ‘mixed-text-file’-Funktion oder einen absoluten Dateipfad
          verwenden.

 -- Datentyp: php-fpm-dynamic-process-manager-configuration
     Datentyp für die _dynamische_ Prozessverwaltung durch php-fpm. Bei
     der _dynamischen_ Prozessverwaltung bleiben Arbeiterprozesse nach
     Abschluss ihrer Aufgabe weiterhin erhalten, solange die
     konfigurierten Beschränkungen eingehalten werden.
     ‘max-children’ (Vorgabe: ‘5’)
          Die maximale Anzahl an Arbeiterprozessen.
     ‘start-servers’ (Vorgabe: ‘2’)
          Wieviele Arbeiterprozesse gleich zu Beginn gestartet werden
          sollen.
     ‘min-spare-servers’ (Vorgabe: ‘1’)
          Wieviele untätige Arbeiterprozesse mindestens weiterhin
          vorgehalten bleiben sollen.
     ‘max-spare-servers’ (Vorgabe: ‘3’)
          Wieviele untätige Arbeiterprozesse höchstens weiterhin
          vorgehalten bleiben sollen.

 -- Datentyp: php-fpm-static-process-manager-configuration
     Datentyp für die _statische_ Prozessverwaltung durch php-fpm. Bei
     der _statischen_ Prozessverwaltung wird eine unveränderliche Anzahl
     an Arbeiterprozessen erzeugt.
     ‘max-children’ (Vorgabe: ‘5’)
          Die maximale Anzahl an Arbeiterprozessen.

 -- Datentyp: php-fpm-on-demand-process-manager-configuration
     Datentyp für die Prozessverwaltung _nach Bedarf_ durch php-fpm. Bei
     der Prozessverwaltung _nach Bedarf_ werden Arbeiterprozesse erst
     erzeugt, wenn Anfragen vorliegen.
     ‘max-children’ (Vorgabe: ‘5’)
          Die maximale Anzahl an Arbeiterprozessen.
     ‘process-idle-timeout’ (Vorgabe: ‘10’)
          Die Zeit in Sekunden, nach der ein Prozess ohne Anfragen
          abgewürgt wird.

 -- Scheme Procedure: nginx-php-location [#:nginx-package nginx]
           [socket (string-append "/var/run/php" (version-major
          (package-version php))  "-fpm.sock")] Eine Hilfsfunktion,
     mit der in kurzer Zeit PHP zu einer ‘nginx-server-configuration’
     hinzugefügt werden kann.

   Eine einfache Art, die Dienste für nginx mit PHP einzurichten, kann
so aussehen:
     (services (cons* (service dhcp-client-service-type)
                      (service php-fpm-service-type)
                      (service nginx-service-type
                               (nginx-server-configuration
                                (server-name '("example.com"))
                                (root "/srv/http/")
                                (locations
                                 (list (nginx-php-location)))
                                (listen '("80"))
                                (ssl-certificate #f)
                                (ssl-certificate-key #f)))
                      %base-services))

   Der Cat Avatar Generator („Katzenavatargenerator“) ist ein einfacher
Dienst, um die Nutzung von php-fpm in ‘Nginx’ zu demonstrieren. Mit ihm
können Katzenavatarbilder aus einem Startwert („Seed“) heraus erzeugt
werden, zum Beispiel aus dem Hash der E-Mail-Adresse eines Benutzers.

 -- Scheme-Prozedur: cat-avatar-generator-service [#:cache-dir
          "/var/cache/cat-avatar-generator"]  [#:package
     cat-avatar-generator]  [#:configuration
     (nginx-server-configuration)] Liefert ein
     nginx-server-configuration-Objekt, das von der in ‘configuration’
     angegebenen Konfiguration erbt. Es erweitert die
     Nginx-Konfiguration, indem es einen Server-Block hinzufügt, der die
     in ‘package’ angegebene Version vom cat-avatar-generator anbietet.
     Bei der Ausführung wird dem cat-avatar-generator Zugriff auf sein
     in ‘cache-dir’ angegebenes Zwischenspeicherverzeichnis gewährt.

   Eine einfache Konfiguration des cat-avatar-generator kann so
aussehen:
     (services (cons* (cat-avatar-generator-service
                       #:configuration
                       (nginx-server-configuration
                         (server-name '("example.com"))))
                      ...
                      %base-services))

Hpcguix-web
...........

Das Programm hpcguix-web (https://github.com/UMCUGenetics/hpcguix-web/)
ist eine anpassbare Weboberfläche, um Guix-Pakete zu suchen. Am Anfang
war es für Nutzer von Hochleistungs-Rechenclustern gedacht
(„High-Performance Computing“, kurz HPC).

 -- Scheme-Variable: hpcguix-web-service-type
     Der Diensttyp für ‘hpcguix-web’.

 -- Datentyp: hpcguix-web-configuration
     Datentyp für die Konfiguration des hpcguix-web-Dienstes.

     ‘specs’
          Ein G-Ausdruck (siehe *note G-Ausdrücke::), der die
          Konfiguration des hpcguix-web-Dienstes festlegt. In dieser
          Spezifikation („Spec“) sollten vor allem diese Sachen
          angegeben werden:

          ‘title-prefix’ (Vorgabe: ‘"hpcguix | "’)
               Das Präfix der Webseitentitel.

          ‘guix-command’ (Vorgabe: ‘"guix"’)
               Der ‘guix’-Befehl.

          ‘package-filter-proc’ (Vorgabe: ‘(const #t)’)
               Eine Prozedur, die festlegt, wie anzuzeigende Pakete
               gefiltert werden.

          ‘package-page-extension-proc’ (Vorgabe: ‘(const '())’)
               Erweiterungspaket für ‘hpcguix-web’.

          ‘menu’ (Vorgabe: ‘'()’)
               Zusätzlicher Eintrag auf der Menüseite.

          ‘channels’ (Vorgabe: ‘%default-channels’)
               Liste der Kanäle, aus denen die Paketliste erstellt wird
               (siehe *note Kanäle::).

          ‘package-list-expiration’ (Vorgabe: ‘(* 12 3600)’)
               Nach wieviel Zeit in Sekunden die Paketliste aus den
               neuesten Instanzen der angegebenen Kanäle neu erzeugt
               wird.

          Siehe das Repository von hpcguix-web für ein vollständiges
          Beispiel
          (https://github.com/UMCUGenetics/hpcguix-web/blob/master/hpcweb-configuration.scm).

     ‘package’ (Vorgabe: ‘hpcguix-web’)
          Das hpcguix-web-Paket, was benutzt werden soll.

   Eine typische Deklaration eines hpcguix-web-Dienstes sieht so aus:

     (service hpcguix-web-service-type
              (hpcguix-web-configuration
               (specs
                #~(define site-config
                    (hpcweb-configuration
                     (title-prefix "Guix-HPC - ")
                     (menu '(("/about" "ABOUT"))))))))

     Anmerkung: Der hpcguix-web-Dienst aktualisiert die Liste der
     Pakete, die er veröffentlicht, periodisch, indem er die Kanäle über
     einen Git-„Pull“ lädt. Dazu muss er auf X.509-Zertifikate
     zugreifen, damit Git-Server authentifiziert werden können, wenn mit
     diesen über HTTPS kommuniziert wird, wofür der Dienst davon
     ausgeht, dass sich jene Zertifikate in ‘/etc/ssl/certs’ befinden.

     Stellen Sie also sicher, dass ‘nss-certs’ oder ein anderes
     Zertifikatspaket im ‘packages’-Feld ihrer Konfiguration steht.
     Siehe *note X.509-Zertifikate:: für weitere Informationen zu
     X.509-Zertifikaten.


File: guix.de.info,  Node: Zertifikatsdienste,  Next: DNS-Dienste,  Prev: Web-Dienste,  Up: Dienste

8.8.17 Zertifikatsdienste
-------------------------

Das Modul ‘(gnu services certbot)’ stellt einen Dienst zur Verfügung, um
automatisch ein gültiges TLS-Zertifikat von der Zertifikatsautorität
Let’s Encrypt zu beziehen. Mit diesen Zertifikaten können Informationen
sicher über HTTPS oder andere TLS-basierte Protokolle übertragen werden,
im Wissen, dass der Client die Authentizität des Servers überprüfen wird
können.

   Let’s Encrypt (https://letsencrypt.org/) macht das ‘certbot’-Werkzeug
verfügbar, mit dem der Zertifizierungsvorgang automatisiert werden kann.
Das Werkzeug erzeugt zunächst auf sichere Weise einen Schlüssel auf dem
Server und stellt dann eine Anfrage an die
Let’s-Encrypt-Zertifikatsautorität („Certificate Authority“, kurz CA),
den Schlüssel zu signieren. Die Zertifikatsautorität prüft mit einem
Challenge-Response-Protokoll, dass die Anfrage auch wirklich vom
fraglichen Rechner (auch „Host“ genannt) kommt, wozu der Server über
HTTP seine Antwort geben muss. Wenn dieses Protokoll erfolgreich befolgt
wurde, signiert die Zertifikatsautorität den Schlüssel, woraus sich ein
Zertifikat ergibt. Dieses Zertifikat ist eine begrenzte Zeit lang
gültig, daher muss der Server für eine andauernde Bereitstellung von
TLS-Leistungen immer wieder neu der Zertifikatsautorität eine Bitte um
die Erneuerung der Signatur zukommen lassen.

   Mit dem certbot-Dienst wird dieser Prozess automatisiert. Er sorgt
dafür, dass am Anfang Schlüssel erzeugt werden und eine erste
Zertifizierungsanfrage an den Dienst von Let’s Encrypt gestellt wird.
Weiterhin ist das Challenge-/Response-Verfahren per Web-Server
integriert. Das Zertifikat wird auf die Platte geschrieben und
automatisch periodisch erneuert und bei der Erneuerung anfallende
Aufgaben werden erledigt (z.B. das Neuladen von Diensten und das
Kopieren von Schlüsseln mit entsprechenden Berechtigungen).

   Certbot wird zweimal täglich zu einer zufälligen Minute der Stunde
ausgeführt. Es tut so lange nichts, bis eine Erneuerung Ihrer
Zertifikate fällig wird oder sie gesperrt wurden, durch regelmäßige
Ausführung bekommen Sie aber die Chance, dass Ihr Server am Netz bleibt,
wenn Let’s Encrypt eine Sperrung aus irgendeinem Grund anordnet.

   Durch die Nutzung dieses Dienstes stimmen Sie dem „ACME Subscriber
Agreement“ zu, das Sie hier finden::
<https://acme-v01.api.letsencrypt.org/directory>.

 -- Scheme-Variable: certbot-service-type
     Ein Diensttyp für den ‘certbot’-Client für Let’s Encrypt. Sein Wert
     muss ein ‘certbot-configuration’-Verbundsobjekt wie in diesem
     Beispiel sein:

          (define %nginx-deploy-hook
            (program-file
             "nginx-deploy-hook"
             #~(let ((pid (call-with-input-file "/var/run/nginx/pid" read)))
                 (kill pid SIGHUP))))

          (service certbot-service-type
                   (certbot-configuration
                    (email "foo@example.net")
                    (certificates
                     (list
                      (certificate-configuration
                       (domains '("example.net" "www.example.net"))
                       (deploy-hook %nginx-deploy-hook))
                      (certificate-configuration
                       (domains '("bar.example.net")))))))

     Siehe unten für Details zur ‘certbot-configuration’.

 -- Datentyp: certbot-configuration
     Datentyp, der die Konfiguration des ‘certbot’-Dienstes
     repräsentiert. Dieser Typ verfügt über die folgenden Parameter:

     ‘package’ (Vorgabe: ‘certbot’)
          Das certbot-Paket, das benutzt werden soll.

     ‘webroot’ (Vorgabe: ‘/var/www’)
          Das Verzeichnis, aus dem heraus die Dateien für den
          Challenge-/Response-Prozess von Let’s Encrypt angeboten werden
          sollen.

     ‘certificates’ (Vorgabe: ‘()’)
          Eine Liste der ‘certificates-configuration’-Objekte, für die
          Zertifikate und Anfragesignaturen erzeugt werden. Für jedes
          Zertifikat gibt es einen ‘name’-Eintrag und mehrere ‘domains’.

     ‘email’
          Die E-Mail-Adresse, die für die Registrierung, als
          Kontaktadresse bei der Wiederherstellung und für wichtige
          Kontenbenachrichtigungen angegeben werden _muss_.

     ‘server’ (Vorgabe: ‘#f’)
          Optional eine andere URL des ACME-Servers. Wenn sie festgelegt
          wird, ersetzt sie die Voreinstellung von Certbot, nämlich die
          URL des Let’s-Encrypt-Servers.

     ‘rsa-key-size’ (Vorgabe: ‘2048’)
          Wie groß der RSA-Schlüssel sein soll.

     ‘default-location’ (Vorgabe: siehe unten)
          Die vorgegebene ‘nginx-location-configuration’. Weil ‘certbot’
          „Challenges“ und „Responses“ anbieten muss, muss durch ihn ein
          Web-Server ausgeführt werden können. Das tut er, indem er den
          ‘nginx’-Webdienst mit einer ‘nginx-server-configuration’
          erweitert, die auf den DOMAINS auf Port 80 lauscht und eine
          ‘nginx-location-configuration’ für den URI-Pfad-Teilraum
          ‘/.well-known/’ umfasst, der von Let’s Encrypt benutzt wird.
          Siehe *note Web-Dienste:: für mehr Informationen über diese
          nginx-Konfigurationsdatentypen.

          Anfragen an andere URL-Pfade werden mit der ‘default-location’
          abgeglichen. Wenn sie angegeben wurde, wird sie zu jeder
          ‘nginx-server-configuration’ hinzugefügt.

          Nach Vorgabe stellt die ‘default-location’ eine Weiterleitung
          von ‘http://DOMAIN/…’ nach ‘https://DOMAIN/…’ her. Sie müssen
          dann nur noch festlegen, was Sie auf Ihrem Webauftritt über
          ‘https’ anbieten wollen.

          Übergeben Sie ‘#f’, um keine ‘default-location’ vorzugeben.

 -- Datentyp: certificate-configuration
     Der Datentyp, der die Konfiguration eines Zertifikats
     repräsentiert. Dieser Typ hat die folgenden Parameter:

     ‘name’ (Vorgabe: siehe unten)
          Dieser Name wird vom Certbot intern zum Aufräumen und in
          Dateipfaden benutzt; er hat keinen Einfluss auf den Inhalt des
          erzeugten Zertifikats. Um Zertifikatsnamen einzusehen, führen
          Sie ‘certbot certificates’ aus.

          Die Vorgabe ist die erste angegebene Domain.

     ‘domains’ (Vorgabe: ‘()’)
          Die erste angegebene Domain wird als Name des
          Zertifikatseigentümers („Subject CN“) benutzt und alle Domains
          werden als alternative Namen („Subject Alternative Names“) auf
          dem Zertifikat stehen.

     ‘challenge’ (Vorgabe: ‘#f’)
          Welche Art von Challenge durch den Certbot ausgeführt wird.
          Wenn ‘#f’ angegeben wird, wird die HTTP-Challenge
          voreingestellt. Wenn ein Wert angegeben wird, wird das Plugin
          benutzt, das auch bei manuellen Ausführungen benutzt wird
          (siehe ‘authentication-hook’, ‘cleanup-hook’ und die
          Dokumentation unter
          <https://certbot.eff.org/docs/using.html#hooks>), und Let’s
          Encrypt wird dazu berechtigt, die öffentliche IP-Adresse der
          anfordernden Maschine in seinem Protokoll zu speichern.

     ‘authentication-hook’ (Vorgabe: ‘#f’)
          Welcher Befehl in einer Shell zum Antworten auf eine
          Zertifikats-„Challenge“ einmalig ausgeführt wird. Für diesen
          Befehl wird die Shell-Variable ‘$CERTBOT_DOMAIN’ die Domain
          enthalten, für die sich der Certbot authentisiert,
          ‘$CERTBOT_VALIDATION’ enthält die Validierungs-Zeichenkette
          und ‘$CERTBOT_TOKEN’ enthält den Dateinamen der bei einer
          HTTP-01-Challenge angefragten Ressource.

     ‘cleanup-hook’ (Vorgabe: ‘#f’)
          Welcher Befehl in einer Shell für jede Zertifikat-„Challenge“
          einmalig ausgeführt wird, die vom ‘auth-hook’ beantwortet
          wurde. Für diesen Befehl bleiben die Shell-Variablen weiterhin
          verfügbar, die im ‘auth-hook’-Skript zur Verfügung standen,
          und außerdem wird ‘$CERTBOT_AUTH_OUTPUT’ die Standardausgabe
          des ‘auth-hook’-Skripts enthalten.

     ‘deploy-hook’ (Vorgabe: ‘#f’)
          Welcher Befehl in einer Shell für jedes erfolgreich
          ausgestellte Zertifikat einmalig ausgeführt wird. Bei diesem
          Befehl wird die Shell-Variable ‘$RENEWED_LINEAGE’ auf das
          Unterverzeichnis für die aktuelle Konfiguration zeigen (zum
          Beispiel ‘"/etc/letsencrypt/live/example.com"’), in dem sich
          die neuen Zertifikate und Schlüssel befinden. Die
          Shell-Variable ‘$RENEWED_DOMAINS’ wird eine
          leerzeichengetrennte Liste der erneuerten Zertifikatsdomänen
          enthalten (zum Beispiel ‘"example.com www.example.com"’.

   Für jede ‘certificate-configuration’ wird das Zertifikat in
‘/etc/letsencrypt/live/NAME/fullchain.pem’ und der Schlüssel in
‘/etc/letsencrypt/live/NAME/privkey.pem’ gespeichert.


File: guix.de.info,  Node: DNS-Dienste,  Next: VPN-Dienste,  Prev: Zertifikatsdienste,  Up: Dienste

8.8.18 DNS-Dienste
------------------

Das Modul ‘(gnu services dns)’ stellt Dienste zur Verfügung, die mit dem
“Domain Name System” (DNS) zu tun haben. Es bietet einen Server-Dienst
an, mit dem ein _autoritativer_ DNS-Server für mehrere Zonen betrieben
werden kann, jeweils als untergeordneter „Slave“ oder als „Master“.
Dieser Dienst benutzt Knot DNS (https://www.knot-dns.cz/). Außerdem wird
ein zwischenspeichernder und weiterleitender DNS-Server für das LAN
bereitgestellt, der dnsmasq
(http://www.thekelleys.org.uk/dnsmasq/doc.html) benutzt.

Knot-Dienst
...........

Eine Beispielkonfiguration eines autoritativen Servers für zwei Zonen,
eine „Master“, eine „Slave“, wäre:

     (define-zone-entries example.org.zone
     ;; Name TTL Class Type Data
       ("@"  ""  "IN"  "A"  "127.0.0.1")
       ("@"  ""  "IN"  "NS" "ns")
       ("ns" ""  "IN"  "A"  "127.0.0.1"))

     (define master-zone
       (knot-zone-configuration
         (domain "example.org")
         (zone (zone-file
                 (origin "example.org")
                 (entries example.org.zone)))))

     (define slave-zone
       (knot-zone-configuration
         (domain "plop.org")
         (dnssec-policy "default")
         (master (list "plop-master"))))

     (define plop-master
       (knot-remote-configuration
         (id "plop-master")
         (address (list "208.76.58.171"))))

     (operating-system
       ;; ...
       (services (cons* (service knot-service-type
                          (knot-configuration
                            (remotes (list plop-master))
                            (zones (list master-zone slave-zone))))
                        ;; ...
                        %base-services)))

 -- Scheme-Variable: knot-service-type
     Dies ist der Diensttyp für den Knot-DNS-Server.

     Knot DNS ist ein autoritativer DNS-Server, das heißt, er kann
     mehrere Zonen bedienen, also mehrere Domainnamen, die Sie von einem
     Registrar kaufen würden. Dieser Server ist kein „Resolver“, er
     dient also nur zur Auflösung von Namen, für die er autoritativ ist.
     Dieser Server kann so konfiguriert werden, dass er Zonen als
     „Master“-Server oder als „Slave“-Server bereitstellt, je nachdem,
     wie er für die jeweilige Zone eingestellt ist. Server für
     „Slave“-Zonen erhalten ihre Daten von „Master“-Servern und stellen
     mit ihnen einen autoritativen Server zur Verfügung. Für einen
     „Resolver“ macht es keinen Unterschied, ob er Namen auflöst, indem
     er einen „Master“ oder einen „Slave“ danach fragt.

     Die folgenden Datentypen werden benutzt, um den Knot-DNS-Server zu
     konfigurieren:

 -- Datentyp: knot-key-configuration
     Datentyp, der einen Schlüssel repräsentiert. Dieser Typ hat die
     folgenden Parameter:

     ‘id’ (Vorgabe: ‘""’)
          Ein Identifikator, mit dem sich andere Konfigurationsfelder
          auf diesen Schlüssel beziehen können. IDs müssen eindeutig
          sein und dürfen _nicht_ leer sein.

     ‘algorithm’ (Vorgabe: ‘#f’)
          Der Algorithmus, der benutzt werden soll. Wählen Sie zwischen
          ‘#f’, ‘'hmac-md5’, ‘'hmac-sha1’, ‘'hmac-sha224’,
          ‘'hmac-sha256’, ‘'hmac-sha384’ und ‘'hmac-sha512’.

     ‘secret’ (Vorgabe: ‘""’)
          Was dabei der geheime Schlüssel sein soll.

 -- Datentyp: knot-acl-configuration
     Datentyp, der die Konfiguration einer Zugriffssteuerungsliste
     („Access Control List“, ACL) repräsentiert. Dieser Typ hat die
     folgenden Parameter:

     ‘id’ (Vorgabe: ‘""’)
          Ein Identifikator, mit dem sich andere Konfigurationsfelder
          auf diesen Schlüssel beziehen können. IDs müssen eindeutig
          sein und dürfen _nicht_ leer sein.

     ‘address’ (Vorgabe: ‘'()’)
          Eine geordnete Liste aus IP-Adresse, Netzwerk-Subnetzen oder
          Netzwerkbereichen, die jeweils als Zeichenketten angegeben
          werden. Die Anfrage muss zu einem davon passen. Ein leerer
          Wert bedeutet, dass die Adresse nicht passen muss.

     ‘key’ (Vorgabe: ‘'()’)
          Eine geordnete Liste von Referenzen auf Schlüssel, die jeweils
          als Zeichenketten angegeben werden. Die Zeichenkette muss zu
          einem Schlüsselidentifikator passen, der in einem der
          ‘knot-key-configuration’-Objekte definiert wurde. Wenn kein
          Schlüssel angegeben wird, bedeutet das, dass kein Schlüssel zu
          dieser Zugriffssteuerungsliste passen muss.

     ‘action’ (Vorgabe: ‘'()’)
          Eine geordete Liste der Aktionen, die von dieser
          Zugriffssteuerungsliste zugelassen oder gesperrt werden.
          Mögliche Werte sind Listen aus null oder mehr Elementen, die
          jeweils ‘'transfer’, ‘'notify’ oder ‘'update’ sind.

     ‘deny?’ (Vorgabe: ‘#f’)
          Wenn dies auf wahr steht, werden mit der
          Zugriffssteuerungsliste Einschränkungen festgelegt, d.h.
          aufgelistet Aktionen werden gesperrt. Steht es auf falsch,
          werden aufgelistete Aktionen zugelassen.

 -- Datentyp: zone-entry
     Datentyp, der einen Eintrag in einer Zonendatei repräsentiert.
     Dieser Typ verfügt über die folgenden Parameter:

     ‘name’ (Vorgabe: ‘"@"’)
          Der Name des Eintrags. ‘"@"’ bezieht sich auf den Ursprung der
          Zone. Namen sind relativ zum Ursprung der Zone. Zum Beispiel
          bezieht sich in einer Zone ‘example.org’ der Eintrag
          ‘"ns.example.org"’ tatsächlich auf
          ‘ns.example.org.example.org’. Namen, die auf einen Punkt
          enden, sind absolut. Das bedeutet, dass sich
          ‘"ns.example.org."’ auf ‘ns.example.org’ bezieht.

     ‘ttl’ (Vorgabe: ‘""’)
          Wie lange dieser Eintrag zwischengespeichert werden darf, d.h.
          seine „Time-To-Live“ (TTL). Ist sie nicht festgelegt, wird die
          voreingestellte TTL benutzt.

     ‘class’ (Vorgabe: ‘"IN"’)
          Welche Klasse der Eintrag hat. Derzeit unterstützt Knot nur
          ‘"IN"’ und teilweise ‘"CH"’.

     ‘type’ (Vorgabe: ‘"A"’)
          Der Typ des Eintrags. Zu den üblichen Typen gehören A (für
          eine IPv4-Adresse), AAAA (für eine IPv6-Adresse), NS (der
          Namens-Server) und MX („Mail eXchange“ für E-Mails). Viele
          andere Typen sind auch definiert.

     ‘data’ (Vorgabe: ‘""’)
          Die Daten, die im Eintrag stehen, zum Beispiel eine IP-Adresse
          bei einem A-Eintrag oder ein Domain-Name bei einem NS-Eintrag.
          Bedenken Sie, dass Domain-Namen relativ zum Ursprung angegeben
          werden, außer wenn sie auf einen Punkt enden.

 -- Datentyp: zone-file
     Datentyp, der den Inhalt einer Zonendatei repräsentiert. Dieser Typ
     verfügt über die folgenden Parameter:

     ‘entries’ (Vorgabe: ‘'()’)
          Die Liste der Einträge. Für den SOA-Eintrag wird automatisch
          gesorgt, also müssen Sie ihn nicht zur Liste der Einträge
          hinzufügen. In der Liste sollte vermutlich ein Eintrag für
          Ihren primären autoritativen DNS-Server stehen. Abgesehen vom
          direkten Aufzählen der Einträge können Sie
          ‘define-zone-entries’ verwenden, um ein Objekt zu definieren,
          worin eine Liste von Einträgen leichter angegeben werden kann,
          und was sie dann im ‘entries’-Feld des ‘zone-file’ angeben
          können.

     ‘origin’ (Vorgabe: ‘""’)
          Der Name Ihrer Zone. Dieser Parameter darf nicht leer sein.

     ‘ns’ (Vorgabe: ‘"ns"’)
          Die Domain Ihres primären autoritativen DNS-Servers. Der Name
          wird relativ zum Ursprung angegeben, außer wenn er auf einen
          Punkt endet. Dieser primäre DNS-Server _muss_ verpflichtend
          einem NS-Eintrag in der Zone entsprechen, dem eine IP-Adresse
          in der Liste der Einträge zugeordnet werden muss.

     ‘mail’ (Vorgabe: ‘"hostmaster"’)
          Eine E-Mail-Adresse, unter der man Sie als für diese Zone
          Verantwortlichen („Besitzer“/„Owner“) kontaktieren kann. Sie
          wird zu ‘<mail>@<origin>’ umgeschrieben.

     ‘serial’ (Vorgabe: ‘1’)
          Die Seriennummer der Zone. Da sie von sowohl „Slaves“ als auch
          „Resolvern“ benutzt wird, um bei Änderungen auf dem Laufenden
          zu bleiben, ist es notwendig, dass sie _niemals_ kleiner
          gemacht wird. Erhöhen Sie sie, wann immer Sie eine Änderung an
          Ihrer Zone durchführen.

     ‘refresh’ (Vorgabe: ‘(* 2 24 3600)’)
          Die Häufigkeit, wie oft Slaves eine Zonenübertragung („Zone
          Transfer“) durchführen. Als Wert wird eine Anzahl von Sekunden
          angegeben. Sie kann über eine Multiplikation oder mit
          ‘(string->duration)’ angegeben werden.

     ‘retry’ (Vorgabe: ‘(* 15 60)’)
          Nach welcher Zeitperiode ein Slave versuchen wird, Kontakt mit
          seinem Master aufzunehmen, wenn er ihn beim ersten Mal nicht
          erreichen kann.

     ‘expiry’ (Vorgabe: ‘(* 14 24 3600)’)
          Die Voreinstellung, welche TTL für Einträge verwendet werden
          soll. Bestehende Einträge werden für höchstens diese
          Zeitspanne als korrekt angesehen. Nach Ablauf dieser
          Zeitspanne werden „Resolver“ ihren Zwischenspeicher als
          ungültig markieren und erneut prüfen, ob der Eintrag noch
          existiert.

     ‘nx’ (Vorgabe: ‘3600’)
          Die voreingestellte TTL der _nicht_ existierenden Einträge.
          Sie stellt normalerweise eine kurze Verzögerung dar, weil Sie
          möchten, dass neue Domains für jeden schnell erkannt werden.

 -- Datentyp: knot-remote-configuration
     Datentyp, der die Konfiguration eines entfernten Servers („Remote“)
     repräsentiert. Dieser Typ verfügt über die folgenden Parameter:

     ‘id’ (Vorgabe: ‘""’)
          Ein Identifikator, mit dem man sich in anderen
          Konfigurationsfeldern auf diesen entfernten Server („Remote“)
          beziehen kann. IDs müssen eindeutig sein und dürfen _nicht_
          leer sein.

     ‘address’ (Vorgabe: ‘'()’)
          Eine geordnete Liste der Empfänger-IP-Adressen. Adressen
          werden der Reihe nach durchprobiert. Optional kann eine
          Portnummer nach dem Trennzeichen @ angegeben werden, zum
          Beispiel als ‘(list "1.2.3.4" "2.3.4.5@53")’. Die Vorgabe ist
          53.

     ‘via’ (Vorgabe: ‘'()’)
          Eine geordnete Liste der Quell-IP-Adressen. Eine leere Liste
          wird Knot eine sinnvolle Quell-IP-Adresse auswählen lassen.
          Optional kann eine Portnummer nach dem Trennzeichen @
          angegeben werden. Die Vorgabe wird zufällig ausgewählt.

     ‘key’ (Vorgabe: ‘#f’)
          Ein Verweis auf einen Schlüssel („Key“), also eine
          Zeichenkette, die den Identifikator eines Schlüssels enthält,
          der in einem ‘knot-key-configuration’-Feld festgelegt wurde.

 -- Datentyp: knot-keystore-configuration
     Datentyp, der einen Schlüsselspeicher („Keystore“) repräsentiert,
     um DNSSEC-Schlüssel zu fassen. Dieser Typ verfügt über die
     folgenden Parameter:

     ‘id’ (Vorgabe: ‘""’)
          Der Identifikator des Schlüsselspeichers. Er darf nicht leer
          gelassen werden.

     ‘backend’ (Vorgabe: ‘'pem’)
          Die Art von Hintergrundspeicher, in dem Schlüssel eingetragen
          werden. Sie kann ‘'pem’ oder ‘'pkcs11’ sein.

     ‘config’ (Vorgabe: ‘"/var/lib/knot/keys/keys"’)
          Die Zeichenkette mit der Konfiguration des
          Hintergrundspeichers. Ein Beispiel für die PKCS#11 ist
          ‘"pkcs11:token=knot;pin-value=1234
          /gnu/store/…/lib/pkcs11/libsofthsm2.so"’. Für pem als
          Hintergrundspeicher repräsentiert die Zeichenkette einen Pfad
          im Dateisystem.

 -- Datentyp: knot-policy-configuration
     Datentyp, der die DNSSEC-Richtlinie repräsentiert. Knot DNS kann
     Ihre Zonen automatisch signieren. Der Dienst kann Ihre Schlüssel
     automatisch erzeugen und verwalten oder Schlüssel benutzen, die Sie
     selbst erzeugen.

     DNSSEC wird in der Regel mit zwei Schlüsseln implementiert: Ein
     Schlüssel, mit dem Schlüssel signiert werden („Key Signing Key“,
     KSK), signiert den zweiten Schlüssel, einen Schlüssel, der Zonen
     signiert („Zone Signing Key“, ZSK), mit dem die Zone signiert wird.
     Damit er als vertrauenswürdig angesehen wird, muss der KSK in der
     Elternzone stehen (meistens ist das eine Top-Level-Domain). Wenn
     Ihr Registrar DNSSEC unterstützt, müssen Sie ihm den Hash Ihres KSK
     übermitteln, damit er einen DS-Eintrag für Ihre Zone hinzufügen
     kann. Das passiert nicht automatisch und muss jedes Mal wiederholt
     werden, wenn Sie Ihren KSK ändern.

     Die Richtlinie legt auch fest, wie lange Ihre Schlüssel gültig
     bleiben. Normalerweise kann der ZSK leicht geändert werden und
     benutzt kryptografisch schwächere Funktionen (also niedrigere
     Parameter), damit Einträge schnell signiert werden können, wodurch
     man sie oft verändern kann. Der KSK setzt jedoch eine manuelle
     Interaktion mit dem Registrar voraus, also werden sie weniger oft
     geändert und verwenden stärkere Parameter, weil mit ihnen nur ein
     einziger Eintrag signiert wird.

     Dieser Typ verfügt über die folgenden Parameter:

     ‘id’ (Vorgabe: ‘""’)
          Der Identifikator der Richtlinie. Er darf nicht leer sein.

     ‘keystore’ (Vorgabe: ‘"default"’)
          Eine Referenz auf einen Schlüsselspeicher („Keystore“), also
          eine Zeichenkette, die den Identifikator eines
          Schlüsselspeichers enthält, der in einem
          ‘knot-keystore-configuration’-Feld gespeichert ist. Der
          Identifikator ‘"default"’ sorgt dafür, dass der vorgegebene
          Schlüsselspeicher verwendet wird (eine KASP-Datenbank, die
          durch diesen Dienst eingerichtet wurde).

     ‘manual?’ (Vorgabe: ‘#f’)
          Ob Schlüssel manuell verwaltet werden sollen; andernfalls
          werden sie automatisch verwaltet.

     ‘single-type-signing?’ (Vorgabe: ‘#f’)
          Wenn es auf ‘#t’ steht, werden dieselben Schlüssel als KSK und
          ZSK verwendet („Single-Type Signing Scheme“).

     ‘algorithm’ (Vorgabe: ‘"ecdsap256sha256"’)
          Ein Algorithmus für zum Signieren verwendete Schlüssel und
          ausgestellte Signaturen.

     ‘ksk-size’ (Vorgabe: ‘256’)
          Die Länge des KSK. Beachten Sie, dass dieser Wert für den
          vorgegebenen Algorithmus korrekt ist, aber für andere
          Algorithmen _nicht_ sicher wäre.

     ‘zsk-size’ (Vorgabe: ‘256’)
          Die Länge des ZSK. Beachten Sie, dass dieser Wert für den
          vorgegebenen Algorithmus korrekt ist, aber für andere
          Algorithmen _nicht_ sicher wäre.

     ‘dnskey-ttl’ (Vorgabe: ‘'default’)
          Der TTL-Wert für DNSKEY-Einträge, die die Wurzel der Zone
          betreffen. Der besondere Wert ‘'default’ bedeutet, dass
          dieselbe TTL wie für den SOA-Eintrag der Zone verwendet wird.

     ‘zsk-lifetime’ (Vorgabe: ‘(* 30 24 3600)’)
          Die Zeitspanne zwischen der Veröffentlichung eines ZSK und dem
          Anfang des nächsten Schlüsselübergangs („Key Rollover“).

     ‘propagation-delay’ (Vorgabe: ‘(* 24 3600)’)
          Eine zusätzliche Verlängerung, die bei jedem Schritt im
          Schlüsselübergang („Key Rollover“) gewartet wird. Dieser Wert
          sollte hoch genug sein, damit in dieser Zeit Daten vom
          Master-Server alle Slaves erreichen.

     ‘rrsig-lifetime’ (Vorgabe: ‘(* 14 24 3600)’)
          Wie lange neu ausgestellte Signaturen gültig bleiben.

     ‘rrsig-refresh’ (Vorgabe: ‘(* 7 24 3600)’)
          Wie lange im Voraus vor einem Auslaufen der Signatur diese
          Signatur erneuert werden soll.

     ‘nsec3?’ (Vorgabe: ‘#f’)
          Ist es auf ‘#t’ gesetzt, wird NSEC3 statt NSEC benutzt.

     ‘nsec3-iterations’ (Vorgabe: ‘5’)
          Wie oft zusätzlich gehasht werden soll.

     ‘nsec3-salt-length’ (Vorgabe: ‘8’)
          Wie lange das kryptografische „Salt“ sein soll, als Anzahl von
          Oktetten. Es wird vor dem Hashen an den Namen des
          ursprünglichen Besitzers angehängt.

     ‘nsec3-salt-lifetime’ (Vorgabe: ‘(* 30 24 3600)’)
          Wie lange das neu ausgestellte Salt-Feld gültig bleiben soll.

 -- Datentyp: knot-zone-configuration
     Datentyp, der eine durch Knot verfügbar gemachte Zone
     repräsentiert. Dieser Typ verfügt über die folgenden Parameter:

     ‘domain’ (Vorgabe: ‘""’)
          Die Domain, die durch diese Konfiguration zur Verfügung
          gestellt wird. Sie darf nicht leer sein.

     ‘file’ (Vorgabe: ‘""’)
          Die Datei, in der diese Zone abgespeichert wird. Dieser
          Parameter wird bei Master-Zonen ignoriert. Bleibt er leer,
          wird die vom Domain-Namen abhängige Voreinstellung benutzt.

     ‘zone’ (Vorgabe: ‘(zone-file)’)
          Der Inhalt der Zonendatei. Dieser Parameter wird bei
          Slave-Zonen ignoriert. Er muss ein Verbundsobjekt vom Typ
          ‘zone-file’ enthalten.

     ‘master’ (Vorgabe: ‘'()’)
          Eine Liste von als „Master“ geltenden entfernten Servern. Ist
          sie leer, ist diese Zone ein Master, sonst ein Slave. Es
          handelt sich um eine Liste von Identifikatoren entfernter
          Server („Remotes“).

     ‘ddns-master’ (Vorgabe: ‘#f’)
          Der vorrangige „Master“. Ist dies leer, wird hierfür der erste
          Master aus der Liste der Master benutzt.

     ‘notify’ (Vorgabe: ‘'()’)
          Eine Liste der Identifikatoren von entfernten Slave-Servern
          („Remotes“).

     ‘acl’ (Vorgabe: ‘'()’)
          Eine Liste von Identifikatoren von Zugriffssteuerungslisten.

     ‘semantic-checks?’ (Vorgabe: ‘#f’)
          Wenn dies festgelegt ist, werden für die Zone mehr semantische
          Überprüfungen durchgeführt.

     ‘disable-any?’ (Vorgabe: ‘#f’)
          Wenn dies gesetzt ist, werden Anfragen vom Typ ANY gesperrt.

     ‘zonefile-sync’ (Vorgabe: ‘0’)
          Wie lange nach einer Änderung der im Arbeitsspeicher
          zwischengespeicherten Daten gewartet wird, bis die Daten auf
          die Platte geschrieben werden. Bei 0 werden sie sofort
          synchronisiert.

     ‘zonefile-load’ (Vorgabe: ‘#f’)
          Wie die in der Zonendatei gespeicherten Daten benutzt werden,
          wenn die Zone geladen wird. Mögliche Werte sind:

             • ‘#f’ sorgt dafür, dass nach der Voreinstellung von Knot
               verfahren wird,
             • ‘'none’ bewirkt, dass die Zonendatei überhaupt nicht
               benutzt wird,
             • ‘'difference’ lässt den Unterschied zwischen den bereits
               vorliegenden Daten und dem gespeicherten Inhalt der Zone
               berechnen, welcher dann zum vorliegenden Zoneninhalt
               hinzugenommen wird,
             • ‘'difference-no-serial’ für dasselbe wie bei
               ‘'difference’, aber die SOA-Seriennummer in der
               Zonendatei wird ignoriert und der Server kümmert sich
               automatisch darum.
             • ‘'whole’ lässt den ganzen Inhalt der Zone aus der
               Zonendatei auslesen.

     ‘journal-content’ (Vorgabe: ‘#f’)
          Wie in den Aufzeichnungen die Zone und Änderungen daran
          gespeichert werden sollen. Mögliche Werte sind ‘'none’, um
          keine Aufzeichnungen zu führen, ‘'changes’, um Änderungen zu
          speichern, und ‘'all’, wodurch der gesamte Inhalt gespeichert
          wird. Für ‘#f’ wird dieser Wert nicht gesetzt, so dass der in
          Knot voreingestellte Wert benutzt wird.

     ‘max-journal-usage’ (Vorgabe: ‘#f’)
          Die maximale Größe, die Aufzeichnungen für die
          Wiederherstellbarkeit („Journal“) auf der Platte einnehmen
          können. Für ‘#f’ wird dieser Wert nicht gesetzt, so dass der
          in Knot voreingestellte Wert benutzt wird.

     ‘max-journal-depth’ (Vorgabe: ‘#f’)
          Wieviele Aufzeichnungen höchstens im Änderungsverlauf
          gespeichert werden. Für ‘#f’ wird dieser Wert nicht gesetzt,
          so dass der in Knot voreingestellte Wert benutzt wird.

     ‘max-zone-size’ (Vorgabe: ‘#f’)
          Die maximale Größe der Zonendatei. Diese Beschränkung wird auf
          eingehende Übertragungen und Aktualisierungen angewandt. Für
          ‘#f’ wird dieser Wert nicht gesetzt, so dass der in Knot
          voreingestellte Wert benutzt wird.

     ‘dnssec-policy’ (Vorgabe: ‘#f’)
          Ein Verweis auf ein ‘knot-policy-configuration’-Verbundsobjekt
          oder der besondere Name ‘"default"’, um die Voreinstellung von
          Knot zu verwenden. Wenn dies als der Wert ‘#f’ angegeben
          wurde, findet in dieser Zone kein Signieren mit DNSSEC statt.

     ‘serial-policy’ (Vorgabe: ‘'increment’)
          Eine Richtlinie; entweder ‘'increment’ (Seriennummer
          hochzählen) oder ‘'unixtime’ (Unix-Zeitstempel verwenden).

 -- Datentyp: knot-configuration
     Datentyp, der die Konfiguration von Knot repräsentiert. Dieser Typ
     verfügt über die folgenden Parameter:

     ‘knot’ (Vorgabe: ‘knot’)
          Das Knot-Paket.

     ‘run-directory’ (Vorgabe: ‘"/var/run/knot"’)
          Das Laufzeit-Verzeichnis („run“-Verzeichnis). In diesem
          Verzeichnis werden die PID-Datei mit dem Prozessidentifikator
          und Sockets gespeichert.

     ‘includes’ (Vorgabe: ‘'()’)
          Eine flache Liste von Zeichenketten oder dateiartigen
          Objekten, die oben in der Konfigurationsdatei eingebunden
          werden müssen.

          Hiermit können Geheimnisse abseits von Guix’
          Zuständigkeitsbereich gespeichert werden. Zum Beispiel können
          Sie geheime Schlüssel so in einer externen Datei speichern,
          die nicht von Guix verwaltet und daher auch nicht von jedem in
          ‘/gnu/store’ ausgelesen werden kann — Sie können etwa Ihre
          geheime Schlüsselkonfiguration in ‘/etc/knot/secrets.conf’
          speichern und diese Datei dann zu Ihrer ‘includes’-Liste
          hinzufügen.

          Sie können mit dem Schlüsselverwaltungsprogramm ‘keymgr’ aus
          dem Knot-Paket einen geheimen TSIG-Schlüssel erzeugen lassen
          (für ‘nsupdate’ und Zonentransfers). Beachten Sie, dass das
          Paket _nicht_ automatisch durch den Dienst installiert wird.
          Das folgende Beispiel zeigt, wie man einen neuen
          TSIG-Schlüssel erzeugen lässt:

               keymgr -t meingeheimnis > /etc/knot/secrets.conf
               chmod 600 /etc/knot/secrets.conf

          Außerdem sollten Sie bedenken, dass der erzeugte Schlüssel den
          Namen MEINGEHEIMNIS bekommt, dieser Name also auch im KEY-Feld
          des ‘knot-acl-configuration’-Verbundsobjekts und an anderen
          Stellen verwendet werden muss, wo auf den Schlüssel verwiesen
          wird.

          Sie können die ‘includes’ auch benutzen, um von der
          Guix-Schnittstelle nicht unterstützte Einstellungen
          festzulegen.

     ‘listen-v4’ (Vorgabe: ‘"0.0.0.0"’)
          Eine IP-Adresse, auf der gelauscht werden soll.

     ‘listen-v6’ (Vorgabe: ‘"::"’)
          Eine IP-Adresse, auf der gelauscht werden soll.

     ‘listen-port’ (Vorgabe: ‘53’)
          Ein Port, auf dem gelauscht werden soll.

     ‘keys’ (Vorgabe: ‘'()’)
          Die Liste der ‘knot-key-configuration’-Objekte, die von dieser
          Konfiguration benutzt werden sollen.

     ‘acls’ (Vorgabe: ‘'()’)
          Die Liste der ‘knot-acl-configuration’-Objekte, die von dieser
          Konfiguration benutzt werden sollen.

     ‘remotes’ (Vorgabe: ‘'()’)
          Die Liste der ‘knot-remote-configuration’-Objekte, die von
          dieser Konfiguration benutzt werden sollen.

     ‘zones’ (Vorgabe: ‘'()’)
          Die Liste der ‘knot-zone-configuration’-Objekte, die von
          dieser Konfiguration benutzt werden sollen.

Knot-Resolver-Dienst
....................

 -- Scheme-Variable: knot-resolver-service-type
     Dies ist der Diensttyp des Knot-Resolver-Dienstes, dessen Wert ein
     ‘knot-resolver-configuration’-Objekt wie in diesem Beispiel sein
     sollte:

          (service knot-resolver-service-type
                   (knot-resolver-configuration
                     (kresd-config-file (plain-file "kresd.conf" "
          net.listen('192.168.0.1', 5353)
          user('knot-resolver', 'knot-resolver')
          modules = { 'hints > iterate', 'stats', 'predict' }
          cache.size = 100 * MB
          "))))

     Weitere Informationen finden Sie in seinem Handbuch
     (https://knot-resolver.readthedocs.org/en/stable/daemon.html#configuration).

 -- Datentyp: knot-resolver-configuration
     Der Datentyp, der die Konfiguration von knot-resolver
     repräsentiert.

     ‘package’ (Vorgabe: KNOT-RESOLVER)
          Das Paketobjekt des Knot-DNS-Resolvers.

     ‘kresd-config-file’ (Vorgabe: %kresd.conf)
          Datei-artiges Objekt der zu nutzenden
          kresd-Konfigurationsdatei. Nach Vorgabe lauscht der
          Knot-Resolver auf ‘127.0.0.1’ und ‘::1’.

     ‘garbage-collection-interval’ (Vorgabe: 1000)
          Wieviele Millisekunden ‘kres-cache-gc’ zwischen Bereinigungen
          seines Zwischenspeichers wartet.

Dnsmasq-Dienst
..............

 -- Scheme-Variable: dnsmasq-service-type
     Dies ist der Diensttyp des dnsmasq-Dienstes, dessen Wert ein
     ‘dnsmasq-configuration’-Objekt wie in diesem Beispiel sein sollte:

          (service dnsmasq-service-type
                   (dnsmasq-configuration
                     (no-resolv? #t)
                     (servers '("192.168.1.1"))))

 -- Datentyp: dnsmasq-configuration
     Repräsentiert die dnsmasq-Konfiguration.

     ‘package’ (Vorgabe: DNSMASQ)
          Paketobjekt des dnsmasq-Servers.

     ‘no-hosts?’ (Vorgabe: ‘#f’)
          Ist es auf wahr gesetzt, werden keine Rechnernamen
          („Hostnames“) aus /etc/hosts ausgelesen.

     ‘port’ (Vorgabe: ‘53’)
          Der Port, auf dem gelauscht werden soll. Wird dies auf null
          gesetzt, werden keinerlei DNS-Anfragen beantwortet und es
          bleiben nur DHCP- und/oder TFTP-Funktionen.

     ‘local-service?’ (Vorgabe: ‘#t’)
          DNS-Anfragen nur von Rechnern akzeptieren, deren Adresse auf
          einem lokalen Subnetz liegt, d.h. einem Subnetz, für dem auf
          dem Server eine Schnittstelle existiert.

     ‘listen-addresses’ (Vorgabe: ‘'()’)
          Lässt auf den angegebenen IP-Adressen lauschen.

     ‘resolv-file’ (Vorgabe: ‘"/etc/resolv.conf"’)
          Aus welcher Datei die IP-Adresse der zu verwendenden
          Namensserver gelesen werden sollen.

     ‘no-resolv?’ (Vorgabe: ‘#f’)
          Wenn es auf wahr steht, wird das RESOLV-FILE nicht gelesen.

     ‘servers’ (Vorgabe: ‘'()’)
          Geben Sie die IP-Adresse von anzufragenden Servern direkt an.

     ‘addresses’ (default: ‘'()’)
          For each entry, specify an IP address to return for any host
          in the given domains. Queries in the domains are never
          forwarded and always replied to with the specified IP address.

          This is useful for redirecting hosts locally, for example:

               (service dnsmasq-service-type
                        (dnsmasq-configuration
                          (addresses
                            '(; Redirect to a local web-server.
                              "/example.org/127.0.0.1"
                              ; Redirect subdomain to a specific IP.
                              "/subdomain.example.org/192.168.1.42"))))

          Note that rules in ‘/etc/hosts’ take precedence over this.

     ‘cache-size’ (Vorgabe: ‘150’)
          Bestimmt die Größe des Zwischenspeichers von dnsmasq. Wird die
          Zwischenspeichergröße auf null festgelegt, wird kein
          Zwischenspeicher benutzt.

     ‘negative-cache?’ (Vorgabe: ‘#t’)
          Ist dies auf falsch gesetzt, werden Negativergebnisse nicht
          zwischengespeichert.

ddclient-Dienst
...............

Der im Folgenden beschriebene ddclient-Dienst führt den ddclient-Daemon
aus, der dafür sorgt, dass DNS-Einträge für Dienstanbieter wie Dyn
(https://dyn.com/dns/) automatisch aktualisiert werden.

   Das folgende Beispiel zeigt, wie man den Dienst mit seiner
Vorgabekonfiguration instanziiert:

     (service ddclient-service-type)

   Note that ddclient needs to access credentials that are stored in a
“secret file”, by default ‘/etc/ddclient/secrets’ (see ‘secret-file’
below). You are expected to create this file manually, in an
“out-of-band” fashion (you _could_ make this file part of the service
configuration, for instance by using ‘plain-file’, but it will be
world-readable via ‘/gnu/store’). See the examples in the
‘share/ddclient’ directory of the ‘ddclient’ package.

   Verfügbare ‘ddclient-configuration’-Felder sind:

 -- ‘ddclient-configuration’-Parameter: „package“ ddclient
     Das ddclient-Paket.

 -- ‘ddclient-configuration’-Parameter: Ganze-Zahl daemon
     Nach wieviel Zeit ddclient erneut versuchen wird, IP und
     Domain-Namen zu überprüfen.

     Die Vorgabe ist ‘300’.

 -- ‘ddclient-configuration’-Parameter: Boolescher-Ausdruck syslog
     Ob die Ausgabe an Syslog gehen soll.

     Die Vorgabe ist ‘#t’.

 -- ‘ddclient-configuration’-Parameter: Zeichenkette mail
     An welchen Benutzer Mitteilungen gemailt werden sollen.

     Die Vorgabe ist ‘"root"’.

 -- ‘ddclient-configuration’-Parameter: Zeichenkette mail-failure
     Den Nutzer per Mail bei fehlgeschlagenen Aktualisierungen
     benachrichtigen.

     Die Vorgabe ist ‘"root"’.

 -- ‘ddclient-configuration’-Parameter: Zeichenkette pid
     PID-Datei für den ddclient.

     Die Vorgabe ist ‘"/var/run/ddclient/ddclient.pid"’.

 -- ‘ddclient-configuration’-Parameter: Boolescher-Ausdruck ssl
     SSL-Unterstützung aktivieren.

     Die Vorgabe ist ‘#t’.

 -- ‘ddclient-configuration’-Parameter: Zeichenkette user
     Gibt den Namen oder Identifikator des Benutzerkontos an, unter dem
     das ddclient-Programm laufen soll.

     Die Vorgabe ist ‘"ddclient"’.

 -- ‘ddclient-configuration’-Parameter: Zeichenkette group
     Die Gruppe des Benutzers, mit dem das ddclient-Programm läuft.

     Die Vorgabe ist ‘"ddclient"’.

 -- ‘ddclient-configuration’-Parameter: Zeichenkette secret-file
     Die Geheimnisdatei („Secret File“), die an die erzeugte
     ‘ddclient.conf’-Datei angehängt wird. Diese Datei enthält die
     Zugangsdaten, die ddclient benutzen soll. Es wird erwartet, dass
     Sie sie manuell erzeugen.

     Die Vorgabe ist ‘"/etc/ddclient/secrets.conf"’.

 -- ‘ddclient-configuration’-Parameter: Liste extra-options
     Zusätzliche Einstellungsoptionen, die an die ‘ddclient.conf’-Datei
     angehängt werden.

     Die Vorgabe ist ‘()’.


File: guix.de.info,  Node: VPN-Dienste,  Next: Network File System,  Prev: DNS-Dienste,  Up: Dienste

8.8.19 VPN-Dienste
------------------

Das Modul ‘(gnu services vpn)’ stellt Dienste zur Verfügung, die mit
“Virtual Private Networks” (VPNs) zu tun haben. Darin wird ein
_Client_-Dienst angeboten, mit dem sich Ihre Maschine mit einem VPN
verbinden kann, sowie ein _Server_-Dienst, mit dem Sie auf Ihrer
Maschine ein VPN betreiben können. Beide Dienste benutzen OpenVPN
(https://openvpn.net/).

 -- Scheme-Prozedur: openvpn-client-service [#:config
          (openvpn-client-configuration)]

     Liefert einen Dienst, der den VPN-Daemon ‘openvpn’ als Client
     ausführt.

 -- Scheme-Prozedur: openvpn-server-service [#:config
          (openvpn-server-configuration)]

     Liefert einen Dienst, der den VPN-Daemon ‘openvpn’ als Server
     ausführt.

     Beide können zeitgleich laufen gelassen werden.

   Verfügbare ‘openvpn-client-configuration’-Felder sind:

 -- ‘openvpn-client-configuration’-Parameter: „package“ openvpn
     Das OpenVPN-Paket.

 -- ‘openvpn-client-configuration’-Parameter: Zeichenkette pid-file
     Die Datei für den Prozessidentifikator („PID“) von OpenVPN.

     Die Vorgabe ist ‘"/var/run/openvpn/openvpn.pid"’.

 -- ‘openvpn-client-configuration’-Parameter: Protokoll proto
     Das Protokoll (UDP oder TCP), das benutzt werden soll, um einen
     Kommunikationskanal zwischen Clients und Servern herzustellen.

     Die Vorgabe ist ‘udp’.

 -- ‘openvpn-client-configuration’-Parameter: Gerät dev
     Der Gerätetyp, mit dem die VPN-Verbindung repräsentiert werden
     soll.

     Die Vorgabe ist ‘tun’.

 -- ‘openvpn-client-configuration’-Parameter: Zeichenkette ca
     Die Zertifikatsautorität, mit der Verbindungen geprüft werden.

     Die Vorgabe ist ‘"/etc/openvpn/ca.crt"’.

 -- ‘openvpn-client-configuration’-Parameter: Zeichenkette cert
     Das Zertifikat der Maschine, auf der der Daemon läuft. Es sollte
     von der in ‘ca’ angegebenen Zertifikatsautorität signiert sein.

     Die Vorgabe ist ‘"/etc/openvpn/client.crt"’.

 -- ‘openvpn-client-configuration’-Parameter: Zeichenkette key
     Der Schlüssel der Maschine, auf der der Daemon läuft. Er muss der
     Schlüssel zum in ‘cert’ angegebenen Zertifikat sein.

     Die Vorgabe ist ‘"/etc/openvpn/client.key"’.

 -- ‘openvpn-client-configuration’-Parameter: Boolescher-Ausdruck
          comp-lzo?
     Ob der Kompressionsalgorithmus lzo benutzt werden soll.

     Die Vorgabe ist ‘#t’.

 -- ‘openvpn-client-configuration’-Parameter: Boolescher-Ausdruck
          persist-key?
     Die Schlüsseldateien nach Auftreten von SIGUSR1 oder –ping-restart
     _nicht_ erneut einlesen.

     Die Vorgabe ist ‘#t’.

 -- ‘openvpn-client-configuration’-Parameter: Boolescher-Ausdruck
          persist-tun?
     Nach dem Auftreten von SIGUSR1 oder –ping-restart TUN/TAP-Geräte
     _nicht_ schließen und wieder öffnen und auch keine
     Start-/Stop-Skripte ausführen.

     Die Vorgabe ist ‘#t’.

 -- ‘openvpn-client-configuration’-Parameter: Boolescher-Ausdruck
          fast-io?
     (Experimentell) Schreibzugriffe durch Datenverkehr bei TUN/TAP/UDP
     optimieren, indem ein Aufruf von poll/epoll/select vor der
     Schreiboperation eingespart wird.

     Vorgegeben ist ‘#f’.

 -- ‘openvpn-client-configuration’-Parameter: Zahl verbosity
     Ausführlichkeitsstufe.

     Die Vorgabe ist ‘3’.

 -- ‘openvpn-client-configuration’-Parameter:
          „tls-auth“-Clienteinstellung tls-auth
     Eine weitere HMAC-Authentifizierung zusätzlich zum
     TLS-Steuerungskanal einsetzen, um das System vor gezielten
     Überlastungsangriffen („Denial of Service“) zu schützen.

     Vorgegeben ist ‘#f’.

 -- ‘openvpn-client-configuration’-Parameter: Vielleicht-Zeichenkette
          auth-user-pass
     Beim Server eine Authentisierung über Benutzername/Passwort
     durchführen. Die Option nimmt eine Datei, welche Benutzername und
     Passwort auf zwei Zeilen enthält. Benutzen Sie dafür _kein_
     dateiartiges Objekt, weil es in den Store eingelagert würde, wo es
     jeder Benutzer einsehen könnte.

     Der Vorgabewert ist ‘'disabled’ (d.h. deaktiviert).

 -- ‘openvpn-client-configuration’-Parameter: Schlüsselprüfung
          verify-key-usage?
     Ob sichergestellt werden soll, dass das Server-Zertifikat auch über
     eine Erweiterung („Extension“) verfügt, dass es für die Nutzung als
     Server gültig ist.

     Die Vorgabe ist ‘#t’.

 -- ‘openvpn-client-configuration’-Parameter: bind bind?
     Ob an immer dieselbe, feste lokale Portnummer gebunden wird.

     Vorgegeben ist ‘#f’.

 -- ‘openvpn-client-configuration’-Parameter: Erneut-Auflösen
          resolv-retry?
     Ob, wenn die Server-Adresse nicht aufgelöst werden konnte, die
     Auflösung erneut versucht wird.

     Die Vorgabe ist ‘#t’.

 -- ‘openvpn-client-configuration’-Parameter:
          „openvpn-remote-configuration“-Liste remote
     Eine Liste entfernter Servern, mit denen eine Verbindung
     hergestellt werden soll.

     Die Vorgabe ist ‘()’.

     Verfügbare ‘openvpn-remote-configuration’-Felder sind:

      -- ‘openvpn-remote-configuration’-Parameter: Zeichenkette name
          Der Servername.

          Die Vorgabe ist ‘"my-server"’.

      -- ‘openvpn-remote-configuration’-Parameter: Zahl port
          Die Portnummer, auf der der Server lauscht.

          Die Vorgabe ist ‘1194’.

   Verfügbare ‘openvpn-server-configuration’-Felder sind:

 -- ‘openvpn-server-configuration’-Parameter: „package“ openvpn
     Das OpenVPN-Paket.

 -- ‘openvpn-server-configuration’-Parameter: Zeichenkette pid-file
     Die Datei für den Prozessidentifikator („PID“) von OpenVPN.

     Die Vorgabe ist ‘"/var/run/openvpn/openvpn.pid"’.

 -- ‘openvpn-server-configuration’-Parameter: Protokoll proto
     Das Protokoll (UDP oder TCP), das benutzt werden soll, um einen
     Kommunikationskanal zwischen Clients und Servern herzustellen.

     Die Vorgabe ist ‘udp’.

 -- ‘openvpn-server-configuration’-Parameter: Gerät dev
     Der Gerätetyp, mit dem die VPN-Verbindung repräsentiert werden
     soll.

     Die Vorgabe ist ‘tun’.

 -- ‘openvpn-server-configuration’-Parameter: Zeichenkette ca
     Die Zertifikatsautorität, mit der Verbindungen geprüft werden.

     Die Vorgabe ist ‘"/etc/openvpn/ca.crt"’.

 -- ‘openvpn-server-configuration’-Parameter: Zeichenkette cert
     Das Zertifikat der Maschine, auf der der Daemon läuft. Es sollte
     von der in ‘ca’ angegebenen Zertifikatsautorität signiert sein.

     Die Vorgabe ist ‘"/etc/openvpn/client.crt"’.

 -- ‘openvpn-server-configuration’-Parameter: Zeichenkette key
     Der Schlüssel der Maschine, auf der der Daemon läuft. Er muss der
     Schlüssel zum in ‘cert’ angegebenen Zertifikat sein.

     Die Vorgabe ist ‘"/etc/openvpn/client.key"’.

 -- ‘openvpn-server-configuration’-Parameter: Boolescher-Ausdruck
          comp-lzo?
     Ob der Kompressionsalgorithmus lzo benutzt werden soll.

     Die Vorgabe ist ‘#t’.

 -- ‘openvpn-server-configuration’-Parameter: Boolescher-Ausdruck
          persist-key?
     Die Schlüsseldateien nach Auftreten von SIGUSR1 oder –ping-restart
     _nicht_ erneut einlesen.

     Die Vorgabe ist ‘#t’.

 -- ‘openvpn-server-configuration’-Parameter: Boolescher-Ausdruck
          persist-tun?
     Nach dem Auftreten von SIGUSR1 oder –ping-restart TUN/TAP-Geräte
     _nicht_ schließen und wieder öffnen und auch keine
     Start-/Stop-Skripte ausführen.

     Die Vorgabe ist ‘#t’.

 -- ‘openvpn-server-configuration’-Parameter: Boolescher-Ausdruck
          fast-io?
     (Experimentell) Schreibzugriffe durch Datenverkehr bei TUN/TAP/UDP
     optimieren, indem ein Aufruf von poll/epoll/select vor der
     Schreiboperation eingespart wird.

     Vorgegeben ist ‘#f’.

 -- ‘openvpn-server-configuration’-Parameter: Zahl verbosity
     Ausführlichkeitsstufe.

     Die Vorgabe ist ‘3’.

 -- ‘openvpn-server-configuration’-Parameter:
          „tls-auth“-Servereinstellung tls-auth
     Eine weitere HMAC-Authentifizierung zusätzlich zum
     TLS-Steuerungskanal einsetzen, um das System vor gezielten
     Überlastungsangriffen („Denial of Service“) zu schützen.

     Vorgegeben ist ‘#f’.

 -- ‘openvpn-server-configuration’-Parameter: Zahl port
     Gibt die Portnummer an, auf der der Server lauscht.

     Die Vorgabe ist ‘1194’.

 -- ‘openvpn-server-configuration’-Parameter: IP-und-Maske server
     Eine IP-Adresse gefolgt von deren Maske, die das Subnetz im
     virtuellen Netzwerk angibt.

     Die Vorgabe ist ‘"10.8.0.0 255.255.255.0"’.

 -- ‘openvpn-server-configuration’-Parameter: cidr6 server-ipv6
     Eine CIDR-Notation, mit der das IPv6-Subnetz im virtuellen Netzwerk
     angegeben wird.

     Vorgegeben ist ‘#f’.

 -- ‘openvpn-server-configuration’-Parameter: Zeichenkette dh
     Die Datei mit den Diffie-Hellman-Parametern.

     Die Vorgabe ist ‘"/etc/openvpn/dh2048.pem"’.

 -- ‘openvpn-server-configuration’-Parameter: Zeichenkette
          ifconfig-pool-persist
     Die Datei, in der Client-IPs eingetragen werden.

     Die Vorgabe ist ‘"/etc/openvpn/ipp.txt"’.

 -- ‘openvpn-server-configuration’-Parameter: Zugang redirect-gateway?
     Wenn dies auf wahr steht, fungiert der Server als Zugang
     („Gateway“) für seine Clients.

     Vorgegeben ist ‘#f’.

 -- ‘openvpn-server-configuration’-Parameter: Boolescher-Ausdruck
          client-to-client?
     Wenn dies auf wahr steht, ist es zugelassen, dass Clients
     untereinander innerhalb des VPNs kommunizieren.

     Vorgegeben ist ‘#f’.

 -- ‘openvpn-server-configuration’-Parameter: Aufrechterhaltung
          keepalive
     Lässt ping-artige Nachrichtigen in beide Richtungen über die
     Leitung übertragen, damit beide Seiten bemerken, wenn der
     Kommunikationspartner offline geht. Für ‘keepalive’ muss ein Paar
     angegeben werden. Das erste Element ist die Periode, nach der das
     Pingsignal wieder gesendet werden soll, und das zweite ist eine
     Zeitbegrenzung, in der eines ankommen muss, damit die andere Seite
     nicht als offline gilt.

 -- ‘openvpn-server-configuration’-Parameter: Zahl max-clients
     Wieviele Clients es höchstens geben kann.

     Die Vorgabe ist ‘100’.

 -- ‘openvpn-server-configuration’-Parameter: Zeichenkette status
     Die Datei für einen Zustandsbericht („Status File“). Diese Datei
     enthält einen kurzen Bericht über die momentane Verbindung. Sie
     wird jede Minute gekürzt und neu geschrieben.

     Die Vorgabe ist ‘"/var/run/openvpn/status"’.

 -- ‘openvpn-server-configuration’-Parameter:
          „openvpn-ccd-configuration“-Liste client-config-dir
     Die Liste der Konfigurationen für einige Clients.

     Die Vorgabe ist ‘()’.

     Verfügbare ‘openvpn-ccd-configuration’-Felder sind:

      -- ‘openvpn-ccd-configuration’-Parameter: Zeichenkette name
          Der Client-Name.

          Die Vorgabe ist ‘"client"’.

      -- ‘openvpn-ccd-configuration’-Parameter: IP-und-Maske iroute
          Das eigene Netzwerk des Clients.

          Vorgegeben ist ‘#f’.

      -- ‘openvpn-ccd-configuration’-Parameter: IP-und-Maske
               ifconfig-push
          VPN-IP-Adresse des Clients.

          Vorgegeben ist ‘#f’.


File: guix.de.info,  Node: Network File System,  Next: Kontinuierliche Integration,  Prev: VPN-Dienste,  Up: Dienste

8.8.20 Network File System
--------------------------

Das Modul ‘(gnu services nfs)’ stellt die folgenden Dienste zur
Verfügung, die meistens dazu benutzt werden, Verzeichnisbäume als
Netzwerkdateisysteme, englisch “Network File Systems” (NFS), einzubinden
oder an andere zu exportieren.

   Obwohl man auch die einzelnen Komponenten eines
Network-File-System-Dienstes separat einrichten kann, raten wir dazu,
einen NFS-Server mittels ‘nfs-service-type’ zu konfigurieren.

NFS-Dienst
..........

Der NFS-Dienst sorgt dafür, dass alle NFS-Komponentendienste, die
Konfiguration des NFS-Kernels und Dateisysteme eingerichtet werden, und
er installiert an den von NFS erwarteten Orten Konfigurationsdateien.

 -- Scheme-Variable: nfs-service-type
     Ein Diensttyp für einen vollständigen NFS-Server.

 -- Datentyp: nfs-configuration
     Dieser Datentyp repräsentiert die Konfiguration des NFS-Dienstes
     und all seiner Subsysteme.

     Er hat folgende Parameter:
     ‘nfs-utils’ (Vorgabe: ‘nfs-utils’)
          Das nfs-utils-Paket, was benutzt werden soll.

     ‘nfs-versions’ (Vorgabe: ‘'("4.2" "4.1" "4.0")’)
          Wenn eine Liste von Zeichenketten angegeben wird, beschränkt
          sich der ‘rpc.nfsd’-Daemon auf die Unterstützung der
          angegebenen Versionen des NFS-Protokolls.

     ‘exports’ (Vorgabe: ‘'()’)
          Diese Liste von Verzeichnissen soll der NFS-Server
          exportieren. Jeder Eintrag ist eine Liste, die zwei Elemente
          enthält: den Namen eines Verzeichnisses und eine Zeichenkette
          mit allen Optionen. Ein Beispiel, wo das Verzeichnis ‘/export’
          an alle NFS-Clients nur mit Lesezugriff freigegeben wird,
          sieht so aus:

               (nfs-configuration
                (exports
                 '(("/export"
                    "*(ro,insecure,no_subtree_check,crossmnt,fsid=0)"))))

     ‘rpcmountd-port’ (Vorgabe: ‘#f’)
          Welchen Netzwerk-Port der ‘rpc.mountd’-Daemon benutzen soll.

     ‘rpcstatd-port’ (Vorgabe: ‘#f’)
          Welchen Netzwerk-Port der ‘rpc.statd’-Daemon benutzen soll.

     ‘rpcbind’ (Vorgabe: ‘rpcbind’)
          Das rpcbind-Paket, das benutzt werden soll.

     ‘idmap-domain’ (Vorgabe: ‘"localdomain"’)
          Der lokale NFSv4-Domainname.

     ‘nfsd-port’ (Vorgabe: ‘2049’)
          Welchen Netzwerk-Port der ‘nfsd’-Daemon benutzen soll.

     ‘nfsd-threads’ (Vorgabe: ‘8’)
          Wieviele Threads der ‘rpc.statd’-Daemon benutzen soll.

     ‘pipefs-directory’ (Vorgabe: ‘"/var/lib/nfs/rpc_pipefs"’)
          Das Verzeichnis, unter dem das Pipefs-Dateisystem eingebunden
          wurde.

     ‘debug’ (Vorgabe: ‘'()"’)
          Eine Liste der Subsysteme, für die Informationen zur
          Fehlersuche bereitgestellt werden sollen, als Liste von
          Symbolen. Jedes der folgenden Symbole ist gültig: ‘nfsd’,
          ‘nfs’, ‘rpc’, ‘idmap’, ‘statd’ oder ‘mountd’.

   Wenn Sie keinen vollständigen NFS-Dienst benötigen oder ihn selbst
einrichten wollen, können Sie stattdessen die im Folgenden
dokumentierten Komponentendienste benutzen.

RPC-Bind-Dienst
...............

Mit dem RPC-Bind-Dienst können Programmnummern auf universelle Adressen
abgebildet werden. Viele Dienste, die mit dem NFS zu tun haben, benutzen
diese Funktion, daher wird sie automatisch gestartet, sobald ein davon
abhängiger Dienst startet.

 -- Scheme-Variable: rpcbind-service-type
     Ein Diensttyp für den RPC-Portplaner-Daemon („Portmapper“).

 -- Datentyp: rpcbind-configuration
     Datentyp, der die Konfiguration des RPC-Bind-Dienstes
     repräsentiert. Dieser Typ verfügt über die folgenden Parameter:
     ‘rpcbind’ (Vorgabe: ‘rpcbind’)
          Das rpcbind-Paket, das benutzt werden soll.

     ‘warm-start?’ (Vorgabe: ‘#t’)
          Wenn dieser Parameter ‘#t’ ist, wird der Daemon beim Starten
          eine Zustandsdatei („State File“) lesen, aus der er die von
          der vorherigen Instanz gespeicherten Zustandsinformationen
          wiederherstellt.

Pipefs-Pseudodateisystem
........................

Mit dem Pipefs-Dateisystem können NFS-bezogene Daten zwischen dem Kernel
und Programmen auf der Anwendungsebene (dem „User Space“) übertragen
werden.

 -- Scheme-Variable: pipefs-service-type
     Ein Diensttyp für das Pseudodateisystem „Pipefs“.

 -- Datentyp: pipefs-configuration
     Datentyp, der die Konfiguration des
     Pipefs-Pseudodateisystemdienstes repräsentiert. Dieser Typ verfügt
     über die folgenden Parameter:
     ‘mount-point’ (Vorgabe: ‘"/var/lib/nfs/rpc_pipefs"’)
          Das Verzeichnis, unter dem das Dateisystem eingebunden werden
          soll.

GSS-Daemon-Dienst
.................

Der Daemon des “Global Security System” (GSS) ermöglicht starke
Informationssicherheit für RPC-basierte Protokolle. Vor dem Austausch
von Anfragen über entfernte Prozeduraufrufe („Remote Procedure Calls“,
kurz RPC) muss ein RPC-Client einen Sicherheitskontext („Security
Context“) herstellen. Typischerweise wird dazu der ‘kinit’-Befehl von
Kerberos benutzt, oder er wird automatisch bei der Anmeldung über
PAM-Dienste hergestellt (siehe *note Kerberos-Dienste::).

 -- Scheme-Variable: gss-service-type
     Ein Diensttyp für den Daemon des Global Security System (GSS).

 -- Datentyp: gss-configuration
     Datentyp, der die Konfiguration des GSS-Daemon-Dienstes
     repräsentiert. Dieser Typ verfügt über die folgenden Parameter:
     ‘nfs-utils’ (Vorgabe: ‘nfs-utils’)
          Das Paket, in dem der Befehl ‘rpc.gssd’ gesucht werden soll.

     ‘pipefs-directory’ (Vorgabe: ‘"/var/lib/nfs/rpc_pipefs"’)
          Das Verzeichnis, unter dem das Pipefs-Dateisystem eingebunden
          wurde.

IDMAP-Daemon-Dienst
...................

Der idmap-Daemon-Dienst ermöglicht eine Abbildung zwischen
Benutzeridentifikatoren und Benutzernamen. Er wird in der Regel dafür
benötigt, auf über NFSv4 eingebundene Dateisysteme zuzugreifen.

 -- Scheme-Variable: idmap-service-type
     Ein Diensttyp für den Identity-Mapper-Daemon (IDMAP).

 -- Datentyp: idmap-configuration
     Datentyp, der die Konfiguration des IDMAP-Daemon-Dienstes
     repräsentiert. Dieser Typ verfügt über die folgenden Parameter:
     ‘nfs-utils’ (Vorgabe: ‘nfs-utils’)
          Das Paket, in dem der Befehl ‘rpc.idmapd’ gesucht werden soll.

     ‘pipefs-directory’ (Vorgabe: ‘"/var/lib/nfs/rpc_pipefs"’)
          Das Verzeichnis, unter dem das Pipefs-Dateisystem eingebunden
          wurde.

     ‘domain’ (Vorgabe: ‘#f’)
          Der lokale NFSv4-Domain-Name. Für ihn muss eine Zeichenkette
          oder ‘#f’ angegeben werden. Wenn ‘#f’ angegeben wird, benutzt
          der Daemon den vollständigen Domain-Namen („Fully Qualified
          Domain Name“) des Rechners.

     ‘verbosity’ (Vorgabe: ‘0’)
          Die Ausführlichkeitsstufe des Daemons.


File: guix.de.info,  Node: Kontinuierliche Integration,  Next: Dienste zur Stromverbrauchsverwaltung,  Prev: Network File System,  Up: Dienste

8.8.21 Kontinuierliche Integration
----------------------------------

Cuirass (https://git.savannah.gnu.org/cgit/guix/guix-cuirass.git) ist
ein Werkzeug zur kontinuierlichen Integration für Guix. Es kann sowohl
bei der Entwicklung helfen als auch beim Anbieten von Substituten für
andere (siehe *note Substitute::).

   Das Modul ‘(gnu services cuirass)’ stellt den folgenden Dienst zur
Verfügung:

 -- Scheme-Prozedur: cuirass-service-type
     Der Diensttyp des Cuirass-Dienstes. Sein Wert muss ein
     ‘cuirass-configuration’-Verbundsobjekt sein, wie im Folgenden
     beschrieben.

   To add build jobs, you have to set the ‘specifications’ field of the
configuration. Here is an example of a service that polls the Guix
repository and builds the packages from a manifest. Some of the packages
are defined in the ‘"custom-packages"’ input, which is the equivalent of
‘GUIX_PACKAGE_PATH’.

     (define %cuirass-specs
       #~(list
          '((#:name . "my-manifest")
            (#:load-path-inputs . ("guix"))
            (#:package-path-inputs . ("eigene-pakete"))
            (#:proc-input . "guix")
            (#:proc-file . "build-aux/cuirass/gnu-system.scm")
            (#:proc . cuirass-jobs)
            (#:proc-args . ((subset . "manifests")
                            (systems . ("x86_64-linux"))
                            (manifests . (("config" . "guix/manifest.scm")))))
            (#:inputs . (((#:name . "guix")
                          (#:url . "git://git.savannah.gnu.org/guix.git")
                          (#:load-path . ".")
                          (#:branch . "master")
                          (#:no-compile? . #t))
                         ((#:name . "config")
                          (#:url . "https://git.example.org/config.git")
                          (#:load-path . ".")
                          (#:branch . "master")
                          (#:no-compile? . #t))
                         ((#:name . "eigene-pakete")
                          (#:url . "https://git.example.org/eigene-pakete.git")
                          (#:load-path . ".")
                          (#:branch . "master")
                          (#:no-compile? . #t)))))))

     (service cuirass-service-type
              (cuirass-configuration
               (specifications %cuirass-specs)))

   Die Informationen, die sich auf Erstellungsaufträge beziehen, werden
direkt in deren Spezifikation festgelegt, aber globale Einstellungen des
‘cuirass’-Prozesses sind über andere Felder der ‘cuirass-configuration’
zugänglich.

 -- Datentyp: cuirass-configuration
     Datentyp, der die Konfiguration von Cuirass repräsentiert.

     ‘log-file’ (Vorgabe: ‘"/var/log/cuirass.log"’)
          An welchen Ort die Protokolldatei geschrieben wird.

     ‘web-log-file’ (Vorgabe: ‘"/var/log/cuirass-web.log"’)
          An welchem Ort die Protokolldatei der Weboberfläche
          gespeichert wird.

     ‘cache-directory’ (Vorgabe: ‘"/var/cache/cuirass"’)
          Ort, wo Repositorys zwischengespeichert werden.

     ‘user’ (Vorgabe: ‘"cuirass"’)
          Besitzer des ‘cuirass’-Prozesses.

     ‘group’ (Vorgabe: ‘"cuirass"’)
          Gruppe des Besitzers des ‘cuirass’-Prozesses.

     ‘interval’ (Vorgabe: ‘60’)
          Anzahl der Sekunden, bevor ein Repository wieder neu geladen
          wird und danach Cuirass-Aufträge behandelt werden.

     ‘database’ (Vorgabe: ‘"/var/lib/cuirass/cuirass.db"’)
          An welchem Ort sich die sqlite-Datenbank befinden soll, die
          die Erstellungsergebnisse und bisher hinzugefügte
          Spezifikationen speichert.

     ‘ttl’ (Vorgabe: ‘(* 30 24 3600)’)
          Gibt an, wieviele Sekunden für Erstellungsergebnisse
          registrierte Müllsammlerwurzeln gültig bleiben
          („Time-to-live“, kurz TTL). Dadurch werden
          Erstellungsergebnisse für mindestens TTL-viele Sekunden
          geschützt.

     ‘port’ (Vortrag: ‘8081’)
          Portnummer, die vom HTTP-Server benutzt wird.

     ‘host’ (Vorgabe: ‘"localhost"’)
          Auf der Netzwerkschnittstelle für den Rechnernamen HOST
          lauschen. Nach Vorgabe werden Verbindungen vom lokalen Rechner
          ‘localhost’ akzeptiert.

     ‘specifications’ (Vorgabe: ‘#~'()’)
          Ein G-Ausdruck (siehe *note G-Ausdrücke::), der zu einer Liste
          von Spezifikationen ausgewertet wird, wobei jede Spezifikation
          eine assoziative Liste ist (siehe *note (guile)Associations
          Lists::), deren Schlüssel Schlüsselwörter sind („Keywords“ wie
          z.B. ‘#:beispiel-für-ein-schlüsselwort’), wie im Beispiel oben
          gezeigt.

     ‘use-substitutes?’ (Vorgabe: ‘#f’)
          Hierdurch wird zugelassen, Substitute zu benutzen, damit
          _nicht_ jede Abhängigkeit eines Auftrags erst aus ihrem
          Quellcode heraus erstellt werden muss.

     ‘one-shot?’ (Vorgabe: ‘#f’)
          Spezifikationen nur einmal auswerten und Ableitungen nur
          einmal erstellen.

     ‘fallback?’ (Vorgabe: ‘#f’)
          Pakete lokal erstellen, wenn das Substituieren einer
          vorerstellten Binärdatei fehlschlägt.

     ‘extra-options’ (Vorgabe: ‘'()’)
          Zusätzliche Befehlszeilenoptionen, die beim Ausführen des
          Cuirass-Prozesses mitgegeben werden sollen.

     ‘cuirass’ (Vorgabe: ‘cuirass’)
          Das Cuirass-Paket, das benutzt werden soll.


File: guix.de.info,  Node: Dienste zur Stromverbrauchsverwaltung,  Next: Audio-Dienste,  Prev: Kontinuierliche Integration,  Up: Dienste

8.8.22 Dienste zur Stromverbrauchsverwaltung
--------------------------------------------

TLP-Daemon
..........

Das Modul ‘(gnu services pm)’ stellt eine Guix-Dienstdefinition für das
Linux-Werkzeug TLP zur Stromverbrauchsverwaltung zur Verfügung.

   TLP macht mehrere Stromspar-Modi auf Anwendungsebene („User Space“)
und im Kernel verfügbar. Im Gegensatz zum ‘upower-service’ handelt es
sich um kein passives Werkzeug zur Überwachung, sondern TLP passt selbst
jedes Mal Einstellungen an, wenn eine neue Stromquelle erkannt wird.
Mehr Informationen finden Sie auf der TLP-Homepage
(https://linrunner.de/en/tlp/tlp.html).

 -- Scheme-Variable: tlp-service-type
     Der Diensttyp für das TLP-Werkzeug. Sein Wert sollte eine gültige
     TLP-Konfiguration sein (siehe unten). Um die Vorgabeeinstellungen
     zu verwenden, schreiben Sie einfach:
          (service tlp-service-type)

   Um die Vorgaben für TLP zu benutzen, müssen Sie also nur wenig in die
Konfiguration schreiben, aber Sie können die meisten TLP-Parameter über
die ‘tlp-configuration’ anpassen.

   Im Folgenden ist jeder Parameterdefinition ihr Typ vorangestellt. Zum
Beispiel bedeutet ‘Boolescher-Ausdruck foo’, dass der Parameter ‘foo’
als boolescher Ausdruck festgelegt werden sollte. Typen, die mit
‘Vielleicht-’ beginnen, bezeichnen Parameter, die nicht in der
TLP-Konfigurationsdatei vorkommen, wenn ‘'disabled’ als ihr Wert
angegeben wurde.

   Verfügbare ‘tlp-configuration’-Felder sind:

 -- ‘tlp-configuration’-Parameter: „package“ tlp
     Das TLP-Paket.

 -- ‘tlp-configuration’-Parameter: Boolescher-Ausdruck tlp-enable?
     Setzen Sie dies auf wahr, wenn Sie TLP aktivieren möchten.

     Die Vorgabe ist ‘#t’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette tlp-default-mode
     Der vorgegebene Modus, wenn keine Stromversorgung gefunden werden
     kann. Angegeben werden können AC (am Stromnetz) und BAT
     (Batterie/Akku).

     Die Vorgabe ist ‘"AC"’.

 -- ‘tlp-configuration’-Parameter: Nichtnegative-ganze-Zahl
          disk-idle-secs-on-ac
     Die Anzahl an Sekunden, die der Linux-Kernel warten muss, bis er
     sich mit dem Plattenspeicher synchronisiert, wenn die
     Stromversorgung auf AC steht.

     Die Vorgabe ist ‘0’.

 -- ‘tlp-configuration’-Parameter: Nichtnegative-ganze-Zahl
          disk-idle-secs-on-bat
     Wie ‘disk-idle-ac’, aber für den BAT-Modus.

     Die Vorgabe ist ‘2’.

 -- ‘tlp-configuration’-Parameter: Nichtnegative-ganze-Zahl
          max-lost-work-secs-on-ac
     Periodizität, mit der im Zwischenspeicher geänderte Speicherseiten
     („Dirty Pages“) synchronisiert werden („Cache Flush“), ausgedrückt
     in Sekunden.

     Die Vorgabe ist ‘15’.

 -- ‘tlp-configuration’-Parameter: Nichtnegative-ganze-Zahl
          max-lost-work-secs-on-bat
     Wie ‘max-lost-work-secs-on-ac’, aber für den BAT-Modus.

     Die Vorgabe ist ‘60’.

 -- ‘tlp-configuration’-Parameter:
          Vielleicht-Leerzeichengetrennte-Zeichenketten-Liste
          cpu-scaling-governor-on-ac
     Regulator der Frequenzskalierung der CPUs („Frequency Scaling
     Governor“) im AC-Modus. Beim intel_pstate-Treiber stehen powersave
     (stromsparend) und performance (leistungsfähig) zur Auswahl. Beim
     acpi-cpufreq-Treiber stehen ondemand, powersave, performance und
     conservative zur Auswahl.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter:
          Vielleicht-Leerzeichengetrennte-Zeichenketten-Liste
          cpu-scaling-governor-on-bat
     Wie ‘cpu-scaling-governor-on-ac’, aber für den BAT-Modus.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-Nichtnegative-ganze-Zahl
          cpu-scaling-min-freq-on-ac
     Legt die minimale verfügbare Frequenz für den Skalierungsregulator
     im AC-Modus fest.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-Nichtnegative-ganze-Zahl
          cpu-scaling-max-freq-on-ac
     Legt die maximale verfügbare Frequenz für den Skalierungsregulator
     im AC-Modus fest.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-Nichtnegative-ganze-Zahl
          cpu-scaling-min-freq-on-bat
     Legt die minimale verfügbare Frequenz für den Skalierungsregulator
     im BAT-Modus fest.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-Nichtnegative-ganze-Zahl
          cpu-scaling-max-freq-on-bat
     Legt die maximale verfügbare Frequenz für den Skalierungsregulator
     im BAT-Modus fest.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-Nichtnegative-ganze-Zahl
          cpu-min-perf-on-ac
     Beschränkt den minimalen Leistungszustand („P-State“), um die
     Stromverteilung („Power Dissipation“) der CPU im AC-Modus zu
     regulieren. Werte können als Prozentsatz bezüglich der verfügbaren
     Leistung angegeben werden.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-Nichtnegative-ganze-Zahl
          cpu-max-perf-on-ac
     Beschränkt den maximalen Leistungszustand („P-State“), um die
     Stromverteilung („Power Dissipation“) der CPU im AC-Modus zu
     regulieren. Werte können als Prozentsatz bezüglich der verfügbaren
     Leistung angegeben werden.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-Nichtnegative-ganze-Zahl
          cpu-min-perf-on-bat
     Wie ‘cpu-min-perf-on-ac’ im BAT-Modus.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-Nichtnegative-ganze-Zahl
          cpu-max-perf-on-bat
     Wie ‘cpu-max-perf-on-ac’ im BAT-Modus.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-Boolescher-Ausdruck
          cpu-boost-on-ac?
     Die CPU-Turbo-Boost-Funktionen im AC-Modus aktivieren.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-Boolescher-Ausdruck
          cpu-boost-on-bat?
     Wie ‘cpu-boost-on-ac?’ im BAT-Modus.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Boolescher-Ausdruck
          sched-powersave-on-ac?
     Dem Linux-Kernel erlauben, die Anzahl benutzter CPU-Kerne und
     Hyperthreads anzupassen, wenn er unter leichter Last steht.

     Vorgegeben ist ‘#f’.

 -- ‘tlp-configuration’-Parameter: Boolescher-Ausdruck
          sched-powersave-on-bat?
     Wie ‘sched-powersave-on-ac?’, aber für den BAT-Modus.

     Die Vorgabe ist ‘#t’.

 -- ‘tlp-configuration’-Parameter: Boolescher-Ausdruck nmi-watchdog?
     Ob die rechtzeitige Behandlung nichtmaskierbarer Unterbrechungen
     durch den „NMI-Watchdog“ des Linux-Kernels überprüft werden soll.

     Vorgegeben ist ‘#f’.

 -- ‘tlp-configuration’-Parameter: Vielleicht-Zeichenkette phc-controls
     Auf Linux-Kernels, auf die der PHC-Patch angewandt wurde, wird
     hierdurch die Prozessorspannung angepasst. Ein Beispielwert wäre
     ‘"F:V F:V F:V F:V"’.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Zeichenkette energy-perf-policy-on-ac
     Legt das Verhältnis von Prozessorleistung zu Stromsparsamkeit im
     AC-Modus fest. Angegeben werden können performance (hohe Leistung),
     normal, powersave (wenig Stromverbrauch).

     Die Vorgabe ist ‘"performance"’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette
          energy-perf-policy-on-bat
     Wie ‘energy-perf-policy-ac’, aber für den BAT-Modus.

     Die Vorgabe ist ‘"powersave"’.

 -- ‘tlp-configuration’-Parameter:
          Leerzeichengetrennte-Zeichenketten-Liste disks-devices
     Festplattengeräte.

 -- ‘tlp-configuration’-Parameter:
          Leerzeichengetrennte-Zeichenketten-Liste disk-apm-level-on-ac
     Stufe für das „Advanced Power Management“ auf Festplatten.

 -- ‘tlp-configuration’-Parameter:
          Leerzeichengetrennte-Zeichenketten-Liste disk-apm-level-on-bat
     Wie ‘disk-apm-bat’, aber für den BAT-Modus.

 -- ‘tlp-configuration’-Parameter:
          Vielleicht-Leerzeichengetrennte-Zeichenketten-Liste
          disk-spindown-timeout-on-ac
     Zeitspanne, bis die Festplatte inaktiv wird (ein „Spin-Down“). Für
     jede deklarierte Festplatte muss hier je ein Wert angegeben werden.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter:
          Vielleicht-Leerzeichengetrennte-Zeichenketten-Liste
          disk-spindown-timeout-on-bat
     Wie ‘disk-spindown-timeout-on-ac’, aber für den BAT-Modus.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter:
          Vielleicht-Leerzeichengetrennte-Zeichenketten-Liste
          disk-iosched
     Ein-/Ausgaben-Planungsprogramm für Plattengeräte auswählen. Für
     jede deklarierte Festplatte muss ein Wert angegeben werden. Möglich
     sind zum Beispiel cfq, deadline und noop.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Zeichenkette sata-linkpwr-on-ac
     Stufe des „Aggressive Link Power Management“ (ALPM) für SATA.
     Angegeben werden können min_power (wenigster Stromverbrauch),
     medium_power (mittlerer Stromverbrauch), max_performance (maximale
     Leistung).

     Die Vorgabe ist ‘"max_performance"’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette sata-linkpwr-on-bat
     Wie ‘sata-linkpwr-ac’, aber für den BAT-Modus.

     Die Vorgabe ist ‘"min_power"’.

 -- ‘tlp-configuration’-Parameter: Vielleicht-Zeichenkette
          sata-linkpwr-blacklist
     Bestimmte SATA-Geräte („SATA-Host-Devices“) vom Link Power
     Management ausschließen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-An-Aus-Boolescher-Ausdruck
          ahci-runtime-pm-on-ac?
     Verwaltung des Stromverbrauchs zur Laufzeit für
     AHCI-Steuerungseinheiten („Controller“) und AHCI-Platten im
     AC-Modus aktivieren.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-An-Aus-Boolescher-Ausdruck
          ahci-runtime-pm-on-bat?
     Wie ‘ahci-runtime-pm-on-ac’ im BAT-Modus.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Nichtnegative-ganze-Zahl
          ahci-runtime-pm-timeout
     Nach wievielen Sekunden der Inaktivität die Platten in den
     Ruhezustand gehen („Suspended“).

     Die Vorgabe ist ‘15’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette pcie-aspm-on-ac
     Stufe des „PCI Express Active State Power Management“. Zur Auswahl
     stehen default (Voreinstellung), performance (hohe Leistung),
     powersave (wenig Stromverbrauch).

     Die Vorgabe ist ‘"performance"’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette pcie-aspm-on-bat
     Wie ‘pcie-aspm-ac’, aber für den BAT-Modus.

     Die Vorgabe ist ‘"powersave"’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette
          radeon-power-profile-on-ac
     Taktgeschwindigkeitsstufe („Clock Speed Level“) für Radeon-Grafik.
     Zur Auswahl stehen low (niedrig), mid (mittel), high (hoch), auto
     (automatisch), default (Voreinstellung).

     Die Vorgabe ist ‘"high"’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette
          radeon-power-profile-on-bat
     Wie ‘radeon-power-ac’, aber für den BAT-Modus.

     Die Vorgabe ist ‘"low"’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette radeon-dpm-state-on-ac
     Methode für die dynamische Energieverwaltung („Dynamic Power
     Management“, DPM) auf Radeon. Zur Auswahl stehen battery
     (Batterie), performance (Leistung).

     Die Vorgabe ist ‘"performance"’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette radeon-dpm-state-on-bat
     Wie ‘radeon-dpm-state-ac’, aber für den BAT-Modus.

     Die Vorgabe ist ‘"battery"’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette
          radeon-dpm-perf-level-on-ac
     Leistungsstufe („Performance Level“) des Radeon-DPM. Zur Auswahl
     stehen auto (automatisch), low (niedrig), high (hoch).

     Die Voreinstellung ist ‘"auto"’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette
          radeon-dpm-perf-level-on-bat
     Wie ‘radeon-dpm-perf-ac’, aber für den BAT-Modus.

     Die Voreinstellung ist ‘"auto"’.

 -- ‘tlp-configuration’-Parameter: An-Aus-Boolescher-Ausdruck
          wifi-pwr-on-ac?
     WLAN-Stromsparmodus.

     Vorgegeben ist ‘#f’.

 -- ‘tlp-configuration’-Parameter: An-Aus-Boolescher-Ausdruck
          wifi-pwr-on-bat?
     Wie ‘wifi-power-ac?’, aber für den BAT-Modus.

     Die Vorgabe ist ‘#t’.

 -- ‘tlp-configuration’-Parameter: Ja-Nein-Boolescher-Ausdruck
          wol-disable?
     Rechnerstart nach Netzwerkanforderung („Wake on LAN“) deaktivieren.

     Die Vorgabe ist ‘#t’.

 -- ‘tlp-configuration’-Parameter: Nichtnegative-ganze-Zahl
          sound-power-save-on-ac
     Nach wievielen Sekunden der Stromsparmodus für die
     Audioverarbeitung auf Intel-HDA- und AC97-Geräten aktiviert wird.
     Ein Wert von 0 deaktiviert den Stromsparmodus.

     Die Vorgabe ist ‘0’.

 -- ‘tlp-configuration’-Parameter: Nichtnegative-ganze-Zahl
          sound-power-save-on-bat
     Wie ‘sound-powersave-ac’, aber für den BAT-Modus.

     Die Vorgabe ist ‘1’.

 -- ‘tlp-configuration’-Parameter: Ja-Nein-Boolescher-Ausdruck
          sound-power-save-controller?
     Steuerungseinheit („Controller“) im Stromsparmodus auf
     Intel-HDA-Geräten deaktivieren.

     Die Vorgabe ist ‘#t’.

 -- ‘tlp-configuration’-Parameter: Boolescher-Ausdruck
          bay-poweroff-on-bat?
     Optisches Laufwerk in einer UltraBay/MediaBay im BAT-Modus
     aktivieren. Laufwerke können erneut gestartet werden, indem Sie den
     Hebel zum Auswerfen lösen (und wieder einsetzen) oder, auf neueren
     Modellen, indem Sie den Knopf zum Auswerfen des eingelegten
     Datenträgers drücken.

     Vorgegeben ist ‘#f’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette bay-device
     Name des Geräts für das optische Laufwerk, das gestartet werden
     soll.

     Die Vorgabe ist ‘"sr0"’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette runtime-pm-on-ac
     Laufzeitenergieverwaltung („Runtime Power Management“) von
     PCI(e)-Bus-Geräten. Zur Auswahl stehen on (angeschaltet) und auto
     (automatisch).

     Die Vorgabe ist ‘"on"’.

 -- ‘tlp-configuration’-Parameter: Zeichenkette runtime-pm-on-bat
     Wie ‘runtime-pm-ac’, aber für den BAT-Modus.

     Die Voreinstellung ist ‘"auto"’.

 -- ‘tlp-configuration’-Parameter: Boolescher-Ausdruck runtime-pm-all?
     Runtime Power Management for all PCI(e) bus devices, except
     blacklisted ones.

     Die Vorgabe ist ‘#t’.

 -- ‘tlp-configuration’-Parameter:
          Vielleicht-Leerzeichengetrennte-Zeichenketten-Liste
          runtime-pm-blacklist
     Die angegebenen PCI(e)-Geräteadressen von der
     Laufzeitenergieverwaltung („Runtime Power Management“) ausnehmen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter:
          Leerzeichengetrennte-Zeichenketten-Liste
          runtime-pm-driver-blacklist
     PCI(e)-Geräte von der Laufzeitenergieverwaltung („Runtime Power
     Management“) ausnehmen, wenn sie den angegebenen Treibern
     zugeordnet sind.

 -- ‘tlp-configuration’-Parameter: Boolescher-Ausdruck usb-autosuspend?
     USB-Geräte automatisch in den Ruhezustand versetzen
     („USB-Autosuspend“).

     Die Vorgabe ist ‘#t’.

 -- ‘tlp-configuration’-Parameter: Vielleicht-Zeichenkette usb-blacklist
     Die angegebenen Geräte vom USB-Autosuspend ausnehmen.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Boolescher-Ausdruck
          usb-blacklist-wwan?
     WWAN-Geräte vom USB-Autosuspend ausnehmen.

     Die Vorgabe ist ‘#t’.

 -- ‘tlp-configuration’-Parameter: Vielleicht-Zeichenkette usb-whitelist
     Für die angegebenen Geräte USB-Autosuspend aktivieren, selbst wenn
     Autosuspend durch den Treiber oder wegen ‘usb-blacklist-wwan?’
     deaktiviert werden würde.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Vielleicht-Boolescher-Ausdruck
          usb-autosuspend-disable-on-shutdown?
     USB-Autosuspend vor dem Herunterfahren aktivieren.

     Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

 -- ‘tlp-configuration’-Parameter: Boolescher-Ausdruck
          restore-device-state-on-startup?
     Zustand von funkfähigen Geräten (Bluetooth, WLAN, WWAN) vom letzten
     Herunterfahren beim Hochfahren des Systems wiederherstellen.

     Vorgegeben ist ‘#f’.

Thermald-Daemon
...............

Das Modul ‘(gnu services pm)’ stellt eine Schnittstelle zu Thermald zur
Verfügung, einem Dienst zur CPU-Frequenzskalierung („CPU Frequency
Scaling“), mit dem Überhitzung verhindert wird.

 -- Scheme-Variable: thermald-service-type
     Dies ist der Diensttyp für Thermald
     (https://01.org/linux-thermal-daemon/), den “Linux Thermal Daemon”,
     der für die Hitzeregulierung von Prozessoren zuständig ist. Er
     ändert deren thermischen Zustand („Thermal State“) und verhindert,
     dass sie überhitzen.

 -- Datentyp: thermald-configuration
     Datentyp, der die Konfiguration des ‘thermald-service-type’
     repräsentiert.

     ‘ignore-cpuid-check?’ (Vorgabe: ‘#f’)
          Ergebnis der Prüfung per CPUID auf unterstützte
          Prozessormodelle ignorieren.

     ‘thermald’ (Vorgabe: THERMALD)
          Paketobjekt von thermald.


File: guix.de.info,  Node: Audio-Dienste,  Next: Virtualisierungsdienste,  Prev: Dienste zur Stromverbrauchsverwaltung,  Up: Dienste

8.8.23 Audio-Dienste
--------------------

Das Modul ‘(gnu services audio)’ stellt einen Dienst zur Verfügung, um
MPD (den Music Player Daemon) zu starten.

Music Player Daemon
...................

Der Music Player Daemon (MPD) ist ein Dienst, der Musik abspielen kann
und der dabei vom lokalen Rechner oder über das Netzwerk durch
verschiedene Clients angesteuert werden kann.

   Das folgende Beispiel zeigt, wie man ‘mpd’ als Benutzer ‘"bob"’ auf
Port ‘6666’ ausführen könnte. Dabei wird Pulseaudio zur Ausgabe
verwendet.

     (service mpd-service-type
              (mpd-configuration
               (user "bob")
               (port "6666")))

 -- Scheme-Variable: mpd-service-type
     Der Diensttyp für ‘mpd’.

 -- Datentyp: mpd-configuration
     Datentyp, der die Konfiguration von ‘mpd’ repräsentiert.

     ‘user’ (Vorgabe: ‘"mpd"’)
          Das Benutzerkonto, mit dem mpd ausgeführt wird.

     ‘music-dir’ (Vorgabe: ‘"~/Music"’)
          Das Verzeichis, in dem nach Musikdateien gesucht wird.

     ‘playlist-dir’ (Vorgabe: ‘"~/.mpd/playlists"’)
          Das Verzeichnis, um Wiedergabelisten („Playlists“) zu
          speichern.

     ‘db-file’ (Vorgabe: ‘"~/.mpd/tag_cache"’)
          Der Ort, an dem die Musikdatenbank gespeichert wird.

     ‘state-file’ (Vorgabe: ‘"~/.mpd/state"’)
          Der Ort, an dem die Datei mit dem aktuellen Zustand von MPD
          gespeichert wird.

     ‘sticker-file’ (Vorgabe: ‘"~/.mpd/sticker.sql"’)
          Der Ort, an dem die Sticker-Datenbank gespeichert wird.

     ‘port’ (Vorgabe: ‘"6600"’)
          Der Port, auf dem mpd ausgeführt wird.

     ‘address’ (Vorgabe: ‘"any"’)
          Die Adresse, an die sich mpd binden wird. Um einen Unix-Socket
          zu benutzen, kann hier ein absoluter Pfad angegeben werden.

     ‘outputs’ (Vorgabe: ‘"(list (mpd-output))"’)
          Welche Tonausgaben MPD benutzen kann. Vorgegeben ist eine
          einzelne Ausgabe, die Pulseaudio benutzt.

 -- Datentyp: mpd-output
     Datentyp, der eine Tonausgabe von ‘mpd’ repräsentiert.

     ‘name’ (Vorgabe: ‘"MPD"’)
          Der Name der Tonausgabe.

     ‘type’ (Vorgabe: ‘"pulse"’)
          Der Typ der Tonausgabe.

     ‘enabled?’ (Vorgabe: ‘#t’)
          Gibt an, ob diese Tonausgabe aktiviert sein soll, wenn MPD
          gestartet wird. Vorgegeben ist, alle Tonausgaben zu
          aktivieren. Das entspricht der Voreinstellung, wenn keine
          Zustandsdatei existiert; mit Zustandsdatei wird der Zustand
          von früher wiederhergestellt.

     ‘tags?’ (Vorgabe: ‘#t’)
          Wenn es auf ‘#f’ steht, sendet MPD keine Tags an diese
          Ausgabe. Dies wird nur berücksichtigt, wenn das Ausgabe-Plugin
          Tags empfangen kann, wie beim ‘httpd’-Ausgabe-Plugin.

     ‘always-on?’ (Vorgabe: ‘#f’)
          Wenn es auf ‘#t’ steht, versucht MPD, diese Tonausgabe immer
          offen zu lassen. Das kann bei Streaming-Servern helfen, wo man
          _nicht_ will, dass die Verbindung zu allen Zuhörern abbricht,
          nur weil das Abspielen aus irgendeinem Grund angehalten wurde.

     ‘mixer-type’
          Für dieses Feld wird ein Symbol akzeptiert, das das für diese
          Tonausgabe zu benutzende Mischpult („Mixer“) bezeichnet. Zur
          Wahl stehen das ‘hardware’-Mischpult, das
          ‘software’-Mischpult, das ‘null’-Mischpult oder kein Mischpult
          (‘none’). Mit dem ‘null’-Mischpult kann die Lautstärke
          eingestellt werden, aber ohne Auswirkung; das kann als Trick
          benutzt werden, um ein externes Mischpult zu implementieren.

     ‘extra-options’ (Vorgabe: ‘'()’)
          Eine assoziative Liste, die Optionssymbole auf Zeichenketten
          abbildet. Sie wird an die Tonausgabenkonfiguration angehängt.

   Das folgende Beispiel zeigt eine Konfiguration von ‘mpd’, die eine
HTTP-Audiostreaming-Tonausgabe anbietet.

     (service mpd-service-type
              (mpd-configuration
                (outputs
                  (list (mpd-output
                          (name "streaming")
                          (type "httpd")
                          (mixer-type 'null)
                          (extra-options
                           `((encoder . "vorbis")
                             (port    . "8080"))))))))


File: guix.de.info,  Node: Virtualisierungsdienste,  Next: Versionskontrolldienste,  Prev: Audio-Dienste,  Up: Dienste

8.8.24 Virtualisierungsdienste
------------------------------

Das Modul ‘(gnu services virtualization)’ bietet Dienste für die Daemons
von libvirt und virtlog, sowie andere virtualisierungsbezogene Dienste.

Libvirt-Daemon
..............

‘libvirtd’ ist die serverseitige Daemon-Komponente des libvirt-Systems
zur Virtualisierungsverwaltung. Dieser Daemon läuft auf als Wirt
dienenden Servern und führt anfallende Verwaltungsaufgaben für
virtualisierte Gäste durch.

 -- Scheme-Variable: libvirt-service-type
     Dies ist der Diensttyp des libvirt-Daemons (https://libvirt.org).
     Sein Wert muss ein ‘libvirt-configuration’-Verbundsobjekt sein.

          (service libvirt-service-type
                   (libvirt-configuration
                    (unix-sock-group "libvirt")
                    (tls-port "16555")))

   Verfügbare ‘libvirt-configuration’-Felder sind:

 -- ‘libvirt-configuration’-Parameter: „package“ libvirt
     Libvirt-Paket.

 -- ‘libvirt-configuration’-Parameter: Boolescher-Ausdruck listen-tls?
     Option zum Lauschen auf sichere TLS-Verbindungen über den
     öffentlichen TCP/IP-Port. ‘listen’ muss gesetzt sein, damit dies
     eine Wirkung hat.

     Bevor Sie diese Funktionalität nutzen können, muss eine
     Zertifikatsautorität eingerichtet worden sein und
     Server-Zertifikate ausgestellt worden sein.

     Die Vorgabe ist ‘#t’.

 -- ‘libvirt-configuration’-Parameter: Boolescher-Ausdruck listen-tcp?
     Auf unverschlüsselte TCP-Verbindungen auf dem öffentlichen
     TCP/IP-Port lauschen. ‘listen’ muss gesetzt sein, damit dies eine
     Wirkung hat.

     Nach Voreinstellung kann auf dem TCP-Socket nur gelauscht werden,
     wenn SASL-Authentifizierung möglich ist. Nur solche
     SASL-Mechanismen, die Datenverschlüsselung unterstützen, sind
     zugelassen. Das sind DIGEST_MD5 und GSSAPI (Kerberos5)

     Vorgegeben ist ‘#f’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette tls-port
     Der Port, um sichere TLS-Verbindungen zu akzeptieren. Dies kann
     eine Portnummer oder ein Dienstname sein.

     Die Vorgabe ist ‘"16514"’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette tcp-port
     Der Port, um unsichere TCP-Verbindungen zu akzeptieren. Dies kann
     eine Portnummer oder ein Dienstname sein.

     Die Vorgabe ist ‘"16509"’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette listen-addr
     IP-Adresse oder Rechnername („Hostname“), der für von Clients
     ausgehende Verbindungen benutzt wird.

     Die Vorgabe ist ‘"0.0.0.0"’.

 -- ‘libvirt-configuration’-Parameter: Boolescher-Ausdruck mdns-adv?
     Einstellung, ob der libvirt-Dienst mDNS-Mitteilungen sendet.

     Dies kann alternativ für alle Dienste auf einem Rechner deaktiviert
     werden, indem man den Avahi-Daemon anhält.

     Vorgegeben ist ‘#f’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette mdns-name
     Der voreingestellte Name in mDNS-Mitteilungen. Er muss auf dem
     direkten Broadcast-Netzwerk eindeutig sein.

     Die Vorgabe ist ‘"Virtualization Host <Rechnername>"’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette unix-sock-group
     Besitzergruppe des UNIX-Sockets. Diese Einstellung kann benutzt
     werden, um einer als vertrauenswürdig geltenden Gruppe von
     Benutzern Zugriff auf Verwaltungsfunktionen zu gewähren, ohne dass
     diese als Administratornutzer root ausgeführt werden müssen.

     Die Vorgabe ist ‘"root"’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette unix-sock-ro-perms
     UNIX-Socket-Berechtigungen für den Socket nur mit Lesezugriff
     („read only“). Dies wird nur zur Überwachung des Zustands der VM
     benutzt.

     Die Vorgabe ist ‘"0777"’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette unix-sock-rw-perms
     UNIX-Socket-Berechtigungen für den Socket mit Schreib- und
     Lesezugriff („read/write“). Nach Vorgabe kann nur der
     Administratornutzer root zugreifen. Wenn auf dem Socket PolicyKit
     aktiviert ist, wird die Vorgabe geändert, dass jeder zugreifen kann
     (z.B. zu 0777)

     Die Vorgabe ist ‘"0770"’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette
          unix-sock-admin-perms
     UNIX-Socket-Berechtigungen für den Administrator-Socket. Nach
     Vorgabg hat nur der Besitzer (der Administratornutzer root) hierauf
     Zugriff; ändern Sie es nur, wenn Sie sicher wissen, wer dann alles
     Zugriff bekommt.

     Die Vorgabe ist ‘"0777"’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette unix-sock-dir
     Das Verzeichnis, in dem Sockets gefunden werden können bzw.
     erstellt werden.

     Die Vorgabe ist ‘"/var/run/libvirt"’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette auth-unix-ro
     Authentifizierungsschema für nur lesbare UNIX-Sockets. Nach Vorgabe
     gestatten es die Socket-Berechtigungen jedem Nutzer, sich zu
     verbinden.

     Die Vorgabe ist ‘"polkit"’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette auth-unix-rw
     Authentifizierungsschema für UNIX-Sockets mit Schreib- und
     Lesezugriff. Nach Vorgabe erlauben die Socket-Berechtigungen nur
     dem Administratornutzer root Zugriff. Wenn libvirt mit
     Unterstützung für PolicyKit kompiliert wurde, ist die Vorgabe,
     Authentifizierung über „polkit“ durchzuführen.

     Die Vorgabe ist ‘"polkit"’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette auth-tcp
     Authentifizierungsschema für TCP-Sockets. Wenn Sie SASL nicht
     aktivieren, dann wird alle TCP-Kommunikation im Klartext
     verschickt. Tun Sie dies _nicht_, außer Sie benutzen libvirt nur
     als Entwickler oder zum Testen.

     Die Vorgabe ist ‘"sasl"’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette auth-tls
     Authentifizierungsschema für TLS-Sockets. Für TLS-Sockets wird
     bereits durch die TLS-Schicht Verschlüsselung bereitgestellt und
     eingeschränkte Authentifizierung wird über Zertifikate
     durchgeführt.

     Es ist möglich, auch hier den SASL-Authentifizierungsmechanismus
     anzuwenden, indem Sie für diese Option „sasl“ eintragen.

     Die Vorgabe ist ‘"none"’, d.h. keine zusätzliche Authentifizierung.

 -- ‘libvirt-configuration’-Parameter: Optional-nichtleere-Liste
          access-drivers
     Welche Schemata zur Zugriffskontrolle auf Programmierschnittstellen
     (APIs) benutzt werden.

     Nach Vorgabe kann ein authentifizierter Nutzer auf alle
     Programmierschnittstellen zugreifen. Zugriffstreiber können dies
     einschränken.

     Die Vorgabe ist ‘()’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette key-file
     Pfad zur Schlüsseldatei für den Server. Wenn er auf eine leere
     Zeichenkette gesetzt ist, dann wird kein privater Schlüssel
     geladen.

     Die Vorgabe ist ‘""’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette cert-file
     Pfad zur Zertifikatsdatei für den Server. Wenn er auf eine leere
     Zeichenkette gesetzt ist, dann wird kein Zertifikat geladen.

     Die Vorgabe ist ‘""’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette ca-file
     Pfad zur Datei mit dem Zertifikat der Zertifikatsautorität. Wenn er
     auf eine leere Zeichenkette gesetzt ist, dann wird kein Zertifikat
     der Zertifikatsautorität geladen.

     Die Vorgabe ist ‘""’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette crl-file
     Pfad zur Zertifikatssperrliste („Certificate Revocation List“).
     Wenn er auf eine leere Zeichenkette gesetzt ist, dann wird keine
     Zertifikatssperrliste geladen.

     Die Vorgabe ist ‘""’.

 -- ‘libvirt-configuration’-Parameter: Boolescher-Ausdruck
          tls-no-sanity-cert
     Keine Überprüfung unseres eigenen Serverzertifikats durchführen.

     Beim Start vom libvirtd prüft dieser, ob bei seinem eigenen
     Zertifikat alles in Ordnung ist.

     Vorgegeben ist ‘#f’.

 -- ‘libvirt-configuration’-Parameter: Boolescher-Ausdruck
          tls-no-verify-cert
     Keine Überprüfung von Clientzertifikaten durchführen.

     Die Überprüfung des Zertifikats eines Clients ist der primäre
     Authentifizierungsmechanismus. Jeder Client, der kein von der
     Zertifikatsautorität signiertes Zertifikat vorweist, wird
     abgelehnt.

     Vorgegeben ist ‘#f’.

 -- ‘libvirt-configuration’-Parameter: Optional-nichtleere-Liste
          tls-allowed-dn-list
     Liste der erlaubten Einträge für den „Distinguished Name“ bei x509.

     Die Vorgabe ist ‘()’.

 -- ‘libvirt-configuration’-Parameter: Optional-nichtleere-Liste
          sasl-allowed-usernames
     Liste der erlaubten Einträge für SASL-Benutzernamen. Wie
     Benutzernamen aussehen müssen, ist abhängig vom jeweiligen
     SASL-Mechanismus.

     Die Vorgabe ist ‘()’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette tls-priority
     Override the compile time default TLS priority string. The default
     is usually ‘"NORMAL"’ unless overridden at build time. Only set
     this is it is desired for libvirt to deviate from the global
     default settings.

     Die Vorgabe ‘"NORMAL"’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl max-clients
     Maximalzahl gleichzeitiger Client-Verbindungen, die für alle
     Sockets zusammen zugelassen werden sollen.

     Die Vorgabe ist ‘5000’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl max-queued-clients
     Maximale Länge der Warteschlange für Verbindungen, die darauf
     warten, vom Daemon angenommen zu werden. Beachten Sie, dass sich
     manche Protokolle, die Neuübertragung unterstützen, danach richten
     könnten, damit ein erneuter Verbindungsversuch angenommen wird.

     Die Vorgabe ist ‘1000’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl max-anonymous-clients
     Maximale Länge der Warteschlange für Clients, die angenommen
     wurden, aber noch nicht authentifiziert wurden. Setzen Sie dies auf
     null, um diese Funktionalität abzuschalten.

     Die Vorgabe ist ‘20’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl min-workers
     Anzahl an Arbeiter-Threads, die am Anfang gestartet werden sollen.

     Die Vorgabe ist ‘5’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl max-workers
     Maximale Anzahl an Arbeiter-Threads.

     Wenn die Anzahl aktiver Clients die ‘min-workers’ übersteigt,
     werden weitere Threads erzeugt, bis die max_workers-Beschränkung
     erreicht wurde. Typischerweise würden Sie für max_workers die
     maximale Anzahl zugelassener Clients angeben.

     Die Vorgabe ist ‘20’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl prio-workers
     Die Anzahl priorisierter Arbeiter-Threads. Wenn alle Arbeiter aus
     diesem Pool festhängen, können manche, mit hoher Priorität
     versehene Aufrufe (speziell domainDestroy) in diesem Pool hier
     ausgeführt werden.

     Die Vorgabe ist ‘5’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl max-requests
     Wieviele nebenläufige RPC-Aufrufe global ausgeführt werden können.

     Die Vorgabe ist ‘20’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl max-client-requests
     Wieviele nebenläufige Anfragen von einer einzelnen
     Client-Verbindung ausgehen können. Um zu verhindern, dass ein
     einzelner Client den gesamten Server für sich beansprucht, sollte
     der Wert hier nur einen kleinen Teil der globalen max_requests- und
     max_workers-Parameter ausmachen.

     Die Vorgabe ist ‘5’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl admin-min-workers
     Wie bei ‘min-workers’, aber für die Administratorschnittstelle.

     Die Vorgabe ist ‘1’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl admin-max-workers
     Wie bei ‘max-workers’, aber für die Administratorschnittstelle.

     Die Vorgabe ist ‘5’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl admin-max-clients
     Wie bei ‘max-clients’, aber für die Administratorschnittstelle.

     Die Vorgabe ist ‘5’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl
          admin-max-queued-clients
     Wie bei ‘max-queued-clients’, aber für die
     Administratorschnittstelle.

     Die Vorgabe ist ‘5’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl
          admin-max-client-requests
     Wie bei ‘max-client-requests’, aber für die
     Administratorschnittstelle.

     Die Vorgabe ist ‘5’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl log-level
     Protokollstufe. 4 für Fehler, 3 für Warnungen, 2 für Informationen,
     1 zur Fehlersuche.

     Die Vorgabe ist ‘3’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette log-filters
     Protokollfilter.

     Ein Filter ermöglicht es, für eine bestimmte Kategorie von
     Protokollen eine andere Protokollierungsstufe festzulegen. Filter
     müssen eines der folgenden Formate haben:

        • x:Name

        • x:+Name

     where ‘name’ is a string which is matched against the category
     given in the ‘VIR_LOG_INIT()’ at the top of each libvirt source
     file, e.g., ‘"remote"’, ‘"qemu"’, or ‘"util.json"’ (the name in the
     filter can be a substring of the full category name, in order to
     match multiple similar categories), the optional ‘"+"’ prefix tells
     libvirt to log stack trace for each message matching name, and ‘x’
     is the minimal level where matching messages should be logged:

        • 1: Fehlersuche („DEBUG“)

        • 2: Informationen („INFO“)

        • 3: Warnungen („WARNING“)

        • 4: Fehler („ERROR“)

     Mehrere Filter können in einer einzelnen Filteranweisung definiert
     werden; sie müssen nur durch Leerzeichen voneinander getrennt
     werden.

     Die Vorgabe ist ‘"3:remote 4:event"’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette log-outputs
     Ausgaben für die Protokollierung.

     Eine Ausgabe ist einer der Orte, wohin Informationen aus der
     Protokollierung gespeichert werden. Eine Ausgabe kann auf eine der
     folgenden Arten angegeben werden:

     ‘x:stderr’
          Protokolle werden auf der Standardausgabe („Stderr“)
          ausgegeben.

     ‘x:syslog:Name’
          Syslog wird zur Ausgabe benutzt. Der Name dient dabei als
          Identifikator für libvirt-Protokolle.

     ‘x:file:Dateipfad’
          Protokolle werden in die Datei unter dem angegebenen Dateipfad
          ausgegeben.

     ‘x:journald’
          Die Ausgabe läuft über das journald-Protokollsystem.

     In allen Fällen steht das x vorne für die kleinste Stufe und wirkt
     als Filter.

        • 1: Fehlersuche („DEBUG“)

        • 2: Informationen („INFO“)

        • 3: Warnungen („WARNING“)

        • 4: Fehler („ERROR“)

     Mehrere Ausgaben können definiert werden, dazu müssen sie nur durch
     Leerzeichen getrennt hier angegeben werden.

     Die Vorgabe ist ‘"3:stderr"’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl audit-level
     Ermöglicht Anpassungen am Auditierungs-Subsystem.

        • 0: Jegliche Auditierung deaktivieren.

        • 1: Auditierung nur aktivieren, wenn sie beim Wirtssystem
          aktiviert ist.

        • 2: Auditierung aktivieren. Beenden, wenn das Wirtssystem
          Auditierung deaktiviert hat.

     Die Vorgabe ist ‘1’.

 -- ‘libvirt-configuration’-Parameter: Boolescher-Ausdruck audit-logging
     Audit-Nachrichten über die Protokollinfrastruktur von libvirt
     versenden.

     Vorgegeben ist ‘#f’.

 -- ‘libvirt-configuration’-Parameter: Optional-nichtleere-Zeichenkette
          host-uuid
     Für das Wirtssystem zu verwendende UUID. Bei der UUID dürfen nicht
     alle Ziffern gleich sein.

     Die Vorgabe ist ‘""’.

 -- ‘libvirt-configuration’-Parameter: Zeichenkette host-uuid-source
     Die Quelle, von der die UUID des Wirtssystems genommen wird.

        • ‘smbios’: Die UUID von ‘dmidecode -s system-uuid’ holen.

        • ‘machine-id’: Die UUID aus ‘/etc/machine-id’ holen.

     Falls ‘dmidecode’ keine gültige UUID liefert, wird eine temporäre
     UUID generiert.

     Die Vorgabe ist ‘"smbios"’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl keepalive-interval
     Einem Client wird eine Nachricht zum Aufrechterhalten der
     Verbindung gesendet, nachdem ‘keepalive_interval’ Sekunden lang
     keine Aktivität stattgefunden hat. Damit kann überprüft werden, ob
     der Client noch antwortet. Wird dieses Feld auf -1 gesetzt, wird
     libvirtd niemals Aufrechterhaltungsanfragen senden; Clients können
     diese aber weiterhin dem Daemon schicken und er wird auf diese
     antworten.

     Die Vorgabe ist ‘5’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl keepalive-count
     Wieviele Aufrechterhaltungsnachrichten höchstens zum Client
     geschickt werden dürfen, ohne dass eine Antwort zurückgekommen ist,
     bevor die Verbindung als abgebrochen gilt.

     Mit anderen Worten wird die Verbindung ungefähr dann automatisch
     geschlossen, wenn ‘keepalive_interval * (keepalive_count + 1)’
     Sekunden seit der letzten vom Client empfangenen Nachricht
     vergangen sind. Wenn ‘keepalive-count’ auf 0 gesetzt wurde, werden
     Verbindungen dann automatisch geschlossen, wenn
     ‘keepalive-interval’ Sekunden der Inaktivität vorausgegangen sind,
     ohne dass eine Aufrechterhaltungsnachricht versandt wurde.

     Die Vorgabe ist ‘5’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl
          admin-keepalive-interval
     Wie oben, aber für die Administratorschnittstelle.

     Die Vorgabe ist ‘5’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl admin-keepalive-count
     Wie oben, aber für die Administratorschnittstelle.

     Die Vorgabe ist ‘5’.

 -- ‘libvirt-configuration’-Parameter: Ganze-Zahl ovs-timeout
     Zeitbeschränkung für Aufrufe über Open vSwitch.

     Das Werkzeug ‘ovs-vsctl’ wird zur Konfiguration benutzt; die dort
     eingestellte Zeitbeschränkung ist nach Voreinstellung auf 5
     Sekunden festgelegt, um zu verhindern, dass libvirt durch
     unbegrenztes Warten blockiert werden kann.

     Die Vorgabe ist ‘5’.

Virtlog-Daemon
..............

Der virtlogd-Dienst ist eine serverseitige Daemon-Komponente von
libvirt, die benutzt wird, um Protokolle der Konsolen von virtuellen
Maschinen zu verwalten.

   Dieser Daemon wird von libvirt-Clientanwendungen nicht direkt
benutzt, sondern wird an deren Stelle vom ‘libvirtd’ aufgerufen. Indem
die Protokolle in einem eigenständigen Daemon vorgehalten werden, kann
der eigentliche ‘libvirtd’-Daemon neu gestartet werden, ohne dass man
riskiert, Protokolle zu verlieren. Der ‘virtlogd’-Daemon hat die
Fähigkeit, sich selbst erneut mit exec() zu starten, wenn er ‘SIGUSR1’
empfängt, damit Aktualisierungen ohne Ausfall möglich sind.

 -- Scheme-Variable: virtlog-service-type
     Dies ist der Diensttyp des virtlog-Daemons. Sein Wert muss eine
     ‘virtlog-configuration’ sein.

          (service virtlog-service-type
                   (virtlog-configuration
                    (max-clients 1000)))

 -- ‘virtlog-configuration’-Parameter: Ganze-Zahl log-level
     Protokollstufe. 4 für Fehler, 3 für Warnungen, 2 für Informationen,
     1 zur Fehlersuche.

     Die Vorgabe ist ‘3’.

 -- ‘virtlog-configuration’-Parameter: Zeichenkette log-filters
     Protokollfilter.

     Ein Filter ermöglicht es, für eine bestimmte Kategorie von
     Protokollen eine andere Protokollierungsstufe festzulegen. Filter
     müssen eines der folgenden Formate haben:

        • x:Name

        • x:+Name

     wobei ‘Name’ eine Zeichenkette ist, die zu einer in der
     Umgebungsvariablen ‘VIR_LOG_INIT()’ am Anfang jeder Quelldatei von
     libvirt angegebenen Kategorie passen muss, z.B. „remote“, „qemu“
     oder „util.json“ (der Name im Filter kann auch nur ein Teil des
     vollständigen Kategoriennamens sein, wodurch mehrere, ähnliche
     passende Kategoriennamen möglich sind). Das optionale Präfix „+“
     bedeutet, dass libvirt eine Rückverfolgung (d.h. ein „Stack Trace“)
     für jede zum Namen passende Nachricht ins Protokoll schreiben soll.
     ‘x’ benennt jeweils die kleinste Stufe, deren passende Nachrichten
     protokolliert werden sollen.

        • 1: Fehlersuche („DEBUG“)

        • 2: Informationen („INFO“)

        • 3: Warnungen („WARNING“)

        • 4: Fehler („ERROR“)

     Mehrere Filter können in einer einzelnen Filteranweisung definiert
     werden; sie müssen nur durch Leerzeichen voneinander getrennt
     werden.

     Die Vorgabe ist ‘"3:remote 4:event"’.

 -- ‘virtlog-configuration’-Parameter: Zeichenkette log-outputs
     Ausgaben für die Protokollierung.

     Als Ausgabe bezeichnen wir einen der Orte, an denen
     Protokollinformationen gespeichert werden. Eine Ausgabe wird auf
     eine der folgenden Arten angegeben:

     ‘x:stderr’
          Protokolle werden auf der Standardausgabe („Stderr“)
          ausgegeben.

     ‘x:syslog:Name’
          Syslog wird zur Ausgabe benutzt. Der Name dient dabei als
          Identifikator für libvirt-Protokolle.

     ‘x:file:Dateipfad’
          Protokolle werden in die Datei unter dem angegebenen Dateipfad
          ausgegeben.

     ‘x:journald’
          Die Ausgabe läuft über das journald-Protokollsystem.

     In allen Fällen steht das x vorne für die kleinste Stufe und wirkt
     als Filter.

        • 1: Fehlersuche („DEBUG“)

        • 2: Informationen („INFO“)

        • 3: Warnungen („WARNING“)

        • 4: Fehler („ERROR“)

     Mehrere Ausgaben können definiert werden, dazu müssen sie nur durch
     Leerzeichen getrennt hier angegeben werden.

     Die Vorgabe ist ‘"3:stderr"’.

 -- ‘virtlog-configuration’-Parameter: Ganze-Zahl max-clients
     Maximalzahl gleichzeitiger Client-Verbindungen, die für alle
     Sockets zusammen zugelassen werden sollen.

     Die Vorgabe ist ‘1024’.

 -- ‘virtlog-configuration’-Parameter: Ganze-Zahl max-size
     Wie groß eine Protokolldatei werden darf, bevor eine neue begonnen
     wird.

     Die Vorgabe ist ‘2MB’.

 -- ‘virtlog-configuration’-Parameter: Ganze-Zahl max-backups
     Wieviele Dateien mit Sicherungskopien gespeichert bleiben sollen.

     Die Vorgabe ist ‘3’.

Transparente Emulation mit QEMU
...............................

Mit ‘qemu-binfmt-service-type’ wird transparente Emulation von
Programm-Binärdateien, die für unterschiedliche Architekturen erstellt
wurden, ermöglicht. Z.B. können Sie ein ARMv7-Programm „einfach so“
transparent auf einer x86_64-Maschine ausführen. Dazu wird der
QEMU-Emulator (https://www.qemu.org) mit der
‘binfmt_misc’-Funktionalität des Kernels Linux kombiniert.

 -- Scheme-Variable: qemu-binfmt-service-type
     Dies ist der Diensttyp des QEMU/binfmt-Dienstes für transparente
     Emulation. Sein Wert muss ein ‘qemu-binfmt-configuration’-Objekt
     sein, das das QEMU-Paket angibt, das benutzt werden soll, sowie die
     Architektur, die wir emulieren möchten.

          (service qemu-binfmt-service-type
                   (qemu-binfmt-configuration
                     (platforms (lookup-qemu-platforms "arm" "aarch64"))))

     In diesem Beispiel aktivieren wir transparente Emulation für die
     Plattformen ARM und aarch64. Wenn wir ‘herd stop qemu-binfmt’
     ausführen, wird diese abgeschaltet, und mit ‘herd start
     qemu-binfmt’ wird sie wieder aktiv (siehe *note the ‘herd’ command:
     (shepherd)Invoking herd.).

 -- Datentyp: qemu-binfmt-configuration
     Dies ist die Konfiguration des ‘qemu-binfmt’-Dienstes.

     ‘platforms’ (Vorgabe: ‘'()’)
          Die Liste der emulierten QEMU-Plattformen. Jeder Eintrag muss
          ein “Plattformobjekt” sein, wie ‘lookup-qemu-platforms’ eines
          zurückliefert (siehe unten).

     ‘guix-support?’ (Vorgabe: ‘#f’)
          When it is true, QEMU and all its dependencies are added to
          the build environment of ‘guix-daemon’ (*note
          ‘--chroot-directory’ option: Aufruf des guix-daemon.). This
          allows the ‘binfmt_misc’ handlers to be used within the build
          environment, which in turn means that you can transparently
          build programs for another architecture.

          Wenn wir zum Beispiel annehmen, Sie arbeiten auf einer
          x86_64-Maschine und haben diesen Dienst eingerichtet:

               (service qemu-binfmt-service-type
                        (qemu-binfmt-configuration
                          (platforms (lookup-qemu-platforms "arm"))
                          (guix-support? #t)))

          Dann können Sie das hier ausführen:

               guix build -s armhf-linux inkscape

          und alles verhält sich so, als würden Sie Inkscape für ARMv7
          _wie „nativ“ auf einem ARM-Rechner erstellen_, wozu QEMU
          transparent benutzt wird, um den ARMv7-Prozessor zu emulieren.
          Das ist ganz schön praktisch, wenn Sie testen wollen, ob ein
          Paket für eine Architektur erstellt werden kann, die Ihnen
          nicht zur Verfügung steht.

     ‘qemu’ (Vorgabe: ‘qemu’)
          Das QEMU-Paket, das benutzt werden soll.

 -- Scheme-Prozedur: lookup-qemu-platforms PLATTFORMEN…
     Liefert die Liste der QEMU-Plattformobjekte, die den PLATTFORMEN…
     entsprechen. PLATTFORMEN muss eine Liste von Zeichenketten sein,
     die den Namen der Plattformen entsprechen, wie z.B. ‘"arm"’,
     ‘"sparc"’, ‘"mips64el"’ und so weiter.

 -- Scheme-Prozedur: qemu-platform? OBJEKT
     Liefert wahr, wenn das OBJEKT ein Plattformobjekt ist.

 -- Scheme-Prozedur: qemu-platform-name PLATTFORM
     Liefert den Namen der PLATTFORM, also eine Zeichenkette wie z.B.
     ‘"arm"’.


File: guix.de.info,  Node: Versionskontrolldienste,  Next: Spieldienste,  Prev: Virtualisierungsdienste,  Up: Dienste

8.8.25 Versionskontrolldienste
------------------------------

Das Modul ‘(gnu services version-control)’ stellt einen Dienst zur
Verfügung, der einen Fernzugriff auf lokale Git-Repositorys ermöglicht.
Dafür gibt es drei Möglichkeiten: den ‘git-daemon-service’, der Zugang
zu Repositorys über das ungesicherte, TCP-basierte ‘git://’-Protokoll
gewährt, das Erweitern des ‘nginx’-Webservers, um ihn als Proxy für
Anfragen an das ‘git-http-backend’ einzusetzen, oder mit dem
‘cgit-service-type’ eine Weboberfläche zur Verfügung zu stellen.

 -- Scheme-Prozedur: git-daemon-service [#:config
          (git-daemon-configuration)]

     Liefert einen Dienst, der ‘git daemon’ ausführt. Der Befehl startet
     den Git-Daemon, einen einfachen TCP-Server, um Repositorys über das
     Git-Protokoll für anonymen Zugriff zugänglich zu machen.

     The optional CONFIG argument should be a
     ‘<git-daemon-configuration>’ object, by default it allows read-only
     access to exported(1) repositories under ‘/srv/git’.

 -- Datentyp: git-daemon-configuration
     Datentyp, der die Konfiguration für ‘git-daemon-service’
     repräsentiert.

     ‘package’ (Vorgabe: GIT)
          Paketobjekt des verteilten Versionskontrollsystems Git.

     ‘export-all?’ (Vorgabe: #F)
          Ob Zugriff auf alle Git-Repositorys gewährt werden soll,
          selbst wenn keine ‘git-daemon-export-ok’-Datei in ihrem
          Verzeichnis gefunden wird.

     ‘base-path’ (Vorgabe: ‘/srv/git’)
          Ob alle Pfadanfragen behandelt werden sollen, als wären sie
          relativ zum angegebenen Pfad. Wenn Sie den Git-Daemon mit
          (BASE-PATH "/SRV/GIT") auf example.com ausführen und später
          versuchen, ‘git://example.com/hello.git’ zu pullen, wird der
          Git-Daemon den Pfad als ‘/srv/git/hello.git’ interpretieren.

     ‘user-path’ (Vorgabe: #F)
          Ob die ‘~benutzerkonto’-Notation in Anfragen verwendet werden
          darf. Wird hier die leere Zeichenkette angegeben, werden
          Anfragen an ‘git://host/~alice/foo’ als Anfragen verstanden,
          auf das ‘foo’-Repository im Persönlichen Verzeichnis des
          ‘alice’-Benutzerkontos verstanden. Wird (USER-PATH "PFAD")
          angegeben, wird dieselbe Anfrage als eine Anfrage verstanden,
          auf das ‘pfad/foo’-Repository im Persönlichen Verzeichnis des
          ‘alice’-Benutzerkontos zuzugreifen.

     ‘listen’ (Vorgabe: ’())
          Ob auf bestimmte IP-Adressen oder Rechnernamen („Hostnames“)
          gelauscht werden soll. Vorgegeben ist auf allen.

     ‘port’ (Vorgabe: #F)
          Ob auf einer alternativen Portnummer gelauscht werden soll.
          Vorgegeben ist 9418.

     ‘whitelist’ (Vorgabe: ’())
          Wenn dies nicht leer gelassen wird, wird nur der Zugriff auf
          die aufgelisteten Verzeichnisse gewährt.

     ‘extra-options’ (Vorgabe: ’())
          Zusätzliche Befehlszeilenoptionen, die dem ‘git daemon’
          mitgegeben werden sollen. Bitte führen Sie ‘man git-daemon’
          aus, um weitere Informationen zu erhalten.

   Zugriffe über das ‘git://’-Protokoll werden nicht authentifiziert.
Wenn Sie von einem Repository pullen, dass Sie über ‘git://’ geholt
haben, wissen Sie nicht, ob die empfangenen Daten modifiziert wurden
oder auch nur vom angegebenen Rechner kommen, und Ihre Verbindung kann
abgehört werden. Es ist besser, eine authentifizierte und verschlüsselte
Übertragungsart zu verwenden, zum Beispiel ‘https’. Obwohl Git es Ihnen
ermöglicht, Repositorys über schlichte dateibasierte Webserver
anzubieten, gibt es ein schnelleres Protokoll, das vom
‘git-http-backend’-Programm implementiert wird. Dieses Programm dient
als Hintergrundsystem für einen ordentlichen Git-Webdienst. Es wurde so
konstruiert, dass es über einen FastCGI-Proxy abrufbar ist. Siehe *note
Web-Dienste:: für weitere Informationen, wie Sie den benötigten
‘fcgiwrap’-Daemon ausführen.

   Guix hat einen separaten Konfigurationsdatentyp, um Git-Repositorys
über HTTP anzubieten.

 -- Datentyp: git-http-configuration
     Data type representing the configuration for a future
     ‘git-http-service-type’; can currently be used to configure Nginx
     trough ‘git-http-nginx-location-configuration’.

     ‘package’ (Vorgabe: GIT)
          Paketobjekt des verteilten Versionskontrollsystems Git.

     ‘git-root’ (Vorgabe: ‘/srv/git’)
          Das Verzeichnis, das die Git-Repositorys enthält, die der
          Allgemeinheit zugänglich gemacht werden sollen.

     ‘export-all?’ (Vorgabe: #F)
          Ob alle Git-Repositorys in GIT-ROOT zugänglich gemacht werden
          sollen, selbst wenn keine ‘git-daemon-export-ok’-Datei in
          ihrem Verzeichnis gefunden wird.

     ‘uri-path’ (Vorgabe: ‘/git/’)
          Präfix für Pfade beim Git-Zugriff. Beim vorgegebenen Präfix
          ‘/git/’ wird ‘http://SERVER/git/REPO.git’ auf
          ‘/srv/git/REPO.git’ abgebildet. Anfragen, deren URI-Pfade
          nicht mit dem Präfix beginnen, werden nicht an die Git-Instanz
          weitergereicht.

     ‘fcgiwrap-socket’ (Vorgabe: ‘127.0.0.1:9000’)
          Der Socket, auf dem der ‘fcgiwrap’-Daemon lauscht. Siehe *note
          Web-Dienste::.

   Es gibt zur Zeit keinen ‘git-http-service-type’, stattdessen können
Sie eine ‘nginx-location-configuration’ aus einer
‘git-http-configuration’ heraus erstellen und als Location zu einem
Webserver hinzufügen.

 -- Scheme-Prozedur: git-http-nginx-location-configuration
          [config=(git-http-configuration)] Eine
          ‘nginx-location-configuration’
     berechnen, die der angegebenen Git-HTTP-Konfiguration entspricht.
     Ein Beispiel für eine nginx-Dienstdefinition, um das vorgegebene
     ‘/srv/git’-Verzeichnis über HTTPS anzubieten, könnte so aussehen:

          (service nginx-service-type
                   (nginx-configuration
                    (server-blocks
                     (list
                      (nginx-server-configuration
                       (listen '("443 ssl"))
                       (server-name "git.mein-rechner.org")
                       (ssl-certificate
                        "/etc/letsencrypt/live/git.mein-rechner.org/fullchain.pem")
                       (ssl-certificate-key
                        "/etc/letsencrypt/live/git.mein-rechner.org/privkey.pem")
                       (locations
                        (list
                         (git-http-nginx-location-configuration
                          (git-http-configuration (uri-path "/"))))))))))

     Für dieses Beispiel nehmen wir an, dass Sie Ihr TLS-Zertifikat über
     Let’s Encrypt beziehen. Siehe *note Zertifikatsdienste::. Der
     vorgegebene ‘certbot’-Dienst leitet alle HTTP-Anfragen nach
     ‘git.mein-rechner.org’ auf HTTPS um. Zu Ihren Systemdiensten werden
     Sie auch einen ‘fcgiwrap’-Proxy hinzufügen müssen. Siehe *note
     Web-Dienste::.

Cgit-Dienst
...........

Cgit (https://git.zx2c4.com/cgit/) ist eine in C geschriebene
Weboberfläche als Vordergrundsystem für Git-Repositorys.

   Im folgenden Beispiel wird der Dienst mit den vorgegebenen Werten
eingerichtet. Nach Vorgabe kann auf Cgit auf Port 80 unter
‘http://localhost:80’ zugegriffen werden.

     (service cgit-service-type)

   Der Typ ‘Dateiobjekt’ bezeichnet entweder ein dateiartiges Objekt
(siehe *note dateiartige Objekte: G-Ausdrücke.) oder eine Zeichenkette.

   Verfügbare ‘cgit-configuration’-Felder sind:

 -- ‘cgit-configuration’-Parameter: „package“ package
     Das CGIT-Paket.

 -- ‘cgit-configuration’-Parameter: „nginx-server-configuration-list“
          nginx
     NGINX-Konfiguration.

 -- ‘cgit-configuration’-Parameter: Dateiobjekt about-filter
     Gibt einen Befehl an, der zur Formatierung des Inhalts der
     Übersichtsseiten aufgerufen wird (sowohl auf oberster Ebene und für
     jedes Repository).

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette agefile
     Gibt einen Pfad relativ zu jedem Repository-Pfad an, unter dem eine
     Datei gespeichert sein kann, die Datum und Uhrzeit des jüngsten
     Commits im Repository angibt.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Dateiobjekt auth-filter
     Gibt einen Befehl an, der aufgerufen wird, um Benutzer zu
     authentifizieren.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette branch-sort
     Wenn diese Option auf ‘age’ gesetzt wurde, wird die Liste der
     Branch-Referenzen nach Datum sortiert, und wenn sie auf ‘name’
     gesetzt wurde, wird nach dem Branch-Namen sortiert.

     Die Vorgabe ist ‘"name"’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette cache-root
     Pfad, unter dem Cgit-Zwischenspeichereinträge abgelegt werden.

     Die Vorgabe ist ‘"/var/cache/cgit"’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl cache-static-ttl
     Zahl, die angibt, wieviele Minuten die Zwischenspeicherungen für
     Repository-Seiten mit fester SHA1-Summe gültig bleiben, auf die
     zugegriffen wird („Time-to-live“).

     Die Vorgabe ist ‘-1’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl cache-dynamic-ttl
     Zahl, die angibt, wieviele Minuten die Zwischenspeicherungen für
     Repository-Seiten mit veränderlicher SHA1-Summe gültig bleiben, auf
     die zugegriffen wird.<

     Die Vorgabe ist ‘5’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl cache-repo-ttl
     Zahl, die angibt, wieviele Minuten die Zwischenspeicherungen für
     die Übersichtsseiten („summary“) von Repositorys gültig bleiben.

     Die Vorgabe ist ‘5’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl cache-root-ttl
     Zahl, die angibt, wieviele Minuten die Zwischenspeicherung der
     Seite mit dem Repository-Index gültig bleibt.

     Die Vorgabe ist ‘5’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl cache-scanrc-ttl
     Zahl, die angibt, wieviele Minuten die Zwischenspeicherung des
     Ergebnisses einer Suche in einem Pfad nach Git-Repositorys gültig
     bleibt.

     Die Vorgabe ist ‘15’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl cache-about-ttl
     Zahl, die angibt, wieviele Minuten die Zwischenspeicherungen für
     die Beschreibungsseiten („about“) von Repositorys gültig bleiben.

     Die Vorgabe ist ‘15’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl cache-snapshot-ttl
     Zahl, die angibt, wieviele Minuten die Zwischenspeicherungen für
     die Snapshots von Repositorys gültig bleiben.

     Die Vorgabe ist ‘5’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl cache-size
     Wieviele Einträge der Cgit-Zwischenspeicher höchstens haben kann.
     Wird ‘0’ festgelegt, wird _nicht_ zwischengespeichert.

     Die Vorgabe ist ‘0’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          case-sensitive-sort?
     Ob beim Sortieren von Objekten in der Repository-Liste die
     Groß-/Kleinschreibung beachtet werden soll.

     Die Vorgabe ist ‘#t’.

 -- ‘cgit-configuration’-Parameter: Liste clone-prefix
     Liste gemeinsamer Präfixe, von denen ein Repository geklont werden
     kann. D.h. dass, wenn eines mit einer Repository-URL kombiniert
     wird, eine gültige URL zum Klonen des Repositorys entsteht.

     Die Vorgabe ist ‘()’.

 -- ‘cgit-configuration’-Parameter: Liste clone-url
     Liste von Schablonen, aus denen eine ‘clone-url’ entsteht.

     Die Vorgabe ist ‘()’.

 -- ‘cgit-configuration’-Parameter: Dateiobjekt commit-filter
     Befehl, mit dem Commit-Nachrichten formatiert werden.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette commit-sort
     Wenn diese Option als ‘date’ festgelegt wird, wird das Commit-Log
     streng nach Datum geordnet. Wenn sie auf ‘topo’ gesetzt ist, wird
     es streng topologisch geordnet.

     Defaults to ‘"git log"’.

 -- ‘cgit-configuration’-Parameter: Dateiobjekt css
     URL, die angibt, welches CSS-Dokument von jeder Cgit-Seite
     eingebunden werden soll.

     Die Vorgabe ist ‘"/share/cgit/cgit.css"’.

 -- ‘cgit-configuration’-Parameter: Dateiobjekt email-filter
     Gibt einen Befehl an, um die Namen und E-Mail-Adressen der
     Commiter, Autoren und Tagger zu formatieren, die an verschiedenen
     Stellen in der Oberfläche von Cgit vorkommen.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck embedded?
     Wenn diese Option auf ‘#t’ gesetzt ist, wird Cgit ein HTML-Fragment
     erzeugen, das für die Einbettung in andere HTML-Seiten geeignet
     ist.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-commit-graph?
     Wenn diese Option auf ‘#t’ gesetzt ist, wird Cgit den Graphen der
     Commit-Historie links von den Commit-Nachrichten auf den
     Commit-Log-Seiten mit ASCII-Zeichen darstellen.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-filter-overrides?
     Wenn diese Option auf ‘#t’ gesetzt ist, können alle
     Filtereinstellungen durch die cgitrc-Dateien für das jeweilige
     Repository geändert werden.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-follow-links?
     Wenn diese Option auf ‘#t’ gesetzt ist, können Benutzer in der
     Log-Ansicht einer Datei folgen („–follow“).

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-http-clone?
     Wenn es auf ‘#t’ gesetzt ist, kann Cgit als Endpunkt für eine
     Dumb-HTTP-Übertragung mit „git clone“ benutzt werden.

     Die Vorgabe ist ‘#t’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-index-links?
     Wenn diese Option auf ‘#t’ gesetzt ist, legt Cgit für jedes
     Repository zusätzlich Hyperlinks „summary“, „commit“, „tree“ im
     Repository-Index an.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-index-owner?
     Wenn diese Option auf ‘#t’ gesetzt ist, zeigt Cgit den Besitzer für
     jedes Repository im Repository-Index an.

     Die Vorgabe ist ‘#t’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-log-filecount?
     Wenn diese Option auf ‘#t’ gesetzt ist, zeigt Cgit für jeden Commit
     auf den Repository-Log-Seiten die geänderten Dateien an.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-log-linecount?
     Wenn diese Option auf ‘#t’ gesetzt ist, zeigt Cgit für jeden Commit
     auf den Repository-Log-Seiten die Anzahl der hinzugefügten und
     entfernten Zeilen an.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-remote-branches?
     Wenn diese Option auf ‘#t’ gesetzt ist, zeigt Cgit unter den
     „summary“- und „ref“-Seiten entfernte Branches an.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-subject-links?
     Wenn diese Option auf ‘#t’ gesetzt ist, zeigt Cgit für Links auf
     Eltern-Commits die Betreffzeile des Eltern-Commits als Linktext in
     der Commit-Ansicht an.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-html-serving?
     Flag which, when set to ‘#t’, will make cgit use the subject of the
     parent commit as link text when generating links to parent commits
     in commit view.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-tree-linenumbers?
     Wenn diese Option auf ‘#t’ gesetzt ist, zeigt Cgit für jeden Blob
     aus reinem Text Links auf dessen Zeilennummern in der Baumansicht
     („tree“) an.

     Die Vorgabe ist ‘#t’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          enable-git-config?
     Flag which, when set to ‘#f’, will allow cgit to use Git config to
     set any repo specific settings.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’ parameter: file-object favicon
     URL, auf der ein Cgit-Symbol für die Anzeige in einem Webbrowser zu
     finden ist.

     Die Vorgabe ist ‘"/favicon.ico"’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette footer
     Der Inhalt der für diese Option angegebenen Datei wird wortwörtlich
     am Ende jeder Seite eingefügt (d.h. er ersetzt die vorgegebene
     Mitteilung „generated by …“).

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette head-include
     Der Inhalt der für diese Option angegebenen Datei wird wortwörtlich
     im HTML-HEAD-Bereich jeder Seite eingefügt.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette header
     Der Inhalt der für diese Option angegebenen Datei wird wortwörtlich
     am Anfang jeder Seite eingefügt.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Dateiobjekt include
     Der Name einer Konfigurationsdatei, deren Inhalt eingefügt werden
     soll, bevor die übrige hier angegebene Konfiguration eingelesen
     wird.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette index-header
     Der Inhalt der mit dieser Option angegebenen Datei wird
     wortwörtlich oberhalb des Repository-Index eingefügt.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette index-info
     Der Inhalt der mit dieser Option angegebenen Datei wird
     wortwörtlich unterhalb der Überschrift auf jeder
     Repository-Index-Seite eingefügt.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck local-time?
     Wenn diese Option auf ‘#t’ gesetzt ist, gibt Cgit die Zeitstempel
     von Commits und Tags in der Zeitzone des Servers an.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’ parameter: file-object logo
     URL, unter der ein Bild zu finden ist, das auf allen Cgit-Seiten
     als Logo zu sehen sein wird.

     Die Vorgabe ist ‘"/share/cgit/cgit.png"’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette logo-link
     URL, die geladen wird, wenn jemand auf das Logo-Bild klickt.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Dateiobjekt owner-filter
     Befehl, der aufgerufen wird, um die Besitzerspalte auf der
     Hauptseite zu formatieren.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl max-atom-items
     Anzahl der Objekte, die in der Atom-Feed-Ansicht angezeigt werden
     sollen.

     Die Vorgabe ist ‘10’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl max-commit-count
     Anzahl der Einträge, die in der Log-Ansicht pro Seite angezeigt
     werden sollen.

     Die Vorgabe ist ‘50’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl max-message-length
     Anzahl der Zeichen, die in der Log-Ansicht von jeder
     Commit-Nachricht angezeigt werden sollen.

     Die Vorgabe ist ‘80’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl max-repo-count
     Gibt an, wieviele Einträge auf jeder Seite der
     Repository-Index-Seiten stehen.

     Die Vorgabe ist ‘50’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl max-repodesc-length
     Gibt die maximale Anzahl der Zeichen an, die von jeder
     Repository-Beschreibung auf den Repository-Index-Seiten angezeigt
     werden sollen.

     Die Vorgabe ist ‘80’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl max-blob-size
     Gibt die maximale Größe eines Blobs in Kilobytes an, für den HTML
     angezeigt werden soll.

     Die Vorgabe ist ‘0’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette max-stats
     Maximaler Zeitraum für Statistiken. Gültige Werte sind ‘week’
     (Woche), ‘month’ (Monat), ‘quarter’ (Quartal) und ‘year’ (Jahr).

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Mimetype-Assoziative-Liste mimetype
     Mimetype je für die angegebene Dateinamenserweiterung.

     Die Vorgabe ist ‘((gif "image/gif") (html "text/html") (jpg
     "image/jpeg") (jpeg "image/jpeg") (pdf "application/pdf") (png
     "image/png") (svg "image/svg+xml"))’.

 -- ‘cgit-configuration’-Parameter: Dateiobjekt mimetype-file
     Gibt an, welche Datei zur automatischen Auflösung des Mimetypes
     benutzt werden soll.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette module-link
     Text, der als Formatzeichenkette für einen Hyperlink benutzt wird,
     wenn in einer Verzeichnisauflistung ein Submodul ausgegeben wird.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck nocache?
     Wenn dies auf ‘#t’ gesetzt ist, wird nicht zwischengespeichert.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck noplainemail?
     Wenn dies auf ‘#t’ gesetzt ist, werden keine vollen E-Mail-Adressen
     angezeigt.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck noheader?
     Wenn diese Option auf ‘#t’ gesetzt ist, wird Cgit die
     Standardseitenkopf auf allen Seiten weglassen.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Projektliste project-list
     Eine Liste der Unterverzeichnisse innerhalb des mit
     ‘repository-directory’ festgelegten Verzeichnisses, relativ dazu
     angegeben, die als Git-Repositorys geladen werden sollen. Eine
     leere Liste bedeutet, dass alle Unterverzeichnisse geladen werden.

     Die Vorgabe ist ‘()’.

 -- ‘cgit-configuration’-Parameter: Dateiobjekt readme
     Text, der als voreingestellter Wert für ‘cgit-repo-readme’ benutzt
     wird.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck remove-suffix?
     Wenn es auf ‘#t’ gesetzt ist und ‘repository-directory’ aktiviert
     ist, wird, wenn Repositorys mit einem Suffix von ‘.git’ gefunden
     werden, dieses Suffix von der URL und dem Namen weggelassen.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl renamelimit
     Maximale Anzahl der Dateien, die bei der Erkennung von
     Umbenennungen berücksichtigt werden.

     Die Vorgabe ist ‘-1’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette repository-sort
     Auf welche Art Repositorys in jedem Abschnitt sortiert werden.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Robots-Liste robots
     Text, der als Inhalt des ‘robots’-Meta-Tags dienen soll.

     Die Vorgabe ist ‘("noindex" "nofollow")’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette root-desc
     Welcher Text unterhalb der Überschrift auf Repository-Index-Seiten
     ausgegeben wird.

     Die Vorgabe ist ‘"a fast webinterface for the git dscm"’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette root-readme
     The content of the file specified with this option will be included
     verbatim below the “about” link on the repository index page.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette root-title
     Welcher Text als Überschrift auf Repository-Index-Seiten ausgegeben
     werden soll.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck scan-hidden-path
     If set to ‘#t’ and repository-directory is enabled,
     repository-directory will recurse into directories whose name
     starts with a period. Otherwise, repository-directory will stay
     away from such directories, considered as “hidden”. Note that this
     does not apply to the ‘.git’ directory in non-bare repos.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Liste snapshots
     Dieser Text gibt an, für welche Snapshot-Formate Cgit Links
     erzeugt.

     Die Vorgabe ist ‘()’.

 -- ‘cgit-configuration’-Parameter: Repository-Verzeichnis
          repository-directory
     Der Name des Verzeichnisses, in dem nach Repositorys gesucht wird
     (wird als ‘scan-path’ in die Einstellungen übernommen).

     Die Vorgabe ist ‘"/srv/git"’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette section
     Der Name des aktuellen Abschnitts („section“) für Repositorys —
     alle später definierten Repositorys werden den aktuellen
     Abschnittsnamen erben.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette section-sort
     Wenn diese Option auf ‘#t’ gesetzt wird, werden die Abschnitte in
     Repository-Auflistungen nach Namen sortiert.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl section-from-path
     Wenn diese Zahl vor „repository-directory“ definiert wurde, gibt
     sie an, wieviele Pfadelemente jedes Repository-Pfads für den
     Abschnittsnamen voreingestellt verwendet werden.

     Die Vorgabe ist ‘0’.

 -- ‘cgit-configuration’-Parameter: Boolescher-Ausdruck
          side-by-side-diffs?
     Wenn es auf ‘#t’ gesetzt ist, werden Diffs nach Voreinstellung in
     Nebeneinanderdarstellung („side by side“) statt als
     zusammengeführte „Unidiffs“ angezeigt.

     Vorgegeben ist ‘#f’.

 -- ‘cgit-configuration’-Parameter: Dateiobjekt source-filter
     Gibt einen Befehl an, der aufgerufen wird, um Klartext-Blobs in der
     Baumansicht („tree“) zu formatieren.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl summary-branches
     Specifies the number of branches to display in the repository
     “summary” view.

     Die Vorgabe ist ‘10’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl summary-log
     Specifies the number of log entries to display in the repository
     “summary” view.

     Die Vorgabe ist ‘10’.

 -- ‘cgit-configuration’-Parameter: Ganze-Zahl summary-tags
     Specifies the number of tags to display in the repository “summary”
     view.

     Die Vorgabe ist ‘10’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette strict-export
     Wenn dieser Dateiname angegeben wird, muss eine Datei diesen Namens
     in einem Repository enthalten sein, damit es angezeigt wird.

     Die Vorgabe ist ‘""’.

 -- ‘cgit-configuration’-Parameter: Zeichenkette virtual-root
     Wird diese URL angegeben, wird sie als Wurzel für alle Cgit-Links
     verwendet.

     Die Vorgabe ist ‘"/"’.

 -- ‘cgit-configuration’-Parameter:
          „repository-cgit-configuration“-Liste repositories
     Eine Liste von “cgit-repo”-Verbundsobjekten, die innerhalb der
     Konfiguration benutzt werden sollen.

     Die Vorgabe ist ‘()’.

     Verfügbare ‘repository-cgit-configuration’-Felder sind:

      -- ‘repository-cgit-configuration’-Parameter: Repo-Liste snapshots
          Eine Maske, die für dieses Repository auf die Snapshots gelegt
          wird, für die Cgit Links erzeugt. Dadurch kann die globale
          Einstellung ‘snapshots’ eingeschränkt werden.

          Die Vorgabe ist ‘()’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Dateiobjekt
               source-filter
          Die Voreinstellung für ‘source-filter’ ersetzen.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               url
          Die relative URL, mit der auf das Repository zugegriffen wird.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Dateiobjekt
               about-filter
          Die Voreinstellung für ‘about-filter’ ersetzen.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               branch-sort
          Wenn diese Option auf ‘age’ gesetzt wurde, wird die Liste der
          Branch-Referenzen nach Datum sortiert, und wenn sie auf ‘name’
          gesetzt wurde, wird nach dem Branch-Namen sortiert.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Liste clone-url
          Eine Liste von URLs, von denen das Repository geklont werden
          kann.

          Die Vorgabe ist ‘()’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Dateiobjekt
               commit-filter
          Die Voreinstellung für ‘commit-filter’ ersetzen.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Dateiobjekt
               commit-sort
          Wenn diese Option als ‘date’ festgelegt wird, wird das
          Commit-Log streng nach Datum geordnet. Wenn sie auf ‘topo’
          gesetzt ist, wird es streng topologisch geordnet.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               defbranch
          The name of the default branch for this repository. If no such
          branch exists in the repository, the first branch name (when
          sorted) is used as default instead. By default branch pointed
          to by HEAD, or “master” if there is no suitable HEAD.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               desc
          Der Wert, der als Repository-Beschreibung angezeigt werden
          soll.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               homepage
          Der Wert, der als Repository-Homepage angezeigt werden soll.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Dateiobjekt
               email-filter
          Die Voreinstellung für ‘email-filter’ ersetzen.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter:
               Vielleicht-Repo-Boolescher-Ausdruck enable-commit-graph?
          Eine Option, mit der die globale Einstellung für
          ‘enable-commit-graph?’ deaktiviert werden kann.

          Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

      -- ‘repository-cgit-configuration’-Parameter:
               Vielleicht-Repo-Boolescher-Ausdruck enable-log-filecount?
          Eine Option, mit der die globale Einstellung für
          ‘enable-log-filecount?’ deaktiviert werden kann.

          Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

      -- ‘repository-cgit-configuration’-Parameter:
               Vielleicht-Repo-Boolescher-Ausdruck enable-log-linecount?
          Eine Option, mit der die globale Einstellung für
          ‘enable-log-linecount?’ deaktiviert werden kann.

          Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

      -- ‘repository-cgit-configuration’-Parameter:
               Vielleicht-Repo-Boolescher-Ausdruck
               enable-remote-branches?
          Wenn diese Option auf ‘#t’ gesetzt ist, zeigt Cgit unter den
          „summary“- und „ref“-Seiten entfernte Branches an.

          Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

      -- ‘repository-cgit-configuration’-Parameter:
               Vielleicht-Repo-Boolescher-Ausdruck enable-subject-links?
          Eine Option, mit der die globale Einstellung für
          ‘enable-subject-links?’ deaktiviert werden kann.

          Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

      -- ‘repository-cgit-configuration’-Parameter:
               Vielleicht-Repo-Boolescher-Ausdruck enable-html-serving?
          Eine Option, mit der die globale Einstellung für
          ‘enable-html-serving?’ deaktiviert werden kann.

          Der Vorgabewert ist ‘disabled’ (d.h. deaktiviert).

      -- ‘repository-cgit-configuration’-Parameter:
               Repo-Boolescher-Ausdruck hide?
          Wenn diese Option auf ‘#t’ gesetzt ist, wird das Repository im
          Repository-Index verborgen.

          Vorgegeben ist ‘#f’.

      -- ‘repository-cgit-configuration’-Parameter:
               Repo-Boolescher-Ausdruck ignore?
          Wenn diese Option auf ‘#t’ gesetzt ist, wird das Repository
          ignoriert.

          Vorgegeben ist ‘#f’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Dateiobjekt
               logo
          URL, unter der ein Bild zu finden ist, das auf allen Seiten
          dieses Repositorys als Logo zu sehen sein wird.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               logo-link
          URL, die geladen wird, wenn jemand auf das Logo-Bild klickt.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Dateiobjekt
               owner-filter
          Die Voreinstellung für ‘owner-filter’ ersetzen.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               module-link
          Text, der als Formatzeichenkette für einen Hyperlink benutzt
          wird, wenn in einer Verzeichnisauflistung ein Submodul
          ausgegeben wird. Die Argumente für diese Formatzeichenkette
          sind Pfad und SHA1 des Submodul-Commits.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: module-link-Pfad
               module-link-path
          Text, der als Formatzeichenkette für einen Hyperlink benutzt
          wird, wenn in einer Verzeichnisauflistung ein Submodul mit dem
          angegebenen Unterverzeichnispfad ausgegeben wird.

          Die Vorgabe ist ‘()’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               max-stats
          Die Voreinstellung für den maximalen Zeitraum für Statistiken
          ersetzen.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               name
          Welcher Wert als Repository-Name angezeigt werden soll.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               owner
          Ein Wert, um den Besitzer des Repositorys zu identifizieren.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               path
          Ein absoluter Pfad zum Repository-Verzeichnis.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               readme
          A path (relative to repo) which specifies a file to include
          verbatim as the “About” page for this repo.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Zeichenkette
               section
          Der Name des aktuellen Abschnitts („section“) für Repositorys
          — alle später definierten Repositorys werden den aktuellen
          Abschnittsnamen erben.

          Die Vorgabe ist ‘""’.

      -- ‘repository-cgit-configuration’-Parameter: Repo-Liste
               extra-options
          Zusätzliche Optionen werden an die cgitrc-Datei angehängt.

          Die Vorgabe ist ‘()’.

 -- ‘cgit-configuration’-Parameter: Liste extra-options
     Zusätzliche Optionen werden an die cgitrc-Datei angehängt.

     Die Vorgabe ist ‘()’.

   Aber es könnte auch sein, dass Sie schon eine ‘cgitrc’ haben und zum
Laufen bringen wollen. In diesem Fall können Sie eine
‘opaque-cgit-configuration’ als Verbundsobjekt an ‘cgit-service-type’
übergeben. Wie der Name schon sagt, bietet eine opake Konfiguration
keinerlei Unterstützung für Reflexion.

   Verfügbare ‘opaque-cgit-configuration’-Felder sind:

 -- ‘opaque-cgit-configuration’-Parameter: „package“ cgit
     Das cgit-Paket.

 -- ‘opaque-cgit-configuration’-Parameter: Zeichenkette string
     Der Inhalt für ‘cgitrc’ als eine Zeichenkette.

   Wenn zum Beispiel Ihre ‘cgitrc’ nur aus der leeren Zeichenkette
bestehen soll, könnten Sie einen Cgit-Dienst auf diese Weise
instanziieren:

     (service cgit-service-type
              (opaque-cgit-configuration
               (cgitrc "")))

Gitolite-Dienst
...............

Gitolite (https://gitolite.com/gitolite/) ist ein Werkzeug, um
Git-Repositorys anderen auf einem zentralen Server anzubieten.

   Gitolite kann mehrere Nutzer mit mehreren Repositorys bedienen und
unterstützt flexible Konfigurationsmöglichkeiten der Berechtigungen der
Repository-Nutzer.

   Das folgende Beispiel richtet Gitolite für den voreingestellten
‘git’-Benutzer und den angegebenen öffentlichen SSH-Schlüssel ein.

     (service gitolite-service-type
              (gitolite-configuration
                (admin-pubkey (plain-file
                                "ihrname.pub"
                                "ssh-rsa AAAA… guix@example.com"))))

   Sie konfigurieren Gitolite, indem Sie ein besonderes Admin-Repository
anpassen. Sie können es zum Beispiel klonen, indem Sie, wenn Sie
Gitolite auf ‘example.com’ eingerichtet haben, den folgenden Befehl zum
Klonen des Admin-Repositorys ausführen:

     git clone git@example.com:gitolite-admin

   Wenn der Gitolite-Dienst aktiviert wird, wird der mitgegebene
‘admin-pubkey’ ins ‘keydir’-Verzeichnis vom „gitolite-admin“-Repository
eingefügt. Wenn sich dadurch das Repository ändert, wird die Änderung
mit der Commit-Nachricht „gitolite setup by GNU Guix“ commitet.

 -- Datentyp: gitolite-configuration
     Repräsentiert die Konfiguration vom ‘gitolite-service-type’.

     ‘package’ (Vorgabe: GITOLITE)
          Welches Gitolite-Paket benutzt werden soll.

     ‘user’ (Vorgabe: GIT)
          Welches Benutzerkonto für Gitolite benutzt werden soll. Mit
          diesem Benutzer werden Sie über SSH auf Gitolite zugreifen.

     ‘group’ (Vorgabe: GIT)
          Gruppe für Gitolite.

     ‘home-directory’ (Vorgabe: "/VAR/LIB/GITOLITE")
          Das Verzeichnis, in dem die Gitolite-Konfiguration und
          Repositorys gespeichert werden sollen.

     ‘rc-file’ (Vorgabe: (GITOLITE-RC-FILE))
          Ein dateiartiges Objekt (siehe *note dateiartige Objekte:
          G-Ausdrücke.), das die Konfiguration für Gitolite
          repräsentiert.

     ‘admin-pubkey’ (Vorgabe: #F)
          Ein dateiartiges Objekt (siehe *note dateiartige Objekte:
          G-Ausdrücke.), mit dem Gitolite eingerichtet werden kann. Er
          wird in das ‘keydir’-Verzeichnis im
          „gitolite-admin“-Repository eingefügt.

          Um einen SSH-Schlüssel als Zeichenkette anzugeben, benutzen
          Sie die ‘plain-file’-Funktion.

               (plain-file "ihrname.pub" "ssh-rsa AAAA… guix@example.com")

 -- Datentyp: gitolite-rc-file
     Repräsentiert die Gitolie-RC-Datei.

     ‘umask’ (Vorgabe: ‘#o0077’)
          Dies legt fest, welche Berechtigungen Gitolite an die
          Repositorys und deren Inhalt vergibt.

          Für einen Wert wie ‘#o0027’ wird die Gruppe, die Gitolite
          benutzt (nach Vorgabe: ‘git’) Lesezugriff erhalten. Das ist
          nötig, wenn Sie Gitolite mit Software wie Cgit oder Gitweb
          kombinieren.

     ‘git-config-keys’ (Vorgabe: ‘""’)
          Gitolite allows you to set git config values using the
          ‘config’ keyword. This setting allows control over the config
          keys to accept.

     ‘roles’ (Vorgabe: ‘'(("READERS" . 1) ("WRITERS" . ))’)
          Legt fest, welche Rollennamen für Nutzer möglich sind, wenn
          Sie den Befehl perms ausführen.

     ‘enable’ (Vorgabe: ‘'("help" "desc" "info" "perms" "writable" "ssh-authkeys" "git-config" "daemon" "gitweb")’)
          Diese Einstellung legt die innerhalb von Gitolite zur
          Verfügung gestellten Befehle fest.

   ---------- Footnotes ----------

   (1) By creating the magic file ‘git-daemon-export-ok’ in the
repository directory.


File: guix.de.info,  Node: Spieldienste,  Next: PAM-Einbindedienst,  Prev: Versionskontrolldienste,  Up: Dienste

8.8.26 Spieldienste
-------------------

„The Battle for Wesnoth“-Dienst
...............................

The Battle for Wesnoth (https://wesnoth.org) ist ein in einer
Fantasy-Welt angesiedeltes, rundenbasiertes, taktisches Strategiespiel.
Es verfügt über mehrere Einzelspielerkampagnen und Mehrspielerspiele
(über das Netzwerk und lokal).

 -- Variable: Scheme-Variable wesnothd-service-type
     Diensttyp für den wesnothd-Dienst. Als Wert muss ein
     ‘wesnothd-configuration’-Objekt benutzt werden. Um wesnothd mit
     seiner Vorgabekonfiguration auszuführen, instanziieren Sie es als:

          (service wesnothd-service-type)

 -- Datentyp: wesnothd-configuration
     Datentyp, der die Konfiguration von ‘wesnothd’ repräsentiert.

     ‘package’ (Vorgabe: ‘wesnoth-server’)
          Das Paket, das für den Wesnoth-Server benutzt werden soll.

     ‘port’ (Vorgabe: ‘15000’)
          Der Port, an den der Server gebunden wird.


File: guix.de.info,  Node: PAM-Einbindedienst,  Next: Guix-Dienste,  Prev: Spieldienste,  Up: Dienste

8.8.27 PAM-Einbindedienst
-------------------------

Das Modul ‘(gnu services pam-mount)’ stellt einen Dienst zur Verfügung,
mit dem Benutzer Datenträger beim Anmelden einbinden können. Damit
sollte es möglich sein, jedes vom System unterstützte Datenträgerformat
einzubinden.

 -- Variable: Scheme-Variable pam-mount-service-type
     Diensttyp für PAM-Einbindeunterstützung.

 -- Datentyp: pam-mount-configuration
     Datentyp, der die Konfiguration für PAM-Einbindungen („PAM Mount“)
     repräsentiert.

     Sie hat folgende Parameter:

     ‘rules’
          Die Konfigurationsregeln, um
          ‘/etc/security/pam_mount.conf.xml’ zu erzeugen.

          Die Konfigurationsregeln sind SXML-Elemente (siehe *note
          (guile)SXML::) und nach Vorgabe wird für niemanden etwas beim
          Anmelden eingebunden:

               `((debug (@ (enable "0")))
                 (mntoptions (@ (allow ,(string-join
                                         '("nosuid" "nodev" "loop"
                                           "encryption" "fsck" "nonempty"
                                           "allow_root" "allow_other")
                                         ","))))
                 (mntoptions (@ (require "nosuid,nodev")))
                 (logout (@ (wait "0")
                            (hup "0")
                            (term "no")
                            (kill "no")))
                 (mkmountpoint (@ (enable "1")
                                  (remove "true"))))

          Some ‘volume’ elements must be added to automatically mount
          volumes at login. Here’s an example allowing the user ‘alice’
          to mount her encrypted ‘HOME’ directory and allowing the user
          ‘bob’ to mount the partition where he stores his data:

               (define pam-mount-rules
               `((debug (@ (enable "0")))
                           (volume (@ (user "alice")
                                      (fstype "crypt")
                                      (path "/dev/sda2")
                                      (mountpoint "/home/alice")))
                           (volume (@ (user "bob")
                                      (fstype "auto")
                                      (path "/dev/sdb3")
                                      (mountpoint "/home/bob/data")
                                      (options "defaults,autodefrag,compress")))
                           (mntoptions (@ (allow ,(string-join
                                                   '("nosuid" "nodev" "loop"
                                                     "encryption" "fsck" "nonempty"
                                                     "allow_root" "allow_other")
                                                   ","))))
                           (mntoptions (@ (require "nosuid,nodev")))
                           (logout (@ (wait "0")
                                      (hup "0")
                                      (term "no")
                                      (kill "no")))
                           (mkmountpoint (@ (enable "1")
                                            (remove "true")))))

               (service pam-mount-service-type
                        (pam-mount-configuration
                          (rules pam-mount-rules)))

          Die vollständige Liste möglicher Optionen finden Sie in der
          Handbuchseite („man page“) für pam_mount.conf
          (http://pam-mount.sourceforge.net/pam_mount.conf.5.html).


File: guix.de.info,  Node: Guix-Dienste,  Next: Linux-Dienste,  Prev: PAM-Einbindedienst,  Up: Dienste

8.8.28 Guix-Dienste
-------------------

Guix-Datendienst
................

Der Guix-Datendienst (http://data.guix.gnu.org) („Guix Data Service“)
verarbeitet und speichert Daten über GNU Guix und stellt diese zur
Verfügung. Dazu gehören Informationen über Pakete, Ableitungen sowie
durch Linting erkannte Paketfehler.

   Die Daten werden in einer PostgreSQL-Datenbank gespeichert und stehen
über eine Weboberfläche zur Verfügung.

 -- Variable: Scheme-Variable guix-data-service-type
     Diensttyp für den Guix-Datendienst. Sein Wert muss ein
     ‘guix-data-service-configuration’-Objekt sein. Der Dienst kann
     optional den getmail-Dienst erweitern und die
     guix-commits-Mailing-Liste benutzen, um bei Änderungen am
     Guix-Git-Repository auf dem Laufenden zu bleiben.

 -- Datentyp: guix-data-service-configuration
     Der Datentyp, der die Konfiguration des Guix-Datendienstes
     repräsentiert.

     ‘package’ (Vorgabe: ‘guix-data-service’)
          Das zu verwendende Guix-Datendienst-Paket.

     ‘user’ (Vorgabe: ‘"guix-data-service"’)
          Das Systembenutzerkonto, mit dem der Dienst ausgeführt wird.

     ‘group’ (Vorgabe: ‘"guix-data-service"’)
          Die Systembenutzergruppe, mit der der Dienst ausgeführt wird.

     ‘port’ (Vorgabe: ‘8765’)
          Der Port, an den der Webdienst gebunden wird.

     ‘host’ (Vorgabe: ‘"127.0.0.1"’)
          Die Netzwerkschnittstelle („Host“), an die der Webdienst
          gebunden wird.

     ‘getmail-idle-mailboxes’ (Vorgabe: ‘#f’)
          Wenn es festgelegt ist, wird es als Liste der Postfächer
          („Mailboxes“) eingerichtet, die der getmail-Dienst beobachtet.

     ‘commits-getmail-retriever-configuration’ (Vorgabe: ‘#f’)
          Wenn es festgelegt ist, bezeichnet dies das
          ‘getmail-retriever-configuration’-Objekt, mit dem getmail
          eingerichtet wird, um E-Mails von der
          „guix-commits“-Mailing-Liste zu beziehen.

     ‘extra-options’ (Vorgabe: ’())
          Zusätzliche Befehlszeilenoptionen für ‘guix-data-service’.

     ‘extra-process-jobs-options’ (Vorgabe: ’())
          Zusätzliche Befehlszeilenoptionen für
          ‘guix-data-service-process-jobs’.


File: guix.de.info,  Node: Linux-Dienste,  Next: Hurd Services,  Prev: Guix-Dienste,  Up: Dienste

8.8.29 Linux-Dienste
--------------------

Early-OOM-Dienst
................

Early OOM (https://github.com/rfjakob/earlyoom), auch bekannt als
Earlyoom, ist ein minimalistischer Out-Of-Memory-Daemon (OOM), um auf
Anwendungsebene („User Space“) Programme abzuwürgen, wenn einem der
freie Arbeitsspeicher ausgeht (ein „OOM-Killer“). Er stellt eine
Alternative zum im Kernel eingebauten OOM-Killer dar, mit der das System
in einem solchen Fall besser weiterhin auf Benutzereingaben reagieren
kann und die konfigurierbarer ist.

 -- Scheme-Variable: earlyoom-service-type
     Der Diensttyp, um ‘earlyoom’, den Early-OOM-Daemon, auszuführen.
     Als Wert muss ein ‘earlyoom-configuration’-Objekt angegeben werden,
     wie unten beschrieben. So kann der Dienst mit seiner
     Vorgabekonfiguration instanziieret werden:

          (service earlyoom-service-type)

 -- Datentyp: earlyoom-configuration
     Dies ist das Verbundsobjekt mit der Konfiguration des
     ‘earlyoom-service-type’.

     ‘earlyoom’ (Vorgabe: EARLYOOM)
          Das Earlyoom-Paket, das benutzt werden soll.

     ‘minimum-available-memory’ (Vorgabe: ‘10’)
          Der Schwellwert, wieviel Arbeitsspeicher mindestens
          _verfügbar_ bleiben muss, in Prozent.

     ‘minimum-free-swap’ (Vorgabe: ‘10’)
          Der Schwellwert, wieviel Swap-Speicher mindestens frei bleiben
          muss, in Prozent.

     ‘prefer-regexp’ (Vorgabe: ‘#f’)
          Ein regulärer Ausdruck (als eine Zeichenkette), der auf die
          Namen jener Prozesse passt, die als Erste abgewürgt werden
          sollen.

     ‘avoid-regexp’ (Vorgabe: ‘#f’)
          Ein regulärer Ausdruck (als eine Zeichenkette), der auf die
          Namen jener Prozesse passt, die _nicht_ abgewürgt werden
          sollen.<

     ‘memory-report-interval’ (Vorgabe: ‘0’)
          Das Intervall in Sekunden, in dem ein Bericht über den
          Speicher ausgegeben werden soll. Nach Vorgabe ist es
          deaktiviert.

     ‘ignore-positive-oom-score-adj?’ (Vorgabe: ‘#f’)
          A boolean indicating whether the positive adjustments set in
          ‘/proc/*/oom_score_adj’.

     ‘show-debug-messages?’ (Vorgabe: ‘#f’)
          Ein boolescher Ausdruck, der angibt, ob Nachrichten zur
          Fehlersuche ausgegeben werden sollen. Die Protokolle werden
          unter ‘/var/log/earlyoom.log’ gespeichert.

     ‘send-notification-command’ (Vorgabe: ‘#f’)
          Hiermit kann ein eigener Befehl eingestellt werden, um
          Benachrichtigungen zu senden.

Kernelmodul-Ladedienst
......................

Mit dem Kernelmodul-Ladedienst („Kernel Module Loader Service“) können
Sie veranlassen, dass hinzuladbare Kernelmodule beim Systemstart geladen
werden. Das bietet sich besonders für Module an, die nicht automatisch
geladen werden („Autoload“), sondern manuell geladen werden müssen, wie
es z.B. bei ‘ddcci’ der Fall ist.

 -- Scheme-Variable: kernel-module-loader-service-type
     Der Diensttyp, um hinzuladbare Kernelmodule beim Systemstart über
     ‘modprobe’ zu laden. Als Wert muss eine Liste von Zeichenketten
     angegeben werden, die den Modulnamen entsprechen. Um zum Beispiel
     die durch ‘ddcci-driver-linux’ zur Verfügung gestellten Treiber zu
     laden und dabei durch Übergabe bestimmter Parameter den Modus zur
     Fehlersuche zu aktivieren, können Sie Folgendes benutzen:

          (use-modules (gnu) (gnu services))
          (use-package-modules linux)
          (use-service-modules linux)

          (define ddcci-config
            (plain-file "ddcci.conf"
                        "options ddcci dyndbg delay=120"))

          (operating-system
            …
            (services (cons* (service kernel-module-loader-service-type
                                      '("ddcci" "ddcci_backlight"))
                             (simple-service 'ddcci-config etc-service-type
                                             (list `("modprobe.d/ddcci.conf"
                                                     ,ddcci-config)))
                             %base-services))
            (kernel-loadable-modules (list ddcci-driver-linux)))


File: guix.de.info,  Node: Hurd Services,  Next: Verschiedene Dienste,  Prev: Linux-Dienste,  Up: Dienste

8.8.30 Hurd Services
--------------------

 -- Scheme Variable: hurd-console-service-type
     This service starts the fancy ‘VGA’ console client on the Hurd.

     The service’s value is a ‘hurd-console-configuration’ record.

 -- Data Type: hurd-console-configuration
     This is the data type representing the configuration for the
     hurd-console-service.

     ‘hurd’ (default: HURD)
          The Hurd package to use.

 -- Scheme Procedure: hurd-etc-service OS
     This service implements a minimal ‘etc-service’, adding some
     specifics for the Hurd.

     It is part of the ‘hurd-default-essential-services’.

 -- Scheme Variable: hurd-getty-service-type
     This service starts a tty using the Hurd ‘getty’ program.

     The service’s value is a ‘hurd-getty-configuration’ record.

 -- Data Type: hurd-getty-configuration
     This is the data type representing the configuration for the
     hurd-getty-service.

     ‘hurd’ (default: HURD)
          The Hurd package to use.

     ‘tty’
          The name of the console this Getty runs on—e.g., ‘"tty1"’.

     ‘baud-rate’ (default: ‘38400’)
          An integer specifying the baud rate of the tty.


File: guix.de.info,  Node: Verschiedene Dienste,  Prev: Hurd Services,  Up: Dienste

8.8.31 Verschiedene Dienste
---------------------------

Fingerabdrucklese-Dienst
........................

Das Modul ‘(gnu services authentication)’ stellt einen DBus-Dienst zur
Verfügung, mit dem Fingerabdrücke mit Hilfe eines Fingerabdrucksensors
gelesen und identifiziert werden können.

 -- Scheme-Variable: fprintd-service-type
     Der Diensttyp für ‘fprintd’, mit dem Fingerabdrücke gelesen werden
     können.

          (service fprintd-service-type)

Systemsteuerungsdienst
......................

Das Modul ‘(gnu services sysctl)’ stellt einen Dienst zur Verfügung, um
Kernelparameter zur Boot-Zeit einzustellen.

 -- Scheme-Variable: sysctl-service-type
     Der Diensttyp für ‘sysctl’, das Kernel-Parameter unter ‘/proc/sys/’
     anpasst. Um IPv4-Weiterleitung („Forwarding“) zu aktivieren, kann
     er auf diese Weise instanziiert werden:

          (service sysctl-service-type
                   (sysctl-configuration
                     (settings '(("net.ipv4.ip_forward" . "1")))))

 -- Datentyp: sysctl-configuration
     Der Datentyp, der die Konfiguration von ‘sysctl’ repräsentiert.

     ‘sysctl’ (Vorgabe: ‘(file-append procps "/sbin/sysctl"’)
          Die ausführbare Datei für ‘sysctl’, die benutzt werden soll.

     ‘settings’ (Vorgabe: ‘'()’)
          Eine assoziative Liste, die Kernel-Parameter und ihre Werte
          festlegt.

PC/SC-Smart-Card-Daemon-Dienst
..............................

Das Modul ‘(gnu services security-token)’ stellt den folgenden Dienst
zur Verfügung, um ‘pcscd’ auszuführen, den PC/SC-Smart-Card-Daemon.
‘pcscd’ ist das Daemonprogramm für die Rahmensysteme pcsc-lite und
MuscleCard. Es handelt sich um einen Ressourcenverwaltungsdienst, der
die Kommunikation mit Smart-Card-Lesegeräten, Smart Cards und
kryptographischen Tokens steuert, die mit dem System verbunden sind.

 -- Scheme-Variable: pcscd-service-type
     Diensttyp für den ‘pcscd’-Dienst. Als Wert muss ein
     ‘pcscd-configuration’-Objekt angegeben werden. Um pcscd mit seiner
     Vorgabekonfiguration auszuführen, instanziieren Sie ihn als:

          (service pcscd-service-type)

 -- Datentyp: pcscd-configuration
     Repräsentiert die Konfiguration von ‘pcscd’.

     ‘pcsc-lite’ (Vorgabe: ‘pcsc-lite’)
          Das „pcsc-lite“-Paket, das pcscd zur Verfügung stellt.
     ‘usb-drivers’ (Vorgabe: ‘(list ccid)’)
          Die Liste der Pakete, die USB-Treiber für pcscd zur Verfügung
          stellen. Es wird erwartet, dass sich Treiber unter
          ‘pcsc/drivers’ innerhalb des Store-Verzeichnisses des Pakets
          befinden.

Lirc-Dienst
...........

Das Modul ‘(gnu services lirc)’ stellt den folgenden Dienst zur
Verfügung.

 -- Scheme-Prozedur: lirc-service [#:lirc lirc] [#:device #f] [#:driver
          #f] [#:config-file #f]  [#:extra-options '()]
     Liefert einen Dienst, der LIRC (http://www.lirc.org) ausführt,
     einen Dienst zum Dekodieren von Infrarot-Signalen aus
     Fernbedienungen.

     Optional können DEVICE (Gerät), DRIVER (Treiber) und CONFIG-FILE
     (Name der Konfigurationsdatei) festgelegt werden. Siehe das
     Handbuch von ‘lircd’ für Details.

     Schließlich enthält EXTRA-OPTIONS eine Liste zusätzlicher
     Befehlszeilenoptionen, die an ‘lircd’ übergeben werden.

Spice-Dienst
............

Das Modul ‘(gnu services spice)’ stellt den folgenden Dienst bereit.

 -- Scheme-Prozedur: spice-vdagent-service [#:spice-vdagent]
     Liefert einen Dienst, der VDAGENT (https://www.spice-space.org)
     ausführt, einen Daemon, um die Zwischenablage mit einer virtuellen
     Maschine zu teilen und die Auflösung des Anzeigegeräts des
     Gastsystems umzustellen, wenn sich die Größe des grafischen
     Konsolenfensters ändert.

inputattach-Dienst
..................

Der inputattach-Dienst (https://linuxwacom.github.io/) macht es Ihnen
möglich, Eingabegeräte wie Wacom-Tabletts, Tastbildschirme
(„Touchscreens“) oder Joysticks mit dem Xorg-Anzeigeserver zu benutzen.

 -- Scheme-Variable: inputattach-service-type
     Der Diensttyp für den Dienst, der ‘inputattach’ auf einem Gerät
     ausführt und Ereignisse davon weiterleitet.

 -- Datentyp: inputattach-configuration
     ‘device-type’ (Vorgabe: ‘"wacom"’)
          Der Typ des Geräts, mit dem eine Verbindung hergestellt werden
          soll. Führen Sie ‘inputattach --help’ aus dem
          ‘inputattach’-Paket aus, um eine Liste unterstützter
          Gerätetypen zu sehen.

     ‘device’ (Vorgabe: ‘"/dev/ttyS0"’)
          Die Gerätedatei, um sich mit dem Gerät zu verbinden.

     ‘baud-rate’ (Vorgabe: ‘#f’)
          Welche Baudrate für die serielle Verbindung benutzt werden
          soll. Es sollte eine Zahl oder ‘#f’ angegeben werden.

     ‘log-file’ (Vorgabe: ‘#f’)
          Wenn es wahr ist, muss es der Name einer Datei sein, in die
          Protokollnachrichten geschrieben werden sollen.

Dictionary Service
..................

Das Modul ‘(gnu services dict)’ stellt den folgenden Dienst zur
Verfügung:

 -- Scheme Variable: dicod-service-type
     This is the type of the service that runs the ‘dicod’ daemon, an
     implementation of DICT server (*note (dico)Dicod::).

 -- Scheme-Prozedur: dicod-service [#:config (dicod-configuration)]
     Liefert einen Dienst, der den ‘dicod’-Daemon ausführt. Dabei
     handelt es sich um eine Implementierung eines DICT-Servers (siehe
     das *note (dico)Dicod::).

     Das optionale Argument CONFIG gibt die Konfiguration für ‘dicod’
     an, welche ein ‘<dicod-configuration>’-Objekt sein sollte. Nach
     Vorgabe wird als Wörterbuch das „GNU Collaborative International
     Dictionary of English“ angeboten.

     Sie können in Ihre ‘~/.dico’-Datei ‘open localhost’ eintragen,
     damit ‘localhost’ zum voreingestellten Server des ‘dico’-Clients
     wird (siehe das *note (dico)Initialization File::).

 -- Datentyp: dicod-configuration
     Der Datentyp, der die Konfiguration von dicod repräsentiert.

     ‘dico’ (Vorgabe: DICO)
          Paketobjekt des GNU-Dico-Wörterbuchservers.

     ‘interfaces’ (Vorgabe: ’("LOCALHOST"))
          Hierfür muss die Liste der IP-Adressen, Ports und
          möglicherweise auch Socket-Dateinamen angegeben werden, auf
          die gelauscht werden soll (siehe *note ‘listen’ directive:
          (dico)Server Settings.).

     ‘handlers’ (Vorgabe: ’())
          Liste der ‘<dicod-handler>’-Objekte, die Handler
          (Modulinstanzen) bezeichnen.

     ‘databases’ (Vorgabe: (LIST %DICOD-DATABASE:GCIDE))
          Liste der ‘<dicod-database>’-Objekte, die anzubietende
          Wörterbücher bezeichnen.

 -- Datentyp: dicod-handler
     Der Datentyp, der einen Wörterbuch-Handler (eine Modulinstanz)
     repräsentiert.

     ‘name’
          Der Name des Handlers (der Modulinstanz).

     ‘module’ (Vorgabe: #F)
          Der Name des dicod-Moduls (der Instanz) des Handlers. Wenn er
          ‘#f’ ist, heißt das, das Modul hat denselben Namen wie der
          Handler (siehe *note (dico)Module::).

     ‘options’
          Liste der Zeichenketten oder G-Ausdrücke, die die Argumente
          für den Modul-Handler repräsentieren.

 -- Datentyp: dicod-database
     Datentyp, der eine Wörterbuchdatenbank repräsentiert.

     ‘name’
          Der Name der Datenbank, der in DICT-Befehlen benutzt wird.

     ‘handler’
          Der Name des dicod-Handlers (der Modulinstanz), die von dieser
          Datenbank benutzt wird (siehe *note (dico)Handlers::).

     ‘complex?’ (Vorgabe: #F)
          Ob die Datenbankkonfiguration komplex ist. In diesem Fall muss
          für die komplexe Konfiguration auch ein entsprechendes
          ‘<dicod-handler>’-Objekt existieren, ansonsten nicht.

     ‘options’
          Liste der Zeichenketten oder G-Ausdrücke, die die Argumente
          für die Datenbank repräsentiert (siehe *note
          (dico)Databases::).

 -- Scheme-Variable: %dicod-database:gcide
     Ein ‘<dicod-database>’-Objekt, um das „GNU Collaborative
     International Dictionary of English“ anzubieten. Dazu wird das
     ‘gcide’-Paket benutzt.

   Im Folgenden sehen Sie eine Beispielkonfiguration für einen
‘dicod-service’.

     (dicod-service #:config
       (dicod-configuration
        (handlers (list (dicod-handler
                         (name "wordnet")
                         (module "dictorg")
                         (options
                          (list #~(string-append "dbdir=" #$wordnet))))))
        (databases (list (dicod-database
                          (name "wordnet")
                          (complex? #t)
                          (handler "wordnet")
                          (options '("database=wn")))
                         %dicod-database:gcide))))

Docker-Dienst
.............

Das Modul ‘(gnu services docker)’ stellt die folgenden Dienste zur
Verfügung.

 -- Scheme-Variable: docker-service-type

     Dies ist der Diensttyp des Dienstes, um Docker
     (https://www.docker.com) auszuführen, einen Daemon, der
     Anwendungsbündel in isolierten Umgebungen ausführen kann (manchmal
     auch als „Container“ bezeichnet).

 -- Datentyp: docker-configuration
     Dies ist der Datentyp, der die Konfiguration von Docker und
     Containerd repräsentiert.

     ‘package’ (Vorgabe: ‘docker’)
          Das Docker-Paket, was benutzt werden soll.

     ‘containerd’ (Vorgabe: CONTAINERD)
          Das Containerd-Paket, was benutzt werden soll.

Auditd-Dienst
.............

Das Modul ‘(gnu services auditd)’ stellt den folgenden Dienst zur
Verfügung.

 -- Scheme-Variable: auditd-service-type

     Dies ist der Diensttyp des Dienstes, mit dem auditd
     (https://people.redhat.com/sgrubb/audit/) ausgeführt wird, ein
     Daemon, der sicherheitsrelevante Informationen auf Ihrem System
     sammelt.

     Beispiele für Dinge, über die Informationen gesammelt werden
     sollen:

       1. Dateizugriffe
       2. Betriebssystemaufrufe („System Calls“)
       3. Aufgerufene Befehle
       4. Fehlgeschlagene Anmeldeversuche
       5. Filterung durch die Firewall
       6. Netzwerkzugriff

     ‘auditctl’ aus dem ‘audit’-Paket kann benutzt werden, um zu
     überwachende Ereignisse (bis zum nächsten Neustart) hinzuzufügen
     oder zu entfernen. Um über Ereignisse dauerhaft Informationen
     sammeln zu lassen, schreiben Sie die Befehlszeilenargumente für
     auditctl in ‘/etc/audit/audit.rules’. ‘aureport’ aus dem
     ‘audit’-Paket kann benutzt werden, um einen Bericht über alle
     aufgezeichneten Ereignisse anzuzeigen. Normalerweise speichert der
     Audit-Daemon Protokolle im Verzeichnis ‘/var/log/audit’.

 -- Datentyp: auditd-configuration
     Dies ist der Datentyp, der die Konfiguration von auditd
     repräsentiert.

     ‘audit’ (Vorgabe: ‘audit’)
          Das zu verwendende audit-Paket.

 -- Scheme-Variable: singularity-service-type
     Dies ist der Diensttyp für den Dienst, mit dem Sie Singularity
     (https://www.sylabs.io/singularity/) ausführen können, ein
     Docker-ähnliches Werkzeug, um Anwendungsbündel (auch bekannt als
     „Container“) auszuführen. Der Wert für diesen Dienst ist das
     Singularity-Paket, das benutzt werden soll.

     Der Dienst installiert keinen Daemon, sondern er installiert
     Hilfsprogramme als setuid-root (siehe *note Setuid-Programme::),
     damit auch „unprivilegierte“ Nutzer ohne besondere Berechtigungen
     ‘singularity run’ und ähnliche Befehle ausführen können.

Nix-Dienst
..........

Das Modul ‘(gnu services nix)’ stellt den folgenden Dienst zur
Verfügung:

 -- Scheme-Variable: nix-service-type

     Dies ist der Diensttyp für den Dienst, der den Erstellungs-Daemon
     der Nix-Paketverwaltung (https://nixos.org/nix/) ausführt. Hier ist
     ein Beispiel, wie man ihn benutzt:

          (use-modules (gnu))
          (use-service-modules nix)
          (use-package-modules package-management)

          (operating-system
            ;; …
            (packages (append (list nix)
                              %base-packages))

            (services (append (list (service nix-service-type))
                              %base-services)))

     Nach ‘guix system reconfigure’ können Sie Nix für Ihr Benutzerkonto
     konfigurieren:

        • Fügen Sie einen Nix-Kanal ein und aktualisieren Sie ihn. Siehe
          Nix Package Manager Guide (https://nixos.org/nix/manual/).

        • Erzeugen Sie eine symbolische Verknüpfung zu Ihrem Profil und
          aktivieren Sie das Nix-Profil:

          $ ln -s "/nix/var/nix/profiles/per-user/$USER/profile" ~/.nix-profile
          $ source /run/current-system/profile/etc/profile.d/nix.sh


File: guix.de.info,  Node: Setuid-Programme,  Next: X.509-Zertifikate,  Prev: Dienste,  Up: Systemkonfiguration

8.9 Setuid-Programme
====================

Some programs need to run with “root” privileges, even when they are
launched by unprivileged users. A notorious example is the ‘passwd’
program, which users can run to change their password, and which needs
to access the ‘/etc/passwd’ and ‘/etc/shadow’ files—something normally
restricted to root, for obvious security reasons. To address that, these
executables are “setuid-root”, meaning that they always run with root
privileges (*note (libc)How Change Persona::, for more info about the
setuid mechanism).

   Der Store selbst kann _keine_ setuid-Programme enthalten: Das wäre
eine Sicherheitslücke, weil dann jeder Nutzer auf dem System Ableitungen
schreiben könnte, die in den Store solche Dateien einfügen würden (siehe
*note Der Store::). Wir benutzen also einen anderen Mechanismus: Statt
auf den ausführbaren Dateien im Store selbst deren setuid-Bit zu setzen,
lassen wir den Systemadministrator _deklarieren_, welche Programme mit
setuid-root gestartet werden.

   Das Feld ‘setuid-programs’ einer ‘operating-system’-Deklaration
enthält eine Liste von G-Ausdrücken, die die Namen der Programme
angeben, die setuid-root sein sollen (siehe *note Das
Konfigurationssystem nutzen::). Zum Beispiel kann das Programm ‘passwd’,
was Teil des Shadow-Pakets ist, durch diesen G-Ausdruck bezeichnet
werden (siehe *note G-Ausdrücke::):

     #~(string-append #$shadow "/bin/passwd")

   Eine vorgegebene Menge von setuid-Programmen wird durch die Variable
‘%setuid-programs’ aus dem Modul ‘(gnu system)’ definiert.

 -- Scheme-Variable: %setuid-programs
     Eine Liste von G-Ausdrücken, die übliche Programme angeben, die
     setuid-root sein müssen.

     Die Liste enthält Befehle wie ‘passwd’, ‘ping’, ‘su’ und ‘sudo’.

   Intern erzeugt Guix die eigentlichen setuid-Programme im Verzeichnis
‘/run/setuid-programs’, wenn das System aktiviert wird. Die Dateien in
diesem Verzeichnis verweisen auf die „echten“ Binärdateien im Store.


File: guix.de.info,  Node: X.509-Zertifikate,  Next: Name Service Switch,  Prev: Setuid-Programme,  Up: Systemkonfiguration

8.10 X.509-Zertifikate
======================

Über HTTPS verfügbare Webserver (also HTTP mit gesicherter
Transportschicht, englisch „Transport-Layer Security“, kurz TLS) senden
Client-Programmen ein “X.509-Zertifikat”, mit dem der Client den Server
dann _authentifizieren_ kann. Dazu verifiziert der Client, dass das
Zertifikat des Servers von einer sogenannten Zertifizierungsstelle
signiert wurde (“Certificate Authority”, kurz CA). Damit er aber die
Signatur der Zertifizierungsstelle verifizieren kann, muss jeder Client
das Zertifikat der Zertifizierungsstelle besitzen.

   Web-Browser wie GNU IceCat liefern ihre eigenen CA-Zertifikate mit,
damit sie von Haus aus Zertifikate verifizieren können.

   Den meisten anderen Programmen, die HTTPS sprechen können — ‘wget’,
‘git’, ‘w3m’ etc. — muss allerdings erst mitgeteilt werden, wo die
CA-Zertifikate installiert sind.

   In Guix müssen Sie dazu ein Paket, das Zertifikate enthält, in das
‘packages’-Feld der ‘operating-system’-Deklaration des Betriebssystems
hinzufügen (siehe *note „operating-system“-Referenz::). Guix liefert ein
solches Paket mit, ‘nss-certs’, was als Teil von Mozillas „Network
Security Services“ angeboten wird.

   Beachten Sie, dass es _nicht_ zu den ‘%base-packages’ gehört, Sie es
also ausdrücklich hinzufügen müssen. Das Verzeichnis ‘/etc/ssl/certs’,
wo die meisten Anwendungen und Bibliotheken ihren Voreinstellungen
entsprechend nach Zertifikaten suchen, verweist auf die global
installierten Zertifikate.

   Unprivileged users, including users of Guix on a foreign distro, can
also install their own certificate package in their profile. A number of
environment variables need to be defined so that applications and
libraries know where to find them. Namely, the OpenSSL library honors
the ‘SSL_CERT_DIR’ and ‘SSL_CERT_FILE’ variables. Some applications add
their own environment variables; for instance, the Git version control
system honors the certificate bundle pointed to by the ‘GIT_SSL_CAINFO’
environment variable. Thus, you would typically run something like:

     guix install nss-certs
     export SSL_CERT_DIR="$HOME/.guix-profile/etc/ssl/certs"
     export SSL_CERT_FILE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
     export GIT_SSL_CAINFO="$SSL_CERT_FILE"

   As another example, R requires the ‘CURL_CA_BUNDLE’ environment
variable to point to a certificate bundle, so you would have to run
something like this:

     guix install nss-certs
     export CURL_CA_BUNDLE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"

   Für andere Anwendungen möchten Sie die Namen der benötigten
Umgebungsvariablen vielleicht in deren Dokumentation nachschlagen.


File: guix.de.info,  Node: Name Service Switch,  Next: Initiale RAM-Disk,  Prev: X.509-Zertifikate,  Up: Systemkonfiguration

8.11 Name Service Switch
========================

Das Modul ‘(gnu system nss)’ enthält Anbindungen für die Konfiguration
des “Name Service Switch” (NSS) der libc (siehe *note (libc)NSS
Configuration File::). Kurz gesagt ist der NSS ein Mechanismus, mit dem
die libc um neue „Namens“-Auflösungsmethoden für Systemdatenbanken
erweitert werden kann; dazu gehören Rechnernamen (auch bekannt als
„Host“-Namen), Dienstnamen, Benutzerkonten und mehr (siehe *note System
Databases and Name Service Switch: (libc)Name Service Switch.).

   Die NSS-Konfiguration legt für jede Systemdatenbank fest, mit welcher
Methode der Name nachgeschlagen („aufgelöst“) werden kann und welche
Methoden zusammenhängen — z.B. unter welchen Umständen der NSS es mit
der nächsten Methode auf seiner Liste versuchen sollte. Die
NSS-Konfiguration wird im Feld ‘name-service-switch’ von
‘operating-system’-Deklarationen angegeben (siehe *note
‘name-service-switch’: „operating-system“-Referenz.).

   Zum Beispiel konfigurieren die folgenden Deklarationen den NSS so,
dass er das ‘nss-mdns’-Backend
(https://0pointer.de/lennart/projects/nss-mdns/) benutzt, wodurch er auf
‘.local’ endende Rechnernamen über Multicast-DNS (mDNS) auflöst:

     (name-service-switch
        (hosts (list %files    ;zuerst in /etc/hosts nachschlagen

                     ;; Wenn das keinen Erfolg hatte, es
                     ;; mit 'mdns_minimal' versuchen.
                     (name-service
                       (name "mdns_minimal")

                       ;; 'mdns_minimal' ist die Autorität für
                       ;; '.local'. Gibt es not-found ("nicht
                       ;; gefunden") zurück, müssen wir die
                       ;; nächsten Methoden gar nicht erst
                       ;; versuchen.
                       (reaction (lookup-specification
                                  (not-found => return))))

                     ;; Ansonsten benutzen wir DNS.
                     (name-service
                       (name "dns"))

                     ;; Ein letzter Versuch mit dem
                     ;; "vollständigen" 'mdns'.
                     (name-service
                       (name "mdns")))))

   Keine Sorge: Die Variable ‘%mdns-host-lookup-nss’ (siehe unten)
enthält diese Konfiguration bereits. Statt das alles selst einzutippen,
können Sie sie benutzen, wenn alles, was Sie möchten, eine
funktionierende Namensauflösung für ‘.local’-Rechner ist.

   Beachten Sie dabei, dass es zusätzlich zum Festlegen des
‘name-service-switch’ in der ‘operating-system’-Deklaration auch
erforderlich ist, den ‘avahi-service-type’ zu benutzen (siehe *note
‘avahi-service-type’: Netzwerkdienste.). Es genügt auch, wenn Sie die
‘%desktop-services’ benutzen, weil er darin enthalten ist (siehe *note
Desktop-Dienste::). Dadurch wird ‘nss-mdns’ für den Name Service Cache
Daemon nutzbar (siehe *note ‘nscd-service’: Basisdienste.).

   Um sich eine lange Konfiguration zu ersparen, können Sie auch einfach
die folgenden Variablen für typische NSS-Konfigurationen benutzen.

 -- Scheme-Variable: %default-nss
     Die vorgegebene Konfiguration des Name Service Switch als ein
     ‘name-service-switch’-Objekt.

 -- Scheme-Variable: %mdns-host-lookup-nss
     Die Name-Service-Switch-Konfiguration mit Unterstützung für
     Rechnernamensauflösung über „Multicast DNS“ (mDNS) für auf ‘.local’
     endende Rechnernamen.

   Im Folgenden finden Sie eine Referenz, wie eine
Name-Service-Switch-Konfiguration aussehen muss. Sie hat eine direkte
Entsprechung zum Konfigurationsdateiformat der C-Bibliothek, lesen Sie
weitere Informationen also bitte im Handbuch der C-Bibliothek nach
(siehe *note (libc)NSS Configuration File::). Gegenüber dem
Konfigurationsdateiformat des libc-NSS bekommen Sie mit unserer Syntax
nicht nur ein warm umklammerndes Gefühl, sondern auch eine statische
Analyse: Wenn Sie Syntax- und Schreibfehler machen, werden Sie darüber
benachrichtigt, sobald Sie ‘guix system’ aufrufen.

 -- Datentyp: name-service-switch

     Der Datentyp, der die Konfiguration des Name Service Switch (NSS)
     der libc repräsentiert. Jedes im Folgenden aufgeführte Feld
     repräsentiert eine der unterstützten Systemdatenbanken.

     ‘aliases’
     ‘ethers’
     ‘group’
     ‘gshadow’
     ‘hosts’
     ‘initgroups’
     ‘netgroup’
     ‘networks’
     ‘password’
     ‘public-key’
     ‘rpc’
     ‘services’
     ‘shadow’
          Das sind die Systemdatenbanken, um die sich NSS kümmern kann.
          Jedes dieser Felder muss eine Liste aus
          ‘<name-service>’-Objekten sein (siehe unten).

 -- Datentyp: name-service

     Der einen eigentlichen Namensdienst repräsentierende Datentyp
     zusammen mit der zugehörigen Auflösungsaktion.

     ‘name’
          Eine Zeichenkette, die den Namensdienst bezeichnet (siehe
          *note (libc)Services in the NSS configuration::).

          Beachten Sie, dass hier aufgeführte Namensdienste für den nscd
          sichtbar sein müssen. Dazu übergeben Sie im Argument
          ‘#:name-services’ des ‘nscd-service’ die Liste der Pakete, die
          die entsprechenden Namensdienste anbieten (siehe *note
          ‘nscd-service’: Basisdienste.).

     ‘reaction’
          Eine mit Hilfe des Makros ‘lookup-specification’ angegebene
          Aktion (siehe *note (libc)Actions in the NSS configuration::).
          Zum Beispiel:

               (lookup-specification (unavailable => continue)
                                     (success => return))


File: guix.de.info,  Node: Initiale RAM-Disk,  Next: Bootloader-Konfiguration,  Prev: Name Service Switch,  Up: Systemkonfiguration

8.12 Initiale RAM-Disk
======================

Um ihn zu initialisieren (zu „bootstrappen“), wird für den Kernel
Linux-Libre eine “initiale RAM-Disk” angegeben (kurz “initrd”). Eine
initrd enthält ein temporäres Wurzeldateisystem sowie ein Skript zur
Initialisierung. Letzteres ist dafür zuständig, das echte
Wurzeldateisystem einzubinden und alle Kernel-Module zu laden, die dafür
nötig sein könnten.

   Mit dem Feld ‘initrd-modules’ einer ‘operating-system’-Deklaration
können Sie angeben, welche Kernel-Module für Linux-libre in der initrd
verfügbar sein müssen. Insbesondere müssen hier die Module aufgeführt
werden, um die Festplatte zu betreiben, auf der sich Ihre
Wurzelpartition befindet — allerdings sollte der vorgegebene Wert der
‘initrd-modules’ in dem meisten Fällen genügen. Wenn Sie aber zum
Beispiel das Kernel-Modul ‘megaraid_sas’ zusätzlich zu den vorgegebenen
Modulen brauchen, um auf Ihr Wurzeldateisystem zugreifen zu können,
würden Sie das so schreiben:

     (operating-system
       ;; …
       (initrd-modules (cons "megaraid_sas" %base-initrd-modules)))

 -- Scheme-Variable: %base-initrd-modules
     Der Vorgabewert für die Liste der Kernel-Module, die in der initrd
     enthalten sein sollen.

   Wenn Sie noch systemnähere Anpassungen durchführen wollen, können Sie
im Feld ‘initrd’ einer ‘operating-system’-Deklaration angeben, was für
eine Art von initrd Sie benutzen möchten. Das Modul ‘(gnu system
linux-initrd)’ enthält drei Arten, eine initrd zu erstellen: die
abstrakte Prozedur ‘base-initrd’ und die systemnahen Prozeduren
‘raw-initrd’ und ‘expression->initrd’.

   Mit der Prozedur ‘base-initrd’ sollten Sie die häufigsten
Anwendungszwecke abdecken können. Wenn Sie zum Beispiel ein paar
Kernel-Module zur Boot-Zeit laden lassen möchten, können Sie das
‘initrd’-Feld auf diese Art definieren:

     (initrd (lambda (file-systems . rest)
               ;; Eine gewöhnliche initrd, aber das Netzwerk wird
               ;; mit den Parametern initialisiert, die QEMU
               ;; standardmäßig erwartet.
               (apply base-initrd file-systems
                      #:qemu-networking? #t
                      rest)))

   Die Prozedur ‘base-initrd’ kann auch mit üblichen Anwendungszwecken
umgehen, um das System als QEMU-Gastsystem zu betreiben oder als ein
„Live“-System ohne ein dauerhaft gespeichertes Wurzeldateisystem.

   Die Prozedur ‘base-initrd’ baut auf der Prozedur ‘raw-initrd’ auf.
Anders als ‘base-initrd’ hat ‘raw-initrd’ keinerlei
Zusatzfunktionalitäten: Es wird kein Versuch unternommen, für die initrd
notwendige Kernel-Module und Pakete automatisch hinzuzunehmen.
‘raw-initrd’ kann zum Beispiel benutzt werden, wenn ein Nutzer eine
eigene Konfiguration des Linux-Kernels verwendet und die
Standard-Kernel-Module, die mit ‘base-initrd’ hinzugenommen würden,
nicht verfügbar sind.

   Die initiale RAM-Disk, wie sie von ‘base-initrd’ oder ‘raw-initrd’
erzeugt wird, richtet sich nach verschiedenen Optionen, die auf der
Kernel-Befehlszeile übergeben werden (also über GRUBs ‘linux’-Befehl
oder die ‘-append’-Befehlszeilenoption von QEMU). Erwähnt werden
sollten:

‘--load=BOOT’
     Die initiale RAM-Disk eine Datei BOOT, in der ein Scheme-Programm
     steht, laden lassen, nachdem das Wurzeldateisystem eingebunden
     wurde.

     Guix übergibt mit dieser Befehlszeilenoption die Kontrolle an ein
     Boot-Programm, das die Dienstaktivierungsprogramme ausführt und
     anschließend den GNU Shepherd startet, das Initialisierungssystem
     („init“-System) von Guix System.

‘--root=WURZEL’
     Mount ROOT as the root file system. ROOT can be a device name like
     ‘/dev/sda1’, a file system label, or a file system UUID. When
     unspecified, the device name from the root file system of the
     operating system declaration is used.

‘--system=SYSTEM’
     ‘/run/booted-system’ und ‘/run/current-system’ auf das SYSTEM
     zeigen lassen.

‘modprobe.blacklist=MODULE…’
     Die initiale RAM-Disk sowie den Befehl ‘modprobe’ (aus dem
     kmod-Paket) anweisen, das Laden der angegebenen MODULE zu
     verweigern. Als MODULE muss eine kommagetrennte Liste von
     Kernel-Modul-Namen angegeben werden — z.B. ‘usbkbd,9pnet’.

‘--repl’
     Eine Lese-Auswerten-Schreiben-Schleife (englisch „Read-Eval-Print
     Loop“, kurz REPL) von der initialen RAM-Disk starten, bevor diese
     die Kernel-Module zu laden versucht und das Wurzeldateisystem
     einbindet. Unsere Marketingabteilung nennt das “boot-to-Guile”. Der
     Schemer in Ihnen wird das lieben. Siehe *note (guile)Using Guile
     Interactively:: für mehr Informationen über die REPL von Guile.

   Jetzt wo Sie wissen, was für Funktionalitäten eine durch
‘base-initrd’ und ‘raw-initrd’ erzeugte initiale RAM-Disk so haben kann,
möchten Sie vielleicht auch wissen, wie man Sie benutzt und weiter
anpasst:

 -- Scheme-Prozedur: raw-initrd DATEISYSTEME [#:linux-modules '()]
          [#:mapped-devices '()]  [#:keyboard-layout #f]
          [#:helper-packages '()] [#:qemu-networking? #f]
          [#:volatile-root? #f] Return
     a derivation that builds a raw initrd. FILE-SYSTEMS is a list of
     file systems to be mounted by the initrd, possibly in addition to
     the root file system specified on the kernel command line via
     ‘--root’. LINUX-MODULES is a list of kernel modules to be loaded at
     boot time. MAPPED-DEVICES is a list of device mappings to realize
     before FILE-SYSTEMS are mounted (*note Zugeordnete Geräte::).
     HELPER-PACKAGES is a list of packages to be copied in the initrd.
     It may include ‘e2fsck/static’ or other packages needed by the
     initrd to check the root file system.

     Ist es auf einen wahren Wert gesetzt, dann muss KEYBOARD-LAYOUT
     eine Tastaturbelegung als ‘<keyboard-layout>’-Verbundsobjekt
     angeben, die die gewünschte Tastaturbelegung für die Konsole
     bezeichnet. Sie wird verwendet, noch bevor die Gerätezuordnungen in
     MAPPED-DEVICES hergestellt werden und bevor die Dateisysteme in
     FILE-SYSTEMS eingebunden werden, damit der Anwender dabei die
     gewollte Tastaturbelegung beim Eingeben einer Passphrase und bei
     der Nutzung einer REPL verwenden kann.

     Wenn QEMU-NETWORKING? wahr ist, wird eine Netzwerkverbindung mit
     den Standard-QEMU-Parametern hergestellt. Wenn VIRTIO? wahr ist,
     werden zusätzliche Kernel-Module geladen, damit die initrd als ein
     QEMU-Gast paravirtualisierte Ein-/Ausgabetreiber benutzen kann.

     Wenn VOLATILE-ROOT? wahr ist, ist Schreiben auf das
     Wurzeldateisystem möglich, aber Änderungen daran bleiben nicht
     erhalten.

 -- Scheme-Prozedur: base-initrd DATEISYSTEME [#:mapped-devices '()]
          [#:keyboard-layout #f]  [#:qemu-networking? #f]
     [#:volatile-root? #f]  [#:linux-modules ’()] Return as a file-like
     object a generic initrd, with kernel modules taken from LINUX.
     FILE-SYSTEMS is a list of file-systems to be mounted by the initrd,
     possibly in addition to the root file system specified on the
     kernel command line via ‘--root’. MAPPED-DEVICES is a list of
     device mappings to realize before FILE-SYSTEMS are mounted.

     Ist es auf einen wahren Wert gesetzt, dann muss KEYBOARD-LAYOUT
     eine Tastaturbelegung als ‘<keyboard-layout>’-Verbundsobjekt
     angeben, die die gewünschte Tastaturbelegung für die Konsole
     bezeichnet. Sie wird verwendet, noch bevor die Gerätezuordnungen in
     MAPPED-DEVICES hergestellt werden und bevor die Dateisysteme in
     FILE-SYSTEMS eingebunden werden, damit der Anwender dabei die
     gewollte Tastaturbelegung beim Eingeben einer Passphrase und bei
     der Nutzung einer REPL verwenden kann.

     QEMU-NETWORKING? und VOLATILE-ROOT? verhalten sich wie bei
     ‘raw-initrd’.

     In die initrd werden automatisch alle Kernel-Module eingefügt, die
     für die unter FILE-SYSTEMS angegebenen Dateisysteme und die
     angegebenen Optionen nötig sind. Zusätzliche Kernel-Module können
     unter den LINUX-MODULES aufgeführt werden. Diese werden zur initrd
     hinzugefügt und zur Boot-Zeit in der Reihenfolge geladen, in der
     sie angegeben wurden.

   Selbstverständlich betten die hier erzeugten und benutzten initrds
ein statisch gebundenes Guile ein und das Initialisierungsprogramm ist
ein Guile-Programm. Dadurch haben wir viel Flexibilität. Die Prozedur
‘expression->initrd’ erstellt eine solche initrd für ein an sie
übergebenes Programm.

 -- Scheme-Prozedur: expression->initrd G-AUSDRUCK [#:guile
          %guile-3.0-static-stripped] [#:name "guile-initrd"] Return as
          a
     file-like object a Linux initrd (a gzipped cpio archive) containing
     GUILE and that evaluates EXP, a G-expression, upon booting. All the
     derivations referenced by EXP are automatically copied to the
     initrd.


File: guix.de.info,  Node: Bootloader-Konfiguration,  Next: Aufruf von guix system,  Prev: Initiale RAM-Disk,  Up: Systemkonfiguration

8.13 Bootloader-Konfiguration
=============================

Das Betriebssystem unterstützt mehrere Bootloader. Der gewünschte
Bootloader wird mit der ‘bootloader-configuration’-Deklaration
konfiguriert. Alle Felder dieser Struktur sind für alle Bootloader
gleich außer dem einen Feld ‘bootloader’, das angibt, welcher Bootloader
konfiguriert und installiert werden soll.

   Manche der Bootloader setzen nicht alle Felder einer
‘bootloader-configuration’ um. Zum Beispiel ignoriert der
extlinux-Bootloader das ‘theme’-Feld, weil er keine eigenen Themen
unterstützt.

 -- Datentyp: bootloader-configuration
     Der Typ der Deklaration einer Bootloader-Konfiguration.

     ‘bootloader’
          Der zu benutzende Bootloader als ein ‘bootloader’-Objekt. Zur
          Zeit werden ‘grub-bootloader’, ‘grub-efi-bootloader’,
          ‘extlinux-bootloader’ und ‘u-boot-bootloader’ unterstützt.

          ‘grub-efi-bootloader’ macht es möglich, auf modernen Systemen
          mit “Unified Extensible Firmware Interface” (UEFI) zu booten.
          Sie sollten das hier benutzen, wenn im Installationsabbild ein
          Verzeichnis ‘/sys/firmware/efi’ vorhanden ist, wenn Sie davon
          auf Ihrem System booten.

          Mit ‘grub-bootloader’ können Sie vor allem auf Intel-basierten
          Maschinen im alten „Legacy“-BIOS-Modus booten.

          Verfügbare Bootloader werden in den Modulen ‘(gnu bootloader
          …)’ beschrieben. Insbesondere enthält ‘(gnu bootloader
          u-boot)’ Definitionen für eine Vielzahl von ARM- und
          AArch64-Systemen, die den U-Boot-Bootloader
          (https://www.denx.de/wiki/U-Boot/) benutzen.

     ‘target’
          Eine Zeichenkette, die angibt, auf welches Ziel der Bootloader
          installiert werden soll.

          Was das bedeutet, hängt vom jeweiligen Bootloader ab. Für
          ‘grub-bootloader’ sollte hier zum Beispiel ein Gerätename
          angegeben werden, der vom ‘installer’-Befehl des Bootloaders
          verstanden wird, etwa ‘/dev/sda’ oder ‘(hd0)’ (siehe *note
          (grub)Invoking grub-install::). Für ‘grub-efi-bootloader’
          sollte der Einhängepunkt des EFI-Dateisystems angegeben
          werden, in der Regel ‘/boot/efi’.

     ‘menu-entries’ (Vorgabe: ‘()’)
          Eine möglicherweise leere Liste von ‘menu-entry’-Objekten
          (siehe unten), die für Menüeinträge stehen, die im
          Bootloader-Menü auftauchen sollen, zusätzlich zum aktuellen
          Systemeintrag und dem auf vorherige Systemgenerationen
          verweisenden Eintrag.

     ‘default-entry’ (Vorgabe: ‘0’)
          Die Position des standardmäßig ausgewählten Bootmenü-Eintrags.
          An Position 0 steht der Eintrag der aktuellen
          Systemgeneration.

     ‘timeout’ (Vorgabe: ‘5’)
          Wieviele Sekunden lang im Menü auf eine Tastatureingabe
          gewartet wird, bevor gebootet wird. 0 steht für sofortiges
          Booten, für -1 wird ohne Zeitbeschränkung gewartet.

     ‘keyboard-layout’ (Vorgabe: ‘#f’)
          Wenn dies auf ‘#f’ gesetzt ist, verwendet das Menü des
          Bootloaders (falls vorhanden) die Vorgabe-Tastaturbelegung,
          normalerweise US English („qwerty“).

          Andernfalls muss es ein ‘keyboard-layout’-Objekt sein (siehe
          *note Tastaturbelegung::).

               Anmerkung: Dieses Feld wird derzeit von Bootloadern außer
               ‘grub’ und ‘grub-efi’ ignoriert.

     ‘theme’ (Vorgabe: #F)
          Ein Objekt für das im Bootloader anzuzeigende Thema. Wird kein
          Thema angegeben, benutzen manche Bootloader vielleicht ein
          voreingestelltes Thema; GRUB zumindest macht es so.

     ‘terminal-outputs’ (Vorgabe: ‘'(gfxterm)’)
          Die Ausgabeterminals, die für das Boot-Menü des Bootloaders
          benutzt werden, als eine Liste von Symbolen. GRUB akzeptiert
          hier diese Werte: ‘console’, ‘serial’, ‘serial_{0–3}’,
          ‘gfxterm’, ‘vga_text’, ‘mda_text’, ‘morse’ und ‘pkmodem’.
          Dieses Feld entspricht der GRUB-Variablen
          ‘GRUB_TERMINAL_OUTPUT’ (siehe *note (grub)Simple
          configuration::).

     ‘terminal-inputs’ (Vorgabe: ‘'()’)
          Die Eingabeterminals, die für das Boot-Menü des Bootloaders
          benutzt werden, als eine Liste von Symbolen. GRUB verwendet
          hier das zur Laufzeit bestimmte Standardterminal. GRUB
          akzeptiert sonst diese Werte: ‘console’, ‘serial’,
          ‘serial_{0-3}’, ‘at_keyboard’ und ‘usb_keyboard’. Dieses Feld
          entspricht der GRUB-Variablen ‘GRUB_TERMINAL_INPUT’ (siehe
          *note (grub)Simple configuration::).

     ‘serial-unit’ (Vorgabe: ‘#f’)
          Die serielle Einheit, die der Bootloader benutzt, als eine
          ganze Zahl zwischen 0 und 3, einschließlich. Für GRUB wird sie
          automatisch zur Laufzeit ausgewählt; derzeit wählt GRUB die 0
          aus, die COM1 entspricht (siehe *note (grub)Serial
          terminal::).

     ‘serial-speed’ (Vorgabe: ‘#f’)
          Die Geschwindigkeit der seriellen Schnittstelle als eine ganze
          Zahl. GRUB bestimmt den Wert standardmäßig zur Laufzeit;
          derzeit wählt GRUB 9600 bps (siehe *note (grub)Serial
          terminal::).

   Sollten Sie zusätzliche Bootmenü-Einträge über das oben beschriebene
‘menu-entries’-Feld hinzufügen möchten, müssen Sie diese mit der
‘menu-entry’-Form erzeugen. Stellen Sie sich zum Beispiel vor, Sie
wollten noch eine andere Distribution booten können (schwer
vorstellbar!), dann könnten Sie einen Menüeintrag wie den Folgenden
definieren:

     (menu-entry
       (label "Die _andere_ Distribution")
       (linux "/boot/old/vmlinux-2.6.32")
       (linux-arguments '("root=/dev/sda2"))
       (initrd "/boot/old/initrd"))

   Details finden Sie unten.

 -- Datentyp: menu-entry
     Der Typ eines Eintrags im Bootloadermenü.

     ‘label’
          Die Beschriftung, die im Menü gezeigt werden soll — z.B.
          ‘"GNU"’.

     ‘linux’
          Das Linux-Kernel-Abbild, was gebootet werden soll, zum
          Beispiel:

               (file-append linux-libre "/bzImage")

          Für GRUB kann hier auch ein Gerät ausdrücklich zum Dateipfad
          angegeben werden, unter Verwendung von GRUBs Konventionen zur
          Gerätebenennung (siehe *note (grub)Naming convention::), zum
          Beispiel:

               "(hd0,msdos1)/boot/vmlinuz"

          Wenn das Gerät auf diese Weise ausdrücklich angegeben wird,
          wird das ‘device’-Feld gänzlich ignoriert.

     ‘linux-arguments’ (Vorgabe: ‘()’)
          Die Liste zusätzlicher Linux-Kernel-Befehlszeilenargumente —
          z.B. ‘("console=ttyS0")’.

     ‘initrd’
          Ein G-Ausdruck oder eine Zeichenkette, die den Dateinamen der
          initialen RAM-Disk angibt, die benutzt werden soll (siehe
          *note G-Ausdrücke::).
     ‘device’ (Vorgabe: ‘#f’)
          Das Gerät, auf dem Kernel und initrd zu finden sind — d.h. bei
          GRUB die Wurzel (“root”) dieses Menüeintrags (siehe *note
          (grub)root::).

          Dies kann eine Dateisystembezeichnung (als Zeichenkette), eine
          Dateisystem-UUID (als Bytevektor, siehe *note Dateisysteme::)
          oder ‘#f’ sein, im letzten Fall wird der Bootloader auf dem
          Gerät suchen, das die vom ‘linux’-Feld benannte Datei enthält
          (siehe *note (grub)search::). Ein vom Betriebssystem
          vergebener Gerätename wie ‘/dev/sda1’ ist aber _nicht_
          erlaubt.

   Zur Zeit lässt nur GRUB sein Aussehen durch Themen anpassen.
GRUB-Themen werden mit der ‘grub-theme’-Form erzeugt, die hier noch
nicht vollständig dokumentiert ist.

 -- Datentyp: grub-theme
     Der Datentyp, der die Konfiguration des GRUB-Themas repräsentiert.

     ‘gfxmode’ (Vorgabe: ‘'("auto")’)
          Welcher ‘gfxmode’ für GRUB eingestellt werden soll (als eine
          Liste von Zeichenketten mit Bildschirmauflösungen, siehe *note
          (grub)gfxmode::).

 -- Scheme Procedure: grub-theme
     Return the default GRUB theme used by the operating system if no
     ‘theme’ field is specified in ‘bootloader-configuration’ record.

     Es wird von einem feschen Hintergrundbild begleitet, das die Logos
     von GNU und Guix zeigt.

   Um zum Beispiel eine andere Auflösung als vorgegeben zu verwenden,
würden Sie so etwas schreiben:

     (bootloader
      (bootloader-configuration
      ;; ...
      (theme (grub-theme
              (inherit (grub-theme))
              (gfxmode '("1024x786x32" "auto"))))))


File: guix.de.info,  Node: Aufruf von guix system,  Next: Aufruf von guix deploy,  Prev: Bootloader-Konfiguration,  Up: Systemkonfiguration

8.14 ‘guix system’ aufrufen
===========================

Sobald Sie eine Betriebssystemdeklaration geschrieben haben, wie wir sie
in den vorangehenden Abschnitten gesehen haben, kann diese
“instanziiert” werden, indem Sie den Befehl ‘guix system’ aufrufen.
Zusammengefasst:

     guix system OPTIONEN… AKTION DATEI

   DATEI muss der Name einer Datei sein, in der eine
Betriebssystemdeklaration als ‘operating-system’-Objekt steht. AKTION
gibt an, wie das Betriebssystem instanziiert wird. Derzeit werden
folgende Werte dafür unterstützt:

‘search’
     Verfügbare Diensttypendefinitionen anzeigen, die zum angegebenen
     regulären Ausdruck passen, sortiert nach Relevanz:

          $ guix system search console
          name: console-fonts
          location: gnu/services/base.scm:806:2
          extends: shepherd-root
          description: Install the given fonts on the specified ttys (fonts are per
          + virtual console on GNU/Linux).  The value of this service is a list of
          + tty/font pairs.  The font can be the name of a font provided by the `kbd'
          + package or any valid argument to `setfont', as in this example:
          +
          +      '(("tty1" . "LatGrkCyr-8x16")
          +        ("tty2" . (file-append
          +                      font-tamzen
          +                      "/share/kbd/consolefonts/TamzenForPowerline10x20.psf"))
          +        ("tty3" . (file-append
          +                      font-terminus
          +                      "/share/consolefonts/ter-132n"))) ; for HDPI
          relevance: 9

          name: mingetty
          location: gnu/services/base.scm:1190:2
          extends: shepherd-root
          description: Provide console login using the `mingetty' program.
          relevance: 2

          name: login
          location: gnu/services/base.scm:860:2
          extends: pam
          description: Provide a console log-in service as specified by its
          + configuration value, a `login-configuration' object.
          relevance: 2

          …

     Wie auch bei ‘guix package --search’ wird das Ergebnis im
     ‘recutils’-Format geliefert, so dass es leicht ist, die Ausgabe zu
     filtern (siehe *note GNU recutils databases: (recutils)Top.).

‘reconfigure’
     Das in der DATEI beschriebene Betriebssystem erstellen, aktivieren
     und zu ihm wechseln(1).

          Anmerkung: Es ist sehr zu empfehlen, ‘guix pull’ einmal
          auszuführen, bevor Sie ‘guix system reconfigure’ zum ersten
          Mal aufrufen (siehe *note Aufruf von guix pull::). Wenn Sie
          das nicht tun, könnten Sie nach dem Abschluss von
          ‘reconfigure’ eine ältere Version von Guix vorfinden, als Sie
          vorher hatten.

     Dieser Befehl setzt die in der DATEI festgelegte Konfiguration
     vollständig um: Benutzerkonten, Systemdienste, die Liste globaler
     Pakete, setuid-Programme und so weiter. Der Befehl startet die in
     der DATEI angegebenen Systemdienste, die aktuell nicht laufen; bei
     aktuell laufenden Diensten wird sichergestellt, dass sie
     aktualisiert werden, sobald sie das nächste Mal angehalten wurden
     (z.B. durch ‘herd stop X’ oder ‘herd restart X’).

     Dieser Befehl erzeugt eine neue Generation, deren Nummer (wie ‘guix
     system list-generations’ sie anzeigt) um eins größer als die der
     aktuellen Generation ist. Wenn die so nummerierte Generation
     bereits existiert, wird sie überschrieben. Dieses Verhalten
     entspricht dem von ‘guix package’ (siehe *note Aufruf von guix
     package::).

     Des Weiteren wird für den Bootloader ein Menüeintrag für die neue
     Betriebssystemkonfiguration hinzugefügt, außer die
     Befehlszeilenoption ‘--no-bootloader’ wurde übergeben. Bei GRUB
     werden Einträge für ältere Konfigurationen in ein Untermenü
     verschoben, so dass Sie auch eine ältere Systemgeneration beim
     Booten noch hochfahren können, falls es notwendig wird.

     Nach Abschluss wird das neue System unter ‘/run/current-system’
     verfügbar gemacht. Das Verzeichnis enthält “Provenienz-Metadaten”:
     Dazu gehören die Liste der Kanäle, die benutzt wurden (siehe *note
     Kanäle::) und die DATEI selbst, wenn sie verfügbar ist. Diese
     Informationen sind nützlich, falls Sie später inspizieren möchten,
     wie diese spezielle Generation erstellt wurde.

     Tatsächlich können Sie, wenn wir annehmen, dass die DATEI
     eigenständig ist, später die Generation N Ihres Betriebssystems neu
     erstellen, indem Sie dies ausführen:

          guix time-machine \
            -C /var/guix/profiles/system-N-link/channels.scm -- \
            system reconfigure \
            /var/guix/profiles/system-N-link/configuration.scm

     Sie können sich das als eine Art eingebaute Versionskontrolle
     vorstellen! Ihr System ist nicht nur ein binäres Erzeugnis: _Es
     enthält seinen eigenen Quellcode_. Siehe *note
     ‘provenance-service-type’: Service-Referenz. für mehr Informationen
     zur Provenienzverfolgung.

‘switch-generation’
     Zu einer bestehenden Systemgeneration wechseln. Diese Aktion
     wechselt das Systemprofil atomar auf die angegebene
     Systemgeneration. Hiermit werden auch die bestehenden Menüeinträge
     des Bootloaders umgeordnet. Der Menüeintrag für die angegebene
     Systemgeneration wird voreingestellt und die Einträge der anderen
     Generationen werden in ein Untermenü verschoben, sofern der
     verwendete Bootloader dies unterstützt. Das nächste Mal, wenn das
     System gestartet wird, wird die hier angegebene Systemgeneration
     hochgefahren.

     Der Bootloader selbst wird durch diesen Befehl _nicht_ neu
     installiert. Es wird also lediglich der bereits installierte
     Bootloader mit einer neuen Konfigurationsdatei benutzt werden.

     Die Zielgeneration kann ausdrücklich über ihre Generationsnummer
     angegeben werden. Zum Beispiel würde folgender Aufruf einen Wechsel
     zur Systemgeneration 7 bewirken:

          guix system switch-generation 7

     Die Zielgeneration kann auch relativ zur aktuellen Generation
     angegeben werden, in der Form ‘+N’ oder ‘-N’, wobei ‘+3’ zum
     Beispiel „3 Generationen weiter als die aktuelle Generation“
     bedeuten würde und ‘-1’ „1 Generation vor der aktuellen Generation“
     hieße. Wenn Sie einen negativen Wert wie ‘-1’ angeben, müssen Sie
     ‘--’ der Befehlszeilenoption voranstellen, damit die negative Zahl
     nicht selbst als Befehlszeilenoption aufgefasst wird. Zum Beispiel:

          guix system switch-generation -- -1

     Zur Zeit bewirkt ein Aufruf dieser Aktion _nur_ einen Wechsel des
     Systemprofils auf eine bereits existierende Generation und ein
     Umordnen der Bootloader-Menüeinträge. Um die Ziel-Systemgeneration
     aber tatsächlich zu benutzen, müssen Sie Ihr System neu hochfahren,
     nachdem Sie diese Aktion ausgeführt haben. In einer zukünftigen
     Version von Guix wird diese Aktion einmal dieselben Dinge tun, wie
     ‘reconfigure’, also etwa Dienste aktivieren und deaktivieren.

     Diese Aktion schlägt fehl, wenn die angegebene Generation nicht
     existiert.

‘roll-back’
     Zur vorhergehenden Systemgeneration wechseln. Wenn das System das
     nächste Mal hochgefahren wird, wird es die vorhergehende
     Systemgeneration benutzen. Dies ist die Umkehrung von ‘reconfigure’
     und tut genau dasselbe, wie ‘switch-generation’ mit dem Argument
     ‘-1’ aufzurufen.

     Wie auch bei ‘switch-generation’ müssen Sie derzeit, nachdem Sie
     diese Aktion aufgerufen haben, Ihr System neu starten, um die
     vorhergehende Systemgeneration auch tatsächlich zu benutzen.

‘delete-generations’
     Systemgenerationen löschen, wodurch diese zu Kandidaten für den
     Müllsammler werden (siehe *note Aufruf von guix gc:: für
     Informationen, wie Sie den „Müllsammler“ laufen lassen).

     This works in the same way as ‘guix package --delete-generations’
     (*note ‘--delete-generations’: Aufruf von guix package.). With no
     arguments, all system generations but the current one are deleted:

          guix system delete-generations

     Sie können auch eine Auswahl treffen, welche Generationen Sie
     löschen möchten. Das folgende Beispiel hat die Löschung aller
     Systemgenerationen zur Folge, die älter als zwei Monate sind:

          guix system delete-generations 2m

     Wenn Sie diesen Befehl ausführen, wird automatisch der Bootloader
     mit einer aktualisierten Liste von Menüeinträgen neu erstellt —
     z.B. werden im Untermenü für die „alten Generationen“ in GRUB die
     gelöschten Generationen nicht mehr aufgeführt.

‘build’
     Die Ableitung des Betriebssystems erstellen, einschließlich aller
     Konfigurationsdateien und Programme, die zum Booten und Starten
     benötigt werden. Diese Aktion installiert jedoch nichts davon.

‘init’
     In das angegebene Verzeichnis alle Dateien einfügen, um das in der
     DATEI angegebene Betriebssystem starten zu können. Dies ist
     nützlich bei erstmaligen Installationen von „Guix System“. Zum
     Beispiel:

          guix system init my-os-config.scm /mnt

     Hiermit werden alle Store-Objekte nach ‘/mnt’ kopiert, die von der
     in ‘my-os-config.scm’ angegebenen Konfiguration vorausgesetzt
     werden. Dazu gehören Konfigurationsdateien, Pakete und so weiter.
     Auch andere essenzielle Dateien, die auf dem System vorhanden sein
     müssen, damit es richtig funktioniert, werden erzeugt — z.B. die
     Verzeichnisse ‘/etc’, ‘/var’ und ‘/run’ und die Datei ‘/bin/sh’.

     Dieser Befehl installiert auch den Bootloader auf dem in
     ‘my-os-config’ angegebenen Ziel, außer die Befehlszeilenoption
     ‘--no-bootloader’ wurde übergeben.

‘vm’
     Eine virtuelle Maschine (VM) erstellen, die das in der DATEI
     deklarierte Betriebssystem enthält, und ein Skript liefern, das
     diese virtuelle Maschine startet.

          Anmerkung: Die Aktion ‘vm’ sowie solche, die weiter unten
          genannt werden, können KVM-Unterstützung im Kernel Linux-libre
          ausnutzen. Insbesondere sollte, wenn die Maschine
          Hardware-Virtualisierung unterstützt, das entsprechende
          KVM-Kernelmodul geladen sein und das Gerät ‘/dev/kvm’ muss
          dann existieren und dem Benutzer und den Erstellungsbenutzern
          des Daemons müssen Berechtigungen zum Lesen und Schreiben
          darauf gegeben werden (siehe *note Einrichten der
          Erstellungsumgebung::).

     An das Skript übergebene Argumente werden an QEMU weitergereicht,
     wie Sie am folgenden Beispiel sehen können. Damit würde eine
     Netzwerkverbindung aktiviert und 1 GiB an RAM für die emulierte
     Maschine angefragt:

          $ /gnu/store/…-run-vm.sh -m 1024 -smp 2 -net user,model=virtio-net-pci

     Die virtuelle Maschine verwendet denselben Store wie das
     Wirtssystem.

     Additional file systems can be shared between the host and the VM
     using the ‘--share’ and ‘--expose’ command-line options: the former
     specifies a directory to be shared with write access, while the
     latter provides read-only access to the shared directory.

     Im folgenden Beispiel wird eine virtuelle Maschine erzeugt, die auf
     das Persönliche Verzeichnis des Benutzers nur Lesezugriff hat, wo
     das Verzeichnis ‘/austausch’ aber mit Lese- und Schreibzugriff dem
     Verzeichnis ‘$HOME/tmp’ auf dem Wirtssystem zugeordnet wurde:

          guix system vm my-config.scm \
             --expose=$HOME --share=$HOME/tmp=/austausch

     Für GNU/Linux ist das vorgegebene Verhalten, direkt in den Kernel
     zu booten, wodurch nur ein sehr winziges „Disk-Image“ (eine Datei
     mit einem Abbild des Plattenspeichers der virtuellen Maschine) für
     das Wurzeldateisystem nötig wird, weil der Store des Wirtssystems
     davon eingebunden werden kann.

     The ‘--full-boot’ option forces a complete boot sequence, starting
     with the bootloader. This requires more disk space since a root
     image containing at least the kernel, initrd, and bootloader data
     files must be created. The ‘--image-size’ option can be used to
     specify the size of the image.

‘vm-image’
‘disk-image’
‘docker-image’
     Ein eigenständiges Disk-Image für eine virtuelle Maschine, ein
     allgemeines Disk-Image oder ein Docker-Abbild für das in der DATEI
     deklarierte Betriebssystem liefern. Das vorgegebene Verhalten von
     ‘guix system’ ist, die Größe des Images zu schätzen, die zum
     Speichern des Systems benötigt wird, aber Sie können mit der
     Befehlszeilenoption ‘--image-size’ selbst Ihre gewünschte Größe
     bestimmen. Docker-Abbilder werden aber so erstellt, dass sie gerade
     nur das enthalten, was für sie nötig ist, daher wird die
     Befehlszeilenoption ‘--image-size’ im Fall von ‘docker-image’
     ignoriert.

     Sie können den Dateisystemtyp für das Wurzeldateisystem mit der
     Befehlszeilenoption ‘--file-system-type’ festlegen. Vorgegeben ist,
     ‘ext4’ zu verwenden.

     Wenn Sie ein ‘vm-image’ anfordern, ist das gelieferte Disk-Image im
     qcow2-Format, was vom QEMU-Emulator effizient benutzt werden kann.
     Im Abschnitt *note Guix in einer VM starten:: finden Sie mehr
     Informationen, wie Sie das Disk-Image in einer virtuellen Maschine
     laufen lassen.

     Wenn Sie ein ‘disk-image’ anfordern, wird ein rohes Disk-Image
     hergestellt; es kann zum Beispiel auf einen USB-Stick kopiert
     werden. Angenommen ‘/dev/sdc’ ist das dem USB-Stick entsprechende
     Gerät, dann kann das Disk-Image mit dem folgenden Befehls darauf
     kopiert werden:

          # dd if=$(guix system disk-image my-os.scm) of=/dev/sdc

     Wenn Sie ein ‘docker-image’ anfordern, wird ein Abbild für Docker
     hergestellt. Guix erstellt das Abbild von Grund auf und _nicht_ aus
     einem vorerstellten Docker-Basisabbild heraus, daher enthält es
     _exakt_ das, was Sie in der Konfigurationsdatei für das
     Betriebssystem angegeben haben. Sie können das Abbild dann wie
     folgt laden und einen Docker-Container damit erzeugen:

          image_id="`docker load < guix-system-docker-image.tar.gz`"
          container_id="`docker create $image_id`"
          docker start $container_id

     Dieser Befehl startet einen neuen Docker-Container aus dem
     angegebenen Abbild. Damit wird das Guix-System auf die normale
     Weise hochgefahren, d.h. zunächst werden alle Dienste gestartet,
     die Sie in der Konfiguration des Betriebssystems angegeben haben.
     Sie können eine interaktive Shell in dieser isolierten Umgebung
     bekommen, indem Sie ‘docker exec’ benutzen:

          docker exec -ti $container_id /run/current-system/profile/bin/bash --login

     Je nachdem, was Sie im Docker-Container ausführen, kann es nötig
     sein, dass Sie ihn mit weitergehenden Berechtigungen ausstatten.
     Wenn Sie zum Beispiel Software mit Guix innerhalb des
     Docker-Containers erstellen wollen, müssen Sie an ‘docker create’
     die Befehlszeilenoption ‘--privileged’ übergeben.

     Last, the ‘--network’ option applies to ‘guix system docker-image’:
     it produces an image where network is supposedly shared with the
     host, and thus without services like nscd or NetworkManager.

‘container’
     Liefert ein Skript, um das in der DATEI deklarierte Betriebssystem
     in einem Container auszuführen. Mit Container wird hier eine Reihe
     ressourcenschonender Isolierungsmechanismen im Kernel Linux-libre
     bezeichnet. Container beanspruchen wesentlich weniger Ressourcen
     als vollumfängliche virtuelle Maschinen, weil der Kernel,
     Bibliotheken in gemeinsam nutzbaren Objektdateien („Shared
     Objects“) sowie andere Ressourcen mit dem Wirtssystem geteilt
     werden können. Damit ist also eine „dünnere“ Isolierung möglich.

     Zur Zeit muss das Skript als Administratornutzer „root“ ausgeführt
     werden, damit darin mehr als nur ein einzelner Benutzer und eine
     Benutzergruppe unterstützt wird. Der Container teilt seinen Store
     mit dem Wirtssystem.

     Wie bei der Aktion ‘vm’ (siehe *note guix system vm::) können
     zusätzlich weitere Dateisysteme zwischen Wirt und Container geteilt
     werden, indem man die Befehlszeilenoptionen ‘--share’ und
     ‘--expose’ verwendet:

          guix system container my-config.scm \
             --expose=$HOME --share=$HOME/tmp=/austausch

          Anmerkung: Diese Befehlszeilenoption funktioniert nur mit
          Linux-libre 3.19 oder neuer.

   Unter den OPTIONEN können beliebige gemeinsame Erstellungsoptionen
aufgeführt werden (siehe *note Gemeinsame Erstellungsoptionen::). Des
Weiteren kann als OPTIONEN Folgendes angegeben werden:

‘--expression=AUSDRUCK’
‘-e AUSDRUCK’
     Als Konfiguration des Betriebssystems das „operating-system“
     betrachten, zu dem der AUSDRUCK ausgewertet wird. Dies ist eine
     Alternative dazu, die Konfiguration in einer Datei festzulegen.
     Hiermit wird auch das Installationsabbild des Guix-Systems
     erstellt, siehe *note Ein Abbild zur Installation erstellen::).

‘--system=SYSTEM’
‘-s SYSTEM’
     Versuchen, für das angegebene SYSTEM statt für denselben Systemtyp
     wie auf dem Wirtssystem zu erstellen. Dies funktioniert wie bei
     ‘guix build’ (siehe *note Aufruf von guix build::).

‘--derivation’
‘-d’
     Liefert den Namen der Ableitungsdatei für das angegebene
     Betriebssystem, ohne dazu etwas zu erstellen.

‘--save-provenance’
     Wie zuvor erläutert, speichern ‘guix system init’ und ‘guix system
     reconfigure’ Provenienzinformationen immer über einen dedizierten
     Dienst (siehe *note ‘provenance-service-type’: Service-Referenz.).
     Andere Befehle tun das nach Voreinstellung jedoch _nicht_. Wenn Sie
     zum Beispiel ein Abbild für eine virtuelle Maschine mitsamt
     Provenienzinformationen erzeugen möchten, können Sie dies
     ausführen:

          guix system vm-image --save-provenance config.scm

     Auf diese Weise wird im erzeugten Abbild in Prinzip „sein eigener
     Quellcode eingebettet“, in Form von Metadaten in
     ‘/run/current-system’. Mit diesen Informationen kann man das Abbild
     neu erzeugen, um sicherzugehen, dass es tatsächlich das enthält,
     was davon behauptet wird. Man könnte damit auch eine Abwandlung des
     Abbilds erzeugen.

‘--file-system-type=TYP’
‘-t TYP’
     Für die Aktion ‘disk-image’ wird hiermit ein Dateisystem des
     angegebenen TYPs im Abbild bzw. Disk-Image erzeugt.

     Wird diese Befehlszeilenoption nicht angegeben, so benutzt ‘guix
     system’ als Dateisystemtyp ‘ext4’.

     ‘--file-system-type=iso9660’ produces an ISO-9660 image, suitable
     for burning on CDs and DVDs.

‘--image-size=GRÖSSE’
     Für die Aktionen ‘vm-image’ und ‘disk-image’ wird hiermit
     festgelegt, dass ein Abbild der angegebenen GRÖSSE erstellt werden
     soll. Die GRÖSSE kann als Zahl die Anzahl Bytes angeben oder mit
     einer Einheit als Suffix versehen werden (siehe *note size
     specifications: (coreutils)Block size.).

     Wird keine solche Befehlszeilenoption angegeben, berechnet ‘guix
     system’ eine Schätzung der Abbildgröße anhand der Größe des in der
     DATEI deklarierten Systems.

‘--network’
‘-N’
     Für die Aktion ‘container’ dürfen isolierte Umgebungen (auch
     bekannt als „Container“) auf das Wirtsnetzwerk zugreifen, d.h. es
     wird kein Netzwerknamensraum für sie erzeugt.

‘--root=DATEI’
‘-r DATEI’
     Die DATEI zu einer symbolischen Verknüpfung auf das Ergebnis machen
     und als Müllsammlerwurzel registrieren.

‘--skip-checks’
     Die Konfiguration _nicht_ vor der Installation zur Sicherheit auf
     Fehler prüfen.

     Das vorgegebene Verhalten von ‘guix system init’ und ‘guix system
     reconfigure’ sieht vor, die Konfiguration zur Sicherheit auf Fehler
     hin zu überprüfen, die ihr Autor übersehen haben könnte: Es wird
     sichergestellt, dass die in der ‘operating-system’-Deklaration
     erwähnten Dateisysteme tatsächlich existieren (siehe *note
     Dateisysteme::) und dass alle Linux-Kernelmodule, die beim Booten
     benötigt werden könnten, auch im ‘initrd-modules’-Feld aufgeführt
     sind (siehe *note Initiale RAM-Disk::). Mit dieser
     Befehlszeilenoption werden diese Tests allesamt übersprungen.

‘--on-error=STRATEGIE’
     Beim Auftreten eines Fehlers beim Einlesen der DATEI die angegebene
     STRATEGIE verfolgen. Als STRATEGIE dient eine der Folgenden:

     ‘nothing-special’
          Nichts besonderes; der Fehler wird kurz gemeldet und der
          Vorgang abgebrochen. Dies ist die vorgegebene Strategie.

     ‘backtrace’
          Ebenso, aber zusätzlich wird eine Rückverfolgung des Fehlers
          (ein „Backtrace“) angezeigt.

     ‘debug’
          Nach dem Melden des Fehlers wird der Debugger von Guile zur
          Fehlersuche gestartet. Von dort können Sie Befehle ausführen,
          zum Beispiel können Sie sich mit ‘,bt’ eine Rückverfolgung
          („Backtrace“) anzeigen lassen und mit ‘,locals’ die Werte
          lokaler Variabler anzeigen lassen. Im Allgemeinen können Sie
          mit Befehlen den Zustand des Programms inspizieren. Siehe
          *note (guile)Debug Commands:: für eine Liste verfügbarer
          Befehle zur Fehlersuche.

   Sobald Sie Ihre Guix-Installation erstellt, konfiguriert, neu
konfiguriert und nochmals neu konfiguriert haben, finden Sie es
vielleicht hilfreich, sich die auf der Platte verfügbaren — und im
Bootmenü des Bootloaders auswählbaren — Systemgenerationen auflisten zu
lassen:

‘describe’
     Die aktuelle Systemgeneration beschreiben: ihren Dateinamen, den
     Kernel und den benutzten Bootloader etc. sowie
     Provenienzinformationen, falls verfügbar.

‘list-generations’
     Eine für Menschen verständliche Zusammenfassung jeder auf der
     Platte verfügbaren Generation des Betriebssystems ausgeben. Dies
     ähnelt der Befehlszeilenoption ‘--list-generations’ von ‘guix
     package’ (siehe *note Aufruf von guix package::).

     Optional kann ein Muster angegeben werden, was dieselbe Syntax wie
     ‘guix package --list-generations’ benutzt, um damit die Liste
     anzuzeigender Generationen einzuschränken. Zum Beispiel zeigt der
     folgende Befehl Generationen an, die bis zu 10 Tage alt sind:

          $ guix system list-generations 10d

   Der Befehl ‘guix system’ hat sogar noch mehr zu bieten! Mit folgenden
Unterbefehlen wird Ihnen visualisiert, wie Ihre Systemdienste
voneinander abhängen:

‘extension-graph’
     Emit in Dot/Graphviz format to standard output the “service
     extension graph” of the operating system defined in FILE (*note
     Dienstkompositionen::, for more information on service extensions).

     Der Befehl:

          $ guix system extension-graph FILE | xdot -

     shows the extension relations among services.

‘shepherd-graph’
     Im Dot-/Graphviz-Format auf die Standardausgabe den
     “Abhängigkeitsgraphen” der Shepherd-Dienste des in der DATEI
     definierten Betriebssystems ausgeben. Siehe *note
     Shepherd-Dienste:: für mehr Informationen sowie einen
     Beispielgraphen.

   ---------- Footnotes ----------

   (1) Diese Aktion (und die dazu ähnlichen Aktionen ‘switch-generation’
und ‘roll-back’) sind nur auf Systemen nutzbar, auf denen „Guix System“
bereits läuft.

