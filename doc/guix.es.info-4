This is guix.es.info, produced by makeinfo version 6.7 from
guix.es.texi.

Copyright © 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 Ludovic
Courtès
Copyright © 2013, 2014, 2016 Andreas Enge
Copyright © 2013 Nikita Karetnikov
Copyright © 2014, 2015, 2016 Alex Kost
Copyright © 2015, 2016 Mathieu Lirzin
Copyright © 2014 Pierre-Antoine Rault
Copyright © 2015 Taylan Ulrich Bayırlı/Kammer
Copyright © 2015, 2016, 2017, 2019, 2020 Leo Famulari
Copyright © 2015, 2016, 2017, 2018, 2019, 2020 Ricardo Wurmus
Copyright © 2016 Ben Woodcroft
Copyright © 2016, 2017, 2018 Chris Marusich
Copyright © 2016, 2017, 2018, 2019, 2020 Efraim Flashner
Copyright © 2016 John Darrington
Copyright © 2016, 2017 Nikita Gillmann
Copyright © 2016, 2017, 2018, 2019, 2020 Jan Nieuwenhuizen
Copyright © 2016, 2017, 2018, 2019, 2020 Julien Lepiller
Copyright © 2016 Alex ter Weele
Copyright © 2016, 2017, 2018, 2019 Christopher Baines
Copyright © 2017, 2018, 2019 Clément Lassieur
Copyright © 2017, 2018 Mathieu Othacehe
Copyright © 2017 Federico Beffa
Copyright © 2017, 2018 Carlo Zancanaro
Copyright © 2017 Thomas Danckaert
Copyright © 2017 humanitiesNerd
Copyright © 2017 Christopher Allan Webber
Copyright © 2017, 2018, 2019, 2020 Marius Bakke
Copyright © 2017, 2019, 2020 Hartmut Goebel
Copyright © 2017, 2019, 2020 Maxim Cournoyer
Copyright © 2017, 2018, 2019, 2020 Tobias Geerinckx-Rice
Copyright © 2017 George Clemmer
Copyright © 2017 Andy Wingo
Copyright © 2017, 2018, 2019 Arun Isaac
Copyright © 2017 nee
Copyright © 2018 Rutger Helling
Copyright © 2018 Oleg Pykhalov
Copyright © 2018 Mike Gerwitz
Copyright © 2018 Pierre-Antoine Rouby
Copyright © 2018, 2019 Gábor Boskovits
Copyright © 2018, 2019 Florian Pelz
Copyright © 2018 Laura Lazzati
Copyright © 2018 Alex Vong
Copyright © 2019 Josh Holland
Copyright © 2019, 2020 Diego Nicola Barbato
Copyright © 2019 Ivan Petkov
Copyright © 2019 Jakob L. Kreuze
Copyright © 2019 Kyle Andrews
Copyright © 2019 Alex Griffin
Copyright © 2019 Guillaume Le Vaillant
Copyright © 2020 Leo Prikler
Copyright © 2019, 2020 Simon Tournier
Copyright © 2020 Wiktor Żelazny
Copyright © 2020 Damien Cassou
Copyright © 2020 Jakub Kądziołka
Copyright © 2020 Jack Hill
Copyright © 2020 Naga Malleswari
Copyright © 2020 Brice Waegeneire
Copyright © 2020 R Veera Kumar
Copyright © 2020 Pierre Langlois
Copyright © 2020 pinoaffe

   Se garantiza el permiso de copia, distribución y/o modificación de
este documento bajo los términos de la licencia de documentación libre
de GNU (GNU Free Documentation License), versión 1.3 o cualquier versión
posterior publicada por la Free Software Foundation; sin secciones
invariantes, sin textos de cubierta delantera ni trasera. Una copia de
la licencia está incluida en la sección titulada “GNU Free Documentation
License”.
INFO-DIR-SECTION Administración del sistema
START-INFO-DIR-ENTRY
* Guix: (guix.es).           Gestión del software instalado y la
                               configuración del sistema.
* guix package: (guix.es)Invocación de guix package.  Instalación, borrado
                                                         y actualización de
                                                         paquetes.
* guix gc: (guix.es)Invocación de guix gc.  Recuperar espacio de disco sin
                                               usar.
* guix pull: (guix.es)Invocación de guix pull.  Actualización de la lista
                                                   disponible de paquetes.
* guix system: (guix.es)Invocación de guix system.  Gestión de la
                                                       configuración del
                                                       sistema operativo.
* guix deploy: (guix.es)Invocación de guix deploy.  Gestión de
                                                       configuraciones de
                                                       sistemas operativos en
                                                       máquinas remotas.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Desarrollo de software
START-INFO-DIR-ENTRY
* guix environment: (guix.es)Invocación de guix environment.  Construcción
                                                                 de entornos
                                                                 de desarrollo
                                                                 con Guix.
* guix build: (guix.es)Invocación de guix build.  Construcción de
                                                     paquetes.
* guix pack: (guix.es)Invocación de guix pack.  Creación de empaquetados
                                                   binarios.
END-INFO-DIR-ENTRY


File: guix.es.info,  Node: Servicios de certificados,  Next: Servicios DNS,  Prev: Servicios Web,  Up: Servicios

8.8.17 Servicios de certificados
--------------------------------

El módulo ‘(gnu services certbot)’ proporciona un servicio para la
obtención automática de un certificado TLS válido de la autoridad de
certificación Let’s Encrypt. Estos certificados pueden usarse para
proporcionar contenido de forma segura sobre HTTPS u otros protocolos
basados en TLS, con el conocimiento de que el cliente podrá verificar la
autenticidad del servidor.

   Let’s Encrypt (https://letsencrypt.org/) proporciona la herramienta
‘certbot’ para automatizar el proceso de certificación. Esta herramienta
genera primero de manera segura una clave en el servidor. Una vez hecho
realiza una petición a la autoridad de certificación (AC, CA en inglés)
Let’s Encrypt para que firme la clave. La AC comprueba que la petición
se origina en la máquina en cuestión mediante un protocolo de
desafío-respuesta, esperando que el servidor proporcione su respuesta a
través de HTTP. Si dicho protocolo se completa de manera satisfactoria,
la AC firma la clave, resultando en un certificado. Dicho certificado es
válido por un periodo de tiempo limitado y, por tanto, para continuar
proporcionando servicios TLS, el servidor necesita solicitar a la AC
periódicamente la renovación de su firma.

   El servicio certbot automatiza este proceso: la generación inicial de
la clave, la petición inicial de certificación al servicio Let’s
Encrypt, la integración del desafío/respuesta en el servidor web, la
escritura del certificado en disco, las renovaciones periódicas
automáticas y el despliegue de tareas asociadas con la renovación (por
ejemplo la recarga de servicios y la copia de claves con diferentes
permisos).

   Certbot se ejecuta dos veces al día, en un minuto aleatorio dentro de
la hora. No hará nada hasta que sus certificados estén pendientes de
renovación o sean revocados, pero su ejecución regular propociona a su
servicio la oportunidad de permanecer en línea en caso de que se
produzca una revocación iniciada por Let’s Encrypt por alguna razón.

   Mediante el uso de este servicio, usted acepta el acuerdo de
suscripción ACME, que se puede encontrar aquí:
<https://acme-v01.api.letsencrypt.org/directory>.

 -- Variable Scheme: certbot-service-type
     Un tipo de servicio para el cliente de Let’s Encrypt ‘certbot’. Su
     valor debe ser un registro ‘certbot-configuration’ como en este
     ejemplo:

          (define %procedimiento-de-despliegue-nginx
            (program-file
             "procedimiento-de-despliegue-nginx"
             #~(let ((pid (call-with-input-file "/var/run/nginx/pid" read)))
                 (kill pid SIGHUP))))

          (service certbot-service-type
                   (certbot-configuration
                    (email "foo@example.net")
                    (certificates
                     (list
                      (certificate-configuration
                       (domains '("example.net" "www.example.net"))
                       (deploy-hook %procedimiento-de-despliegue-nginx))
                      (certificate-configuration
                       (domains '("bar.example.net")))))))

     Véase a continuación los detalles de ‘certbot-configuration’.

 -- Tipo de datos: certbot-configuration
     Tipo de datos que representa la configuración del servicio
     ‘certbot’. Este tipo tiene los siguientes parámetros:

     ‘package’ (predeterminado: ‘certbot’)
          El paquete certbot usado.

     ‘webroot’ (predeterminado: ‘/var/www’)
          Directorio desde el que se proporcionan los ficheros de
          desafío/respuesta de Let’s Encrypt.

     ‘certificates’ (predeterminados: ‘()’)
          Una lista de configuraciones ‘certificates-configuration’ para
          los cuales se generan certificados y se solicitan firmas. Cada
          certificado tiene un nombre (‘name’) y varios dominios
          (‘domains’).

     ‘correo electrónico (email)’
          Correo electrónico obligatorio usado para el registro,
          contacto de recuperación y notificaciones importantes de la
          cuenta.

     ‘server’ (predeterminada: ‘#f’)
          URL opcional del servidor ACME. Esta configuración cambia el
          valor predeterminado de certbot, que es el servidor de Let’s
          Encrypt.

     ‘rsa-key-size’ (predeterminado: ‘2048’)
          Tamaño de la clave RSA.

     ‘default-location’ (predeterminada: véase a continuación)
          La configuración ‘nginx-location-configuration’
          predeterminada. Debido a que ‘certbot’ necesita proporcionar
          desafíos y respuestas, necesita ser capaz de ejecutar un
          servidor web. Se lleva a cabo extendiendo el servicio web
          ‘nginx’ con una configuración ‘nginx-server-configuration’ que
          escucha en los dominios DOMAINS en el puerto 80, y que
          contiene una configuración ‘nginx-location-configuration’ para
          el subespacio de rutas URI ‘/.well-known/’ usado por Let’s
          Encrypt. *Note Servicios Web::, para más información sobre
          estos tipos de datos de configuración de nginx.

          Las peticiones a otras rutas URL se compararán contra la
          dirección predeterminada ‘default-location’, la cual, en caso
          de estar presente, se añade a todas las configuraciones
          ‘nginx-server-configuration’.

          De manera predeterminada, la dirección predeterminada
          ‘default-location’ emitirá una redirección
          ‘http://DOMINIO/...’ a ‘https://DOMINIO/...’, lo que le
          permite definir qué proporcionará en su sitio web a través de
          ‘https’.

          Proporcione ‘#f’ para no emitir una dirección predeterminada.

 -- Tipo de datos: certificate-configuration
     Tipo de datos que representa la configuración de un certificado.
     Este tipo tiene los siguientes parámetros:

     ‘name’ (predeterminado: vea a continuación)
          Este nombre se usa por Certbot para su mantenimiento interno y
          en las rutas de ficheros; no afecta al contenido del
          certificado en sí mismo. Para ver los nombres de certificados,
          ejecute ‘certbot certificates’.

          Su valor predeterminado es el primer dominio proporcionado.

     ‘domains’ (predeterminado: ‘()’)
          El primer dominio proporcionado será el sujeto del nombre
          común (CN) del certificado, y todos los dominios serán nombres
          alternativos (Subject Alternative Names) en el certificado.

     ‘challenge’ (predeterminado: ‘#f’)
          El tipo de desafío que debe ejecutar certbot. Si se especifica
          ‘#f’, el valor por omisión es desafío HTTP. Si se especifica
          un valor, el valor por omisión es el módulo manual (véase
          ‘authentication-hook’, ‘cleanup-hook’ y la documentación en
          <https://certbot.eff.org/docs/using.html#hooks>), y concede
          permiso a Let’s Encrypt para registrar la IP pública de la
          máquina que realiza la petición.

     ‘authentication-hook’ (predeterminado: ‘#t’)
          Orden ejecutada en un shell una vez por cada desafío de
          certificado que debe contestarse. Durante su ejecución, la
          variable del shell ‘$CERTBOT_DOMAIN’ contiene el dominio que
          se está validando, ‘$CERTBOT_VALIDATION’ contiene la cadena de
          validación y ‘$CERTBOT_TOKEN’ contiene el nombre de fichero
          del recurso solicitado cuando se realiza el desafío HTTP-01.

     ‘cleanup-hook’ (predeterminado: ‘#f’)
          Orden ejecutada en un shell una vez por cada desafío de
          certificado que haya sido contestado por ‘auth-hook’. Durante
          su ejecución, las variables del shell disponibles en el script
          ‘auth-hook’ todavía están disponibles, y adicionalmente
          ‘$CERTBOT_AUTH_OUTPUT’ contendrá la salida estándar que
          produjo ‘auth-hook’.

     ‘deploy-hook’ (predeterminado: ‘#f’)
          Orden ejecutada en un shell una vez por cada certificado
          emitido satisfactoriamente. Durante su ejecución, la variable
          del shell ‘$RENEWED_LINEAGE’ apuntará al subdirectorio live de
          configuración (por ejemplo,
          ‘"/etc/letsencrypt/live/example.com"’) que contiene las nuevas
          claves y certificados; la variable del shell
          ‘$RENEWED_DOMAINS’ contendrá una lista delimitada por espacios
          de certificados de dominio renovados (por ejemplo,
          ‘"example.com www.example.com"’).

   Para cada configuración ‘certificate-configuration’, el certificado
se almacena ‘/etc/letsencrypt/live/NAME/fullchain.pem’ y la clave se
almacena en ‘/etc/letsencrypt/live/NAME/privkey.pem’.


File: guix.es.info,  Node: Servicios DNS,  Next: Servicios VPN,  Prev: Servicios de certificados,  Up: Servicios

8.8.18 Servicios DNS
--------------------

El módulo ‘(gnu services dns)’ proporciona servicios relacionados con el
“sistema de nombres de dominio” (DNS). Proporciona un servicio de
servidor para el alojamiento de un servidor _autorizado_ DNS para
múltiples zonas, esclavo o maestro. Este servicio usa Knot DNS
(https://www.knot-dns.cz/). Y también un servidor de caché y reenvío de
DNS para la red local, que usa dnsmasq
(http://www.thekelleys.org.uk/dnsmasq/doc.html).

Servicio Knot
.............

Esta es una configuración de ejemplo de un servidor de autoridad para
dos zonas, una maestra y otra esclava:

     (define-zone-entries example.org.zone
     ;; Name TTL Class Type Data
       ("@"  ""  "IN"  "A"  "127.0.0.1")
       ("@"  ""  "IN"  "NS" "ns")
       ("ns" ""  "IN"  "A"  "127.0.0.1"))

     (define master-zone
       (knot-zone-configuration
         (domain "example.org")
         (zone (zone-file
                 (origin "example.org")
                 (entries example.org.zone)))))

     (define slave-zone
       (knot-zone-configuration
         (domain "plop.org")
         (dnssec-policy "default")
         (master (list "plop-master"))))

     (define plop-master
       (knot-remote-configuration
         (id "plop-master")
         (address (list "208.76.58.171"))))

     (operating-system
       ;; ...
       (services (cons* (service knot-service-type
                          (knot-configuration
                            (remotes (list plop-master))
                            (zones (list master-zone slave-zone))))
                        ;; ...
                        %base-services)))

 -- Variable Scheme: knot-service-type
     Este es el tipo de datos para el servidor DNS Knot.

     Knot DNS es un servidor de autoridad de DNS, lo que significa que
     puede servir múltiples zonas, es decir, nombres de dominio que
     compraría a una autoridad de registro de nombres. Este servidor no
     es un resolvedor, lo que significa que sólo puede resolver nombres
     para los que tiene autoridad. Este servidor puede configurarse para
     servir zonas como servidor maestro o como servidor esclavo con una
     granularidad al nivel de zona. Las zonas esclavas obtendrán sus
     datos de los servidores maestros, y las proporcionarán como un
     servidor de autoridad. Desde el punto de vista de un resolvedor, no
     hay diferencia entre servidor maestro y esclavo.

     Los siguientes tipos de datos se usan para configurar el servidor
     DNS Knot:

 -- Tipo de datos: knot-key-configuration
     Tipo de datos que representa una clave. Este tipo tiene los
     siguientes parámetros:

     ‘id’ (predeterminado: ‘""’)
          Un identificador para que otros campos de configuración hagan
          referencia a esta clave. Los identificadores deben ser únicos
          y no deben estar vacíos.

     ‘algorithm’ (predeterminado: ‘#f’)
          El algoritmo usado. Debe seleccionarse entre ‘#f’,
          ‘'hmac-md5’, ‘'hmac-sha1’, ‘'hmac-sha224’, ‘'hmac-sha256’,
          ‘'hmac-sha384’ y ‘'hmac-sha512’.

     ‘secret’ (predeterminado: ‘""’)
          La clave secreta en sí.

 -- Tipo de datos: knot-acl-configuration
     Tipo de datos que representa una configuración de lista de control
     de acceso (ACL). Este tipo tiene los siguientes parámetros:

     ‘id’ (predeterminado: ‘""’)
          Un identificador para que otros campos de configuración hagan
          referencia a esta clave. Los identificadores deben ser únicos
          y no deben estar vacíos.

     ‘address’ (predeterminada: ‘'()’)
          Lista ordenada de direcciones IP, subredes o rangos de red
          representadas como cadenas. La búsqueda debe corresponder con
          alguna. El valor vacío significa que la comprobación de
          correspondencia de la dirección no es necesaria.

     ‘key’ (predeterminada: ‘'()’)
          Lista ordenada de referencias a claves representadas como
          cadenas. La cadena debe corresponder con un ID de clave
          definido en ‘knot-key-configuration’. Ninguna clave significa
          que la comprobación de claves no es necesaria para este
          control de acceso (ACL).

     ‘action’ (predeterminada: ‘'()’)
          Lista ordenada de acciones que se permiten o deniegan por este
          control de acceso (ACL). Los valores posibles son listas de
          cero o más elementos entre ‘'transfer’, ‘'notify’ y ‘'update’.

     ‘deny?’ (predeterminado: ‘#f’)
          Cuando es verdadero, este ACL define restricciones. Las
          acciones enumeradas no se permiten. Cuando es falso, las
          acciones enumeradas se permiten.

 -- Tipo de datos: zone-entry
     Tipo de datos que representa una entrada de registro en un fichero
     de zona. Este tipo tiene los siguientes parámetros:

     ‘name’ (predeterminado: ‘"@"’)
          El nombre del registro. ‘"@"’ hace referencia al origen de la
          zona. Los nombres son relativos al origen de la zona. Por
          ejemplo, en la zona ‘example.org’, ‘"ns.example.org"’ en
          realidad hace referencia a ‘ns.example.org.example.org’. Los
          nombres que terminan en un punto se consideran absolutos, lo
          que significa que ‘"ns.example.org."’ hace referencia a
          ‘ns.example.org’.

     ‘ttl’ (predeterminado: ‘""’)
          El tiempo de vida (TTL) de este registro. Si no se
          proporciona, se usa el TTL predeterminado.

     ‘class’ (predeterminada: ‘"IN"’)
          La clase del registro. Actualmente Knot implementa únicamente
          ‘"IN"’ y parcialmente ‘"CH"’.

     ‘type’ (predeterminado: ‘"A"’)
          El tipo del registro. Los tipos comunes incluyen A (dirección
          IPv4), AAAA (dirección IPv6), NS (servidor de nombres(1)) y MX
          (pasarela de correo(2)). Otros muchos tipos distintos se
          encuentran definidos.

     ‘data’ (predeterminados: ‘""’)
          Los datos que contiene el registro. Por ejemplo, una dirección
          IP asociada con un registro A, o un nombre de dominio asociado
          con un registro NS. Recuerde que los nombres de dominio son
          relativos al origen a menos que terminen con punto.

 -- Tipo de datos: zone-file
     Tipo de datos que representa el contenido de un fichero de zona.
     Este tipo tiene los siguientes parámetros:

     ‘entries’ (predeterminadas: ‘'()’)
          La lista de entradas. El registro SOA se genera
          automáticamente, por lo que no necesita ponerlo en la lista de
          entradas. Esta lista probablemente debería contener una
          entrada apuntando a su servidor DNS de autoridad. En vez de
          usar una lista de entradas directamente, puede usar
          ‘define-zone-entries’ para definir un objeto que contenga la
          lista de entradas más fácilmente, que posteriormente puede
          proporcionar en el campo ‘entries’ del fichero ‘zone-file’.

     ‘origin’ (predeterminado: ‘""’)
          El nombre de su zona. Este parámetro no puede estar vacío.

     ‘ns’ (predeterminado: ‘"ns"’)
          El dominio de su servidor DNS primario de autoridad. El nombre
          es relativo al origen, a menos que termine en punto. Es
          obligatorio que este servidor DNS primario corresponda con un
          registro NS en la zona y que esté asociado a una dirección IP
          en la lista de entradas.

     ‘mail’ (predeterminado: ‘"hostmaster"’)
          Dirección de correo a través de la cual la gente puede
          contactar con usted, como propietaria de la zona. Se traduce a
          ‘<mail>@<origin>’.

     ‘serial’ (predeterminado: ‘1’)
          Número serie de la zona. Como se usa para tener constancia de
          los cambios tanto en servidores esclavos como en resolvedores,
          es obligatorio que _nunca_ decremente. Incremente su valor
          siempre que haga cambios en su zona.

     ‘refresh’ (predeterminado: ‘(* 2 24 3600)’)
          La frecuencia con la que los servidores esclavos realizarán
          una transferencia de zona. Este valor es un número de
          segundos. Puede calcularse con multiplicaciones o con
          ‘(string->duration)’.

     ‘retry’ (predeterminado: ‘(* 15 60)’)
          El periodo tras el cual un servidor esclavo reintentará el
          contacto con su maestro cuando falle al intentarlo la primera
          vez.

     ‘expiry’ (predeterminado: ‘(* 14 24 3600)’)
          Tiempo de vida (TTL) predeterminado de los registros. Los
          registros existentes se consideran correctos durante al menos
          este periodo de tiempo. Tras este periodo, los resolvedores
          invalidarán su caché y comprobarán de nuevo que todavía
          exista.

     ‘nx’ (predeterminado: ‘3600’)
          Tiempo de vida (TTL) de los registros inexistentes. Este
          retraso es habitualmente corto ya que deseará que sus nuevos
          dominios estén disponibles para cualquiera rápidamente.

 -- Tipo de datos: knot-remote-configuration
     Tipo de datos que representa una configuración remota. Este tipo
     tiene los siguientes parámetros:

     ‘id’ (predeterminado: ‘""’)
          Un identificador para que otros campos de configuración hagan
          referencia a esta configuración remota. Los identificadores
          deben ser únicos y no deben estar vacíos.

     ‘address’ (predeterminada: ‘'()’)
          Una lista ordenada de direcciones IP de destino. Las
          direcciones se prueban en secuencia. Opcionalmente se puede
          proporcionar el puerto con el separador @. Por ejemplo: ‘(list
          "1.2.3.4" "2.3.4.5@53")’. El puerto predeterminado es el 53.

     ‘via’ (predeterminada: ‘'()’)
          Una lista ordenada de direcciones IP de fuente. Una lista
          vacía hará que Knot seleccione una fuente IP apropiada.
          Opcionalmente se puede proporcionar el puerto con el separador
          @. De manera predeterminada se selecciona al azar.

     ‘key’ (predeterminada: ‘#f’)
          Referencia a una clave, esto es una cadena que contiene el
          identificador de una clave definida en el campo
          ‘knot-key-configuration’.

 -- Tipo de datos: knot-keystore-configuration
     Tipo de datos que representa un almacén de claves para alojar
     claves de dnssec. Este tipo tiene los siguientes parámetros:

     ‘id’ (predeterminado: ‘""’)
          El identificador del almacén de claves. No debe estar vacío.

     ‘backend’ (predeterminado: ‘'pem’)
          El motor en el que se almacenan las claves. Puede ser ‘'pem’ o
          ‘'pkcs11’.

     ‘config’ (predeterminada: ‘"/var/lib/knot/keys/keys"’)
          La cadena de configuración del motor. Un ejemplo para PKCS#11
          es: ‘"pkcs11:token=knot;pin-value=1234
          /gnu/store/.../lib/pkcs11/libsofthsm2.so"’. La cadena
          representa una ruta en el sistema de ficheros para el motor
          pem.

 -- Tipo de datos: knot-policy-configuration
     Tipo de datos que representa una política de dnssec. El DNS Knot es
     capaz de firmar automáticamente sus zonas. Puede generar y
     gestionar sus claves de manera automática o usar las claves que
     usted genere.

     Dnssec se implementa habitualmente usando dos claves: una clave
     para firma de claves (KSK) que se usa para firmar la segunda, y una
     clave para firma de zona (ZSK) que se usa para firmar la zona. Para
     establecer la confianza, la KSK necesita estar presente en la zona
     padre (habitualmente un dominio de nivel superior). Si su entidad
     de registro permite dnssec, debe mandarle el hash de su KSK de
     manera que puedan añadir un registro DS en su zona. No es
     automático y debe realizarse cada vez que cambie su KSK.

     La política también define el tiempo de vida de las claves.
     Habitualmente, la ZSK puede cambiarse fácilmente y usa funciones
     criptográficas más débiles (usa parámetros de menor magnitud) para
     firmar los registros rápidamente, ya que cambian habitualmente. No
     obstante, la KSK requiere interacción manual con la entidad de
     registro, por lo que se cambia menos habitualmente y usa parámetros
     más fuertes debido a que únicamente firma un registro.

     Este tipo tiene los siguientes parámetros:

     ‘id’ (predeterminado: ‘""’)
          El identificador de la política. No debe estar vacío.

     ‘keystore’ (predeterminado: ‘"default"’)
          Referencia a un almacén de claves, es decir una cadena que
          contiene el identificador de un almacén de claves definido en
          un campo de ‘knot-keystore-configuration’. El identificador
          predeterminado ‘"default"’ implica el uso del almacén de
          claves predeterminado (una base de datos kasp que se configura
          para este servicio).

     ‘manual?’ (predeterminado: ‘#f’)
          Si la gestión de claves es manual o automática.

     ‘single-type-signing?’ (predeterminado: ‘#f’)
          Cuando sea ‘#t’, usa el esquema de firma de tipo único
          (Single-Type Signing Scheme).

     ‘algorithm’ (predeterminado: ‘"ecdsap256sha256"’)
          Algoritmo para las claves de firma y las firmas emitidas.

     ‘ksk-size’ (predeterminado: ‘256’)
          La longitud de la KSK. Fíjese que este valor es correcto para
          el algoritmo predeterminado, pero sería inseguro para otros
          algoritmos.

     ‘zsk-size’ (predeterminado: ‘256’)
          La longitud de la ZSK. Fíjese que este valor es correcto para
          el algoritmo predeterminado, pero sería inseguro para otros
          algoritmos.

     ‘dnskey-ttl’ (predeterminado: ‘'default’)
          El valor del tiempo de vida (TTL) de los registros DNSKEY
          añadidos al “apex” de la zona. El valor especial ‘'default’
          significa el mismo valor que el TTL del SOA de la zona.

     ‘zsk-lifetime’ (predeterminado: ‘(* 30 24 3600)’)
          El periodo entre la publicación de la ZSK y el inicio del
          siguiente ciclo de renovación.

     ‘propagation-delay’ (predeterminado: ‘(* 24 3600)’)
          Retraso adicional añadido por cada paso del ciclo de
          renovación de clave. Este valor debe ser suficientemente alto
          para cubrir la propagación de datos del servidor maestro a
          todos los esclavos.

     ‘rrsig-lifetime’ (predeterminado: ‘(* 14 24 3600)’)
          Periodo de validez para las nuevas firmas emitidas.

     ‘rrsig-refresh’ (predeterminado: ‘(* 7 24 3600)’)
          Periodo de antelación con el que se realiza el refresco de la
          firma antes de una expiración de la misma.

     ‘nsec3?’ (predeterminado: ‘#f’)
          Si es ‘#t’, se usa NSEC3 en vez de NSEC.

     ‘nsec3-iterations’ (predeterminado: ‘5’)
          Número de ejecuciones adicionales de la operación de hash.

     ‘nsec3-salt-length’ (predeterminado: ‘8’)
          La longitud del campo “salt” en octetos, que se añade al
          nombre de la propietaria original antes de ejecutar la
          operación de hash.

     ‘nsec3-salt-lifetime’ (predeterminado: ‘(* 30 24 3600)’)
          El periodo de validez de los campos “salt” que se generen.

 -- Tipo de datos: knot-zone-configuration
     Tipo de datos que representa una zona ofrecida por Knot. Este tipo
     tiene los siguientes parámetros:

     ‘domain’ (predeterminado: ‘""’)
          El dominio ofrecido con esta configuración. No debe estar
          vacío.

     ‘file’ (predeterminado: ‘""’)
          El fichero donde se almacena esta zona. Este parámetro se
          ignora para zonas maestras. Vacío significa la ruta
          predeterminada que depende del nombre del dominio.

     ‘zone’ (predeterminado: ‘(zone-file)’)
          El contenido del fichero de zona. Este parámetro se ignora
          para zonas esclavas. Debe contener un registro de fichero de
          zona.

     ‘master’ (predeterminado: ‘'()’)
          Lista de maestros remotos. Cuando está vacía, esta zona es
          maestra. Cuando tiene contenido, esta zona es esclava. Es una
          lista de identificadores remotos.

     ‘ddns-master’ (predeterminado: ‘#f’)
          Maestro principal. Cuando está vacío, apunta de manera
          predeterminada al primer maestro en la lista de maestros.

     ‘notify’ (predeterminado: ‘'()’)
          Una lista de identificadores remotos de esclavos.

     ‘acl’ (predeterminado: ‘'()’)
          Lista de identificadores acl.

     ‘semantic-checks?’ (predeterminado: ‘#f’)
          Cuando es verdadero, añade más comprobaciones semánticas a la
          zona.

     ‘disable-any?’ (predeterminado: ‘#f’)
          Cuando es verdadero, no permite consultas de tipo ANY.

     ‘zonefile-sync’ (predeterminado: ‘0’)
          El retraso entre una modificación en memoria y en disco. 0
          significa sincronización inmediata.

     ‘zonefile-load’ (predeterminado: ‘#f’)
          La forma en la que los contenidos del fichero de zona se
          aplican durante la carga de la zona. Los valores posibles son:

             • ‘#f’ para obtener el valor predeterminado de Knot,
             • ‘'none’ para no usar el fichero de zona en absoluto,
             • ‘'difference’ para calcular la diferencia entre los
               contenidos disponibles actualmente y los contenidos de la
               zona y los aplica a los contenidos actuales de la zona
               actual,
             • ‘'difference-no-serial’ es igual que ‘'difference’, pero
               ignora el código serie SOA en el fichero de zona,
               mientras que el servidor se hace cargo de él de manera
               automática.
             • ‘'whole’ para cargar los contenidos de la zona del
               fichero de zona.

     ‘journal-content’ (predeterminado: ‘'()’)
          La forma en la que se usa el diario para almacenar la zona y
          sus cambios. Los posibles valores son ‘'none’ para no usarlo
          en absoluto, ‘'changes’ para almacenar los cambios y ‘'all’
          para almacenar los contenidos. ‘#f’ proporciona un valor a
          esta opción, por lo que se usa el valor predeterminado de
          Knot.

     ‘max-journal-usage’ (predeterminado: ‘#f’)
          Tamaño máximo del diario en disco. ‘#f’ no proporciona un
          valor a esta opción, por lo que se usa el valor predeterminado
          de Knot.

     ‘max-journal-depth’ (predeterminado: ‘#f’)
          Tamaño máximo de la historia. ‘#f’ proporciona un valor a esta
          opción, por lo que se usa el valor predeterminado de Knot.

     ‘max-zone-size’ (predeterminado: ‘#f’)
          Tamaño máximo del fichero de zona. Este límite se usa para
          transferencias entrantes y actualizaciones. ‘#f’ no
          proporciona un valor a esta opción, por lo que se usa el valor
          predeterminado de Knot.

     ‘dnssec-policy’ (predeterminado: ‘#f’)
          Una referencia a un registro de ‘knot-policy-configuration’, o
          el nombre especial ‘"default"’. Si el valor es ‘#f’, no se
          realiza firma dnssec en esta zona.

     ‘serial-policy’ (predeterminado: ‘'increment’)
          Una política entre ‘'increment’ y ‘'unixtime’.

 -- Tipo de datos: knot-configuration
     Tipo de datos que representa la configuración Knot. Este tipo tiene
     los siguientes parámetros:

     ‘knot’ (predeterminado: ‘knot’)
          El paquete Knot.

     ‘run-directory’ (predeterminado: ‘"/var/run/knot"’)
          El directorio de ejecución. Este directorio se usará para los
          ficheros de PID y de sockets.

     ‘includes’ (predeterminada: ‘'()’)
          Una lista de cadenas u objetos “tipo-fichero” que denota otros
          ficheros que deben incluirse al inicio del fichero de
          configuración.

          Puede usarse para gestionar secretos en un canal separado. Por
          ejemplo, las claves secretas pueden almacenarse en un fichero
          fuera de banda no gestionado por Guix, y por tanto no visible
          en ‘/gnu/store’—por ejemplo, puede almacenar su configuración
          de clave secreta en ‘/etc/knot/secrets.conf’ e incluir este
          fichero en la lista ‘includes’.

          Se puede generar una clave secreta tsig (para nsupdate y
          transferencias de zona) con la orden keymgr del paquete knot.
          Tenga en cuenta que el paquete no se instala automáticamente
          con el servicio. El ejemplo siguiente muestra como generar una
          clave tsig nueva:

               keymgr -t misecreto > /etc/knot/secrets.conf
               chmod 600 /etc/knot/secrets.conf

          Tenga también en cuenta que la clave generada se llamará
          MISECRETO, de modo que ese nombre es el que debe usarse en el
          campo KEY del registro ‘knot-acl-configuration’ y en otros
          lugares que hagan referencia a esa clave.

          También puede usarse para añadir configuración no implementada
          por esta interfaz.

     ‘listen-v4’ (predeterminada: ‘"0.0.0.0"’)
          La dirección IP en la que escuchar.

     ‘listen-v6’ (predeterminada: ‘"::"’)
          La dirección IP en la que escuchar.

     ‘listen-port’ (predeterminado: ‘53’)
          El puerto en el que escuchar.

     ‘keys’ (predeterminada: ‘'()’)
          La lista de configuraciones knot-key-configuration usadas por
          esta configuración.

     ‘acls’ (predeterminado: ‘'()’)
          La lista de configuraciones knot-acl-configuration usadas por
          esta configuración.

     ‘remotes’ (predeterminada: ‘'()’)
          La lista de configuraciones knot-remote-configuration usadas
          por esta configuración.

     ‘zones’ (predeterminada: ‘'()’)
          La lista de configuraciones knot-zone-configuration usadas por
          esta configuración.

Servicio de resolución de Knot
..............................

 -- Variable Scheme: knot-resolver-service-type
     El tipo del servicio de resolución de knot, cuyo valor debe ser un
     objeto ‘knot-resolver-configuration’ como en este ejemplo:

          (service knot-resolver-service-type
                   (knot-resolver-configuration
                     (kresd-config-file (plain-file "kresd.conf" "
          net.listen('192.168.0.1', 5353)
          user('knot-resolver', 'knot-resolver')
          modules = { 'hints > iterate', 'stats', 'predict' }
          cache.size = 100 * MB
          "))))

     Para más información, véase su manual
     (https://knot-resolver.readthedocs.org/en/stable/daemon.html#configuration).

 -- Tipo de datos: knot-resolver-configuration
     Tipo de datos que representa la configuración de knot-resolver.

     ‘package’ (predeterminado: KNOT-RESOLVER)
          El objeto paquete de la resolución de DNS de knot.

     ‘kresd-config-file’ (predeterminado: %kresd.conf)
          Objeto “tipo-fichero” con el fichero de configuración de kresd
          usado, de manera predeterminada escucha en ‘127.0.0.1’ y
          ‘::1’.

     ‘garbage-collection-interval’ (predeterminado: 1000)
          Número de milisegundos tras los que ‘kres-cache-gc’ realiza
          una limpieza periódica de la caché.

Servicio Dnsmasq
................

 -- Variable Scheme: dnsmasq-service-type
     Es el tipo del servicio dnsmasq, cuyo valor debe ser un objeto
     ‘dnsmasq-configuration’ como en este ejemplo:

          (service dnsmasq-service-type
                   (dnsmasq-configuration
                     (no-resolv? #t)
                     (servers '("192.168.1.1"))))

 -- Tipo de datos: dnsmasq-configuration
     Tipo de datos que representa la configuración de dnsmasq.

     ‘package’ (predeterminado: DNSMASQ)
          El objeto paquete del servidor dnsmasq.

     ‘no-hosts?’ (predeterminado: ‘#f’)
          Cuando es verdadero, no lee los nombres de máquina en
          /etc/hosts.

     ‘port’ (predeterminado: ‘53’)
          El puerto sobre el que se escucha. Proporcionar el valor cero
          deshabilita las respuestas DNS completamente, dejando las
          funciones DHCP y/o TFTP únicamente.

     ‘local-service?’ (predeterminado: ‘#t’)
          Acepta peticiones DNS únicamente de máquinas cuya dirección
          esté en una subred local, es decir, subred para la que existe
          una interfaz en el servidor.

     ‘listen-addresses’ (predeterminadas: ‘'()’)
          Escucha en las direcciones IP proporcionadas.

     ‘resolv-file’ (predeterminado: ‘"/etc/resolv.conf"’)
          Fichero en el que se obtienen las direcciones IP de los
          servidores de nombres desde los que se obtienen datos.

     ‘no-resolv?’ (predeterminado: ‘#f’)
          Cuando tiene valor verdadero, no se lee RESOLV-FILE.

     ‘servers’ (predeterminados: ‘'()’)
          Especifica directamente la dirección IP de los servidores
          proveedores.

     ‘addresses’ (default: ‘'()’)
          For each entry, specify an IP address to return for any host
          in the given domains. Queries in the domains are never
          forwarded and always replied to with the specified IP address.

          This is useful for redirecting hosts locally, for example:

               (service dnsmasq-service-type
                        (dnsmasq-configuration
                          (addresses
                            '(; Redirect to a local web-server.
                              "/example.org/127.0.0.1"
                              ; Redirect subdomain to a specific IP.
                              "/subdomain.example.org/192.168.1.42"))))

          Note that rules in ‘/etc/hosts’ take precedence over this.

     ‘cache-size’ (predeterminado: ‘150’)
          Establece el tamaño de la caché de dnsmasq. Proporcionar el
          valor cero desactiva el almacenamiento en caché.

     ‘negative-cache?’ (predeterminado: ‘#t’)
          Cuando es falso, desactiva la caché negativa.

Servicio ddclient
.................

El servicio de ddclient descrito a continuación ejecuta el daemon
ddclient, que se encarga de actualizar automáticamente entradas DNS para
proveedores de servicio como Dyn (https://dyn.com/dns/).

   El ejemplo siguiente muestra como instanciar el servicio con su
configuración predeterminada.

     (service ddclient-service-type)

   Note that ddclient needs to access credentials that are stored in a
“secret file”, by default ‘/etc/ddclient/secrets’ (see ‘secret-file’
below). You are expected to create this file manually, in an
“out-of-band” fashion (you _could_ make this file part of the service
configuration, for instance by using ‘plain-file’, but it will be
world-readable via ‘/gnu/store’). See the examples in the
‘share/ddclient’ directory of the ‘ddclient’ package.

   Los campos disponibles de ‘ddclient-configuration’ son:

 -- parámetro de ‘ddclient-configuration’: package ddclient
     El paquete ddclient.

 -- parámetro de ‘ddclient-configuration’: integer daemon
     Periodo tras el cual ddclient reintentará la comprobación de IP y
     de nombre de dominio.

     El valor predeterminado es ‘300’.

 -- parámetro de ‘ddclient-configuration’: boolean syslog
     Usa syslog para la salida.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘ddclient-configuration’: string mail
     Envía por correo a la usuaria.

     El valor predeterminado es ‘"root"’.

 -- parámetro de ‘ddclient-configuration’: string mail-failure
     Envía por correo las actualizaciones fallidas a la usuaria.

     El valor predeterminado es ‘"root"’.

 -- parámetro de ‘ddclient-configuration’: string pid
     El fichero de PID de ddclient.

     El valor predeterminado es ‘"/var/run/ddclient/ddclient.pid"’.

 -- parámetro de ‘ddclient-configuration’: boolean ssl
     Permite el uso de SSL.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘ddclient-configuration’: string user
     Especifica el nombre de usuaria o ID usado para la ejecución del
     programa ddclient.

     El valor predeterminado es ‘"ddclient"’.

 -- parámetro de ‘ddclient-configuration’: string group
     Grupo de la usuaria que ejecutará el servidor ddclient.

     El valor predeterminado es ‘"ddclient"’.

 -- parámetro de ‘ddclient-configuration’: string secret-file
     Fichero secreto que se añadirá al final del fichero
     ‘ddclient.conf’. Este fichero contiene las credenciales usadas por
     ddclient. Se espera que usted lo cree manualmente.

     El valor predeterminado es ‘"/etc/ddclient/secrets.conf"’.

 -- parámetro de ‘ddclient-configuration’: lista extra-options
     Opciones adicionales a agregar al final del fichero
     ‘ddclient.conf’.

     El valor predeterminado es ‘()’.

   ---------- Footnotes ----------

   (1) Name Server en inglés.

   (2) Mail eXchange en inglés


File: guix.es.info,  Node: Servicios VPN,  Next: Sistema de ficheros en red,  Prev: Servicios DNS,  Up: Servicios

8.8.19 Servicios VPN
--------------------

El módulo ‘(gnu services vpn)’ proporciona servicios relacionados con
las “redes privadas virtuales” (VPN). Proporciona un servicio _cliente_
para que su máquina se conecte a una VPN, y un servicio _servidor_ para
que su máquina aloje una VPN. Ambos servicios usan OpenVPN
(https://openvpn.net/).

 -- Procedimiento Scheme: openvpn-client-service [#:config
          (openvpn-client-configuration)]

     Devuelve un servicio que ejecuta ‘openvpn’, un daemon VPN, como
     cliente.

 -- Procedimiento Scheme: openvpn-server-service [#:config
          (openvpn-server-configuration)]

     Devuelve un servicio que ejecuta ‘openvpn’, un daemon VPN, como
     servidor.

     Pueden ejecutarse simultáneamente.

   Los campos disponibles de ‘openvpn-client-configuration’ son:

 -- parámetro de ‘openvpn-client-configuration’: package openvpn
     El paquete OpenVPN.

 -- parámetro de ‘openvpn-client-configuration’: string pid-file
     El fichero de pid de OpenVPN.

     El valor predeterminado es ‘"/var/run/openvpn/openvpn.pid"’.

 -- parámetro de ‘openvpn-client-configuration’: protocolo proto
     El protocolo (UDP o TCP) usado para la apertura del canal entre
     clientes y servidores.

     El valor predeterminado es ‘udp’.

 -- parámetro de ‘openvpn-client-configuration’: dispositivo dev
     El tipo de dispositivo usado para representar la conexión VPN.

     El valor predeterminado es ‘tun’.

 -- parámetro de ‘openvpn-client-configuration’: string ca
     La autoridad de certificación contra la que se comprueban las
     conexiones.

     El valor predeterminado es ‘"/etc/openvpn/ca.crt"’.

 -- parámetro de ‘openvpn-client-configuration’: string cert
     El certificado de la máquina en la que se ejecuta el daemon. Debe
     estar firmado por la autoridad proporcionada en ‘ca’.

     El valor predeterminado es ‘"/etc/openvpn/client.crt"’.

 -- parámetro de ‘openvpn-client-configuration’: string key
     La clave de la máquina en la que se ejecuta el daemon. Debe ser la
     clave cuyo certificado es ‘cert’.

     El valor predeterminado es ‘"/etc/openvpn/client.key"’.

 -- parámetro de ‘openvpn-client-configuration’: boolean comp-lzo?
     Determina si se usa el algoritmo de compresión lzo.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘openvpn-client-configuration’: boolean persist-key?
     No vuelve a leer los ficheros de claves tras la señal SIGUSR1 o
     –ping-restart.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘openvpn-client-configuration’: boolean persist-tun?
     No cierra y reabre el dispositivo TUN/TAP o ejecuta los guiones de
     parada e inicio tras el reinicio provocado por SIGUSR1 o
     –ping-restart.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘openvpn-client-configuration’: boolean fast-io?
     (Experimental) Optimiza las escrituras de E/S de TUN/TAP/UDP
     evitando llamar poll/epoll/select antes de la operación de
     escritura (‘write’).

     El valor predeterminado es ‘#f’

 -- parámetro de ‘openvpn-client-configuration’: number verbosity
     Nivel de detalle en los mensajes.

     El valor predeterminado es ‘3’.

 -- parámetro de ‘openvpn-client-configuration’: cliente-tls-auth
          tls-auth
     Añade una capa adicional de verificación HMAC sobre el canal de
     control TLS para protección contra ataques de denegación de
     servicio (DoS).

     El valor predeterminado es ‘#f’

 -- parámetro de ‘openvpn-client-configuration’: maybe-string
          auth-user-pass
     Activa la identificación con el servidor mediante el uso de
     usuaria/contraseña. La opción es un fichero que contiene en dos
     líneas el nombre de usuaria y la contraseña. No use un objeto
     tipo-fichero, ya que se añadiría al almacén y sería legible para
     cualquier usuaria.

     El valor predeterminado es ‘'disabled’.

 -- parámetro de ‘openvpn-client-configuration’: key-usage
          verify-key-usage?
     Si se comprueba que el certificado del servidor tenga la extensión
     de uso de servidor.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘openvpn-client-configuration’: bind bind?
     Asociación a un número específico de puerto local.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘openvpn-client-configuration’: resolv-retry
          resolv-retry?
     Reintentos de resolución de la dirección del servidor.

     El valor predeterminado es ‘#t’

 -- parámetro ‘openvpn-client-configuration’: lista-openvpn-remote
          remote
     Una lista de servidores remotos a los que conectarse.

     El valor predeterminado es ‘()’.

     Los campos disponibles de ‘openvpn-remote-configuration’ son:

      -- parámetro de ‘openvpn-remote-configuration’: string name
          Nombre del servidor.

          El valor predeterminado es ‘"my-server"’.

      -- parámetro de ‘openvpn-remote-configuration’: number port
          Puerto en el que escucha el servidor.

          El valor predeterminado es ‘1194’.

   Los campos disponibles de ‘openvpn-server-configuration’ son:

 -- parámetro de ‘openvpn-server-configuration’: package openvpn
     El paquete OpenVPN.

 -- parámetro de ‘openvpn-server-configuration’: string pid-file
     El fichero de pid de OpenVPN.

     El valor predeterminado es ‘"/var/run/openvpn/openvpn.pid"’.

 -- parámetro de ‘openvpn-server-configuration’: protocolo proto
     El protocolo (UDP o TCP) usado para la apertura del canal entre
     clientes y servidores.

     El valor predeterminado es ‘udp’.

 -- parámetro de ‘openvpn-server-configuration’: dispositivo dev
     El tipo de dispositivo usado para representar la conexión VPN.

     El valor predeterminado es ‘tun’.

 -- parámetro de ‘openvpn-server-configuration’: string ca
     La autoridad de certificación contra la que se comprueban las
     conexiones.

     El valor predeterminado es ‘"/etc/openvpn/ca.crt"’.

 -- parámetro de ‘openvpn-server-configuration’: string cert
     El certificado de la máquina en la que se ejecuta el daemon. Debe
     estar firmado por la autoridad proporcionada en ‘ca’.

     El valor predeterminado es ‘"/etc/openvpn/client.crt"’.

 -- parámetro de ‘openvpn-server-configuration’: string key
     La clave de la máquina en la que se ejecuta el daemon. Debe ser la
     clave cuyo certificado es ‘cert’.

     El valor predeterminado es ‘"/etc/openvpn/client.key"’.

 -- parámetro de ‘openvpn-server-configuration’: boolean comp-lzo?
     Determina si se usa el algoritmo de compresión lzo.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘openvpn-server-configuration’: boolean persist-key?
     No vuelve a leer los ficheros de claves tras la señal SIGUSR1 o
     –ping-restart.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘openvpn-server-configuration’: boolean persist-tun?
     No cierra y reabre el dispositivo TUN/TAP o ejecuta los guiones de
     parada e inicio tras el reinicio provocado por SIGUSR1 o
     –ping-restart.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘openvpn-server-configuration’: boolean fast-io?
     (Experimental) Optimiza las escrituras de E/S de TUN/TAP/UDP
     evitando llamar poll/epoll/select antes de la operación de
     escritura (‘write’).

     El valor predeterminado es ‘#f’

 -- parámetro de ‘openvpn-server-configuration’: number verbosity
     Nivel de detalle en los mensajes.

     El valor predeterminado es ‘3’.

 -- parámetro de ‘openvpn-server-configuration’: servidor-tls-auth
          tls-auth
     Añade una capa adicional de verificación HMAC sobre el canal de
     control TLS para protección contra ataques de denegación de
     servicio (DoS).

     El valor predeterminado es ‘#f’

 -- parámetro de ‘openvpn-server-configuration’: number port
     Especifica el número de puerto en el que escucha el servidor.

     El valor predeterminado es ‘1194’.

 -- parámetro de ‘openvpn-server-configuration’: ip-máscara server
     Una IP y una máscara que especifiquen la subred dentro de la red
     virtual.

     El valor predeterminado es ‘"10.8.0.0 255.255.255.0"’.

 -- parámetro de ‘openvpn-server-configuration’: cidr6 server-ipv6
     La especificación de una subred IPv6 dentro de la red virtual en
     notación CIDR.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘openvpn-server-configuration’: string dh
     El fichero de parámetros Diffie-Hellman.

     El valor predeterminado es ‘"/etc/openvpn/dh2048.pem"’.

 -- parámetro de ‘openvpn-server-configuration’: string
          ifconfig-pool-persist
     El fichero que registra IP de clientes.

     El valor predeterminado es ‘"/etc/openvpn/ipp.txt"’.

 -- parámetro de ‘openvpn-server-configuration’: gateway
          redirect-gateway?
     Cuando sea verdadero, el servidor actuará como una pasarela para
     sus clientes.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘openvpn-server-configuration’: boolean
          client-to-client?
     Cuando es verdadero, se permite la comunicación entre clientes
     dentro de la VPN.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘openvpn-server-configuration’: keepalive keepalive
     Hace que se envíen mensajes tipo-ping en ambas direcciones a través
     del enlace de modo que cada extremo conozca si el otro extremo no
     está disponible. ‘keepalive’ necesita un par. El primer elemento es
     el periodo de envío de ping, y el segundo elemento es el plazo
     máximo antes de considerar que el otro extremo no está disponible.

 -- parámetro de ‘openvpn-server-configuration’: number max-clients
     Número máximo de clientes.

     El valor predeterminado es ‘100’.

 -- parámetro de ‘openvpn-server-configuration’: string status
     El fichero de estado. Este fichero muestra un pequeño informe sobre
     la conexión actual. Su contenido se borra y se reescribe cada
     minuto.

     El valor predeterminado es ‘"/var/run/openvpn/status"’.

 -- parámetro de ‘openvpn-server-configuration’: lista-openvpn-ccd
          client-config-dir
     Lista de configuración para algunos clientes.

     El valor predeterminado es ‘()’.

     Los campos disponibles de ‘openvpn-ccd-configuration’ son:

      -- parámetro de ‘openvpn-ccd-configuration’: string name
          Nombre del cliente.

          El valor predeterminado es ‘"client"’.

      -- parámetro de ‘openvpn-ccd-configuration’: ip-máscara iroute
          Red propia del cliente

          El valor predeterminado es ‘#f’

      -- parámetro de ‘openvpn-ccd-configuration’: ip-máscara
               ifconfig-push
          IP de la VPN del cliente.

          El valor predeterminado es ‘#f’


File: guix.es.info,  Node: Sistema de ficheros en red,  Next: Integración continua,  Prev: Servicios VPN,  Up: Servicios

8.8.20 Sistema de ficheros en red
---------------------------------

El módulo ‘(gnu services nfs)’ proporciona los siguientes servicios, que
se usan habitualmente en relación con el montado o la exportación de
árboles de directorios como “sistemas de ficheros en red” (NFS).

   Mientras que es posible usar los componentes individuales de forma
conjunta para proporcionar un servicio del sistema de ficheros en red
NFS, recomendamos la configuración de un servidor NFS mediante
‘nfs-service-type’.

Servicio NFS
............

El servicio NFS se hace cargo de configurar todos los servicios de
componentes de NFS, la configuración del núcleo de sistemas de ficheros
e instala los ficheros de configuración en las rutas que NFS espera.

 -- Variable Scheme: nfs-service-type
     Este es el tipo de datos para un servidor NFS completo.

 -- Tipo de datos: nfs-configuration
     Este tipo de datos representa la configuración del servicio NFS y
     todos sus subsistemas.

     Tiene los siguientes parámetros:
     ‘nfs-utils’ (predeterminado: ‘nfs-utils’)
          El paquete nfs-utils usado.

     ‘nfs-versions’ (predeterminadas: ‘'("4.2" "4.1" "4.0")’)
          Si se proporciona como valor una lista de cadenas, el daemon
          ‘rpc.nfsd’ se limitará a la implementación de las versiones
          del protocolo NFS proporcionadas.

     ‘exports’ (predeterminada: ‘'()’)
          Una lista de directorios que el servidor NFS debe exportar.
          Cada entrada es una lista que consiste en dos elementos: un
          nombre de directorio y una cadena que contiene todas las
          opciones. Este es un ejemplo en el que el directorio
          ‘/exportado’ se proporciona a todos los clientes NFS en modo
          de solo-lectura:

               (nfs-configuration
                (exports
                 '(("/exportado"
                    "*(ro,insecure,no_subtree_check,crossmnt,fsid=0)"))))

     ‘rpcmountd-port’ (predeterminado: ‘#f’)
          El puerto de red que el daemon ‘rpc.mountd’ debe usar.

     ‘rpcstatd-port’ (predeterminado: ‘#f’)
          El puerto de red que el daemon ‘rpc.statd’ debe usar.

     ‘rpcbind’ (predeterminado: ‘rpcbind’)
          El paquete rpcbind usado.

     ‘idmap-domain’ (predeterminado: ‘"localdomain"’)
          El nombre de dominio local de NFSv4.

     ‘nfsd-port’ (predeterminado: ‘2049’)
          El puerto de red que el daemon ‘nfsd’ debe usar.

     ‘nfsd-threads’ (predeterminado: ‘8’)
          Número de hilos usados en el daemon ‘nfsd’.

     ‘pipefs-directory’ (predeterminado: ‘"/var/lib/nfs/rpc_pipefs"’)
          El directorio donde el sistema de ficheros pipefs debe
          montarse.

     ‘debug’ (predeterminada: ‘'()"’)
          Una lista de subsistemas para los cuales debe activarse la
          salida de depuración. Es una lista de símbolos. Cualquiera de
          estos símbolos son válidos: ‘nfsd’, ‘nfs’, ‘rpc’, ‘idmap’,
          ‘statd’ o ‘mountd’.

   Si no necesita un servicio NFS completo o prefiere construirlo por su
cuenta puede usar los componentes individuales que se documentan a
continuación.

Servicio RPC Bind
.................

El servicio RPC Bind proporciona una forma de asociar números de
programa con direcciones universales. Muchos servicios relacionados con
NFS usan esta característica. De ahí que se inicie automáticamente
cuando un servicio dependiente se inicia.

 -- Variable Scheme: rpcbind-service-type
     Un tipo de servicio para el daemon de asignación de puertos RPC.

 -- Tipo de datos: rpcbind-configuration
     Tipo de datos que representa la configuración del servicio RPC
     Bind. Este tipo tiene los siguientes parámetros:
     ‘rpcbind’ (predeterminado: ‘rpcbind’)
          El paquete rpcbind usado.

     ‘warm-start?’ (predeterminado: ‘#t’)
          Si este parámetro es ‘#t’, el daemon leerá el fichero de
          estado durante el arranche, por tanto recargando la
          información del estado almacenada por la instancia previa.

Pseudo-sistema de ficheros pipefs
.................................

El sistema de ficheros pipefs se usa para transferir datos relacionados
con NFS entre el núcleo y los programas de espacio de usuaria.

 -- Variable Scheme: pipefs-service-type
     Un tipo de servicio para el pseudo-sistema de ficheros pipefs.

 -- Tipo de datos: pipefs-configuration
     Tipo de datos que representa la configuración del servicio del
     pseudo-sistema de ficheros pipefs. Este tipo tiene los siguientes
     parámetros:
     ‘mount-point’ (predeterminado: ‘"/var/lib/nfs/rpc_pipefs"’)
          El directorio al que se debe asociar el sistema de ficheros.

Servicio del daemon GSS
.......................

El daemon “sistema de seguridad global” (GSS) proporciona fuertes
garantías de seguridad para protocolos basados en RPC. Antes de
intercambiar peticiones RPC el cliente debe establecer un contexto de
seguridad. Habitualmente esto se lleva a cabo con el uso de la orden
‘kinit’o automáticamente durante el ingreso al sistema mediante el uso
de servicios PAM (*note Servicios Kerberos::).

 -- Variable Scheme: gss-service-type
     Un tipo de servicio para el daemon del sistema de seguridad global
     (GSS).

 -- Tipo de datos: gss-configuration
     Tipo de datos que representa la configuración del servicio del
     daemon GSS. Este tipo tiene los siguientes parámetros:
     ‘nfs-utils’ (predeterminado: ‘nfs-utils’)
          Paquete en el que se encuentra la orden ‘rpc.gssd’.

     ‘pipefs-directory’ (predeterminado: ‘"/var/lib/nfs/rpc_pipefs"’)
          El directorio donde el sistema de ficheros pipefs debe
          montarse.

Servicio del daemon IDMAP
.........................

El servicio del daemon idmap proporciona una asociación entre
identificadores de usuaria y nombres de usuaria. Habitualmente es
necesario para acceder sistemas de ficheros montados con NFSv4.

 -- Variable Scheme: idmap-service-type
     Un tipo de servicio para el daemon de asociación de identidades
     (IDMAP).

 -- Tipo de datos: idmap-configuration
     Tipo de datos que representa la configuración del servicio del
     daemon IDMAP. Este tipo tiene los siguientes parámetros:
     ‘nfs-utils’ (predeterminado: ‘nfs-utils’)
          Paquete en el que se encuentra la orden ‘rpc.idmapd’.

     ‘pipefs-directory’ (predeterminado: ‘"/var/lib/nfs/rpc_pipefs"’)
          El directorio donde el sistema de ficheros pipefs debe
          montarse.

     ‘domain’ (predeterminado: ‘#f’)
          El nombre de dominio local de NFSv4. Debe ser una cadena o
          ‘#f’. Si es ‘#f’ el daemon usará el nombre de dominio
          totalmente cualificado de la máquina.

     ‘verbosity’ (predeterminado: ‘0’)
          El nivel de información de los mensajes del daemon.


File: guix.es.info,  Node: Integración continua,  Next: Servicios de gestión de energía,  Prev: Sistema de ficheros en red,  Up: Servicios

8.8.21 Integración continua
---------------------------

Cuirass (https://git.savannah.gnu.org/cgit/guix/guix-cuirass.git) es una
herramienta de integración continua para Guix. Puede usarse tanto para
el desarrollo como para proporcionar sustituciones a otras personas
(*note Sustituciones::).

   El módulo ‘(gnu services cuirass)’ proporciona el siguiente servicio.

 -- Procedimiento Scheme: cuirass-service-type
     El tipo del servicio Cuirass. Su valor debe ser un objeto
     ‘cuirass-configuration’, como se describe a continuación.

   To add build jobs, you have to set the ‘specifications’ field of the
configuration. Here is an example of a service that polls the Guix
repository and builds the packages from a manifest. Some of the packages
are defined in the ‘"custom-packages"’ input, which is the equivalent of
‘GUIX_PACKAGE_PATH’.

     (define %especificacion-de-cuirass
       #~(list
          '((#:name . "mi-manifiesto")
            (#:load-path-inputs . ("guix"))
            (#:package-path-inputs . ("paquetes-personalizados"))
            (#:proc-input . "guix")
            (#:proc-file . "build-aux/cuirass/gnu-system.scm")
            (#:proc . cuirass-jobs)
            (#:proc-args . ((subset . "manifests")
                            (systems . ("x86_64-linux"))
                            (manifests . (("config" . "guix/manifest.scm")))))
            (#:inputs . (((#:name . "guix")
                          (#:url . "git://git.savannah.gnu.org/guix.git")
                          (#:load-path . ".")
                          (#:branch . "master")
                          (#:no-compile? . #t))
                         ((#:name . "config")
                          (#:url . "https://git.example.org/config.git")
                          (#:load-path . ".")
                          (#:branch . "master")
                          (#:no-compile? . #t))
                         ((#:name . "paquetes-personalizados")
                          (#:url . "https://git.example.org/paquetes-personalizados.git")
                          (#:load-path . ".")
                          (#:branch . "master")
                          (#:no-compile? . #t)))))))

     (service cuirass-service-type
              (cuirass-configuration
               (specifications %especificacion-de-cuirass)))

   Mientras que la información de los trabajos de construcción se
encuentra directamente en las especificaciones, la configuración global
del proceso ‘cuirass’ está accesible en otros campos de
‘cuirass-configuration’.

 -- Tipo de datos: cuirass-configuration
     Tipo de datos que representa la configuración de Cuirass.

     ‘log-file’ (predeterminado: ‘"/var/log/cuirass.log"’)
          Localización del fichero de registro.

     ‘web-log-file’ (predeterminado: ‘"/var/log/cuirass-web.log"’)
          Localización del fichero de registro usado por la interfaz
          web.

     ‘cache-directory’ (predeterminado: ‘"/var/cache/cuirass"’)
          Localización de la caché del repositorio.

     ‘user’ (predeterminado: ‘"cuirass"’)
          Propietaria del proceso ‘cuirass’.

     ‘group’ (predeterminado: ‘"cuirass"’)
          Grupo propietario del proceso ‘cuirass’.

     ‘interval’ (predeterminado: ‘60’)
          Número de segundos entre las consulta de repositorios seguida
          de los trabajos de Cuirass.

     ‘database’ (predeterminada: ‘"/var/lib/cuirass/cuirass.db"’)
          Ruta de la base de datos sqlite que contiene los resultados de
          construcción y las especificaciones añadidas previamente.

     ‘ttl’ (predeterminado: ‘(* 30 24 3600)’)
          Especifica el tiempo de vida (TTL) en segundos de las raíces
          del recolector de basura que se registran con resultados de
          construcciones. Esto significa que los resultados de las
          construcciones se protegen de la recolección de basura al
          menos TTL segundos.

     ‘port’ (predeterminado: ‘8081’)
          Número de puerto usado por el servidor HTTP.

     ‘host’ (predeterminado: ‘"localhost"’)
          Escucha en la interfaz de red de la dirección HOST. El
          comportamiento predeterminado es aceptar conexiones desde la
          red local.

     ‘specifications’ (predeterminada: ‘#~'()’)
          Una expresión-G (*note Expresiones-G::) que evalúa a una lista
          de especificaciones, donde una especificación es una lista
          asociativa (*note (guile)Associations Lists::) cuyas claves
          son palabras claves (‘#:ejemplo-de-palabra-clave’) como se
          muestra en el ejemplo anterior.

     ‘use-substitutes?’ (predeterminado: ‘#f’)
          Permite el uso de sustituciones para evitar la construcción
          desde las fuentes de todas las dependencias de un trabajo.

     ‘one-shot?’ (predeterminado: ‘#f’)
          Evalúa las especificaciones y construye las derivaciones solo
          una vez.

     ‘fallback?’ (predeterminado: ‘#f’)
          Cuando la sustitución de un binario preconstruido falle, se
          intentará la construcción local de los paquetes.

     ‘extra-options’ (predeterminadas: ‘'()’)
          Opciones adicionales proporcionadas a los procesos de Cuirass.

     ‘cuirass’ (predeterminado: ‘cuirass’)
          El paquete Cuirass usado.


File: guix.es.info,  Node: Servicios de gestión de energía,  Next: Servicios de audio,  Prev: Integración continua,  Up: Servicios

8.8.22 Servicios de gestión de energía
--------------------------------------

Daemon TLP
..........

El módulo ‘(gnu services pm)’ proporciona una definición de servicio
Guix para la herramienta de gestión de energía de Linux TLP.

   TLP activa varios modos de ahorro de energía en el núcleo y en
espacio de usuaria. Al contrario que ‘upower-service’, no es una
herramienta de monitorización pasiva, puesto que aplicará una nueva
configuración personalizada cada vez que se detecte una nueva fuente de
energía/alimentación. Puede encontrar más información en la página de
TLP (https://linrunner.de/en/tlp/tlp.html).

 -- Variable Scheme: tlp-service-type
     El tipo de servicio para la herramienta TLP. Su valor debe ser una
     configuración de TLP válida (véase a continuación). Para usar la
     configuración predeterminada, simplemente escriba:
          (service tlp-service-type)

   De manera predeterminada TLP no necesita mucha configuración, pero
los parámetros de TLP se pueden ajustar mediante el uso de
‘tlp-configuration’.

   El tipo de cada parámetro antecede la definición del mismo; por
ejemplo, ‘boolean foo’ indica que el parámetro ‘foo’ debe especificarse
como un valor lógico booleano. Los tipos que empiezan con ‘maybe-’
indican parámetros que no aparecerán en el fichero de configuración de
TLP cuando su valor sea ‘'disabled’.

   Los campos disponibles de ‘tlp-configuration’ son:

 -- parámetro de ‘tlp-configuration’: package tlp
     El paquete TLP.

 -- parámetro de ‘tlp-configuration’: boolean tlp-enable?
     Proporcione un valor verdadero si desea activar TLP.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘tlp-configuration’: string tlp-default-mode
     Modo predeterminado cuando no se puede detectar una fuente de
     alimentación. Las alternativas son AC (corriente alterna) y BAT
     (batería).

     El valor predeterminado es ‘"AC"’ (corriente alterna).

 -- parámetro de ‘tlp-configuration’: entero-no-negativo
          disk-idle-secs-on-ac
     Número de segundos que el núcleo Linux debe esperar desde que el
     disco se queda en espera, antes de sincronizar en corriente alterna
     (AC).

     El valor predeterminado es ‘0’.

 -- parámetro de ‘tlp-configuration’: entero-no-negativo
          disk-idle-secs-on-bat
     Igual que ‘disk-idle-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘2’.

 -- parámetro de ‘tlp-configuration’: entero-no-negativo
          max-lost-work-secs-on-ac
     Periodicidad de la evacuación de las páginas sucias, expresada en
     segundos.

     El valor predeterminado es ‘15’.

 -- parámetro de ‘tlp-configuration’: entero-no-negativo
          max-lost-work-secs-on-bat
     Igual que ‘max-lost-work-secs-on-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘60’.

 -- parámetro de ‘tlp-configuration’:
          maybe-lista-cadena-separada-espacios
          cpu-scaling-governor-on-ac
     Gobernador de escalado de frecuencia del procesador en modo de
     corriente alterna (AC). Con el controlador intel_pstate, las
     alternativas son “powersave” (ahorro de energía) y “performance”
     (rendimiento). Con el controlador acpi-cpufreq, las alternativas
     son “ondemand” (bajo demanda), “powersave”, “performance” y
     “conservative” (conservativo).

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’:
          maybe-lista-cadena-separada-espacios
          cpu-scaling-governor-on-bat
     Igual que ‘max-lost-work-secs-on-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-entero-no-negativo
          cpu-scaling-min-freq-on-ac
     Establece la frecuencia mínima disponible para el controlador de
     escalado en AC.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-entero-no-negativo
          cpu-scaling-max-freq-on-ac
     Establece la frecuencia máxima disponible para el controlador de
     escalado en AC.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-entero-no-negativo
          cpu-scaling-min-freq-on-bat
     Establece la frecuencia mínima disponible para el controlador de
     escalado en BAT.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-entero-no-negativo
          cpu-scaling-max-freq-on-bat
     Establece la frecuencia máxima disponible para el controlador de
     escalado en BAT.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-entero-no-negativo
          cpu-min-perf-on-ac
     Limita el estado-P mínimo para controlar la disipación de potencia
     del procesador en modo AC. Los valores se indican como un
     porcentaje de rendimiento disponible.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-entero-no-negativo
          cpu-max-perf-on-ac
     Limita el estado-P máximo para controlar la disipación de potencia
     del procesador en modo AC. Los valores se indican como un
     porcentaje de rendimiento disponible.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-entero-no-negativo
          cpu-min-perf-on-bat
     Igual que ‘cpu-min-perf-on-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-entero-no-negativo
          cpu-max-perf-on-bat
     Igual que ‘cpu-max-perf-on-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-boolean cpu-boost-on-ac?
     Activa la característica “turbo boost” del procesador en modo AC
     (corriente alterna).

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-boolean cpu-boost-on-bat?
     Igual que ‘cpu-boost-on-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: boolean sched-powersave-on-ac?
     Permite al núcleo Linux minimizar el número de núcleos/hyper-thread
     del procesador usados bajo condiciones de baja carga.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘tlp-configuration’: boolean sched-powersave-on-bat?
     Igual que ‘sched-powersave-on-ac?’ pero en modo BAT (batería).

     El valor predeterminado es ‘#t’

 -- parámetro de ‘tlp-configuration’: boolean nmi-watchdog?
     Activa el proceso guardián (watchdog) NMI del núcleo Linux.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘tlp-configuration’: maybe-string phc-controls
     Para núcleos Linux con el parche PHC aplicado, cambia los voltajes
     del procesador. Un valor de ejemplo sería ‘"F:V F:V F:V F:V"’.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: string energy-perf-policy-on-ac
     Establece la política de alto rendimiento del procesador en vez del
     ahorro de energía mientras durante el uso de corriente alterna
     (AC). Las alternativas son “performance” (alto rendimiento),
     “normal” y “powersave” (ahorro de energía).

     El valor predeterminado es ‘"performance"’.

 -- parámetro de ‘tlp-configuration’: string energy-perf-policy-on-bat
     Igual que ‘energy-perf-policy-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘"powersave"’.

 -- parámetro de ‘tlp-configuration’: lista-cadena-separada-espacios
          disks-devices
     Dispositivos de disco duro.

 -- parámetro de ‘tlp-configuration’: lista-cadena-separada-espacios
          disk-apm-level-on-ac
     Nivel de APM (gestión avanzada de energía) del disco duro.

 -- parámetro de ‘tlp-configuration’: lista-cadena-separada-espacios
          disk-apm-level-on-bat
     Igual que ‘disk-apm-bat’ pero en modo BAT (batería).

 -- parámetro de ‘tlp-configuration’:
          maybe-lista-cadena-separada-espacios
          disk-spindown-timeout-on-ac
     Plazo para la parada rotacional del disco duro. Se debe especificar
     un valor por cada disco duro declarado.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’:
          maybe-lista-cadena-separada-espacios
          disk-spindown-timeout-on-bat
     Igual que ‘disk-spindown-timeout-on-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’:
          maybe-lista-cadena-separada-espacios disk-iosched
     Selecciona el planificador de E/S para dispositivos de disco. Se
     debe especificar un valor por cada disco duro declarado. Ejemplos
     de alternativas son “cfq”, “deadline” y “noop”.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: string sata-linkpwr-on-ac
     Nivel de gestión agresiva de energía del enlace (ALPM) de SATA. Las
     alternativas son “min_power” (energía mínima), “medium_power”
     (energía media) y “max_performance” (máximo rendimiento).

     El valor predeterminado es ‘"max_performance"’.

 -- parámetro de ‘tlp-configuration’: string sata-linkpwr-on-bat
     Igual que ‘sata-linkpwr-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘"min_power"’.

 -- parámetro de ‘tlp-configuration’: maybe-string
          sata-linkpwr-blacklist
     Excluye los dispositivos SATA especificados de la gestión de
     energía del enlace.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-on-off-boolean
          ahci-runtime-pm-on-ac?
     Activa la gestión de energía de tiempo de ejecución para
     controladores AHCI y discos en modo AC.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-on-off-boolean
          ahci-runtime-pm-on-bat?
     Igual que ‘ahci-runtime-pm-on-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: entero-no-negativo
          ahci-runtime-pm-timeout
     Segundos de inactividad antes de suspender el disco.

     El valor predeterminado es ‘15’.

 -- parámetro de ‘tlp-configuration’: string pcie-aspm-on-ac
     Nivel de gestión de energía de estado activo de PCI Express. Las
     alternativas son “default” (predeterminado), “performance”
     (rendimiento) y “powersave” (ahorro de energía).

     El valor predeterminado es ‘"performance"’.

 -- parámetro de ‘tlp-configuration’: string pcie-aspm-on-bat
     Igual que ‘pcie-aspm-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘"powersave"’.

 -- parámetro de ‘tlp-configuration’: string radeon-power-profile-on-ac
     Nivel de velocidad de reloj de gráficos Radeon. Las alternativas
     son “low” (bajo), “mid” (medio), “high” (alto), “auto” (automático)
     y “default” (predeterminado).

     El valor predeterminado es ‘"high"’.

 -- parámetro de ‘tlp-configuration’: string radeon-power-profile-on-bat
     Igual que ‘radeon-power-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘"low"’.

 -- parámetro de ‘tlp-configuration’: string radeon-dpm-state-on-ac
     Método de gestión de energía dinámica (DPM) de Radeon. Las
     alternativas son “battery” (batería) y “performance” (rendimiento).

     El valor predeterminado es ‘"performance"’.

 -- parámetro de ‘tlp-configuration’: string radeon-dpm-state-on-bat
     Igual que ‘radeon-dpm-state-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘"battery"’.

 -- parámetro de ‘tlp-configuration’: string radeon-dpm-perf-level-on-ac
     Nivel de rendimiento del DPM de Radeon. Las alternativas son “auto”
     (automático), “low” (bajo) y “high” (alto).

     El valor predeterminado es ‘"auto"’.

 -- parámetro de ‘tlp-configuration’: string
          radeon-dpm-perf-level-on-bat
     Igual que ‘radeon-dpm-perf-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘"auto"’.

 -- parámetro de ‘tlp-configuration’: on-off-boolean wifi-pwr-on-ac?
     Modo de ahorro de energía de Wifi.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘tlp-configuration’: on-off-boolean wifi-pwr-on-bat?
     Igual que ‘wifi-power-ac?’ pero en modo BAT (batería).

     El valor predeterminado es ‘#t’

 -- parámetro de ‘tlp-configuration’: y-n-boolean wol-disable?
     Desactiva el encendido desde la red local (wake on LAN).

     El valor predeterminado es ‘#t’

 -- parámetro de ‘tlp-configuration’: entero-no-negativo
          sound-power-save-on-ac
     Duración en segundos del plazo antes de activar el ahorro de
     energía de audio en dispositivos Intel HDA y AC97. El valor 0
     desactiva el ahorro de energía.

     El valor predeterminado es ‘0’.

 -- parámetro de ‘tlp-configuration’: entero-no-negativo
          sound-power-save-on-bat
     Igual que ‘sound-powersave-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘1’.

 -- parámetro de ‘tlp-configuration’: y-n-boolean
          sound-power-save-controller?
     Desactiva el controlador en modo de ahorro de energía en
     dispositivos Intel HDA.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘tlp-configuration’: boolean bay-poweroff-on-bat?
     Activa las unidades ópticas en UltraBay/MediaBay en modo BAT. La
     unidad puede volver a alimentarse liberando (y reinsertando) la
     palanca de eyección o presionando el botón de eyección de disco en
     modelos más modernos.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘tlp-configuration’: string bay-device
     Nombre de la unidad de dispositivos ópticos a apagar.

     El valor predeterminado es ‘"sr0"’.

 -- parámetro de ‘tlp-configuration’: string runtime-pm-on-ac
     Gestión de energía en tiempo de ejecución para dispositivos de bus
     PCI(e). Las alternativas son “on” y “auto”.

     El valor predeterminado es ‘"on"’.

 -- parámetro de ‘tlp-configuration’: string runtime-pm-on-bat
     Igual que ‘runtime-pm-ac’ pero en modo BAT (batería).

     El valor predeterminado es ‘"auto"’.

 -- parámetro de ‘tlp-configuration’: boolean runtime-pm-all?
     Gestión de energía en tiempo de ejecución (Runtime Power
     Management) para todos los dispositivos del bus PCI(e), excepto los
     excluidos.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘tlp-configuration’:
          maybe-lista-cadena-separada-espacios runtime-pm-blacklist
     Excluye las direcciones de dispositivo PCI(e) especificadas de la
     gestión de energía en tiempo de ejecución (Runtime Power
     Management).

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: lista-cadena-separada-espacios
          runtime-pm-driver-blacklist
     Excluye los dispositivos PCI(e) asignados a los controladores
     especificados de la gestión de energía en tiempo de ejecución
     (Runtime Power Management).

 -- parámetro de ‘tlp-configuration’: boolean usb-autosuspend?
     Permite la suspensión automática de USB.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘tlp-configuration’: maybe-string usb-blacklist
     Excluye los dispositivos especificados de la suspensión automática
     de USB.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: boolean usb-blacklist-wwan?
     Excluye los dispositivos WWAN de la suspensión automática de USB.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘tlp-configuration’: maybe-string usb-whitelist
     Incluye los dispositivos especificados en la suspensión automática
     de USB, incluso cuando están excluidos por el controlador o a
     través de ‘usb-blacklist-wwan?’.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: maybe-boolean
          usb-autosuspend-disable-on-shutdown?
     Activa la suspensión automática de USB antes del apagado.

     El valor predeterminado es ‘disabled’.

 -- parámetro de ‘tlp-configuration’: boolean
          restore-device-state-on-startup?
     Restablece el estado de los dispositivos de radio (bluetooth, wifi,
     wwan) previo al apagado durante el arranque del sistema.

     El valor predeterminado es ‘#f’

Daemon Thermald
...............

El módulo ‘(gnu services pm)’ proporciona una interfaz con thermald, un
servicio de escalado de frecuencia de la CPU que ayuda a prevenir el
sobrecalentamiento.

 -- Variable Scheme: thermald-service-type
     Este es el tipo de servicio para thermald
     (https://01.org/linux-thermal-daemon/), el daemon Thermal de Linux,
     que es responsable del control del estado térmico de los
     procesadores y la prevención del sobrecalentamiento.

 -- Tipo de datos: thermald-configuration
     Tipo de datos que representa la configuración de
     ‘thermald-service-type’.

     ‘ignore-cpuid-check?’ (predeterminado: ‘#f’)
          Ignora la comprobación de cpuid durante la comprobación de
          procesadores permitidos.

     ‘thermald’ (predeterminado: THERMALD)
          El objeto paquete de thermald.


File: guix.es.info,  Node: Servicios de audio,  Next: Servicios de virtualización,  Prev: Servicios de gestión de energía,  Up: Servicios

8.8.23 Servicios de audio
-------------------------

El módulo ‘(gnu services audio)’ proporciona un servicio para iniciar
MPD (el daemon de reproducción de música).

Daemon de reproducción de música (MPD)
......................................

El daemon de reproducción de música (MPD) es un servicio que puede
reproducir música mientras se controla desde la máquina local o sobre
una red por una multitud de clientes.

   El siguiente ejemplo muestra como se puede ejecutar ‘mpd’ como
‘"rober"’ en el puerto ‘6666’. Usa pulseaudio para su salida.

     (service mpd-service-type
              (mpd-configuration
               (user "rober")
               (port "6666")))

 -- Variable Scheme: mpd-service-type
     El tipo de servicio para ‘mpd’.

 -- Tipo de datos: mpd-configuration
     Tipo de datos que representa la configuración de ‘mpd’.

     ‘user’ (predeterminada: ‘"mpd"’)
          Usuaria que ejecuta mpd.

     ‘music-dir’ (predeterminado: ‘"~/Music"’)
          El directorio para buscar ficheros de música.

     ‘playlist-dir’ (predeterminado: ‘"~/.mpd/playlists"’)
          El directorio para almacenar listas de reproducción.

     ‘db-file’ (predeterminado: ‘"~/.mpd/tag_cache"’)
          La localización de la base de datos de música.

     ‘state-file’ (predeterminado: ‘"~/.mpd/state"’)
          La localización del fichero que almacena el estado actual de
          MPD.

     ‘sticker-file’ (predeterminado: ‘"~/.mpd/sticker.sql"’)
          La localización de la base de datos de pegatinas.

     ‘port’ (predeterminado: ‘"6600"’)
          Puerto sobre el que se ejecuta mpd.

     ‘address’ (predeterminada: ‘"any"’)
          Dirección a la que mpd se asociará. Para usar un socket de
          dominio de Unix puede especificarse una ruta absoluta.

     ‘outputs’ (predeterminadas: ‘"(list (mpd-output))"’)
          Las salidas de audio que MPD puede usar. De manera
          predeterminada es una salida de audio única usando pulseaudio.

 -- Tipo de datos: mpd-output
     Tipo de datos que representa una salida de audio de ‘mpd’.

     ‘name’ (predeterminado: ‘"MPD"’)
          Nombre de la salida de audio.

     ‘type’ (predeterminado: ‘"pulse"’)
          Tipo de la salida de audio.

     ‘enabled?’ (predeterminado: ‘#t’)
          Especifica si esta salida de audio se activa cuando se inicia
          MPD. De manera predeterminada se activan todas las salidas de
          audio. Esta es la configuración predeterminada cuando no
          existe un fichero de estado; con un fichero de estado se
          restaura el estado anterior.

     ‘tags?’ (predeterminado: ‘#t’)
          Si se proporciona el valor ‘#f’ MPD no envia etiquetas a esta
          salida. Es útil únicamente para módulos de salida que pueden
          recibir etiquetas, por ejemplo el módulo de salida ‘httpd’.

     ‘always-on?’ (predeterminado: ‘#f’)
          Si se proporciona el valor ‘#t’ MPD intenta mantener abierta
          siempre esta salida de audio. Puede ser útil para servidores
          de retransmisión, donde no desea que todos los clientes se
          desconecten incluso cuando la reproducción se pare
          accidentalmente.

     ‘mixer-type’
          Este campo acepta un símbolo que especifica que mezclador debe
          usarse para esta salida de audio: el mezclador ‘hardware’, el
          mezclador ‘software’, el mezclador ‘null’ (permite manejar el
          volumen pero sin ningún efecto; puede usarse para implementar
          un mezclador externo) o ningún mezclador (‘none’).

     ‘extra-options’ (predeterminadas: ‘'()"’)
          Una lista asociativa de símbolos de opción con valores de
          cadenas que se añadirán al final de la configuración de las
          salidas de audio.

   El ejemplo siguiente muestra una configuración de ‘mpd’ que
proporciona una salida de retransmisión de audio por HTTP.

     (service mpd-service-type
              (mpd-configuration
                (outputs
                  (list (mpd-output
                          (name "streaming")
                          (type "httpd")
                          (mixer-type 'null)
                          (extra-options
                           `((encoder . "vorbis")
                             (port    . "8080"))))))))


File: guix.es.info,  Node: Servicios de virtualización,  Next: Servicios de control de versiones,  Prev: Servicios de audio,  Up: Servicios

8.8.24 Servicios de virtualización
----------------------------------

El módulo ‘(gnu services virtualization)’ proporciona servicios para los
daemon libvirt y virtlog, así como otros servicios relacionados con la
virtualización.

Daemon de Libvirt
.................

‘libvirtd’ es un daemon del que se compone el lado del servidor del
sistema de gestión de virtualización libvirt. Este daemon se ejecuta en
las máquinas servidoras y realiza las tareas de gestión necesarias para
los sistemas virtualizados.

 -- Variable Scheme: libvirt-service-type
     Este es el tipo para el daemon de libvirt (https://libvirt.org). Su
     valor debe ser un objeto ‘libvirt-configuration’.

          (service libvirt-service-type
                   (libvirt-configuration
                    (unix-sock-group "libvirt")
                    (tls-port "16555")))

   Los campos disponibles de ‘libvirt-configuration’ son:

 -- parámetro de ‘libvirt-configuration’: package libvirt
     Paquete libvirt.

 -- parámetro de ‘libvirt-configuration’: boolean listen-tls?
     Opción para la escucha de conexiones seguras TLS en el puerto
     TCP/IP público. Debe haberse proporcionado valor a ‘listen’ para
     que tenga algún efecto.

     Es necesario configurar una autoridad de certificación (CA) y
     emitir certificados de servidor antes de usar esta característica.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘libvirt-configuration’: boolean listen-tcp?
     Escucha de conexiones TCP sin cifrar en el puerto TCP/IP público.
     Debe haberse proporcionado valor a ‘listen’ para que tenga algún
     efecto.

     El uso del socket TCP necesita de manera predeterminada
     identificación SASL. Únicamente se permiten mecanismos SASL que
     implementen cifrado de datos. Estos son DIGEST_MD5 y GSSAPI
     (Kerberos5).

     El valor predeterminado es ‘#f’

 -- parámetro de ‘libvirt-configuration’: string tls-port
     Puerto en el que se aceptan conexiones seguras. Puede ser un número
     de puerto o un nombre de servicio.

     El valor predeterminado es ‘"16514"’.

 -- parámetro de ‘libvirt-configuration’: string tcp-port
     Puerto en el que se aceptan conexiones inseguras. Puede ser un
     número de puerto o un nombre de servicio.

     El valor predeterminado es ‘"16509"’.

 -- parámetro de ‘libvirt-configuration’: string listen-addr
     Dirección IP o nombre de máquina usado para las conexiones de
     clientes.

     El valor predeterminado es ‘"0.0.0.0"’.

 -- parámetro de ‘libvirt-configuration’: boolean mdns-adv?
     Opción que determina el anuncio mDNS del servicio libvirt.

     De manera alternativa puede desactivarse para todos los servicios
     en una máquina parando el daemon Avahi.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘libvirt-configuration’: string mdns-name
     Nombre predeterminado del anuncio mDNS. Debe ser único en la red de
     distribución inmediata.

     El valor predeterminado es ‘"Virtualization Host <hostname>"’.<

 -- parámetro de ‘libvirt-configuration’: string unix-sock-group
     Grupo propietario del socket de dominio de UNIX. Puede usarse para
     permitir a un conjunto de usuarias “de confianza” acceso a las
     funcionalidades de gestión sin convertirse en root.

     El valor predeterminado es ‘"root"’.

 -- parámetro de ‘libvirt-configuration’: string unix-sock-ro-perms
     Permisos del socket UNIX de sólo lectura(1). Se usa únicamente para
     monitorizar el estado de las máquinas virtuales.

     El valor predeterminado es ‘"0777"’.

 -- parámetro de ‘libvirt-configuration’: string unix-sock-rw-perms
     Permisos del socket UNIX de lectura/escritura(2). El valor
     predeterminado únicamente permite acceso a root. Si PolicyKit se
     encuentra activo en el socket, el valor predeterminado cambiará
     para permitir acceso universal (es decir, 0777).

     El valor predeterminado es ‘"0770"’.

 -- parámetro de ‘libvirt-configuration’: string unix-sock-admin-perms
     Permisos del socket UNIX de administración. El valor predeterminado
     únicamente permite acceso a la propietaria (root), no lo cambie a
     menos que esté completamente segura de a quién expone el acceso.

     El valor predeterminado es ‘"0777"’.

 -- parámetro de ‘libvirt-configuration’: string unix-sock-dir
     Directorio en el que los sockets se encuentran/crean.

     El valor predeterminado es ‘"/var/run/libvirt"’.

 -- parámetro de ‘libvirt-configuration’: string auth-unix-ro
     Esquema de identificación para los sockets de solo-lectura de UNIX.
     Los permisos predeterminados del socket permiten la conexión de
     cualquier usuaria.

     El valor predeterminado es ‘"polkit"’.

 -- parámetro de ‘libvirt-configuration’: string auth-unix-rw
     Esquema de identificación para los sockets de lectura/escritura de
     UNIX. Los permisos predeterminados del socket permiten la conexión
     únicamente a root. Si se activó en la compilación de libvirt la
     interoperabilidad con PolicyKit, el valor predeterminado es usar la
     identificación “policykit”.

     El valor predeterminado es ‘"polkit"’.

 -- parámetro de ‘libvirt-configuration’: string auth-tcp
     Esquema de identificación para los sockets TCP. Si no activa SASL,
     todo el tráfico TCP estará en texto plano. No lo haga más allá de
     un escenario de desarrollo/pruebas.

     El valor predeterminado es ‘"sasl"’.

 -- parámetro de ‘libvirt-configuration’: string auth-tls
     Esquema de identificación para los sockets TLS. Los sockets TLS ya
     se encuentran cifrados gracias a la capa TLS, y una identificación
     limitada se realiza con los certificados.

     También es posible hacer uso de cualquier mecanismo de
     identificación SASL proporcionando “sasl” en esta opción.

     El valor predeterminado es ‘"none"’.

 -- parámetro de ‘libvirt-configuration’: lista-opcional access-drivers
     Esquema de la API de control de acceso.

     De manera predeterminada una usuaria identificada puede acceder a
     todas las API. Los controladores de acceso pueden incluir
     restricciones de acceso sobre ello.

     El valor predeterminado es ‘()’.

 -- parámetro de ‘libvirt-configuration’: string key-file
     Ruta del fichero con la clave del servidor. Si se proporciona una
     cadena vacía, no se carga ninguna clave privada.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘libvirt-configuration’: string cert-file
     Ruta del fichero con la clave del servidor. Si se proporciona una
     cadena vacía, no se carga ningún certificado.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘libvirt-configuration’: string ca-file
     Ruta del fichero con la clave del servidor. Si se proporciona una
     cadena vacía, no se carga ningún certificado de CA.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘libvirt-configuration’: string crl-file
     Ruta de la lista de revocaciones de certificado. Si se proporciona
     una cadena vacía, no se carga ninguna lista.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘libvirt-configuration’: boolean tls-no-sanity-cert
     Desactiva la verificación de los propios certificados del servidor.

     Cuando libvirtd arranca, realiza algunas comprobaciones básicas
     sobre sus propios certificados.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘libvirt-configuration’: boolean tls-no-verify-cert
     Desactiva la verificación de certificados de clientes.

     La verificación de certificados de cliente es el mecanismo primario
     de identificación. Se rechazará cualquier cliente que no presente
     un certificado firmado por la autoridad de certificación (CA).

     El valor predeterminado es ‘#f’

 -- parámetro de ‘libvirt-configuration’: lista-opcional
          tls-allowed-dn-list
     Lista de nombres distinguidos (DN) x509 permitidos.

     El valor predeterminado es ‘()’.

 -- parámetro de ‘libvirt-configuration’: lista-opcional
          sasl-allowed-usernames
     Lista de nombres de usuaria SASL permitidos. El formato para el
     nombre de la usuaria depende del mecanismo de identificación SASL.

     El valor predeterminado es ‘()’.

 -- parámetro de ‘libvirt-configuration’: string tls-priority
     Override the compile time default TLS priority string. The default
     is usually ‘"NORMAL"’ unless overridden at build time. Only set
     this is it is desired for libvirt to deviate from the global
     default settings.

     El valor predeterminado es ‘"NORMAL"’.

 -- parámetro de ‘libvirt-configuration’: integer max-clients
     Número máximo de conexiones concurrentes de clientes permitidas en
     todos los sockets combinados.

     El valor predeterminado es ‘5000’.

 -- parámetro de ‘libvirt-configuration’: integer max-queued-clients
     Longitud máxima de la cola de conexiones a la espera de ser
     aceptadas por el daemon. Fíjese que algunos protocolos que
     implementan la retransmisión pueden obedecer esto de manera que un
     intento posterior de conexión tenga éxito.

     El valor predeterminado es ‘1000’.

 -- parámetro de ‘libvirt-configuration’: integer max-anonymous-clients
     Longitud máxima de la cola de clientes aceptados pero no
     identificados todavía. Proporcione el valor cero para desactivar
     esta característica.

     El valor predeterminado es ‘20’.

 -- parámetro de ‘libvirt-configuration’: integer min-workers
     Número de procesos de trabajo que se lanzarán inicialmente.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘libvirt-configuration’: integer max-workers
     Número máximo de hilos de trabajo.

     Si el número de clientes excede ‘min-workers’, se lanzan más hilos,
     hasta el límite ‘max-workers’. Habitualmente se desea que
     ‘max-workers’ sea igual al número máximo de clientes permitido.

     El valor predeterminado es ‘20’.

 -- parámetro de ‘libvirt-configuration’: integer prio-workers
     Número de procesos de trabajo prioritarios. Si todos los hilos de
     trabajo del conjunto previo se encuentran bloqueados, algunas
     llamadas marcadas como de alta prioridad (notablemente
     domainDestroy) pueden ejecutarse en este conjunto de hilos.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘libvirt-configuration’: integer max-requests
     Límite global total de llamadas RPC concurrentes.

     El valor predeterminado es ‘20’.

 -- parámetro de ‘libvirt-configuration’: integer max-client-requests
     Límite de peticiones concurrentes desde una única conexión de
     cliente. Para evitar que un cliente monopolice el servidor esto
     debe ser una pequeña fracción de los parámetros globales
     “max_requests” y “max_workers”.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘libvirt-configuration’: integer admin-min-workers
     Igual que ‘min-workers’ pero para la interfaz de administración.

     El valor predeterminado es ‘1’.

 -- parámetro de ‘libvirt-configuration’: integer admin-max-workers
     Igual que ‘max-workers’ pero para la interfaz de administración.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘libvirt-configuration’: integer admin-max-clients
     Igual que ‘max-clients’ pero para la interfaz de administración.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘libvirt-configuration’: integer
          admin-max-queued-clients
     Igual que ‘max-queued-clients’ pero para la interfaz de
     administración.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘libvirt-configuration’: integer
          admin-max-client-requests
     Igual que ‘max-client-requests’ pero para la interfaz de
     administración.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘libvirt-configuration’: integer log-level
     Nivel de registro. 4 errores, 3 avisos, 2 información, 1
     depuración.

     El valor predeterminado es ‘3’.

 -- parámetro de ‘libvirt-configuration’: string log-filters
     Filtros del registro.

     Un filtro permite la selección de un nivel de registro diferente
     para una categoría dada de registros. El formato del filtro es uno
     de los siguientes:

        • x:nombre

        • x:+nombre

     where ‘name’ is a string which is matched against the category
     given in the ‘VIR_LOG_INIT()’ at the top of each libvirt source
     file, e.g., ‘"remote"’, ‘"qemu"’, or ‘"util.json"’ (the name in the
     filter can be a substring of the full category name, in order to
     match multiple similar categories), the optional ‘"+"’ prefix tells
     libvirt to log stack trace for each message matching name, and ‘x’
     is the minimal level where matching messages should be logged:

        • 1: DEBUG (depuración)

        • 2: INFO (información)

        • 3: WARNING (aviso)

        • 4: ERROR

     Se pueden definir en una única sentencia múltiples filtros,
     únicamente hace falta separarlos por espacios.

     El valor predeterminado es ‘"3:remote 4:event"’.

 -- parámetro de ‘libvirt-configuration’: string log-outputs
     Salidas de log.

     Una salida es uno de esos lugares para almacenar información de
     logging. El formato para una salida puede ser:

     ‘x:stderr’
          la salida va a stderr

     ‘x:syslog:nombre’
          usa syslog para la salida y usa el nombre proporcionado como
          identificador

     ‘x:file:ruta_fichero’
          encamina la salida a un fichero, con la ruta proporcionada

     ‘x:journald’
          usa el sistema de logging journald

     En todos los casos el prefijo x es el nivel mínimo, que actúa como
     filtro

        • 1: DEBUG (depuración)

        • 2: INFO (información)

        • 3: WARNING (aviso)

        • 4: ERROR

     Se pueden definir salidas múltiples, únicamente deben separarse por
     espacios.

     El valor predeterminado es ‘"3:stderr"’.

 -- parámetro de ‘libvirt-configuration’: integer audit-level
     Permite la alteración del uso del sistema de auditoría.

        • 0: desactiva la auditoría

        • 1: activa la auditoría, únicamente si está activado en la
          máquina

        • 2: activa la auditoría, y sale si está desactivada en la
          máquina.

     El valor predeterminado es ‘1’.

 -- parámetro de ‘libvirt-configuration’: boolean audit-logging
     Envía los mensajes de auditoría a través de la infraestructura de
     registro de libvirt.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘libvirt-configuration’: string-opcional host-uuid
     UUID de la máquina anfitriona. No pueden ser iguales todos los
     dígitos del UUID.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘libvirt-configuration’: string host-uuid-source
     Fuente de lectura del UUID de la máquina anfitriona.

        • ‘smbios’: obtiene el UUID de ‘dmidecode -s system-uuid’

        • ‘machine-id’: obtiene el UUID de ‘/etc/machine-id’

     Si ‘dmidecode’ no proporciona un UUID válido, se generará un UUID
     temporal.

     El valor predeterminado es ‘"smbios"’.

 -- parámetro de ‘libvirt-configuration’: integer keepalive-interval
     Un mensaje “keepalive” se envía al cliente tras
     ‘keepalive_interval’ segundos de inactividad para comprobar si el
     cliente todavía responde. Si se proporciona el valor -1, libvirtd
     nunca enviará peticiones “keepalive”; no obstante los clientes
     todavía pueden mandarlas y el daemon enviará las respuestas.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘libvirt-configuration’: integer keepalive-count
     Número máximo de mensajes “keepalive” que se permite enviar a un
     cliente sin obtener respuesta antes de considerar que se ha roto la
     conexión.

     En otras palabras, la conexión se cierra automáticamente tras
     ‘keepalive_interval * (keepalive_count + 1)’ segundos tras la
     última recepción de un mensaje desde el cliente. Cuando
     ‘keepalive_count’ tiene valor 0, las conexiones se cerrarán
     automáticamente tras ‘keepalive-interval’ segundos de inactividad
     sin mandar ningún mensaje “keepalive”.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘libvirt-configuration’: integer
          admin-keepalive-interval
     Igual que la opción anterior pero para la interfaz de
     administración.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘libvirt-configuration’: integer admin-keepalive-count
     Igual que la opción anterior pero para la interfaz de
     administración.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘libvirt-configuration’: integer ovs-timeout
     Plazo máximo para las llamadas a Open vSwitch.

     La utilidad ‘ovs-vsctl’ se usa para la configuración y su opción de
     plazo máximo (timeout) tiene un valor de 5 segundos de manera
     predeterminada para evitar que esperas potencialmente infinitas
     bloqueen libvirt.

     El valor predeterminado es ‘5’.

Daemon Virtlog
..............

El servicio virtlogd es un daemon del que se compone el lado servidor de
libvirt cuya finalidad es la gestión del registro de las consolas de las
máquinas virtuales.

   Este daemon no se usa directamente en aplicaciones cliente de
libvirt, sino que ‘libvirtd’ lo invoca en su nombre. Al mantener los
registros en un daemon independiente, el daemon ‘libvirtd’ puede
reiniciarse sin correr el riesgo de perder registros. El daemon
‘virtlogd’ tiene la capacidad de ejecutar exec() sobre sí mismo al
recibir ‘SIGUSR1’, para permitir actualizaciones en vivo sin tiempo de
parada.

 -- Variable Scheme: virtlog-service-type
     Este es el tipo del daemon virtlog. Su valor debe ser un objeto
     ‘virtlog-configuration’.

          (service virtlog-service-type
                   (virtlog-configuration
                    (max-clients 1000)))

 -- parámetro de ‘virtlog-configuration’: integer log-level
     Nivel de registro. 4 errores, 3 avisos, 2 información, 1
     depuración.

     El valor predeterminado es ‘3’.

 -- parámetro de ‘virtlog-configuration’: string log-filters
     Filtros del registro.

     Un filtro permite la selección de un nivel de registro diferente
     para una categoría dada de registros. El formato del filtro es uno
     de los siguientes:

        • x:nombre

        • x:+nombre

     donde ‘nombre’ es una cadena contra la que se compara la categoría
     proporcionada en la llamada ‘VIR_LOG_INIT()’ al principio de cada
     fichero de fuentes de libvirt, por ejemplo "remote", "qemu" o
     "util.json" (el nombre en el filtro puede ser una subcadena del
     nombre completo de la categoría, para aceptar múltiples categorías
     con nombres similares), el prefijo opcional "+" indica a libvirt
     que registre la pila de llamadas en cada mensaje con el nombre
     correspondiente, y ‘x’ es el nivel mínimo de los mensajes que deben
     registrarse:

        • 1: DEBUG (depuración)

        • 2: INFO (información)

        • 3: WARNING (aviso)

        • 4: ERROR

     Se pueden definir en una única sentencia múltiples filtros,
     únicamente hace falta separarlos por espacios.

     El valor predeterminado es ‘"3:remote 4:event"’.

 -- parámetro de ‘virtlog-configuration’: string log-outputs
     Salidas de log.

     Una salida es uno de esos lugares para almacenar información de
     logging. El formato para una salida puede ser:

     ‘x:stderr’
          la salida va a stderr

     ‘x:syslog:nombre’
          usa syslog para la salida y usa el nombre proporcionado como
          identificador

     ‘x:file:ruta_fichero’
          encamina la salida a un fichero, con la ruta proporcionada

     ‘x:journald’
          usa el sistema de logging journald

     En todos los casos el prefijo x es el nivel mínimo, que actúa como
     filtro

        • 1: DEBUG (depuración)

        • 2: INFO (información)

        • 3: WARNING (aviso)

        • 4: ERROR

     Se pueden definir salidas múltiples, únicamente deben separarse por
     espacios.

     El valor predeterminado es ‘"3:stderr"’.

 -- parámetro de ‘virtlog-configuration’: integer max-clients
     Número máximo de conexiones concurrentes de clientes permitidas en
     todos los sockets combinados.

     El valor predeterminado es ‘1024’.

 -- parámetro de ‘virtlog-configuration’: integer max-size
     Tamaño máximo del fichero antes de pasar al siguiente.

     El valor predeterminado es ‘2MB’.

 -- parámetro de ‘virtlog-configuration’: integer max-backups
     Número máximo de ficheros de backup que se deben mantener.

     El valor predeterminado es ‘3’.

Emulación transparente con QEMU
...............................

‘qemu-binfmt-service-type’ proporciona la capacidad de emular
transparentemente programas binarios construidos para arquitecturas
diferentes—por ejemplo, le permite ejecutar de manera transparente un
programa de ARMv7 en una máquina x86_64. Esto se consigue mediante la
combinación del emulador QEMU (https://www.qemu.org) y la característica
‘binfmt_misc’ del núcleo Linux.

 -- Variable Scheme: qemu-binfmt-service-type
     Este es el tipo del servicio de emulación transparente QEMU/binfmt.
     Su valor debe ser un objeto ‘qemu-binfmt-configuration’, que
     especifica el paquete QEMU usado así como las arquitecturas que se
     desean emular:

          (service qemu-binfmt-service-type
                   (qemu-binfmt-configuration
                     (platforms (lookup-qemu-platforms "arm" "aarch64"))))

     En este ejemplo se activa la emulación transparente para las
     plataformas ARM y aarch64. La ejecución de ‘herd stop qemu-binfmt’
     la desactiva, y la ejecución de ‘herd start qemu-binfmt’ la vuelve
     a activar (*note the ‘herd’ command: (shepherd)Invoking herd.).

 -- Tipo de datos: qemu-binfmt-configuration
     Esta es la configuración para el servicio ‘qemu-binfmt’.

     ‘platforms’ (predeterminadas: ‘'()’)
          Lista de plataformas de QEMU emuladas. Cada elemento debe ser
          un “objeto de plataforma” como los devueltos por
          ‘lookup-qemu-platforms’ (véase a continuación).

     ‘guix-support?’ (predeterminado: ‘#f’)
          When it is true, QEMU and all its dependencies are added to
          the build environment of ‘guix-daemon’ (*note
          ‘--chroot-directory’ option: Invocación de guix-daemon.). This
          allows the ‘binfmt_misc’ handlers to be used within the build
          environment, which in turn means that you can transparently
          build programs for another architecture.

          Por ejemplo, supongamos que está en una máquina x86_64 y tiene
          este servicio:

               (service qemu-binfmt-service-type
                        (qemu-binfmt-configuration
                          (platforms (lookup-qemu-platforms "arm"))
                          (guix-support? #t)))

          Puede ejecutar:

               guix build -s armhf-linux inkscape

          Y construirá Inkscape para ARMv7 _como si fuese una
          construcción nativa_, de manera transparente mediante el uso
          de QEMU para emular la CPU ARMv7. ¡Muy útil si quisiera probar
          la construcción de un paquete en una arquitectura a la que no
          tenga acceso!

     ‘qemu’ (predeterminado: ‘qemu’)
          El paquete QEMU usado.

 -- Procedimiento Scheme: lookup-qemu-platforms PLATAFORMAS...
     Devuelve la lista de objetos de plataforma de QEMU que corresponden
     a PLATAFORMAS.... PLATAFORMAS debe ser una lista de cadenas que
     correspondan con nombres de plataforma, como ‘"arm"’, ‘"sparc"’,
     ‘"mips64el"’, etcétera.

 -- Procedimiento Scheme: qemu-platform? OBJ
     Devuelve verdadero si OBJ es un objeto de plataforma.

 -- Procedimiento Scheme: qemu-platform-name PLATAFORMA
     Devuelve el nombre de PLATAFORMA—una cadena como ‘"arm"’.

   ---------- Footnotes ----------

   (1) R/O: Read-Only en inglés.

   (2) R/W: Read-Write en inglés.


File: guix.es.info,  Node: Servicios de control de versiones,  Next: Servicios de juegos,  Prev: Servicios de virtualización,  Up: Servicios

8.8.25 Servicios de control de versiones
----------------------------------------

El módulo ‘(gnu services version-control)’ proporciona un servicio para
permitir el acceso remoto a repositorios Git locales. Existen tres
opciones: el servicio ‘git-daemon-service’, que proporciona acceso a
repositorios a través del protocolo inseguro basado en TCP ‘git://’, la
extensión del servidor web ‘nginx’ para redirigir algunas peticiones al
motor ‘git-http-backend’, o una interfaz web proporcionada por el
servicio ‘cgit-service-type’.

 -- Procedimiento Scheme: git-daemon-service [#:config
          (git-daemon-configuration)]

     Devuelve un servicio que ejecuta ‘git daemon’, un servidor TCP
     simple para exponer repositorios con el protocolo Git para acceso
     anónimo.

     The optional CONFIG argument should be a
     ‘<git-daemon-configuration>’ object, by default it allows read-only
     access to exported(1) repositories under ‘/srv/git’.

 -- Tipo de datos: git-daemon-configuration
     Tipo de datos que representa la configuración para
     ‘git-daemon-service’.

     ‘package’ (predeterminado: GIT)
          El objeto paquete del sistema distribuido de control de
          versiones Git.

     ‘export-all?’ (predeterminado: #F)
          Determina si se permite el acceso a todos los repositorios
          Git, incluso si no tienen el fichero ‘git-daemon-export-ok’.

     ‘base-path’ (predeterminado: ‘/srv/git’)
          Determina si se traducirán todas las rutas de las peticiones
          como relativas a la ruta proporcionada. Si se encuentra en
          ejecución el daemon de git con (BASE-PATH "/SRV/GIT" en
          example.com, al realizar la solicitud de
          ‘git://example.com/hello.git’, el daemon de git interpretará
          la ruta como ‘/srv/git/hello.git’.

     ‘user-path’ (predeterminado: #F)
          Determina si se permite el uso de la notación ‘~user’ en las
          peticiones. Si se especifica una cadena vacía, una peticione
          de ‘git://máquina/~alicia/algo’ se tomará como una petición de
          acceso al repositorio ‘algo’ en el directorio de la usuaria
          ‘alicia’. Si se especifica (USER-PATH "RUTA"), la misma
          petición se traducirá en una petición de acceso al repositorio
          ‘ruta/algo’ en el directorio de la usuaria ‘alicia’.

     ‘listen’ (predeterminado: ’())
          Determina si se debe escuchar en direcciones IP o nombres de
          máquina específicos, de manera predeterminada escucha en
          cualquiera.

     ‘port’ (predeterminado: #F)
          Determina si se escucha en un puerto alternativo, cuyo valor
          predeterminado es 9418.

     ‘whitelist’ (predeterminado: ’())
          Si no está vacío, únicamente permite el acceso a esta lista de
          directorios.

     ‘extra-options’ (predeterminadas: ’())
          Opciones adicionales que se proporcionan a ‘git daemon’, para
          obtener más información le rogamos que ejecute ‘man
          git-daemon’.

   El protocolo ‘git://’ carece de verificación. Cuando se obtienen
datos de un repositorio a través del protocolo ‘git://’, no puede tener
plena confianza en que los datos que reciba procedan realmente de la
máquina que ha indicado, y su conexión puede estar sujeta a
interceptaciones. Es mejor usar un transporte verificado y cifrado, como
‘https’. Aunque Git le permite servir repositorios usando servidores web
poco sofisticados basados en ficheros, existe un protocolo más rápido
implementado en el programa ‘git-http-backend’. Este programa es el
motor de un servicio web de Git adecuado. Está diseñado para ejecutarse
tras FastCGI. *Note Servicios Web::, para más información sobre la
ejecución del daemon ‘fcgiwrap’ necesario.

   Guix tiene un tipo de datos de configuración distinto para
proporcionar repositorios Git sobre HTTP.

 -- Tipo de datos: git-http-configuration
     Data type representing the configuration for a future
     ‘git-http-service-type’; can currently be used to configure Nginx
     trough ‘git-http-nginx-location-configuration’.

     ‘package’ (predeterminado: GIT)
          El objeto paquete del sistema distribuido de control de
          versiones Git.

     ‘git-root’ (predeterminada: ‘/srv/git’)
          Directorio que contiene los repositorios Git que se expondrán
          al mundo.

     ‘export-all?’ (predeterminado: #F)
          Determina si se expondrá el acceso a todos los repositorios en
          GIT-ROOT, incluso si no contienen el fichero
          ‘git-daemon-export-ok’.

     ‘uri-path’ (predeterminada: ‘/git/’)
          Prefijo de la ruta del acceso de Git. Con el prefijo
          predeterminado ‘/git/’, ‘http://SERVIDOR/git/REPOSITORIO.git’
          se traducirá en ‘/srv/git/REPOSITORIO.git’. Las peticiones
          cuyas rutas URI no comiencen con dicho prefijo no se pasan a
          esta instancia de Git.

     ‘fcgiwrap-socket’ (predeterminado: ‘127.0.0.1:9000’)
          Socket en el que el daemon ‘fcgiwrap’ escucha. *Note Servicios
          Web::.

   No existe actualmente ‘git-http-service-type’; en vez de eso puede
crear una configuración ‘nginx-location-configuration’ desde
‘git-http-configuration’ y añadir dicha configuración al servidor web.

 -- Procedimiento Scheme: git-http-nginx-location-configuration
          [config=(git-http-configuration)]
     Calcula una configuración ‘nginx-location-configuration’ que
     corresponde con la configuración http de Git proporcionada. Un
     ejemplo de definición de servicio nginx que ofrece el directorio
     predeterminado ‘/srv/git’ sobre HTTPS podría ser:

          (service nginx-service-type
                   (nginx-configuration
                    (server-blocks
                     (list
                      (nginx-server-configuration
                       (listen '("443 ssl"))
                       (server-name "git.mi-maquina.org")
                       (ssl-certificate
                        "/etc/letsencrypt/live/git.mi-maquina.org/fullchain.pem")
                       (ssl-certificate-key
                        "/etc/letsencrypt/live/git.mi-maquina.org/privkey.pem")
                       (locations
                        (list
                         (git-http-nginx-location-configuration
                          (git-http-configuration (uri-path "/"))))))))))

     Este ejemplo asume que usa Let’s Encrypt para obtener su
     certificado TLS. *Note Servicios de certificados::. El servicio
     predeterminado ‘certbot’ redirigirá todo el tráfico HTTP en
     ‘git.mi-maquina.org’ hacia HTTPS. También necesitará añadir
     ‘fcgiwrap’ a sus servicios del sistema. *Note Servicios Web::.

Servicio Cgit
.............

Cgit (https://git.zx2c4.com/cgit/) es un servidor de fachada para
repositiorios Git escrito en C.

   El ejemplo siguiente configura el servicio con los valores
predeterminados. Por omisión, se puede acceder a Cgit en el puerto 80
(‘http://localhost:80’).

     (service cgit-service-type)

   El tipo ‘file-object’ designa o bien un objeto “tipo-fichero” (*note
objetos “tipo-fichero”: Expresiones-G.), o bien una cadena.

   Los campos disponibles de ‘cgit-configuration’ son:

 -- parámetro de ‘cgit-configuration’: package package
     El paquete CGIT.

 -- parámetro de ‘cgit-configuration’: lista-nginx-server-configuration
          nginx
     Configuración de NGINX.

 -- parámetro de ‘cgit-configuration’: file-object about-filter
     Especifica una orden que se llamará para dar formato al contenido
     de las páginas “about” (tanto al nivel superior como cada
     repositorio).

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: string agefile
     Especifica una ruta, relativa a cada ruta de repositorio, que puede
     usarse para especificar una fecha y hora de la revisión más
     reciente del repositorio.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: file-object auth-filter
     Especifica una orden que se invocará para la validación de acceso
     al repositorio.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: string branch-sort
     Opción que, cuando tiene valor ‘age’, activa la ordenación por
     fecha en la lista de referencias de ramas, y cuando tiene valor
     ‘name’ activa la ordenación por nombre de rama.

     El valor predeterminado es ‘"name"’.

 -- parámetro de ‘cgit-configuration’: string cache-root
     Ruta usada para el almacenamiento de las entradas de caché de cgit.

     El valor predeterminado es ‘"/var/cache/cgit"’.

 -- parámetro de ‘cgit-configuration’: integer cache-static-ttl
     Número que especifica el tiempo de vida, en minutos, de la versión
     en caché de las páginas del repositiorio accedidas mediante un hash
     SHA1 fijo.

     El valor predeterminado es ‘-1’.

 -- parámetro de ‘cgit-configuration’: integer cache-dynamic-ttl
     Número que especifica el tiempo de vida, en minutos, de la versión
     en caché de las páginas del repositorio accedidas sin un hash SHA1
     fijo.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘cgit-configuration’: integer cache-repo-ttl
     Número que especifica el tiempo de vida, en minutos, de la versión
     en caché de la página de resumen del repositorio.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘cgit-configuration’: integer cache-root-ttl
     Número que especifica el tiempo de vida, en minutos, de la versión
     en caché de la página del índice de repositorios.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘cgit-configuration’: integer cache-scanrc-ttl
     Número que especifica el tiempo de vida, en minutos, para el
     resultado de la búsqueda en una ruta para repositorios Git.

     El valor predeterminado es ‘15’.

 -- parámetro de ‘cgit-configuration’: integer cache-about-ttl
     Número que especifica el tiempo de vida, en minutos, de la versión
     en caché de la página de información del repositorio.

     El valor predeterminado es ‘15’.

 -- parámetro de ‘cgit-configuration’: integer cache-snapshot-ttl
     Número que especifica el tiempo de vida, en minutos, de la versión
     en caché de las instantáneas.

     El valor predeterminado es ‘5’.

 -- parámetro de ‘cgit-configuration’: integer cache-size
     El número máximo de entradas en la caché de cgit. Cuando el valor
     es ‘0’, se desactiva el almacenamiento en caché.

     El valor predeterminado es ‘0’.

 -- parámetro de ‘cgit-configuration’: boolean case-sensitive-sort?
     Ordena los elementos en la lista del repositorio diferenciando las
     mayúsculas.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘cgit-configuration’: lista clone-prefix
     Lista de prefijos comunes que, cuando se combinen con la URL de un
     repositorio, generan una URL que permite el clonado del
     repositorio.

     El valor predeterminado es ‘()’.

 -- parámetro de ‘cgit-configuration’: lista clone-url
     Lista de plantillas ‘clone-url’.

     El valor predeterminado es ‘()’.

 -- parámetro de ‘cgit-configuration’: file-object commit-filter
     Orden ejecutada para el formato de mensajes de revisión.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: string commit-sort
     Opción que, cuando tiene valor ‘date’, activa la ordenación
     estricta por fecha en el registro histórico de revisiones, y cuando
     tiene valor ‘topo’ activa la ordenación estricta topológica.

     El valor predeterminado es ‘"git log"’.

 -- parámetro de ‘cgit-configuration’: file-object css
     URL que especifica el documento css incluido en todas las páginas
     de cgit.

     El valor predeterminado es ‘"/share/cgit/cgit.css"’.

 -- parámetro de ‘cgit-configuration’: file-object email-filter
     Especifica una orden que se llamará para dar formato a los nombres
     y las direcciones de correo electrónico de las revisoras, autoras y
     etiquetadoras con el que se representarán en varios lugares de la
     interfaz cgit.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: boolean embedded?
     Opción que, cuando tiene valor ‘#t’, hace que cgit genere un
     fragmento HTML adecuado para embeberse en otras páginas HTML.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: boolean enable-commit-graph?
     Opción que, cuando tiene el valor ‘#t’, hace que cgit imprima un
     grafo histórico de la revisión de arte ASCII a la izquierda de los
     mensajes de revisión en la página del histórico del repositorio.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: boolean enable-filter-overrides?
     Opción que, cuando tiene valor ‘#t’, permite que todas las
     configuraciones de filtros se sustituyan en los ficheros cgitrc
     específicos del repositorio.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: boolean enable-follow-links?
     Opción que, cuando tiene valor ‘#t’, permite a las usuarias seguir
     un fichero en la vista de registro (log).

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: boolean enable-http-clone?
     Si se proporciona ‘#t’, cgit actuará como un simple servidor HTTP
     para los clones de Git.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘cgit-configuration’: boolean enable-index-links?
     Opción que, cuando tiene valor ‘#t’, hace que cgit genere enlaces
     adicionales "summary" (resumen), "commit" (revisión) y "tree"
     (árbol) para cada repositorio en el índice de repositorios.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: boolean enable-index-owner?
     Opción que, cuando tiene valor ‘#t’, hace que cgit muestre la
     propietaria de cada repositorio en el índice del repositorios.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘cgit-configuration’: boolean enable-log-filecount?
     Opción que, cuando se proporciona el valor ‘#t’, hace que cgit
     imprima el número de ficheros modificados por cada revisión en la
     página de registro histórico del repositorio ("log").

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: boolean enable-log-linecount?
     Opción que, cuando se proporciona el valor ‘#t’, hace que cgit
     imprima el número de líneas añadidas y eliminadas en cada revisión
     en la página de registro histórico ("log").

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: boolean enable-remote-branches?
     Opción que, cuando se proporciona el valor ‘#t’, hace que cgit
     muestre ramas remotas en las vistas de resumen ("summary") y de
     referencias ("refs").

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: boolean enable-subject-links?
     Opción que, cuando se proporciona el valor ‘1’, hace que cgit use
     el asunto de la revisión previa como texto del enlace cuando se
     generen enlaces a revisiones previas en la vista de la revisión.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: boolean enable-html-serving?
     Opción que, cuando se proporciona el valor ‘#t’, hace que cgit use
     el asunto de la revisión previa como texto del enlace cuando se
     generen enlaces a revisiones previas en la vista de la revisión.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: boolean enable-tree-linenumbers?
     Opción que, cuando se proporciona el valor ‘#t’, hace que cgit
     genere enlaces de números de línea para los ficheros (blob) de
     texto plano impresos en la vista de árbol.

     El valor predeterminado es ‘#t’

 -- parámetro de ‘cgit-configuration’: boolean enable-git-config?
     Opción que, cuando tiene valor ‘#f’, permite que cgit use la
     configuración de Git para fijar el valor de cualquier opción
     específica del repositorio.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: file-object favicon
     URL usada para icono de los enlaces a cgit.

     El valor predeterminado es ‘"/favicon.ico"’.

 -- parámetro de ‘cgit-configuration’: string footer
     El contenido del fichero especificado con esta opción se incluirá
     literalmente en la parte inferior de todas las páginas (es decir,
     sustituye al mensaje estándar "generated by...").

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: string head-include
     El contenido del fichero especificado con esta opción se incluirá
     literalmente en la sección HEAD de HTML en todas las páginas.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: string header
     El contenido del fichero especificado con esta opción se incluirá
     literalmente en la parte superior de todas las páginas.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: file-object include
     Nombre de un fichero de configuración que debe incluirse antes de
     procesar el resto del fichero de configuración actual.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: string index-header
     El contenido del fichero especificado en esta opción se incluirá
     literalmente sobre el índice de repositorios.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: string index-info
     El contenido del fichero especificado con esta opción se incluirá
     de manera literal bajo la cabecera en la página de índice del
     repositorio.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: boolean local-time?
     Opción que, cuando tiene valor ‘#t’, hace que cgit imprima las
     fechas de revisión y etiqueta en la zona horaria del servidor.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: file-object logo
     URL que especifica la fuente de una imagen usada como logo en todas
     las páginas de cgit.

     El valor predeterminado es ‘"/share/cgit/cgit.png"’.

 -- parámetro de ‘cgit-configuration’: string logo-link
     URL que se carga al pulsar la imagen del logo de cgit.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: file-object owner-filter
     Orden que se ejecuta para dar formato a la columna de propietaria
     (Owner) de la página principal.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: integer max-atom-items
     Número de elementos a mostrar en la vista de “atom feeds”.

     El valor predeterminado es ‘10’.

 -- parámetro de ‘cgit-configuration’: integer max-commit-count
     Número de entradas a mostrar por página en la vista del registro
     histórico ("log").

     El valor predeterminado es ‘50’.

 -- parámetro de ‘cgit-configuration’: integer max-message-length
     Número de caracteres del mensaje de la revisión a mostrar en la
     vista del registro histórico ("log").

     El valor predeterminado es ‘80’.

 -- parámetro de ‘cgit-configuration’: integer max-repo-count
     Especifica el número de entradas a mostrar por página en la página
     de índice de repositorios.

     El valor predeterminado es ‘50’.

 -- parámetro de ‘cgit-configuration’: integer max-repodesc-length
     Especifica el número máximo de caracteres mostrados en la
     descripción del repositorio en la página del índice de
     repositorios.

     El valor predeterminado es ‘80’.

 -- parámetro de ‘cgit-configuration’: integer max-blob-size
     Especifica el tamaño máximo de un fichero (blob) para mostrarlo en
     HTML en kilobytes.

     El valor predeterminado es ‘0’.

 -- parámetro de ‘cgit-configuration’: string max-stats
     Periodo estadístico máximo. Son valores aceptados ‘week’, ‘month’,
     ‘quarter’ and ‘year’.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: mimetype-alist mimetype
     Tipo MIME para la extensión de fichero especificada.

     El valor predeterminado es ‘((gif "image/gif") (html "text/html")
     (jpg "image/jpeg") (jpeg "image/jpeg") (pdf "application/pdf") (png
     "image/png") (svg "image/svg+xml"))’.

 -- parámetro de ‘cgit-configuration’: file-object mimetype-file
     Especifica el fichero usado para la búsqueda automática de tipos
     MIME.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: string module-link
     Texto que se usará como la cadena de formato para un enlace cuando
     un submódulo se imprime en el listado del directorio.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: boolean nocache?
     Si se proporciona el valor ‘#t’, se desactiva la caché.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: boolean noplainemail?
     Si se proporciona ‘#t’, se desactiva la impresión de direcciones de
     correo completas de las autoras.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: boolean noheader?
     Opción que, cuando tiene valor ‘#t’, hace que cgit omita la
     cabecera estándar en todas las páginas.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: lista-proyectos project-list
     Una lista de subdirectorios dentro de ‘repository-directory’,
     relativa a él, que debe cargarse como repositorios Git. La lista
     vacía significa que se cargarán todos los subdirectorios.

     El valor predeterminado es ‘()’.

 -- parámetro de ‘cgit-configuration’: file-object readme
     Texto usado como valor predeterminado para ‘cgit-repo-readme’.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: boolean remove-suffix?
     Si se proporciona ‘#t’ y ‘repository-directory’ está activo, si se
     encuentra algún repositorio con el sufijo ‘.git’, se elimina dicho
     sufijo de la URL y del nombre.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: integer renamelimit
     Número máximo de ficheros considerados durante la detección de
     renombrados.

     El valor predeterminado es ‘-1’.

 -- parámetro de ‘cgit-configuration’: string repository-sort
     La forma de ordenar los repositorios de cada sección.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: lista-robots robots
     Texto usado como contenido de la meta-etiqueta ‘robots’.

     El valor predeterminado es ‘("noindex" "nofollow")’.

 -- parámetro de ‘cgit-configuration’: string root-desc
     Texto impreso bajo la cabecera en la página de índice del
     repositorio.

     El valor predeterminado es ‘"a fast webinterface for the git
     dscm"’.<

 -- parámetro de ‘cgit-configuration’: string root-readme
     The content of the file specified with this option will be included
     verbatim below the “about” link on the repository index page.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: string root-title
     Texto impreso como cabecera en la página de índice del repositorio.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: boolean scan-hidden-path
     If set to ‘#t’ and repository-directory is enabled,
     repository-directory will recurse into directories whose name
     starts with a period. Otherwise, repository-directory will stay
     away from such directories, considered as “hidden”. Note that this
     does not apply to the ‘.git’ directory in non-bare repos.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: lista snapshots
     Texto que especifica el conjunto predeterminado de formatos de
     instantánea para los que cgit genera enlaces.

     El valor predeterminado es ‘()’.

 -- parámetro de ‘cgit-configuration’: directorio-repositorio
          repository-directory
     Nombre del directorio en el que se buscarán repositorios
     (representa ‘scan-path’).

     El valor predeterminado es ‘"/srv/git"’.

 -- parámetro de ‘cgit-configuration’: string section
     Nombre actual de la sección de repositorios - todos los
     repositorios definidos tras esta opción heredarán el nombre actual
     de sección.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: string section-sort
     Opción que, cuando tiene valor ‘1’, ordenará las secciones en el
     listado de repositorios por nombre.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: integer section-from-path
     Número que, si se define antes de repository-directory, especifica
     cuantos elementos de ruta de cada ruta de repositorio se usarán
     como nombre de sección predeterminado.

     El valor predeterminado es ‘0’.

 -- parámetro de ‘cgit-configuration’: boolean side-by-side-diffs?
     Si se proporciona el valor ‘#t’ se muestran las diferencias lado a
     lado en vez de usar el formato universal de manera predeterminada.

     El valor predeterminado es ‘#f’

 -- parámetro de ‘cgit-configuration’: file-object source-filter
     Especifica la orden que se ejecutará para dar formato a los
     ficheros (blob) de texto plano en la vista de árbol.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: integer summary-branches
     Specifies the number of branches to display in the repository
     “summary” view.

     El valor predeterminado es ‘10’.

 -- parámetro de ‘cgit-configuration’: integer summary-log
     Specifies the number of log entries to display in the repository
     “summary” view.

     El valor predeterminado es ‘10’.

 -- parámetro de ‘cgit-configuration’: integer summary-tags
     Specifies the number of tags to display in the repository “summary”
     view.

     El valor predeterminado es ‘10’.

 -- parámetro de ‘cgit-configuration’: string strict-export
     Nombre de fichero que, en caso de especificarse, debe estar
     presente en el repositiorio para que se permita el acceso de cgit a
     dicho repositorio.

     El valor predeterminado es ‘""’.

 -- parámetro de ‘cgit-configuration’: string virtual-root
     URL que, en caso de especificarse, se usará como raíz de todos los
     enlaces de cgit.

     El valor predeterminado es ‘"/"’.

 -- parámetro de ‘cgit-configuration’:
          lista-repository-cgit-configuration repositories
     Lista de registros “cgit-repo” usados con la configuración.

     El valor predeterminado es ‘()’.

     Los campos disponibles de ‘repository-cgit-configuration’ son:

      -- parámetro de ‘repository-cgit-configuration’: repo-list
               snapshots
          Una máscara de los formatos de instantánea para este
          repositorio para los que cgit genera enlaces, restringida por
          la opción de configuración global ‘snapshots’.

          El valor predeterminado es ‘()’.

      -- parámetro de ‘repository-cgit-configuration’: repo-file-object
               source-filter
          Sustituye al valor predeterminado de ‘source-filter’.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string url
          La URL relativa usada para el acceso al repositorio.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-file-object
               about-filter
          Sustituye al valor predeterminado de ‘about-filter’.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string
               branch-sort
          Cuando se proporciona el valor ‘age’, activa la ordenación por
          fecha en la lista de referencias de ramas, y cuando se
          proporciona ‘name’ se activa la ordenación por nombre de rama.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-list
               clone-url
          Una lista de URL que se pueden usar para clonar el
          repositorio.

          El valor predeterminado es ‘()’.

      -- parámetro de ‘repository-cgit-configuration’: repo-file-object
               commit-filter
          Sustituye al valor predeterminado de ‘commit-filter’.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string
               commit-sort
          Opción que, cuando tiene valor ‘date’, activa la ordenación
          estricta por fecha en el registro histórico de revisiones, y
          cuando tiene valor ‘topo’ activa la ordenación estricta
          topológica.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string
               defbranch
          The name of the default branch for this repository. If no such
          branch exists in the repository, the first branch name (when
          sorted) is used as default instead. By default branch pointed
          to by HEAD, or “master” if there is no suitable HEAD.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string desc
          El valor a mostrar como descripción del repositorio.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string
               homepage
          El valor a mostrar como página web principal del repositorio.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-file-object
               email-filter
          Sustituye al valor predeterminado de ‘email-filter’.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’:
               maybe-repo-boolean enable-commit-graph?
          Esta opción se puede usar para forzar el valor de la opción de
          configuración global ‘enable-commit-graph?’.

          El valor predeterminado es ‘disabled’.

      -- parámetro de ‘repository-cgit-configuration’:
               maybe-repo-boolean enable-log-filecount?
          Esta opción se puede usar para forzar el valor de la opción de
          configuración global ‘enable-log-filecount?’.

          El valor predeterminado es ‘disabled’.

      -- parámetro de ‘repository-cgit-configuration’:
               maybe-repo-boolean enable-log-linecount?
          Esta opción se puede usar para forzar el valor de la opción de
          configuración global ‘enable-log-linecount?’.

          El valor predeterminado es ‘disabled’.

      -- parámetro de ‘repository-cgit-configuration’:
               maybe-repo-boolean enable-remote-branches?
          Opción que, cuando se proporciona el valor ‘#t’, hace que cgit
          muestre ramas remotas en las vistas de resumen ("summary") y
          de referencias ("refs").

          El valor predeterminado es ‘disabled’.

      -- parámetro de ‘repository-cgit-configuration’:
               maybe-repo-boolean enable-subject-links?
          Esta opción se puede usar para forzar el valor de la opción de
          configuración global ‘enable-subject-links?’.

          El valor predeterminado es ‘disabled’.

      -- parámetro de ‘repository-cgit-configuration’:
               maybe-repo-boolean enable-html-serving?
          Esta opción se puede usar para forzar el valor de la opción de
          configuración global ‘enable-html-serving?’.

          El valor predeterminado es ‘disabled’.

      -- parámetro de ‘repository-cgit-configuration’: repo-boolean
               hide?
          Opción que, cuando tiene valor ‘#t’, oculta el repositorio en
          el índice.

          El valor predeterminado es ‘#f’

      -- parámetro de ‘repository-cgit-configuration’: repo-boolean
               ignore?
          Opción que, cuando tiene valor ‘#t’, ignora el repositorio.

          El valor predeterminado es ‘#f’

      -- parámetro de ‘repository-cgit-configuration’: repo-file-object
               logo
          URL que especifica la fuente de una imagen que se usará como
          logo en las páginas de este repositorio.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string
               logo-link
          URL que se carga al pulsar la imagen del logo de cgit.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-file-object
               owner-filter
          Sustituye al valor predeterminado de ‘owner-filter’.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string
               module-link
          Texto que se usará como la cadena de formato de un enlace
          cuando un submódulo se imprima en el listado de un directorio.
          Los parámetros para la cadena de formato son la ruta y el SHA1
          de la revisión del submódulo.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’:
               ruta-enlace-módulo module-link
          Texto que se usará como la cadena de formato de un enlace
          cuando un submódulo con la ruta de subdirectorio especificada
          se imprima en el listado de un directorio.

          El valor predeterminado es ‘()’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string
               max-stats
          Sustituye al máximo periodo estadístico predeterminado.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string name
          El valor a mostrar como nombre del repositorio.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string owner
          Un valor usado para identificar a la propietaria del
          repositorio.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string path
          La ruta absoluta al directorio del repositorio.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string
               readme
          A path (relative to repo) which specifies a file to include
          verbatim as the “About” page for this repo.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-string
               section
          Nombre actual de la sección de repositorios - todos los
          repositorios definidos tras esta opción heredarán el nombre
          actual de sección.

          El valor predeterminado es ‘""’.

      -- parámetro de ‘repository-cgit-configuration’: repo-list
               extra-options
          Opciones adicionales a agregar al final del fichero cgitrc.

          El valor predeterminado es ‘()’.

 -- parámetro de ‘cgit-configuration’: lista extra-options
     Opciones adicionales a agregar al final del fichero cgitrc.

     El valor predeterminado es ‘()’.

   No obstante, puede ser que únicamente desee usar un fichero ‘cgitrc’
existente. En ese caso, puede proporcionar ‘opaque-cgit-configuration’
como un registro a ‘cgit-service-type’. Como su nombre en inglés indica,
una configuración opaca no tiene gran capacidad reflexiva.

   Los campos disponibles de ‘opaque-cgit-configuration’ son:

 -- parámetro de ‘opaque-cgit-configuration’: package cgit
     El paquete cgit.

 -- parámetro de ‘opaque-cgit-configuration’: string string
     El contenido de ‘cgitrc’, como una cadena.

   Por ejemplo, si su ‘cgitrc’ es simplemente la cadena vacía, puede
instanciar un servicio cgit de esta manera:

     (service cgit-service-type
              (opaque-cgit-configuration
               (cgitrc "")))

Servicio Gitolite
.................

Gitolite (https://gitolite.com/gitolite/) es una herramienta para el
almacenamiento de repositorios Git en un servidor central.

   Gitolite puede manejar múltiples repositorios y usuarias, y permite
una configuración flexible de los permisos de las usuarias sobre los
repositorios.

   El siguiente ejemplo configuraría Gitolite con la usuaria
predeterminada ‘git’ y la clave pública SSH proporcionada.

     (service gitolite-service-type
              (gitolite-configuration
                (admin-pubkey (plain-file
                                "sunombre.pub"
                                "ssh-rsa AAAA... guix@example.com"))))

   Gitolite se configura a través de un repositorio de administración
especial que puede clonar, por ejemplo, si configuró Gitolite en
‘example.org’, ejecutaría la siguiente orden para clonar el repositorio
de administración.

     git clone git@example.com:gitolite-admin

   Cuando se activa el servicio Gitolite, la clave ‘admin-pubkey’
proporcionada se insertará en el directorio ‘keydir’ en el repositorio
gitolite-admin. Si esto resultase en un cambio en el repositorio, la
revisión se almacenaría con el mensaje “gitolite setup by GNU Guix”.

 -- Tipo de datos: gitolite-configuration
     Tipo de datos que representa la configuración de
     ‘gitolite-service-type’.

     ‘package’ (predeterminado: GITOLITE)
          Paquete Gitolite usado.

     ‘user’ (predeterminada: GIT)
          Usuaria usada por Gitolite. Esta será la usuaria a la que se
          conectará cuando acceda a Gitolite a través de SSH.

     ‘group’ (predeterminado: GIT)
          Grupo usado por Gitolite.

     ‘home-directory’ (predeterminado: "/VAR/LIB/GITOLITE")
          Directorio en el que se almacenará la configuración y
          repositorios de Gitolite.

     ‘rc-file’ (predeterminado: (GITOLITE-RC-FILE))
          Un objeto “tipo-fichero” (*note objetos “tipo-fichero”:
          Expresiones-G.), que representa la configuración de Gitolite.

     ‘admin-pubkey’ (predeterminada: #F)
          Un objeto “tipo-fichero” (*note objetos “tipo-fichero”:
          Expresiones-G.) usado para la configuración de Gitolite. Se
          insertará en el directorio ‘keydir’ dentro del repositorio
          gitolite-admin.

          Para especificar la clave SSH como una cadena, use la función
          ‘plain-file’.

               (plain-file "sunombre.pub" "ssh-rsa AAAA... guix@example.com")

 -- Tipo de datos: gitolite-rc-file
     Tipo de datos que representa el fichero RC de Gitolite.

     ‘umask’ (predeterminada: ‘#o0077’)
          Controla los permisos que Gitolite establece en los
          repositorios y sus contenidos.

          Un valor como ‘#o0027’ proporcionará acceso de lectura al
          grupo usado por Gitolite (predeterminado: ‘git’). Es necesario
          cuando se usa Gitolite con software como cgit o gitweb.

     ‘git-config-keys’ (predeterminadas: ‘""’)
          Gitolite allows you to set git config values using the
          ‘config’ keyword. This setting allows control over the config
          keys to accept.

     ‘roles’ (predeterminados: ‘'(("READERS" . 1) ("WRITERS" . ))’)
          Establece los nombres de rol que se permite usar a las
          usuarias que ejecuten la orden perms.

     ‘enable’ (predeterminados: ‘'("help" "desc" "info" "perms" "writable" "ssh-authkeys" "git-config" "daemon" "gitweb")’)
          Esta configuración controla las órdenes y características
          activadas dentro de Gitolite.

   ---------- Footnotes ----------

   (1) By creating the magic file ‘git-daemon-export-ok’ in the
repository directory.


File: guix.es.info,  Node: Servicios de juegos,  Next: Servicio PAM Mount,  Prev: Servicios de control de versiones,  Up: Servicios

8.8.26 Servicios de juegos
--------------------------

El servicio de La batalla por Wesnoth
.....................................

La batalla por Wesnoth (https://wesnoth.org) es un juego de estrategia
táctica, de fantasía y basado en turnos, con varias campañas de una
jugadora, y partidas para múltiples jugadoras (tanto en red como
localmente).

 -- Variable: Variable Scheme wesnothd-service-type
     Tipo de servicio para el servicio wesnothd. Su valor debe ser un
     objeto ‘wesnothd-configuration’. Puede instanciarlo de esta manera
     para ejecutar wesnothd con la configuración predeterminada:

          (service wesnothd-service-type)

 -- Tipo de datos: wesnothd-configuration
     Tipo de datos que representa la configuración de ‘wesnothd’.

     ‘package’ (predeterminado: ‘wesnoth-server’)
          El paquete del servidor wesnoth usado.

     ‘port’ (predeterminado: ‘15000’)
          Número de puerto usado por el servidor.


File: guix.es.info,  Node: Servicio PAM Mount,  Next: Servicios de Guix,  Prev: Servicios de juegos,  Up: Servicios

8.8.27 Servicio PAM Mount
-------------------------

El módulo ‘(gnu services pam-mount)’ proporciona un servicio que permite
a las usuarias montar volúmenes cuando ingresen al sistema. Debe ser
capaz de montar cualquier formato de volumen que el sistema permita.

 -- Variable: Variable Scheme pam-mount-service-type
     Tipo de servicio para la implementación de PAM Mount.

 -- Tipo de datos: pam-mount-configuration
     Tipo de datos que representa la configuración de PAM Mount.

     Toma los siguientes parámetros:

     ‘rules’
          Las reglas de configuración que se usarán para generar
          ‘/etc/security/pam_mount.conf.xml’.

          Las reglas de configuración son elementos SXML (*note
          (guile)SXML::), y las reglas predeterminadas no incluyen el
          montado de ningún dispositivo para ningún usuario en el
          ingreso al sistema:

               `((debug (@ (enable "0")))
                 (mntoptions (@ (allow ,(string-join
                                         '("nosuid" "nodev" "loop"
                                           "encryption" "fsck" "nonempty"
                                           "allow_root" "allow_other")
                                         ","))))
                 (mntoptions (@ (require "nosuid,nodev")))
                 (logout (@ (wait "0")
                            (hup "0")
                            (term "no")
                            (kill "no")))
                 (mkmountpoint (@ (enable "1")
                                  (remove "true"))))

          Some ‘volume’ elements must be added to automatically mount
          volumes at login. Here’s an example allowing the user ‘alice’
          to mount her encrypted ‘HOME’ directory and allowing the user
          ‘bob’ to mount the partition where he stores his data:

               (define reglas-pam-mount
               `((debug (@ (enable "0")))
                           (volume (@ (user "alicia")
                                      (fstype "crypt")
                                      (path "/dev/sda2")
                                      (mountpoint "/home/alicia")))
                           (volume (@ (user "rober")
                                      (fstype "auto")
                                      (path "/dev/sdb3")
                                      (mountpoint "/home/rober/data")
                                      (options "defaults,autodefrag,compress")))
                           (mntoptions (@ (allow ,(string-join
                                                   '("nosuid" "nodev" "loop"
                                                     "encryption" "fsck" "nonempty"
                                                     "allow_root" "allow_other")
                                                   ","))))
                           (mntoptions (@ (require "nosuid,nodev")))
                           (logout (@ (wait "0")
                                      (hup "0")
                                      (term "no")
                                      (kill "no")))
                           (mkmountpoint (@ (enable "1")
                                            (remove "true")))))

               (service pam-mount-service-type
                        (pam-mount-configuration
                          (rules reglas-pam-mount)))

          La lista completa de opciones posibles se puede encontrar en
          la página de ‘man’ de pam_mount.conf
          (http://pam-mount.sourceforge.net/pam_mount.conf.5.html).


File: guix.es.info,  Node: Servicios de Guix,  Next: Servicios de Linux,  Prev: Servicio PAM Mount,  Up: Servicios

8.8.28 Servicios de Guix
------------------------

Servicio de datos de Guix
.........................

El servicio de datos de Guix (http://data.guix.gnu.org) procesa,
almacena y proporciona datos acerca de GNU Guix. Esto incluye
información sobre paquetes, derivaciones y avisos de “lint”.

   Los datos se almacenan en una base de datos PostgreSQL, y están
disponibles a través de una interfaz web.

 -- Variable: Variable Scheme guix-data-service-type
     Tipo de servicio para el servicio de datos de Guix. Su valor debe
     ser un objeto ‘guix-data-service-configuration’. El servicio
     opcionalmente extiende el servicio getmail, puesto que la lista de
     correo guix-commits se usa para conocer los cambios del repositorio
     git de Guix.

 -- Tipo de datos: guix-data-service-configuration
     Tipo de datos que representa la configuración del servicio de datos
     de Guix.

     ‘package’ (predeterminado: ‘guix-data-service’)
          El paquete del servicio de datos de Guix usado.

     ‘user’ (usuaria: ‘"guix-data-service"’)
          Usuaria del sistema que ejecuta el servicio.

     ‘group’ (predeterminado: ‘"guix-data-service"’)
          Grupo del sistema que ejecuta el servicio.

     ‘port’ (predeterminado: ‘8765’)
          El puerto al que se asociará el servicio web.

     ‘host’ (predeterminada: ‘"127.0.0.1"’)
          El nombre de máquina al que se asociará el servicio web.

     ‘getmail-idle-mailboxes’ (predeterminado: ‘#f’)
          Si se proporciona un valor, es la lista de bandejas de correo
          en las cuales la configuración debe indicar su lectura al
          servicio getmail.

     ‘commits-getmail-retriever-configuration’ (predeterminado: ‘#f’)
          Si se proporciona un valor, es el objeto
          ‘getmail-retriever-configuration’ con el que se configura
          getmail para obtener recibir el correo de la lista
          guix-commits.

     ‘extra-options’ (predeterminadas: ’())
          Opciones de línea de órdenes adicionales para
          ‘guix-data-service’.

     ‘extra-process-jobs-options’ (predeterminadas: ’())
          Opciones de línea de órdenes adicionales para
          ‘guix-data-service-process-jobs’.


File: guix.es.info,  Node: Servicios de Linux,  Next: Hurd Services,  Prev: Servicios de Guix,  Up: Servicios

8.8.29 Servicios de Linux
-------------------------

Servicio Early OOM
..................

Early OOM (https://github.com/rfjakob/earlyoom), también conocido como
Earlyoom, es un daemon minimalista de gestión del llenado de la
memoria(1) que se ejecuta en espacio de usuaria y proporciona una
alternativa al gestor del propio núcleo con una respuesta más inmediata
y más configurable. Es útil para prevenir que el sistema no responda
cuando se queda sin memoria.

 -- Variable Scheme: earlyoom-service-type
     Tipo de servicio para el servicio ‘earlyoom’, el daemon Early OOM.
     Su valor debe ser un objeto ‘earlyoom-configuration’, descrito a
     continuación. El servicio se puede instanciar con su configuración
     predeterminada de esta manera:

          (service earlyoom-service-type)

 -- Tipo de datos: earlyoom-configuration
     Esta es el registro de configuración para el servicio
     ‘earlyoom-service-type’.

     ‘earlyoom’ (predeterminado: EARLYOOM)
          El paquete Earlyoom usado.

     ‘minimum-available-memory’ (predeterminado: ‘10’)
          El límite inferior de memoria _disponible_, en porcentaje.

     ‘minimum-free-swap’ (predeterminado: ‘10’)
          El límite inferior de memoria de intercambio libre, en
          porcentaje.

     ‘prefer-regexp’ (predeterminado: ‘#f’)
          Una expresión regular (como cadena) que corresponda con los
          nombres de los procesos que preferiblemente deban pararse.

     ‘avoid-regexp’ (predeterminado: ‘#f’)
          Una expresión regular (como cadena) que corresponda con los
          nombres de los procesos que _no_ deban pararse.

     ‘memory-report-interval’ (predeterminado: ‘0’)
          Intervalo en segundos con el cual se imprime el informe de
          memoria. No está activo de manera predeterminada.

     ‘ignore-positive-oom-score-adj?’ (predeterminado: ‘#f’)
          Valor booleano que indica si se realizan ajustes positivos en
          ‘/proc/*/oom_score_adj’.

     ‘show-debug-messages?’ (predeterminado: ‘#f’)
          Valor booleano que indica si los mensajes de depuración deben
          imprimirse. Los registros se almacenan en
          ‘/var/log/earlyoom.log’.

     ‘send-notification-command’ (predeterminada: ‘#f’)
          Puede usarse para proporcionar una orden personalizada para el
          envío de notificaciones.

Servicio de carga de módulos del núcleo
.......................................

El servicio de carga de módulos del núcleo permite la carga de módulos
del núcleo durante el arranque. Esto es especialmente útil para módulos
que no se cargan automáticamente y deben cargarse de forma manual, como
es el caso con ‘ddcci’.

 -- Variable Scheme: kernel-module-loader-service-type
     Tipo de servicio para la carga de módulos del núcleo durante el
     arranque con ‘modprobe’. Su valor debe ser una lista de cadenas que
     representan nombres de módulo. Por ejemplo, la carga de los
     controladores proporcionados por ‘ddcci-driver-linux’ en modo de
     depuración proporcionando algunos parámetros para el módulo puede
     realizarse de la siguiente manera:

          (use-modules (gnu) (gnu services))
          (use-package-modules linux)
          (use-service-modules linux)

          (define ddcci-config
            (plain-file "ddcci.conf"
                        "options ddcci dyndbg delay=120"))

          (operating-system
            ...
            (services (cons* (service kernel-module-loader-service-type
                                      '("ddcci" "ddcci_backlight"))
                             (simple-service 'ddcci-config etc-service-type
                                             (list `("modprobe.d/ddcci.conf"
                                                     ,ddcci-config)))
                             %base-services))
            (kernel-loadable-modules (list ddcci-driver-linux)))

   ---------- Footnotes ----------

   (1) NdT: Del inglés Out Of Memory.


File: guix.es.info,  Node: Hurd Services,  Next: Servicios misceláneos,  Prev: Servicios de Linux,  Up: Servicios

8.8.30 Hurd Services
--------------------

 -- Scheme Variable: hurd-console-service-type
     This service starts the fancy ‘VGA’ console client on the Hurd.

     The service’s value is a ‘hurd-console-configuration’ record.

 -- Data Type: hurd-console-configuration
     This is the data type representing the configuration for the
     hurd-console-service.

     ‘hurd’ (default: HURD)
          The Hurd package to use.

 -- Scheme Procedure: hurd-etc-service OS
     This service implements a minimal ‘etc-service’, adding some
     specifics for the Hurd.

     It is part of the ‘hurd-default-essential-services’.

 -- Scheme Variable: hurd-getty-service-type
     This service starts a tty using the Hurd ‘getty’ program.

     The service’s value is a ‘hurd-getty-configuration’ record.

 -- Data Type: hurd-getty-configuration
     This is the data type representing the configuration for the
     hurd-getty-service.

     ‘hurd’ (default: HURD)
          The Hurd package to use.

     ‘tty’
          The name of the console this Getty runs on—e.g., ‘"tty1"’.

     ‘baud-rate’ (default: ‘38400’)
          An integer specifying the baud rate of the tty.


File: guix.es.info,  Node: Servicios misceláneos,  Prev: Hurd Services,  Up: Servicios

8.8.31 Servicios misceláneos
----------------------------

Servicio de huella dactilar
...........................

El módulo ‘(gnu services authentication)’ proporciona un servicio DBus
para leer e identificar huellas dactilares mediante un sensor de
huellas.

 -- Variable Scheme: fprintd-service-type
     El tipo de servicio para ‘fprintd’, que proporciona la capacidad de
     lectura de huellas dactilares.

          (service fprintd-service-type)

Servicios de control del sistema
................................

El módulo ‘(gnu services sysctl)’ proporciona servicios para configurar
parámetros del núcleo durante el arranque.

 -- Variable Scheme: sysctl-service-type
     El tipo de servicio para ‘sysctl’, que modifica parámetros del
     núcleo bajo ‘/proc/sys’. Para activar el encaminamiento de tráfico
     IPv4 se puede instanciar de esta manera:

          (service sysctl-service-type
                   (sysctl-configuration
                     (settings '(("net.ipv4.ip_forward" . "1")))))

 -- Tipo de datos: sysctl-configuration
     Tipo de datos que representa la configuración de ‘sysctl’.

     ‘sysctl’ (predeterminado: ‘(file-append procps "/sbin/sysctl"’)
          El ejecutable ‘sysctl’ usado.

     ‘settings’ (predeterminados: ‘'()’)
          Una lista asociativa que especifica parámetros del núcleo y
          sus valores.

Servicio del daemon de tarjetas inteligentes PC/SC
..................................................

El módulo ‘(gnu services security-token)’ proporciona el siguiente
servicio para ejecutar ‘pcscd’, el daemon de tarjetas inteligentes
PC/SC. ‘pcscd’ es el programa del daemon para pcsc-lite y el framework
MuscleCard. Es un gestor de recursos que coordina la comunicación con
lectores de tarjetas inteligentes, las propias tarjetas y los
identificadores criptográficos conectados al sistema.

 -- Variable Scheme: pcscd-service-type
     Tipo de servicio para el servicio ‘pcscd’. Su valor debe ser un
     objeto ‘pcscd-configuration’. Puede instanciarlo de esta manera
     para ejecutar pcscd con la configuración predeterminada:

          (service pcscd-service-type)

 -- Tipo de datos: pcscd-configuration
     Tipo de datos que representa la configuración de ‘pcscd’.

     ‘pcsc-lite’ (predeterminado: ‘pcsc-lite’)
          El paquete pcsc-lite que proporciona pcscd.
     ‘usb-drivers’ (predeterminado: ‘(list ccid)’)
          Lista de paquetes que proporcionan los controladores USB para
          pcscd. Se espera que los controladores se encuentren en el
          directorio ‘pcsc/drivers’ del directorio del almacén del
          paquete.

Servicio Lirc
.............

El módulo ‘(gnu services lirc)’ proporciona el siguiente servicio.

 -- Procedimiento Scheme: lirc-service [#:lirc lirc] [#:device #f]
          [#:driver #f] [#:config-file #f]  [#:extra-options '()]
     Devuelve un servicio que ejecuta LIRC (http://www.lirc.org), un
     daemon que decodifica señales infrarrojas de dispositivos de
     control remoto.

     De manera opcional, se pueden especificar DEVICE, DRIVER y
     CONFIG-FILE (nombre del fichero de configuración) may be specified.
     Véase el manual de ‘lircd’ para obtener más detalles.

     Por último, EXTRA-OPTIONS es una lista de opciones adicionales para
     la línea de órdenes proporcionada a ‘lircd’.

Servicio Spice
..............

El módulo ‘(gnu services spice)’ proporciona el siguiente servicio.

 -- Procedimiento Scheme: spice-vdagent-service [#:spice-vdagent]
     Devuelve un servicio que ejecuta VDAGENT
     (https://www.spice-space.org), un daemon que permite compartir el
     portapapeles con una máquina virtual y la configuración de la
     resolución de la pantalla de la máquina virtual cuando la ventana
     de la consola gráfica cambia de tamaño.

Servicio inputattach
....................

El servicio inputattach (https://linuxwacom.github.io/) permite el uso
de dispositivos de entrada como tabletas Wacom, pantallas táctiles, o
joysticks con el servidor gráfico Xorg.

 -- Variable Scheme: inputattach-service-type
     Tipo de un servicio que ejecuta ‘inputattach’ con un dispositivo y
     reenvía los eventos que produzca.

 -- Tipo de datos: inputattach-configuration
     ‘device-type’ (predeterminado: ‘"wacom"’)
          Tipo del dispositivo al que conectarse. Ejecute ‘inputattach
          --help’, del paquete ‘inputattach’, para ver la lista de tipos
          de dispositivo implementados.

     ‘device’ (predeterminado: ‘"/dev/ttyS0"’)
          El nombre de fichero para la conexión al dispositivo.

     ‘baud-rate’ (predeterminado: ‘#f’)
          Tasa de transmisión usada para las conexiones serie. Debe ser
          un número o ‘#f’.

     ‘log-file’ (predeterminado: ‘#f’)
          Si es verdadero, debe ser el nombre de un fichero en el que
          registrar los mensajes.

Dictionary Service
..................

El módulo ‘(gnu services dict)’ proporciona el servicio siguiente:

 -- Scheme Variable: dicod-service-type
     This is the type of the service that runs the ‘dicod’ daemon, an
     implementation of DICT server (*note (dico)Dicod::).

 -- Procedimiento Scheme: dicod-service [#:config (dicod-configuration)]
     Devuelve un servicio que ejecuta el daemon ‘dicod’, una
     implementación del servidor DICT (*note (dico)Dicod::).

     El parámetro opcional CONFIG especifica la configuración para
     ‘dicod’, que debe ser un objeto ‘<dicod-configuration>’, de manera
     predeterminada proporciona el diccionario colaborativo
     internacional de Inglés de GNU.

     Puede añadir ‘open localhost’ en su fichero ‘~/.dico’ para hacer
     que ‘localhost’ sea el servidor predeterminado de su cliente ‘dico’
     (*note (dico)Initialization File::).

 -- Tipo de datos: dicod-configuration
     Tipo de datos que representa la configuración de dicod.

     ‘dico’ (predeterminado: DICO)
          El objeto paquete del servidor de diccionario GNU Dico.

     ‘interfaces’ (predeterminada: ’("LOCALHOST"))
          Es la lista de direcciones IP y puertos, y posiblemente
          nombres de fichero de sockets, en los que se debe escuchar
          (*note ‘listen’ directive: (dico)Server Settings.).

     ‘handlers’ (predeterminados: ’())
          Lista de objetos ‘<dicod-handler>’ que identifican los
          controladores (instancias de módulos).

     ‘databases’ (predeterminada: (LIST %DICOD-DATABASE:GCIDE))
          Lista de objetos ‘<dicod-database>’ que identifican los
          diccionarios proporcionados.

 -- Tipo de datos: dicod-handler
     Tipo de datos que representa un controlador de diccionario
     (instancia de un módulo).

     ‘name’
          Nombre del controlador (instancia de un módulo).

     ‘module’ (predeterminado: #F)
          Nombre del módulo del controlador de dicod (instancia). Si es
          ‘#f’, el módulo tiene el mismo nombre que el controlador.
          (*note (dico)Módulos::).

     ‘options’
          Lista de cadenas o expresiones-G que representan los
          parámetros al módulo de control

 -- Tipo de datos: dicod-database
     Tipo de datos que representa una base de datos de diccionario.

     ‘name’
          Nombre de la base de datos, será usada en las órdenes DICT.

     ‘handler’
          Nombre del controlador de dicod (instancia de un módulo) usado
          por esta base de datos (*note (dico)Handlers::).

     ‘complex?’ (predeterminado: #F)
          Determina si se usará la configuración compleja. La
          configuración compleja necesita un objeto ‘<dicod-handler>’,
          que no es necesario en otro caso.

     ‘options’
          Lista de cadenas o expresiones-g que representan los
          parámetros para la base de datos (*note (dico)Databases::).

 -- Variable Scheme: %dicod-database:gcide
     Un objeto ‘<dicod-service>’ que ofrece el diccionario internacional
     colaborativo de inglés de GNU usando el paquete ‘gcide’.

   A continuación se encuentra un ejemplo de configuración de
‘dicod-service’.

     (dicod-service #:config
       (dicod-configuration
        (handlers (list (dicod-handler
                         (name "wordnet")
                         (module "dictorg")
                         (options
                          (list #~(string-append "dbdir=" #$wordnet))))))
        (databases (list (dicod-database
                          (name "wordnet")
                          (complex? #t)
                          (handler "wordnet")
                          (options '("database=wn")))
                         %dicod-database:gcide))))

Servicio Docker
...............

El módulo ‘(gnu services docker)’ proporciona los siguientes servicios.

 -- Variable Scheme: docker-service-type

     Este es el tipo del servicio que ejecuta Docker
     (https://www.docker.com), un daemon que puede ejecutar empaquetados
     de aplicaciones (a los que a veces nos referimos como
     “contenedores”) en entornos aislados.

 -- Tipo de datos: docker-configuration
     Este es el tipo de datos que representa la configuración de Docker
     y Containerd.

     ‘package’ (predeterminado: ‘docker’)
          El paquete de Docker usado.

     ‘containerd’ (predeterminado: CONTAINERD)
          El paquete Containerd usado.

Servicio Auditd
...............

El módulo ‘(gnu services auditd)’ proporciona el servicio siguiente:

 -- Variable Scheme: auditd-service-type

     Este es el tipo del servicio que ejecuta auditd
     (https://people.redhat.com/sgrubb/audit/), un daemon que recolecta
     información relevante a la seguridad en su sistema.

     Ejemplos de cosas que se pueden recolectar:

       1. Acceso a ficheros
       2. Llamadas al sistema
       3. Órdenes invocadas
       4. Intentos fallidos de ingreso en el sistema
       5. Activaciones de filtros en el cortafuegos
       6. Accesos de red

     Se puede usar ‘auditctl’ del paquete ‘audit’ para añadir o eliminar
     eventos a recolectar (hasta el siguiente reinicio). Para hacer
     permanente la recolección de dichos eventos, introduzca los
     parámetros de la línea de órdenes de auditctl en
     ‘/etc/audit/audit.rules’. Se puede usar ‘aureport’ del paquete
     ‘audit’ para ver un informe de todos los eventos registrados. El
     daemon audit habitualmente registra los eventos en el fichero
     ‘/var/log/audit’.

 -- Tipo de datos: auditd-configuration
     Este es el tipo de datos que representa la configuración de auditd.

     ‘audit’ (predeterminado: ‘audit’)
          El paquete audit usado.

 -- Variable Scheme: singularity-service-type
     Tipo de servicio que le permite ejecutar Singularity
     (https://www.sylabs.io/singularity/), una herramienta tipo-Docker
     para crear y ejecutar aplicaciones empaquetadas (también conocidas
     como “contenedores”). El valor para este servicio es el paquete de
     Singularity usado.

     El servicio no instala un daemon; en vez de ello, instala programas
     auxiliares con con el bit setuid de root (*note Programas con
     setuid::) de modo que usuarias sin privilegios puedan ejecutar
     ‘singularity run’ y ordenes similares.

Servicio Nix
............

El módulo ‘(gnu services nix)’ proporciona el siguiente servicio.

 -- Variable Scheme: nix-service-type

     Tipo del servicio que ejecuta el daemon de construcción del gestor
     de paquetes Nix (https://nixos.org/nix/). Este es un ejemplo de
     cómo usarlo:

          (use-modules (gnu))
          (use-service-modules nix)
          (use-package-modules package-management)

          (operating-system
            ;; ...
            (packages (append (list nix)
                              %base-packages))

            (services (append (list (service nix-service-type))
                              %base-services)))

     Tras ‘guix system reconfigure’, configure Nix para su usuaria:

        • Añada un canal Nix y lance una actualización. Véase Nix
          Package Manager Guide (https://nixos.org/nix/manual/).

        • Cree un enlace simbólico a su perfil y active el perfil de
          Nix:

          $ ln -s "/nix/var/nix/profiles/per-user/$USER/profile" ~/.nix-profile
          $ source /run/current-system/profile/etc/profile.d/nix.sh


File: guix.es.info,  Node: Programas con setuid,  Next: Certificados X.509,  Prev: Servicios,  Up: Configuración del sistema

8.9 Programas con setuid
========================

Some programs need to run with “root” privileges, even when they are
launched by unprivileged users. A notorious example is the ‘passwd’
program, which users can run to change their password, and which needs
to access the ‘/etc/passwd’ and ‘/etc/shadow’ files—something normally
restricted to root, for obvious security reasons. To address that, these
executables are “setuid-root”, meaning that they always run with root
privileges (*note (libc)How Change Persona::, for more info about the
setuid mechanism).

   El almacén en sí _no puede_ contener programas setuid: sería un
problema de seguridad puesto que cualquier usuaria del sistema puede
escribir derivaciones que pueblen el almacén (*note El almacén::). Por
tanto, se usa un mecanismo diferente: en vez de cambiar el bit de setuid
directamente en los ficheros que se encuentran en el almacén, se permite
que la administradora del sistema _declare_ qué programas deberían tener
setuid de root.

   El campo ‘setuid-programs’ de una declaración ‘operating-system’
contiene una lista de expresiones-G que denotan nombres de programas que
tendrán setuid de root (*note Uso de la configuración del sistema::).
Por ejemplo, el programa ‘passwd’, que es parte del paquete Shadow,
puede designarse con esta expresión-G (*note Expresiones-G::):

     #~(string-append #$shadow "/bin/passwd")

   Un conjunto predeterminado de programas con el bit setuid se define
en la variable ‘%setuid-programs’ del módulo ‘(gnu system)’.

 -- Variable Scheme: %setuid-programs
     Una lista de expresiones-G que denotan programas comunes que se
     marcan con setuid de root.

     La lista incluye órdenes como ‘passwd’, ‘ping’, ‘su’ y ‘sudo’.

   Para su implementación, los programas con setuid reales se crean en
el directorio ‘/run/setuid-programs’ durante la activación del sistema.
Los ficheros en este directorio hacen referencia a los binarios
“reales”, que están en el almacén.


File: guix.es.info,  Node: Certificados X.509,  Next: Selector de servicios de nombres,  Prev: Programas con setuid,  Up: Configuración del sistema

8.10 Certificados X.509
=======================

En las conexiones HTTPS a servidores Web (esto es, HTTP sobre el
mecanismo de seguridad de la capa de transporte, TLS) se envía a los
programas clientes un “certificado X.509” que el cliente puede usar para
_autentificar_ al servidor. Para hacerlo, los clientes verifican que el
certificado del servidor está firmado por una de las llamadas
“autoridades de certificación” (AC, CA en inglés). Pero para verificar
la firma de una AC, los clientes deben haber obtenido previamente el
certificado de dicha AC.

   Los navegadores Web como GNU IceCat incluyen su propio conjunto de
certificados de AC, de manera que pueden verificar las firmas
independientemente.

   No obstante, a la mayor parte de otros programas que pueden
comunicarse a través de HTTPS—‘wget’, ‘git’, ‘w3m’, etc.—se les debe
informar de dónde pueden encontrar los certificados de CA.

   En Guix, esto se lleva a cabo mediante la adición de un paquete que
proporcione certificados en el campo ‘packages’ de la declaración
‘operating-system’ (*note Referencia de operating-system::). Guix
incluye un paquete de este tipo, ‘nss-certs’, compuesto por un conjunto
de certificados de CA proporcionados como parte de los servicios de
seguridad de red de Mozilla (NSS).

   Fíjese que _no_ es parte de ‘%base-packages’, por lo que debe ser
añadido explícitamente. El directorio ‘/etc/ssl/certs’, donde la mayor
parte de las aplicaciones y bibliotecas buscarán los certificados de
manera predeterminada, enlaza a los certificados instalados de manera
global.

   Unprivileged users, including users of Guix on a foreign distro, can
also install their own certificate package in their profile. A number of
environment variables need to be defined so that applications and
libraries know where to find them. Namely, the OpenSSL library honors
the ‘SSL_CERT_DIR’ and ‘SSL_CERT_FILE’ variables. Some applications add
their own environment variables; for instance, the Git version control
system honors the certificate bundle pointed to by the ‘GIT_SSL_CAINFO’
environment variable. Thus, you would typically run something like:

     guix install nss-certs
     export SSL_CERT_DIR="$HOME/.guix-profile/etc/ssl/certs"
     export SSL_CERT_FILE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
     export GIT_SSL_CAINFO="$SSL_CERT_FILE"

   As another example, R requires the ‘CURL_CA_BUNDLE’ environment
variable to point to a certificate bundle, so you would have to run
something like this:

     guix install nss-certs
     export CURL_CA_BUNDLE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"

   Para otras aplicaciones puede tener que buscar la variable de entorno
necesaria en la documentación relevante.


File: guix.es.info,  Node: Selector de servicios de nombres,  Next: Disco en RAM inicial,  Prev: Certificados X.509,  Up: Configuración del sistema

8.11 Selector de servicios de nombres
=====================================

El módulo ‘(gnu system nss)’ proporciona una interfaz con el fichero de
configuración del “selector de servicios de nombres” o “NSS” (*note
(libc)NSS Configuration File::). En resumen, NSS es un mecanismo que
permite la extensión de libc con nuevos métodos de búsqueda de
“nombres”, lo que incluye nombres de máquinas, nombres de servicios,
cuentas de usuaria y más (*note System Databases and Name Service
Switch: (libc)Selector de servicios de nombres.).

   La configuración de NSS especifica, para cada base de datos del
sistema, que método de búsqueda debe ser usado, y cómo los varios
métodos se enlazan entre sí—por ejemplo, bajo qué circunstancias NSS
deberá probar con el siguiente método en la lista. La configuración de
NSS se proporciona en el campo ‘name-service-switch’ de las
declaraciones ‘operating-system’ (*note ‘name-service-switch’:
Referencia de operating-system.).

   Como ejemplo, la siguiente declaración configura NSS para que use el
motor ‘nss-mdns’ (https://0pointer.de/lennart/projects/nss-mdns/), que
permite las búsquedas de nombres de máquinas sobre DNS multicast (mDNS)
para nombres de máquinas terminados en ‘.local’:

     (name-service-switch
        (hosts (list %files    ;primero, comprueba /etc/hosts

                     ;; Si lo anterior no funcionó, prueba
                     ;; con 'mdns_minimal'.
                     (name-service
                       (name "mdns_minimal")

                       ;; 'mdns_minimal' tiene autoridad sobre
                       ;; '.local'.  Cuando devuelve 'not-found,
                       ;; no es necesario intentarlo con los
                       ;; métodos siguientes.
                       (reaction (lookup-specification
                                  (not-found => return))))

                     ;; Si no, usa DNS.
                     (name-service
                       (name "dns"))

                     ;; Finalmente, prueba con 'mdns' "al completo".
                     (name-service
                       (name "mdns")))))

   No se preocupe: la variable ‘%mdns-host-lookup-nss’ (véase a
continuación) contiene esta configuración, de manera que no tiene que
escribirla si todo lo que desea es que funcione la búsqueda de nombres
de máquina en ‘.local’.

   Fíjese que, en este caso, además de establecer el valor de
‘name-service-switch’ en la declaración ‘operating-system’, es necesario
también usar el servicio ‘avahi-service-type’ (*note
‘avahi-service-type’: Servicios de red.) o ‘%desktop-services’, donde
está incluido. Esto permite el acceso a ‘nss-mdsn’ desde el daemon de la
caché del servicio de nombres (*note ‘nscd-service’: Servicios base.).

   Por conveniencia, las siguientes variables proporcionan
configuraciones NSS típicas.

 -- Variable Scheme: %default-nss
     Esta es la configuración predeterminada del selector de servicios
     de nombres, un objeto ‘name-service-switch’.

 -- Variable Scheme: %mdns-host-lookup-nss
     Esta es la configuración del selector de servicios de nombres que
     permite la búsqueda de nombres de máquinas por DNS multicast (mDNS)
     para nombres de máquinas terminados en ‘.local’.

   La referencia de la configuración del selector de servicios de
nombres se proporciona a continuación. Tiene una asociación directa con
el formato del fichero de configuración de la biblioteca C, por lo que
se recomienda el manual de la biblioteca C para obtener más información
(*note (libc)NSS Configuration File::). En comparación con el formato
del fichero de configuración del NSS de libc, no solo tiene solo la
ventaja de la cálida sensación proporcionada por la adición de
paréntesis que tanto nos gustan, sino que también tiene comprobaciones
estáticas: conocerá los errores sintácticos y tipográficos con la
ejecución de ‘guix system’.

 -- Tipo de datos: name-service-switch

     El tipo de datos que representa la configuración del selector de
     servicios de nombres (NSS). Cada campo a continuación representa
     una de las bases de datos del sistema admitidas.

     ‘aliases’
     ‘ethers’
     ‘group’
     ‘gshadow’
     ‘hosts’
     ‘initgroups’
     ‘netgroup’
     ‘networks’
     ‘password’
     ‘public-key’
     ‘rpc’
     ‘services’
     ‘shadow’
          Las bases de datos del sistema que maneja el NSS. Cada uno de
          estos campos debe ser una lista de objetos ‘<name-service>’
          (véase a continuación).

 -- Tipo de datos: name-service

     Este es el tipo de datos que representa un servicio de nombres real
     y la acción de búsqueda asociada.

     ‘name’
          Una cadena que denota el nombre de servicio (*note
          (libc)Services in the NSS configuration::).

          Fíjese que los servicios de nombres enumerados aquí deben ser
          visibles para nscd. Esto se consigue mediante la adición del
          parámetro ‘#:name-services’ a ‘nscd-service’ con la lista de
          paquetes que proporcionan los servicios de nombres necesarios
          (*note ‘nscd-service’: Servicios base.).

     ‘reaction’
          Una acción especificada mediante el uso del macro
          ‘lookup-specification’ (*note (libc)Actions in the NSS
          configuration::). Por ejemplo:

               (lookup-specification (unavailable => continue)
                                     (success => return))


File: guix.es.info,  Node: Disco en RAM inicial,  Next: Configuración del gestor de arranque,  Prev: Selector de servicios de nombres,  Up: Configuración del sistema

8.12 Disco en RAM inicial
=========================

Para el propósito del arranque inicial, se le proporciona al núcleo
Linux-libre un “disco inicial de RAM”, o “initrd”. Un initrd contiene un
sistema de ficheros raíz temporal así como un guión de inicialización.
Este último es responsable del montaje del sistema de ficheros raíz
real, así como de la carga de cualquier módulo del núcleo que pueda ser
necesario para esta tarea.

   El campo ‘initrd-modules’ de una declaración ‘operating-system’ le
permite especificar qué módulos del núcleo Linux-libre deben estar
disponibles en el initrd. En particular, aquí es donde se debe enumerar
los módulos que controlen realmente el disco duro donde su partición
raíz se encuentre—aunque el valor predeterminado de ‘initrd-modules’
debería cubrir la mayor parte de casos de uso. Por ejemplo, en caso de
necesitar el módulo ‘megaraid_sas’ además de los módulos predeterminados
para poder acceder a sistema de ficheros raíz, se podría escribir:

     (operating-system
       ;; ...
       (initrd-modules (cons "megaraid_sas" %base-initrd-modules)))

 -- Variable Scheme: %base-initrd-modules
     Esta es la lista de módulos del núcleo que se incluyen en el initrd
     predeterminado.

   Más allá, si necesita personalizaciones de un nivel más bajo, el
campo ‘initrd’ de una declaración ‘operating-system’ le permite
especificar qué initrd desea usar. El módulo ‘(gnu system linux-initrd)’
proporciona tres formas de construir un initrd: el procedimiento de alto
nivel ‘base-initrd’ y los procedimientos de bajo nivel ‘raw-initrd’ y
‘expression->initrd’.

   El procedimiento ‘base-initrd’ está pensado para cubrir la mayor
parte de usos comunes. Por ejemplo, si desea añadir algunos módulos del
núcleo que deben cargarse durante el arranque, puede definir el campo
‘initrd’ de la declaración de sistema operativo de esta forma:

     (initrd (lambda (sistemas-de-ficheros . resto)
               ;; Crea un initrd estándar pero configura la red
               ;; con los parámetros que QEMU espera por omisión.
               (apply base-initrd sistemas-de-ficheros
                      #:qemu-networking? #t
                      resto)))

   El procedimiento ‘base-initrd’ también maneja casos de uso comunes
que implican el uso del sistema en un anfitrión QEMU, o como un sistema
“live” con un sistema de ficheros raíz volátil.

   El procedimiento ‘base-initrd’ se construye sobre el procedimiento
‘raw-initrd’. Al contrario que ‘base-initrd’, ‘raw-initrd’ no funciona a
alto nivel, como sería intentar deducir qué módulos del núcleo y
paquetes deben incluirse en el initrd. Un ejemplo de uso de ‘raw-initrd’
es cuando una usuaria tiene personalizada una configuración del núcleo
Linux y los módulos predeterminados del núcleo que incluye ‘base-initrd’
no están disponibles.

   El disco inicial de RAM producido por ‘base-initrd’ o ‘raw-initrd’
inspecciona varias opciones proporcionadas por la línea de órdenes al
núcleo Linux (esto es, argumentos pasados a través de la orden ‘linux’
de GRUB, o de la opción ‘-append’ de QEMU), notablemente:

‘--load=ARRANQUE’
     Indica al disco de RAM inicial que cargue ARRANQUE, un fichero que
     contiene un programa Scheme, una vez haya montado el sistema de
     ficheros raíz.

     Guix usa esta opción para proporcionar el control a un programa de
     arranque que ejecuta los programas de activación de servicios y
     lanza GNU Shepherd, el sistema de inicialización.

‘--root=RAÍZ’
     Mount ROOT as the root file system. ROOT can be a device name like
     ‘/dev/sda1’, a file system label, or a file system UUID. When
     unspecified, the device name from the root file system of the
     operating system declaration is used.

‘--system=SISTEMA’
     Hace que ‘/run/booted-system’ y ‘/run/current-system’ apunten a
     SISTEMA.

‘modprobe.blacklist=MÓDULOS...’
     Indica al disco inicial de RAM así como a la orden ‘modprobe’ (del
     paquete kmod) que deben negarse a cargar MÓDULOS. MÓDULOS debe ser
     una lista separada por comas de nombres de módulos—por ejemplo,
     ‘usbkbd,9pnet’.

‘--repl’
     Inicia una sesión interactiva (REPL) desde el disco inicial de RAM
     antes de que intente cargar los módulos del núcleo y del montaje
     del sistema de ficheros raíz. Nuestro departamento comercial lo
     llama “arranca-en-Guile”. Como amante de Scheme, lo adorará. *Note
     (guile)Using Guile Interactively::, para más información sobre
     sesiones interactivas Guile.

   Una vez conocidas todas las características que proporcionan los
discos iniciales de RAM que producen ‘base-initrd’ y ‘raw-initrd’, a
continuación veremos cómo usarlas y personalizarlos más aún.

 -- Procedimiento Scheme: raw-initrd SISTEMAS-DE-FICHEROS
          [#:linux-modules '()] [#:mapped-devices '()]
           [#:keyboard-layout #f] [#:helper-packages '()]
          [#:qemu-networking? #f] [#:volatile-root? #f] Return
     a derivation that builds a raw initrd. FILE-SYSTEMS is a list of
     file systems to be mounted by the initrd, possibly in addition to
     the root file system specified on the kernel command line via
     ‘--root’. LINUX-MODULES is a list of kernel modules to be loaded at
     boot time. MAPPED-DEVICES is a list of device mappings to realize
     before FILE-SYSTEMS are mounted (*note Dispositivos traducidos::).
     HELPER-PACKAGES is a list of packages to be copied in the initrd.
     It may include ‘e2fsck/static’ or other packages needed by the
     initrd to check the root file system.

     Cuando su valor es verdadero, KEYBOARD-LAYOUT es un registro
     ‘<keyboard-layout>’ que denota la distribución de teclado en
     consola deseada. Esto se realiza previamente a que los dispositivos
     configurados en MAPPED-DEVICES se inicien y antes de que los
     sistemas de ficheros en FILE-SYSTEMS se monten, de manera que, en
     caso de que la usuaria tuviese que introducir una contraseña o usar
     la sesión interactiva, esto suceda usando la distribución de
     teclado deseada.

     Cuando QEMU-NETWORKING? es verdadero, configura la red con los
     parámetros QEMU estándar. Cuando VIRTIO? es verdadero, carga
     módulos adicionales para que la imagen en RAM pueda ser usada como
     un sistema virtualizado por QEMU con controladores
     paravirtualizados de E/S.

     Cuando VOLATILE-ROOT? es verdadero, el sistema de ficheros raíz
     tiene permisos de escritura pero cualquier cambio realizado se
     perderá.

 -- Procedimiento Scheme: base-initrd SISTEMAS-DE-FICHEROS
          [#:mapped-devices '()] [#:keyboard-layout #f]
           [#:qemu-networking? #f]
     [#:volatile-root? #f]  [#:linux-modules ’()] Return as a file-like
     object a generic initrd, with kernel modules taken from LINUX.
     FILE-SYSTEMS is a list of file-systems to be mounted by the initrd,
     possibly in addition to the root file system specified on the
     kernel command line via ‘--root’. MAPPED-DEVICES is a list of
     device mappings to realize before FILE-SYSTEMS are mounted.

     Cuando su valor es verdadero, KEYBOARD-LAYOUT es un registro
     ‘<keyboard-layout>’ que denota la distribución de teclado en
     consola deseada. Esto se realiza previamente a que los dispositivos
     configurados en MAPPED-DEVICES se inicien y antes de que los
     sistemas de ficheros en FILE-SYSTEMS se monten, de manera que, en
     caso de que la usuaria tuviese que introducir una contraseña o usar
     la sesión interactiva, esto suceda usando la distribución de
     teclado deseada.

     QEMU-NETWORKING? y VOLATILE-ROOT? funcionan como en ‘raw-initrd’.

     El initrd incorpora automáticamente todos los módulos del núcleo
     necesarios para SISTEMAS-DE-FICHEROS y para las opciones
     proporcionadas. Módulos del núcleo adicionales pueden
     proporcionarse a través de LINUX-MODULES. Se añadirán al initrd y
     se cargarán en tiempo de arranque en el orden que aparezcan.

   No es necesario decir que los initrd que producimos y usamos embeben
un Guile enlazado estáticamente, y que el programa de inicialización es
un programa Guile. Esto proporciona mucha flexibilidad. El procedimiento
‘expression->initrd’ construye un initrd de ese tipo, una vez
proporcionado el programa a ejecutar en dicho initrd.

 -- Procedimiento Scheme: expression->initrd EXP [#:guile
          %guile-3.0-static-stripped] [#:name "guile-initrd"] Return as
          a
     file-like object a Linux initrd (a gzipped cpio archive) containing
     GUILE and that evaluates EXP, a G-expression, upon booting. All the
     derivations referenced by EXP are automatically copied to the
     initrd.


File: guix.es.info,  Node: Configuración del gestor de arranque,  Next: Invocación de guix system,  Prev: Disco en RAM inicial,  Up: Configuración del sistema

8.13 Configuración del gestor de arranque
=========================================

El sistema operativo permite varios cargadores de arranque. El cargador
de arranque se configura mediante el uso de la declaración
‘bootloader-configuration’. Todos los campos de esta estructura son
independientes del cargador de arranque excepto uno, ‘bootloader’, que
indica el cargador de arranque a configurar e instalar.

   Algunos de los cargadores de arranque no inspeccionan todos los
campos de ‘bootloader-configuration’. Por ejemplo, el cargador de
arranque extlinux no permite temas y por lo tanto ignora el campo
‘theme’.

 -- Tipo de datos: bootloader-configuration
     El tipo de una declaración de configuración del cargador de
     arranque.

     ‘bootloader’
          El cargador de arranque usado, como un objeto ‘bootloader’. De
          momento se aceptan ‘grub-bootloader’, ‘grub-efi-bootloader’,
          ‘extlinux-bootloader’ y ‘u-boot-bootloader’.

          ‘grub-efi-bootloader’ permite el arranque en sistemas modernos
          que usan la “interfaz extendida de firmware unificada” (UEFI).
          Es el que debería ser usado si la imagen de instalación
          contiene un directorio ‘/sys/firmware/efi’ cuando la arranca
          en su sistema.

          ‘grub-bootloader’ permite el arranque en máquinas basadas en
          Intel en modo “antiguo” BIOS.

          Los cargadores de arranque se describen en los módulos ‘(gnu
          bootloader ...)’. En particular, ‘(gnu bootloader u-boot)’
          contiene definiciones de cargadores de arranque para un amplio
          rango de sistemas ARM y AArch64, mediante el uso del cargador
          de arranque U-Boot (https://www.denx.de/wiki/U-Boot/).

     ‘target’
          Una cadena que indica donde se instalará el cargador de
          arranque.

          La interpretación depende del cargador de arranque en
          cuestión. Para ‘grub-bootloader’, por ejemplo, debe ser un
          nombre de dispositivo que entienda la orden ‘install’ del
          cargador de arranque, como ‘/dev/sda’ o ‘(hd0)’ (*note
          (grub)Invoking grub-install::). Para ‘grub-efi-bootloader’,
          debe apuntar al punto de montaje del sistema de ficheros EFI,
          habitualmente ‘/boot/efi’.

     ‘menu-entries’ (predeterminadas: ‘()’)
          Una lista posiblemente vacía de objetos ‘menu-entry’ (véase a
          continuación), que indican entradas que deben aparecer en el
          menú del cargador de arranque, además de la entrada del
          sistema actual y la entrada que apunta a generaciones previas
          del sistema.

     ‘default-entry’ (predeterminada: ‘0’)
          El índice de la entrada del menú de arranque por omisión. El
          índice 0 es para la entrada del sistema actual.

     ‘timeout’ (predeterminado: ‘5’)
          El número de segundos que se esperará entrada por el teclado
          antes de arrancar. El valor 0 indica que se debe arrancar de
          forma inmediata, y -1 que se debe esperar indefinidamente.

     ‘keyboard-layout’ (predeterminada: ‘#f’)
          Si es ‘#f’, el menú del cargador de arranque (si existe) usa
          la distribución de teclado predeterminada, habitualmente
          inglés estadounidense (“qwerty”).

          En otro caso, debe ser un objeto ‘keyboard-layout’ (*note
          Distribución de teclado::).

               Nota: Esta opción se ignora actualmente por todos los
               cargadores de arranque menos ‘grub’ y ‘grub-efi’.

     ‘theme’ (predeterminado: #F)
          El objeto del tema del cargador de arranque que describe el
          tema usado. Si no se proporciona ningún tema, algunos
          cargadores de arranque pueden usar un tema por omisión, lo
          cual es cierto en GRUB.

     ‘terminal-outputs’ (predeterminadas: ‘'(gfxterm)’)
          Los terminales de salida que se usarán para el menú de
          arranque, como una lista de símbolos. GRUB acepta los valores:
          ‘console’, ‘serial’, ‘serial_{0-3}’, ‘gfxterm’, ‘vga_text’,
          ‘mda_text’, ‘morse’ y ‘pkmodem’. Este campo corresponde con la
          variable ‘GRUB_TERMINAL_OUTPUT’ (*note (grub)Simple
          configuration::).

     ‘terminal-inputs’ (predeterminadas: ‘'()’)
          Los terminales de entrada que se usarán para el menú de
          arranque, como una lista de símbolos. Para GRUB, el valor
          predeterminado es el terminal nativo de la plataforma
          determinado en tiempo de ejecución. GRUB acepta los valores:
          ‘console’, ‘serial’, ‘serial{0-3}’, ‘at_keyboard’ y
          ‘usb_keyboard’. Este campo corresponde a la variable GRUB
          ‘GRUB_TERMINAL_INPUT’ (*note (grub)Simple configuration::).

     ‘serial-unit’ (predeterminada: ‘#f’)
          La unidad serie usada por el cargador de arranque, como un
          entero del 0 al 3. Para GRUB, se selecciona en tiempo de
          ejecución; actualmente GRUB selecciona 0 lo que corresponde a
          COM1 (*note (grub)Serial terminal::).

     ‘serial-speed’ (predeterminada: ‘#f’)
          La velocidad de la interfaz serie, como un entero. Para GRUB,
          el valor predeterminado se selecciona en tiempo de ejecución,
          actualmente GRUB selecciona 9600 bps (*note (grub)Serial
          terminal::).

   Si desease listar entradas adicionales para el menú de arranque a
través del campo ‘menu-entries’ mostrado previamente, deberá crearlas
con la forma ‘menu-entry’. Por ejemplo, imagine que desea ser capaz de
arrancar otra distribución (¡difícil de imaginar!), puede definir una
entrada de menú de esta forma:

     (menu-entry
       (label "La otra distribución")
       (linux "/boot/old/vmlinux-2.6.32")
       (linux-arguments '("root=/dev/sda2"))
       (initrd "/boot/old/initrd"))

   Los detalles se encuentran a continuación.

 -- Tipo de datos: menu-entry
     El tipo de una entrada en el menú del cargador de arranque.

     ‘label’
          La etiqueta a mostrar en el menú—por ejemplo, ‘"GNU"’.

     ‘linux’
          La imagen del núcleo Linux a arrancar, por ejemplo:

               (file-append linux-libre "/bzImage")

          Con GRUB, también es posible especificar un dispositivo
          explícitamente mediante el uso de la convención de nombres de
          dispositivo de GRUB (*note (grub)Naming convention::), por
          ejemplo:

               "(hd0,msdos1)/boot/vmlinuz"

          Si se especifica el dispositivo explícitamente como en el
          ejemplo anterior, el campo ‘device’ se ignora completamente.

     ‘linux-arguments’ (predeterminados: ‘()’)
          La lista de parámetros extra de línea de órdenes para el
          núcleo Linux—por ejemplo, ‘("console=ttyS0")’.

     ‘initrd’
          Una expresión-G o una cadena que contiene el nombre de fichero
          del disco inicial en RAM usado (*note Expresiones-G::).
     ‘device’ (predeterminado: ‘#f’)
          El dispositivo donde se encuentran el núcleo y el initrd—es
          decir, para GRUB, “raíz” de esta entrada de menú (*note
          (grub)root::).

          Puede ser una etiqueta de sistema de ficheros (una cadena), un
          UUID de sistema de ficheros (un vector de bytes, *note
          Sistemas de ficheros::), o ‘#f’, en cuyo caso el cargador de
          arranque buscará el dispositivo que contenga el fichero
          especificado por el campo ‘linux’ (*note (grub)search::). _No_
          debe ser un nombre de dispositivo del SO como ‘/dev/sda1’.

   De momento únicamente GRUB permite el uso de temas. Los temas de GRUB
se crean mediante el uso de ‘grub-theme’, todavía no documentado
completamente.

 -- Tipo de datos: grub-theme
     Tipo de datos que representa la configuración de un tema de GRUB.

     ‘gfxmode’ (predeterminado: ‘'("auto")’)
          El modo gráfico ‘gfxmode’ de GRUB configurado (una lista de
          cadenas con resoluciones de pantalla, *note (grub)gfxmode::).

 -- Scheme Procedure: grub-theme
     Return the default GRUB theme used by the operating system if no
     ‘theme’ field is specified in ‘bootloader-configuration’ record.

     Viene con una bonita imagen de fondo que muestra los logos de GNU y
     Guix.

   Por ejemplo, para usar una resolución distinta de la predeterminada,
puede usar algo como esto:

     (bootloader
      (bootloader-configuration
      ;; ...
      (theme (grub-theme
              (inherit (grub-theme))
              (gfxmode '("1024x786x32" "auto"))))))


File: guix.es.info,  Node: Invocación de guix system,  Next: Invocación de guix deploy,  Prev: Configuración del gestor de arranque,  Up: Configuración del sistema

8.14 Invocación de ‘guix system’
================================

Una vez haya escrito la declaración de sistema operativo como se ha
visto en la sección previa, puede “instanciarse” mediante el uso de la
orden ‘guix system’. Su sinopsis es:

     guix system OPCIONES... ACCIÓN FICHERO

   FICHERO debe ser el nombre de un fichero que contenga una declaración
‘operating-system’. ACCIÓN especifica cómo se instancia el sistema
operativo. Actualmente se permiten los siguientes valores:

‘search’
     Muestra las definiciones de tipos de servicio disponibles que
     corresponden con las expresiones regulares proporcionadas,
     ordenadas por relevancia:

          $ guix system search console
          name: console-fonts
          location: gnu/services/base.scm:806:2
          extends: shepherd-root
          description: Install the given fonts on the specified ttys (fonts are per
          + virtual console on GNU/Linux).  The value of this service is a list of
          + tty/font pairs.  The font can be the name of a font provided by the `kbd'
          + package or any valid argument to `setfont', as in this example:
          +
          +      '(("tty1" . "LatGrkCyr-8x16")
          +        ("tty2" . (file-append
          +                      font-tamzen
          +                      "/share/kbd/consolefonts/TamzenForPowerline10x20.psf"))
          +        ("tty3" . (file-append
          +                      font-terminus
          +                      "/share/consolefonts/ter-132n"))) ; for HDPI
          relevance: 9

          name: mingetty
          location: gnu/services/base.scm:1190:2
          extends: shepherd-root
          description: Provide console login using the `mingetty' program.
          relevance: 2

          name: login
          location: gnu/services/base.scm:860:2
          extends: pam
          description: Provide a console log-in service as specified by its
          + configuration value, a `login-configuration' object.
          relevance: 2

          ...

     Como con ‘guix package --search’, el resultado se obtiene en
     formato ‘recutils’, lo que facilita el filtrado de la salida (*note
     GNU recutils databases: (recutils)Top.).

‘reconfigure’
     Construye el sistema operativo descrito en FICHERO, lo activa, y se
     constituye como estado actual(1).

          Nota: Es altamente recomendable ejecutar ‘guix pull’ antes de
          la primera ejecución de ‘guix system reconfigure’ (*note
          Invocación de guix pull::). No hacerlo puede ocasionar que se
          obtenga una versión más antigua de Guix una vez que
          ‘reconfigure’ se haya completado.

     Lleva a efecto toda la configuración especificada en FICHERO:
     cuentas de usuaria, servicios del sistema, lista de paquetes
     global, programas con setuid, etc. La orden inicia los servicios
     del sistema especificados en FICHERO que no estén actualmente en
     ejecución; si un servicio se encuentra en ejecución esta orden
     prepara su actualización durante la próxima parada (por ejemplo,
     con ‘herd stop X’ o ‘herd restart X’).

     Esta orden crea una nueva generación cuyo número es el sucesor de
     la siguiente generación (como lo muestra ‘guix system
     list-generations’). Si esa generación ya existe, será sobreescrita.
     Este comportamiento es el mismo que el de ‘guix package’ (*note
     Invocación de guix package::).

     También añade una entrada al cargador de arranque para la nueva
     configuración del sistema operativo—en caso de que no se
     proporcione la opción ‘--no-bootloader’. Con GRUB, mueve las
     entradas de configuraciones antiguas a un submenú, permitiendo la
     selección de una generación previa del sistema en tiempo de
     arranque en caso necesario.

     Tras la finalización, el nuevo sistema se despliega en
     ‘/run/current-system’. Este directorio contiene “metadatos de
     procedencia”: la lista de canales usados (*note Canales::) y
     FICHERO en sí, cuando esté disponible. Esta información es útil en
     caso de que desee inspeccionar posteriormente cómo se construyó
     está generación en particular.

     De hecho, asumiendo que FICHERO está autocontenido, puede construir
     de nuevo la generación N de su sistema operativo con:

          guix time-machine \
            -C /var/guix/profiles/system-N-link/channels.scm -- \
            system reconfigure \
            /var/guix/profiles/system-N-link/configuration.scm

     ¡Puede pensar en ello como una especie de control de versiones
     incorporado en Guix! Su sistema no es únicamente un artefacto
     binario: _transporta sus propias fuentes con él_. *Note
     ‘provenance-service-type’: Referencia de servicios, para más
     información sobre el seguimiento de procedencia.

‘switch-generation’
     Cambia a una generación existente del sistema. Esta acción cambia
     atómicamente el perfil del sistema a la generación del sistema
     especificada. También redistribuye las entradas de sistema del menú
     de arranque existentes. Marca como predeterminada la entrada de la
     generación de sistema especificada y mueve las entradas de otras
     generaciones a un submenú, si el cargador de arranque lo permite.
     La próxima vez que se arranque el sistema, se usará la generación
     de sistema especificada.

     El cargador de arranque en sí no se reinstala durante esta orden.
     Por tanto, el cargador de arranque instalado se usa con un fichero
     de configuración actualizado.

     La generación deseada puede especificarse explícitamente con su
     numero de generación. Por ejemplo, la siguiente invocación
     cambiaría a la generación 7 del sistema:

          guix system switch-generation 7

     La generación deseada puede especificarse también de forma relativa
     a la generación actual con la forma ‘+N’ o ‘-N’, donde ‘+3’
     significa “3 generaciones después de la generación actual”, y ‘-1’
     significa “1 generación antes de la generación actual”. Cuando se
     especifica un valor negativo como ‘-1’ debe ir precedido de ‘--’
     para evitar que se analice como una opción. Por ejemplo:

          guix system switch-generation -- -1

     Actualmente, el efecto de la invocación de esta acción es
     _únicamente_ cambiar el perfil del sistema a una generación
     existente y redistribuir las entradas del menú de arranque. Para
     realmente empezar a usar la generación deseada del sistema, debe
     reiniciar tras esta acción. En el futuro, se actualizará para hacer
     lo mismo que ‘reconfigure’, como activación y desactivación de
     servicios.

     Esta acción fallará si la generación especificada no existe.

‘roll-back’
     Cambia a la generación de sistema previa. Tras el siguiente
     arranque del sistema, usará la generación de sistema precedente. Es
     la operación inversa de ‘reconfigure’, y es equivalente a la
     invocación de ‘switch-generation’ con ‘-1’ como parámetro.

     Actualmente, como con ‘switch-generation’, debe reiniciar tras la
     ejecución de esta acción para realmente empezar a usar la
     generación de sistema precedente.

‘delete-generations’
     Elimina generaciones del sistema, haciendo posible su recolección
     con la basura (*note Invocación de guix gc::, para información
     sobre como llevar a cabo la “recolección de basura”).

     This works in the same way as ‘guix package --delete-generations’
     (*note ‘--delete-generations’: Invocación de guix package.). With
     no arguments, all system generations but the current one are
     deleted:

          guix system delete-generations

     También puede seleccionar las generaciones que desea eliminar. El
     siguiente ejemplo elimina todas las generaciones del sistema que
     tienen más de dos meses de antigüedad:

          guix system delete-generations 2m

     La ejecución de esta orden reinstala automáticamente el cargador de
     arranque con una lista de entradas del menú actualizada—por
     ejemplo, el submenú de generaciones antiguas en GRUB no mostrará
     las generaciones que hayan sido borradas.

‘build’
     Construye la derivación del sistema operativo, que incluye todos
     los ficheros de configuración y programas necesarios para el
     arranque y la ejecución del sistema. Esta acción no instala nada en
     realidad.

‘init’
     Construye el directorio dado con todos los ficheros necesarios para
     ejecutar el sistema operativo especificado en FICHERO. Esto es útil
     para la instalación inicial de Guix. Por ejemplo:

          guix system init mi-configuración-del-so.scm /mnt

     copia a ‘/mnt’ todos los elementos del almacén necesarios para la
     configuración especificada en ‘mi-configuración-del-so.scm’. Esto
     incluye los ficheros de configuración, paquetes y demás. También
     crea otros ficheros esenciales necesarios para la correcta
     operación del sistema—por ejemplo, los directorios ‘/etc’, ‘/var’ y
     ‘/run’, y el fichero ‘/bin/sh’.

     Esta orden también instala el cargador de arranque en el destino
     especificado en ‘mi-conf-del-so.scm’, siempre que no se proporcione
     la opción ‘--no-bootloader’.

‘vm’
     Construye una máquina virtual que contiene el sistema operativo
     declarado en FICHERO, y devuelve un guión que ejecuta dicha máquina
     virtual (VM).

          Nota: La acción ‘vm’ y otras presentadas a continuación pueden
          usar la funcionalidad KVM del núcleo Linux-libre.
          Específicamente, si la máquina permite la virtualización
          hardware, debe cargarse el correspondiente módulo KVM del
          núcleo, debe existir el nodo del dispositivo ‘/dev/kvm’ y
          tanto la propia usuaria como las usuarias de construcción del
          daemon deben tener acceso de lectura y escritura al mismo
          (*note Configuración del entorno de construcción::).

     Los parámetros proporcionados al guión se pasan a QEMU como en el
     siguiente ejemplo, que activa la red y solicita 1 GiB de RAM para
     la máquina emulada:

          $ /gnu/store/...-run-vm.sh -m 1024 -smp 2 -net user,model=virtio-net-pci

     La VM comparte su almacén con el sistema anfitrión.

     Additional file systems can be shared between the host and the VM
     using the ‘--share’ and ‘--expose’ command-line options: the former
     specifies a directory to be shared with write access, while the
     latter provides read-only access to the shared directory.

     El siguiente ejemplo crea una máquina virtual en la que el
     directorio de la usuaria es accesible en modo solo-lecture, y donde
     el directorio ‘/intercambio’ esta asociado de forma
     lectura-escritura con ‘$HOME/tmp’ en el sistema anfitrión:

          guix system vm mi-configuración.scm \
             --expose=$HOME --share=$HOME/tmp=/intercambio

     En GNU/Linux, lo predeterminado es arrancar directamente el núcleo;
     esto posee la ventaja de necesitar únicamente una pequeña imagen
     del disco raíz pequeña ya el el almacén de la anfitriona puede
     montarse.

     The ‘--full-boot’ option forces a complete boot sequence, starting
     with the bootloader. This requires more disk space since a root
     image containing at least the kernel, initrd, and bootloader data
     files must be created. The ‘--image-size’ option can be used to
     specify the size of the image.

‘vm-image’
‘disk-image’
‘docker-image’
     Devuelve una máquina virtual, imagen de disco o imagen Docker del
     sistema operativo declarado en FICHERO que es independiente. Por
     omisión, ‘guix system’ estima el tamaño de la imagen necesario para
     almacenar el sistema, pero puede usar la opción ‘--image-size’ para
     especificar un valor. Las imágenes Docker se construyen para que
     contengan exactamente lo que necesitan, por lo que la opción
     ‘--image-size’ se ignora en el caso de ‘docker-image’.

     Puede especificar el sistema de ficheros raíz mediante el uso de la
     opción ‘--file-system-type’. Su valor predeterminado es ‘ext4’.

     Cuando se usa ‘vm-image’, la imagen devuelta está en formato qcow2,
     que QEMU puede usar eficientemente. *Note Ejecutar Guix en una
     máquina virtual::, para más información sobre cómo ejecutar la
     imagen en una máquina virtual.

     Con ‘disk-image’ se produce una imagen de disco cruda; puede
     copiarse tal cual en una memoria USB, por ejemplo. Asumiendo que
     ‘/dev/sdc’ es el dispositivo que corresponde a la memoria USB, se
     podría copiar la imagen con la siguiente orden:

          # dd if=$(guix system disk-image mi-so.scm) of=/dev/sdc

     Con ‘docker-image’ se produce una imagen Docker. Guix construye la
     imagen de cero, no de una imagen Docker base preexistente. Como
     resultado, contiene _exactamente_ lo definido en el fichero de
     configuración del sistema operativo. Puede cargar la imagen y
     ejecutar un contenedor Docker mediante el uso de ordenes como las
     siguientes:

          id_imagen="`docker load < guix-system-docker-image.tar.gz`"
          id_contenedor="`docker create $id_imagen`"
          docker start $id_contenedor

     Esta orden arranca un contenedor Docker nuevo a partir de la imagen
     especificada. El sistema Guix se arrancará de la manera habitual,
     lo que implica el inicio de cualquier servicio que se haya definido
     en la configuración del sistema operativo. Puede iniciar una sesión
     de shell interactiva en el contenedor mediante el uso de ‘docker
     exec’:

          docker exec -ti $container_id /run/current-system/profile/bin/bash --login

     Dependiendo de lo que ejecute en el contenedor Docker, puede ser
     necesario proporcionar permisos adicionales al contenedor. Por
     ejemplo, si pretende construir software mediante el uso de Guix
     dentro del contenedor Docker, puede tener que proporcionar la
     opción ‘--privileged’ a ‘docker create’.

     Last, the ‘--network’ option applies to ‘guix system docker-image’:
     it produces an image where network is supposedly shared with the
     host, and thus without services like nscd or NetworkManager.

‘container’
     Devuelve un guión de la ejecución del sistema operativo declarado
     en FICHERO dentro de un contenedor. Los contenedores son un
     conjunto de mecanismos de aislamiento ligeros que proporciona el
     núcleo Linux-libre. Los contenedores necesitan sustancialmente
     menos recursos que máquinas virtuales completas debido a que el
     núcleo, los objetos compartidos y otros recursos pueden compartirse
     con el sistema anfitrión; esto también significa que proporcionan
     un menor aislamiento.

     En este momento, el guión debe ejecutarse como root para permitir
     más de una única usuaria y grupo. El contenedor comparte su almacén
     con la máquina anfitriona.

     Como con la acción ‘vm’ (*note guix system vm::), sistemas de
     ficheros adicionales a compartir entre la máquina anfitriona y el
     contenedor pueden especificarse mediante el uso de las opciones
     ‘--share’ y ‘--expose’:

          guix system container mi-configuración.scm \
             --expose=$HOME --share=$HOME/tmp=/intercambio

          Nota: Esta opción requiere Linux-libre 3.19 o posterior.

   OPCIONES puede contener cualquiera de las opciones de construcción
comunes (*note Opciones comunes de construcción::). Además, OPCIONES
puede contener una de las siguientes:

‘--expression=EXPR’
‘-e EXPR’
     Considera el sistema operativo al cual evalúa EXPR. Es una
     alternativa a la especificación de un fichero que evalúe a un
     sistema operativo. Se usa para la generación de la imagen de
     instalación de Guix (*note Construcción de la imagen de
     instalación::).

‘--system=SISTEMA’
‘-s SISTEMA’
     Intenta la construcción para SISTEMA en vez de para el tipo de la
     máquina anfitriona. Funciona como en ‘guix build’ (*note Invocación
     de guix build::).

‘--derivation’
‘-d’
     Devuelve el nombre de fichero de la derivación del sistema
     operativo proporcionado sin construir nada.

‘--save-provenance’
     Como se ha mostrado previamente, ‘guix system init’ y ‘guix system
     reconfigure’ siempre almacenan información de procedencia a través
     de un servicio dedicado (*note ‘provenance-service-type’:
     Referencia de servicios.). No obstante, otras órdenes no hacen esto
     de manera predeterminada. Si desea, digamos, crear una imagen de
     máquina virtual que contenga información de procedencia, puede
     ejecutar:

          guix system vm-image --save-provenance config.scm

     De este modo, la imagen resultante “embeberá sus propias fuentes”
     de manera efectiva en forma de metadatos en ‘/run/current-system’.
     Con dicha información se puede reconstruir la imagen para
     asegurarse de que realmente contiene lo que dice contener; o se
     puede usar para derivar una variante de la imagen.

‘--file-system-type=TIPO’
‘-t TIPO’
     Para la acción ‘disk-image’, crea un sistema de ficheros del TIPO
     proporcionado en la imagen.

     Cuando se omite esta opción, ‘guix system’ usa ‘ext4’.

     ‘--file-system-type=iso9660’ produces an ISO-9660 image, suitable
     for burning on CDs and DVDs.

‘--image-size=TAMAÑO’
     Junto a las acciones ‘vm-image’ y ‘disk-image’, crea una imagen del
     ŦAMAÑO proporcionado. TAMAÑO debe ser un número de bytes o puede
     incluir una unidad como sufijo (*note size specifications:
     (coreutils)Block size.).

     Cuando se omite esta opción, ‘guix system’ calcula una estimación
     del tamaño de la imagen en función del tamaño del sistema declarado
     en FICHERO.

‘--network’
‘-N’
     Con la acción ‘container’, permite a los contenedores acceder a la
     red de la máquina anfitriona, es decir, no crea un espacio de
     nombres de red.

‘--root=FICHERO’
‘-r FICHERO’
     Hace que FICHERO sea un enlace simbólico al resultado, y lo
     registra como una raíz del recolector de basura.

‘--skip-checks’
     Omite las comprobaciones de seguridad previas a la instalación.

     Por omisión, ‘guix system init’ y ‘guix system reconfigure’
     realizan comprobaciones de seguridad: se aseguran de que los
     sistemas de ficheros que aparecen en la declaración
     ‘operating-system’ realmente existen (*note Sistemas de ficheros::)
     y que cualquier módulo del núcleo Linux que pudiese necesitarse
     durante el arranque se encuentre en ‘initrd-modules’ (*note Disco
     en RAM inicial::). El uso de esta opción omite todas estas
     comprobaciones.

‘--on-error=ESTRATEGIA’
     Aplica ESTRATEGIA cuando ocurre un error durante la lectura de
     FICHERO. ESTRATEGIA puede ser uno de los siguientes valores:

     ‘nothing-special’
          Informa concisamente del error y termina la ejecución. Es la
          estrategia predeterminada.

     ‘backtrace’
          Del mismo modo, pero también muestra la secuencia de llamadas.

     ‘debug’
          Informa del error y entra en el depurador de Guile. A partir
          de ahí, puede ejecutar órdenes como ‘,bt’ para obtener la
          secuencia de llamadas, ‘,locals’ para mostrar los valores de
          las variables locales, e inspeccionar el estado del programa
          de forma más general. *Note (guile)Debug Commands::, para una
          lista de órdenes de depuración disponibles.

   Una vez haya construido, configurado, reconfigurado y
re-reconfigurado su instalación de Guix, puede encontrar útil enumerar
las generaciones del sistema operativo disponibles en el disco—y que
puede seleccionar en el menú de arranque:

‘describe’
     Describe la generación actual del sistema: su nombre de fichero, el
     núcleo y el cargador de arranque usados, etcétera, así como
     información de procedencia cuando esté disponible.

‘list-generations’
     Muestra un resumen de cada generación del sistema operativo
     disponible en el disco, de manera legible por humanos. Es similar a
     la opción ‘--list-generations’ de ‘guix package’ (*note Invocación
     de guix package::).

     De manera opcional, se puede especificar un patrón, con la misma
     sintaxis que la usada en ‘guix package --list-generations’, para
     restringir la lista de generaciones mostradas. Por ejemplo, la
     siguiente orden muestra generaciones que tienen hasta 10 días de
     antigüedad:

          $ guix system list-generations 10d

   ¡La orden ‘guix system’ tiene aún más que ofrecer! Las siguientes
ordenes le permiten visualizar cual es la relación entre los servicios
del sistema:

‘extension-graph’
     Emit in Dot/Graphviz format to standard output the “service
     extension graph” of the operating system defined in FILE (*note
     Composición de servicios::, for more information on service
     extensions).

     La orden:

          $ guix system extension-graph FILE | xdot -

     shows the extension relations among services.

‘shepherd-graph’
     Emite en formato Dot/Graphviz por la salida estándar el “grafo de
     dependencias” de los servicios shepherd del sistema operativo
     definido en FICHERO. *Note Servicios de Shepherd::, para más
     información y un grafo de ejemplo.

   ---------- Footnotes ----------

   (1) Esta acción (y las acciones relacionadas ‘switch-generation’ y
‘roll-back’) son usables únicamente en sistemas que ya ejecuten el
sistema Guix.


File: guix.es.info,  Node: Invocación de guix deploy,  Next: Ejecutar Guix en una máquina virtual,  Prev: Invocación de guix system,  Up: Configuración del sistema

8.15 Invocación de ‘guix deploy’
================================

Ya hemos visto como usar declaraciones ‘operating-system’ para gestionar
la configuración de una máquina de manera local. Supongamos no obstante
que necesita configurar múltiples máquinas—quizá esté gestionando un
servicio en la web que se componga de varios servidores. ‘guix deploy’
le permite usar las mismas declaraciones ‘operating-system’ para
gestionar múltiples máquinas remotas como un único “despliegue” lógico.

     Nota: La funcionalidad descrita en esta sección está todavía en
     desarrollo y sujeta a cambios. Puede ponerse en contacto con
     nosotras a través de <guix-devel@gnu.org>.

     guix deploy FICHERO

   Dicha invocación llevará a cabo en las máquinas el despliegue al cual
el FICHERO evalúe. Como ejemplo, FICHERO puede contener una definición
como esta:

     ;; Este es un despliegue de Guix con una configuración en
     ;; mínima ("en los huesos"), sin servidor gráfico X11,
     ;; en una máquina con un daemon SSH escuchando en
     ;; localhost:2222. Una configuración como esta puede ser
     ;; apropiada para máquinas virtuales con puertos redirigidos
     ;; a la interfaz local de la máquina anfitriona.
     (use-service-modules networking ssh)
     (use-package-modules bootloaders)

     (define %sistema
       (operating-system
        (host-name "despliegue-gnu")
        (timezone "Etc/UTC")
        (bootloader (bootloader-configuration
                     (bootloader grub-bootloader)
                     (target "/dev/vda")
                     (terminal-outputs '(console))))
        (file-systems (cons (file-system
                             (mount-point "/")
                             (device "/dev/vda1")
                             (type "ext4"))
                            %base-file-systems))
        (services
         (append (list (service dhcp-client-service-type)
                       (service openssh-service-type
                                (openssh-configuration
                                 (permit-root-login #t)
                                 (allow-empty-passwords? #t))))
                 %base-services))))

     (list (machine
            (operating-system %sistema)
            (environment managed-host-environment-type)
            (configuration (machine-ssh-configuration
                            (host-name "localhost")
                            (system "x86_64-linux")
                            (user "alicia")
                            (identity "./id_rsa")
                            (port 2222)))))

   The file should evaluate to a list of MACHINE objects. This example,
upon being deployed, will create a new generation on the remote system
realizing the ‘operating-system’ declaration ‘%system’. ‘environment’
and ‘configuration’ specify how the machine should be provisioned—that
is, how the computing resources should be created and managed. The above
example does not create any resources, as a ‘'managed-host’ is a machine
that is already running the Guix system and available over the network.
This is a particularly simple case; a more complex deployment may
involve, for example, starting virtual machines through a Virtual
Private Server (VPS) provider. In such a case, a different ENVIRONMENT
type would be used.

   Tenga en cuenta que primero debe generar un par de claves en la
máquina coordinadora para permitir al daemon exportar archivos firmados
de ficheros en el almacén (*note Invocación de guix archive::):

     # guix archive --generate-key

Cada máquina de destino debe autorizar a la clave de la máquina maestra
para que acepte elementos del almacén que reciba de la coordinadora:

     # guix archive --authorize < clave-publica-coordinadora.txt

   La usuaria proporcionada en ‘user’, en este ejemplo, especifica la
cuenta de la usuaria con la que ingresar en el sistema para realizar el
despliegue. Su valor predeterminado es ‘root’, pero el ingreso al
sistema como root a través de SSH en algunos casos puede no estar
permitido. Para solventar este problema, ‘guix deploy’ puede ingresar al
sistema como una usuaria sin privilegios y ejecutar ‘sudo’ para escalar
privilegios. Esto funciona únicamente si ‘sudo’ está instalado en el
sistema remoto y se puede invocar de manera no interactiva como ‘user’.
Es decir: la línea de ‘sudoers’ que permite a la usuaria ‘user’ la
capacidad de usar ‘sudo’ debe contener la etiqueta ‘NOPASSWD’. Esto se
puede conseguir con el siguiente fragmento de la configuración de
sistema operativo:

     (use-modules ...
                  (gnu system))               ;para %sudoers-specification

     (define %usuaria "nombre")

     (operating-system
       ...
       (sudoers-file
          (plain-file "sudoers"
                      (string-append (plain-file-content %sudoers-specification)
                                     (format #f "~a ALL = NOPASSWD: ALL~%"
                                             %usuaria)))))


   Para obtener más información sobre el formato del fichero ‘sudoers’
consulte ‘man sudoers’.

 -- Tipo de datos: machine
     Tipo de datos que representa una máquina individual en un
     despliegue heterogéneo de Guix.

     ‘operating-system’
          El objeto de la configuración de sistema operativo a
          desplegar.

     ‘environment’
          Un objeto ‘environment-type’ que describe como debe
          aprovisionarse la máquina.

     ‘configuration’ (predeterminado: ‘#f’)
          Un objeto que describe la configuración para el entorno
          (‘environment’) de la máquina. Si ‘environment’ tiene una
          configuración predeterminada, puede usarse ‘#f’. No obstante,
          si se usa ‘#f’ para un entorno sin configuración
          predeterminada se emitirá un error.

 -- Tipo de datos: machine-ssh-configuration
     Tipo de datos que representa los parámetros del cliente SSH para
     una máquina con un entorno (‘environment’) de tipo gestionado
     (‘managed-host-environment-type’).

     ‘host-name’
     ‘build-locally?’ (predeterminado: ‘#t’)
          Si es falso, las derivaciones del sistema se construirán en la
          máquina sobre la que se realiza el despliegue.
     ‘system’
          El tipo de sistema que describe la arquitectura de la máquina
          sobre la que se realiza el despliegue—por ejemplo,
          ‘"x86_64-linux"’.
     ‘authorize?’ (predeterminado: ‘#t’)
          Si es verdadero, la clave de firma de la máquina coordinadora
          debe añadirse al anillo de claves del control de acceso (ACL)
          de la máquina remota.
     ‘port’ (predeterminado: ‘22’)
     ‘user’ (predeterminada: ‘"root"’)
     ‘identity’ (predeterminada: ‘#f’)
          Cuando se especifica, indica la ruta al fichero que contiene
          la clave privada de SSH para la identificación con la máquina
          remota.

     ‘host-key’ (predeterminada: ‘#f’)
          Esta debería ser la clave SSH de la máquina, que puede ser más
          o menos así:

               ssh-ed25519 AAAAC3Nz... root@example.org

          Cuando ‘host-key’ es ‘#f’, el servidor se identifica con el
          fichero ‘~/.ssh/known_hosts’, igual que hace el cliente ‘ssh’
          de OpenSSH.

 -- Tipo de datos: digital-ocean-configuration
     Tipo de datos que representa el Droplet que debe crearse para la
     máquina con ‘environment’ ‘digital-ocean-environment-type’.

     ‘ssh-key’
          La ruta al fichero que contiene la clave privada de SSH usada
          para la identificación con la máquina remota. En el futuro
          este campo puede desaparecer.
     ‘tags’
          Una lista de cadenas de etiquetas (“tags”) que identifican de
          manera unívoca a la máquina. Debe comprobarse que en un
          despliegue no existan dos máquinas que tengan el mismo
          conjunto de etiquetas.
     ‘region’
          Descriptor (slug) de región de Digital Ocean, como ‘"nyc3"’.
     ‘size’
          Descriptor (slug) de tamaño de Digital Ocean, como
          ‘"s-1vcpu-1gb"’
     ‘enable-ipv6?’
          Determina si droplet debe crearse con capacidad de usar redes
          IPv6 o no.


File: guix.es.info,  Node: Ejecutar Guix en una máquina virtual,  Next: Definición de servicios,  Prev: Invocación de guix deploy,  Up: Configuración del sistema

8.16 Ejecución de Guix en una máquina virtual
=============================================

Para ejecutar Guix en una máquina virtual (VM), se puede usar tanto la
imagen de máquina virtual de Guix preconstruida que se distribuye en
‘https://ftp.gnu.org/gnu/guix/guix-system-vm-image-1.0.1.17089-7e269.x86_64-linux.xz’.
Esta imagen es una imagen comprimida con formato QCOW. Primero tendrá
que descomprimirla con ‘xz -d’ y, una vez hecho, podrá proporcionarsela
a un emulador como QEMU (véase más detalles a continuación).

   This image boots the Xfce graphical environment and it contains some
commonly-used tools. You can install more software in the image by
running ‘guix package’ in a terminal (*note Invocación de guix
package::). You can also reconfigure the system based on its initial
configuration file available as ‘/run/current-system/configuration.scm’
(*note Uso de la configuración del sistema::).

   En vez de usar esta imagen preconstruida, se puede construir una
imagen propia para máquina virtual mediante el uso de ‘guix system
vm-image’ (*note Invocación de guix system::). La imagen devuelta se
encuentra en formato qcow2, el cual el emulador QEMU (https://qemu.org/)
puede usar de manera eficiente.

   Si ha construido su propia imagen, debe copiarla fuera del almacén y
proporcionarse a sí misma permisos de escritura sobre dicha copia antes
de usarla. En la invocación de QEMU debe elegir un emulador de sistema
que sea adecuado para su plataforma hardware. Esta es una invocación de
QEMU mínima que arrancará el resultado de ‘guix system vm-image’ en
hardware x86_64:

     $ qemu-system-x86_64 \
        -nic user,model=virtio-net-pci \
        -enable-kvm -m 1024 \
        -device virtio-blk,drive=midisco \
        -drive if=none,file=/tmp/imagen-qemu,id=midisco

   Aquí está el significado de cada una de esas opciones:

‘qemu-system-x86_64’
     Esto especifica la plataforma hardware a emular. Debe corresponder
     con el anfitrión.

‘-nic user,model=virtio-net-pci’
     Activa la pila de red en espacio de usuaria sin privilegios. El SO
     anfitrión puede acceder a la máquina virtualizada pero no al revés.
     Este es el modo más simple de poner la máquina en red. ‘model’
     especifica que dispositivo de red emular: ‘virtio-net-pci’ es un
     dispositivo especial para sistemas operativos virtualizados y
     recomendado para la mayor parte de usos. Asumiendo que su
     plataforma de hardware es x86_64, puede obtener una lista de
     adaptadores de red disponibles ejecutando ‘qemu-system-x86_64 -nic
     model=help’.

‘-enable-kvm’
     Si su sistema tiene extensiones de virtualización por hardware, la
     activación de la implementación de máquinas virtuales (KVM) del
     núcleo Linux hará que la ejecución sea más rápida.

‘-m 1024’
     RAM disponible para el sistema operativo virtualizado, en
     mebibytes. El valor predeterminado es 128 MiB, que puede ser
     insuficiente para algunas operaciones.

‘-device virtio-blk,drive=midisco’
     Crea un dispositivo ‘virtio-blk’ llamado “midisco”. ‘virtio-blk’ es
     un mecanismo de “paravirtualización” de dispositivos de bloques que
     permite a QEMU obtener un mejor rendimiento que se emulase una
     unidad de disco completa. Véase la documentación de QEMU y KVM para
     más información.

‘-drive if=none,file=/tmp/imagen-qemu,id=midisco’
     Usa nuestra imagen QCOW, el fichero ‘/tmp/imagen-qemu’, como
     almacenamiento físico para la unidad “midisco”.

   El guión ‘run-vm.sh’ predeterminado que devuelve la invocación de
‘guix system vm’ no añade una opción ‘-nic user’ de manera
predeterminada. Para obtener acceso a la red desde la máquina virtual
añada el servicio ‘(dhcp-client-service)’ a su definición de sistema y
arranque la máquina virtual mediante el uso de ‘`guix system vm
config.scm` -nic user’. Un punto importante a tener en cuenta del uso de
‘-ni user’ para la obtención de red es que ‘ping’ no funcionará, puesto
que usa el protocolo ICMP. Deberá usar una orden diferente para
comprobar la conectividad a la red, por ejemplo ‘guix download’.

8.16.1 Conexión a través de SSH
-------------------------------

Para activar SSH dentro de una máquina virtual debe añadir un servidor
SSH como ‘(openssh-service-type)’ en su máquina virtual (*note
‘openssh-service-type’: Servicios de red.). Además debe que redirigir el
puerto SSH, el 22 por omisión, a la máquina anfitriona. Puede hacerlo
con

     `guix system vm config.scm` -nic user,model=virtio-net-pci,hostfwd=tcp::10022-:22

   Para conectarse a la máquina virtual puede ejecutar

     ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 10022

   La ‘-p’ indica a ‘ssh’ el puerto al que se debe conectar. ‘-o
UserKnownHostsFile=/dev/null’ evita que ‘ssh’ se queje cada vez que
modifique su fichero ‘config.scm’ y la orden ‘-o
StrictHostKeyChecking=no’ evita que tenga que autorizar la conexión a
una máquina desconocida cada vez que se conecte.

8.16.2 Uso de ‘virt-viewer’ con Spice
-------------------------------------

Como alternativa al cliente gráfico predeterminado de ‘qemu’ puede usar
‘remote-viewer’ del paquete ‘virt-viewer’. Para conectarse proporcione
la opción ‘-spice port=5930,disable-ticketing’ a ‘qemu’. Véase la
sección previa para más información sobre cómo hacer esto.

   Spice también le permite hacer cosas como compartir su portapapeles
con su máquina virtual. Para activarlo debe proporcionar también las
siguientes opciones a ‘qemu’:

     -device virtio-serial-pci,id=virtio-serial0,max_ports=16,bus=pci.0,addr=0x5
     -chardev spicevmc,name=vdagent,id=vdagent
     -device virtserialport,nr=1,bus=virtio-serial0.0,chardev=vdagent,
     name=com.redhat.spice.0

   You’ll also need to add the ‘(spice-vdagent-service)’ to your system
definition (*note Spice service: Servicios misceláneos.).


File: guix.es.info,  Node: Definición de servicios,  Prev: Ejecutar Guix en una máquina virtual,  Up: Configuración del sistema

8.17 Definición de servicios
============================

Las secciones anteriores muestran los servicios disponibles y cómo se
pueden combinar en una declaración ‘operating-system’. ¿Pero cómo las
definimos en primer lugar? ¿Y qué es un servicio en cualquier caso?

* Menu:

* Composición de servicios::  El modelo para la composición de servicios.
* Tipos de servicios y servicios::  Tipos y servicios
* Referencia de servicios::  Referencia de la API.
* Servicios de Shepherd::    Un tipo de servicio particular.


File: guix.es.info,  Node: Composición de servicios,  Next: Tipos de servicios y servicios,  Up: Definición de servicios

8.17.1 Composición de servicios
-------------------------------

Definimos un “servicio” como, de manera genérica, algo que extiende la
funcionalidad del sistema operativo. Habitualmente un servicio es un
proceso—un “daemon”—iniciado cuando el sistema arranca: un servidor de
shell seguro, un servidor Web, el daemon de construcción de Guix, etc. A
veces un servicio es un daemon cuya ejecución puede ser iniciada por
otro daemon—por ejemplo, un servidor FTP iniciado por ‘inetd’ o un
servicio D-Bus activado por ‘dbus-daemon’. De manera ocasional, un
servicio no se puede asociar a un daemon. Por ejemplo, el servicio
“account” recopila cuentas de usuaria y se asegura que existen cuando el
sistema se ejecuta; el servicio “udev” recopila reglas de gestión de
dispositivos y los pone a disposición del daemon eudev; el servicio
‘/etc’ genera el contenido del directorio ‘/etc’ del sistema.

   Los servicios de Guix se conectan a través de “extensiones”. Por
ejemplo, el servicio de shell seguro _extiende_ Shepherd—el sistema de
inicio, el cual se ejecuta como PID 1—proporcionando las líneas de
órdenes para arrancar y parar el daemon de shell seguro (*note
‘lsh-service’: Servicios de red.); el servicio UPower extiende el
servicio D-Bus proporcionando su especificación ‘.service’, y extiende
el servicio udev al que proporciona reglas de gestión de dispositivos
(*note ‘upower-service’: Servicios de escritorio.); el servicio del
daemon de Guix extiende Shepherd proporcionando las líneas de órdenes
para arrancar y parar el daemon, y extiende el servicio de cuentas
proporcionando una lista de cuentas de usuarias de construcción que
necesita (*note Servicios base::).

   Al fin y al cabo, los servicios y sus relaciones de “extensión”
forman un grafo acíclico dirigido (GAD). Si representamos los servicios
como cajas y las extensiones como flechas, un sistema típico puede
proporcionar algo de este estilo:

[Grafo típico de extensiones de servicios.]
   En la base, podemos ver el “servicio del sistema”, el cual produce el
directorio que contiene todo lo necesario para ejecutar y arrancar el
sistema, como es devuelto por la orden ‘guix system build’. *Note
Referencia de servicios::, para aprender acerca de otros servicios
mostrados aquí. *Note la orden ‘guix system extension-graph’:
system-extension-graph, para información sobre cómo generar esta
representación para una definición particular de sistema operativo.

   Técnicamente, las desarrolladoras pueden definir “tipos de servicio”
para expresar estas relaciones. Puede haber cualquier número de
servicios de un tipo dado en el sistema—por ejemplo, un sistema que
ejecuta dos instancias del shell seguro GNU (lsh) tiene dos instancias
de LSH-SERVICE-TYPE, con parámetros diferentes.

   La siguiente sección describe la interfaz programática para tipos de
servicio y servicios.


File: guix.es.info,  Node: Tipos de servicios y servicios,  Next: Referencia de servicios,  Prev: Composición de servicios,  Up: Definición de servicios

8.17.2 Tipos de servicios y servicios
-------------------------------------

Un “tipo de servicio” es un nodo en el GAD descrito previamente.
Empecemos con un ejemplo simple, el tipo de servicio para el daemon de
construcción Guix (*note Invocación de guix-daemon::):

     (define guix-service-type
       (service-type
        (name 'guix)
        (extensions
         (list (service-extension shepherd-root-service-type guix-shepherd-service)
               (service-extension account-service-type guix-accounts)
               (service-extension activation-service-type guix-activation)))
        (default-value (guix-configuration))))

Define tres cosas:

  1. Un nombre, cuyo único propósito es facilitar la inspección y la
     depuración.

  2. Una lista de “extensiones de servicio”, donde cada extensión
     designa el tipo de servicio a extender y un procedimiento que,
     dados los parámetros del servicio, devuelve una lista de objetos
     para extender el servicio de dicho tipo.

     Cada tipo de servicio tiene al menos una extensión de servicio. La
     única excepción es el “tipo de servicio de arranque”, que es el
     último servicio.

  3. De manera opcional, un valor predeterminado para instancias de este
     tipo.

   En este ejemplo, ‘guix-service-type’ extiende tres servicios:

‘shepherd-root-service-type’
     El procedimiento ‘guix-shepherd-service’ define cómo se extiende el
     servicio de Shepherd. Es decir, devuelve un objeto
     ‘<shepherd-service>’ que define cómo se arranca y para
     ‘guix-daemon’ (*note Servicios de Shepherd::).

‘account-service-type’
     ‘guix-accounts’ crea la implementación de esta extensión para este
     servicio, la cual devuelve una lista de objetos ‘user-group’ y
     ‘user-account’ que representan las cuentas de usuarias de
     construcción (*note Invocación de guix-daemon::).

‘activation-service-type’
     Aquí ‘guix-activation’ es un procedimiento que devuelve una
     expresión-G, que es un fragmento de código a ejecutar en “tiempo de
     activación”—por ejemplo, cuando el servicio se arranca.

   Un servicio de este tipo se puede instanciar de esta manera:

     (service guix-service-type
              (guix-configuration
                (build-accounts 5)
                (use-substitutes? #f)))

   El segundo parámetro a la forma ‘service’ es un valor que representa
los parámetros de esta instancia específica del servicio. *Note
‘guix-configuration’: guix-configuration-type, para información acerca
del tipo de datos ‘guix-configuration’. Cuando se omite el valor, se usa
el valor predeterminado por ‘guix-service-type’:

     (service guix-service-type)

   ‘guix-service-type’ es bastante simple puesto que extiende otros
servicios pero no es extensible a su vez.

   El tipo de servicio para un servicio _extensible_ puede tener esta
forma:

     (define udev-service-type
       (service-type (name 'udev)
                     (extensions
                      (list (service-extension shepherd-root-service-type
                                               udev-shepherd-service)))

                     (compose concatenate)       ;concatena la lista de reglas
                     (extend (lambda (config rules)
                               (match config
                                 (($ <udev-configuration> udev initial-rules)
                                  (udev-configuration
                                   (udev udev)   ;el paquete udev usado
                                   (rules (append initial-rules rules)))))))))

   Este es el tipo de servicio para el daemon de gestión de dispositivos
eudev (https://wiki.gentoo.org/wiki/Project:Eudev). En comparación con
el ejemplo previo, además de una extensión de
‘shepherd-root-service-type’, podemos ver dos nuevos campos:

‘compose’
     Este es el procedimiento para “componer” la lista de extensiones en
     servicios de este tipo.

     Los servicios pueden extender el servicio udev proporcionandole una
     lista de reglas; componemos estas extensiones mediante una simple
     concatenación.

‘extend’
     Este procedimiento define cómo el valor del servicio se “extiende”
     con la composición de la extensión.

     Las extensiones de udev se componen en una lista de reglas, pero el
     valor del servicio udev es en sí un registro
     ‘<udev-configuration>’. Por tanto aquí extendemos el registro
     agregando la lista de reglas que contiene al final de la lista de
     reglas que se contribuyeron.

‘description’
     Es una cadena que proporciona una descripción del tipo de servicio.
     Dicha cadena puede contener lenguaje de marcado Texinfo (*note
     (texinfo)Overview::). La orden ‘guix system search’ busca estas
     cadenas y las muestra (*note Invocación de guix system::).

   Puede haber únicamente una instancia de un tipo de servicio
extensible como ‘udev-service-type’. Si hubiese más, las
especificaciones ‘service-extension’ serían ambiguas.

   ¿Todavía aquí? La siguiente sección proporciona una referencia de la
interfaz programática de los servicios.

