This is guix.ru.info, produced by makeinfo version 6.7 from
guix.ru.texi.

Copyright © 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 Ludovic
Courtès
Copyright © 2013, 2014, 2016 Andreas Enge
Copyright © 2013 Nikita Karetnikov
Copyright © 2014, 2015, 2016 Alex Kost
Copyright © 2015, 2016 Mathieu Lirzin
Copyright © 2014 Pierre-Antoine Rault
Copyright © 2015 Taylan Ulrich Bayırlı/Kammer
Copyright © 2015, 2016, 2017, 2019, 2020 Leo Famulari
Copyright © 2015, 2016, 2017, 2018, 2019, 2020 Ricardo Wurmus
Copyright © 2016 Ben Woodcroft
Copyright © 2016, 2017, 2018 Chris Marusich
Copyright © 2016, 2017, 2018, 2019, 2020 Efraim Flashner
Copyright © 2016 John Darrington
Copyright © 2016, 2017 Nikita Gillmann
Copyright © 2016, 2017, 2018, 2019, 2020 Jan Nieuwenhuizen
Copyright © 2016, 2017, 2018, 2019, 2020 Julien Lepiller
Copyright © 2016 Alex ter Weele
Copyright © 2016, 2017, 2018, 2019 Christopher Baines
Copyright © 2017, 2018, 2019 Clément Lassieur
Copyright © 2017, 2018 Mathieu Othacehe
Copyright © 2017 Federico Beffa
Copyright © 2017, 2018 Carlo Zancanaro
Copyright © 2017 Thomas Danckaert
Copyright © 2017 humanitiesNerd
Copyright © 2017 Christopher Allan Webber
Copyright © 2017, 2018, 2019, 2020 Marius Bakke
Copyright © 2017, 2019, 2020 Hartmut Goebel
Copyright © 2017, 2019, 2020 Maxim Cournoyer
Copyright © 2017, 2018, 2019, 2020 Tobias Geerinckx-Rice
Copyright © 2017 George Clemmer
Copyright © 2017 Andy Wingo
Copyright © 2017, 2018, 2019 Arun Isaac
Copyright © 2017 nee
Copyright © 2018 Rutger Helling
Copyright © 2018 Oleg Pykhalov
Copyright © 2018 Mike Gerwitz
Copyright © 2018 Pierre-Antoine Rouby
Copyright © 2018, 2019 Gábor Boskovits
Copyright © 2018, 2019 Florian Pelz
Copyright © 2018 Laura Lazzati
Copyright © 2018 Alex Vong
Copyright © 2019 Josh Holland
Copyright © 2019, 2020 Diego Nicola Barbato
Copyright © 2019 Ivan Petkov
Copyright © 2019 Jakob L. Kreuze
Copyright © 2019 Kyle Andrews
Copyright © 2019 Alex Griffin
Copyright © 2019 Guillaume Le Vaillant
Copyright © 2020 Leo Prikler
Copyright © 2019, 2020 Simon Tournier
Copyright © 2020 Wiktor Żelazny
Copyright © 2020 Damien Cassou
Copyright © 2020 Jakub Kądziołka
Copyright © 2020 Jack Hill
Copyright © 2020 Naga Malleswari
Copyright © 2020 Brice Waegeneire
Copyright © 2020 R Veera Kumar
Copyright © 2020 Pierre Langlois
Copyright © 2020 pinoaffe

   Разрешено копирование, распространение и/или модификация этого
документа на условиях лицензии свободной документации GNU (GNU FDL)
версии 1.3 или любой более поздней версии, опубликованной Фондом
свободного программного обеспечения (FSF), исключая неизменяемые секции,
исключая тексты, размещенные на переплёте и задней стороне обложки.
Копия лицензии включена в документ в разделе под названием "GNU Free
Documentation Licens".
INFO-DIR-SECTION Администрирование системы
START-INFO-DIR-ENTRY
* Guix: (guix).              Управление установленным
                               ПО и настройка системы
* guix package: (guix)Запуск guix package.  Установка,
                                                    удаление и
                                                    обновление
                                                    пакетов
* guix gc: (guix)Запуск guix gc.  Освобождение
                                          неиспользуемого
                                          места на диске
* guix pull: (guix)Запуск guix pull.  Обновление
                                              списка доступных
                                              пакетов
* guix system: (guix)Запуск guix system.  Управление
                                                  конфигурацией
                                                  ОС
* guix deploy: (guix)Запуск guix deploy.  Управление
                                                  конфигурациями
                                                  ОС на удалённых
                                                  машинах
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Разработка программного обеспечения
START-INFO-DIR-ENTRY
* guix environment: (guix)Запуск guix environment.  Сборка
                                                            среды
                                                            разработки
                                                            с помощью
                                                            Guix
* guix build: (guix)Запуск guix build.  Сборка пакетов
* guix pack: (guix)Запуск guix pack.  Создание
                                              бинарных пакетов
END-INFO-DIR-ENTRY


File: guix.ru.info,  Node: Веб-сервисы,  Next: Сервисы сертификатов,  Prev: LDAP Services,  Up: Службы

8.8.16 Веб-сервисы
------------------

The ‘(gnu services web)’ module provides the Apache HTTP Server, the
nginx web server, and also a fastcgi wrapper daemon.

Apache HTTP Server
..................

 -- Scheme Variable: httpd-service-type
     Service type for the Apache HTTP (https://httpd.apache.org/) server
     (“httpd”).  The value for this service type is a
     ‘httpd-configuration’ record.

     A simple example configuration is given below.

          (service httpd-service-type
                   (httpd-configuration
                     (config
                       (httpd-config-file
                         (server-name "www.example.com")
                         (document-root "/srv/http/www.example.com")))))

     Other services can also extend the ‘httpd-service-type’ to add to
     the configuration.

          (simple-service 'www.example.com-server httpd-service-type
                          (list
                            (httpd-virtualhost
                              "*:80"
                              (list (string-join '("ServerName www.example.com"
                                                    "DocumentRoot /srv/http/www.example.com")
                                                 "\n")))))

   The details for the ‘httpd-configuration’, ‘httpd-module’,
‘httpd-config-file’ and ‘httpd-virtualhost’ record types are given
below.

 -- Data Type: httpd-configuration
     This data type represents the configuration for the httpd service.

     ‘package’ (default: ‘httpd’)
          The httpd package to use.

     ‘pid-file’ (default: ‘"/var/run/httpd"’)
          The pid file used by the shepherd-service.

     ‘config’ (default: ‘(httpd-config-file)’)
          The configuration file to use with the httpd service.  The
          default value is a ‘httpd-config-file’ record, but this can
          also be a different G-expression that generates a file, for
          example a ‘plain-file’.  A file outside of the store can also
          be specified through a string.

 -- Data Type: httpd-module
     This data type represents a module for the httpd service.

     ‘name’
          The name of the module.

     ‘file’
          The file for the module.  This can be relative to the httpd
          package being used, the absolute location of a file, or a
          G-expression for a file within the store, for example
          ‘(file-append mod-wsgi "/modules/mod_wsgi.so")’.

 -- Scheme Variable: %default-httpd-modules
     A default list of ‘httpd-module’ objects.

 -- Data Type: httpd-config-file
     This data type represents a configuration file for the httpd
     service.

     ‘modules’ (default: ‘%default-httpd-modules’)
          The modules to load.  Additional modules can be added here, or
          loaded by additional configuration.

          For example, in order to handle requests for PHP files, you
          can use Apache’s ‘mod_proxy_fcgi’ module along with
          ‘php-fpm-service-type’:

               (service httpd-service-type
                        (httpd-configuration
                         (config
                          (httpd-config-file
                           (modules (cons*
                                     (httpd-module
                                      (name "proxy_module")
                                      (file "modules/mod_proxy.so"))
                                     (httpd-module
                                      (name "proxy_fcgi_module")
                                      (file "modules/mod_proxy_fcgi.so"))
                                     %default-httpd-modules))
                           (extra-config (list "\
               <FilesMatch \\.php$>
                   SetHandler \"proxy:unix:/var/run/php-fpm.sock|fcgi://localhost/\"
               </FilesMatch>"))))))
               (service php-fpm-service-type
                        (php-fpm-configuration
                         (socket "/var/run/php-fpm.sock")
                         (socket-group "httpd")))

     ‘server-root’ (default: ‘httpd’)
          The ‘ServerRoot’ in the configuration file, defaults to the
          httpd package.  Directives including ‘Include’ and
          ‘LoadModule’ are taken as relative to the server root.

     ‘server-name’ (default: ‘#f’)
          The ‘ServerName’ in the configuration file, used to specify
          the request scheme, hostname and port that the server uses to
          identify itself.

          This doesn’t need to be set in the server config, and can be
          specified in virtual hosts.  The default is ‘#f’ to not
          specify a ‘ServerName’.

     ‘document-root’ (default: ‘"/srv/http"’)
          The ‘DocumentRoot’ from which files will be served.

     ‘listen’ (default: ‘'("80")’)
          The list of values for the ‘Listen’ directives in the config
          file.  The value should be a list of strings, when each string
          can specify the port number to listen on, and optionally the
          IP address and protocol to use.

     ‘pid-file’ (default: ‘"/var/run/httpd"’)
          The ‘PidFile’ to use.  This should match the ‘pid-file’ set in
          the ‘httpd-configuration’ so that the Shepherd service is
          configured correctly.

     ‘error-log’ (default: ‘"/var/log/httpd/error_log"’)
          The ‘ErrorLog’ to which the server will log errors.

     ‘user’ (default: ‘"httpd"’)
          The ‘User’ which the server will answer requests as.

     ‘group’ (default: ‘"httpd"’)
          The ‘Group’ which the server will answer requests as.

     ‘extra-config’ (default: ‘(list "TypesConfig etc/httpd/mime.types")’)
          A flat list of strings and G-expressions which will be added
          to the end of the configuration file.

          Any values which the service is extended with will be appended
          to this list.

 -- Data Type: httpd-virtualhost
     This data type represents a virtualhost configuration block for the
     httpd service.

     These should be added to the extra-config for the httpd-service.

          (simple-service 'www.example.com-server httpd-service-type
                          (list
                            (httpd-virtualhost
                              "*:80"
                              (list (string-join '("ServerName www.example.com"
                                                    "DocumentRoot /srv/http/www.example.com")
                                                 "\n")))))

     ‘addresses-and-ports’
          The addresses and ports for the ‘VirtualHost’ directive.

     ‘contents’
          The contents of the ‘VirtualHost’ directive, this should be a
          list of strings and G-expressions.

NGINX
.....

 -- Scheme Variable: nginx-service-type
     Service type for the NGinx (https://nginx.org/) web server.  The
     value for this service type is a ‘<nginx-configuration>’ record.

     A simple example configuration is given below.

          (service nginx-service-type
                   (nginx-configuration
                     (server-blocks
                       (list (nginx-server-configuration
                               (server-name '("www.example.com"))
                               (root "/srv/http/www.example.com"))))))

     In addition to adding server blocks to the service configuration
     directly, this service can be extended by other services to add
     server blocks, as in this example:

          (simple-service 'my-extra-server nginx-service-type
                          (list (nginx-server-configuration
                                  (root "/srv/http/extra-website")
                                  (try-files (list "$uri" "$uri/index.html")))))

   At startup, ‘nginx’ has not yet read its configuration file, so it
uses a default file to log error messages.  If it fails to load its
configuration file, that is where error messages are logged.  After the
configuration file is loaded, the default error log file changes as per
configuration.  In our case, startup error messages can be found in
‘/var/run/nginx/logs/error.log’, and after configuration in
‘/var/log/nginx/error.log’.  The second location can be changed with the
LOG-DIRECTORY configuration option.

 -- Data Type: nginx-configuration
     This data type represents the configuration for NGinx.  Some
     configuration can be done through this and the other provided
     record types, or alternatively, a config file can be provided.

     ‘nginx’ (default: ‘nginx’)
          The nginx package to use.

     ‘log-directory’ (default: ‘"/var/log/nginx"’)
          The directory to which NGinx will write log files.

     ‘run-directory’ (default: ‘"/var/run/nginx"’)
          The directory in which NGinx will create a pid file, and write
          temporary files.

     ‘server-blocks’ (default: ‘'()’)
          A list of “server blocks” to create in the generated
          configuration file, the elements should be of type
          ‘<nginx-server-configuration>’.

          The following example would setup NGinx to serve
          ‘www.example.com’ from the ‘/srv/http/www.example.com’
          directory, without using HTTPS.
               (service nginx-service-type
                        (nginx-configuration
                          (server-blocks
                            (list (nginx-server-configuration
                                    (server-name '("www.example.com"))
                                    (root "/srv/http/www.example.com"))))))

     ‘upstream-blocks’ (default: ‘'()’)
          A list of “upstream blocks” to create in the generated
          configuration file, the elements should be of type
          ‘<nginx-upstream-configuration>’.

          Configuring upstreams through the ‘upstream-blocks’ can be
          useful when combined with ‘locations’ in the
          ‘<nginx-server-configuration>’ records.  The following example
          creates a server configuration with one location
          configuration, that will proxy requests to a upstream
          configuration, which will handle requests with two servers.

               (service
                 nginx-service-type
                 (nginx-configuration
                   (server-blocks
                     (list (nginx-server-configuration
                             (server-name '("www.example.com"))
                             (root "/srv/http/www.example.com")
                             (locations
                               (list
                                 (nginx-location-configuration
                                 (uri "/path1")
                                 (body '("proxy_pass http://server-proxy;"))))))))
                   (upstream-blocks
                     (list (nginx-upstream-configuration
                             (name "server-proxy")
                             (servers (list "server1.example.com"
                                            "server2.example.com")))))))

     ‘file’ (default: ‘#f’)
          If a configuration FILE is provided, this will be used, rather
          than generating a configuration file from the provided
          ‘log-directory’, ‘run-directory’, ‘server-blocks’ and
          ‘upstream-blocks’.  For proper operation, these arguments
          should match what is in FILE to ensure that the directories
          are created when the service is activated.

          This can be useful if you have an existing configuration file,
          or it’s not possible to do what is required through the other
          parts of the nginx-configuration record.

     ‘server-names-hash-bucket-size’ (default: ‘#f’)
          Bucket size for the server names hash tables, defaults to ‘#f’
          to use the size of the processors cache line.

     ‘server-names-hash-bucket-max-size’ (default: ‘#f’)
          Maximum bucket size for the server names hash tables.

     ‘modules’ (default: ‘'()’)
          List of nginx dynamic modules to load.  This should be a list
          of file names of loadable modules, as in this example:

               (modules
                (list
                 (file-append nginx-accept-language-module "\
               /etc/nginx/modules/ngx_http_accept_language_module.so")))

     ‘global-directives’ (default: ‘'((events . ()))’)
          Association list of global directives for the top level of the
          nginx configuration.  Values may themselves be association
          lists.

               (global-directives
                `((worker_processes . 16)
                  (pcre_jit . on)
                  (events . ((worker_connections . 1024)))))

     ‘extra-content’ (default: ‘""’)
          Extra content for the ‘http’ block.  Should be string or a
          string valued G-expression.

 -- Data Type: nginx-server-configuration
     Data type representing the configuration of an nginx server block.
     This type has the following parameters:

     ‘listen’ (default: ‘'("80" "443 ssl")’)
          Each ‘listen’ directive sets the address and port for IP, or
          the path for a UNIX-domain socket on which the server will
          accept requests.  Both address and port, or only address or
          only port can be specified.  An address may also be a
          hostname, for example:

               '("127.0.0.1:8000" "127.0.0.1" "8000" "*:8000" "localhost:8000")

     ‘server-name’ (default: ‘(list 'default)’)
          A list of server names this server represents.  ‘'default’
          represents the default server for connections matching no
          other server.

     ‘root’ (default: ‘"/srv/http"’)
          Root of the website nginx will serve.

     ‘locations’ (default: ‘'()’)
          A list of “nginx-location-configuration” or
          “nginx-named-location-configuration” records to use within
          this server block.

     ‘index’ (default: ‘(list "index.html")’)
          Index files to look for when clients ask for a directory.  If
          it cannot be found, Nginx will send the list of files in the
          directory.

     ‘try-files’ (default: ‘'()’)
          A list of files whose existence is checked in the specified
          order.  ‘nginx’ will use the first file it finds to process
          the request.

     ‘ssl-certificate’ (default: ‘#f’)
          Where to find the certificate for secure connections.  Set it
          to ‘#f’ if you don’t have a certificate or you don’t want to
          use HTTPS.

     ‘ssl-certificate-key’ (default: ‘#f’)
          Where to find the private key for secure connections.  Set it
          to ‘#f’ if you don’t have a key or you don’t want to use
          HTTPS.

     ‘server-tokens?’ (default: ‘#f’)
          Whether the server should add its configuration to response.

     ‘raw-content’ (default: ‘'()’)
          A list of raw lines added to the server block.

 -- Data Type: nginx-upstream-configuration
     Data type representing the configuration of an nginx ‘upstream’
     block.  This type has the following parameters:

     ‘name’
          Name for this group of servers.

     ‘servers’
          Specify the addresses of the servers in the group.  The
          address can be specified as a IP address (e.g. ‘127.0.0.1’),
          domain name (e.g. ‘backend1.example.com’) or a path to a UNIX
          socket using the prefix ‘unix:’.  For addresses using an IP
          address or domain name, the default port is 80, and a
          different port can be specified explicitly.

 -- Data Type: nginx-location-configuration
     Data type representing the configuration of an nginx ‘location’
     block.  This type has the following parameters:

     ‘uri’
          URI which this location block matches.

     ‘body’
          Body of the location block, specified as a list of strings.
          This can contain many configuration directives.  For example,
          to pass requests to a upstream server group defined using an
          ‘nginx-upstream-configuration’ block, the following directive
          would be specified in the body ‘(list "proxy_pass
          http://upstream-name;")’.

 -- Data Type: nginx-named-location-configuration
     Data type representing the configuration of an nginx named location
     block.  Named location blocks are used for request redirection, and
     not used for regular request processing.  This type has the
     following parameters:

     ‘name’
          Name to identify this location block.

     ‘body’
          *Note nginx-location-configuration body::, as the body for
          named location blocks can be used in a similar way to the
          ‘nginx-location-configuration body’.  One restriction is that
          the body of a named location block cannot contain location
          blocks.

Varnish Cache
.............

Varnish is a fast cache server that sits in between web applications and
end users.  It proxies requests from clients and caches the accessed
URLs such that multiple requests for the same resource only creates one
request to the back-end.

 -- Scheme Variable: varnish-service-type
     Service type for the Varnish daemon.

 -- Data Type: varnish-configuration
     Data type representing the ‘varnish’ service configuration.  This
     type has the following parameters:

     ‘package’ (default: ‘varnish’)
          The Varnish package to use.

     ‘name’ (default: ‘"default"’)
          A name for this Varnish instance.  Varnish will create a
          directory in ‘/var/varnish/’ with this name and keep temporary
          files there.  If the name starts with a forward slash, it is
          interpreted as an absolute directory name.

          Pass the ‘-n’ argument to other Varnish programs to connect to
          the named instance, e.g. ‘varnishncsa -n default’.

     ‘backend’ (default: ‘"localhost:8080"’)
          The backend to use.  This option has no effect if ‘vcl’ is
          set.

     ‘vcl’ (default: #f)
          The “VCL” (Varnish Configuration Language) program to run.  If
          this is ‘#f’, Varnish will proxy ‘backend’ using the default
          configuration.  Otherwise this must be a file-like object with
          valid VCL syntax.

          For example, to mirror www.gnu.org (https://www.gnu.org) with
          VCL you can do something along these lines:

               (define %gnu-mirror
                 (plain-file "gnu.vcl"
                             "vcl 4.1;
               backend gnu { .host = \"www.gnu.org\"; }"))

               (operating-system
                 ;; ...
                 (services (cons (service varnish-service-type
                                          (varnish-configuration
                                           (listen '(":80"))
                                           (vcl %gnu-mirror)))
                                 %base-services)))

          The configuration of an already running Varnish instance can
          be inspected and changed using the ‘varnishadm’ program.

          Consult the Varnish User Guide
          (https://varnish-cache.org/docs/) and Varnish Book
          (https://book.varnish-software.com/4.0/) for comprehensive
          documentation on Varnish and its configuration language.

     ‘listen’ (default: ‘'("localhost:80")’)
          List of addresses Varnish will listen on.

     ‘storage’ (default: ‘'("malloc,128m")’)
          List of storage backends that will be available in VCL.

     ‘parameters’ (default: ‘'()’)
          List of run-time parameters in the form ‘'(("parameter" .
          "value"))’.

     ‘extra-options’ (default: ‘'()’)
          Additional arguments to pass to the ‘varnishd’ process.

Patchwork
.........

Patchwork is a patch tracking system.  It can collect patches sent to a
mailing list, and display them in a web interface.

 -- Scheme Variable: patchwork-service-type
     Service type for Patchwork.

   The following example is an example of a minimal service for
Patchwork, for the ‘patchwork.example.com’ domain.

     (service patchwork-service-type
              (patchwork-configuration
               (domain "patchwork.example.com")
               (settings-module
                (patchwork-settings-module
                 (allowed-hosts (list domain))
                 (default-from-email "patchwork@patchwork.example.com")))
               (getmail-retriever-config
                (getmail-retriever-configuration
                 (type "SimpleIMAPSSLRetriever")
                 (server "imap.example.com")
                 (port 993)
                 (username "patchwork")
                 (password-command
                  (list (file-append coreutils "/bin/cat")
                        "/etc/getmail-patchwork-imap-password"))
                 (extra-parameters
                 '((mailboxes . ("Patches"))))))))


   There are three records for configuring the Patchwork service.  The
‘<patchwork-configuration>’ relates to the configuration for Patchwork
within the HTTPD service.

   The ‘settings-module’ field within the ‘<patchwork-configuration>’
record can be populated with the ‘<patchwork-settings-module>’ record,
which describes a settings module that is generated within the Guix
store.

   For the ‘database-configuration’ field within the
‘<patchwork-settings-module>’, the ‘<patchwork-database-configuration>’
must be used.

 -- Data Type: patchwork-configuration
     Data type representing the Patchwork service configuration.  This
     type has the following parameters:

     ‘patchwork’ (default: ‘patchwork’)
          The Patchwork package to use.

     ‘domain’
          The domain to use for Patchwork, this is used in the HTTPD
          service virtual host.

     ‘settings-module’
          The settings module to use for Patchwork.  As a Django
          application, Patchwork is configured with a Python module
          containing the settings.  This can either be an instance of
          the ‘<patchwork-settings-module>’ record, any other record
          that represents the settings in the store, or a directory
          outside of the store.

     ‘static-path’ (default: ‘"/static/"’)
          The path under which the HTTPD service should serve the static
          files.

     ‘getmail-retriever-config’
          The getmail-retriever-configuration record value to use with
          Patchwork.  Getmail will be configured with this value, the
          messages will be delivered to Patchwork.

 -- Data Type: patchwork-settings-module
     Data type representing a settings module for Patchwork.  Some of
     these settings relate directly to Patchwork, but others relate to
     Django, the web framework used by Patchwork, or the Django Rest
     Framework library.  This type has the following parameters:

     ‘database-configuration’ (default: ‘(patchwork-database-configuration)’)
          The database connection settings used for Patchwork.  See the
          ‘<patchwork-database-configuration>’ record type for more
          information.

     ‘secret-key-file’ (default: ‘"/etc/patchwork/django-secret-key"’)
          Patchwork, as a Django web application uses a secret key for
          cryptographically signing values.  This file should contain a
          unique unpredictable value.

          If this file does not exist, it will be created and populated
          with a random value by the patchwork-setup shepherd service.

          This setting relates to Django.

     ‘allowed-hosts’
          A list of valid hosts for this Patchwork service.  This should
          at least include the domain specified in the
          ‘<patchwork-configuration>’ record.

          This is a Django setting.

     ‘default-from-email’
          The email address from which Patchwork should send email by
          default.

          This is a Patchwork setting.

     ‘static-url’ (default: ‘#f’)
          The URL to use when serving static assets.  It can be part of
          a URL, or a full URL, but must end in a ‘/’.

          If the default value is used, the ‘static-path’ value from the
          ‘<patchwork-configuration>’ record will be used.

          This is a Django setting.

     ‘admins’ (default: ‘'()’)
          Email addresses to send the details of errors that occur.
          Each value should be a list containing two elements, the name
          and then the email address.

          This is a Django setting.

     ‘debug?’ (default: ‘#f’)
          Whether to run Patchwork in debug mode.  If set to ‘#t’,
          detailed error messages will be shown.

          This is a Django setting.

     ‘enable-rest-api?’ (default: ‘#t’)
          Whether to enable the Patchwork REST API.

          This is a Patchwork setting.

     ‘enable-xmlrpc?’ (default: ‘#t’)
          Whether to enable the XML RPC API.

          This is a Patchwork setting.

     ‘force-https-links?’ (default: ‘#t’)
          Whether to use HTTPS links on Patchwork pages.

          This is a Patchwork setting.

     ‘extra-settings’ (default: ‘""’)
          Extra code to place at the end of the Patchwork settings
          module.

 -- Data Type: patchwork-database-configuration
     Data type representing the database configuration for Patchwork.

     ‘engine’ (default: ‘"django.db.backends.postgresql_psycopg2"’)
          The database engine to use.

     ‘name’ (default: ‘"patchwork"’)
          The name of the database to use.

     ‘user’ (default: ‘"httpd"’)
          The user to connect to the database as.

     ‘password’ (default: ‘""’)
          The password to use when connecting to the database.

     ‘host’ (default: ‘""’)
          The host to make the database connection to.

     ‘port’ (default: ‘""’)
          The port on which to connect to the database.

Mumi
....

Mumi (https://git.elephly.net/gitweb.cgi?p=software/mumi.git) is a Web
interface to the Debbugs bug tracker, by default for the GNU instance
(https://bugs.gnu.org).  Mumi is a Web server, but it also fetches and
indexes mail retrieved from Debbugs.

 -- Scheme Variable: mumi-service-type
     This is the service type for Mumi.

 -- Data Type: mumi-configuration
     Data type representing the Mumi service configuration.  This type
     has the following fields:

     ‘mumi’ (default: ‘mumi’)
          The Mumi package to use.

     ‘mailer?’ (default: ‘#true’)
          Whether to enable or disable the mailer component.

     ‘mumi-configuration-sender’
          The email address used as the sender for comments.

     ‘mumi-configuration-smtp’
          A URI to configure the SMTP settings for Mailutils.  This
          could be something like ‘sendmail:///path/to/bin/msmtp’ or any
          other URI supported by Mailutils.  *Note SMTP Mailboxes:
          (mailutils)SMTP Mailboxes.

FastCGI
.......

FastCGI is an interface between the front-end and the back-end of a web
service.  It is a somewhat legacy facility; new web services should
generally just talk HTTP between the front-end and the back-end.
However there are a number of back-end services such as PHP or the
optimized HTTP Git repository access that use FastCGI, so we have
support for it in Guix.

   To use FastCGI, you configure the front-end web server (e.g., nginx)
to dispatch some subset of its requests to the fastcgi backend, which
listens on a local TCP or UNIX socket.  There is an intermediary
‘fcgiwrap’ program that sits between the actual backend process and the
web server.  The front-end indicates which backend program to run,
passing that information to the ‘fcgiwrap’ process.

 -- Scheme Variable: fcgiwrap-service-type
     A service type for the ‘fcgiwrap’ FastCGI proxy.

 -- Data Type: fcgiwrap-configuration
     Data type representing the configuration of the ‘fcgiwrap’ service.
     This type has the following parameters:
     ‘package’ (default: ‘fcgiwrap’)
          The fcgiwrap package to use.

     ‘socket’ (default: ‘tcp:127.0.0.1:9000’)
          The socket on which the ‘fcgiwrap’ process should listen, as a
          string.  Valid SOCKET values include
          ‘unix:/PATH/TO/UNIX/SOCKET’, ‘tcp:DOT.TED.QU.AD:PORT’ and
          ‘tcp6:[IPV6_ADDR]:port’.

     ‘user’ (default: ‘fcgiwrap’)
     ‘group’ (default: ‘fcgiwrap’)
          The user and group names, as strings, under which to run the
          ‘fcgiwrap’ process.  The ‘fastcgi’ service will ensure that if
          the user asks for the specific user or group names ‘fcgiwrap’
          that the corresponding user and/or group is present on the
          system.

          It is possible to configure a FastCGI-backed web service to
          pass HTTP authentication information from the front-end to the
          back-end, and to allow ‘fcgiwrap’ to run the back-end process
          as a corresponding local user.  To enable this capability on
          the back-end, run ‘fcgiwrap’ as the ‘root’ user and group.
          Note that this capability also has to be configured on the
          front-end as well.

   PHP-FPM (FastCGI Process Manager) is an alternative PHP FastCGI
implementation with some additional features useful for sites of any
size.

   These features include:
   • Adaptive process spawning
   • Basic statistics (similar to Apache’s mod_status)
   • Advanced process management with graceful stop/start
   • Ability to start workers with different uid/gid/chroot/environment
     and different php.ini (replaces safe_mode)
   • Stdout & stderr logging
   • Emergency restart in case of accidental opcode cache destruction
   • Accelerated upload support
   • Support for a "slowlog"
   • Enhancements to FastCGI, such as fastcgi_finish_request() - a
     special function to finish request & flush all data while
     continuing to do something time-consuming (video converting, stats
     processing, etc.)
   ... and much more.

 -- Scheme Variable: php-fpm-service-type
     A Service type for ‘php-fpm’.

 -- Data Type: php-fpm-configuration
     Data Type for php-fpm service configuration.
     ‘php’ (default: ‘php’)
          The php package to use.
     ‘socket’ (default: ‘(string-append "/var/run/php" (version-major (package-version php)) "-fpm.sock")’)
          The address on which to accept FastCGI requests.  Valid
          syntaxes are:
          ‘"ip.add.re.ss:port"’
               Listen on a TCP socket to a specific address on a
               specific port.
          ‘"port"’
               Listen on a TCP socket to all addresses on a specific
               port.
          ‘"/path/to/unix/socket"’
               Listen on a unix socket.

     ‘user’ (default: ‘php-fpm’)
          User who will own the php worker processes.
     ‘group’ (default: ‘php-fpm’)
          Group of the worker processes.
     ‘socket-user’ (default: ‘php-fpm’)
          User who can speak to the php-fpm socket.
     ‘socket-group’ (default: ‘nginx’)
          Group that can speak to the php-fpm socket.
     ‘pid-file’ (default: ‘(string-append "/var/run/php" (version-major (package-version php)) "-fpm.pid")’)
          The process id of the php-fpm process is written to this file
          once the service has started.
     ‘log-file’ (default: ‘(string-append "/var/log/php" (version-major (package-version php)) "-fpm.log")’)
          Log for the php-fpm master process.
     ‘process-manager’ (default: ‘(php-fpm-dynamic-process-manager-configuration)’)
          Detailed settings for the php-fpm process manager.  Must be
          one of:
          ‘<php-fpm-dynamic-process-manager-configuration>’
          ‘<php-fpm-static-process-manager-configuration>’
          ‘<php-fpm-on-demand-process-manager-configuration>’
     ‘display-errors’ (default ‘#f’)
          Determines whether php errors and warning should be sent to
          clients and displayed in their browsers.  This is useful for
          local php development, but a security risk for public sites,
          as error messages can reveal passwords and personal data.
     ‘timezone’ (default ‘#f’)
          Specifies ‘php_admin_value[date.timezone]’ parameter.
     ‘workers-logfile’ (default ‘(string-append "/var/log/php" (version-major (package-version php)) "-fpm.www.log")’)
          This file will log the ‘stderr’ outputs of php worker
          processes.  Can be set to ‘#f’ to disable logging.
     ‘file’ (default ‘#f’)
          An optional override of the whole configuration.  You can use
          the ‘mixed-text-file’ function or an absolute filepath for it.

 -- Data type: php-fpm-dynamic-process-manager-configuration
     Data Type for the ‘dynamic’ php-fpm process manager.  With the
     ‘dynamic’ process manager, spare worker processes are kept around
     based on it’s configured limits.
     ‘max-children’ (default: ‘5’)
          Maximum of worker processes.
     ‘start-servers’ (default: ‘2’)
          How many worker processes should be started on start-up.
     ‘min-spare-servers’ (default: ‘1’)
          How many spare worker processes should be kept around at
          minimum.
     ‘max-spare-servers’ (default: ‘3’)
          How many spare worker processes should be kept around at
          maximum.

 -- Data type: php-fpm-static-process-manager-configuration
     Data Type for the ‘static’ php-fpm process manager.  With the
     ‘static’ process manager, an unchanging number of worker processes
     are created.
     ‘max-children’ (default: ‘5’)
          Maximum of worker processes.

 -- Data type: php-fpm-on-demand-process-manager-configuration
     Data Type for the ‘on-demand’ php-fpm process manager.  With the
     ‘on-demand’ process manager, worker processes are only created as
     requests arrive.
     ‘max-children’ (default: ‘5’)
          Maximum of worker processes.
     ‘process-idle-timeout’ (default: ‘10’)
          The time in seconds after which a process with no requests is
          killed.

 -- Scheme Procedure: nginx-php-location [#:nginx-package nginx]
           [socket (string-append "/var/run/php" (version-major
          (package-version php))  "-fpm.sock")] A helper function to
     quickly add php to an ‘nginx-server-configuration’.

   A simple services setup for nginx with php can look like this:
     (services (cons* (service dhcp-client-service-type)
                      (service php-fpm-service-type)
                      (service nginx-service-type
                               (nginx-server-configuration
                                (server-name '("example.com"))
                                (root "/srv/http/")
                                (locations
                                 (list (nginx-php-location)))
                                (listen '("80"))
                                (ssl-certificate #f)
                                (ssl-certificate-key #f)))
                      %base-services))

   The cat avatar generator is a simple service to demonstrate the use
of php-fpm in ‘Nginx’.  It is used to generate cat avatar from a seed,
for instance the hash of a user’s email address.

 -- Scheme Procedure: cat-avatar-generator-service [#:cache-dir
          "/var/cache/cat-avatar-generator"]  [#:package
     cat-avatar-generator]  [#:configuration
     (nginx-server-configuration)] Returns an nginx-server-configuration
     that inherits ‘configuration’.  It extends the nginx configuration
     to add a server block that serves ‘package’, a version of
     cat-avatar-generator.  During execution, cat-avatar-generator will
     be able to use ‘cache-dir’ as its cache directory.

   A simple setup for cat-avatar-generator can look like this:
     (services (cons* (cat-avatar-generator-service
                       #:configuration
                       (nginx-server-configuration
                         (server-name '("example.com"))))
                      ...
                      %base-services))

Hpcguix-web
...........

The hpcguix-web (https://github.com/UMCUGenetics/hpcguix-web/) program
is a customizable web interface to browse Guix packages, initially
designed for users of high-performance computing (HPC) clusters.

 -- Scheme Variable: hpcguix-web-service-type
     The service type for ‘hpcguix-web’.

 -- Data Type: hpcguix-web-configuration
     Data type for the hpcguix-web service configuration.

     ‘specs’
          A gexp (*note G-Expressions::) specifying the hpcguix-web
          service configuration.  The main items available in this spec
          are:

          ‘title-prefix’ (default: ‘"hpcguix | "’)
               The page title prefix.

          ‘guix-command’ (default: ‘"guix"’)
               The ‘guix’ command.

          ‘package-filter-proc’ (default: ‘(const #t)’)
               A procedure specifying how to filter packages that are
               displayed.

          ‘package-page-extension-proc’ (default: ‘(const '())’)
               Extension package for ‘hpcguix-web’.

          ‘menu’ (default: ‘'()’)
               Additional entry in page ‘menu’.

          ‘channels’ (default: ‘%default-channels’)
               List of channels from which the package list is built
               (*note Каналы::).

          ‘package-list-expiration’ (default: ‘(* 12 3600)’)
               The expiration time, in seconds, after which the package
               list is rebuilt from the latest instances of the given
               channels.

          See the hpcguix-web repository for a complete example
          (https://github.com/UMCUGenetics/hpcguix-web/blob/master/hpcweb-configuration.scm).

     ‘package’ (default: ‘hpcguix-web’)
          The hpcguix-web package to use.

   A typical hpcguix-web service declaration looks like this:

     (service hpcguix-web-service-type
              (hpcguix-web-configuration
               (specs
                #~(define site-config
                    (hpcweb-configuration
                     (title-prefix "Guix-HPC - ")
                     (menu '(("/about" "ABOUT"))))))))

     Примечание: The hpcguix-web service periodically updates the
     package list it publishes by pulling channels from Git.  To that
     end, it needs to access X.509 certificates so that it can
     authenticate Git servers when communicating over HTTPS, and it
     assumes that ‘/etc/ssl/certs’ contains those certificates.

     Thus, make sure to add ‘nss-certs’ or another certificate package
     to the ‘packages’ field of your configuration.  *note Сертификаты
     X.509::, for more information on X.509 certificates.


File: guix.ru.info,  Node: Сервисы сертификатов,  Next: Сервисы DNS,  Prev: Веб-сервисы,  Up: Службы

8.8.17 Сервисы сертификатов
---------------------------

The ‘(gnu services certbot)’ module provides a service to automatically
obtain a valid TLS certificate from the Let’s Encrypt certificate
authority.  These certificates can then be used to serve content
securely over HTTPS or other TLS-based protocols, with the knowledge
that the client will be able to verify the server’s authenticity.

   Let’s Encrypt (https://letsencrypt.org/) provides the ‘certbot’ tool
to automate the certification process.  This tool first securely
generates a key on the server.  It then makes a request to the Let’s
Encrypt certificate authority (CA) to sign the key.  The CA checks that
the request originates from the host in question by using a
challenge-response protocol, requiring the server to provide its
response over HTTP. If that protocol completes successfully, the CA
signs the key, resulting in a certificate.  That certificate is valid
for a limited period of time, and therefore to continue to provide TLS
services, the server needs to periodically ask the CA to renew its
signature.

   The certbot service automates this process: the initial key
generation, the initial certification request to the Let’s Encrypt
service, the web server challenge/response integration, writing the
certificate to disk, the automated periodic renewals, and the deployment
tasks associated with the renewal (e.g. reloading services, copying keys
with different permissions).

   Certbot is run twice a day, at a random minute within the hour.  It
won’t do anything until your certificates are due for renewal or
revoked, but running it regularly would give your service a chance of
staying online in case a Let’s Encrypt-initiated revocation happened for
some reason.

   By using this service, you agree to the ACME Subscriber Agreement,
which can be found there:
<https://acme-v01.api.letsencrypt.org/directory>.

 -- Scheme Variable: certbot-service-type
     A service type for the ‘certbot’ Let’s Encrypt client.  Its value
     must be a ‘certbot-configuration’ record as in this example:

          (define %nginx-deploy-hook
            (program-file
             "nginx-deploy-hook"
             #~(let ((pid (call-with-input-file "/var/run/nginx/pid" read)))
                 (kill pid SIGHUP))))

          (service certbot-service-type
                   (certbot-configuration
                    (email "foo@example.net")
                    (certificates
                     (list
                      (certificate-configuration
                       (domains '("example.net" "www.example.net"))
                       (deploy-hook %nginx-deploy-hook))
                      (certificate-configuration
                       (domains '("bar.example.net")))))))

     See below for details about ‘certbot-configuration’.

 -- Data Type: certbot-configuration
     Data type representing the configuration of the ‘certbot’ service.
     This type has the following parameters:

     ‘package’ (default: ‘certbot’)
          The certbot package to use.

     ‘webroot’ (default: ‘/var/www’)
          The directory from which to serve the Let’s Encrypt
          challenge/response files.

     ‘certificates’ (default: ‘()’)
          A list of ‘certificates-configuration’s for which to generate
          certificates and request signatures.  Each certificate has a
          ‘name’ and several ‘domains’.

     ‘email’
          Mandatory email used for registration, recovery contact, and
          important account notifications.

     ‘server’ (default: ‘#f’)
          Optional URL of ACME server.  Setting this overrides certbot’s
          default, which is the Let’s Encrypt server.

     ‘rsa-key-size’ (default: ‘2048’)
          Size of the RSA key.

     ‘default-location’ (default: see below)
          The default ‘nginx-location-configuration’.  Because ‘certbot’
          needs to be able to serve challenges and responses, it needs
          to be able to run a web server.  It does so by extending the
          ‘nginx’ web service with an ‘nginx-server-configuration’
          listening on the DOMAINS on port 80, and which has a
          ‘nginx-location-configuration’ for the ‘/.well-known/’ URI
          path subspace used by Let’s Encrypt.  *Note Веб-сервисы::, for
          more on these nginx configuration data types.

          Requests to other URL paths will be matched by the
          ‘default-location’, which if present is added to all
          ‘nginx-server-configuration’s.

          By default, the ‘default-location’ will issue a redirect from
          ‘http://DOMAIN/...’ to ‘https://DOMAIN/...’, leaving you to
          define what to serve on your site via ‘https’.

          Pass ‘#f’ to not issue a default location.

 -- Data Type: certificate-configuration
     Data type representing the configuration of a certificate.  This
     type has the following parameters:

     ‘name’ (default: see below)
          This name is used by Certbot for housekeeping and in file
          paths; it doesn’t affect the content of the certificate
          itself.  To see certificate names, run ‘certbot certificates’.

          Its default is the first provided domain.

     ‘domains’ (default: ‘()’)
          The first domain provided will be the subject CN of the
          certificate, and all domains will be Subject Alternative Names
          on the certificate.

     ‘challenge’ (default: ‘#f’)
          The challenge type that has to be run by certbot.  If ‘#f’ is
          specified, default to the HTTP challenge.  If a value is
          specified, defaults to the manual plugin (see
          ‘authentication-hook’, ‘cleanup-hook’ and the documentation at
          <https://certbot.eff.org/docs/using.html#hooks>), and gives
          Let’s Encrypt permission to log the public IP address of the
          requesting machine.

     ‘authentication-hook’ (default: ‘#f’)
          Command to be run in a shell once for each certificate
          challenge to be answered.  For this command, the shell
          variable ‘$CERTBOT_DOMAIN’ will contain the domain being
          authenticated, ‘$CERTBOT_VALIDATION’ contains the validation
          string and ‘$CERTBOT_TOKEN’ contains the file name of the
          resource requested when performing an HTTP-01 challenge.

     ‘cleanup-hook’ (default: ‘#f’)
          Command to be run in a shell once for each certificate
          challenge that have been answered by the ‘auth-hook’.  For
          this command, the shell variables available in the ‘auth-hook’
          script are still available, and additionally
          ‘$CERTBOT_AUTH_OUTPUT’ will contain the standard output of the
          ‘auth-hook’ script.

     ‘deploy-hook’ (default: ‘#f’)
          Command to be run in a shell once for each successfully issued
          certificate.  For this command, the shell variable
          ‘$RENEWED_LINEAGE’ will point to the config live subdirectory
          (for example, ‘"/etc/letsencrypt/live/example.com"’)
          containing the new certificates and keys; the shell variable
          ‘$RENEWED_DOMAINS’ will contain a space-delimited list of
          renewed certificate domains (for example, ‘"example.com
          www.example.com"’.

   For each ‘certificate-configuration’, the certificate is saved to
‘/etc/letsencrypt/live/NAME/fullchain.pem’ and the key is saved to
‘/etc/letsencrypt/live/NAME/privkey.pem’.


File: guix.ru.info,  Node: Сервисы DNS,  Next: VPN-сервисы,  Prev: Сервисы сертификатов,  Up: Службы

8.8.18 Сервисы DNS
------------------

The ‘(gnu services dns)’ module provides services related to the “domain
name system” (DNS). It provides a server service for hosting an
_authoritative_ DNS server for multiple zones, slave or master.  This
service uses Knot DNS (https://www.knot-dns.cz/).  And also a caching
and forwarding DNS server for the LAN, which uses dnsmasq
(http://www.thekelleys.org.uk/dnsmasq/doc.html).

Knot Service
............

An example configuration of an authoritative server for two zones, one
master and one slave, is:

     (define-zone-entries example.org.zone
     ;; Name TTL Class Type Data
       ("@"  ""  "IN"  "A"  "127.0.0.1")
       ("@"  ""  "IN"  "NS" "ns")
       ("ns" ""  "IN"  "A"  "127.0.0.1"))

     (define master-zone
       (knot-zone-configuration
         (domain "example.org")
         (zone (zone-file
                 (origin "example.org")
                 (entries example.org.zone)))))

     (define slave-zone
       (knot-zone-configuration
         (domain "plop.org")
         (dnssec-policy "default")
         (master (list "plop-master"))))

     (define plop-master
       (knot-remote-configuration
         (id "plop-master")
         (address (list "208.76.58.171"))))

     (operating-system
       ;; ...
       (services (cons* (service knot-service-type
                          (knot-configuration
                            (remotes (list plop-master))
                            (zones (list master-zone slave-zone))))
                        ;; ...
                        %base-services)))

 -- Scheme Variable: knot-service-type
     This is the type for the Knot DNS server.

     Knot DNS is an authoritative DNS server, meaning that it can serve
     multiple zones, that is to say domain names you would buy from a
     registrar.  This server is not a resolver, meaning that it can only
     resolve names for which it is authoritative.  This server can be
     configured to serve zones as a master server or a slave server as a
     per-zone basis.  Slave zones will get their data from masters, and
     will serve it as an authoritative server.  From the point of view
     of a resolver, there is no difference between master and slave.

     The following data types are used to configure the Knot DNS server:

 -- Data Type: knot-key-configuration
     Data type representing a key.  This type has the following
     parameters:

     ‘id’ (default: ‘""’)
          An identifier for other configuration fields to refer to this
          key.  IDs must be unique and must not be empty.

     ‘algorithm’ (default: ‘#f’)
          The algorithm to use.  Choose between ‘#f’, ‘'hmac-md5’,
          ‘'hmac-sha1’, ‘'hmac-sha224’, ‘'hmac-sha256’, ‘'hmac-sha384’
          and ‘'hmac-sha512’.

     ‘secret’ (default: ‘""’)
          The secret key itself.

 -- Data Type: knot-acl-configuration
     Data type representing an Access Control List (ACL) configuration.
     This type has the following parameters:

     ‘id’ (default: ‘""’)
          An identifier for ether configuration fields to refer to this
          key.  IDs must be unique and must not be empty.

     ‘address’ (default: ‘'()’)
          An ordered list of IP addresses, network subnets, or network
          ranges represented with strings.  The query must match one of
          them.  Empty value means that address match is not required.

     ‘key’ (default: ‘'()’)
          An ordered list of references to keys represented with
          strings.  The string must match a key ID defined in a
          ‘knot-key-configuration’.  No key means that a key is not
          require to match that ACL.

     ‘action’ (default: ‘'()’)
          An ordered list of actions that are permitted or forbidden by
          this ACL. Possible values are lists of zero or more elements
          from ‘'transfer’, ‘'notify’ and ‘'update’.

     ‘deny?’ (default: ‘#f’)
          When true, the ACL defines restrictions.  Listed actions are
          forbidden.  When false, listed actions are allowed.

 -- Data Type: zone-entry
     Data type representing a record entry in a zone file.  This type
     has the following parameters:

     ‘name’ (default: ‘"@"’)
          The name of the record.  ‘"@"’ refers to the origin of the
          zone.  Names are relative to the origin of the zone.  For
          example, in the ‘example.org’ zone, ‘"ns.example.org"’
          actually refers to ‘ns.example.org.example.org’.  Names ending
          with a dot are absolute, which means that ‘"ns.example.org."’
          refers to ‘ns.example.org’.

     ‘ttl’ (default: ‘""’)
          The Time-To-Live (TTL) of this record.  If not set, the
          default TTL is used.

     ‘class’ (default: ‘"IN"’)
          The class of the record.  Knot currently supports only ‘"IN"’
          and partially ‘"CH"’.

     ‘type’ (default: ‘"A"’)
          The type of the record.  Common types include A (IPv4
          address), AAAA (IPv6 address), NS (Name Server) and MX (Mail
          eXchange).  Many other types are defined.

     ‘data’ (default: ‘""’)
          The data contained in the record.  For instance an IP address
          associated with an A record, or a domain name associated with
          an NS record.  Remember that domain names are relative to the
          origin unless they end with a dot.

 -- Data Type: zone-file
     Data type representing the content of a zone file.  This type has
     the following parameters:

     ‘entries’ (default: ‘'()’)
          The list of entries.  The SOA record is taken care of, so you
          don’t need to put it in the list of entries.  This list should
          probably contain an entry for your primary authoritative DNS
          server.  Other than using a list of entries directly, you can
          use ‘define-zone-entries’ to define a object containing the
          list of entries more easily, that you can later pass to the
          ‘entries’ field of the ‘zone-file’.

     ‘origin’ (default: ‘""’)
          The name of your zone.  This parameter cannot be empty.

     ‘ns’ (default: ‘"ns"’)
          The domain of your primary authoritative DNS server.  The name
          is relative to the origin, unless it ends with a dot.  It is
          mandatory that this primary DNS server corresponds to an NS
          record in the zone and that it is associated to an IP address
          in the list of entries.

     ‘mail’ (default: ‘"hostmaster"’)
          An email address people can contact you at, as the owner of
          the zone.  This is translated as ‘<mail>@<origin>’.

     ‘serial’ (default: ‘1’)
          The serial number of the zone.  As this is used to keep track
          of changes by both slaves and resolvers, it is mandatory that
          it _never_ decreases.  Always increment it when you make a
          change in your zone.

     ‘refresh’ (default: ‘(* 2 24 3600)’)
          The frequency at which slaves will do a zone transfer.  This
          value is a number of seconds.  It can be computed by
          multiplications or with ‘(string->duration)’.

     ‘retry’ (default: ‘(* 15 60)’)
          The period after which a slave will retry to contact its
          master when it fails to do so a first time.

     ‘expiry’ (default: ‘(* 14 24 3600)’)
          Default TTL of records.  Existing records are considered
          correct for at most this amount of time.  After this period,
          resolvers will invalidate their cache and check again that it
          still exists.

     ‘nx’ (default: ‘3600’)
          Default TTL of inexistant records.  This delay is usually
          short because you want your new domains to reach everyone
          quickly.

 -- Data Type: knot-remote-configuration
     Data type representing a remote configuration.  This type has the
     following parameters:

     ‘id’ (default: ‘""’)
          An identifier for other configuration fields to refer to this
          remote.  IDs must be unique and must not be empty.

     ‘address’ (default: ‘'()’)
          An ordered list of destination IP addresses.  Addresses are
          tried in sequence.  An optional port can be given with the @
          separator.  For instance: ‘(list "1.2.3.4" "2.3.4.5@53")’.
          Default port is 53.

     ‘via’ (default: ‘'()’)
          An ordered list of source IP addresses.  An empty list will
          have Knot choose an appropriate source IP. An optional port
          can be given with the @ separator.  The default is to choose
          at random.

     ‘key’ (default: ‘#f’)
          A reference to a key, that is a string containing the
          identifier of a key defined in a ‘knot-key-configuration’
          field.

 -- Data Type: knot-keystore-configuration
     Data type representing a keystore to hold dnssec keys.  This type
     has the following parameters:

     ‘id’ (default: ‘""’)
          The id of the keystore.  It must not be empty.

     ‘backend’ (default: ‘'pem’)
          The backend to store the keys in.  Can be ‘'pem’ or ‘'pkcs11’.

     ‘config’ (default: ‘"/var/lib/knot/keys/keys"’)
          The configuration string of the backend.  An example for the
          PKCS#11 is: ‘"pkcs11:token=knot;pin-value=1234
          /gnu/store/.../lib/pkcs11/libsofthsm2.so"’.  For the pem
          backend, the string represents a path in the file system.

 -- Data Type: knot-policy-configuration
     Data type representing a dnssec policy.  Knot DNS is able to
     automatically sign your zones.  It can either generate and manage
     your keys automatically or use keys that you generate.

     Dnssec is usually implemented using two keys: a Key Signing Key
     (KSK) that is used to sign the second, and a Zone Signing Key (ZSK)
     that is used to sign the zone.  In order to be trusted, the KSK
     needs to be present in the parent zone (usually a top-level
     domain).  If your registrar supports dnssec, you will have to send
     them your KSK’s hash so they can add a DS record in their zone.
     This is not automated and need to be done each time you change your
     KSK.

     The policy also defines the lifetime of keys.  Usually, ZSK can be
     changed easily and use weaker cryptographic functions (they use
     lower parameters) in order to sign records quickly, so they are
     changed often.  The KSK however requires manual interaction with
     the registrar, so they are changed less often and use stronger
     parameters because they sign only one record.

     This type has the following parameters:

     ‘id’ (default: ‘""’)
          The id of the policy.  It must not be empty.

     ‘keystore’ (default: ‘"default"’)
          A reference to a keystore, that is a string containing the
          identifier of a keystore defined in a
          ‘knot-keystore-configuration’ field.  The ‘"default"’
          identifier means the default keystore (a kasp database that
          was setup by this service).

     ‘manual?’ (default: ‘#f’)
          Whether the key management is manual or automatic.

     ‘single-type-signing?’ (default: ‘#f’)
          When ‘#t’, use the Single-Type Signing Scheme.

     ‘algorithm’ (default: ‘"ecdsap256sha256"’)
          An algorithm of signing keys and issued signatures.

     ‘ksk-size’ (default: ‘256’)
          The length of the KSK. Note that this value is correct for the
          default algorithm, but would be unsecure for other algorithms.

     ‘zsk-size’ (default: ‘256’)
          The length of the ZSK. Note that this value is correct for the
          default algorithm, but would be unsecure for other algorithms.

     ‘dnskey-ttl’ (default: ‘'default’)
          The TTL value for DNSKEY records added into zone apex.  The
          special ‘'default’ value means same as the zone SOA TTL.

     ‘zsk-lifetime’ (default: ‘(* 30 24 3600)’)
          The period between ZSK publication and the next rollover
          initiation.

     ‘propagation-delay’ (default: ‘(* 24 3600)’)
          An extra delay added for each key rollover step.  This value
          should be high enough to cover propagation of data from the
          master server to all slaves.

     ‘rrsig-lifetime’ (default: ‘(* 14 24 3600)’)
          A validity period of newly issued signatures.

     ‘rrsig-refresh’ (default: ‘(* 7 24 3600)’)
          A period how long before a signature expiration the signature
          will be refreshed.

     ‘nsec3?’ (default: ‘#f’)
          When ‘#t’, NSEC3 will be used instead of NSEC.

     ‘nsec3-iterations’ (default: ‘5’)
          The number of additional times the hashing is performed.

     ‘nsec3-salt-length’ (default: ‘8’)
          The length of a salt field in octets, which is appended to the
          original owner name before hashing.

     ‘nsec3-salt-lifetime’ (default: ‘(* 30 24 3600)’)
          The validity period of newly issued salt field.

 -- Data Type: knot-zone-configuration
     Data type representing a zone served by Knot.  This type has the
     following parameters:

     ‘domain’ (default: ‘""’)
          The domain served by this configuration.  It must not be
          empty.

     ‘file’ (default: ‘""’)
          The file where this zone is saved.  This parameter is ignored
          by master zones.  Empty means default location that depends on
          the domain name.

     ‘zone’ (default: ‘(zone-file)’)
          The content of the zone file.  This parameter is ignored by
          slave zones.  It must contain a zone-file record.

     ‘master’ (default: ‘'()’)
          A list of master remotes.  When empty, this zone is a master.
          When set, this zone is a slave.  This is a list of remotes
          identifiers.

     ‘ddns-master’ (default: ‘#f’)
          The main master.  When empty, it defaults to the first master
          in the list of masters.

     ‘notify’ (default: ‘'()’)
          A list of slave remote identifiers.

     ‘acl’ (default: ‘'()’)
          A list of acl identifiers.

     ‘semantic-checks?’ (default: ‘#f’)
          When set, this adds more semantic checks to the zone.

     ‘disable-any?’ (default: ‘#f’)
          When set, this forbids queries of the ANY type.

     ‘zonefile-sync’ (default: ‘0’)
          The delay between a modification in memory and on disk.  0
          means immediate synchronization.

     ‘zonefile-load’ (default: ‘#f’)
          The way the zone file contents are applied during zone load.
          Possible values are:

             • ‘#f’ for using the default value from Knot,
             • ‘'none’ for not using the zone file at all,
             • ‘'difference’ for computing the difference between
               already available contents and zone contents and applying
               it to the current zone contents,
             • ‘'difference-no-serial’ for the same as ‘'difference’,
               but ignoring the SOA serial in the zone file, while the
               server takes care of it automatically.
             • ‘'whole’ for loading zone contents from the zone file.

     ‘journal-content’ (default: ‘#f’)
          The way the journal is used to store zone and its changes.
          Possible values are ‘'none’ to not use it at all, ‘'changes’
          to store changes and ‘'all’ to store contents.  ‘#f’ does not
          set this option, so the default value from Knot is used.

     ‘max-journal-usage’ (default: ‘#f’)
          The maximum size for the journal on disk.  ‘#f’ does not set
          this option, so the default value from Knot is used.

     ‘max-journal-depth’ (default: ‘#f’)
          The maximum size of the history.  ‘#f’ does not set this
          option, so the default value from Knot is used.

     ‘max-zone-size’ (default: ‘#f’)
          The maximum size of the zone file.  This limit is enforced for
          incoming transfer and updates.  ‘#f’ does not set this option,
          so the default value from Knot is used.

     ‘dnssec-policy’ (default: ‘#f’)
          A reference to a ‘knot-policy-configuration’ record, or the
          special name ‘"default"’.  If the value is ‘#f’, there is no
          dnssec signing on this zone.

     ‘serial-policy’ (default: ‘'increment’)
          A policy between ‘'increment’ and ‘'unixtime’.

 -- Data Type: knot-configuration
     Data type representing the Knot configuration.  This type has the
     following parameters:

     ‘knot’ (default: ‘knot’)
          The Knot package.

     ‘run-directory’ (default: ‘"/var/run/knot"’)
          The run directory.  This directory will be used for pid file
          and sockets.

     ‘includes’ (default: ‘'()’)
          A list of strings or file-like objects denoting other files
          that must be included at the top of the configuration file.

          This can be used to manage secrets out-of-band.  For example,
          secret keys may be stored in an out-of-band file not managed
          by Guix, and thus not visible in ‘/gnu/store’—e.g., you could
          store secret key configuration in ‘/etc/knot/secrets.conf’ and
          add this file to the ‘includes’ list.

          One can generate a secret tsig key (for nsupdate and zone
          transfers with the keymgr command from the knot package.  Note
          that the package is not automatically installed by the
          service.  The following example shows how to generate a new
          tsig key:

               keymgr -t mysecret > /etc/knot/secrets.conf
               chmod 600 /etc/knot/secrets.conf

          Also note that the generated key will be named MYSECRET, so it
          is the name that needs to be used in the KEY field of the
          ‘knot-acl-configuration’ record and in other places that need
          to refer to that key.

          It can also be used to add configuration not supported by this
          interface.

     ‘listen-v4’ (default: ‘"0.0.0.0"’)
          An ip address on which to listen.

     ‘listen-v6’ (default: ‘"::"’)
          An ip address on which to listen.

     ‘listen-port’ (default: ‘53’)
          A port on which to listen.

     ‘keys’ (default: ‘'()’)
          The list of knot-key-configuration used by this configuration.

     ‘acls’ (default: ‘'()’)
          The list of knot-acl-configuration used by this configuration.

     ‘remotes’ (default: ‘'()’)
          The list of knot-remote-configuration used by this
          configuration.

     ‘zones’ (default: ‘'()’)
          The list of knot-zone-configuration used by this
          configuration.

Knot Resolver Service
.....................

 -- Scheme Variable: knot-resolver-service-type
     This this the type of the knot resolver service, whose value should
     be an ‘knot-resolver-configuration’ object as in this example:

          (service knot-resolver-service-type
                   (knot-resolver-configuration
                     (kresd-config-file (plain-file "kresd.conf" "
          net.listen('192.168.0.1', 5353)
          user('knot-resolver', 'knot-resolver')
          modules = { 'hints > iterate', 'stats', 'predict' }
          cache.size = 100 * MB
          "))))

     For more information, refer its manual
     (https://knot-resolver.readthedocs.org/en/stable/daemon.html#configuration).

 -- Data Type: knot-resolver-configuration
     Data type representing the configuration of knot-resolver.

     ‘package’ (default: KNOT-RESOLVER)
          Package object of the knot DNS resolver.

     ‘kresd-config-file’ (default: %kresd.conf)
          File-like object of the kresd configuration file to use, by
          default it will listen on ‘127.0.0.1’ and ‘::1’.

     ‘garbage-collection-interval’ (default: 1000)
          Number of milliseconds for ‘kres-cache-gc’ to periodically
          trim the cache.

Dnsmasq Service
...............

 -- Scheme Variable: dnsmasq-service-type
     This is the type of the dnsmasq service, whose value should be an
     ‘dnsmasq-configuration’ object as in this example:

          (service dnsmasq-service-type
                   (dnsmasq-configuration
                     (no-resolv? #t)
                     (servers '("192.168.1.1"))))

 -- Data Type: dnsmasq-configuration
     Data type representing the configuration of dnsmasq.

     ‘package’ (default: DNSMASQ)
          Package object of the dnsmasq server.

     ‘no-hosts?’ (default: ‘#f’)
          When true, don’t read the hostnames in /etc/hosts.

     ‘port’ (default: ‘53’)
          The port to listen on.  Setting this to zero completely
          disables DNS responses, leaving only DHCP and/or TFTP
          functions.

     ‘local-service?’ (default: ‘#t’)
          Accept DNS queries only from hosts whose address is on a local
          subnet, ie a subnet for which an interface exists on the
          server.

     ‘listen-addresses’ (default: ‘'()’)
          Listen on the given IP addresses.

     ‘resolv-file’ (default: ‘"/etc/resolv.conf"’)
          The file to read the IP address of the upstream nameservers
          from.

     ‘no-resolv?’ (default: ‘#f’)
          When true, don’t read RESOLV-FILE.

     ‘servers’ (default: ‘'()’)
          Specify IP address of upstream servers directly.

     ‘addresses’ (default: ‘'()’)
          For each entry, specify an IP address to return for any host
          in the given domains.  Queries in the domains are never
          forwarded and always replied to with the specified IP address.

          This is useful for redirecting hosts locally, for example:

               (service dnsmasq-service-type
                        (dnsmasq-configuration
                          (addresses
                            '(; Redirect to a local web-server.
                              "/example.org/127.0.0.1"
                              ; Redirect subdomain to a specific IP.
                              "/subdomain.example.org/192.168.1.42"))))

          Note that rules in ‘/etc/hosts’ take precedence over this.

     ‘cache-size’ (default: ‘150’)
          Set the size of dnsmasq’s cache.  Setting the cache size to
          zero disables caching.

     ‘negative-cache?’ (default: ‘#t’)
          When false, disable negative caching.

ddclient Service
................

The ddclient service described below runs the ddclient daemon, which
takes care of automatically updating DNS entries for service providers
such as Dyn (https://dyn.com/dns/).

   The following example show instantiates the service with its default
configuration:

     (service ddclient-service-type)

   Note that ddclient needs to access credentials that are stored in a
“secret file”, by default ‘/etc/ddclient/secrets’ (see ‘secret-file’
below).  You are expected to create this file manually, in an
“out-of-band” fashion (you _could_ make this file part of the service
configuration, for instance by using ‘plain-file’, but it will be
world-readable via ‘/gnu/store’).  See the examples in the
‘share/ddclient’ directory of the ‘ddclient’ package.

   Available ‘ddclient-configuration’ fields are:

 -- ‘ddclient-configuration’ parameter: package ddclient
     The ddclient package.

 -- ‘ddclient-configuration’ parameter: integer daemon
     The period after which ddclient will retry to check IP and domain
     name.

     Defaults to ‘300’.

 -- ‘ddclient-configuration’ parameter: boolean syslog
     Use syslog for the output.

     Defaults to ‘#t’.

 -- ‘ddclient-configuration’ parameter: string mail
     Mail to user.

     Defaults to ‘"root"’.

 -- ‘ddclient-configuration’ parameter: string mail-failure
     Mail failed update to user.

     Defaults to ‘"root"’.

 -- ‘ddclient-configuration’ parameter: string pid
     The ddclient PID file.

     Defaults to ‘"/var/run/ddclient/ddclient.pid"’.

 -- ‘ddclient-configuration’ parameter: boolean ssl
     Enable SSL support.

     Defaults to ‘#t’.

 -- ‘ddclient-configuration’ parameter: string user
     Specifies the user name or ID that is used when running ddclient
     program.

     Defaults to ‘"ddclient"’.

 -- ‘ddclient-configuration’ parameter: string group
     Group of the user who will run the ddclient program.

     Defaults to ‘"ddclient"’.

 -- ‘ddclient-configuration’ parameter: string secret-file
     Secret file which will be appended to ‘ddclient.conf’ file.  This
     file contains credentials for use by ddclient.  You are expected to
     create it manually.

     Defaults to ‘"/etc/ddclient/secrets.conf"’.

 -- ‘ddclient-configuration’ parameter: list extra-options
     Extra options will be appended to ‘ddclient.conf’ file.

     Defaults to ‘()’.


File: guix.ru.info,  Node: VPN-сервисы,  Next: Сетевые файловые системы,  Prev: Сервисы DNS,  Up: Службы

8.8.19 VPN-сервисы
------------------

The ‘(gnu services vpn)’ module provides services related to “virtual
private networks” (VPNs).  It provides a _client_ service for your
machine to connect to a VPN, and a _server_ service for your machine to
host a VPN. Both services use OpenVPN (https://openvpn.net/).

 -- Scheme Procedure: openvpn-client-service [#:config
          (openvpn-client-configuration)]

     Return a service that runs ‘openvpn’, a VPN daemon, as a client.

 -- Scheme Procedure: openvpn-server-service [#:config
          (openvpn-server-configuration)]

     Return a service that runs ‘openvpn’, a VPN daemon, as a server.

     Both can be run simultaneously.

   Available ‘openvpn-client-configuration’ fields are:

 -- ‘openvpn-client-configuration’ parameter: package openvpn
     The OpenVPN package.

 -- ‘openvpn-client-configuration’ parameter: string pid-file
     The OpenVPN pid file.

     Defaults to ‘"/var/run/openvpn/openvpn.pid"’.

 -- ‘openvpn-client-configuration’ parameter: proto proto
     The protocol (UDP or TCP) used to open a channel between clients
     and servers.

     Defaults to ‘udp’.

 -- ‘openvpn-client-configuration’ parameter: dev dev
     The device type used to represent the VPN connection.

     Defaults to ‘tun’.

 -- ‘openvpn-client-configuration’ parameter: string ca
     The certificate authority to check connections against.

     Defaults to ‘"/etc/openvpn/ca.crt"’.

 -- ‘openvpn-client-configuration’ parameter: string cert
     The certificate of the machine the daemon is running on.  It should
     be signed by the authority given in ‘ca’.

     Defaults to ‘"/etc/openvpn/client.crt"’.

 -- ‘openvpn-client-configuration’ parameter: string key
     The key of the machine the daemon is running on.  It must be the
     key whose certificate is ‘cert’.

     Defaults to ‘"/etc/openvpn/client.key"’.

 -- ‘openvpn-client-configuration’ parameter: boolean comp-lzo?
     Whether to use the lzo compression algorithm.

     Defaults to ‘#t’.

 -- ‘openvpn-client-configuration’ parameter: boolean persist-key?
     Don’t re-read key files across SIGUSR1 or –ping-restart.

     Defaults to ‘#t’.

 -- ‘openvpn-client-configuration’ parameter: boolean persist-tun?
     Don’t close and reopen TUN/TAP device or run up/down scripts across
     SIGUSR1 or –ping-restart restarts.

     Defaults to ‘#t’.

 -- ‘openvpn-client-configuration’ parameter: boolean fast-io?
     (Experimental) Optimize TUN/TAP/UDP I/O writes by avoiding a call
     to poll/epoll/select prior to the write operation.

     Defaults to ‘#f’.

 -- ‘openvpn-client-configuration’ parameter: number verbosity
     Verbosity level.

     Defaults to ‘3’.

 -- ‘openvpn-client-configuration’ parameter: tls-auth-client tls-auth
     Add an additional layer of HMAC authentication on top of the TLS
     control channel to protect against DoS attacks.

     Defaults to ‘#f’.

 -- ‘openvpn-client-configuration’ parameter: maybe-string
          auth-user-pass
     Authenticate with server using username/password.  The option is a
     file containing username/password on 2 lines.  Do not use a
     file-like object as it would be added to the store and readable by
     any user.

     Defaults to ‘'disabled’.

 -- ‘openvpn-client-configuration’ parameter: key-usage
          verify-key-usage?
     Whether to check the server certificate has server usage extension.

     Defaults to ‘#t’.

 -- ‘openvpn-client-configuration’ parameter: bind bind?
     Bind to a specific local port number.

     Defaults to ‘#f’.

 -- ‘openvpn-client-configuration’ parameter: resolv-retry resolv-retry?
     Retry resolving server address.

     Defaults to ‘#t’.

 -- ‘openvpn-client-configuration’ parameter: openvpn-remote-list remote
     A list of remote servers to connect to.

     Defaults to ‘()’.

     Available ‘openvpn-remote-configuration’ fields are:

      -- ‘openvpn-remote-configuration’ parameter: string name
          Server name.

          Defaults to ‘"my-server"’.

      -- ‘openvpn-remote-configuration’ parameter: number port
          Port number the server listens to.

          Defaults to ‘1194’.

   Available ‘openvpn-server-configuration’ fields are:

 -- ‘openvpn-server-configuration’ parameter: package openvpn
     The OpenVPN package.

 -- ‘openvpn-server-configuration’ parameter: string pid-file
     The OpenVPN pid file.

     Defaults to ‘"/var/run/openvpn/openvpn.pid"’.

 -- ‘openvpn-server-configuration’ parameter: proto proto
     The protocol (UDP or TCP) used to open a channel between clients
     and servers.

     Defaults to ‘udp’.

 -- ‘openvpn-server-configuration’ parameter: dev dev
     The device type used to represent the VPN connection.

     Defaults to ‘tun’.

 -- ‘openvpn-server-configuration’ parameter: string ca
     The certificate authority to check connections against.

     Defaults to ‘"/etc/openvpn/ca.crt"’.

 -- ‘openvpn-server-configuration’ parameter: string cert
     The certificate of the machine the daemon is running on.  It should
     be signed by the authority given in ‘ca’.

     Defaults to ‘"/etc/openvpn/client.crt"’.

 -- ‘openvpn-server-configuration’ parameter: string key
     The key of the machine the daemon is running on.  It must be the
     key whose certificate is ‘cert’.

     Defaults to ‘"/etc/openvpn/client.key"’.

 -- ‘openvpn-server-configuration’ parameter: boolean comp-lzo?
     Whether to use the lzo compression algorithm.

     Defaults to ‘#t’.

 -- ‘openvpn-server-configuration’ parameter: boolean persist-key?
     Don’t re-read key files across SIGUSR1 or –ping-restart.

     Defaults to ‘#t’.

 -- ‘openvpn-server-configuration’ parameter: boolean persist-tun?
     Don’t close and reopen TUN/TAP device or run up/down scripts across
     SIGUSR1 or –ping-restart restarts.

     Defaults to ‘#t’.

 -- ‘openvpn-server-configuration’ parameter: boolean fast-io?
     (Experimental) Optimize TUN/TAP/UDP I/O writes by avoiding a call
     to poll/epoll/select prior to the write operation.

     Defaults to ‘#f’.

 -- ‘openvpn-server-configuration’ parameter: number verbosity
     Verbosity level.

     Defaults to ‘3’.

 -- ‘openvpn-server-configuration’ parameter: tls-auth-server tls-auth
     Add an additional layer of HMAC authentication on top of the TLS
     control channel to protect against DoS attacks.

     Defaults to ‘#f’.

 -- ‘openvpn-server-configuration’ parameter: number port
     Specifies the port number on which the server listens.

     Defaults to ‘1194’.

 -- ‘openvpn-server-configuration’ parameter: ip-mask server
     An ip and mask specifying the subnet inside the virtual network.

     Defaults to ‘"10.8.0.0 255.255.255.0"’.

 -- ‘openvpn-server-configuration’ parameter: cidr6 server-ipv6
     A CIDR notation specifying the IPv6 subnet inside the virtual
     network.

     Defaults to ‘#f’.

 -- ‘openvpn-server-configuration’ parameter: string dh
     The Diffie-Hellman parameters file.

     Defaults to ‘"/etc/openvpn/dh2048.pem"’.

 -- ‘openvpn-server-configuration’ parameter: string
          ifconfig-pool-persist
     The file that records client IPs.

     Defaults to ‘"/etc/openvpn/ipp.txt"’.

 -- ‘openvpn-server-configuration’ parameter: gateway redirect-gateway?
     When true, the server will act as a gateway for its clients.

     Defaults to ‘#f’.

 -- ‘openvpn-server-configuration’ parameter: boolean client-to-client?
     When true, clients are allowed to talk to each other inside the
     VPN.

     Defaults to ‘#f’.

 -- ‘openvpn-server-configuration’ parameter: keepalive keepalive
     Causes ping-like messages to be sent back and forth over the link
     so that each side knows when the other side has gone down.
     ‘keepalive’ requires a pair.  The first element is the period of
     the ping sending, and the second element is the timeout before
     considering the other side down.

 -- ‘openvpn-server-configuration’ parameter: number max-clients
     The maximum number of clients.

     Defaults to ‘100’.

 -- ‘openvpn-server-configuration’ parameter: string status
     The status file.  This file shows a small report on current
     connection.  It is truncated and rewritten every minute.

     Defaults to ‘"/var/run/openvpn/status"’.

 -- ‘openvpn-server-configuration’ parameter: openvpn-ccd-list
          client-config-dir
     The list of configuration for some clients.

     Defaults to ‘()’.

     Available ‘openvpn-ccd-configuration’ fields are:

      -- ‘openvpn-ccd-configuration’ parameter: string name
          Client name.

          Defaults to ‘"client"’.

      -- ‘openvpn-ccd-configuration’ parameter: ip-mask iroute
          Client own network

          Defaults to ‘#f’.

      -- ‘openvpn-ccd-configuration’ parameter: ip-mask ifconfig-push
          Client VPN IP.

          Defaults to ‘#f’.


File: guix.ru.info,  Node: Сетевые файловые системы,  Next: Длительная интеграция,  Prev: VPN-сервисы,  Up: Службы

8.8.20 Сетевые файловые системы
-------------------------------

The ‘(gnu services nfs)’ module provides the following services, which
are most commonly used in relation to mounting or exporting directory
trees as “network file systems” (NFS).

   While it is possible to use the individual components that together
make up a Network File System service, we recommended to configure an
NFS server with the ‘nfs-service-type’.

NFS Service
...........

The NFS service takes care of setting up all NFS component services,
kernel configuration file systems, and installs configuration files in
the locations that NFS expects.

 -- Scheme Variable: nfs-service-type
     A service type for a complete NFS server.

 -- Data Type: nfs-configuration
     This data type represents the configuration of the NFS service and
     all of its subsystems.

     It has the following parameters:
     ‘nfs-utils’ (default: ‘nfs-utils’)
          The nfs-utils package to use.

     ‘nfs-versions’ (default: ‘'("4.2" "4.1" "4.0")’)
          If a list of string values is provided, the ‘rpc.nfsd’ daemon
          will be limited to supporting the given versions of the NFS
          protocol.

     ‘exports’ (default: ‘'()’)
          This is a list of directories the NFS server should export.
          Each entry is a list consisting of two elements: a directory
          name and a string containing all options.  This is an example
          in which the directory ‘/export’ is served to all NFS clients
          as a read-only share:

               (nfs-configuration
                (exports
                 '(("/export"
                    "*(ro,insecure,no_subtree_check,crossmnt,fsid=0)"))))

     ‘rpcmountd-port’ (default: ‘#f’)
          The network port that the ‘rpc.mountd’ daemon should use.

     ‘rpcstatd-port’ (default: ‘#f’)
          The network port that the ‘rpc.statd’ daemon should use.

     ‘rpcbind’ (default: ‘rpcbind’)
          The rpcbind package to use.

     ‘idmap-domain’ (default: ‘"localdomain"’)
          The local NFSv4 domain name.

     ‘nfsd-port’ (default: ‘2049’)
          The network port that the ‘nfsd’ daemon should use.

     ‘nfsd-threads’ (default: ‘8’)
          The number of threads used by the ‘nfsd’ daemon.

     ‘pipefs-directory’ (default: ‘"/var/lib/nfs/rpc_pipefs"’)
          The directory where the pipefs file system is mounted.

     ‘debug’ (default: ‘'()"’)
          A list of subsystems for which debugging output should be
          enabled.  This is a list of symbols.  Any of these symbols are
          valid: ‘nfsd’, ‘nfs’, ‘rpc’, ‘idmap’, ‘statd’, or ‘mountd’.

   If you don’t need a complete NFS service or prefer to build it
yourself you can use the individual component services that are
documented below.

RPC Bind Service
................

The RPC Bind service provides a facility to map program numbers into
universal addresses.  Many NFS related services use this facility.
Hence it is automatically started when a dependent service starts.

 -- Scheme Variable: rpcbind-service-type
     A service type for the RPC portmapper daemon.

 -- Data Type: rpcbind-configuration
     Data type representing the configuration of the RPC Bind Service.
     This type has the following parameters:
     ‘rpcbind’ (default: ‘rpcbind’)
          The rpcbind package to use.

     ‘warm-start?’ (default: ‘#t’)
          If this parameter is ‘#t’, then the daemon will read a state
          file on startup thus reloading state information saved by a
          previous instance.

Pipefs Pseudo File System
.........................

The pipefs file system is used to transfer NFS related data between the
kernel and user space programs.

 -- Scheme Variable: pipefs-service-type
     A service type for the pipefs pseudo file system.

 -- Data Type: pipefs-configuration
     Data type representing the configuration of the pipefs pseudo file
     system service.  This type has the following parameters:
     ‘mount-point’ (default: ‘"/var/lib/nfs/rpc_pipefs"’)
          The directory to which the file system is to be attached.

GSS Daemon Service
..................

The “global security system” (GSS) daemon provides strong security for
RPC based protocols.  Before exchanging RPC requests an RPC client must
establish a security context.  Typically this is done using the Kerberos
command ‘kinit’ or automatically at login time using PAM services (*note
Сервисы Kerberos::).

 -- Scheme Variable: gss-service-type
     A service type for the Global Security System (GSS) daemon.

 -- Data Type: gss-configuration
     Data type representing the configuration of the GSS daemon service.
     This type has the following parameters:
     ‘nfs-utils’ (default: ‘nfs-utils’)
          The package in which the ‘rpc.gssd’ command is to be found.

     ‘pipefs-directory’ (default: ‘"/var/lib/nfs/rpc_pipefs"’)
          The directory where the pipefs file system is mounted.

IDMAP Daemon Service
....................

The idmap daemon service provides mapping between user IDs and user
names.  Typically it is required in order to access file systems mounted
via NFSv4.

 -- Scheme Variable: idmap-service-type
     A service type for the Identity Mapper (IDMAP) daemon.

 -- Data Type: idmap-configuration
     Data type representing the configuration of the IDMAP daemon
     service.  This type has the following parameters:
     ‘nfs-utils’ (default: ‘nfs-utils’)
          The package in which the ‘rpc.idmapd’ command is to be found.

     ‘pipefs-directory’ (default: ‘"/var/lib/nfs/rpc_pipefs"’)
          The directory where the pipefs file system is mounted.

     ‘domain’ (default: ‘#f’)
          The local NFSv4 domain name.  This must be a string or ‘#f’.
          If it is ‘#f’ then the daemon will use the host’s fully
          qualified domain name.

     ‘verbosity’ (default: ‘0’)
          The verbosity level of the daemon.


File: guix.ru.info,  Node: Длительная интеграция,  Next: Сервисы управления питанием,  Prev: Сетевые файловые системы,  Up: Службы

8.8.21 Длительная интеграция
----------------------------

Cuirass (https://git.savannah.gnu.org/cgit/guix/guix-cuirass.git) is a
continuous integration tool for Guix.  It can be used both for
development and for providing substitutes to others (*note
Подстановки::).

   The ‘(gnu services cuirass)’ module provides the following service.

 -- Scheme Procedure: cuirass-service-type
     The type of the Cuirass service.  Its value must be a
     ‘cuirass-configuration’ object, as described below.

   To add build jobs, you have to set the ‘specifications’ field of the
configuration.  Here is an example of a service that polls the Guix
repository and builds the packages from a manifest.  Some of the
packages are defined in the ‘"custom-packages"’ input, which is the
equivalent of ‘GUIX_PACKAGE_PATH’.

     (define %cuirass-specs
       #~(list
          '((#:name . "my-manifest")
            (#:load-path-inputs . ("guix"))
            (#:package-path-inputs . ("custom-packages"))
            (#:proc-input . "guix")
            (#:proc-file . "build-aux/cuirass/gnu-system.scm")
            (#:proc . cuirass-jobs)
            (#:proc-args . ((subset . "manifests")
                            (systems . ("x86_64-linux"))
                            (manifests . (("config" . "guix/manifest.scm")))))
            (#:inputs . (((#:name . "guix")
                          (#:url . "git://git.savannah.gnu.org/guix.git")
                          (#:load-path . ".")
                          (#:branch . "master")
                          (#:no-compile? . #t))
                         ((#:name . "config")
                          (#:url . "https://git.example.org/config.git")
                          (#:load-path . ".")
                          (#:branch . "master")
                          (#:no-compile? . #t))
                         ((#:name . "custom-packages")
                          (#:url . "https://git.example.org/custom-packages.git")
                          (#:load-path . ".")
                          (#:branch . "master")
                          (#:no-compile? . #t)))))))

     (service cuirass-service-type
              (cuirass-configuration
               (specifications %cuirass-specs)))

   While information related to build jobs is located directly in the
specifications, global settings for the ‘cuirass’ process are accessible
in other ‘cuirass-configuration’ fields.

 -- Data Type: cuirass-configuration
     Data type representing the configuration of Cuirass.

     ‘log-file’ (default: ‘"/var/log/cuirass.log"’)
          Location of the log file.

     ‘web-log-file’ (default: ‘"/var/log/cuirass-web.log"’)
          Location of the log file used by the web interface.

     ‘cache-directory’ (default: ‘"/var/cache/cuirass"’)
          Location of the repository cache.

     ‘user’ (default: ‘"cuirass"’)
          Owner of the ‘cuirass’ process.

     ‘group’ (default: ‘"cuirass"’)
          Owner’s group of the ‘cuirass’ process.

     ‘interval’ (default: ‘60’)
          Number of seconds between the poll of the repositories
          followed by the Cuirass jobs.

     ‘database’ (default: ‘"/var/lib/cuirass/cuirass.db"’)
          Location of sqlite database which contains the build results
          and previously added specifications.

     ‘ttl’ (default: ‘(* 30 24 3600)’)
          Specifies the time-to-live (TTL) in seconds of garbage
          collector roots that are registered for build results.  This
          means that build results are protected from garbage collection
          for at least TTL seconds.

     ‘port’ (default: ‘8081’)
          Port number used by the HTTP server.

     ‘host’ (default: ‘"localhost"’)
          Listen on the network interface for HOST.  The default is to
          accept connections from localhost.

     ‘specifications’ (default: ‘#~'()’)
          A gexp (*note G-Expressions::) that evaluates to a list of
          specifications, where a specification is an association list
          (*note (guile)Associations Lists::) whose keys are keywords
          (‘#:keyword-example’) as shown in the example above.

     ‘use-substitutes?’ (default: ‘#f’)
          This allows using substitutes to avoid building every
          dependencies of a job from source.

     ‘one-shot?’ (default: ‘#f’)
          Only evaluate specifications and build derivations once.

     ‘fallback?’ (default: ‘#f’)
          When substituting a pre-built binary fails, fall back to
          building packages locally.

     ‘extra-options’ (default: ‘'()’)
          Extra options to pass when running the Cuirass processes.

     ‘cuirass’ (default: ‘cuirass’)
          The Cuirass package to use.


File: guix.ru.info,  Node: Сервисы управления питанием,  Next: Сервисы аудио,  Prev: Длительная интеграция,  Up: Службы

8.8.22 Сервисы управления питанием
----------------------------------

TLP daemon
..........

The ‘(gnu services pm)’ module provides a Guix service definition for
the Linux power management tool TLP.

   TLP enables various powersaving modes in userspace and kernel.
Contrary to ‘upower-service’, it is not a passive, monitoring tool, as
it will apply custom settings each time a new power source is detected.
More information can be found at TLP home page
(https://linrunner.de/en/tlp/tlp.html).

 -- Scheme Variable: tlp-service-type
     The service type for the TLP tool.  Its value should be a valid TLP
     configuration (see below).  To use the default settings, simply
     write:
          (service tlp-service-type)

   By default TLP does not need much configuration but most TLP
parameters can be tweaked using ‘tlp-configuration’.

   Each parameter definition is preceded by its type; for example,
‘boolean foo’ indicates that the ‘foo’ parameter should be specified as
a boolean.  Types starting with ‘maybe-’ denote parameters that won’t
show up in TLP config file when their value is ‘'disabled’.

   Available ‘tlp-configuration’ fields are:

 -- ‘tlp-configuration’ parameter: package tlp
     The TLP package.

 -- ‘tlp-configuration’ parameter: boolean tlp-enable?
     Set to true if you wish to enable TLP.

     Defaults to ‘#t’.

 -- ‘tlp-configuration’ parameter: string tlp-default-mode
     Default mode when no power supply can be detected.  Alternatives
     are AC and BAT.

     Defaults to ‘"AC"’.

 -- ‘tlp-configuration’ parameter: non-negative-integer
          disk-idle-secs-on-ac
     Number of seconds Linux kernel has to wait after the disk goes
     idle, before syncing on AC.

     Defaults to ‘0’.

 -- ‘tlp-configuration’ parameter: non-negative-integer
          disk-idle-secs-on-bat
     Same as ‘disk-idle-ac’ but on BAT mode.

     Defaults to ‘2’.

 -- ‘tlp-configuration’ parameter: non-negative-integer
          max-lost-work-secs-on-ac
     Dirty pages flushing periodicity, expressed in seconds.

     Defaults to ‘15’.

 -- ‘tlp-configuration’ parameter: non-negative-integer
          max-lost-work-secs-on-bat
     Same as ‘max-lost-work-secs-on-ac’ but on BAT mode.

     Defaults to ‘60’.

 -- ‘tlp-configuration’ parameter: maybe-space-separated-string-list
          cpu-scaling-governor-on-ac
     CPU frequency scaling governor on AC mode.  With intel_pstate
     driver, alternatives are powersave and performance.  With
     acpi-cpufreq driver, alternatives are ondemand, powersave,
     performance and conservative.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-space-separated-string-list
          cpu-scaling-governor-on-bat
     Same as ‘cpu-scaling-governor-on-ac’ but on BAT mode.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-non-negative-integer
          cpu-scaling-min-freq-on-ac
     Set the min available frequency for the scaling governor on AC.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-non-negative-integer
          cpu-scaling-max-freq-on-ac
     Set the max available frequency for the scaling governor on AC.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-non-negative-integer
          cpu-scaling-min-freq-on-bat
     Set the min available frequency for the scaling governor on BAT.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-non-negative-integer
          cpu-scaling-max-freq-on-bat
     Set the max available frequency for the scaling governor on BAT.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-non-negative-integer
          cpu-min-perf-on-ac
     Limit the min P-state to control the power dissipation of the CPU,
     in AC mode.  Values are stated as a percentage of the available
     performance.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-non-negative-integer
          cpu-max-perf-on-ac
     Limit the max P-state to control the power dissipation of the CPU,
     in AC mode.  Values are stated as a percentage of the available
     performance.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-non-negative-integer
          cpu-min-perf-on-bat
     Same as ‘cpu-min-perf-on-ac’ on BAT mode.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-non-negative-integer
          cpu-max-perf-on-bat
     Same as ‘cpu-max-perf-on-ac’ on BAT mode.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-boolean cpu-boost-on-ac?
     Enable CPU turbo boost feature on AC mode.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-boolean cpu-boost-on-bat?
     Same as ‘cpu-boost-on-ac?’ on BAT mode.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: boolean sched-powersave-on-ac?
     Allow Linux kernel to minimize the number of CPU
     cores/hyper-threads used under light load conditions.

     Defaults to ‘#f’.

 -- ‘tlp-configuration’ parameter: boolean sched-powersave-on-bat?
     Same as ‘sched-powersave-on-ac?’ but on BAT mode.

     Defaults to ‘#t’.

 -- ‘tlp-configuration’ parameter: boolean nmi-watchdog?
     Enable Linux kernel NMI watchdog.

     Defaults to ‘#f’.

 -- ‘tlp-configuration’ parameter: maybe-string phc-controls
     For Linux kernels with PHC patch applied, change CPU voltages.  An
     example value would be ‘"F:V F:V F:V F:V"’.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: string energy-perf-policy-on-ac
     Set CPU performance versus energy saving policy on AC. Alternatives
     are performance, normal, powersave.

     Defaults to ‘"performance"’.

 -- ‘tlp-configuration’ parameter: string energy-perf-policy-on-bat
     Same as ‘energy-perf-policy-ac’ but on BAT mode.

     Defaults to ‘"powersave"’.

 -- ‘tlp-configuration’ parameter: space-separated-string-list
          disks-devices
     Hard disk devices.

 -- ‘tlp-configuration’ parameter: space-separated-string-list
          disk-apm-level-on-ac
     Hard disk advanced power management level.

 -- ‘tlp-configuration’ parameter: space-separated-string-list
          disk-apm-level-on-bat
     Same as ‘disk-apm-bat’ but on BAT mode.

 -- ‘tlp-configuration’ parameter: maybe-space-separated-string-list
          disk-spindown-timeout-on-ac
     Hard disk spin down timeout.  One value has to be specified for
     each declared hard disk.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-space-separated-string-list
          disk-spindown-timeout-on-bat
     Same as ‘disk-spindown-timeout-on-ac’ but on BAT mode.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-space-separated-string-list
          disk-iosched
     Select IO scheduler for disk devices.  One value has to be
     specified for each declared hard disk.  Example alternatives are
     cfq, deadline and noop.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: string sata-linkpwr-on-ac
     SATA aggressive link power management (ALPM) level.  Alternatives
     are min_power, medium_power, max_performance.

     Defaults to ‘"max_performance"’.

 -- ‘tlp-configuration’ parameter: string sata-linkpwr-on-bat
     Same as ‘sata-linkpwr-ac’ but on BAT mode.

     Defaults to ‘"min_power"’.

 -- ‘tlp-configuration’ parameter: maybe-string sata-linkpwr-blacklist
     Exclude specified SATA host devices for link power management.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-on-off-boolean
          ahci-runtime-pm-on-ac?
     Enable Runtime Power Management for AHCI controller and disks on AC
     mode.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-on-off-boolean
          ahci-runtime-pm-on-bat?
     Same as ‘ahci-runtime-pm-on-ac’ on BAT mode.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: non-negative-integer
          ahci-runtime-pm-timeout
     Seconds of inactivity before disk is suspended.

     Defaults to ‘15’.

 -- ‘tlp-configuration’ parameter: string pcie-aspm-on-ac
     PCI Express Active State Power Management level.  Alternatives are
     default, performance, powersave.

     Defaults to ‘"performance"’.

 -- ‘tlp-configuration’ parameter: string pcie-aspm-on-bat
     Same as ‘pcie-aspm-ac’ but on BAT mode.

     Defaults to ‘"powersave"’.

 -- ‘tlp-configuration’ parameter: string radeon-power-profile-on-ac
     Radeon graphics clock speed level.  Alternatives are low, mid,
     high, auto, default.

     Defaults to ‘"high"’.

 -- ‘tlp-configuration’ parameter: string radeon-power-profile-on-bat
     Same as ‘radeon-power-ac’ but on BAT mode.

     Defaults to ‘"low"’.

 -- ‘tlp-configuration’ parameter: string radeon-dpm-state-on-ac
     Radeon dynamic power management method (DPM). Alternatives are
     battery, performance.

     Defaults to ‘"performance"’.

 -- ‘tlp-configuration’ parameter: string radeon-dpm-state-on-bat
     Same as ‘radeon-dpm-state-ac’ but on BAT mode.

     Defaults to ‘"battery"’.

 -- ‘tlp-configuration’ parameter: string radeon-dpm-perf-level-on-ac
     Radeon DPM performance level.  Alternatives are auto, low, high.

     Defaults to ‘"auto"’.

 -- ‘tlp-configuration’ parameter: string radeon-dpm-perf-level-on-bat
     Same as ‘radeon-dpm-perf-ac’ but on BAT mode.

     Defaults to ‘"auto"’.

 -- ‘tlp-configuration’ parameter: on-off-boolean wifi-pwr-on-ac?
     Wifi power saving mode.

     Defaults to ‘#f’.

 -- ‘tlp-configuration’ parameter: on-off-boolean wifi-pwr-on-bat?
     Same as ‘wifi-power-ac?’ but on BAT mode.

     Defaults to ‘#t’.

 -- ‘tlp-configuration’ parameter: y-n-boolean wol-disable?
     Disable wake on LAN.

     Defaults to ‘#t’.

 -- ‘tlp-configuration’ parameter: non-negative-integer
          sound-power-save-on-ac
     Timeout duration in seconds before activating audio power saving on
     Intel HDA and AC97 devices.  A value of 0 disables power saving.

     Defaults to ‘0’.

 -- ‘tlp-configuration’ parameter: non-negative-integer
          sound-power-save-on-bat
     Same as ‘sound-powersave-ac’ but on BAT mode.

     Defaults to ‘1’.

 -- ‘tlp-configuration’ parameter: y-n-boolean
          sound-power-save-controller?
     Disable controller in powersaving mode on Intel HDA devices.

     Defaults to ‘#t’.

 -- ‘tlp-configuration’ parameter: boolean bay-poweroff-on-bat?
     Enable optical drive in UltraBay/MediaBay on BAT mode.  Drive can
     be powered on again by releasing (and reinserting) the eject lever
     or by pressing the disc eject button on newer models.

     Defaults to ‘#f’.

 -- ‘tlp-configuration’ parameter: string bay-device
     Name of the optical drive device to power off.

     Defaults to ‘"sr0"’.

 -- ‘tlp-configuration’ parameter: string runtime-pm-on-ac
     Runtime Power Management for PCI(e) bus devices.  Alternatives are
     on and auto.

     Defaults to ‘"on"’.

 -- ‘tlp-configuration’ parameter: string runtime-pm-on-bat
     Same as ‘runtime-pm-ac’ but on BAT mode.

     Defaults to ‘"auto"’.

 -- ‘tlp-configuration’ parameter: boolean runtime-pm-all?
     Runtime Power Management for all PCI(e) bus devices, except
     blacklisted ones.

     Defaults to ‘#t’.

 -- ‘tlp-configuration’ parameter: maybe-space-separated-string-list
          runtime-pm-blacklist
     Exclude specified PCI(e) device addresses from Runtime Power
     Management.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: space-separated-string-list
          runtime-pm-driver-blacklist
     Exclude PCI(e) devices assigned to the specified drivers from
     Runtime Power Management.

 -- ‘tlp-configuration’ parameter: boolean usb-autosuspend?
     Enable USB autosuspend feature.

     Defaults to ‘#t’.

 -- ‘tlp-configuration’ parameter: maybe-string usb-blacklist
     Exclude specified devices from USB autosuspend.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: boolean usb-blacklist-wwan?
     Exclude WWAN devices from USB autosuspend.

     Defaults to ‘#t’.

 -- ‘tlp-configuration’ parameter: maybe-string usb-whitelist
     Include specified devices into USB autosuspend, even if they are
     already excluded by the driver or via ‘usb-blacklist-wwan?’.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: maybe-boolean
          usb-autosuspend-disable-on-shutdown?
     Enable USB autosuspend before shutdown.

     Defaults to ‘disabled’.

 -- ‘tlp-configuration’ parameter: boolean
          restore-device-state-on-startup?
     Restore radio device state (bluetooth, wifi, wwan) from previous
     shutdown on system startup.

     Defaults to ‘#f’.

Thermald daemon
...............

The ‘(gnu services pm)’ module provides an interface to thermald, a CPU
frequency scaling service which helps prevent overheating.

 -- Scheme Variable: thermald-service-type
     This is the service type for thermald
     (https://01.org/linux-thermal-daemon/), the Linux Thermal Daemon,
     which is responsible for controlling the thermal state of
     processors and preventing overheating.

 -- Data Type: thermald-configuration
     Data type representing the configuration of
     ‘thermald-service-type’.

     ‘ignore-cpuid-check?’ (default: ‘#f’)
          Ignore cpuid check for supported CPU models.

     ‘thermald’ (default: THERMALD)
          Package object of thermald.


File: guix.ru.info,  Node: Сервисы аудио,  Next: Сервисы виртуализации,  Prev: Сервисы управления питанием,  Up: Службы

8.8.23 Сервисы аудио
--------------------

The ‘(gnu services audio)’ module provides a service to start MPD (the
Music Player Daemon).

Music Player Daemon
...................

The Music Player Daemon (MPD) is a service that can play music while
being controlled from the local machine or over the network by a variety
of clients.

   The following example shows how one might run ‘mpd’ as user ‘"bob"’
on port ‘6666’.  It uses pulseaudio for output.

     (service mpd-service-type
              (mpd-configuration
               (user "bob")
               (port "6666")))

 -- Scheme Variable: mpd-service-type
     The service type for ‘mpd’

 -- Data Type: mpd-configuration
     Data type representing the configuration of ‘mpd’.

     ‘user’ (default: ‘"mpd"’)
          The user to run mpd as.

     ‘music-dir’ (default: ‘"~/Music"’)
          The directory to scan for music files.

     ‘playlist-dir’ (default: ‘"~/.mpd/playlists"’)
          The directory to store playlists.

     ‘db-file’ (default: ‘"~/.mpd/tag_cache"’)
          The location of the music database.

     ‘state-file’ (default: ‘"~/.mpd/state"’)
          The location of the file that stores current MPD’s state.

     ‘sticker-file’ (default: ‘"~/.mpd/sticker.sql"’)
          The location of the sticker database.

     ‘port’ (default: ‘"6600"’)
          The port to run mpd on.

     ‘address’ (default: ‘"any"’)
          The address that mpd will bind to.  To use a Unix domain
          socket, an absolute path can be specified here.

     ‘outputs’ (default: ‘"(list (mpd-output))"’)
          The audio outputs that MPD can use.  By default this is a
          single output using pulseaudio.

 -- Data Type: mpd-output
     Data type representing an ‘mpd’ audio output.

     ‘name’ (default: ‘"MPD"’)
          The name of the audio output.

     ‘type’ (default: ‘"pulse"’)
          The type of audio output.

     ‘enabled?’ (default: ‘#t’)
          Specifies whether this audio output is enabled when MPD is
          started.  By default, all audio outputs are enabled.  This is
          just the default setting when there is no state file; with a
          state file, the previous state is restored.

     ‘tags?’ (default: ‘#t’)
          If set to ‘#f’, then MPD will not send tags to this output.
          This is only useful for output plugins that can receive tags,
          for example the ‘httpd’ output plugin.

     ‘always-on?’ (default: ‘#f’)
          If set to ‘#t’, then MPD attempts to keep this audio output
          always open.  This may be useful for streaming servers, when
          you don’t want to disconnect all listeners even when playback
          is accidentally stopped.

     ‘mixer-type’
          This field accepts a symbol that specifies which mixer should
          be used for this audio output: the ‘hardware’ mixer, the
          ‘software’ mixer, the ‘null’ mixer (allows setting the volume,
          but with no effect; this can be used as a trick to implement
          an external mixer External Mixer) or no mixer (‘none’).

     ‘extra-options’ (default: ‘'()"’)
          An association list of option symbols to string values to be
          appended to the audio output configuration.

   The following example shows a configuration of ‘mpd’ that provides an
HTTP audio streaming output.

     (service mpd-service-type
              (mpd-configuration
                (outputs
                  (list (mpd-output
                          (name "streaming")
                          (type "httpd")
                          (mixer-type 'null)
                          (extra-options
                           `((encoder . "vorbis")
                             (port    . "8080"))))))))


File: guix.ru.info,  Node: Сервисы виртуализации,  Next: Сервисы упраления версиями,  Prev: Сервисы аудио,  Up: Службы

8.8.24 Virtualization services
------------------------------

The ‘(gnu services virtualization)’ module provides services for the
libvirt and virtlog daemons, as well as other virtualization-related
services.

Libvirt daemon
..............

‘libvirtd’ is the server side daemon component of the libvirt
virtualization management system.  This daemon runs on host servers and
performs required management tasks for virtualized guests.

 -- Scheme Variable: libvirt-service-type
     This is the type of the libvirt daemon (https://libvirt.org).  Its
     value must be a ‘libvirt-configuration’.

          (service libvirt-service-type
                   (libvirt-configuration
                    (unix-sock-group "libvirt")
                    (tls-port "16555")))

   Available ‘libvirt-configuration’ fields are:

 -- ‘libvirt-configuration’ parameter: package libvirt
     Libvirt package.

 -- ‘libvirt-configuration’ parameter: boolean listen-tls?
     Flag listening for secure TLS connections on the public TCP/IP
     port.  must set ‘listen’ for this to have any effect.

     It is necessary to setup a CA and issue server certificates before
     using this capability.

     Defaults to ‘#t’.

 -- ‘libvirt-configuration’ parameter: boolean listen-tcp?
     Listen for unencrypted TCP connections on the public TCP/IP port.
     must set ‘listen’ for this to have any effect.

     Using the TCP socket requires SASL authentication by default.  Only
     SASL mechanisms which support data encryption are allowed.  This is
     DIGEST_MD5 and GSSAPI (Kerberos5)

     Defaults to ‘#f’.

 -- ‘libvirt-configuration’ parameter: string tls-port
     Port for accepting secure TLS connections This can be a port
     number, or service name

     Defaults to ‘"16514"’.

 -- ‘libvirt-configuration’ parameter: string tcp-port
     Port for accepting insecure TCP connections This can be a port
     number, or service name

     Defaults to ‘"16509"’.

 -- ‘libvirt-configuration’ parameter: string listen-addr
     IP address or hostname used for client connections.

     Defaults to ‘"0.0.0.0"’.

 -- ‘libvirt-configuration’ parameter: boolean mdns-adv?
     Flag toggling mDNS advertisement of the libvirt service.

     Alternatively can disable for all services on a host by stopping
     the Avahi daemon.

     Defaults to ‘#f’.

 -- ‘libvirt-configuration’ parameter: string mdns-name
     Default mDNS advertisement name.  This must be unique on the
     immediate broadcast network.

     Defaults to ‘"Virtualization Host <hostname>"’.

 -- ‘libvirt-configuration’ parameter: string unix-sock-group
     UNIX domain socket group ownership.  This can be used to allow a
     ’trusted’ set of users access to management capabilities without
     becoming root.

     Defaults to ‘"root"’.

 -- ‘libvirt-configuration’ parameter: string unix-sock-ro-perms
     UNIX socket permissions for the R/O socket.  This is used for
     monitoring VM status only.

     Defaults to ‘"0777"’.

 -- ‘libvirt-configuration’ parameter: string unix-sock-rw-perms
     UNIX socket permissions for the R/W socket.  Default allows only
     root.  If PolicyKit is enabled on the socket, the default will
     change to allow everyone (eg, 0777)

     Defaults to ‘"0770"’.

 -- ‘libvirt-configuration’ parameter: string unix-sock-admin-perms
     UNIX socket permissions for the admin socket.  Default allows only
     owner (root), do not change it unless you are sure to whom you are
     exposing the access to.

     Defaults to ‘"0777"’.

 -- ‘libvirt-configuration’ parameter: string unix-sock-dir
     The directory in which sockets will be found/created.

     Defaults to ‘"/var/run/libvirt"’.

 -- ‘libvirt-configuration’ parameter: string auth-unix-ro
     Authentication scheme for UNIX read-only sockets.  By default
     socket permissions allow anyone to connect

     Defaults to ‘"polkit"’.

 -- ‘libvirt-configuration’ parameter: string auth-unix-rw
     Authentication scheme for UNIX read-write sockets.  By default
     socket permissions only allow root.  If PolicyKit support was
     compiled into libvirt, the default will be to use ’polkit’ auth.

     Defaults to ‘"polkit"’.

 -- ‘libvirt-configuration’ parameter: string auth-tcp
     Authentication scheme for TCP sockets.  If you don’t enable SASL,
     then all TCP traffic is cleartext.  Don’t do this outside of a
     dev/test scenario.

     Defaults to ‘"sasl"’.

 -- ‘libvirt-configuration’ parameter: string auth-tls
     Authentication scheme for TLS sockets.  TLS sockets already have
     encryption provided by the TLS layer, and limited authentication is
     done by certificates.

     It is possible to make use of any SASL authentication mechanism as
     well, by using ’sasl’ for this option

     Defaults to ‘"none"’.

 -- ‘libvirt-configuration’ parameter: optional-list access-drivers
     API access control scheme.

     By default an authenticated user is allowed access to all APIs.
     Access drivers can place restrictions on this.

     Defaults to ‘()’.

 -- ‘libvirt-configuration’ parameter: string key-file
     Server key file path.  If set to an empty string, then no private
     key is loaded.

     Defaults to ‘""’.

 -- ‘libvirt-configuration’ parameter: string cert-file
     Server key file path.  If set to an empty string, then no
     certificate is loaded.

     Defaults to ‘""’.

 -- ‘libvirt-configuration’ parameter: string ca-file
     Server key file path.  If set to an empty string, then no CA
     certificate is loaded.

     Defaults to ‘""’.

 -- ‘libvirt-configuration’ parameter: string crl-file
     Certificate revocation list path.  If set to an empty string, then
     no CRL is loaded.

     Defaults to ‘""’.

 -- ‘libvirt-configuration’ parameter: boolean tls-no-sanity-cert
     Disable verification of our own server certificates.

     When libvirtd starts it performs some sanity checks against its own
     certificates.

     Defaults to ‘#f’.

 -- ‘libvirt-configuration’ parameter: boolean tls-no-verify-cert
     Disable verification of client certificates.

     Client certificate verification is the primary authentication
     mechanism.  Any client which does not present a certificate signed
     by the CA will be rejected.

     Defaults to ‘#f’.

 -- ‘libvirt-configuration’ parameter: optional-list tls-allowed-dn-list
     Whitelist of allowed x509 Distinguished Name.

     Defaults to ‘()’.

 -- ‘libvirt-configuration’ parameter: optional-list
          sasl-allowed-usernames
     Whitelist of allowed SASL usernames.  The format for username
     depends on the SASL authentication mechanism.

     Defaults to ‘()’.

 -- ‘libvirt-configuration’ parameter: string tls-priority
     Override the compile time default TLS priority string.  The default
     is usually ‘"NORMAL"’ unless overridden at build time.  Only set
     this is it is desired for libvirt to deviate from the global
     default settings.

     Defaults to ‘"NORMAL"’.

 -- ‘libvirt-configuration’ parameter: integer max-clients
     Maximum number of concurrent client connections to allow over all
     sockets combined.

     Defaults to ‘5000’.

 -- ‘libvirt-configuration’ parameter: integer max-queued-clients
     Maximum length of queue of connections waiting to be accepted by
     the daemon.  Note, that some protocols supporting retransmission
     may obey this so that a later reattempt at connection succeeds.

     Defaults to ‘1000’.

 -- ‘libvirt-configuration’ parameter: integer max-anonymous-clients
     Maximum length of queue of accepted but not yet authenticated
     clients.  Set this to zero to turn this feature off

     Defaults to ‘20’.

 -- ‘libvirt-configuration’ parameter: integer min-workers
     Number of workers to start up initially.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer max-workers
     Maximum number of worker threads.

     If the number of active clients exceeds ‘min-workers’, then more
     threads are spawned, up to max_workers limit.  Typically you’d want
     max_workers to equal maximum number of clients allowed.

     Defaults to ‘20’.

 -- ‘libvirt-configuration’ parameter: integer prio-workers
     Number of priority workers.  If all workers from above pool are
     stuck, some calls marked as high priority (notably domainDestroy)
     can be executed in this pool.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer max-requests
     Total global limit on concurrent RPC calls.

     Defaults to ‘20’.

 -- ‘libvirt-configuration’ parameter: integer max-client-requests
     Limit on concurrent requests from a single client connection.  To
     avoid one client monopolizing the server this should be a small
     fraction of the global max_requests and max_workers parameter.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer admin-min-workers
     Same as ‘min-workers’ but for the admin interface.

     Defaults to ‘1’.

 -- ‘libvirt-configuration’ parameter: integer admin-max-workers
     Same as ‘max-workers’ but for the admin interface.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer admin-max-clients
     Same as ‘max-clients’ but for the admin interface.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer admin-max-queued-clients
     Same as ‘max-queued-clients’ but for the admin interface.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer admin-max-client-requests
     Same as ‘max-client-requests’ but for the admin interface.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer log-level
     Logging level.  4 errors, 3 warnings, 2 information, 1 debug.

     Defaults to ‘3’.

 -- ‘libvirt-configuration’ parameter: string log-filters
     Logging filters.

     A filter allows to select a different logging level for a given
     category of logs The format for a filter is one of:

        • x:name

        • x:+name

     where ‘name’ is a string which is matched against the category
     given in the ‘VIR_LOG_INIT()’ at the top of each libvirt source
     file, e.g., ‘"remote"’, ‘"qemu"’, or ‘"util.json"’ (the name in the
     filter can be a substring of the full category name, in order to
     match multiple similar categories), the optional ‘"+"’ prefix tells
     libvirt to log stack trace for each message matching name, and ‘x’
     is the minimal level where matching messages should be logged:

        • 1: DEBUG

        • 2: INFO

        • 3: WARNING

        • 4: ERROR

     Multiple filters can be defined in a single filters statement, they
     just need to be separated by spaces.

     Defaults to ‘"3:remote 4:event"’.

 -- ‘libvirt-configuration’ parameter: string log-outputs
     Logging outputs.

     An output is one of the places to save logging information.  The
     format for an output can be:

     ‘x:stderr’
          output goes to stderr

     ‘x:syslog:name’
          use syslog for the output and use the given name as the ident

     ‘x:file:file_path’
          output to a file, with the given filepath

     ‘x:journald’
          output to journald logging system

     In all case the x prefix is the minimal level, acting as a filter

        • 1: DEBUG

        • 2: INFO

        • 3: WARNING

        • 4: ERROR

     Multiple outputs can be defined, they just need to be separated by
     spaces.

     Defaults to ‘"3:stderr"’.

 -- ‘libvirt-configuration’ parameter: integer audit-level
     Allows usage of the auditing subsystem to be altered

        • 0: disable all auditing

        • 1: enable auditing, only if enabled on host

        • 2: enable auditing, and exit if disabled on host.

     Defaults to ‘1’.

 -- ‘libvirt-configuration’ parameter: boolean audit-logging
     Send audit messages via libvirt logging infrastructure.

     Defaults to ‘#f’.

 -- ‘libvirt-configuration’ parameter: optional-string host-uuid
     Host UUID. UUID must not have all digits be the same.

     Defaults to ‘""’.

 -- ‘libvirt-configuration’ parameter: string host-uuid-source
     Source to read host UUID.

        • ‘smbios’: fetch the UUID from ‘dmidecode -s system-uuid’

        • ‘machine-id’: fetch the UUID from ‘/etc/machine-id’

     If ‘dmidecode’ does not provide a valid UUID a temporary UUID will
     be generated.

     Defaults to ‘"smbios"’.

 -- ‘libvirt-configuration’ parameter: integer keepalive-interval
     A keepalive message is sent to a client after ‘keepalive_interval’
     seconds of inactivity to check if the client is still responding.
     If set to -1, libvirtd will never send keepalive requests; however
     clients can still send them and the daemon will send responses.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer keepalive-count
     Maximum number of keepalive messages that are allowed to be sent to
     the client without getting any response before the connection is
     considered broken.

     In other words, the connection is automatically closed
     approximately after ‘keepalive_interval * (keepalive_count + 1)’
     seconds since the last message received from the client.  When
     ‘keepalive-count’ is set to 0, connections will be automatically
     closed after ‘keepalive-interval’ seconds of inactivity without
     sending any keepalive messages.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer admin-keepalive-interval
     Same as above but for admin interface.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer admin-keepalive-count
     Same as above but for admin interface.

     Defaults to ‘5’.

 -- ‘libvirt-configuration’ parameter: integer ovs-timeout
     Timeout for Open vSwitch calls.

     The ‘ovs-vsctl’ utility is used for the configuration and its
     timeout option is set by default to 5 seconds to avoid potential
     infinite waits blocking libvirt.

     Defaults to ‘5’.

Virtlog daemon
..............

The virtlogd service is a server side daemon component of libvirt that
is used to manage logs from virtual machine consoles.

   This daemon is not used directly by libvirt client applications,
rather it is called on their behalf by ‘libvirtd’.  By maintaining the
logs in a standalone daemon, the main ‘libvirtd’ daemon can be restarted
without risk of losing logs.  The ‘virtlogd’ daemon has the ability to
re-exec() itself upon receiving ‘SIGUSR1’, to allow live upgrades
without downtime.

 -- Scheme Variable: virtlog-service-type
     This is the type of the virtlog daemon.  Its value must be a
     ‘virtlog-configuration’.

          (service virtlog-service-type
                   (virtlog-configuration
                    (max-clients 1000)))

 -- ‘virtlog-configuration’ parameter: integer log-level
     Logging level.  4 errors, 3 warnings, 2 information, 1 debug.

     Defaults to ‘3’.

 -- ‘virtlog-configuration’ parameter: string log-filters
     Logging filters.

     A filter allows to select a different logging level for a given
     category of logs The format for a filter is one of:

        • x:name

        • x:+name

     where ‘name’ is a string which is matched against the category
     given in the ‘VIR_LOG_INIT()’ at the top of each libvirt source
     file, e.g., "remote", "qemu", or "util.json" (the name in the
     filter can be a substring of the full category name, in order to
     match multiple similar categories), the optional "+" prefix tells
     libvirt to log stack trace for each message matching name, and ‘x’
     is the minimal level where matching messages should be logged:

        • 1: DEBUG

        • 2: INFO

        • 3: WARNING

        • 4: ERROR

     Multiple filters can be defined in a single filters statement, they
     just need to be separated by spaces.

     Defaults to ‘"3:remote 4:event"’.

 -- ‘virtlog-configuration’ parameter: string log-outputs
     Logging outputs.

     An output is one of the places to save logging information The
     format for an output can be:

     ‘x:stderr’
          output goes to stderr

     ‘x:syslog:name’
          use syslog for the output and use the given name as the ident

     ‘x:file:file_path’
          output to a file, with the given filepath

     ‘x:journald’
          output to journald logging system

     In all case the x prefix is the minimal level, acting as a filter

        • 1: DEBUG

        • 2: INFO

        • 3: WARNING

        • 4: ERROR

     Multiple outputs can be defined, they just need to be separated by
     spaces.

     Defaults to ‘"3:stderr"’.

 -- ‘virtlog-configuration’ parameter: integer max-clients
     Maximum number of concurrent client connections to allow over all
     sockets combined.

     Defaults to ‘1024’.

 -- ‘virtlog-configuration’ parameter: integer max-size
     Maximum file size before rolling over.

     Defaults to ‘2MB’

 -- ‘virtlog-configuration’ parameter: integer max-backups
     Maximum number of backup files to keep.

     Defaults to ‘3’

Transparent Emulation with QEMU
...............................

‘qemu-binfmt-service-type’ provides support for transparent emulation of
program binaries built for different architectures—e.g., it allows you
to transparently execute an ARMv7 program on an x86_64 machine.  It
achieves this by combining the QEMU (https://www.qemu.org) emulator and
the ‘binfmt_misc’ feature of the kernel Linux.

 -- Scheme Variable: qemu-binfmt-service-type
     This is the type of the QEMU/binfmt service for transparent
     emulation.  Its value must be a ‘qemu-binfmt-configuration’ object,
     which specifies the QEMU package to use as well as the architecture
     we want to emulated:

          (service qemu-binfmt-service-type
                   (qemu-binfmt-configuration
                     (platforms (lookup-qemu-platforms "arm" "aarch64"))))

     In this example, we enable transparent emulation for the ARM and
     aarch64 platforms.  Running ‘herd stop qemu-binfmt’ turns it off,
     and running ‘herd start qemu-binfmt’ turns it back on (*note the
     ‘herd’ command: (shepherd)Invoking herd.).

 -- Data Type: qemu-binfmt-configuration
     This is the configuration for the ‘qemu-binfmt’ service.

     ‘platforms’ (default: ‘'()’)
          The list of emulated QEMU platforms.  Each item must be a
          “platform object” as returned by ‘lookup-qemu-platforms’ (see
          below).

     ‘guix-support?’ (default: ‘#f’)
          When it is true, QEMU and all its dependencies are added to
          the build environment of ‘guix-daemon’ (*note
          ‘--chroot-directory’ option: Вызов guix-daemon.).  This allows
          the ‘binfmt_misc’ handlers to be used within the build
          environment, which in turn means that you can transparently
          build programs for another architecture.

          For example, let’s suppose you’re on an x86_64 machine and you
          have this service:

               (service qemu-binfmt-service-type
                        (qemu-binfmt-configuration
                          (platforms (lookup-qemu-platforms "arm"))
                          (guix-support? #t)))

          You can run:

               guix build -s armhf-linux inkscape

          and it will build Inkscape for ARMv7 _as if it were a native
          build_, transparently using QEMU to emulate the ARMv7 CPU.
          Pretty handy if you’d like to test a package build for an
          architecture you don’t have access to!

     ‘qemu’ (default: ‘qemu’)
          The QEMU package to use.

 -- Scheme Procedure: lookup-qemu-platforms PLATFORMS...
     Return the list of QEMU platform objects corresponding to
     PLATFORMS....  PLATFORMS must be a list of strings corresponding to
     platform names, such as ‘"arm"’, ‘"sparc"’, ‘"mips64el"’, and so
     on.

 -- Scheme Procedure: qemu-platform? OBJ
     Return true if OBJ is a platform object.

 -- Scheme Procedure: qemu-platform-name PLATFORM
     Return the name of PLATFORM—a string such as ‘"arm"’.


File: guix.ru.info,  Node: Сервисы упраления версиями,  Next: Игровые службы,  Prev: Сервисы виртуализации,  Up: Службы

8.8.25 Сервисы упраления версиями
---------------------------------

The ‘(gnu services version-control)’ module provides a service to allow
remote access to local Git repositories.  There are three options: the
‘git-daemon-service’, which provides access to repositories via the
‘git://’ unsecured TCP-based protocol, extending the ‘nginx’ web server
to proxy some requests to ‘git-http-backend’, or providing a web
interface with ‘cgit-service-type’.

 -- Scheme Procedure: git-daemon-service [#:config
          (git-daemon-configuration)]

     Return a service that runs ‘git daemon’, a simple TCP server to
     expose repositories over the Git protocol for anonymous access.

     The optional CONFIG argument should be a
     ‘<git-daemon-configuration>’ object, by default it allows read-only
     access to exported(1) repositories under ‘/srv/git’.

 -- Data Type: git-daemon-configuration
     Data type representing the configuration for ‘git-daemon-service’.

     ‘package’ (default: GIT)
          Package object of the Git distributed version control system.

     ‘export-all?’ (default: #F)
          Whether to allow access for all Git repositories, even if they
          do not have the ‘git-daemon-export-ok’ file.

     ‘base-path’ (default: ‘/srv/git’)
          Whether to remap all the path requests as relative to the
          given path.  If you run git daemon with (BASE-PATH "/SRV/GIT")
          on example.com, then if you later try to pull
          ‘git://example.com/hello.git’, git daemon will interpret the
          path as ‘/srv/git/hello.git’.

     ‘user-path’ (default: #F)
          Whether to allow ‘~user’ notation to be used in requests.
          When specified with empty string, requests to
          ‘git://host/~alice/foo’ is taken as a request to access ‘foo’
          repository in the home directory of user ‘alice’.  If
          (USER-PATH "PATH") is specified, the same request is taken as
          a request to access ‘path/foo’ repository in the home
          directory of user ‘alice’.

     ‘listen’ (default: ’())
          Whether to listen on specific IP addresses or hostnames,
          defaults to all.

     ‘port’ (default: #F)
          Whether to listen on an alternative port, which defaults to
          9418.

     ‘whitelist’ (default: ’())
          If not empty, only allow access to this list of directories.

     ‘extra-options’ (default: ’())
          Extra options will be passed to ‘git daemon’, please run ‘man
          git-daemon’ for more information.

   The ‘git://’ protocol lacks authentication.  When you pull from a
repository fetched via ‘git://’, you don’t know whether the data you
receive was modified or is even coming from the specified host, and your
connection is subject to eavesdropping.  It’s better to use an
authenticated and encrypted transport, such as ‘https’.  Although Git
allows you to serve repositories using unsophisticated file-based web
servers, there is a faster protocol implemented by the
‘git-http-backend’ program.  This program is the back-end of a proper
Git web service.  It is designed to sit behind a FastCGI proxy.  *Note
Веб-сервисы::, for more on running the necessary ‘fcgiwrap’ daemon.

   Guix has a separate configuration data type for serving Git
repositories over HTTP.

 -- Data Type: git-http-configuration
     Data type representing the configuration for a future
     ‘git-http-service-type’; can currently be used to configure Nginx
     trough ‘git-http-nginx-location-configuration’.

     ‘package’ (default: GIT)
          Package object of the Git distributed version control system.

     ‘git-root’ (default: ‘/srv/git’)
          Directory containing the Git repositories to expose to the
          world.

     ‘export-all?’ (default: #F)
          Whether to expose access for all Git repositories in GIT-ROOT,
          even if they do not have the ‘git-daemon-export-ok’ file.

     ‘uri-path’ (default: ‘/git/’)
          Path prefix for Git access.  With the default ‘/git/’ prefix,
          this will map ‘http://SERVER/git/REPO.git’ to
          ‘/srv/git/REPO.git’.  Requests whose URI paths do not begin
          with this prefix are not passed on to this Git instance.

     ‘fcgiwrap-socket’ (default: ‘127.0.0.1:9000’)
          The socket on which the ‘fcgiwrap’ daemon is listening.  *Note
          Веб-сервисы::.

   There is no ‘git-http-service-type’, currently; instead you can
create an ‘nginx-location-configuration’ from a ‘git-http-configuration’
and then add that location to a web server.

 -- Scheme Procedure: git-http-nginx-location-configuration
          [config=(git-http-configuration)] Compute an
     ‘nginx-location-configuration’ that corresponds to the given Git
     http configuration.  An example nginx service definition to serve
     the default ‘/srv/git’ over HTTPS might be:

          (service nginx-service-type
                   (nginx-configuration
                    (server-blocks
                     (list
                      (nginx-server-configuration
                       (listen '("443 ssl"))
                       (server-name "git.my-host.org")
                       (ssl-certificate
                        "/etc/letsencrypt/live/git.my-host.org/fullchain.pem")
                       (ssl-certificate-key
                        "/etc/letsencrypt/live/git.my-host.org/privkey.pem")
                       (locations
                        (list
                         (git-http-nginx-location-configuration
                          (git-http-configuration (uri-path "/"))))))))))

     This example assumes that you are using Let’s Encrypt to get your
     TLS certificate.  *Note Сервисы сертификатов::.  The default
     ‘certbot’ service will redirect all HTTP traffic on
     ‘git.my-host.org’ to HTTPS. You will also need to add an ‘fcgiwrap’
     proxy to your system services.  *Note Веб-сервисы::.

Cgit Service
............

Cgit (https://git.zx2c4.com/cgit/) is a web frontend for Git
repositories written in C.

   The following example will configure the service with default values.
By default, Cgit can be accessed on port 80 (‘http://localhost:80’).

     (service cgit-service-type)

   The ‘file-object’ type designates either a file-like object (*note
file-like objects: G-Expressions.) or a string.

   Available ‘cgit-configuration’ fields are:

 -- ‘cgit-configuration’ parameter: package package
     The CGIT package.

 -- ‘cgit-configuration’ parameter: nginx-server-configuration-list
          nginx
     NGINX configuration.

 -- ‘cgit-configuration’ parameter: file-object about-filter
     Specifies a command which will be invoked to format the content of
     about pages (both top-level and for each repository).

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string agefile
     Specifies a path, relative to each repository path, which can be
     used to specify the date and time of the youngest commit in the
     repository.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: file-object auth-filter
     Specifies a command that will be invoked for authenticating
     repository access.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string branch-sort
     Flag which, when set to ‘age’, enables date ordering in the branch
     ref list, and when set ‘name’ enables ordering by branch name.

     Defaults to ‘"name"’.

 -- ‘cgit-configuration’ parameter: string cache-root
     Path used to store the cgit cache entries.

     Defaults to ‘"/var/cache/cgit"’.

 -- ‘cgit-configuration’ parameter: integer cache-static-ttl
     Number which specifies the time-to-live, in minutes, for the cached
     version of repository pages accessed with a fixed SHA1.

     Defaults to ‘-1’.

 -- ‘cgit-configuration’ parameter: integer cache-dynamic-ttl
     Number which specifies the time-to-live, in minutes, for the cached
     version of repository pages accessed without a fixed SHA1.

     Defaults to ‘5’.

 -- ‘cgit-configuration’ parameter: integer cache-repo-ttl
     Number which specifies the time-to-live, in minutes, for the cached
     version of the repository summary page.

     Defaults to ‘5’.

 -- ‘cgit-configuration’ parameter: integer cache-root-ttl
     Number which specifies the time-to-live, in minutes, for the cached
     version of the repository index page.

     Defaults to ‘5’.

 -- ‘cgit-configuration’ parameter: integer cache-scanrc-ttl
     Number which specifies the time-to-live, in minutes, for the result
     of scanning a path for Git repositories.

     Defaults to ‘15’.

 -- ‘cgit-configuration’ parameter: integer cache-about-ttl
     Number which specifies the time-to-live, in minutes, for the cached
     version of the repository about page.

     Defaults to ‘15’.

 -- ‘cgit-configuration’ parameter: integer cache-snapshot-ttl
     Number which specifies the time-to-live, in minutes, for the cached
     version of snapshots.

     Defaults to ‘5’.

 -- ‘cgit-configuration’ parameter: integer cache-size
     The maximum number of entries in the cgit cache.  When set to ‘0’,
     caching is disabled.

     Defaults to ‘0’.

 -- ‘cgit-configuration’ parameter: boolean case-sensitive-sort?
     Sort items in the repo list case sensitively.

     Defaults to ‘#t’.

 -- ‘cgit-configuration’ parameter: list clone-prefix
     List of common prefixes which, when combined with a repository URL,
     generates valid clone URLs for the repository.

     Defaults to ‘()’.

 -- ‘cgit-configuration’ parameter: list clone-url
     List of ‘clone-url’ templates.

     Defaults to ‘()’.

 -- ‘cgit-configuration’ parameter: file-object commit-filter
     Command which will be invoked to format commit messages.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string commit-sort
     Flag which, when set to ‘date’, enables strict date ordering in the
     commit log, and when set to ‘topo’ enables strict topological
     ordering.

     Defaults to ‘"git log"’.

 -- ‘cgit-configuration’ parameter: file-object css
     URL which specifies the css document to include in all cgit pages.

     Defaults to ‘"/share/cgit/cgit.css"’.

 -- ‘cgit-configuration’ parameter: file-object email-filter
     Specifies a command which will be invoked to format names and email
     address of committers, authors, and taggers, as represented in
     various places throughout the cgit interface.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: boolean embedded?
     Flag which, when set to ‘#t’, will make cgit generate a HTML
     fragment suitable for embedding in other HTML pages.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-commit-graph?
     Flag which, when set to ‘#t’, will make cgit print an ASCII-art
     commit history graph to the left of the commit messages in the
     repository log page.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-filter-overrides?
     Flag which, when set to ‘#t’, allows all filter settings to be
     overridden in repository-specific cgitrc files.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-follow-links?
     Flag which, when set to ‘#t’, allows users to follow a file in the
     log view.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-http-clone?
     If set to ‘#t’, cgit will act as an dumb HTTP endpoint for Git
     clones.

     Defaults to ‘#t’.

 -- ‘cgit-configuration’ parameter: boolean enable-index-links?
     Flag which, when set to ‘#t’, will make cgit generate extra links
     "summary", "commit", "tree" for each repo in the repository index.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-index-owner?
     Flag which, when set to ‘#t’, will make cgit display the owner of
     each repo in the repository index.

     Defaults to ‘#t’.

 -- ‘cgit-configuration’ parameter: boolean enable-log-filecount?
     Flag which, when set to ‘#t’, will make cgit print the number of
     modified files for each commit on the repository log page.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-log-linecount?
     Flag which, when set to ‘#t’, will make cgit print the number of
     added and removed lines for each commit on the repository log page.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-remote-branches?
     Flag which, when set to ‘#t’, will make cgit display remote
     branches in the summary and refs views.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-subject-links?
     Flag which, when set to ‘1’, will make cgit use the subject of the
     parent commit as link text when generating links to parent commits
     in commit view.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-html-serving?
     Flag which, when set to ‘#t’, will make cgit use the subject of the
     parent commit as link text when generating links to parent commits
     in commit view.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean enable-tree-linenumbers?
     Flag which, when set to ‘#t’, will make cgit generate linenumber
     links for plaintext blobs printed in the tree view.

     Defaults to ‘#t’.

 -- ‘cgit-configuration’ parameter: boolean enable-git-config?
     Flag which, when set to ‘#f’, will allow cgit to use Git config to
     set any repo specific settings.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: file-object favicon
     URL used as link to a shortcut icon for cgit.

     Defaults to ‘"/favicon.ico"’.

 -- ‘cgit-configuration’ parameter: string footer
     The content of the file specified with this option will be included
     verbatim at the bottom of all pages (i.e. it replaces the standard
     "generated by..." message).

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string head-include
     The content of the file specified with this option will be included
     verbatim in the HTML HEAD section on all pages.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string header
     The content of the file specified with this option will be included
     verbatim at the top of all pages.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: file-object include
     Name of a configfile to include before the rest of the current
     config- file is parsed.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string index-header
     The content of the file specified with this option will be included
     verbatim above the repository index.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string index-info
     The content of the file specified with this option will be included
     verbatim below the heading on the repository index page.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: boolean local-time?
     Flag which, if set to ‘#t’, makes cgit print commit and tag times
     in the servers timezone.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: file-object logo
     URL which specifies the source of an image which will be used as a
     logo on all cgit pages.

     Defaults to ‘"/share/cgit/cgit.png"’.

 -- ‘cgit-configuration’ parameter: string logo-link
     URL loaded when clicking on the cgit logo image.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: file-object owner-filter
     Command which will be invoked to format the Owner column of the
     main page.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: integer max-atom-items
     Number of items to display in atom feeds view.

     Defaults to ‘10’.

 -- ‘cgit-configuration’ parameter: integer max-commit-count
     Number of entries to list per page in "log" view.

     Defaults to ‘50’.

 -- ‘cgit-configuration’ parameter: integer max-message-length
     Number of commit message characters to display in "log" view.

     Defaults to ‘80’.

 -- ‘cgit-configuration’ parameter: integer max-repo-count
     Specifies the number of entries to list per page on the repository
     index page.

     Defaults to ‘50’.

 -- ‘cgit-configuration’ parameter: integer max-repodesc-length
     Specifies the maximum number of repo description characters to
     display on the repository index page.

     Defaults to ‘80’.

 -- ‘cgit-configuration’ parameter: integer max-blob-size
     Specifies the maximum size of a blob to display HTML for in KBytes.

     Defaults to ‘0’.

 -- ‘cgit-configuration’ parameter: string max-stats
     Maximum statistics period.  Valid values are ‘week’,‘month’,
     ‘quarter’ and ‘year’.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: mimetype-alist mimetype
     Mimetype for the specified filename extension.

     Defaults to ‘((gif "image/gif") (html "text/html") (jpg
     "image/jpeg") (jpeg "image/jpeg") (pdf "application/pdf") (png
     "image/png") (svg "image/svg+xml"))’.

 -- ‘cgit-configuration’ parameter: file-object mimetype-file
     Specifies the file to use for automatic mimetype lookup.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string module-link
     Text which will be used as the formatstring for a hyperlink when a
     submodule is printed in a directory listing.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: boolean nocache?
     If set to the value ‘#t’ caching will be disabled.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean noplainemail?
     If set to ‘#t’ showing full author email addresses will be
     disabled.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: boolean noheader?
     Flag which, when set to ‘#t’, will make cgit omit the standard
     header on all pages.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: project-list project-list
     A list of subdirectories inside of ‘repository-directory’, relative
     to it, that should loaded as Git repositories.  An empty list means
     that all subdirectories will be loaded.

     Defaults to ‘()’.

 -- ‘cgit-configuration’ parameter: file-object readme
     Text which will be used as default value for ‘cgit-repo-readme’.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: boolean remove-suffix?
     If set to ‘#t’ and ‘repository-directory’ is enabled, if any
     repositories are found with a suffix of ‘.git’, this suffix will be
     removed for the URL and name.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: integer renamelimit
     Maximum number of files to consider when detecting renames.

     Defaults to ‘-1’.

 -- ‘cgit-configuration’ parameter: string repository-sort
     The way in which repositories in each section are sorted.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: robots-list robots
     Text used as content for the ‘robots’ meta-tag.

     Defaults to ‘("noindex" "nofollow")’.

 -- ‘cgit-configuration’ parameter: string root-desc
     Text printed below the heading on the repository index page.

     Defaults to ‘"a fast webinterface for the git dscm"’.

 -- ‘cgit-configuration’ parameter: string root-readme
     The content of the file specified with this option will be included
     verbatim below the “about” link on the repository index page.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string root-title
     Text printed as heading on the repository index page.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: boolean scan-hidden-path
     If set to ‘#t’ and repository-directory is enabled,
     repository-directory will recurse into directories whose name
     starts with a period.  Otherwise, repository-directory will stay
     away from such directories, considered as “hidden”.  Note that this
     does not apply to the ‘.git’ directory in non-bare repos.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: list snapshots
     Text which specifies the default set of snapshot formats that cgit
     generates links for.

     Defaults to ‘()’.

 -- ‘cgit-configuration’ parameter: repository-directory
          repository-directory
     Name of the directory to scan for repositories (represents
     ‘scan-path’).

     Defaults to ‘"/srv/git"’.

 -- ‘cgit-configuration’ parameter: string section
     The name of the current repository section - all repositories
     defined after this option will inherit the current section name.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string section-sort
     Flag which, when set to ‘1’, will sort the sections on the
     repository listing by name.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: integer section-from-path
     A number which, if defined prior to repository-directory, specifies
     how many path elements from each repo path to use as a default
     section name.

     Defaults to ‘0’.

 -- ‘cgit-configuration’ parameter: boolean side-by-side-diffs?
     If set to ‘#t’ shows side-by-side diffs instead of unidiffs per
     default.

     Defaults to ‘#f’.

 -- ‘cgit-configuration’ parameter: file-object source-filter
     Specifies a command which will be invoked to format plaintext blobs
     in the tree view.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: integer summary-branches
     Specifies the number of branches to display in the repository
     “summary” view.

     Defaults to ‘10’.

 -- ‘cgit-configuration’ parameter: integer summary-log
     Specifies the number of log entries to display in the repository
     “summary” view.

     Defaults to ‘10’.

 -- ‘cgit-configuration’ parameter: integer summary-tags
     Specifies the number of tags to display in the repository “summary”
     view.

     Defaults to ‘10’.

 -- ‘cgit-configuration’ parameter: string strict-export
     Filename which, if specified, needs to be present within the
     repository for cgit to allow access to that repository.

     Defaults to ‘""’.

 -- ‘cgit-configuration’ parameter: string virtual-root
     URL which, if specified, will be used as root for all cgit links.

     Defaults to ‘"/"’.

 -- ‘cgit-configuration’ parameter: repository-cgit-configuration-list
          repositories
     A list of “cgit-repo” records to use with config.

     Defaults to ‘()’.

     Available ‘repository-cgit-configuration’ fields are:

      -- ‘repository-cgit-configuration’ parameter: repo-list snapshots
          A mask of snapshot formats for this repo that cgit generates
          links for, restricted by the global ‘snapshots’ setting.

          Defaults to ‘()’.

      -- ‘repository-cgit-configuration’ parameter: repo-file-object
               source-filter
          Override the default ‘source-filter’.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string url
          The relative URL used to access the repository.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-file-object
               about-filter
          Override the default ‘about-filter’.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string
               branch-sort
          Flag which, when set to ‘age’, enables date ordering in the
          branch ref list, and when set to ‘name’ enables ordering by
          branch name.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-list clone-url
          A list of URLs which can be used to clone repo.

          Defaults to ‘()’.

      -- ‘repository-cgit-configuration’ parameter: repo-file-object
               commit-filter
          Override the default ‘commit-filter’.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string
               commit-sort
          Flag which, when set to ‘date’, enables strict date ordering
          in the commit log, and when set to ‘topo’ enables strict
          topological ordering.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string
               defbranch
          The name of the default branch for this repository.  If no
          such branch exists in the repository, the first branch name
          (when sorted) is used as default instead.  By default branch
          pointed to by HEAD, or “master” if there is no suitable HEAD.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string desc
          The value to show as repository description.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string homepage
          The value to show as repository homepage.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-file-object
               email-filter
          Override the default ‘email-filter’.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: maybe-repo-boolean
               enable-commit-graph?
          A flag which can be used to disable the global setting
          ‘enable-commit-graph?’.

          Defaults to ‘disabled’.

      -- ‘repository-cgit-configuration’ parameter: maybe-repo-boolean
               enable-log-filecount?
          A flag which can be used to disable the global setting
          ‘enable-log-filecount?’.

          Defaults to ‘disabled’.

      -- ‘repository-cgit-configuration’ parameter: maybe-repo-boolean
               enable-log-linecount?
          A flag which can be used to disable the global setting
          ‘enable-log-linecount?’.

          Defaults to ‘disabled’.

      -- ‘repository-cgit-configuration’ parameter: maybe-repo-boolean
               enable-remote-branches?
          Flag which, when set to ‘#t’, will make cgit display remote
          branches in the summary and refs views.

          Defaults to ‘disabled’.

      -- ‘repository-cgit-configuration’ parameter: maybe-repo-boolean
               enable-subject-links?
          A flag which can be used to override the global setting
          ‘enable-subject-links?’.

          Defaults to ‘disabled’.

      -- ‘repository-cgit-configuration’ parameter: maybe-repo-boolean
               enable-html-serving?
          A flag which can be used to override the global setting
          ‘enable-html-serving?’.

          Defaults to ‘disabled’.

      -- ‘repository-cgit-configuration’ parameter: repo-boolean hide?
          Flag which, when set to ‘#t’, hides the repository from the
          repository index.

          Defaults to ‘#f’.

      -- ‘repository-cgit-configuration’ parameter: repo-boolean ignore?
          Flag which, when set to ‘#t’, ignores the repository.

          Defaults to ‘#f’.

      -- ‘repository-cgit-configuration’ parameter: repo-file-object
               logo
          URL which specifies the source of an image which will be used
          as a logo on this repo’s pages.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string
               logo-link
          URL loaded when clicking on the cgit logo image.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-file-object
               owner-filter
          Override the default ‘owner-filter’.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string
               module-link
          Text which will be used as the formatstring for a hyperlink
          when a submodule is printed in a directory listing.  The
          arguments for the formatstring are the path and SHA1 of the
          submodule commit.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: module-link-path
               module-link-path
          Text which will be used as the formatstring for a hyperlink
          when a submodule with the specified subdirectory path is
          printed in a directory listing.

          Defaults to ‘()’.

      -- ‘repository-cgit-configuration’ parameter: repo-string
               max-stats
          Override the default maximum statistics period.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string name
          The value to show as repository name.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string owner
          A value used to identify the owner of the repository.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string path
          An absolute path to the repository directory.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string readme
          A path (relative to repo) which specifies a file to include
          verbatim as the “About” page for this repo.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-string section
          The name of the current repository section - all repositories
          defined after this option will inherit the current section
          name.

          Defaults to ‘""’.

      -- ‘repository-cgit-configuration’ parameter: repo-list
               extra-options
          Extra options will be appended to cgitrc file.

          Defaults to ‘()’.

 -- ‘cgit-configuration’ parameter: list extra-options
     Extra options will be appended to cgitrc file.

     Defaults to ‘()’.

   However, it could be that you just want to get a ‘cgitrc’ up and
running.  In that case, you can pass an ‘opaque-cgit-configuration’ as a
record to ‘cgit-service-type’.  As its name indicates, an opaque
configuration does not have easy reflective capabilities.

   Available ‘opaque-cgit-configuration’ fields are:

 -- ‘opaque-cgit-configuration’ parameter: package cgit
     The cgit package.

 -- ‘opaque-cgit-configuration’ parameter: string string
     The contents of the ‘cgitrc’, as a string.

   For example, if your ‘cgitrc’ is just the empty string, you could
instantiate a cgit service like this:

     (service cgit-service-type
              (opaque-cgit-configuration
               (cgitrc "")))

Gitolite Service
................

Gitolite (https://gitolite.com/gitolite/) is a tool for hosting Git
repositories on a central server.

   Gitolite can handle multiple repositories and users, and supports
flexible configuration of the permissions for the users on the
repositories.

   The following example will configure Gitolite using the default ‘git’
user, and the provided SSH public key.

     (service gitolite-service-type
              (gitolite-configuration
                (admin-pubkey (plain-file
                                "yourname.pub"
                                "ssh-rsa AAAA... guix@example.com"))))

   Gitolite is configured through a special admin repository which you
can clone, for example, if you setup Gitolite on ‘example.com’, you
would run the following command to clone the admin repository.

     git clone git@example.com:gitolite-admin

   When the Gitolite service is activated, the provided ‘admin-pubkey’
will be inserted in to the ‘keydir’ directory in the gitolite-admin
repository.  If this results in a change in the repository, it will be
committed using the message “gitolite setup by GNU Guix”.

 -- Data Type: gitolite-configuration
     Data type representing the configuration for
     ‘gitolite-service-type’.

     ‘package’ (default: GITOLITE)
          Gitolite package to use.

     ‘user’ (default: GIT)
          User to use for Gitolite.  This will be user that you use when
          accessing Gitolite over SSH.

     ‘group’ (default: GIT)
          Group to use for Gitolite.

     ‘home-directory’ (default: "/VAR/LIB/GITOLITE")
          Directory in which to store the Gitolite configuration and
          repositories.

     ‘rc-file’ (default: (GITOLITE-RC-FILE))
          A “file-like” object (*note file-like objects:
          G-Expressions.), representing the configuration for Gitolite.

     ‘admin-pubkey’ (default: #F)
          A “file-like” object (*note file-like objects: G-Expressions.)
          used to setup Gitolite.  This will be inserted in to the
          ‘keydir’ directory within the gitolite-admin repository.

          To specify the SSH key as a string, use the ‘plain-file’
          function.

               (plain-file "yourname.pub" "ssh-rsa AAAA... guix@example.com")

 -- Data Type: gitolite-rc-file
     Data type representing the Gitolite RC file.

     ‘umask’ (default: ‘#o0077’)
          This controls the permissions Gitolite sets on the
          repositories and their contents.

          A value like ‘#o0027’ will give read access to the group used
          by Gitolite (by default: ‘git’).  This is necessary when using
          Gitolite with software like cgit or gitweb.

     ‘git-config-keys’ (default: ‘""’)
          Gitolite allows you to set git config values using the
          ‘config’ keyword.  This setting allows control over the config
          keys to accept.

     ‘roles’ (default: ‘'(("READERS" . 1) ("WRITERS" . ))’)
          Set the role names allowed to be used by users running the
          perms command.

     ‘enable’ (default: ‘'("help" "desc" "info" "perms" "writable" "ssh-authkeys" "git-config" "daemon" "gitweb")’)
          This setting controls the commands and features to enable
          within Gitolite.

   ---------- Footnotes ----------

   (1) By creating the magic file ‘git-daemon-export-ok’ in the
repository directory.


File: guix.ru.info,  Node: Игровые службы,  Next: Службы подключения PAM,  Prev: Сервисы упраления версиями,  Up: Службы

8.8.26 Игровые службы
---------------------

The Battle for Wesnoth Service
..............................

The Battle for Wesnoth (https://wesnoth.org) is a fantasy, turn based
tactical strategy game, with several single player campaigns, and
multiplayer games (both networked and local).

 -- Variable: Scheme Variable wesnothd-service-type
     Service type for the wesnothd service.  Its value must be a
     ‘wesnothd-configuration’ object.  To run wesnothd in the default
     configuration, instantiate it as:

          (service wesnothd-service-type)

 -- Data Type: wesnothd-configuration
     Data type representing the configuration of ‘wesnothd’.

     ‘package’ (default: ‘wesnoth-server’)
          The wesnoth server package to use.

     ‘port’ (default: ‘15000’)
          The port to bind the server to.


File: guix.ru.info,  Node: Службы подключения PAM,  Next: Guix Services,  Prev: Игровые службы,  Up: Службы

8.8.27 Службы подключения PAM
-----------------------------

The ‘(gnu services pam-mount)’ module provides a service allowing users
to mount volumes when they log in.  It should be able to mount any
volume format supported by the system.

 -- Variable: Scheme Variable pam-mount-service-type
     Service type for PAM Mount support.

 -- Data Type: pam-mount-configuration
     Data type representing the configuration of PAM Mount.

     It takes the following parameters:

     ‘rules’
          The configuration rules that will be used to generate
          ‘/etc/security/pam_mount.conf.xml’.

          The configuration rules are SXML elements (*note
          (guile)SXML::), and the the default ones don’t mount anything
          for anyone at login:

               `((debug (@ (enable "0")))
                 (mntoptions (@ (allow ,(string-join
                                         '("nosuid" "nodev" "loop"
                                           "encryption" "fsck" "nonempty"
                                           "allow_root" "allow_other")
                                         ","))))
                 (mntoptions (@ (require "nosuid,nodev")))
                 (logout (@ (wait "0")
                            (hup "0")
                            (term "no")
                            (kill "no")))
                 (mkmountpoint (@ (enable "1")
                                  (remove "true"))))

          Some ‘volume’ elements must be added to automatically mount
          volumes at login.  Here’s an example allowing the user ‘alice’
          to mount her encrypted ‘HOME’ directory and allowing the user
          ‘bob’ to mount the partition where he stores his data:

               (define pam-mount-rules
               `((debug (@ (enable "0")))
                           (volume (@ (user "alice")
                                      (fstype "crypt")
                                      (path "/dev/sda2")
                                      (mountpoint "/home/alice")))
                           (volume (@ (user "bob")
                                      (fstype "auto")
                                      (path "/dev/sdb3")
                                      (mountpoint "/home/bob/data")
                                      (options "defaults,autodefrag,compress")))
                           (mntoptions (@ (allow ,(string-join
                                                   '("nosuid" "nodev" "loop"
                                                     "encryption" "fsck" "nonempty"
                                                     "allow_root" "allow_other")
                                                   ","))))
                           (mntoptions (@ (require "nosuid,nodev")))
                           (logout (@ (wait "0")
                                      (hup "0")
                                      (term "no")
                                      (kill "no")))
                           (mkmountpoint (@ (enable "1")
                                            (remove "true")))))

               (service pam-mount-service-type
                        (pam-mount-configuration
                          (rules pam-mount-rules)))

          The complete list of possible options can be found in the man
          page for pam_mount.conf
          (http://pam-mount.sourceforge.net/pam_mount.conf.5.html).


File: guix.ru.info,  Node: Guix Services,  Next: Службы Linux,  Prev: Службы подключения PAM,  Up: Службы

8.8.28 Guix Services
--------------------

Guix Data Service
.................

The Guix Data Service (http://data.guix.gnu.org) processes, stores and
provides data about GNU Guix.  This includes information about packages,
derivations and lint warnings.

   The data is stored in a PostgreSQL database, and available through a
web interface.

 -- Variable: Scheme Variable guix-data-service-type
     Service type for the Guix Data Service.  Its value must be a
     ‘guix-data-service-configuration’ object.  The service optionally
     extends the getmail service, as the guix-commits mailing list is
     used to find out about changes in the Guix git repository.

 -- Data Type: guix-data-service-configuration
     Data type representing the configuration of the Guix Data Service.

     ‘package’ (default: ‘guix-data-service’)
          The Guix Data Service package to use.

     ‘user’ (default: ‘"guix-data-service"’)
          The system user to run the service as.

     ‘group’ (default: ‘"guix-data-service"’)
          The system group to run the service as.

     ‘port’ (default: ‘8765’)
          The port to bind the web service to.

     ‘host’ (default: ‘"127.0.0.1"’)
          The host to bind the web service to.

     ‘getmail-idle-mailboxes’ (default: ‘#f’)
          If set, this is the list of mailboxes that the getmail service
          will be configured to listen to.

     ‘commits-getmail-retriever-configuration’ (default: ‘#f’)
          If set, this is the ‘getmail-retriever-configuration’ object
          with which to configure getmail to fetch mail from the
          guix-commits mailing list.

     ‘extra-options’ (default: ’())
          Extra command line options for ‘guix-data-service’.

     ‘extra-process-jobs-options’ (default: ’())
          Extra command line options for
          ‘guix-data-service-process-jobs’.


File: guix.ru.info,  Node: Службы Linux,  Next: Hurd Services,  Prev: Guix Services,  Up: Службы

8.8.29 Службы Linux
-------------------

Early OOM Service
.................

Early OOM (https://github.com/rfjakob/earlyoom), also known as Earlyoom,
is a minimalist out of memory (OOM) daemon that runs in user space and
provides a more responsive and configurable alternative to the in-kernel
OOM killer.  It is useful to prevent the system from becoming
unresponsive when it runs out of memory.

 -- Scheme Variable: earlyoom-service-type
     The service type for running ‘earlyoom’, the Early OOM daemon.  Its
     value must be a ‘earlyoom-configuration’ object, described below.
     The service can be instantiated in its default configuration with:

          (service earlyoom-service-type)

 -- Data Type: earlyoom-configuration
     This is the configuration record for the ‘earlyoom-service-type’.

     ‘earlyoom’ (default: EARLYOOM)
          The Earlyoom package to use.

     ‘minimum-available-memory’ (default: ‘10’)
          The threshold for the minimum _available_ memory, in
          percentages.

     ‘minimum-free-swap’ (default: ‘10’)
          The threshold for the minimum free swap memory, in
          percentages.

     ‘prefer-regexp’ (default: ‘#f’)
          A regular expression (as a string) to match the names of the
          processes that should be preferably killed.

     ‘avoid-regexp’ (default: ‘#f’)
          A regular expression (as a string) to match the names of the
          processes that should _not_ be killed.

     ‘memory-report-interval’ (default: ‘0’)
          The interval in seconds at which a memory report is printed.
          It is disabled by default.

     ‘ignore-positive-oom-score-adj?’ (default: ‘#f’)
          A boolean indicating whether the positive adjustments set in
          ‘/proc/*/oom_score_adj’.

     ‘show-debug-messages?’ (default: ‘#f’)
          A boolean indicating whether debug messages should be printed.
          The logs are saved at ‘/var/log/earlyoom.log’.

     ‘send-notification-command’ (default: ‘#f’)
          This can be used to provide a custom command used for sending
          notifications.

Kernel Module Loader Service
............................

The kernel module loader service allows one to load loadable kernel
modules at boot.  This is especially useful for modules that don’t
autoload and need to be manually loaded, as it’s the case with ‘ddcci’.

 -- Scheme Variable: kernel-module-loader-service-type
     The service type for loading loadable kernel modules at boot with
     ‘modprobe’.  Its value must be a list of strings representing
     module names.  For example loading the drivers provided by
     ‘ddcci-driver-linux’, in debugging mode by passing some module
     parameters, can be done as follow:

          (use-modules (gnu) (gnu services))
          (use-package-modules linux)
          (use-service-modules linux)

          (define ddcci-config
            (plain-file "ddcci.conf"
                        "options ddcci dyndbg delay=120"))

          (operating-system
            ...
            (services (cons* (service kernel-module-loader-service-type
                                      '("ddcci" "ddcci_backlight"))
                             (simple-service 'ddcci-config etc-service-type
                                             (list `("modprobe.d/ddcci.conf"
                                                     ,ddcci-config)))
                             %base-services))
            (kernel-loadable-modules (list ddcci-driver-linux)))


File: guix.ru.info,  Node: Hurd Services,  Next: Разнообразные службы,  Prev: Службы Linux,  Up: Службы

8.8.30 Hurd Services
--------------------

 -- Scheme Variable: hurd-console-service-type
     This service starts the fancy ‘VGA’ console client on the Hurd.

     The service’s value is a ‘hurd-console-configuration’ record.

 -- Data Type: hurd-console-configuration
     This is the data type representing the configuration for the
     hurd-console-service.

     ‘hurd’ (default: HURD)
          The Hurd package to use.

 -- Scheme Procedure: hurd-etc-service OS
     This service implements a minimal ‘etc-service’, adding some
     specifics for the Hurd.

     It is part of the ‘hurd-default-essential-services’.

 -- Scheme Variable: hurd-getty-service-type
     This service starts a tty using the Hurd ‘getty’ program.

     The service’s value is a ‘hurd-getty-configuration’ record.

 -- Data Type: hurd-getty-configuration
     This is the data type representing the configuration for the
     hurd-getty-service.

     ‘hurd’ (default: HURD)
          The Hurd package to use.

     ‘tty’
          The name of the console this Getty runs on—e.g., ‘"tty1"’.

     ‘baud-rate’ (default: ‘38400’)
          An integer specifying the baud rate of the tty.


File: guix.ru.info,  Node: Разнообразные службы,  Prev: Hurd Services,  Up: Службы

8.8.31 Разнообразные службы
---------------------------

Fingerprint Service
...................

The ‘(gnu services authentication)’ module provides a DBus service to
read and identify fingerprints via a fingerprint sensor.

 -- Scheme Variable: fprintd-service-type
     The service type for ‘fprintd’, which provides the fingerprint
     reading capability.

          (service fprintd-service-type)

System Control Service
......................

The ‘(gnu services sysctl)’ provides a service to configure kernel
parameters at boot.

 -- Scheme Variable: sysctl-service-type
     The service type for ‘sysctl’, which modifies kernel parameters
     under ‘/proc/sys/’.  To enable IPv4 forwarding, it can be
     instantiated as:

          (service sysctl-service-type
                   (sysctl-configuration
                     (settings '(("net.ipv4.ip_forward" . "1")))))

 -- Data Type: sysctl-configuration
     The data type representing the configuration of ‘sysctl’.

     ‘sysctl’ (default: ‘(file-append procps "/sbin/sysctl"’)
          The ‘sysctl’ executable to use.

     ‘settings’ (default: ‘'()’)
          An association list specifies kernel parameters and their
          values.

PC/SC Smart Card Daemon Service
...............................

The ‘(gnu services security-token)’ module provides the following
service to run ‘pcscd’, the PC/SC Smart Card Daemon.  ‘pcscd’ is the
daemon program for pcsc-lite and the MuscleCard framework.  It is a
resource manager that coordinates communications with smart card
readers, smart cards and cryptographic tokens that are connected to the
system.

 -- Scheme Variable: pcscd-service-type
     Service type for the ‘pcscd’ service.  Its value must be a
     ‘pcscd-configuration’ object.  To run pcscd in the default
     configuration, instantiate it as:

          (service pcscd-service-type)

 -- Data Type: pcscd-configuration
     The data type representing the configuration of ‘pcscd’.

     ‘pcsc-lite’ (default: ‘pcsc-lite’)
          The pcsc-lite package that provides pcscd.
     ‘usb-drivers’ (default: ‘(list ccid)’)
          List of packages that provide USB drivers to pcscd.  Drivers
          are expected to be under ‘pcsc/drivers’ in the store directory
          of the package.

Lirc Service
............

The ‘(gnu services lirc)’ module provides the following service.

 -- Scheme Procedure: lirc-service [#:lirc lirc] [#:device #f] [#:driver
          #f] [#:config-file #f]  [#:extra-options '()]
     Return a service that runs LIRC (http://www.lirc.org), a daemon
     that decodes infrared signals from remote controls.

     Optionally, DEVICE, DRIVER and CONFIG-FILE (configuration file
     name) may be specified.  See ‘lircd’ manual for details.

     Finally, EXTRA-OPTIONS is a list of additional command-line options
     passed to ‘lircd’.

Spice Service
.............

The ‘(gnu services spice)’ module provides the following service.

 -- Scheme Procedure: spice-vdagent-service [#:spice-vdagent]
     Returns a service that runs VDAGENT (https://www.spice-space.org),
     a daemon that enables sharing the clipboard with a vm and setting
     the guest display resolution when the graphical console window
     resizes.

inputattach Service
...................

The inputattach (https://linuxwacom.github.io/) service allows you to
use input devices such as Wacom tablets, touchscreens, or joysticks with
the Xorg display server.

 -- Scheme Variable: inputattach-service-type
     Type of a service that runs ‘inputattach’ on a device and
     dispatches events from it.

 -- Data Type: inputattach-configuration
     ‘device-type’ (default: ‘"wacom"’)
          The type of device to connect to.  Run ‘inputattach --help’,
          from the ‘inputattach’ package, to see the list of supported
          device types.

     ‘device’ (default: ‘"/dev/ttyS0"’)
          The device file to connect to the device.

     ‘baud-rate’ (default: ‘#f’)
          Baud rate to use for the serial connection.  Should be a
          number or ‘#f’.

     ‘log-file’ (default: ‘#f’)
          If true, this must be the name of a file to log messages to.

Dictionary Service
..................

The ‘(gnu services dict)’ module provides the following service:

 -- Scheme Variable: dicod-service-type
     This is the type of the service that runs the ‘dicod’ daemon, an
     implementation of DICT server (*note (dico)Dicod::).

 -- Scheme Procedure: dicod-service [#:config (dicod-configuration)]
     Return a service that runs the ‘dicod’ daemon, an implementation of
     DICT server (*note (dico)Dicod::).

     The optional CONFIG argument specifies the configuration for
     ‘dicod’, which should be a ‘<dicod-configuration>’ object, by
     default it serves the GNU Collaborative International Dictionary of
     English.

     You can add ‘open localhost’ to your ‘~/.dico’ file to make
     ‘localhost’ the default server for ‘dico’ client (*note
     (dico)Initialization File::).

 -- Data Type: dicod-configuration
     Data type representing the configuration of dicod.

     ‘dico’ (default: DICO)
          Package object of the GNU Dico dictionary server.

     ‘interfaces’ (default: ’("LOCALHOST"))
          This is the list of IP addresses and ports and possibly socket
          file names to listen to (*note ‘listen’ directive:
          (dico)Server Settings.).

     ‘handlers’ (default: ’())
          List of ‘<dicod-handler>’ objects denoting handlers (module
          instances).

     ‘databases’ (default: (LIST %DICOD-DATABASE:GCIDE))
          List of ‘<dicod-database>’ objects denoting dictionaries to be
          served.

 -- Data Type: dicod-handler
     Data type representing a dictionary handler (module instance).

     ‘name’
          Name of the handler (module instance).

     ‘module’ (default: #F)
          Name of the dicod module of the handler (instance).  If it is
          ‘#f’, the module has the same name as the handler.  (*note
          (dico)Модули::).

     ‘options’
          List of strings or gexps representing the arguments for the
          module handler

 -- Data Type: dicod-database
     Data type representing a dictionary database.

     ‘name’
          Name of the database, will be used in DICT commands.

     ‘handler’
          Name of the dicod handler (module instance) used by this
          database (*note (dico)Handlers::).

     ‘complex?’ (default: #F)
          Whether the database configuration complex.  The complex
          configuration will need a corresponding ‘<dicod-handler>’
          object, otherwise not.

     ‘options’
          List of strings or gexps representing the arguments for the
          database (*note (dico)Databases::).

 -- Scheme Variable: %dicod-database:gcide
     A ‘<dicod-database>’ object serving the GNU Collaborative
     International Dictionary of English using the ‘gcide’ package.

   The following is an example ‘dicod-service’ configuration.

     (dicod-service #:config
       (dicod-configuration
        (handlers (list (dicod-handler
                         (name "wordnet")
                         (module "dictorg")
                         (options
                          (list #~(string-append "dbdir=" #$wordnet))))))
        (databases (list (dicod-database
                          (name "wordnet")
                          (complex? #t)
                          (handler "wordnet")
                          (options '("database=wn")))
                         %dicod-database:gcide))))

Docker Service
..............

The ‘(gnu services docker)’ module provides the following services.

 -- Scheme Variable: docker-service-type

     This is the type of the service that runs Docker
     (https://www.docker.com), a daemon that can execute application
     bundles (sometimes referred to as “containers”) in isolated
     environments.

 -- Data Type: docker-configuration
     This is the data type representing the configuration of Docker and
     Containerd.

     ‘package’ (default: ‘docker’)
          The Docker package to use.

     ‘containerd’ (default: CONTAINERD)
          The Containerd package to use.

Auditd Service
..............

The ‘(gnu services auditd)’ module provides the following service.

 -- Scheme Variable: auditd-service-type

     This is the type of the service that runs auditd
     (https://people.redhat.com/sgrubb/audit/), a daemon that tracks
     security-relevant information on your system.

     Examples of things that can be tracked:

       1. File accesses
       2. System calls
       3. Invoked commands
       4. Failed login attempts
       5. Firewall filtering
       6. Network access

     ‘auditctl’ from the ‘audit’ package can be used in order to add or
     remove events to be tracked (until the next reboot).  In order to
     permanently track events, put the command line arguments of
     auditctl into ‘/etc/audit/audit.rules’.  ‘aureport’ from the
     ‘audit’ package can be used in order to view a report of all
     recorded events.  The audit daemon usually logs into the directory
     ‘/var/log/audit’.

 -- Data Type: auditd-configuration
     This is the data type representing the configuration of auditd.

     ‘audit’ (default: ‘audit’)
          The audit package to use.

 -- Scheme Variable: singularity-service-type
     This is the type of the service that allows you to run Singularity
     (https://www.sylabs.io/singularity/), a Docker-style tool to create
     and run application bundles (aka.  “containers”).  The value for
     this service is the Singularity package to use.

     The service does not install a daemon; instead, it installs helper
     programs as setuid-root (*note Программы setuid::) such that
     unprivileged users can invoke ‘singularity run’ and similar
     commands.

Nix service
...........

The ‘(gnu services nix)’ module provides the following service.

 -- Scheme Variable: nix-service-type

     This is the type of the service that runs build daemon of the Nix
     (https://nixos.org/nix/) package manager.  Here is an example
     showing how to use it:

          (use-modules (gnu))
          (use-service-modules nix)
          (use-package-modules package-management)

          (operating-system
            ;; ...
            (packages (append (list nix)
                              %base-packages))

            (services (append (list (service nix-service-type))
                              %base-services)))

     After ‘guix system reconfigure’ configure Nix for your user:

        • Add a Nix channel and update it.  See Nix Package Manager
          Guide (https://nixos.org/nix/manual/).

        • Create a symlink to your profile and activate Nix profile:

          $ ln -s "/nix/var/nix/profiles/per-user/$USER/profile" ~/.nix-profile
          $ source /run/current-system/profile/etc/profile.d/nix.sh


File: guix.ru.info,  Node: Программы setuid,  Next: Сертификаты X.509,  Prev: Службы,  Up: Конфигурирование системы

8.9 Программы setuid
====================

Some programs need to run with “root” privileges, even when they are
launched by unprivileged users.  A notorious example is the ‘passwd’
program, which users can run to change their password, and which needs
to access the ‘/etc/passwd’ and ‘/etc/shadow’ files—something normally
restricted to root, for obvious security reasons.  To address that,
these executables are “setuid-root”, meaning that they always run with
root privileges (*note (libc)How Change Persona::, for more info about
the setuid mechanism).

   The store itself _cannot_ contain setuid programs: that would be a
security issue since any user on the system can write derivations that
populate the store (*note Хранилище::).  Thus, a different mechanism is
used: instead of changing the setuid bit directly on files that are in
the store, we let the system administrator _declare_ which programs
should be setuid root.

   The ‘setuid-programs’ field of an ‘operating-system’ declaration
contains a list of G-expressions denoting the names of programs to be
setuid-root (*note Использование системы конфигурации::).  For instance,
the ‘passwd’ program, which is part of the Shadow package, can be
designated by this G-expression (*note G-Expressions::):

     #~(string-append #$shadow "/bin/passwd")

   A default set of setuid programs is defined by the ‘%setuid-programs’
variable of the ‘(gnu system)’ module.

 -- Scheme Variable: %setuid-programs
     A list of G-expressions denoting common programs that are
     setuid-root.

     The list includes commands such as ‘passwd’, ‘ping’, ‘su’, and
     ‘sudo’.

   Under the hood, the actual setuid programs are created in the
‘/run/setuid-programs’ directory at system activation time.  The files
in this directory refer to the “real” binaries, which are in the store.


File: guix.ru.info,  Node: Сертификаты X.509,  Next: Служба выбора имён,  Prev: Программы setuid,  Up: Конфигурирование системы

8.10 Сертификаты X.509
======================

Web servers available over HTTPS (that is, HTTP over the transport-layer
security mechanism, TLS) send client programs an “X.509 certificate”
that the client can then use to _authenticate_ the server.  To do that,
clients verify that the server’s certificate is signed by a so-called
“certificate authority” (CA). But to verify the CA’s signature, clients
must have first acquired the CA’s certificate.

   Web browsers such as GNU IceCat include their own set of CA
certificates, such that they are able to verify CA signatures
out-of-the-box.

   However, most other programs that can talk HTTPS—‘wget’, ‘git’,
‘w3m’, etc.—need to be told where CA certificates can be found.

   In Guix, this is done by adding a package that provides certificates
to the ‘packages’ field of the ‘operating-system’ declaration (*note
Интерфейс operating-system::).  Guix includes one such package,
‘nss-certs’, which is a set of CA certificates provided as part of
Mozilla’s Network Security Services.

   Note that it is _not_ part of ‘%base-packages’, so you need to
explicitly add it.  The ‘/etc/ssl/certs’ directory, which is where most
applications and libraries look for certificates by default, points to
the certificates installed globally.

   Unprivileged users, including users of Guix on a foreign distro, can
also install their own certificate package in their profile.  A number
of environment variables need to be defined so that applications and
libraries know where to find them.  Namely, the OpenSSL library honors
the ‘SSL_CERT_DIR’ and ‘SSL_CERT_FILE’ variables.  Some applications add
their own environment variables; for instance, the Git version control
system honors the certificate bundle pointed to by the ‘GIT_SSL_CAINFO’
environment variable.  Thus, you would typically run something like:

     guix install nss-certs
     export SSL_CERT_DIR="$HOME/.guix-profile/etc/ssl/certs"
     export SSL_CERT_FILE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
     export GIT_SSL_CAINFO="$SSL_CERT_FILE"

   As another example, R requires the ‘CURL_CA_BUNDLE’ environment
variable to point to a certificate bundle, so you would have to run
something like this:

     guix install nss-certs
     export CURL_CA_BUNDLE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"

   For other applications you may want to look up the required
environment variable in the relevant documentation.


File: guix.ru.info,  Node: Служба выбора имён,  Next: Начальный RAM-диск,  Prev: Сертификаты X.509,  Up: Конфигурирование системы

8.11 Служба выбора имён
=======================

The ‘(gnu system nss)’ module provides bindings to the configuration
file of the libc “name service switch” or “NSS” (*note (libc)NSS
Configuration File::).  In a nutshell, the NSS is a mechanism that
allows libc to be extended with new “name” lookup methods for system
databases, which includes host names, service names, user accounts, and
more (*note System Databases and Name Service Switch: (libc)Служба
выбора имён.).

   The NSS configuration specifies, for each system database, which
lookup method is to be used, and how the various methods are chained
together—for instance, under which circumstances NSS should try the next
method in the list.  The NSS configuration is given in the
‘name-service-switch’ field of ‘operating-system’ declarations (*note
‘name-service-switch’: Интерфейс operating-system.).

   As an example, the declaration below configures the NSS to use the
‘nss-mdns’ back-end (https://0pointer.de/lennart/projects/nss-mdns/),
which supports host name lookups over multicast DNS (mDNS) for host
names ending in ‘.local’:

     (name-service-switch
        (hosts (list %files    ;first, check /etc/hosts

                     ;; If the above did not succeed, try
                     ;; with 'mdns_minimal'.
                     (name-service
                       (name "mdns_minimal")

                       ;; 'mdns_minimal' is authoritative for
                       ;; '.local'.  When it returns "not found",
                       ;; no need to try the next methods.
                       (reaction (lookup-specification
                                  (not-found => return))))

                     ;; Then fall back to DNS.
                     (name-service
                       (name "dns"))

                     ;; Finally, try with the "full" 'mdns'.
                     (name-service
                       (name "mdns")))))

   Do not worry: the ‘%mdns-host-lookup-nss’ variable (see below)
contains this configuration, so you will not have to type it if all you
want is to have ‘.local’ host lookup working.

   Note that, in this case, in addition to setting the
‘name-service-switch’ of the ‘operating-system’ declaration, you also
need to use ‘avahi-service-type’ (*note ‘avahi-service-type’: Сервисы
сети.), or ‘%desktop-services’, which includes it (*note Сервисы
рабочего стола::).  Doing this makes ‘nss-mdns’ accessible to the name
service cache daemon (*note ‘nscd-service’: Базовые службы.).

   For convenience, the following variables provide typical NSS
configurations.

 -- Scheme Variable: %default-nss
     This is the default name service switch configuration, a
     ‘name-service-switch’ object.

 -- Scheme Variable: %mdns-host-lookup-nss
     This is the name service switch configuration with support for host
     name lookup over multicast DNS (mDNS) for host names ending in
     ‘.local’.

   The reference for name service switch configuration is given below.
It is a direct mapping of the configuration file format of the C library
, so please refer to the C library manual for more information (*note
(libc)NSS Configuration File::).  Compared to the configuration file
format of libc NSS, it has the advantage not only of adding this warm
parenthetic feel that we like, but also static checks: you will know
about syntax errors and typos as soon as you run ‘guix system’.

 -- Data Type: name-service-switch

     This is the data type representation the configuration of libc’s
     name service switch (NSS). Each field below represents one of the
     supported system databases.

     ‘aliases’
     ‘ethers’
     ‘group’
     ‘gshadow’
     ‘hosts’
     ‘initgroups’
     ‘netgroup’
     ‘networks’
     ‘password’
     ‘public-key’
     ‘rpc’
     ‘services’
     ‘shadow’
          The system databases handled by the NSS. Each of these fields
          must be a list of ‘<name-service>’ objects (see below).

 -- Data Type: name-service

     This is the data type representing an actual name service and the
     associated lookup action.

     ‘name’
          A string denoting the name service (*note (libc)Services in
          the NSS configuration::).

          Note that name services listed here must be visible to nscd.
          This is achieved by passing the ‘#:name-services’ argument to
          ‘nscd-service’ the list of packages providing the needed name
          services (*note ‘nscd-service’: Базовые службы.).

     ‘reaction’
          An action specified using the ‘lookup-specification’ macro
          (*note (libc)Actions in the NSS configuration::).  For
          example:

               (lookup-specification (unavailable => continue)
                                     (success => return))


File: guix.ru.info,  Node: Начальный RAM-диск,  Next: Настройка загрузчика,  Prev: Служба выбора имён,  Up: Конфигурирование системы

8.12 Начальный RAM-диск
=======================

For bootstrapping purposes, the Linux-Libre kernel is passed an “initial
RAM disk”, or “initrd”.  An initrd contains a temporary root file system
as well as an initialization script.  The latter is responsible for
mounting the real root file system, and for loading any kernel modules
that may be needed to achieve that.

   The ‘initrd-modules’ field of an ‘operating-system’ declaration
allows you to specify Linux-libre kernel modules that must be available
in the initrd.  In particular, this is where you would list modules
needed to actually drive the hard disk where your root partition
is—although the default value of ‘initrd-modules’ should cover most use
cases.  For example, assuming you need the ‘megaraid_sas’ module in
addition to the default modules to be able to access your root file
system, you would write:

     (operating-system
       ;; ...
       (initrd-modules (cons "megaraid_sas" %base-initrd-modules)))

 -- Scheme Variable: %base-initrd-modules
     This is the list of kernel modules included in the initrd by
     default.

   Furthermore, if you need lower-level customization, the ‘initrd’
field of an ‘operating-system’ declaration allows you to specify which
initrd you would like to use.  The ‘(gnu system linux-initrd)’ module
provides three ways to build an initrd: the high-level ‘base-initrd’
procedure and the low-level ‘raw-initrd’ and ‘expression->initrd’
procedures.

   The ‘base-initrd’ procedure is intended to cover most common uses.
For example, if you want to add a bunch of kernel modules to be loaded
at boot time, you can define the ‘initrd’ field of the operating system
declaration like this:

     (initrd (lambda (file-systems . rest)
               ;; Create a standard initrd but set up networking
               ;; with the parameters QEMU expects by default.
               (apply base-initrd file-systems
                      #:qemu-networking? #t
                      rest)))

   The ‘base-initrd’ procedure also handles common use cases that
involves using the system as a QEMU guest, or as a “live” system with
volatile root file system.

   The ‘base-initrd’ procedure is built from ‘raw-initrd’ procedure.
Unlike ‘base-initrd’, ‘raw-initrd’ doesn’t do anything high-level, such
as trying to guess which kernel modules and packages should be included
to the initrd.  An example use of ‘raw-initrd’ is when a user has a
custom Linux kernel configuration and default kernel modules included by
‘base-initrd’ are not available.

   The initial RAM disk produced by ‘base-initrd’ or ‘raw-initrd’ honors
several options passed on the Linux kernel command line (that is,
arguments passed via the ‘linux’ command of GRUB, or the ‘-append’
option of QEMU), notably:

‘--load=BOOT’
     Tell the initial RAM disk to load BOOT, a file containing a Scheme
     program, once it has mounted the root file system.

     Guix uses this option to yield control to a boot program that runs
     the service activation programs and then spawns the GNU Shepherd,
     the initialization system.

‘--root=ROOT’
     Mount ROOT as the root file system.  ROOT can be a device name like
     ‘/dev/sda1’, a file system label, or a file system UUID. When
     unspecified, the device name from the root file system of the
     operating system declaration is used.

‘--system=SYSTEM’
     Have ‘/run/booted-system’ and ‘/run/current-system’ point to
     SYSTEM.

‘modprobe.blacklist=MODULES...’
     Instruct the initial RAM disk as well as the ‘modprobe’ command
     (from the kmod package) to refuse to load MODULES.  MODULES must be
     a comma-separated list of module names—e.g., ‘usbkbd,9pnet’.

‘--repl’
     Start a read-eval-print loop (REPL) from the initial RAM disk
     before it tries to load kernel modules and to mount the root file
     system.  Our marketing team calls it “boot-to-Guile”.  The Schemer
     in you will love it.  *Note (guile)Using Guile Interactively::, for
     more information on Guile’s REPL.

   Now that you know all the features that initial RAM disks produced by
‘base-initrd’ and ‘raw-initrd’ provide, here is how to use it and
customize it further.

 -- Scheme Procedure: raw-initrd FILE-SYSTEMS [#:linux-modules '()]
          [#:mapped-devices '()]  [#:keyboard-layout #f]
          [#:helper-packages '()] [#:qemu-networking? #f]
          [#:volatile-root? #f] Return
     a derivation that builds a raw initrd.  FILE-SYSTEMS is a list of
     file systems to be mounted by the initrd, possibly in addition to
     the root file system specified on the kernel command line via
     ‘--root’.  LINUX-MODULES is a list of kernel modules to be loaded
     at boot time.  MAPPED-DEVICES is a list of device mappings to
     realize before FILE-SYSTEMS are mounted (*note Размеченные
     устройства::).  HELPER-PACKAGES is a list of packages to be copied
     in the initrd.  It may include ‘e2fsck/static’ or other packages
     needed by the initrd to check the root file system.

     When true, KEYBOARD-LAYOUT is a ‘<keyboard-layout>’ record denoting
     the desired console keyboard layout.  This is done before
     MAPPED-DEVICES are set up and before FILE-SYSTEMS are mounted such
     that, should the user need to enter a passphrase or use the REPL,
     this happens using the intended keyboard layout.

     When QEMU-NETWORKING? is true, set up networking with the standard
     QEMU parameters.  When VIRTIO? is true, load additional modules so
     that the initrd can be used as a QEMU guest with para-virtualized
     I/O drivers.

     When VOLATILE-ROOT? is true, the root file system is writable but
     any changes to it are lost.

 -- Scheme Procedure: base-initrd FILE-SYSTEMS [#:mapped-devices '()]
          [#:keyboard-layout #f]  [#:qemu-networking? #f]
     [#:volatile-root?  #f]  [#:linux-modules ’()] Return as a file-like
     object a generic initrd, with kernel modules taken from LINUX.
     FILE-SYSTEMS is a list of file-systems to be mounted by the initrd,
     possibly in addition to the root file system specified on the
     kernel command line via ‘--root’.  MAPPED-DEVICES is a list of
     device mappings to realize before FILE-SYSTEMS are mounted.

     When true, KEYBOARD-LAYOUT is a ‘<keyboard-layout>’ record denoting
     the desired console keyboard layout.  This is done before
     MAPPED-DEVICES are set up and before FILE-SYSTEMS are mounted such
     that, should the user need to enter a passphrase or use the REPL,
     this happens using the intended keyboard layout.

     QEMU-NETWORKING? and VOLATILE-ROOT? behaves as in ‘raw-initrd’.

     The initrd is automatically populated with all the kernel modules
     necessary for FILE-SYSTEMS and for the given options.  Additional
     kernel modules can be listed in LINUX-MODULES.  They will be added
     to the initrd, and loaded at boot time in the order in which they
     appear.

   Needless to say, the initrds we produce and use embed a
statically-linked Guile, and the initialization program is a Guile
program.  That gives a lot of flexibility.  The ‘expression->initrd’
procedure builds such an initrd, given the program to run in that
initrd.

 -- Scheme Procedure: expression->initrd EXP [#:guile
          %guile-3.0-static-stripped] [#:name "guile-initrd"] Return as
          a
     file-like object a Linux initrd (a gzipped cpio archive) containing
     GUILE and that evaluates EXP, a G-expression, upon booting.  All
     the derivations referenced by EXP are automatically copied to the
     initrd.


File: guix.ru.info,  Node: Настройка загрузчика,  Next: Вызов guix system,  Prev: Начальный RAM-диск,  Up: Конфигурирование системы

8.13 Настройка загрузчика
=========================

The operating system supports multiple bootloaders.  The bootloader is
configured using ‘bootloader-configuration’ declaration.  All the fields
of this structure are bootloader agnostic except for one field,
‘bootloader’ that indicates the bootloader to be configured and
installed.

   Some of the bootloaders do not honor every field of
‘bootloader-configuration’.  For instance, the extlinux bootloader does
not support themes and thus ignores the ‘theme’ field.

 -- Data Type: bootloader-configuration
     The type of a bootloader configuration declaration.

     ‘bootloader’
          The bootloader to use, as a ‘bootloader’ object.  For now
          ‘grub-bootloader’, ‘grub-efi-bootloader’,
          ‘extlinux-bootloader’ and ‘u-boot-bootloader’ are supported.

          ‘grub-efi-bootloader’ allows to boot on modern systems using
          the “Unified Extensible Firmware Interface” (UEFI). This is
          what you should use if the installation image contains a
          ‘/sys/firmware/efi’ directory when you boot it on your system.

          ‘grub-bootloader’ allows you to boot in particular Intel-based
          machines in “legacy” BIOS mode.

          Available bootloaders are described in ‘(gnu bootloader ...)’
          modules.  In particular, ‘(gnu bootloader u-boot)’ contains
          definitions of bootloaders for a wide range of ARM and AArch64
          systems, using the U-Boot bootloader
          (https://www.denx.de/wiki/U-Boot/).

     ‘target’
          This is a string denoting the target onto which to install the
          bootloader.

          The interpretation depends on the bootloader in question.  For
          ‘grub-bootloader’, for example, it should be a device name
          understood by the bootloader ‘installer’ command, such as
          ‘/dev/sda’ or ‘(hd0)’ (*note (grub)Invoking grub-install::).
          For ‘grub-efi-bootloader’, it should be the mount point of the
          EFI file system, usually ‘/boot/efi’.

     ‘menu-entries’ (default: ‘()’)
          A possibly empty list of ‘menu-entry’ objects (see below),
          denoting entries to appear in the bootloader menu, in addition
          to the current system entry and the entry pointing to previous
          system generations.

     ‘default-entry’ (default: ‘0’)
          The index of the default boot menu entry.  Index 0 is for the
          entry of the current system.

     ‘timeout’ (default: ‘5’)
          The number of seconds to wait for keyboard input before
          booting.  Set to 0 to boot immediately, and to -1 to wait
          indefinitely.

     ‘keyboard-layout’ (default: ‘#f’)
          If this is ‘#f’, the bootloader’s menu (if any) uses the
          default keyboard layout, usually US English (“qwerty”).

          Otherwise, this must be a ‘keyboard-layout’ object (*note
          Раскладка клавиатуры::).

               Примечание: This option is currently ignored by
               bootloaders other than ‘grub’ and ‘grub-efi’.

     ‘theme’ (default: #F)
          The bootloader theme object describing the theme to use.  If
          no theme is provided, some bootloaders might use a default
          theme, that’s true for GRUB.

     ‘terminal-outputs’ (default: ‘'(gfxterm)’)
          The output terminals used for the bootloader boot menu, as a
          list of symbols.  GRUB accepts the values: ‘console’,
          ‘serial’, ‘serial_{0-3}’, ‘gfxterm’, ‘vga_text’, ‘mda_text’,
          ‘morse’, and ‘pkmodem’.  This field corresponds to the GRUB
          variable ‘GRUB_TERMINAL_OUTPUT’ (*note (grub)Simple
          configuration::).

     ‘terminal-inputs’ (default: ‘'()’)
          The input terminals used for the bootloader boot menu, as a
          list of symbols.  For GRUB, the default is the native platform
          terminal as determined at run-time.  GRUB accepts the values:
          ‘console’, ‘serial’, ‘serial_{0-3}’, ‘at_keyboard’, and
          ‘usb_keyboard’.  This field corresponds to the GRUB variable
          ‘GRUB_TERMINAL_INPUT’ (*note (grub)Simple configuration::).

     ‘serial-unit’ (default: ‘#f’)
          The serial unit used by the bootloader, as an integer from 0
          to 3.  For GRUB, it is chosen at run-time; currently GRUB
          chooses 0, which corresponds to COM1 (*note (grub)Serial
          terminal::).

     ‘serial-speed’ (default: ‘#f’)
          The speed of the serial interface, as an integer.  For GRUB,
          the default value is chosen at run-time; currently GRUB
          chooses 9600 bps (*note (grub)Serial terminal::).

   Should you want to list additional boot menu entries via the
‘menu-entries’ field above, you will need to create them with the
‘menu-entry’ form.  For example, imagine you want to be able to boot
another distro (hard to imagine!), you can define a menu entry along
these lines:

     (menu-entry
       (label "The Other Distro")
       (linux "/boot/old/vmlinux-2.6.32")
       (linux-arguments '("root=/dev/sda2"))
       (initrd "/boot/old/initrd"))

   Details below.

 -- Data Type: menu-entry
     The type of an entry in the bootloader menu.

     ‘label’
          The label to show in the menu—e.g., ‘"GNU"’.

     ‘linux’
          The Linux kernel image to boot, for example:

               (file-append linux-libre "/bzImage")

          For GRUB, it is also possible to specify a device explicitly
          in the file path using GRUB’s device naming convention (*note
          (grub)Naming convention::), for example:

               "(hd0,msdos1)/boot/vmlinuz"

          If the device is specified explicitly as above, then the
          ‘device’ field is ignored entirely.

     ‘linux-arguments’ (default: ‘()’)
          The list of extra Linux kernel command-line arguments—e.g.,
          ‘("console=ttyS0")’.

     ‘initrd’
          A G-Expression or string denoting the file name of the initial
          RAM disk to use (*note G-Expressions::).
     ‘device’ (default: ‘#f’)
          The device where the kernel and initrd are to be found—i.e.,
          for GRUB, “root” for this menu entry (*note (grub)root::).

          This may be a file system label (a string), a file system UUID
          (a bytevector, *note Файловые системы::), or ‘#f’, in which
          case the bootloader will search the device containing the file
          specified by the ‘linux’ field (*note (grub)search::).  It
          must _not_ be an OS device name such as ‘/dev/sda1’.

   For now only GRUB has theme support.  GRUB themes are created using
the ‘grub-theme’ form, which is not fully documented yet.

 -- Data Type: grub-theme
     Data type representing the configuration of the GRUB theme.

     ‘gfxmode’ (default: ‘'("auto")’)
          The GRUB ‘gfxmode’ to set (a list of screen resolution
          strings, see *note (grub)gfxmode::).

 -- Scheme Procedure: grub-theme
     Return the default GRUB theme used by the operating system if no
     ‘theme’ field is specified in ‘bootloader-configuration’ record.

     It comes with a fancy background image displaying the GNU and Guix
     logos.

   For example, to override the default resolution, you may use
something like

     (bootloader
      (bootloader-configuration
      ;; ...
      (theme (grub-theme
              (inherit (grub-theme))
              (gfxmode '("1024x786x32" "auto"))))))


File: guix.ru.info,  Node: Вызов guix system,  Next: Запуск guix deploy,  Prev: Настройка загрузчика,  Up: Конфигурирование системы

8.14 Invoking ‘guix system’
===========================

Once you have written an operating system declaration as seen in the
previous section, it can be “instantiated” using the ‘guix system’
command.  The synopsis is:

     guix system OPTIONS... ACTION FILE

   FILE must be the name of a file containing an ‘operating-system’
declaration.  ACTION specifies how the operating system is instantiated.
Currently the following values are supported:

‘search’
     Display available service type definitions that match the given
     regular expressions, sorted by relevance:

          $ guix system search console
          name: console-fonts
          location: gnu/services/base.scm:806:2
          extends: shepherd-root
          description: Install the given fonts on the specified ttys (fonts are per
          + virtual console on GNU/Linux).  The value of this service is a list of
          + tty/font pairs.  The font can be the name of a font provided by the `kbd'
          + package or any valid argument to `setfont', as in this example:
          +
          +      '(("tty1" . "LatGrkCyr-8x16")
          +        ("tty2" . (file-append
          +                      font-tamzen
          +                      "/share/kbd/consolefonts/TamzenForPowerline10x20.psf"))
          +        ("tty3" . (file-append
          +                      font-terminus
          +                      "/share/consolefonts/ter-132n"))) ; for HDPI
          relevance: 9

          name: mingetty
          location: gnu/services/base.scm:1190:2
          extends: shepherd-root
          description: Provide console login using the `mingetty' program.
          relevance: 2

          name: login
          location: gnu/services/base.scm:860:2
          extends: pam
          description: Provide a console log-in service as specified by its
          + configuration value, a `login-configuration' object.
          relevance: 2

          ...

     As for ‘guix package --search’, the result is written in ‘recutils’
     format, which makes it easy to filter the output (*note GNU
     recutils databases: (recutils)Top.).

‘reconfigure’
     Build the operating system described in FILE, activate it, and
     switch to it(1).

          Примечание: It is highly recommended to run ‘guix pull’ once
          before you run ‘guix system reconfigure’ for the first time
          (*note Запуск guix pull::).  Failing to do that you would see
          an older version of Guix once ‘reconfigure’ has completed.

     This effects all the configuration specified in FILE: user
     accounts, system services, global package list, setuid programs,
     etc.  The command starts system services specified in FILE that are
     not currently running; if a service is currently running this
     command will arrange for it to be upgraded the next time it is
     stopped (e.g. by ‘herd stop X’ or ‘herd restart X’).

     This command creates a new generation whose number is one greater
     than the current generation (as reported by ‘guix system
     list-generations’).  If that generation already exists, it will be
     overwritten.  This behavior mirrors that of ‘guix package’ (*note
     Вызов guix package::).

     It also adds a bootloader menu entry for the new OS configuration,
     —unless ‘--no-bootloader’ is passed.  For GRUB, it moves entries
     for older configurations to a submenu, allowing you to choose an
     older system generation at boot time should you need it.

     Upon completion, the new system is deployed under
     ‘/run/current-system’.  This directory contains “provenance
     meta-data”: the list of channels in use (*note Каналы::) and FILE
     itself, when available.  This information is useful should you
     later want to inspect how this particular generation was built.

     In fact, assuming FILE is self-contained, you can later rebuild
     generation N of your operating system with:

          guix time-machine \
            -C /var/guix/profiles/system-N-link/channels.scm -- \
            system reconfigure \
            /var/guix/profiles/system-N-link/configuration.scm

     You can think of it as some sort of built-in version control!  Your
     system is not just a binary artifact: _it carries its own source_.
     *Note ‘provenance-service-type’: Интерфейс сервиса, for more
     information on provenance tracking.

‘switch-generation’
     Switch to an existing system generation.  This action atomically
     switches the system profile to the specified system generation.  It
     also rearranges the system’s existing bootloader menu entries.  It
     makes the menu entry for the specified system generation the
     default, and it moves the entries for the other generations to a
     submenu, if supported by the bootloader being used.  The next time
     the system boots, it will use the specified system generation.

     The bootloader itself is not being reinstalled when using this
     command.  Thus, the installed bootloader is used with an updated
     configuration file.

     The target generation can be specified explicitly by its generation
     number.  For example, the following invocation would switch to
     system generation 7:

          guix system switch-generation 7

     The target generation can also be specified relative to the current
     generation with the form ‘+N’ or ‘-N’, where ‘+3’ means “3
     generations ahead of the current generation,” and ‘-1’ means “1
     generation prior to the current generation.” When specifying a
     negative value such as ‘-1’, you must precede it with ‘--’ to
     prevent it from being parsed as an option.  For example:

          guix system switch-generation -- -1

     Currently, the effect of invoking this action is _only_ to switch
     the system profile to an existing generation and rearrange the
     bootloader menu entries.  To actually start using the target system
     generation, you must reboot after running this action.  In the
     future, it will be updated to do the same things as ‘reconfigure’,
     like activating and deactivating services.

     This action will fail if the specified generation does not exist.

‘roll-back’
     Switch to the preceding system generation.  The next time the
     system boots, it will use the preceding system generation.  This is
     the inverse of ‘reconfigure’, and it is exactly the same as
     invoking ‘switch-generation’ with an argument of ‘-1’.

     Currently, as with ‘switch-generation’, you must reboot after
     running this action to actually start using the preceding system
     generation.

‘delete-generations’
     Delete system generations, making them candidates for garbage
     collection (*note Вызов guix gc::, for information on how to run
     the “garbage collector”).

     This works in the same way as ‘guix package --delete-generations’
     (*note ‘--delete-generations’: Вызов guix package.).  With no
     arguments, all system generations but the current one are deleted:

          guix system delete-generations

     You can also select the generations you want to delete.  The
     example below deletes all the system generations that are more than
     two month old:

          guix system delete-generations 2m

     Running this command automatically reinstalls the bootloader with
     an updated list of menu entries—e.g., the “old generations”
     sub-menu in GRUB no longer lists the generations that have been
     deleted.

‘build’
     Build the derivation of the operating system, which includes all
     the configuration files and programs needed to boot and run the
     system.  This action does not actually install anything.

‘init’
     Populate the given directory with all the files necessary to run
     the operating system specified in FILE.  This is useful for
     first-time installations of Guix System.  For instance:

          guix system init my-os-config.scm /mnt

     copies to ‘/mnt’ all the store items required by the configuration
     specified in ‘my-os-config.scm’.  This includes configuration
     files, packages, and so on.  It also creates other essential files
     needed for the system to operate correctly—e.g., the ‘/etc’,
     ‘/var’, and ‘/run’ directories, and the ‘/bin/sh’ file.

     This command also installs bootloader on the target specified in
     ‘my-os-config’, unless the ‘--no-bootloader’ option was passed.

‘vm’
     Build a virtual machine that contains the operating system declared
     in FILE, and return a script to run that virtual machine (VM).

          Примечание: The ‘vm’ action and others below can use KVM
          support in the Linux-libre kernel.  Specifically, if the
          machine has hardware virtualization support, the corresponding
          KVM kernel module should be loaded, and the ‘/dev/kvm’ device
          node must exist and be readable and writable by the user and
          by the build users of the daemon (*note Установка окружения
          сборки::).

     Arguments given to the script are passed to QEMU as in the example
     below, which enables networking and requests 1 GiB of RAM for the
     emulated machine:

          $ /gnu/store/...-run-vm.sh -m 1024 -smp 2 -net user,model=virtio-net-pci

     The VM shares its store with the host system.

     Additional file systems can be shared between the host and the VM
     using the ‘--share’ and ‘--expose’ command-line options: the former
     specifies a directory to be shared with write access, while the
     latter provides read-only access to the shared directory.

     The example below creates a VM in which the user’s home directory
     is accessible read-only, and where the ‘/exchange’ directory is a
     read-write mapping of ‘$HOME/tmp’ on the host:

          guix system vm my-config.scm \
             --expose=$HOME --share=$HOME/tmp=/exchange

     On GNU/Linux, the default is to boot directly to the kernel; this
     has the advantage of requiring only a very tiny root disk image
     since the store of the host can then be mounted.

     The ‘--full-boot’ option forces a complete boot sequence, starting
     with the bootloader.  This requires more disk space since a root
     image containing at least the kernel, initrd, and bootloader data
     files must be created.  The ‘--image-size’ option can be used to
     specify the size of the image.

‘vm-image’
‘disk-image’
‘docker-image’
     Return a virtual machine, disk image, or Docker image of the
     operating system declared in FILE that stands alone.  By default,
     ‘guix system’ estimates the size of the image needed to store the
     system, but you can use the ‘--image-size’ option to specify a
     value.  Docker images are built to contain exactly what they need,
     so the ‘--image-size’ option is ignored in the case of
     ‘docker-image’.

     You can specify the root file system type by using the
     ‘--file-system-type’ option.  It defaults to ‘ext4’.

     When using ‘vm-image’, the returned image is in qcow2 format, which
     the QEMU emulator can efficiently use.  *Note Запуск Guix на
     виртуальной машине::, for more information on how to run the image
     in a virtual machine.

     When using ‘disk-image’, a raw disk image is produced; it can be
     copied as is to a USB stick, for instance.  Assuming ‘/dev/sdc’ is
     the device corresponding to a USB stick, one can copy the image to
     it using the following command:

          # dd if=$(guix system disk-image my-os.scm) of=/dev/sdc

     When using ‘docker-image’, a Docker image is produced.  Guix builds
     the image from scratch, not from a pre-existing Docker base image.
     As a result, it contains _exactly_ what you define in the operating
     system configuration file.  You can then load the image and launch
     a Docker container using commands like the following:

          image_id="`docker load < guix-system-docker-image.tar.gz`"
          container_id="`docker create $image_id`"
          docker start $container_id

     This command starts a new Docker container from the specified
     image.  It will boot the Guix system in the usual manner, which
     means it will start any services you have defined in the operating
     system configuration.  You can get an interactive shell running in
     the container using ‘docker exec’:

          docker exec -ti $container_id /run/current-system/profile/bin/bash --login

     Depending on what you run in the Docker container, it may be
     necessary to give the container additional permissions.  For
     example, if you intend to build software using Guix inside of the
     Docker container, you may need to pass the ‘--privileged’ option to
     ‘docker create’.

     Last, the ‘--network’ option applies to ‘guix system docker-image’:
     it produces an image where network is supposedly shared with the
     host, and thus without services like nscd or NetworkManager.

‘контейнер’
     Return a script to run the operating system declared in FILE within
     a container.  Containers are a set of lightweight isolation
     mechanisms provided by the kernel Linux-libre.  Containers are
     substantially less resource-demanding than full virtual machines
     since the kernel, shared objects, and other resources can be shared
     with the host system; this also means they provide thinner
     isolation.

     Currently, the script must be run as root in order to support more
     than a single user and group.  The container shares its store with
     the host system.

     As with the ‘vm’ action (*note guix system vm::), additional file
     systems to be shared between the host and container can be
     specified using the ‘--share’ and ‘--expose’ options:

          guix system container my-config.scm \
             --expose=$HOME --share=$HOME/tmp=/exchange

          Примечание: This option requires Linux-libre 3.19 or newer.

   OPTIONS can contain any of the common build options (*note
Стандартные параметры сборки::).  In addition, OPTIONS can contain one
of the following:

‘--expression=EXPR’
‘-e EXPR’
     Consider the operating-system EXPR evaluates to.  This is an
     alternative to specifying a file which evaluates to an operating
     system.  This is used to generate the Guix system installer *note
     Сборка установочного образа::).

‘--system=SYSTEM’
‘-s SYSTEM’
     Attempt to build for SYSTEM instead of the host system type.  This
     works as per ‘guix build’ (*note Запуск guix build::).

‘--derivation’
‘-d’
     Return the derivation file name of the given operating system
     without building anything.

‘--save-provenance’
     As discussed above, ‘guix system init’ and ‘guix system
     reconfigure’ always save provenance information via a dedicated
     service (*note ‘provenance-service-type’: Интерфейс сервиса.).
     However, other commands don’t do that by default.  If you wish to,
     say, create a virtual machine image that contains provenance
     information, you can run:

          guix system vm-image --save-provenance config.scm

     That way, the resulting image will effectively “embed its own
     source” in the form of meta-data in ‘/run/current-system’.  With
     that information, one can rebuild the image to make sure it really
     contains what it pretends to contain; or they could use that to
     derive a variant of the image.

‘--file-system-type=TYPE’
‘-t TYPE’
     For the ‘disk-image’ action, create a file system of the given TYPE
     on the image.

     When this option is omitted, ‘guix system’ uses ‘ext4’.

     ‘--file-system-type=iso9660’ produces an ISO-9660 image, suitable
     for burning on CDs and DVDs.

‘--image-size=SIZE’
     For the ‘vm-image’ and ‘disk-image’ actions, create an image of the
     given SIZE.  SIZE may be a number of bytes, or it may include a
     unit as a suffix (*note size specifications: (coreutils)Block
     size.).

     When this option is omitted, ‘guix system’ computes an estimate of
     the image size as a function of the size of the system declared in
     FILE.

‘--network’
‘-N’
     For the ‘container’ action, allow containers to access the host
     network, that is, do not create a network namespace.

‘--root=FILE’
‘-r FILE’
     Make FILE a symlink to the result, and register it as a garbage
     collector root.

‘--skip-checks’
     Skip pre-installation safety checks.

     By default, ‘guix system init’ and ‘guix system reconfigure’
     perform safety checks: they make sure the file systems that appear
     in the ‘operating-system’ declaration actually exist (*note
     Файловые системы::), and that any Linux kernel modules that may be
     needed at boot time are listed in ‘initrd-modules’ (*note Начальный
     RAM-диск::).  Passing this option skips these tests altogether.

‘--on-error=STRATEGY’
     Apply STRATEGY when an error occurs when reading FILE.  STRATEGY
     may be one of the following:

     ‘nothing-special’
          Report the error concisely and exit.  This is the default
          strategy.

     ‘backtrace’
          Likewise, but also display a backtrace.

     ‘debug’
          Report the error and enter Guile’s debugger.  From there, you
          can run commands such as ‘,bt’ to get a backtrace, ‘,locals’
          to display local variable values, and more generally inspect
          the state of the program.  *Note (guile)Debug Commands::, for
          a list of available debugging commands.

   Once you have built, configured, re-configured, and re-re-configured
your Guix installation, you may find it useful to list the operating
system generations available on disk—and that you can choose from the
bootloader boot menu:

‘describe’
     Describe the current system generation: its file name, the kernel
     and bootloader used, etc., as well as provenance information when
     available.

‘list-generations’
     List a summary of each generation of the operating system available
     on disk, in a human-readable way.  This is similar to the
     ‘--list-generations’ option of ‘guix package’ (*note Вызов guix
     package::).

     Optionally, one can specify a pattern, with the same syntax that is
     used in ‘guix package --list-generations’, to restrict the list of
     generations displayed.  For instance, the following command
     displays generations that are up to 10 days old:

          $ guix system list-generations 10d

   The ‘guix system’ command has even more to offer!  The following
sub-commands allow you to visualize how your system services relate to
each other:

‘extension-graph’
     Emit in Dot/Graphviz format to standard output the “service
     extension graph” of the operating system defined in FILE (*note
     Производство сервисов.::, for more information on service
     extensions).

     The command:

          $ guix system extension-graph FILE | xdot -

     shows the extension relations among services.

‘shepherd-graph’
     Emit in Dot/Graphviz format to standard output the “dependency
     graph” of shepherd services of the operating system defined in
     FILE.  *Note Сервисы Shepherd::, for more information and for an
     example graph.

   ---------- Footnotes ----------

   (1) This action (and the related actions ‘switch-generation’ and
‘roll-back’) are usable only on systems already running Guix System.


File: guix.ru.info,  Node: Запуск guix deploy,  Next: Запуск Guix на виртуальной машине,  Prev: Вызов guix system,  Up: Конфигурирование системы

8.15 Invoking ‘guix deploy’
===========================

We’ve already seen ‘operating-system’ declarations used to manage a
machine’s configuration locally.  Suppose you need to configure multiple
machines, though—perhaps you’re managing a service on the web that’s
comprised of several servers.  ‘guix deploy’ enables you to use those
same ‘operating-system’ declarations to manage multiple remote hosts at
once as a logical “deployment”.

     Примечание: The functionality described in this section is still
     under development and is subject to change.  Get in touch with us
     on <guix-devel@gnu.org>!

     guix deploy FILE

   Such an invocation will deploy the machines that the code within FILE
evaluates to.  As an example, FILE might contain a definition like this:

     ;; This is a Guix deployment of a "bare bones" setup, with
     ;; no X11 display server, to a machine with an SSH daemon
     ;; listening on localhost:2222. A configuration such as this
     ;; may be appropriate for virtual machine with ports
     ;; forwarded to the host's loopback interface.

     (use-service-modules networking ssh)
     (use-package-modules bootloaders)

     (define %system
       (operating-system
        (host-name "gnu-deployed")
        (timezone "Etc/UTC")
        (bootloader (bootloader-configuration
                     (bootloader grub-bootloader)
                     (target "/dev/vda")
                     (terminal-outputs '(console))))
        (file-systems (cons (file-system
                             (mount-point "/")
                             (device "/dev/vda1")
                             (type "ext4"))
                            %base-file-systems))
        (services
         (append (list (service dhcp-client-service-type)
                       (service openssh-service-type
                                (openssh-configuration
                                 (permit-root-login #t)
                                 (allow-empty-passwords? #t))))
                 %base-services))))

     (list (machine
            (operating-system %system)
            (environment managed-host-environment-type)
            (configuration (machine-ssh-configuration
                            (host-name "localhost")
                            (system "x86_64-linux")
                            (user "alice")
                            (identity "./id_rsa")
                            (port 2222)))))

   The file should evaluate to a list of MACHINE objects.  This example,
upon being deployed, will create a new generation on the remote system
realizing the ‘operating-system’ declaration ‘%system’.  ‘environment’
and ‘configuration’ specify how the machine should be provisioned—that
is, how the computing resources should be created and managed.  The
above example does not create any resources, as a ‘'managed-host’ is a
machine that is already running the Guix system and available over the
network.  This is a particularly simple case; a more complex deployment
may involve, for example, starting virtual machines through a Virtual
Private Server (VPS) provider.  In such a case, a different ENVIRONMENT
type would be used.

   Do note that you first need to generate a key pair on the coordinator
machine to allow the daemon to export signed archives of files from the
store (*note Вызов guix archive::).

     # guix archive --generate-key

Each target machine must authorize the key of the master machine so that
it accepts store items it receives from the coordinator:

     # guix archive --authorize < coordinator-public-key.txt

   ‘user’, in this example, specifies the name of the user account to
log in as to perform the deployment.  Its default value is ‘root’, but
root login over SSH may be forbidden in some cases.  To work around
this, ‘guix deploy’ can log in as an unprivileged user and employ ‘sudo’
to escalate privileges.  This will only work if ‘sudo’ is currently
installed on the remote and can be invoked non-interactively as ‘user’.
That is, the line in ‘sudoers’ granting ‘user’ the ability to use ‘sudo’
must contain the ‘NOPASSWD’ tag.  This can be accomplished with the
following operating system configuration snippet:

     (use-modules ...
                  (gnu system))               ;for %sudoers-specification

     (define %user "username")

     (operating-system
       ...
       (sudoers-file
          (plain-file "sudoers"
                      (string-append (plain-file-content %sudoers-specification)
                                     (format #f "~a ALL = NOPASSWD: ALL~%"
                                             %user)))))


   For more information regarding the format of the ‘sudoers’ file,
consult ‘man sudoers’.

 -- Data Type: machine
     This is the data type representing a single machine in a
     heterogeneous Guix deployment.

     ‘operating-system’
          The object of the operating system configuration to deploy.

     ‘environment’
          An ‘environment-type’ describing how the machine should be
          provisioned.

     ‘configuration’ (default: ‘#f’)
          An object describing the configuration for the machine’s
          ‘environment’.  If the ‘environment’ has a default
          configuration, ‘#f’ may be used.  If ‘#f’ is used for an
          environment with no default configuration, however, an error
          will be thrown.

 -- Data Type: machine-ssh-configuration
     This is the data type representing the SSH client parameters for a
     machine with an ‘environment’ of ‘managed-host-environment-type’.

     ‘host-name’
     ‘build-locally?’ (default: ‘#t’)
          If false, system derivations will be built on the machine
          being deployed to.
     ‘system’
          The system type describing the architecture of the machine
          being deployed to—e.g., ‘"x86_64-linux"’.
     ‘authorize?’ (default: ‘#t’)
          If true, the coordinator’s signing key will be added to the
          remote’s ACL keyring.
     ‘port’ (default: ‘22’)
     ‘user’ (default: ‘"root"’)
     ‘identity’ (default: ‘#f’)
          If specified, the path to the SSH private key to use to
          authenticate with the remote host.

     ‘host-key’ (default: ‘#f’)
          This should be the SSH host key of the machine, which looks
          like this:

               ssh-ed25519 AAAAC3Nz... root@example.org

          When ‘host-key’ is ‘#f’, the server is authenticated against
          the ‘~/.ssh/known_hosts’ file, just like the OpenSSH ‘ssh’
          client does.

 -- Data Type: digital-ocean-configuration
     This is the data type describing the Droplet that should be created
     for a machine with an ‘environment’ of
     ‘digital-ocean-environment-type’.

     ‘ssh-key’
          The path to the SSH private key to use to authenticate with
          the remote host.  In the future, this field may not exist.
     ‘tags’
          A list of string “tags” that uniquely identify the machine.
          Must be given such that no two machines in the deployment have
          the same set of tags.
     ‘region’
          A Digital Ocean region slug, such as ‘"nyc3"’.
     ‘size’
          A Digital Ocean size slug, such as ‘"s-1vcpu-1gb"’
     ‘enable-ipv6?’
          Whether or not the droplet should be created with IPv6
          networking.


File: guix.ru.info,  Node: Запуск Guix на виртуальной машине,  Next: Создание служб,  Prev: Запуск guix deploy,  Up: Конфигурирование системы

8.16 Running Guix in a Virtual Machine
======================================

To run Guix in a virtual machine (VM), one can use the pre-built Guix VM
image distributed at
<https://ftp.gnu.org/gnu/guix/guix-system-vm-image-1.0.1.17089-7e269.x86_64-linux.xz>.
This image is a compressed image in QCOW format.  You will first need to
decompress with ‘xz -d’, and then you can pass it to an emulator such as
QEMU (see below for details).

   This image boots the Xfce graphical environment and it contains some
commonly-used tools.  You can install more software in the image by
running ‘guix package’ in a terminal (*note Вызов guix package::).  You
can also reconfigure the system based on its initial configuration file
available as ‘/run/current-system/configuration.scm’ (*note
Использование системы конфигурации::).

   Instead of using this pre-built image, one can also build their own
virtual machine image using ‘guix system vm-image’ (*note Вызов guix
system::).  The returned image is in qcow2 format, which the QEMU
emulator (https://qemu.org/) can efficiently use.

   If you built your own image, you must copy it out of the store (*note
Хранилище::) and give yourself permission to write to the copy before
you can use it.  When invoking QEMU, you must choose a system emulator
that is suitable for your hardware platform.  Here is a minimal QEMU
invocation that will boot the result of ‘guix system vm-image’ on x86_64
hardware:

     $ qemu-system-x86_64 \
        -nic user,model=virtio-net-pci \
        -enable-kvm -m 1024 \
        -device virtio-blk,drive=myhd \
        -drive if=none,file=/tmp/qemu-image,id=myhd

   Here is what each of these options means:

‘qemu-system-x86_64’
     This specifies the hardware platform to emulate.  This should match
     the host.

‘-nic user,model=virtio-net-pci’
     Enable the unprivileged user-mode network stack.  The guest OS can
     access the host but not vice versa.  This is the simplest way to
     get the guest OS online.  ‘model’ specifies which network device to
     emulate: ‘virtio-net-pci’ is a special device made for virtualized
     operating systems and recommended for most uses.  Assuming your
     hardware platform is x86_64, you can get a list of available NIC
     models by running ‘qemu-system-x86_64 -nic model=help’.

‘-enable-kvm’
     If your system has hardware virtualization extensions, enabling the
     virtual machine support (KVM) of the Linux kernel will make things
     run faster.

‘-m 1024’
     RAM available to the guest OS, in mebibytes.  Defaults to 128 MiB,
     which may be insufficient for some operations.

‘-device virtio-blk,drive=myhd’
     Create a ‘virtio-blk’ drive called “myhd”.  ‘virtio-blk’ is a
     “paravirtualization” mechanism for block devices that allows QEMU
     to achieve better performance than if it were emulating a complete
     disk drive.  See the QEMU and KVM documentation for more info.

‘-drive if=none,file=/tmp/qemu-image,id=myhd’
     Use our QCOW image, the ‘/tmp/qemu-image’ file, as the backing
     store the the “myhd” drive.

   The default ‘run-vm.sh’ script that is returned by an invocation of
‘guix system vm’ does not add a ‘-nic user’ flag by default.  To get
network access from within the vm add the ‘(dhcp-client-service)’ to
your system definition and start the VM using ‘`guix system vm
config.scm` -nic user’.  An important caveat of using ‘-nic user’ for
networking is that ‘ping’ will not work, because it uses the ICMP
protocol.  You’ll have to use a different command to check for network
connectivity, for example ‘guix download’.

8.16.1 Connecting Through SSH
-----------------------------

To enable SSH inside a VM you need to add an SSH server like
‘openssh-service-type’ to your VM (*note ‘openssh-service-type’: Сервисы
сети.).  In addition you need to forward the SSH port, 22 by default, to
the host.  You can do this with

     `guix system vm config.scm` -nic user,model=virtio-net-pci,hostfwd=tcp::10022-:22

   To connect to the VM you can run

     ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 10022

   The ‘-p’ tells ‘ssh’ the port you want to connect to.  ‘-o
UserKnownHostsFile=/dev/null’ prevents ‘ssh’ from complaining every time
you modify your ‘config.scm’ file and the ‘-o StrictHostKeyChecking=no’
prevents you from having to allow a connection to an unknown host every
time you connect.

8.16.2 Using ‘virt-viewer’ with Spice
-------------------------------------

As an alternative to the default ‘qemu’ graphical client you can use the
‘remote-viewer’ from the ‘virt-viewer’ package.  To connect pass the
‘-spice port=5930,disable-ticketing’ flag to ‘qemu’.  See previous
section for further information on how to do this.

   Spice also allows you to do some nice stuff like share your clipboard
with your VM. To enable that you’ll also have to pass the following
flags to ‘qemu’:

     -device virtio-serial-pci,id=virtio-serial0,max_ports=16,bus=pci.0,addr=0x5
     -chardev spicevmc,name=vdagent,id=vdagent
     -device virtserialport,nr=1,bus=virtio-serial0.0,chardev=vdagent,
     name=com.redhat.spice.0

   You’ll also need to add the ‘(spice-vdagent-service)’ to your system
definition (*note Spice service: Разнообразные службы.).


File: guix.ru.info,  Node: Создание служб,  Prev: Запуск Guix на виртуальной машине,  Up: Конфигурирование системы

8.17 Создание служб
===================

The previous sections show the available services and how one can
combine them in an ‘operating-system’ declaration.  But how do we define
them in the first place?  And what is a service anyway?

* Menu:

* Производство сервисов.::  Модель
                                                  построения
                                                  сервисов.
* Типы сервисов и сервисы::  Типы и сервисы.
* Интерфейс сервиса::  Доступ через API.
* Сервисы Shepherd::  Особенный тип сервисов.


File: guix.ru.info,  Node: Производство сервисов.,  Next: Типы сервисов и сервисы,  Up: Создание служб

8.17.1 Производство сервисов.
-----------------------------

Here we define a “service” as, broadly, something that extends the
functionality of the operating system.  Often a service is a process—a
“daemon”—started when the system boots: a secure shell server, a Web
server, the Guix build daemon, etc.  Sometimes a service is a daemon
whose execution can be triggered by another daemon—e.g., an FTP server
started by ‘inetd’ or a D-Bus service activated by ‘dbus-daemon’.
Occasionally, a service does not map to a daemon.  For instance, the
“account” service collects user accounts and makes sure they exist when
the system runs; the “udev” service collects device management rules and
makes them available to the eudev daemon; the ‘/etc’ service populates
the ‘/etc’ directory of the system.

   Guix system services are connected by “extensions”.  For instance,
the secure shell service _extends_ the Shepherd—the initialization
system, running as PID 1—by giving it the command lines to start and
stop the secure shell daemon (*note ‘openssh-service-type’: Сервисы
сети.); the UPower service extends the D-Bus service by passing it its
‘.service’ specification, and extends the udev service by passing it
device management rules (*note ‘upower-service’: Сервисы рабочего
стола.); the Guix daemon service extends the Shepherd by passing it the
command lines to start and stop the daemon, and extends the account
service by passing it a list of required build user accounts (*note
Базовые службы::).

   All in all, services and their “extends” relations form a directed
acyclic graph (DAG). If we represent services as boxes and extensions as
arrows, a typical system might provide something like this:

[Typical service extension graph.]
   At the bottom, we see the “system service”, which produces the
directory containing everything to run and boot the system, as returned
by the ‘guix system build’ command.  *Note Интерфейс сервиса::, to learn
about the other service types shown here.  *Note the ‘guix system
extension-graph’ command: system-extension-graph, for information on how
to generate this representation for a particular operating system
definition.

   Technically, developers can define “service types” to express these
relations.  There can be any number of services of a given type on the
system—for instance, a system running two instances of the GNU secure
shell server (lsh) has two instances of ‘lsh-service-type’, with
different parameters.

   The following section describes the programming interface for service
types and services.


File: guix.ru.info,  Node: Типы сервисов и сервисы,  Next: Интерфейс сервиса,  Prev: Производство сервисов.,  Up: Создание служб

8.17.2 Типы сервисов и сервисы
------------------------------

A “service type” is a node in the DAG described above.  Let us start
with a simple example, the service type for the Guix build daemon (*note
Вызов guix-daemon::):

     (define guix-service-type
       (service-type
        (name 'guix)
        (extensions
         (list (service-extension shepherd-root-service-type guix-shepherd-service)
               (service-extension account-service-type guix-accounts)
               (service-extension activation-service-type guix-activation)))
        (default-value (guix-configuration))))

It defines three things:

  1. A name, whose sole purpose is to make inspection and debugging
     easier.

  2. A list of “service extensions”, where each extension designates the
     target service type and a procedure that, given the parameters of
     the service, returns a list of objects to extend the service of
     that type.

     Every service type has at least one service extension.  The only
     exception is the “boot service type”, which is the ultimate
     service.

  3. Optionally, a default value for instances of this type.

   In this example, ‘guix-service-type’ extends three services:

‘shepherd-root-service-type’
     The ‘guix-shepherd-service’ procedure defines how the Shepherd
     service is extended.  Namely, it returns a ‘<shepherd-service>’
     object that defines how ‘guix-daemon’ is started and stopped (*note
     Сервисы Shepherd::).

‘account-service-type’
     This extension for this service is computed by ‘guix-accounts’,
     which returns a list of ‘user-group’ and ‘user-account’ objects
     representing the build user accounts (*note Вызов guix-daemon::).

‘activation-service-type’
     Here ‘guix-activation’ is a procedure that returns a gexp, which is
     a code snippet to run at “activation time”—e.g., when the service
     is booted.

   A service of this type is instantiated like this:

     (service guix-service-type
              (guix-configuration
                (build-accounts 5)
                (use-substitutes? #f)))

   The second argument to the ‘service’ form is a value representing the
parameters of this specific service instance.  *Note
‘guix-configuration’: guix-configuration-type, for information about the
‘guix-configuration’ data type.  When the value is omitted, the default
value specified by ‘guix-service-type’ is used:

     (service guix-service-type)

   ‘guix-service-type’ is quite simple because it extends other services
but is not extensible itself.

   The service type for an _extensible_ service looks like this:

     (define udev-service-type
       (service-type (name 'udev)
                     (extensions
                      (list (service-extension shepherd-root-service-type
                                               udev-shepherd-service)))

                     (compose concatenate)       ;concatenate the list of rules
                     (extend (lambda (config rules)
                               (match config
                                 (($ <udev-configuration> udev initial-rules)
                                  (udev-configuration
                                   (udev udev)   ;the udev package to use
                                   (rules (append initial-rules rules)))))))))

   This is the service type for the eudev device management daemon
(https://wiki.gentoo.org/wiki/Project:Eudev).  Compared to the previous
example, in addition to an extension of ‘shepherd-root-service-type’, we
see two new fields:

‘compose’
     This is the procedure to “compose” the list of extensions to
     services of this type.

     Services can extend the udev service by passing it lists of rules;
     we compose those extensions simply by concatenating them.

‘extend’
     This procedure defines how the value of the service is “extended”
     with the composition of the extensions.

     Udev extensions are composed into a list of rules, but the udev
     service value is itself a ‘<udev-configuration>’ record.  So here,
     we extend that record by appending the list of rules it contains to
     the list of contributed rules.

‘description’
     This is a string giving an overview of the service type.  The
     string can contain Texinfo markup (*note (texinfo)Overview::).  The
     ‘guix system search’ command searches these strings and displays
     them (*note Вызов guix system::).

   There can be only one instance of an extensible service type such as
‘udev-service-type’.  If there were more, the ‘service-extension’
specifications would be ambiguous.

   Still here?  The next section provides a reference of the programming
interface for services.


File: guix.ru.info,  Node: Интерфейс сервиса,  Next: Сервисы Shepherd,  Prev: Типы сервисов и сервисы,  Up: Создание служб

8.17.3 Интерфейс сервиса
------------------------

We have seen an overview of service types (*note Типы сервисов и
сервисы::).  This section provides a reference on how to manipulate
services and service types.  This interface is provided by the ‘(gnu
services)’ module.

 -- Scheme Procedure: service TYPE [VALUE]
     Return a new service of TYPE, a ‘<service-type>’ object (see
     below).  VALUE can be any object; it represents the parameters of
     this particular service instance.

     When VALUE is omitted, the default value specified by TYPE is used;
     if TYPE does not specify a default value, an error is raised.

     For instance, this:

          (service openssh-service-type)

     is equivalent to this:

          (service openssh-service-type
                   (openssh-configuration))

     In both cases the result is an instance of ‘openssh-service-type’
     with the default configuration.

 -- Scheme Procedure: service? OBJ
     Return true if OBJ is a service.

 -- Scheme Procedure: service-kind SERVICE
     Return the type of SERVICE—i.e., a ‘<service-type>’ object.

 -- Scheme Procedure: service-value SERVICE
     Return the value associated with SERVICE.  It represents its
     parameters.

   Here is an example of how a service is created and manipulated:

     (define s
       (service nginx-service-type
                (nginx-configuration
                 (nginx nginx)
                 (log-directory log-directory)
                 (run-directory run-directory)
                 (file config-file))))

     (service? s)
     ⇒ #t

     (eq? (service-kind s) nginx-service-type)
     ⇒ #t

   The ‘modify-services’ form provides a handy way to change the
parameters of some of the services of a list such as ‘%base-services’
(*note ‘%base-services’: Базовые службы.).  It evaluates to a list of
services.  Of course, you could always use standard list combinators
such as ‘map’ and ‘fold’ to do that (*note List Library:
(guile)SRFI-1.); ‘modify-services’ simply provides a more concise form
for this common pattern.

 -- Scheme Syntax: modify-services SERVICES (TYPE VARIABLE => BODY) ...

     Modify the services listed in SERVICES according to the given
     clauses.  Each clause has the form:

          (TYPE VARIABLE => BODY)

     where TYPE is a service type—e.g., ‘guix-service-type’—and VARIABLE
     is an identifier that is bound within the BODY to the service
     parameters—e.g., a ‘guix-configuration’ instance—of the original
     service of that TYPE.

     The BODY should evaluate to the new service parameters, which will
     be used to configure the new service.  This new service will
     replace the original in the resulting list.  Because a service’s
     service parameters are created using ‘define-record-type*’, you can
     write a succinct BODY that evaluates to the new service parameters
     by using the ‘inherit’ feature that ‘define-record-type*’ provides.

     *Note Использование системы конфигурации::, for example usage.

   Next comes the programming interface for service types.  This is
something you want to know when writing new service definitions, but not
necessarily when simply looking for ways to customize your
‘operating-system’ declaration.

 -- Data Type: service-type
     This is the representation of a “service type” (*note Типы сервисов
     и сервисы::).

     ‘name’
          This is a symbol, used only to simplify inspection and
          debugging.

     ‘extensions’
          A non-empty list of ‘<service-extension>’ objects (see below).

     ‘compose’ (default: ‘#f’)
          If this is ‘#f’, then the service type denotes services that
          cannot be extended—i.e., services that do not receive “values”
          from other services.

          Otherwise, it must be a one-argument procedure.  The procedure
          is called by ‘fold-services’ and is passed a list of values
          collected from extensions.  It may return any single value.

     ‘extend’ (default: ‘#f’)
          If this is ‘#f’, services of this type cannot be extended.

          Otherwise, it must be a two-argument procedure:
          ‘fold-services’ calls it, passing it the initial value of the
          service as the first argument and the result of applying
          ‘compose’ to the extension values as the second argument.  It
          must return a value that is a valid parameter value for the
          service instance.

     *Note Типы сервисов и сервисы::, for examples.

 -- Scheme Procedure: service-extension TARGET-TYPE COMPUTE Return a new
          extension for services of type
     TARGET-TYPE.  COMPUTE must be a one-argument procedure:
     ‘fold-services’ calls it, passing it the value associated with the
     service that provides the extension; it must return a valid value
     for the target service.

 -- Scheme Procedure: service-extension? OBJ
     Return true if OBJ is a service extension.

   Occasionally, you might want to simply extend an existing service.
This involves creating a new service type and specifying the extension
of interest, which can be verbose; the ‘simple-service’ procedure
provides a shorthand for this.

 -- Scheme Procedure: simple-service NAME TARGET VALUE
     Return a service that extends TARGET with VALUE.  This works by
     creating a singleton service type NAME, of which the returned
     service is an instance.

     For example, this extends mcron (*note Запланированное исполнения
     задач::) with an additional job:

          (simple-service 'my-mcron-job mcron-service-type
                          #~(job '(next-hour (3)) "guix gc -F 2G"))

   At the core of the service abstraction lies the ‘fold-services’
procedure, which is responsible for “compiling” a list of services down
to a single directory that contains everything needed to boot and run
the system—the directory shown by the ‘guix system build’ command (*note
Вызов guix system::).  In essence, it propagates service extensions down
the service graph, updating each node parameters on the way, until it
reaches the root node.

 -- Scheme Procedure: fold-services SERVICES [#:target-type
          SYSTEM-SERVICE-TYPE] Fold SERVICES by propagating
     their extensions down to the root of type TARGET-TYPE; return the
     root service adjusted accordingly.

   Lastly, the ‘(gnu services)’ module also defines several essential
service types, some of which are listed below.

 -- Scheme Variable: system-service-type
     This is the root of the service graph.  It produces the system
     directory as returned by the ‘guix system build’ command.

 -- Scheme Variable: boot-service-type
     The type of the “boot service”, which produces the “boot script”.
     The boot script is what the initial RAM disk runs when booting.

 -- Scheme Variable: etc-service-type
     The type of the ‘/etc’ service.  This service is used to create
     files under ‘/etc’ and can be extended by passing it name/file
     tuples such as:

          (list `("issue" ,(plain-file "issue" "Welcome!\n")))

     In this example, the effect would be to add an ‘/etc/issue’ file
     pointing to the given file.

 -- Scheme Variable: setuid-program-service-type
     Type for the “setuid-program service”.  This service collects lists
     of executable file names, passed as gexps, and adds them to the set
     of setuid-root programs on the system (*note Программы setuid::).

 -- Scheme Variable: profile-service-type
     Type of the service that populates the “system profile”—i.e., the
     programs under ‘/run/current-system/profile’.  Other services can
     extend it by passing it lists of packages to add to the system
     profile.

 -- Scheme Variable: provenance-service-type
     This is the type of the service that records “provenance meta-data”
     in the system itself.  It creates several files under
     ‘/run/current-system’:

     ‘channels.scm’
          This is a “channel file” that can be passed to ‘guix pull -C’
          or ‘guix time-machine -C’, and which describes the channels
          used to build the system, if that information was available
          (*note Каналы::).

     ‘configuration.scm’
          This is the file that was passed as the value for this
          ‘provenance-service-type’ service.  By default, ‘guix system
          reconfigure’ automatically passes the OS configuration file it
          received on the command line.

     ‘provenance’
          This contains the same information as the two other files but
          in a format that is more readily processable.

     In general, these two pieces of information (channels and
     configuration file) are enough to reproduce the operating system
     “from source”.

          Caveats: This information is necessary to rebuild your
          operating system, but it is not always sufficient.  In
          particular, ‘configuration.scm’ itself is insufficient if it
          is not self-contained—if it refers to external Guile modules
          or to extra files.  If you want ‘configuration.scm’ to be
          self-contained, we recommend that modules or files it refers
          to be part of a channel.

          Besides, provenance meta-data is “silent” in the sense that it
          does not change the bits contained in your system, _except for
          the meta-data bits themselves_.  Two different OS
          configurations or sets of channels can lead to the same
          system, bit-for-bit; when ‘provenance-service-type’ is used,
          these two systems will have different meta-data and thus
          different store file names, which makes comparison less
          trivial.

     This service is automatically added to your operating system
     configuration when you use ‘guix system reconfigure’, ‘guix system
     init’, or ‘guix deploy’.


File: guix.ru.info,  Node: Сервисы Shepherd,  Prev: Интерфейс сервиса,  Up: Создание служб

8.17.4 Сервисы Shepherd
-----------------------

The ‘(gnu services shepherd)’ module provides a way to define services
managed by the GNU Shepherd, which is the initialization system—the
first process that is started when the system boots, also known as PID 1
(*note (shepherd)Введение::).

   Services in the Shepherd can depend on each other.  For instance, the
SSH daemon may need to be started after the syslog daemon has been
started, which in turn can only happen once all the file systems have
been mounted.  The simple operating system defined earlier (*note
Использование системы конфигурации::) results in a service graph like
this:

[Typical shepherd service graph.]
   You can actually generate such a graph for any operating system
definition using the ‘guix system shepherd-graph’ command (*note ‘guix
system shepherd-graph’: system-shepherd-graph.).

   The ‘%shepherd-root-service’ is a service object representing PID 1,
of type ‘shepherd-root-service-type’; it can be extended by passing it
lists of ‘<shepherd-service>’ objects.

 -- Data Type: shepherd-service
     The data type representing a service managed by the Shepherd.

     ‘provision’
          This is a list of symbols denoting what the service provides.

          These are the names that may be passed to ‘herd start’, ‘herd
          status’, and similar commands (*note (shepherd)Invoking
          herd::).  *Note the ‘provides’ slot: (shepherd)Slots of
          services, for details.

     ‘requirement’ (default: ‘'()’)
          List of symbols denoting the Shepherd services this one
          depends on.

     ‘one-shot?’ (default: ‘#f’)
          Whether this service is “one-shot”.  One-shot services stop
          immediately after their ‘start’ action has completed.  *Note
          (shepherd)Slots of services::, for more info.

     ‘respawn?’ (default: ‘#t’)
          Whether to restart the service when it stops, for instance
          when the underlying process dies.

     ‘start’
     ‘stop’ (default: ‘#~(const #f)’)
          The ‘start’ and ‘stop’ fields refer to the Shepherd’s
          facilities to start and stop processes (*note
          (shepherd)Service De- and Constructors::).  They are given as
          G-expressions that get expanded in the Shepherd configuration
          file (*note G-Expressions::).

     ‘actions’ (default: ‘'()’)
          This is a list of ‘shepherd-action’ objects (see below)
          defining “actions” supported by the service, in addition to
          the standard ‘start’ and ‘stop’ actions.  Actions listed here
          become available as ‘herd’ sub-commands:

               herd ACTION SERVICE [ARGUMENTS...]

     ‘auto-start?’ (default: ‘#t’)
          Whether this service should be started automatically by the
          Shepherd.  If it is ‘#f’ the service has to be started
          manually with ‘herd start’.

     ‘документация’
          A documentation string, as shown when running:

               herd doc SERVICE-NAME

          where SERVICE-NAME is one of the symbols in ‘provision’ (*note
          (shepherd)Invoking herd::).

     ‘modules’ (default: ‘%default-modules’)
          This is the list of modules that must be in scope when ‘start’
          and ‘stop’ are evaluated.

 -- Data Type: shepherd-action
     This is the data type that defines additional actions implemented
     by a Shepherd service (see above).

     ‘name’
          Symbol naming the action.

     ‘документация’
          This is a documentation string for the action.  It can be
          viewed by running:

               herd doc SERVICE action ACTION

     ‘procedure’
          This should be a gexp that evaluates to a procedure of at
          least one argument, which is the “running value” of the
          service (*note (shepherd)Slots of services::).

     The following example defines an action called ‘say-hello’ that
     kindly greets the user:

          (shepherd-action
            (name 'say-hello)
            (documentation "Say hi!")
            (procedure #~(lambda (running . args)
                           (format #t "Hello, friend! arguments: ~s\n"
                                   args)
                           #t)))

     Assuming this action is added to the ‘example’ service, then you
     can do:

          # herd say-hello example
          Hello, friend! arguments: ()
          # herd say-hello example a b c
          Hello, friend! arguments: ("a" "b" "c")

     This, as you can see, is a fairly sophisticated way to say hello.
     *Note (shepherd)Service Convenience::, for more info on actions.

 -- Scheme Variable: shepherd-root-service-type
     The service type for the Shepherd “root service”—i.e., PID 1.

     This is the service type that extensions target when they want to
     create shepherd services (*note Типы сервисов и сервисы::, for an
     example).  Each extension must pass a list of ‘<shepherd-service>’.

 -- Scheme Variable: %shepherd-root-service
     This service represents PID 1.


File: guix.ru.info,  Node: Документация,  Next: Установка файлов отладки,  Prev: Конфигурирование системы,  Up: Top

9 Документация
**************

In most cases packages installed with Guix come with documentation.
There are two main documentation formats: “Info”, a browseable hypertext
format used for GNU software, and “manual pages” (or “man pages”), the
linear documentation format traditionally found on Unix.  Info manuals
are accessed with the ‘info’ command or with Emacs, and man pages are
accessed using ‘man’.

   You can look for documentation of software installed on your system
by keyword.  For example, the following command searches for information
about “TLS” in Info manuals:

     $ info -k TLS
     "(emacs)Network Security" -- STARTTLS
     "(emacs)Network Security" -- TLS
     "(gnutls)Core TLS API" -- gnutls_certificate_set_verify_flags
     "(gnutls)Core TLS API" -- gnutls_certificate_set_verify_function
     ...

The command below searches for the same keyword in man pages:

     $ man -k TLS
     SSL (7)              - OpenSSL SSL/TLS library
     certtool (1)         - GnuTLS certificate tool
     ...

   These searches are purely local to your computer so you have the
guarantee that documentation you find corresponds to what you have
actually installed, you can access it off-line, and your privacy is
respected.

   Once you have these results, you can view the relevant documentation
by running, say:

     $ info "(gnutls)Core TLS API"

или:

     $ man certtool

   Info manuals contain sections and indices as well as hyperlinks like
those found in Web pages.  The ‘info’ reader (*note Info reader:
(info-stnd)Top.) and its Emacs counterpart (*note (emacs)Misc Help::)
provide intuitive key bindings to navigate manuals.  *Note (info)Getting
Started::, for an introduction to Info navigation.


File: guix.ru.info,  Node: Установка файлов отладки,  Next: Обновления безопасности,  Prev: Документация,  Up: Top

10 Установка файлов отладки
***************************

Program binaries, as produced by the GCC compilers for instance, are
typically written in the ELF format, with a section containing
“debugging information”.  Debugging information is what allows the
debugger, GDB, to map binary code to source code; it is required to
debug a compiled program in good conditions.

   The problem with debugging information is that is takes up a fair
amount of disk space.  For example, debugging information for the GNU C
Library weighs in at more than 60 MiB. Thus, as a user, keeping all the
debugging info of all the installed programs is usually not an option.
Yet, space savings should not come at the cost of an impediment to
debugging—especially in the GNU system, which should make it easier for
users to exert their computing freedom (*note Дистрибутив GNU::).

   Thankfully, the GNU Binary Utilities (Binutils) and GDB provide a
mechanism that allows users to get the best of both worlds: debugging
information can be stripped from the binaries and stored in separate
files.  GDB is then able to load debugging information from those files,
when they are available (*note (gdb)Separate Debug Files::).

   The GNU distribution takes advantage of this by storing debugging
information in the ‘lib/debug’ sub-directory of a separate package
output unimaginatively called ‘debug’ (*note Пакеты со множественным
выходом::).  Users can choose to install the ‘debug’ output of a package
when they need it.  For instance, the following command installs the
debugging information for the GNU C Library and for GNU Guile:

     guix install glibc:debug guile:debug

   GDB must then be told to look for debug files in the user’s profile,
by setting the ‘debug-file-directory’ variable (consider setting it from
the ‘~/.gdbinit’ file, *note (gdb)Startup::):

     (gdb) set debug-file-directory ~/.guix-profile/lib/debug

   From there on, GDB will pick up debugging information from the
‘.debug’ files under ‘~/.guix-profile/lib/debug’.

   In addition, you will most likely want GDB to be able to show the
source code being debugged.  To do that, you will have to unpack the
source code of the package of interest (obtained with ‘guix build
--source’, *note Запуск guix build::), and to point GDB to that source
directory using the ‘directory’ command (*note ‘directory’: (gdb)Source
Path.).

   The ‘debug’ output mechanism in Guix is implemented by the
‘gnu-build-system’ (*note Системы сборки::).  Currently, it is
opt-in—debugging information is available only for the packages with
definitions explicitly declaring a ‘debug’ output.  This may be changed
to opt-out in the future if our build farm servers can handle the load.
To check whether a package has a ‘debug’ output, use ‘guix package
--list-available’ (*note Вызов guix package::).


File: guix.ru.info,  Node: Обновления безопасности,  Next: Начальная загрузка,  Prev: Установка файлов отладки,  Up: Top

11 Обновления безопасности
**************************

Occasionally, important security vulnerabilities are discovered in
software packages and must be patched.  Guix developers try hard to keep
track of known vulnerabilities and to apply fixes as soon as possible in
the ‘master’ branch of Guix (we do not yet provide a “stable” branch
containing only security updates).  The ‘guix lint’ tool helps
developers find out about vulnerable versions of software packages in
the distribution:

     $ guix lint -c cve
     gnu/packages/base.scm:652:2: glibc@2.21: probably vulnerable to CVE-2015-1781, CVE-2015-7547
     gnu/packages/gcc.scm:334:2: gcc@4.9.3: probably vulnerable to CVE-2015-5276
     gnu/packages/image.scm:312:2: openjpeg@2.1.0: probably vulnerable to CVE-2016-1923, CVE-2016-1924
     ...

   *Note Запуск guix lint::, for more information.

   Guix follows a functional package management discipline (*note
Введение::), which implies that, when a package is changed, _every
package that depends on it_ must be rebuilt.  This can significantly
slow down the deployment of fixes in core packages such as libc or Bash,
since basically the whole distribution would need to be rebuilt.  Using
pre-built binaries helps (*note Подстановки::), but deployment may still
take more time than desired.

   To address this, Guix implements “grafts”, a mechanism that allows
for fast deployment of critical updates without the costs associated
with a whole-distribution rebuild.  The idea is to rebuild only the
package that needs to be patched, and then to “graft” it onto packages
explicitly installed by the user and that were previously referring to
the original package.  The cost of grafting is typically very low, and
order of magnitudes lower than a full rebuild of the dependency chain.

   For instance, suppose a security update needs to be applied to Bash.
Guix developers will provide a package definition for the “fixed” Bash,
say ‘bash-fixed’, in the usual way (*note Описание пакетов::).  Then,
the original package definition is augmented with a ‘replacement’ field
pointing to the package containing the bug fix:

     (define bash
       (package
         (name "bash")
         ;; ...
         (replacement bash-fixed)))

   From there on, any package depending directly or indirectly on
Bash—as reported by ‘guix gc --requisites’ (*note Вызов guix gc::)—that
is installed is automatically “rewritten” to refer to ‘bash-fixed’
instead of ‘bash’.  This grafting process takes time proportional to the
size of the package, usually less than a minute for an “average” package
on a recent machine.  Grafting is recursive: when an indirect dependency
requires grafting, then grafting “propagates” up to the package that the
user is installing.

   Currently, the length of the name and version of the graft and that
of the package it replaces (‘bash-fixed’ and ‘bash’ in the example
above) must be equal.  This restriction mostly comes from the fact that
grafting works by patching files, including binary files, directly.
Other restrictions may apply: for instance, when adding a graft to a
package providing a shared library, the original shared library and its
replacement must have the same ‘SONAME’ and be binary-compatible.

   The ‘--no-grafts’ command-line option allows you to forcefully avoid
grafting (*note ‘--no-grafts’: Стандартные параметры сборки.).  Thus,
the command:

     guix build bash --no-grafts

returns the store file name of the original Bash, whereas:

     guix build bash

returns the store file name of the “fixed”, replacement Bash.  This
allows you to distinguish between the two variants of Bash.

   To verify which Bash your whole profile refers to, you can run (*note
Вызов guix gc::):

     guix gc -R `readlink -f ~/.guix-profile` | grep bash

... and compare the store file names that you get with those above.
Likewise for a complete Guix system generation:

     guix gc -R `guix system build my-config.scm` | grep bash

   Lastly, to check which Bash running processes are using, you can use
the ‘lsof’ command:

     lsof | grep /gnu/store/.*bash

