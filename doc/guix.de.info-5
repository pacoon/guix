This is guix.de.info, produced by makeinfo version 6.7 from
guix.de.texi.

Copyright © 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 Ludovic
Courtès
Copyright © 2013, 2014, 2016 Andreas Enge
Copyright © 2013 Nikita Karetnikov
Copyright © 2014, 2015, 2016 Alex Kost
Copyright © 2015, 2016 Mathieu Lirzin
Copyright © 2014 Pierre-Antoine Rault
Copyright © 2015 Taylan Ulrich Bayırlı/Kammer
Copyright © 2015, 2016, 2017, 2019, 2020 Leo Famulari
Copyright © 2015, 2016, 2017, 2018, 2019, 2020 Ricardo Wurmus
Copyright © 2016 Ben Woodcroft
Copyright © 2016, 2017, 2018 Chris Marusich
Copyright © 2016, 2017, 2018, 2019, 2020 Efraim Flashner
Copyright © 2016 John Darrington
Copyright © 2016, 2017 Nikita Gillmann
Copyright © 2016, 2017, 2018, 2019, 2020 Jan Nieuwenhuizen
Copyright © 2016, 2017, 2018, 2019, 2020 Julien Lepiller
Copyright © 2016 Alex ter Weele
Copyright © 2016, 2017, 2018, 2019 Christopher Baines
Copyright © 2017, 2018, 2019 Clément Lassieur
Copyright © 2017, 2018 Mathieu Othacehe
Copyright © 2017 Federico Beffa
Copyright © 2017, 2018 Carlo Zancanaro
Copyright © 2017 Thomas Danckaert
Copyright © 2017 humanitiesNerd
Copyright © 2017 Christopher Allan Webber
Copyright © 2017, 2018, 2019, 2020 Marius Bakke
Copyright © 2017, 2019, 2020 Hartmut Goebel
Copyright © 2017, 2019, 2020 Maxim Cournoyer
Copyright © 2017, 2018, 2019, 2020 Tobias Geerinckx-Rice
Copyright © 2017 George Clemmer
Copyright © 2017 Andy Wingo
Copyright © 2017, 2018, 2019 Arun Isaac
Copyright © 2017 nee
Copyright © 2018 Rutger Helling
Copyright © 2018 Oleg Pykhalov
Copyright © 2018 Mike Gerwitz
Copyright © 2018 Pierre-Antoine Rouby
Copyright © 2018, 2019 Gábor Boskovits
Copyright © 2018, 2019 Florian Pelz
Copyright © 2018 Laura Lazzati
Copyright © 2018 Alex Vong
Copyright © 2019 Josh Holland
Copyright © 2019, 2020 Diego Nicola Barbato
Copyright © 2019 Ivan Petkov
Copyright © 2019 Jakob L. Kreuze
Copyright © 2019 Kyle Andrews
Copyright © 2019 Alex Griffin
Copyright © 2019 Guillaume Le Vaillant
Copyright © 2020 Leo Prikler
Copyright © 2019, 2020 Simon Tournier
Copyright © 2020 Wiktor Żelazny
Copyright © 2020 Damien Cassou
Copyright © 2020 Jakub Kądziołka
Copyright © 2020 Jack Hill
Copyright © 2020 Naga Malleswari
Copyright © 2020 Brice Waegeneire
Copyright © 2020 R Veera Kumar
Copyright © 2020 Pierre Langlois
Copyright © 2020 pinoaffe

   Es ist Ihnen gestattet, dieses Dokument zu vervielfältigen,
weiterzugeben und/oder zu verändern, unter den Bedingungen der GNU Free
Documentation License, entweder gemäß Version 1.3 der Lizenz oder (nach
Ihrer Option) einer späteren Version, die von der Free Software
Foundation veröffentlicht wurde, ohne unveränderliche Abschnitte, ohne
vorderen Umschlagtext und ohne hinteren Umschlagtext. Eine Kopie der
Lizenz finden Sie im Abschnitt mit dem Titel „GNU Free Documentation
License“.
INFO-DIR-SECTION Systemadministration
START-INFO-DIR-ENTRY
* Guix: (guix.de).           Installierte Software und Systemkonfigurationen
                               verwalten.
* guix package: (guix.de)guix package aufrufen.  Pakete installieren,
                                                   entfernen und
                                                   aktualisieren.
* guix gc: (guix.de)guix gc aufrufen.  Unbenutzten Plattenspeicher wieder
                                         freigeben.
* guix pull: (guix.de)guix pull aufrufen.  Die Liste verfügbarer Pakete
                                             aktualisieren.
* guix system: (guix.de)guix system aufrufen.  Die
                                                 Betriebssystemkonfiguration
                                                 verwalten.
* guix deploy: (guix.de)guix deploy aufrufen.  Betriebssystemkonfigurationen
                                                 entfernter Rechner verwalten.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Softwareentwicklung
START-INFO-DIR-ENTRY
* guix environment: (guix.de)guix environment aufrufen.  Umgebungen für
                                                           Entwickler
                                                           erstellen
* guix build: (guix.de)guix build aufrufen.  Erstellen von Paketen.
* guix pack: (guix.de)guix pack aufrufen.  Bündel aus Binärdateien
                                             erstellen.
END-INFO-DIR-ENTRY


File: guix.de.info,  Node: Aufruf von guix deploy,  Next: Guix in einer VM starten,  Prev: Aufruf von guix system,  Up: Systemkonfiguration

8.15 ‘guix deploy’ aufrufen
===========================

Wir haben bereits gesehen, wie die Konfiguration einer Maschine mit
‘operating-system’-Deklarationen lokal verwaltet werden kann. Doch was
ist, wenn Sie mehrere Maschinen konfigurieren möchten? Vielleicht
kümmern Sie sich um einen Dienst im Web, der über mehrere Server
verteilt ist. Mit ‘guix deploy’ können Sie ebensolche
‘operating-system’-Deklarationen verwenden, um mehrere entfernte Rechner
(„Hosts“) gleichzeitig in einer logischen Bereitstellung (einem
„Deployment“) zu verwalten.

     Anmerkung: Die in diesem Abschnitt beschriebenen Funktionalitäten
     befinden sich noch in der Entwicklung und können sich ändern.
     Kontaktieren Sie uns auf <guix-devel@gnu.org>!

     guix deploy DATEI

   Mit einem solchen Aufruf werden diejenigen „Maschinen“
bereitgestellt, zu denen der Code in der DATEI ausgewertet wird. Zum
Beispiel könnte die DATEI eine solche Definition enthalten:

     ;; Dies ist eine Guix-Bereitstellung einer minimalen Installation ohne
     ;; X11-Anzeigeserver auf eine Maschine, auf der ein SSH-Daemon auf
     ;; localhost:2222 lauscht. So eine Konfiguration kann für virtuelle
     ;; Maschinen geeignet sein, deren Ports an die Loopback-Schnittstelle
     ;; ihres Wirtssystems weitergeleitet werden.

     (use-service-modules networking ssh)
     (use-package-modules bootloaders)

     (define %system
       (operating-system
        (host-name "gnu-deployed")
        (timezone "Etc/UTC")
        (bootloader (bootloader-configuration
                     (bootloader grub-bootloader)
                     (target "/dev/vda")
                     (terminal-outputs '(console))))
        (file-systems (cons (file-system
                             (mount-point "/")
                             (device "/dev/vda1")
                             (type "ext4"))
                            %base-file-systems))
        (services
         (append (list (service dhcp-client-service-type)
                       (service openssh-service-type
                                (openssh-configuration
                                 (permit-root-login #t)
                                 (allow-empty-passwords? #t))))
                 %base-services))))

     (list (machine
            (operating-system %system)
            (environment managed-host-environment-type)
            (configuration (machine-ssh-configuration
                            (host-name "localhost")
                            (system "x86_64-linux")
                            (user "alice")
                            (identity "./id_rsa")
                            (port 2222)))))

   The file should evaluate to a list of MACHINE objects. This example,
upon being deployed, will create a new generation on the remote system
realizing the ‘operating-system’ declaration ‘%system’. ‘environment’
and ‘configuration’ specify how the machine should be provisioned—that
is, how the computing resources should be created and managed. The above
example does not create any resources, as a ‘'managed-host’ is a machine
that is already running the Guix system and available over the network.
This is a particularly simple case; a more complex deployment may
involve, for example, starting virtual machines through a Virtual
Private Server (VPS) provider. In such a case, a different ENVIRONMENT
type would be used.

   Beachten Sie, dass Sie zunächst ein Schlüsselpaar auf der
Koordinatormaschine erzeugen lassen müssen, damit der Daemon signierte
Archive mit Dateien aus dem Store exportieren kann (siehe *note Aufruf
von guix archive::).

     # guix archive --generate-key

Jede Zielmaschine muss den Schlüssel der Hauptmaschine autorisieren,
damit diese Store-Objekte von der Koordinatormaschine empfangen kann:

     # guix archive --authorize < öffentlicher-schlüssel-koordinatormaschine.txt

   In dem Beispiel wird unter ‘user’ der Name des Benutzerkontos
angegeben, mit dem Sie sich zum Aufspielen auf der Maschine anmelden.
Der Vorgabewert ist ‘root’, jedoch wird eine Anmeldung als root über SSH
manchmal nicht zugelassen. Als Ausweg kann ‘guix deploy’ Sie erst mit
einem „unprivilegierten“ Benutzerkonto ohne besondere Berechtigungen
anmelden, um danach automatisch mit ‘sudo’ die Berechtigungen
auszuweiten. Damit das funktioniert, muss ‘sudo’ auf der entfernten
Maschine installiert und durch das ‘user’-Konto ohne Nutzerinteraktion
aufrufbar sein; mit anderen Worten muss die Zeile in ‘sudoers’, die das
‘user’-Benutzerkonto zum Aufruf von ‘sudo’ berechtigt, mit dem
‘NOPASSWD’-Tag versehen sein. Dazu kann das folgende Schnipsel in die
Betriebssystemkonfiguration eingefügt werden:

     (use-modules …
                  (gnu system))   ;macht %sudoers-specification verfügbar

     (define %user "benutzername")

     (operating-system
       …
       (sudoers-file
          (plain-file "sudoers"
                      (string-append (plain-file-content %sudoers-specification)
                                     (format #f "~a ALL = NOPASSWD: ALL~%"
                                             %user)))))


   Weitere Informationen über das Format der ‘sudoers’-Datei erhalten
Sie, wenn Sie ‘man sudoers’ ausführen.

 -- Datentyp: machine
     Dieser Datentyp steht für eine einzelne Maschine beim Bereitstellen
     auf mehrere verschiedene Maschinen.

     ‘operating-system’
          Das Objekt mit der aufzuspielenden
          Betriebssystemkonfiguration.

     ‘environment’
          Auf welcher Art von Umgebung die Maschine läuft. Der hier
          angegebene ‘environment-type’ steht dafür, wie die Maschine
          beliefert wird („Provisioning“).

     ‘configuration’ (Vorgabe: ‘#f’)
          Dieses Objekt gibt die bestimmte Konfiguration der Umgebung
          (‘environment’) der Maschine an. Falls es für diese Umgebung
          eine Vorgabekonfiguration gibt, kann auch ‘#f’ benutzt werden.
          Wenn ‘#f’ für eine Umgebung ohne Vorgabekonfiguration benutzt
          wird, wird ein Fehler ausgelöst.

 -- Datentyp: machine-ssh-configuration
     Dieser Datentyp repräsentiert die SSH-Client-Parameter einer
     Maschine, deren Umgebung (‘environment’) vom Typ
     ‘managed-host-environment-type’ ist.

     ‘host-name’
     ‘build-locally?’ (Vorgabe: ‘#t’)
          Wenn es falsch ist, werden Ableitungen für das System auf der
          Maschine erstellt, auf die es aufgespielt wird.
     ‘system’
          Der Systemtyp, der die Architektur der Maschine angibt, auf
          die aufgespielt wird — z.B. ‘"x86_64-linux"’.
     ‘authorize?’ (Vorgabe: ‘#t’)
          Wenn es wahr ist, wird der signierende Schlüssel des
          Koordinators zum ACL-Schlüsselbund (der Access Control List,
          deutsch Zugriffssteuerungsliste) der entfernten Maschine
          hinzugefügt.
     ‘port’ (Vorgabe: ‘22’)
     ‘user’ (Vorgabe: ‘"root"’)
     ‘identity’ (Vorgabe: ‘#f’)
          Wenn dies angegeben wird, ist es der Pfad zum privaten
          SSH-Schlüssel, um sich beim entfernten Rechner zu
          authentisieren.

     ‘host-key’ (Vorgabe: ‘#f’)
          Hierfür sollte der SSH-Host-Schlüssel der Maschine angegeben
          werden. Er sieht so aus:

               ssh-ed25519 AAAAC3Nz… root@example.org

          Wenn ‘#f’ als ‘host-key’ angegeben wird, wird der Server gegen
          die Datei ‘~/.ssh/known_hosts’ geprüft, genau wie es der
          ‘ssh’-Client von OpenSSH tut.

 -- Datentyp: digital-ocean-configuration
     Dieser Datentyp beschreibt das Droplet, das für eine Maschine
     erzeugt werden soll, deren Umgebung (‘environment’) vom Typ
     ‘digital-ocean-environment-type’ ist.

     ‘ssh-key’
          Der Pfad zum privaten SSH-Schlüssel, um sich beim entfernten
          Rechner zu authentisieren. In Zukunft wird es dieses Feld
          vielleicht nicht mehr geben.
     ‘tags’
          Eine Liste von „Tags“ als Zeichenketten, die die Maschine
          eindeutig identifizieren. Sie müssen angegeben werden, damit
          keine zwei Maschinen in der Bereitstellung dieselbe Menge an
          Tags haben.
     ‘region’
          Ein Digital-Ocean-„Region Slug“ (Regionskürzel), zum Beispiel
          ‘"nyc3"’.
     ‘Größe’
          Ein Digital-Ocean-„Size Slug“ (Größenkürzel), zum Beispiel
          ‘"s-1vcpu-1gb"’
     ‘enable-ipv6?’
          Ob das Droplet mit IPv6-Netzanbindung erzeugt werden soll.


File: guix.de.info,  Node: Guix in einer VM starten,  Next: Dienste definieren,  Prev: Aufruf von guix deploy,  Up: Systemkonfiguration

8.16 Guix in einer virtuellen Maschine betreiben
================================================

Um Guix in einer virtuellen Maschine (VM) auszuführen, können Sie das
vorerstellte Guix-VM-Abbild benutzen, das auf
<https://ftp.gnu.org/gnu/guix/guix-system-vm-image-1.0.1.17089-7e269.SYSTEM.xz>
angeboten wird. Das Abbild ist ein komprimiertes Abbild im QCOW-Format.
Sie müssen es mit ‘xz -d’ dekomprimieren, bevor Sie es an einen Emulator
wie QEMU übergeben (siehe unten für Details).

   This image boots the Xfce graphical environment and it contains some
commonly-used tools. You can install more software in the image by
running ‘guix package’ in a terminal (*note Aufruf von guix package::).
You can also reconfigure the system based on its initial configuration
file available as ‘/run/current-system/configuration.scm’ (*note Das
Konfigurationssystem nutzen::).

   Statt dieses vorerstellte Abbild zu benutzen, können Sie auch Ihr
eigenes Abbild für virtuelle Maschinen erstellen, indem Sie ‘guix system
vm-image’ benutzen (siehe *note Aufruf von guix system::). Das Abbild
wird im qcow2-Format zurückgeliefert, das der QEMU-Emulator
(https://qemu.org/) effizient benutzen kann.

   Wenn Sie Ihr eigenes Abbild erstellen haben lassen, müssen Sie es aus
dem Store herauskopieren (siehe *note Der Store::) und sich darauf
Schreibberechtigung geben, um die Kopie benutzen zu können. Wenn Sie
QEMU aufrufen, müssen Sie einen Systememulator angeben, der für Ihre
Hardware-Plattform passend ist. Hier ist ein minimaler QEMU-Aufruf, der
das Ergebnis von ‘guix system vm-image’ auf x86_64-Hardware bootet:

     $ qemu-system-x86_64 \
        -nic user,model=virtio-net-pci \
        -enable-kvm -m 1024 \
        -device virtio-blk,drive=myhd \
        -drive if=none,file=/tmp/qemu-image,id=myhd

   Die Bedeutung jeder dieser Befehlszeilenoptionen ist folgende:

‘qemu-system-x86_64’
     Hiermit wird die zu emulierende Hardware-Plattform angegeben. Sie
     sollte zum Wirtsrechner passen.

‘-nic user,model=virtio-net-pci’
     Den als Nutzer ausgeführten Netzwerkstapel („User-Mode Network
     Stack“) ohne besondere Berechtigungen benutzen. Mit dieser Art von
     Netzwerkanbindung kann das Gast-Betriebssystem eine Verbindung zum
     Wirt aufbauen, aber nicht andersherum. Es ist die einfachste Art,
     das Gast-Betriebssystem mit dem Internet zu verbinden. Das ‘model’
     gibt das Modell eines zu emulierenden Netzwerkgeräts an:
     ‘virtio-net-pci’ ist ein besonderes Gerät, das für virtualisierte
     Betriebssysteme gedacht ist und für die meisten Anwendungsfälle
     empfohlen wird. Falls Ihre Hardware-Plattform x86_64 ist, können
     Sie eine Liste verfügbarer Modelle von Netzwerkkarten (englisch
     „Network Interface Card“, kurz NIC) einsehen, indem Sie
     ‘qemu-system-x86_64 -net nic,model=help’ ausführen.

‘-enable-kvm’
     Wenn Ihr System über Erweiterungen zur Hardware-Virtualisierung
     verfügt, beschleunigt es die Dinge, wenn Sie die
     Virtualisierungsunterstützung „KVM“ des Linux-Kernels benutzen
     lassen.

‘-m 1024’
     Die Menge an Arbeitsspeicher (RAM), die dem Gastbetriebssystem zur
     Verfügung stehen soll, in Mebibytes. Vorgegeben wären 128 MiB, was
     für einige Operationen zu wenig sein könnte.

‘-device virtio-blk,drive=myhd’
     Ein ‘virtio-blk’-Laufwerk namens „myhd“ erzeugen. ‘virtio-blk’ ist
     ein Mechanismus zur „Paravirtualisierung“ von Blockgeräten, wodurch
     QEMU diese effizienter benutzen kann, als wenn es ein Laufwerk
     vollständig emulieren würde. Siehe die Dokumentation von QEMU und
     KVM für mehr Informationen.

‘-drive if=none,file=/tmp/qemu-image,id=myhd’
     Unser QCOW-Abbild in der Datei ‘/tmp/qemu-image’ soll als Inhalt
     des „myhd“-Laufwerks herhalten.

   Das voreingestellte ‘run-vm.sh’-Skript, das durch einen Aufruf von
‘guix system vm’ erzeugt wird, fügt keine Befehlszeilenoption ‘-nic
user’ an. Um innerhalb der virtuellen Maschine Netzwerkzugang zu haben,
fügen Sie den ‘(dhcp-client-service)’ zu Ihrer Systemdefinition hinzu
und starten Sie die VM mit ‘`guix system vm config.scm` -nic user’.
Erwähnt werden sollte der Nachteil, dass bei Verwendung von ‘-nic user’
zur Netzanbindung der ‘ping’-Befehl _nicht_ funktionieren wird, weil
dieser das ICMP-Protokoll braucht. Sie werden also einen anderen Befehl
benutzen müssen, um auszuprobieren, ob Sie mit dem Netzwerk verbunden
sind, zum Beispiel ‘guix download’.

8.16.1 Verbinden über SSH
-------------------------

Um SSH in der virtuellen Maschine zu aktivieren, müssen Sie einen
SSH-Server wie ‘openssh-service-type’ zu ihr hinzufügen (siehe *note
‘openssh-service-type’: Netzwerkdienste.). Des Weiteren müssen Sie den
SSH-Port für das Wirtssystem freigeben (standardmäßig hat er die
Portnummer 22). Das geht zum Beispiel so:

     `guix system vm config.scm` -nic user,model=virtio-net-pci,hostfwd=tcp::10022-:22

   Um sich mit der virtuellen Maschine zu verbinden, benutzen Sie diesen
Befehl:

     ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 10022

   Mit ‘-p’ wird ‘ssh’ der Port mitgeteilt, über den eine Verbindung
hergestellt werden soll. ‘-o UserKnownHostsFile=/dev/null’ verhindert,
dass ‘ssh’ sich bei jeder Modifikation Ihrer ‘config.scm’-Datei
beschwert, ein anderer bekannter Rechner sei erwartet worden, und ‘-o
StrictHostKeyChecking=no’ verhindert, dass Sie die Verbindung zu
unbekannten Rechnern jedes Mal bestätigen müssen, wenn Sie sich
verbinden.

8.16.2 ‘virt-viewer’ mit Spice benutzen
---------------------------------------

Eine Alternative zur grafischen Schnittstelle des standardmäßigen ‘qemu’
ist, sich mit Hilfe des ‘remote-viewer’ aus dem Paket ‘virt-viewer’ zu
verbinden. Um eine Verbindung herzustellen, übergeben Sie die
Befehlszeilenoption ‘-spice port=5930,disable-ticketing’ an ‘qemu’.
Siehe den vorherigen Abschnitt für weitere Informationen, wie Sie das
übergeben.

   Spice macht es auch möglich, ein paar nette Hilfestellungen zu
benutzen, zum Beispiel können Sie Ihren Zwischenspeicher zum Kopieren
und Einfügen (Ihr „Clipboard“) mit Ihrer virtuellen Maschine teilen. Um
das zu aktivieren, werden Sie die folgenden Befehlszeilennoptionen
zusätzlich an ‘qemu’ übergeben müssen:

     -device virtio-serial-pci,id=virtio-serial0,max_ports=16,bus=pci.0,addr=0x5
     -chardev spicevmc,name=vdagent,id=vdagent
     -device virtserialport,nr=1,bus=virtio-serial0.0,chardev=vdagent,
     name=com.redhat.spice.0

   You’ll also need to add the ‘(spice-vdagent-service)’ to your system
definition (*note Spice service: Verschiedene Dienste.).


File: guix.de.info,  Node: Dienste definieren,  Prev: Guix in einer VM starten,  Up: Systemkonfiguration

8.17 Dienste definieren
=======================

Der vorhergehende Abschnitt präsentiert die verfügbaren Dienste und wie
man sie in einer ‘operating-system’-Deklaration kombiniert. Aber wie
definieren wir solche Dienste eigentlich? Und was ist überhaupt ein
Dienst?

* Menu:

* Dienstkompositionen::      Wie Dienste zusammengestellt werden.
* Diensttypen und Dienste::  Typen und Dienste.
* Service-Referenz::         Referenz zur Programmierschnittstelle.
* Shepherd-Dienste::         Eine spezielle Art von Dienst.


File: guix.de.info,  Node: Dienstkompositionen,  Next: Diensttypen und Dienste,  Up: Dienste definieren

8.17.1 Dienstkompositionen
--------------------------

Wir definieren hier einen “Dienst” (englisch „Service“) als, grob
gesagt, etwas, das die Funktionalität des Betriebssystems erweitert. Oft
ist ein Dienst ein Prozess — ein sogenannter “Daemon” —, der beim
Hochfahren des Systems gestartet wird: ein Secure-Shell-Server, ein
Web-Server, der Guix-Erstellungsdaemon usw. Manchmal ist ein Dienst ein
Daemon, dessen Ausführung von einem anderen Daemon ausgelöst wird — zum
Beispiel wird ein FTP-Server von ‘inetd’ gestartet oder ein D-Bus-Dienst
durch ‘dbus-daemon’ aktiviert. Manchmal entspricht ein Dienst aber auch
keinem Daemon. Zum Beispiel nimmt sich der Benutzerkonten-Dienst
(„account service“) die Benutzerkonten und sorgt dafür, dass sie
existieren, wenn das System läuft. Der „udev“-Dienst sammelt die Regeln
zur Geräteverwaltung an und macht diese für den eudev-Daemon verfügbar.
Der ‘/etc’-Dienst fügt Dateien in das Verzeichnis ‘/etc’ des Systems
ein.

   Dienste des Guix-Systems werden durch “Erweiterungen” („Extensions“)
miteinander verbunden. Zum Beispiel _erweitert_ der Secure-Shell-Dienst
den Shepherd — Shepherd ist das Initialisierungssystem (auch
„init“-System genannt), was als PID 1 läuft —, indem es ihm die
Befehlszeilen zum Starten und Stoppen des Secure-Shell-Daemons übergibt
(siehe *note ‘openssh-service-type’: Netzwerkdienste.). Der
UPower-Dienst erweitert den D-Bus-Dienst, indem es ihm seine
‘.service’-Spezifikation übergibt, und erweitert den udev-Dienst, indem
es ihm Geräteverwaltungsregeln übergibt (siehe *note ‘upower-service’:
Desktop-Dienste.). Der Guix-Daemon-Dienst erweitert den Shepherd, indem
er ihm die Befehlszeilen zum Starten und Stoppen des Daemons übergibt,
und er erweitert den Benutzerkontendienst („account service“), indem er
ihm eine Liste der benötigten Erstellungsbenutzerkonten übergibt (siehe
*note Basisdienste::).

   Alles in allem bilden Dienste und ihre „Erweitert“-Relationen einen
gerichteten azyklischen Graphen (englisch „Directed Acyclic Graph“, kurz
DAG). Wenn wir Dienste als Kästen und Erweiterungen als Pfeile
darstellen, könnte ein typisches System so etwas hier anbieten:

[Typischer Diensterweiterungsgraph]
   Ganz unten sehen wir den “Systemdienst”, der das Verzeichnis erzeugt,
in dem alles zum Ausführen und Hochfahren enthalten ist, so wie es der
Befehl ‘guix system build’ liefert. Siehe *note Service-Referenz::, um
mehr über die anderen hier gezeigten Diensttypen zu erfahren. Beim *note
Befehl ‘guix system extension-graph’: system-extension-graph. finden Sie
Informationen darüber, wie Sie diese Darstellung für eine
Betriebssystemdefinition Ihrer Wahl generieren lassen.

   Technisch funktioniert es so, dass Entwickler “Diensttypen”
definieren können, um diese Beziehungen auszudrücken. Im System kann es
beliebig viele Dienste zu jedem Typ geben — zum Beispiel können auf
einem System zwei Instanzen des GNU-Secure-Shell-Servers (lsh) laufen,
mit zwei Instanzen des Diensttyps ‘lsh-service-type’ mit je
unterschiedlichen Parametern.

   Der folgende Abschnitt beschreibt die Programmierschnittstelle für
Diensttypen und Dienste.


File: guix.de.info,  Node: Diensttypen und Dienste,  Next: Service-Referenz,  Prev: Dienstkompositionen,  Up: Dienste definieren

8.17.2 Diensttypen und Dienste
------------------------------

Ein “Diensttyp” („service type“) ist ein Knoten im oben beschriebenen
ungerichteten azyklischen Graphen (DAG). Fangen wir an mit einem
einfachen Beispiel: dem Diensttyp für den Guix-Erstellungsdaemon (siehe
*note Aufruf des guix-daemon::):

     (define guix-service-type
       (service-type
        (name 'guix)
        (extensions
         (list (service-extension shepherd-root-service-type guix-shepherd-service)
               (service-extension account-service-type guix-accounts)
               (service-extension activation-service-type guix-activation)))
        (default-value (guix-configuration))))

Damit sind drei Dinge definiert:

  1. Ein Name, der nur dazu da ist, dass man leichter die Abläufe
     verstehen und Fehler suchen kann.

  2. Eine Liste von “Diensterweiterungen” („service extensions“). Jede
     Erweiterung gibt den Ziel-Diensttyp an sowie eine Prozedur, die für
     gegebene Parameter für den Dienst eine Liste von Objekten
     zurückliefert, um den Dienst dieses Typs zu erweitern.

     Jeder Diensttyp benutzt mindestens eine Diensterweiterung. Die
     einzige Ausnahme ist der “boot service type”, der die Grundlage
     aller Dienste ist.

  3. Optional kann ein Vorgabewert für Instanzen dieses Typs angegeben
     werden.

   In diesem Beispiel werden durch ‘guix-service-type’ drei Dienste
erweitert:

‘shepherd-root-service-type’
     Die Prozedur ‘guix-shepherd-service’ definiert, wie der
     Shepherd-Dienst erweitert wird, und zwar liefert sie ein
     ‘<shepherd-service>’-Objekt, womit definiert wird, wie der
     ‘guix-daemon’ gestartet und gestoppt werden kann (siehe *note
     Shepherd-Dienste::).

‘account-service-type’
     Diese Erweiterung des Dienstes wird durch ‘guix-accounts’
     berechnet, eine Prozedur, die eine Liste von ‘user-group’- und
     ‘user-account’-Objekten liefert, die die Erstellungsbenutzerkonten
     repräsentieren (siehe *note Aufruf des guix-daemon::).

‘activation-service-type’
     Hier ist ‘guix-activation’ eine Prozedur, die einen G-Ausdruck
     liefert. Dieser ist ein Code-Schnipsel, das zur „Aktivierungszeit“
     ausgeführt werden soll — z.B. wenn der Dienst hochgefahren wird.

   Ein Dienst dieses Typs wird dann so instanziiert:

     (service guix-service-type
              (guix-configuration
                (build-accounts 5)
                (use-substitutes? #f)))

   Das zweite Argument an die ‘service’-Form ist ein Wert, der die
Parameter dieser bestimmten Dienstinstanz repräsentiert. Siehe *note
‘guix-configuration’: guix-configuration-type. für Informationen über
den ‘guix-configuration’-Datentyp. Wird kein Wert angegeben, wird die
Vorgabe verwendet, die im ‘guix-service-type’ angegeben wurde:

     (service guix-service-type)

   ‘guix-service-type’ ist ziemlich einfach, weil es andere Dienste
erweitert, aber selbst nicht erweitert werden kann.

   Der Diensttyp eines _erweiterbaren_ Dienstes sieht ungefähr so aus:

     (define udev-service-type
       (service-type (name 'udev)
                     (extensions
                      (list (service-extension shepherd-root-service-type
                                               udev-shepherd-service)))

                     (compose concatenate)     ;Liste der Regeln zusammenfügen
                     (extend (lambda (config rules) ;Konfiguration und Regeln
                               (match config
                                 (($ <udev-configuration> udev initial-rules)
                                  (udev-configuration
                                   (udev udev) ;zu benutzendes udev-Paket
                                   (rules (append initial-rules rules)))))))))

   Dies ist der Diensttyp für den Geräteverwaltungsdaemon eudev
(https://wiki.gentoo.org/wiki/Project:Eudev). Verglichen mit dem
vorherigen Beispiel sehen wir neben einer Erweiterung des
‘shepherd-root-service-type’ auch zwei neue Felder.

‘compose’
     Die Prozedur, um die Liste der jeweiligen Erweiterungen für den
     Dienst dieses Typs zu einem Objekt zusammenzustellen (zu
     „komponieren“, englisch “compose”).

     Dienste können den udev-Dienst erweitern, indem sie eine Liste von
     Regeln („Rules“) an ihn übergeben; wir komponieren mehrere solche
     Erweiterungen, indem wir die Listen einfach zusammenfügen.

‘extend’
     Diese Prozedur definiert, wie der Wert des Dienstes um die
     Komposition mit Erweiterungen erweitert („extended“) werden kann.

     Udev-Erweiterungen werden zu einer einzigen Liste von Regeln
     komponiert, aber der Wert des udev-Dienstes ist ein
     ‘<udev-configuration>’-Verbundsobjekt. Deshalb erweitern wir diesen
     Verbund, indem wir die Liste der von Erweiterungen beigetragenen
     Regeln an die im Verbund gespeicherte Liste der Regeln anhängen.

‘description’
     Diese Zeichenkette gibt einen Überblick über den Systemtyp. Die
     Zeichenkette darf mit Texinfo ausgezeichnet werden (siehe *note
     (texinfo)Overview::). Der Befehl ‘guix system search’ durchsucht
     diese Zeichenketten und zeigt sie an (siehe *note Aufruf von guix
     system::).

   Es kann nur eine Instanz eines erweiterbaren Diensttyps wie
‘udev-service-type’ geben. Wenn es mehrere gäbe, wäre es mehrdeutig,
welcher Dienst durch die ‘service-extension’ erweitert werden soll.

   Sind Sie noch da? Der nächste Abschnitt gibt Ihnen eine Referenz der
Programmierschnittstelle für Dienste.


File: guix.de.info,  Node: Service-Referenz,  Next: Shepherd-Dienste,  Prev: Diensttypen und Dienste,  Up: Dienste definieren

8.17.3 Service-Referenz
-----------------------

Wir haben bereits einen Überblick über Diensttypen gesehen (siehe *note
Diensttypen und Dienste::). Dieser Abschnitt hier stellt eine Referenz
dar, wie Dienste und Diensttypen manipuliert werden können. Diese
Schnittstelle wird vom Modul ‘(gnu services)’ angeboten.

 -- Scheme-Prozedur: service TYP [WERT]
     Return a new service of TYPE, a ‘<service-type>’ object (see
     below). VALUE can be any object; it represents the parameters of
     this particular service instance.

     Wenn kein WERT angegeben wird, wird der vom TYP festgelegte
     Vorgabewert verwendet; verfügt der TYP über keinen Vorgabewert,
     dann wird ein Fehler gemeldet.

     Zum Beispiel bewirken Sie hiermit:

          (service openssh-service-type)

     dasselbe wie mit:

          (service openssh-service-type
                   (openssh-configuration))

     In beiden Fällen ist das Ergebnis eine Instanz von
     ‘openssh-service-type’ mit der vorgegebenen Konfiguration.

 -- Scheme-Prozedur: service? OBJEKT
     Liefert wahr zurück, wenn das OBJEKT ein Dienst ist.

 -- Scheme-Prozedur: service-kind DIENST
     Liefert den Typ des DIENSTes — d.h. ein ‘<service-type>’-Objekt.

 -- Scheme-Prozedur: service-value DIENST
     Liefert den Wert, der mit dem DIENST assoziiert wurde. Er
     repräsentiert die Parameter des DIENSTes.

   Hier ist ein Beispiel, wie ein Dienst erzeugt und manipuliert werden
kann:

     (define s
       (service nginx-service-type
                (nginx-configuration
                 (nginx nginx)
                 (log-directory log-Verzeichnis)
                 (run-directory run-Verzeichnis)
                 (file config-Datei))))

     (service? s)
     ⇒ #t

     (eq? (service-kind s) nginx-service-type)
     ⇒ #t

   Die Form ‘modify-services’ ist eine nützliche Methode, die Parameter
von einigen der Dienste aus einer Liste wie ‘%base-services’ abzuändern
(siehe *note ‘%base-services’: Basisdienste.). Sie wird zu einer Liste
von Diensten ausgewertet. Natürlich können Sie dazu auch die üblichen
Listenkombinatoren wie ‘map’ und ‘fold’ benutzen (siehe *note List
Library: (guile)SRFI-1.), ‘modify-services’ soll dieses häufig benutzte
Muster lediglich durch eine knappere Syntax unterstützen.

 -- Scheme-Syntax: modify-services DIENSTE (TYP VARIABLE => RUMPF) …

     Passt die von DIENSTE bezeichnete Dienst-Liste entsprechend den
     angegebenen Klauseln an. Jede Klausel hat die Form:

          (TYP VARIABLE => RUMPF)

     wobei TYP einen Diensttyp („service type“) bezeichnet — wie zum
     Beispiel ‘guix-service-type’ — und VARIABLE ein Bezeichner ist, der
     im RUMPF an die Dienst-Parameter — z.B. eine
     ‘guix-configuration’-Instanz — des ursprünglichen Dienstes mit
     diesem TYP gebunden wird.

     Der RUMPF muss zu den neuen Dienst-Parametern ausgewertet werden,
     welche benutzt werden, um den neuen Dienst zu konfigurieren. Dieser
     neue Dienst wird das Original in der resultierenden Liste ersetzen.
     Weil die Dienstparameter eines Dienstes mit ‘define-record-type*’
     erzeugt werden, können Sie einen kurzen RUMPF schreiben, der zu den
     neuen Dienstparametern ausgewertet wird, indem Sie die
     Funktionalität namens ‘inherit’ benutzen, die von
     ‘define-record-type*’ bereitgestellt wird.

     Siehe *note Das Konfigurationssystem nutzen:: für ein
     Anwendungsbeispiel.

   Als Nächstes ist die Programmierschnittstelle für Diensttypen an der
Reihe. Sie ist etwas, was Sie kennen werden wollen, wenn Sie neue
Dienstdefinitionen schreiben, aber wenn Sie nur Ihre
‘operating-system’-Deklaration anpassen möchten, brauchen Sie diese
Schnittstelle wahrscheinlich nicht.

 -- Datentyp: service-type
     Die Repräsentation eines “Diensttypen” (siehe *note Diensttypen und
     Dienste::).

     ‘name’
          Dieses Symbol wird nur verwendet, um die Abläufe im System
          anzuzeigen und die Fehlersuche zu erleichtern.

     ‘extensions’
          Eine nicht-leere Liste von ‘<service-extension>’-Objekten
          (siehe unten).

     ‘compose’ (Vorgabe: ‘#f’)
          Wenn es auf ‘#f’ gesetzt ist, dann definiert der Diensttyp
          Dienste, die nicht erweitert werden können — d.h. diese
          Dienste erhalten ihren Wert nicht von anderen Diensten.

          Andernfalls muss es eine Prozedur sein, die ein einziges
          Argument entgegennimmt. Die Prozedur wird durch
          ‘fold-services’ aufgerufen und ihr wird die Liste von aus den
          Erweiterungen angesammelten Werten übergeben. Sie gibt
          daraufhin einen einzelnen Wert zurück.

     ‘extend’ (Vorgabe: ‘#f’)
          Ist dies auf ‘#f’ gesetzt, dann können Dienste dieses Typs
          nicht erweitert werden.

          Andernfalls muss es eine zwei Argumente nehmende Prozedur
          sein, die von ‘fold-services’ mit dem anfänglichen Wert für
          den Dienst als erstes Argument und dem durch Anwendung von
          ‘compose’ gelieferten Wert als zweites Argument aufgerufen
          wird. Als Ergebnis muss ein Wert geliefert werden, der einen
          zulässigen neuen Parameterwert für die Dienstinstanz
          darstellt.

     Siehe den Abschnitt *note Diensttypen und Dienste:: für Beispiele.

 -- Scheme-Prozedur: service-extension ZIELTYP BERECHNER Liefert eine
          neue Erweiterung für den Dienst mit dem
     ZIELTYP. Als BERECHNER muss eine Prozedur angegeben werden, die ein
     einzelnes Argument nimmt: ‘fold-services’ ruft sie auf und übergibt
     an sie den Wert des erweiternden Dienstes, sie muss dafür einen
     zulässigen Wert für den ZIELTYP liefern.

 -- Scheme-Prozedur: service-extension? OBJEKT
     Liefert wahr zurück, wenn das OBJEKT eine Diensterweiterung ist.

   Manchmal wollen Sie vielleicht einfach nur einen bestehenden Dienst
erweitern. Dazu müssten Sie einen neuen Diensttyp definieren und die
Erweiterung definieren, für die Sie sich interessieren, was ganz schön
wortreich werden kann. Mit der Prozedur ‘simple-service’ können Sie es
kürzer fassen.

 -- Scheme-Prozedur: simple-service NAME ZIELTYP WERT
     Liefert einen Dienst, der den Dienst mit dem ZIELTYP um den WERT
     erweitert. Dazu wird ein Diensttyp mit dem NAMEn für den einmaligen
     Gebrauch erzeugt, den der zurückgelieferte Dienst instanziiert.

     Zum Beispiel kann mcron (siehe *note Geplante Auftragsausführung::)
     so um einen zusätzlichen Auftrag erweitert werden:

          (simple-service 'my-mcron-job mcron-service-type
                          #~(job '(next-hour (3)) "guix gc -F 2G"))

   Den Kern dieses abstrakten Modells für Dienste bildet die Prozedur
‘fold-services’, die für das „Kompilieren“ einer Liste von Diensten hin
zu einem einzelnen Verzeichnis verantwortlich ist, in welchem alles
enthalten ist, was Sie zum Booten und Hochfahren des Systems brauchen —
d.h. das Verzeichnis, das der Befehl ‘guix system build’ anzeigt (siehe
*note Aufruf von guix system::). Einfach ausgedrückt propagiert
‘fold-services’ Diensterweiterungen durch den Dienstgraphen nach unten
und aktualisiert dabei in jedem Knoten des Graphen dessen Parameter, bis
nur noch der Wurzelknoten übrig bleibt.

 -- Scheme-Prozedur: fold-services DIENSTE [#:target-type
          SYSTEM-SERVICE-TYPE] Faltet die DIENSTE wie die
     funktionale Prozedur ‘fold’ zu einem einzigen zusammen, indem ihre
     Erweiterungen nach unten propagiert werden, bis eine Wurzel vom
     TARGET-TYPE als Diensttyp erreicht wird; dieser so angepasste
     Wurzeldienst wird zurückgeliefert.

   Als Letztes definiert das Modul ‘(gnu services)’ noch mehrere
essenzielle Diensttypen, von denen manche im Folgenden aufgelistet sind:

 -- Scheme-Variable: system-service-type
     Die Wurzel des Dienstgraphen. Davon wird das Systemverzeichnis
     erzeugt, wie es vom Befehl ‘guix system build’ zurückgeliefert
     wird.

 -- Scheme-Variable: boot-service-type
     Der Typ des „Boot-Dienstes“, der das “Boot-Skript” erzeugt. Das
     Boot-Skript ist das, was beim Booten durch die initiale RAM-Disk
     ausgeführt wird.

 -- Scheme-Variable: etc-service-type
     Der Typ des ‘/etc’-Dienstes. Dieser Dienst wird benutzt, um im
     ‘/etc’-Verzeichnis Dateien zu platzieren. Er kann erweitert werden,
     indem man Name-/Datei-Tupel an ihn übergibt wie in diesem Beispiel:

          (list `("issue" ,(plain-file "issue" "Willkommen!\n")))

     Dieses Beispiel würde bewirken, dass eine Datei ‘/etc/issue’ auf
     die angegebene Datei verweist.

 -- Scheme-Variable: setuid-program-service-type
     Der Typ des Dienstes für setuid-Programme, der eine Liste von
     ausführbaren Dateien ansammelt, die jeweils als G-Ausdrücke
     übergeben werden und dann zur Menge der setuid-gesetzten Programme
     auf dem System hinzugefügt werden (siehe *note Setuid-Programme::).

 -- Scheme-Variable: profile-service-type
     Der Typ des Dienstes zum Einfügen von Dateien ins “Systemprofil” —
     d.h. die Programme unter ‘/run/current-system/profile’. Andere
     Dienste können ihn erweitern, indem sie ihm Listen von ins
     Systemprofil zu installierenden Paketen übergeben.

 -- Scheme-Variable: provenance-service-type
     Dies ist der Diensttyp des Dienstes, um “Provenienz-Metadaten”
     zusammen mit dem eigentlichen System zu speichern. Dazu werden
     mehrere Dateien unter ‘/run/current-system’ erstellt:

     ‘channels.scm’
          Sie ist eine „Kanaldatei“, wie sie an ‘guix pull -C’ oder
          ‘guix time-machine -C’ übergeben werden kann, die die zum
          Erstellen des Systems notwendigen Kanäle beschreibt, sofern
          diese Information zur Verfügung gestanden hat (siehe *note
          Kanäle::).

     ‘configuration.scm’
          Jene Datei entspricht derjenigen, die als Wert für diesen
          ‘provenance-service-type’-Dienst mitgegeben wurde. Nach
          Vorgabe übergibt ‘guix system reconfigure’ automatisch die
          Betriebssystemkonfigurationsdatei, die es auf der Befehlszeile
          bekommen hat.

     ‘provenance’
          Hierin sind dieselben Informationen enthalten, die auch in den
          anderen beiden Dateien stehen, aber in einem leichter zu
          verarbeitenden Format.

     Im Allgemeinen genügen diese zwei Informationen (Kanäle und
     Konfigurationsdatei), um das Betriebssystem „aus seinem Quellcode
     heraus“ zu reproduzieren.

          Einschränkungen: Sie benötigen diese Informationen, um Ihr
          Betriebssystem erneut zu erstellen, aber sie alleine _reichen
          nicht immer aus_. Insbesondere ist ‘configuration.scm’ alleine
          nicht hinreichend, wenn es _nicht_ eigenständig ist, sondern
          auf externe Guile-Module oder andere Dateien verweist. Wenn
          Sie erreichen wollen, dass ‘configuration.scm’ eigenständig
          wird, empfehlen wir, alle darin verwendeten Module oder
          Dateien zu Bestandteilen eines Kanals zu machen.

          Übrigens sind Provenienzmetadaten „still“ in dem Sinn, dass
          ihr Vorhandensein nichts an den Bits ändert, die Ihr System
          ausmachen, _abgesehen von den die Metadaten ausmachenden
          Bits_. Zwei verschiedene Betriebssystemkonfigurationen und
          Kanalangaben können also Bit für Bit dasselbe System erzeugen,
          aber wenn der ‘provenance-service-type’ benutzt wird,
          enthalten die beiden Systeme trotzdem unterschiedliche
          Metadaten und damit nicht mehr den gleichen Dateinamen im
          Store, was es schwerer macht, ihre Gleichheit zu erkennen.

     Dieser Dienst wird automatisch zu Ihrer Betriebssystemkonfiguration
     hinzugefügt, wenn Sie ‘guix system reconfigure’, ‘guix system init’
     oder ‘guix deploy’ benutzen.


File: guix.de.info,  Node: Shepherd-Dienste,  Prev: Service-Referenz,  Up: Dienste definieren

8.17.4 Shepherd-Dienste
-----------------------

Das Modul ‘(gnu services shepherd)’ gibt eine Methode an, mit der
Dienste definiert werden können, die von GNU Shepherd verwaltet werden,
was das Initialisierungssystem (das „init“-System) ist — es ist der
erste Prozess, der gestartet wird, wenn das System gebootet wird, auch
bekannt als PID 1 (siehe *note (shepherd)Einführung::).

   Dienste unter dem Shepherd können voneinander abhängen. Zum Beispiel
kann es sein, dass der SSH-Daemon erst gestartet werden darf, nachdem
der Syslog-Daemon gestartet wurde, welcher wiederum erst gestartet
werden kann, sobald alle Dateisysteme eingebunden wurden. Das einfache
Betriebssystem, dessen Definition wir zuvor gesehen haben (siehe *note
Das Konfigurationssystem nutzen::), ergibt folgenden Dienstgraphen:

[Typischer Shepherd-Dienstgraph]
   Sie können so einen Graphen tatsächlich für jedes Betriebssystem
erzeugen lassen, indem Sie den Befehl ‘guix system shepherd-graph’
benutzen (siehe *note ‘guix system shepherd-graph’:
system-shepherd-graph.).

   Der ‘%shepherd-root-service’ ist ein Dienstobjekt, das diesen Prozess
mit PID 1 repräsentiert. Der Dienst hat den Typ
‘shepherd-root-service-type’. Man kann ihn erweitern, indem man eine
Liste von ‘<shepherd-service>’-Objekten an ihn übergibt.

 -- Datentyp: shepherd-service
     Der Datentyp, der einen von Shepherd verwalteten Dienst
     repräsentiert.

     ‘provision’
          Diese Liste von Symbolen gibt an, was vom Dienst angeboten
          wird.

          Das bedeutet, es sind die Namen, die an ‘herd start’, ‘herd
          status’ und ähnliche Befehle übergeben werden können (siehe
          *note (shepherd)Invoking herd::). Siehe *note the ‘provides’
          slot: (shepherd)Slots of services. für Details.

     ‘requirement’ (Vorgabe: ‘'()’)
          Eine Liste von Symbolen, die angegeben, von welchen anderen
          Shepherd-Diensten dieser hier abhängt.

     ‘one-shot?’ (Vorgabe: ‘#f’)
          Gibt an, ob dieser Dienst nur einmal ausgeführt wird
          („one-shot“). Einmalig ausgeführte Dienste werden gestoppt,
          sobald ihre ‘start’-Aktion abgeschlossen wurde. Siehe *note
          (shepherd)Slots of services:: für weitere Informationen.

     ‘respawn?’ (Vorgabe: ‘#t’)
          Ob der Dienst neu gestartet werden soll, nachdem er gestoppt
          wurde, zum Beispiel wenn der ihm zu Grunde liegende Prozess
          terminiert wird.

     ‘start’
     ‘stop’ (Vorgabe: ‘#~(const #f)’)
          Die Felder ‘start’ und ‘stop’ beziehen sich auf Shepherds
          Funktionen zum Starten und Stoppen von Prozessen (siehe *note
          (shepherd)Service De- and Constructors::). Sie enthalten
          G-Ausdrücke, die in eine Shepherd-Konfigurationdatei
          umgeschrieben werden (siehe *note G-Ausdrücke::).

     ‘actions’ (Vorgabe: ‘'()’)
          Dies ist eine Liste von ‘shepherd-action’-Objekten (siehe
          unten), die vom Dienst zusätzlich unterstützte “Aktionen”
          neben den Standardaktionen ‘start’ und ‘stop’ angeben. Hier
          aufgeführte Aktionen werden als ‘herd’-Unterbefehle verfügbar
          gemacht:

               herd AKTION DIENST [ARGUMENTE…]

     ‘auto-start?’ (Vorgabe: ‘#t’)
          Ob dieser Dienst automatisch durch Shepherd gestartet werden
          soll. Wenn es auf ‘#f’ steht, muss der Dienst manuell über
          ‘herd start’ gestartet werden.

     ‘documentation’
          Eine Zeichenkette zur Dokumentation, die angezeigt wird, wenn
          man dies ausführt:

               herd doc DIENSTNAME

          wobei der DIENSTNAME eines der Symbole aus der
          ‘provision’-Liste sein muss (siehe *note (shepherd)Invoking
          herd::).

     ‘modules’ (Vorgabe: ‘%default-modules’)
          Dies ist die Liste der Module, die in den Sichtbarkeitsbereich
          geladen sein müssen, wenn ‘start’ und ‘stop’ ausgewertet
          werden.

 -- Datentyp: shepherd-action
     Dieser Datentyp definiert zusätzliche Aktionen, die ein
     Shepherd-Dienst implementiert (siehe oben).

     ‘name’
          Die Aktion bezeichnendes Symbol.

     ‘documentation’
          Diese Zeichenkette ist die Dokumentation für die Aktion. Sie
          können sie sehen, wenn Sie dies ausführen:

               herd doc DIENST action AKTION

     ‘procedure’
          Dies sollte ein G-Ausdruck sein, der zu einer mindestens ein
          Argument nehmenden Prozedur ausgewertet wird. Das Argument ist
          der „running“-Wert des Dienstes (siehe *note (shepherd)Slots
          of services::).

     Das folgende Beispiel definiert eine Aktion namens ‘sag-hallo’, die
     den Benutzer freundlich begrüßt:

          (shepherd-action
            (name 'sag-hallo)
            (documentation "Sag Hallo!")
            (procedure #~(lambda (running . args)
                           (format #t "Hallo, Freund! Argumente: ~s\n"
                                   args)
                           #t)))

     Wenn wir annehmen, dass wir die Aktion zum Dienst ‘beispiel’
     hinzufügen, können Sie Folgendes ausführen:

          # herd sag-hallo beispiel
          Hallo, Freund! Argumente: ()
          # herd sag-hallo beispiel a b c
          Hallo, Freund! Argumente: ("a" "b" "c")

     Wie Sie sehen können, ist das eine sehr ausgeklügelte Art, Hallo zu
     sagen. Siehe *note (shepherd)Service Convenience:: für mehr
     Informationen zu Aktionen.

 -- Scheme-Variable: shepherd-root-service-type
     Der Diensttyp für den Shepherd-„Wurzeldienst“ — also für PID 1.

     Dieser Diensttyp stellt das Ziel für Diensterweiterungen dar, die
     Shepherd-Dienste erzeugen sollen (siehe *note Diensttypen und
     Dienste:: für ein Beispiel). Jede Erweiterung muss eine Liste von
     ‘<shepherd-service>’-Objekten übergeben.

 -- Scheme-Variable: %shepherd-root-service
     Dieser Dienst repräsentiert PID 1.


File: guix.de.info,  Node: Dokumentation,  Next: Dateien zur Fehlersuche installieren,  Prev: Systemkonfiguration,  Up: Top

9 Dokumentation
***************

In den meisten Fällen liegt den mit Guix installierten Paketen auch
Dokumentation bei, die diese beschreibt. Die zwei üblichsten Formate für
Dokumentation sind „Info“, ein durchsuchbares Hypertextformat, das für
GNU-Software benutzt wird, und sogenannte „Handbuchseiten“ (englisch
„Manual Pages“, kurz Man-Pages), das linear aufgebaute
Dokumentationsformat, das auf Unix traditionell mitgeliefert wird.
Info-Handbücher können mit dem Befehl ‘info’ oder mit Emacs abgerufen
werden, auf Handbuchseiten kann mit dem Befehl ‘man’ zugegriffen werden.

   Sie können die Dokumentation von auf Ihrem System installierter
Software nach einem Schlüsselwort durchsuchen. Zum Beispiel suchen Sie
mit folgendem Befehl in den Info-Handbüchern nach „TLS“.

     $ info -k TLS
     "(emacs)Network Security" -- STARTTLS
     "(emacs)Network Security" -- TLS
     "(gnutls)Core TLS API" -- gnutls_certificate_set_verify_flags
     "(gnutls)Core TLS API" -- gnutls_certificate_set_verify_function
     …

Mit folgendem Befehl suchen Sie dasselbe Schlüsselwort in
Handbuchseiten:

     $ man -k TLS
     SSL (7)              - OpenSSL SSL/TLS library
     certtool (1)         - GnuTLS certificate tool
     ...

   Diese Suchvorgänge finden ausschließlich lokal auf Ihrem Rechner
statt, wodurch gewährleistet ist, dass die Fundstellen zur von Ihnen
auch tatsächlich installierten Software passen, Sie für den Zugriff
keine Internetverbindung brauchen und Datenschutz gewährleistet bleibt.

   Sobald Sie die Fundstellen kennen, können Sie zum Beispiel so die
entsprechende Dokumentation anzeigen lassen:

     $ info "(gnutls)Core TLS API"

oder

     $ man certtool

   Info-Handbücher sind in Abschnitte unterteilt und verfügen über
Register sowie Hyperlinks, wie jene, die Sie auch von Webseiten kennen.
Der ‘info’-Betrachter (siehe *note Info reader: (info-stnd)Top.) und
sein Gegenstück für Emacs (siehe *note (emacs)Misc Help::) verfügen über
leicht erlernbare Tastenkürzel, mit denen Sie in Handbüchern navigieren
können. Siehe *note (info)Getting Started:: für eine Einführung in die
Info-Navigation.


File: guix.de.info,  Node: Dateien zur Fehlersuche installieren,  Next: Sicherheitsaktualisierungen,  Prev: Dokumentation,  Up: Top

10 Dateien zur Fehlersuche installieren
***************************************

Die Binärdateien von Programmen, wie sie zum Beispiel von den
GCC-Compilern erzeugt werden, sind in der Regel im ELF-Format
gespeichert und enthalten eine Sektion mit “Informationen zur
Fehlersuche” (englisch „Debugging Information“). Informationen zur
Fehlersuche machen es möglich, dass der Debugger, GDB, Binärcode dem
Quellcode zuordnen kann. Das ist nötig, damit es mit etwas Glück leicht
ist, Fehler in einem kompilierten Programm zu suchen.

   Das Problem bei Informationen zur Fehlersuche ist, dass dadurch
einiges an Plattenplatz verbraucht wird. Zum Beispiel steuern die
Informationen zur Fehlersuche in der GNU-C-Bibliothek mehr als 60 MiB
bei. Als ein Nutzer ist es deswegen in der Regel nicht möglich,
sämtliche Fehlersuchinformationen für alle installierten Programme zu
speichern. Andererseits sollten Platzeinsparnisse nicht auf Kosten der
Fehlersuche gehen — besonders im GNU-System, wo es Nutzern leicht fallen
sollte, ihre Freiheit, wie sie ihre Rechner benutzen, auszuüben (siehe
*note GNU-Distribution::).

   Glücklicherweise gibt es in den GNU Binary Utilities (Binutils) und
GDB einen Mechanismus, mit dem Nutzer das Beste aus beiden Welten
bekommen: Informationen zur Fehlersuche können von den davon
beschriebenen Binärdateien losgelöst und in separaten Dateien
gespeichert werden. GDB kann dann Fehlersuchinformationen laden, wenn
diese Dateien verfügbar sind (siehe *note (gdb)Separate Debug Files::).

   Die GNU-Distribution nutzt diesen Mechanismus aus, indem sie
Informationen zur Fehlersuche im Unterverzeichnis ‘lib/debug’ einer
separaten Paketausgabe speichert, die den fantasielosen Namen ‘debug’
trägt. Mit dem folgenden Befehl können Sie zum Beispiel Informationen
zur Fehlersuche für die GNU-C-Bibliothek und für GNU Guile installieren:

     guix install glibc:debug guile:debug

   GDB muss dann angewiesen werden, im Profil des Nutzers nach
Informationen zur Fehlersuche zu schauen, indem Sie die Variable
‘debug-file-directory’ entsprechend setzen (vielleicht möchsten Sie die
Variable in der Datei ‘~/.gdbinit’ festlegen, siehe *note
(gdb)Startup::):

     (gdb) set debug-file-directory ~/.guix-profile/lib/debug

   From there on, GDB will pick up debugging information from the
‘.debug’ files under ‘~/.guix-profile/lib/debug’.

   Des Weiteren werden Sie höchstwahrscheinlich wollen, dass GDB den
Quellcode, der auf Fehler untersucht wird, anzeigen kann. Dazu müssen
sie den Quellcodes des Pakets, für das Sie sich interessieren (laden Sie
ihn mit ‘guix build --source’ herunter; siehe *note Aufruf von guix
build::), und dann weisen Sie GDB an, in dem Verzeichnis zu suchen,
indem Sie den ‘directory’-Befehl benutzen (siehe *note ‘directory’:
(gdb)Source Path.).

   Der Mechanismus mit der ‘debug’-Ausgabe wird in Guix als Teil des
‘gnu-build-system’ implementiert (siehe *note Erstellungssysteme::). Zur
Zeit ist sie optional — nur für Pakete, für die ausdrücklich eine
‘debug’-Ausgabe deklariert wurde, sind Informationen zur Fehlersuche
verfügbar. Um zu überprüfen, ob Pakete eine ‘debug’-Ausgabe mit
Informationen zur Fehlersuche haben, benutzen Sie ‘guix package
--list-available’ (siehe *note Aufruf von guix package::).


File: guix.de.info,  Node: Sicherheitsaktualisierungen,  Next: Bootstrapping,  Prev: Dateien zur Fehlersuche installieren,  Up: Top

11 Sicherheitsaktualisierungen
******************************

Occasionally, important security vulnerabilities are discovered in
software packages and must be patched. Guix developers try hard to keep
track of known vulnerabilities and to apply fixes as soon as possible in
the ‘master’ branch of Guix (we do not yet provide a “stable” branch
containing only security updates). The ‘guix lint’ tool helps developers
find out about vulnerable versions of software packages in the
distribution:

     $ guix lint -c cve
     gnu/packages/base.scm:652:2: glibc@2.21: Wahrscheinlich angreifbar durch CVE-2015-1781, CVE-2015-7547
     gnu/packages/gcc.scm:334:2: gcc@4.9.3: Wahrscheinlich angreifbar durch CVE-2015-5276
     gnu/packages/image.scm:312:2: openjpeg@2.1.0: Wahrscheinlich angreifbar durch CVE-2016-1923, CVE-2016-1924
     …

   Siehe *note Aufruf von guix lint:: für weitere Informationen.

   Guix verfolgt eine funktionale Disziplin bei der Paketverwaltung
(siehe *note Einführung::), was impliziert, dass bei jeder Änderung an
einem Paket _jedes davon abhängige Paket_ neu erstellt werden muss. Ohne
einen Mechanismus würde das Ausliefern von Sicherheitsaktualisierungen
in Kernpaketen wie libc oder Bash dadurch deutlich verlangsamt —
schließlich müsste quasi die gesamte Distribution neu erstellt werden.
Vorerstellte Binärdateien zu benutzen, wäre schon einmal eine Hilfe
(siehe *note Substitute::), aber die Auslieferung wäre immer noch
laangsamer, als wir es uns wünschen.

   Als Gegenmittel sind in Guix “Veredelungen” implementiert. Diese
stellen einen Mechanismus dar, mit dem kritische Aktualisierungen
schnell an Guix’ Benutzer ausgeliefert werden können, ohne die
Nachteile, zu denen es käme, wenn wir die gesamte Distribution neu
erstellen müssten. Die Idee dahinter ist, nur das Paket, das einen Patch
braucht, neu zu erstellen, und damit dann Pakete, die der Nutzer
ausdrücklich installiert hat und die vorher Referenzen auf das alte
Paket enthielten, zu „veredeln“. So eine Veredelung kostet
typischerweise nur sehr wenig, d.h. um Größenordnungen weniger, als die
ganze Abhängigkeitskette neu zu erstellen.

   Nehmen wir also an, eine Sicherheitsaktualisierung müsste auf Bash
angewandt werden. Guix-Entwickler schreiben dann eine Paketdefinition
für die „reparierte“ Bash, sagen wir ‘bash-fixed’, auf die gleiche Art
wie immer (siehe *note Pakete definieren::). Dann wird die ursprüngliche
Paketdefinition um ein ‘replacement’-Feld (zu Deutsch „Ersetzung“)
erweitert, das auf das Paket verweist, in dem der Fehler behoben wurde:

     (define bash
       (package
         (name "bash")
         ;; …
         (replacement bash-fixed)))

   Ab diesem Zeitpunkt wird jedes Paket, das Sie installieren und das
direkt oder indirekt von Bash abhängt — also die von ‘guix gc
--requisites’ ausgegebenen Pakete (siehe *note Aufruf von guix gc::) —,
automatisch „umgeschrieben“, so dass es ‘bash-fixed’ referenziert, wo es
vorher ‘bash’ referenziert hatte. Die Dauer dieses Veredelungsprozesses
ist proportional zur Größe des Pakets und liegt auf einer neuen Maschine
für ein „durchschnittliches“ Paket bei unter einer Minute. Veredeln ist
rekursiv: Wenn eine indirekte Abhängigkeit veredelt werden muss,
„propagiert“ der Veredelungsprozess durch die abhängigen Pakete und
endet mit dem Paket, das der Nutzer installiert.

   Zur Zeit muss der Name und die Version einer Veredelung gleichlang
wie die beim ersetzten Paket sein (also bei ‘bash-fixed’ und ‘bash’ im
Beispiel oben). Diese Einschränkung kommt daher, dass beim Veredeln der
Inhalt von Dateien, einschließlich Binärdateien, durch einfache
Ersetzungen „geflickt“ wird. Es gibt noch mehr Einschränkungen: Wenn zum
Beispiel ein Paket veredelt wird, das eine gemeinsame Bibliothek
(„Shared Library“) verwendet, muss der ‘SONAME’ von Original und Ersatz
derselbe sein und die beiden müssen binär kompatibel sein.

   Mit der Befehlszeilenoption ‘--no-grafts’ können Sie den
Veredelungsmechanismus zwingend abschalten (siehe *note ‘--no-grafts’:
Gemeinsame Erstellungsoptionen.). Der Befehl

     guix build bash --no-grafts

liefert also den Namen der Store-Datei mit der ursprünglichen Bash,
während

     guix build bash

den Namen der Store-Datei für die „reparierte“ Ersatz-Bash liefert.
Dadurch können Sie zwischen den beiden Varianten von Bash unterscheiden.

   Um zu prüfen, welche Bash Ihr gesamtes Profil referenziert, können
Sie diesen Befehl hier laufen lassen (siehe *note Aufruf von guix gc::):

     guix gc -R `readlink -f ~/.guix-profile` | grep bash

Dann vergleichen Sie die Namen der Store-Objekte, die Sie ausgegeben
bekommen, mit den beiden Bash-Paketnamen oben. Ebenso können Sie eine
ganze Guix-Systemgeneration überprüfen:

     guix gc -R `guix system build my-config.scm` | grep bash

   Zum Schluss können Sie mit dem Befehl ‘lsof’ überprüfen, welches von
den Bash-Paketen die laufenden Prozesse benutzen:

     lsof | grep /gnu/store/.*bash


File: guix.de.info,  Node: Bootstrapping,  Next: Portierung,  Prev: Sicherheitsaktualisierungen,  Up: Top

12 Bootstrapping
****************

Wenn wir von Bootstrapping sprechen, meinen wir damit, wie die
Distribution „aus dem Nichts“ erstellt werden kann. Erinnern Sie sich,
wie die Erstellungsumgebung für eine Ableitung nichts außer ihren
deklarierten Eingaben enthält (siehe *note Einführung::)? Daraus ergibt
sich ein Henne-Ei-Problem: Wie kann so das allererste Paket entstehen?
Womit wird der Compiler kompiliert? Beachten Sie, diese Frage ist nur
für neugierige Hacker und keine normalen Nutzer interessant. Wenn Sie
sich selbst als „normaler Nutzer“ sehen, dürfen Sie getrost diesen
Abschnitt hier überspringen.

   Das GNU-System besteht in erster Linie aus C-Code, dessen Kern die
libc ist. Das GNU-Erstellungssystem selbst setzt voraus, dass eine
Bourne-Shell und die Kommandozeilenwerkzeuge der GNU-Coreutils, Awk,
Findutils, „sed“ und „grep“ verfügbar sind. Des Weiteren sind Programme
für die Erstellung — also Programme, die ‘./configure’, ‘make’, etc.
ausführen — in Guile Scheme geschrieben (siehe *note Ableitungen::).
Folglich ist es erforderlich, dass, damit überhaupt irgendetwas erstellt
werden kann, Guix vorerstellte Binärdateien von Guile, GCC, Binutils,
libc und den anderen oben genannten Paketen verwendet. Diese bezeichnen
wir als die “Bootstrap-Binärdateien”.

   These bootstrap binaries are “taken for granted”, though we can also
re-create them if needed (*note Vorbereitung zur Verwendung der
Bootstrap-Binärdateien::).

* Menu:

* Bootstrapping mit kleinerem Seed::  Ein Bootstrapping, wie GNU es
                                        verdient.
* Vorbereitung zur Verwendung der Bootstrap-Binärdateien::  Das
                                                               Allerwichtigste
                                                               erstellen.


File: guix.de.info,  Node: Bootstrapping mit kleinerem Seed,  Next: Vorbereitung zur Verwendung der Bootstrap-Binärdateien,  Up: Bootstrapping

12.1 Das Bootstrapping mit kleinerem Seed
=========================================

Guix wird — wie andere GNU/Linux-Distributionen auch — traditionell aus
einer Menge von Bootstrap-Binärdateien heraus erstellt: der
Bourne-Shell, den Befehlszeilenwerkzeugen der GNU Coreutils, Awk,
Findutils, „sed“ und „grep“ sowie Guile, GCC, Binutils und der
GNU-C-Bibliothek (siehe *note Bootstrapping::). Normalerweise werden
diese Bootstrap-Binärdateien „stillschweigend vorausgesetzt“.

   Taking the bootstrap binaries for granted means that we consider them
to be a correct and trustworthy “seed” for building the complete system.
Therein lies a problem: the combined size of these bootstrap binaries is
about 250MB (*note (mes)Bootstrappable Builds::). Auditing or even
inspecting these is next to impossible.

   Für ‘i686-linux’ und ‘x86_64-linux’ unterstützt Guix jetzt ein
Bootstrapping „mit kleinerem Seed“ (1).

   The Reduced Binary Seed bootstrap removes the most critical
tools—from a trust perspective—from the bootstrap binaries: GCC,
Binutils and the GNU C Library are replaced by: ‘bootstrap-mescc-tools’
(a tiny assembler and linker) and ‘bootstrap-mes’ (a small Scheme
Interpreter and a C compiler written in Scheme and the Mes C Library,
built for TinyCC and for GCC).

   Using these new binary seeds the “missing” Binutils, GCC, and the GNU
C Library are built from source. From here on the more traditional
bootstrap process resumes. This approach has reduced the bootstrap
binaries in size to about 145MB in Guix v1.1.

   The next step that Guix has taken is to replace the shell and all its
utilities with implementations in Guile Scheme, the _Scheme-only
bootstrap_. Gash (*note (gash)Gash::) is a POSIX-compatible shell that
replaces Bash, and it comes with Gash Utils which has minimalist
replacements for Awk, the GNU Core Utilities, Grep, Gzip, Sed, and Tar.
The rest of the bootstrap binary seeds that were removed are now built
from source.

   Building the GNU System from source is currently only possibly by
adding some historical GNU packages as intermediate steps(2). As Gash
and Gash Utils mature, and GNU packages become more bootstrappable again
(e.g., new releases of GNU Sed will also ship as gzipped tarballs again,
as alternative to the hard to bootstrap ‘xz’-compression), this set of
added packages can hopefully be reduced again.

   The graph below shows the resulting dependency graph for
‘gcc-core-mesboot0’, the bootstrap compiler used for the traditional
bootstrap of the rest of the Guix System.

[Dependency graph of
gcc-core-mesboot0]
   The only significant binary bootstrap seeds that remain(3) are a
Scheme intepreter and a Scheme compiler: GNU Mes and GNU Guile(4).

   This further reduction has brought down the size of the binary seed
to about 60MB for ‘i686-linux’ and ‘x86_64-linux’.

   Work is ongoing to remove all binary blobs from our free software
bootstrap stack, working towards a Full Source Bootstrap. Also ongoing
is work to bring these bootstraps to the ‘arm-linux’ and ‘aarch64-linux’
architectures and to the Hurd.

   If you are interested, join us on ‘#bootstrappable’ on the Freenode
IRC network or discuss on <bug-mes@gnu.org> or <gash-devel@nongnu.org>.

   ---------- Footnotes ----------

   (1) Gerne würden wir „Bootstrapping aus dem Quellcode allein“ sagen
und wir arbeiten auch daran, aber das schon jetzt zu sagen, wäre eine
Übertreibung.

   (2) Packages such as ‘gcc-2.95.3’, ‘binutils-2.14’, ‘glibc-2.2.5’,
‘gzip-1.2.4’, ‘tar-1.22’, and some others. For details, see
‘gnu/packages/commencement.scm’.

   (3) Ignoring the 68KB ‘mescc-tools’; that will be removed later,
together with ‘mes’.

   (4) Not shown in this graph are the static binaries for ‘bash’,
‘tar’, and ‘xz’ that are used to get Guile running.


File: guix.de.info,  Node: Vorbereitung zur Verwendung der Bootstrap-Binärdateien,  Prev: Bootstrapping mit kleinerem Seed,  Up: Bootstrapping

12.2 Vorbereitung zur Verwendung der Bootstrap-Binärdateien
===========================================================

[Abhängigkeitsgraph der frühen
Bootstrap-Ableitungen]
Die Abbildung oben zeigt den Anfang des Abhängigkeitsgraphen der
Distribution und entspricht den Paketdefinitionen im ‘(gnu package
bootstrap)’-Modul. Eine ähnliche Grafik kann mit ‘guix graph’ (siehe
*note Aufruf von guix graph::) erzeugt werden:

     guix graph -t derivation \
       -e '(@@ (gnu packages bootstrap) %bootstrap-gcc)' \
       | dot -Tps > gcc.ps

   or, for the further Reduced Binary Seed bootstrap

     guix graph -t derivation \
       -e '(@@ (gnu packages bootstrap) %bootstrap-mes)' \
       | dot -Tps > mes.ps

   Bei diesem Detaillierungsgrad sind die Dinge recht komplex. Guile
selbst besteht aus einer ausführbaren ELF-Datei neben vielen
Quelldateien und kompilierten Scheme-Dateien, die dynamisch bei der
Ausführung geladen werden. Das wird in dem im Graph gezeigten
‘guile-2.0.7.tar.xz’-Archiv gespeichert. Das Archiv ist Teil von Guix’
„Quelldistribution“ und wird in den Store mit ‘add-to-store’ (siehe
*note Der Store::) eingefügt.

   Doch wie schreibt man eine Ableitung, die dieses Tarball-Archiv
entpackt und in den Store einfügt? Um dieses Problem zu lösen, benutzt
die ‘guile-bootstrap-2.0.drv’-Ableitung — die erste, die erstellt wird —
‘bash’ als Ersteller, welche wiederum ‘build-bootstrap-guile.sh’
ausführt, was über einen Aufruf von ‘tar’ den Tarball entpackt. Deswegen
sind ‘bash’, ‘tar’, ‘xz’ und ‘mkdir’ als statisch gebundene Binärdateien
auch Teil der Guix-Quelldistribution, die nur dazu da sind, dass der
Guile-Tarball entpackt werden kann.

   Once ‘guile-bootstrap-2.0.drv’ is built, we have a functioning Guile
that can be used to run subsequent build programs. Its first task is to
download tarballs containing the other pre-built binaries—this is what
the ‘.tar.xz.drv’ derivations do. Guix modules such as ‘ftp-client.scm’
are used for this purpose. The ‘module-import.drv’ derivations import
those modules in a directory in the store, using the original layout.
The ‘module-import-compiled.drv’ derivations compile those modules, and
write them in an output directory with the right layout. This
corresponds to the ‘#:modules’ argument of
‘build-expression->derivation’ (*note Ableitungen::).

   Schließlich werden die verschiedenen Tarballs durch die Ableitungen
‘gcc-bootstrap-0.drv’, ‘glibc-bootstrap-0.drv’, oder
‘bootstrap-mes-0.drv’ und ‘bootstrap-mescc-tools-0.drv’, entpackt. Zu
diesem Zeitpunkt haben wir eine fertige Toolchain für C.

Die Erstellungswerkzeuge erstellen
==================================

Das Bootstrapping ist abgeschlossen, sobald eine vollständige Toolchain
vorliegt, die von den oben erläuterten vorerstellten
Bootstrapping-Werkzeugen _nicht_ abhängt. Diese Voraussetzung, keine
Abhängigkeiten zu haben, überprüft man, indem man schaut, ob die Dateien
der endgültigen Toolchain frei von Referenzen auf die
‘/gnu/store’-Verzeichnisse der Bootstrapping-Eingaben sind. Der Vorgang,
diese „finale“ Toolchain zu bekommen, wird von den Paketdefinitionen
beschrieben, die Sie im Modul ‘(gnu packages commencement)’ finden.

   Mit dem Befehl ‘guix graph’ können wir gegenüber dem obigen Graphen
„herauszoomen“, indem wir alles auf der Ebene von Paketobjekten statt
auf der von einzelnen Ableitungen betrachten — denken Sie daran, dass
ein Paket zu mehreren Ableitungen führen kann; normalerweise einer, die
seine Quelldateien herunterlädt, einer, die die benötigten Guile-Module
erstellt, und einer, die das Paket dann tatsächlich aus seinem Quellcode
heraus erstellt. Der Befehl

     guix graph -t bag \
       -e '(@@ (gnu packages commencement)
               glibc-final-with-bootstrap-bash)' | xdot -

displays the dependency graph leading to the “final” C library(1),
depicted below.

[Abhängigkeitsgraph der frühen Pakete]
   Das erste Werkzeug, das mit den Bootstrapping-Binärdateien erstellt
wird, ist GNU Make — beachten Sie das oben sichtbare ‘make-boot0’ —, das
eine Voraussetzung aller folgenden Pakete ist. Von da aus werden
Findutils und Diffutils erstellt.

   Then come the first-stage Binutils and GCC, built as pseudo cross
tools—i.e., with ‘--target’ equal to ‘--host’. They are used to build
libc. Thanks to this cross-build trick, this libc is guaranteed not to
hold any reference to the initial tool chain.

   From there the final Binutils and GCC (not shown above) are built.
GCC uses ‘ld’ from the final Binutils, and links programs against the
just-built libc. This tool chain is used to build the other packages
used by Guix and by the GNU Build System: Guile, Bash, Coreutils, etc.

   Und voilà! Wenn das geschafft ist, haben wir die vollständige Menge
von Erstellungswerkzeugen, die das GNU-Erstellungssystem erwartet. Sie
sind in der Variablen ‘%final-inputs’ des Moduls ‘(gnu packages
commencement)’ zu finden und werden von jedem Paket implizit benutzt,
das das ‘gnu-build-system’ verwendet (siehe *note ‘gnu-build-system’:
Erstellungssysteme.).

Die Bootstrapping-Binärdateien erstellen
========================================

Weil die finale Toolchain nicht von den Bootstrapping-Binärdateien
abhängt, müssen diese nur selten aktualisiert werden. Es ist dennoch
sinnvoll, sie automatisiert erzeugen zu können, wenn sie doch
aktualisiert werden. Das Modul ‘(gnu packages make-bootstrap)’
ermöglicht dies.

   Mit dem folgenden Befehl werden die Tarball-Archive erstellt, die die
Bootstrapping-Binärdateien enthalten (beim traditionellen Bootstrapping
sind das Binutils, GCC und glibc; beim Bootstrapping mit kleinerem Seed
sind es linux-libre-headers, bootstrap-mescc-tools, bootstrap-mes; dazu
kommen Guile sowie ein Tarball mit einer Mischung aus Coreutils und
anderen grundlegenden Befehlszeilenwerkzeugen):

     guix build bootstrap-tarballs

   Die erzeugten Tarballs sind es, auf die im Modul ‘(gnu packages
bootstrap)’ verwiesen werden sollte, das am Anfang dieses Abschnitts
erwähnt wurde.

   Können Sie noch folgen? Dann haben Sie vielleicht schon angefangen,
sich zu fragen, wann wir denn einen Fixpunkt erreichen. Das ist eine
interessante Frage! Leider wissen wir es nicht, aber wenn Sie es
herausfinden wollen (und Ihnen die nennenswerten Rechen- und
Speicherkapazitäten dafür zur Verfügung stehen), dann lassen Sie es uns
wissen.

Die Menge an Bootstrapping-Binärdateien verkleinern
===================================================

Zu unserem traditionellen Bootstrapping gehören GCC, GNU Libc, Guile,
etc. Das ist ganz schön viel binärer Code! Warum ist das ein Problem? Es
ist deswegen ein Problem, weil es praktisch unmöglich ist, solch große
Klumpen binären Codes einem Audit zu unterziehen. Dadurch wird es
schwer, nachzuvollziehen, welcher Quellcode ihn erzeugt hat. Jede
ausführbare Binärdatei, für die kein Audit möglich ist, macht uns
verwundbar gegenüber Hintertüren in Compilern, wie Ken Thompson sie in
seiner Arbeit von 1984, _Reflections on Trusting Trust_, beschrieben
hat.

   Wir senken das Risiko, indem wir unsere Bootstrapping-Binärdateien
immer mit einer früheren Guix-Version erzeugen. Trotzdem fehlt uns das
Niveau an Transparenz, das wir am übrigen Paketabhängigkeitsgraphen
wertschätzen, wo Guix immer vom Quellcode eindeutig auf die Binärdateien
abbildet. Unser Ziel ist also, die Menge an Bootstrapping-Binärdateien
so weit wie möglich zu verkleinern.

   Auf dem Webauftritt von Bootstrappable.org
(https://bootstrappable.org) werden laufende Projekte mit diesem Zweck
aufgeführt. Bei einem davon geht es darum, den Bootstrapping-GCC durch
eine Folge von Assemblern, Interpretierern und Compilern zunehmender
Komplexität zu ersetzen, die von Anfang an aus Quellcode heraus erstellt
werden kann, angefangen bei einem einfachen, überprüfbaren Assembler.

   Unsere erste große Leistung stellt die Ersetzung von GCC, der
GNU-C-Bibliothek und der Binutils durch die MesCC-Tools (einem einfachen
Binder für hexadezimal dargestellte Maschinenprogramme und einem
Makro-Assembler) und Mes dar (siehe *note GNU Mes Reference Manual:
(mes)Top, einem Scheme-Interpretierer und in Scheme geschriebenen
C-Compiler). Weder MesCC-Tools noch Mes können bereits von Grund auf
gebootstrapt werden, daher schleusen wir sie als binäre Seeds ein. Wir
nennen das unser Bootstrapping mit kleinerem Seed, weil es die Größe
unserer Bootstrapping-Binärdateien halbiert hat! Außerdem haben wir
damit keinerlei Binärdatei für einen C-Compiler; auf i686-linux und
x86_64-linux werden Guix-Pakete ganz ohne binären C-Compiler
gebootstrapt.

   Wir arbeiten daran, MesCC-Tools und Mes vollständig bootstrappen zu
können, und behalten auch andere Bootstrapping-Binärdateien im Blick.
Ihre Unterstützung ist willkommen!

   ---------- Footnotes ----------

   (1) You may notice the ‘glibc-intermediate’ label, suggesting that it
is not _quite_ final, but as a good approximation, we will consider it
final.


File: guix.de.info,  Node: Portierung,  Next: Mitwirken,  Prev: Bootstrapping,  Up: Top

13 Auf eine neue Plattform portieren
************************************

Wie oben beschrieben ist die GNU-Distribution eigenständig und diese
Eigenständigkeit wird erreicht, indem sie aus vorerstellten
„Bootstrap-Binärdateien“ heraus erstellt werden kann (siehe *note
Bootstrapping::). Diese Binärdateien unterscheiden sich je nach
verwendetem Betriebssystem-Kernel, nach der Prozessorarchitektur und der
Anwendungsbinärschnittstelle („Application Binary Interface“, kurz ABI).
Um die Distribution also auf eine noch nicht unterstützte Plattform zu
portieren, muss man diese Bootstrap-Binärdateien für diese Plattform
erstellen und das Modul ‘(gnu packages bootstrap)’ aktualisieren, damit
es sie benutzt.

   Zum Glück kann Guix diese Bootstrap-Binärdateien _cross-kompilieren_.
Wenn alles gut geht, und vorausgesetzt, die GNU-Werkzeuge (zusammen
werden sie als GNU-„Toolchain“ bezeichnet) unterstützen diese
Zielplattform auch, dann kann es völlig ausreichen, dass Sie einen
Befehl wie hier ausführen:

     guix build --target=armv5tel-linux-gnueabi bootstrap-tarballs

   Damit das funktioniert, muss erst die ‘glibc-dynamic-linker’-Prozedur
in ‘(gnu packages bootstrap)’ angepasst werden, damit sie den richtigen
Dateinamen für den dynamischen Binder von libc auf dieser Plattform
liefert; ebenso muss ‘system->linux-architecture’ in ‘(gnu packages
linux)’ mit den Informationen über die neue Plattform versorgt werden.

   Sobald diese erstellt wurden, muss das Modul ‘(gnu packages
bootstrap)’ aktualisiert werden, damit es diese Binärdateien für die
Zielplattform benutzt. Das heißt, die Hashes und URLs der
Bootstrap-Tarballs für die neue Plattform müssen neben denen für die
bisher unterstützten Plattformen aufgeführt werden. Der
Bootstrap-Guile-Tarball wird besonders behandelt: Von ihm wird erwartet,
dass er lokal verfügbar ist, und ‘gnu/local.mk’ enthält Regeln, um ihn
für die unterstützten Architekturen herunterzuladen; eine Regel muss
auch für die neue Plattform hinzugefügt werden.

   In practice, there may be some complications. First, it may be that
the extended GNU triplet that specifies an ABI (like the ‘eabi’ suffix
above) is not recognized by all the GNU tools. Typically, glibc
recognizes some of these, whereas GCC uses an extra ‘--with-abi’
configure flag (see ‘gcc.scm’ for examples of how to handle this).
Second, some of the required packages could fail to build for that
platform. Lastly, the generated binaries could be broken for some
reason.


File: guix.de.info,  Node: Mitwirken,  Next: Danksagungen,  Prev: Portierung,  Up: Top

14 Mitwirken
************

Dieses Projekt basiert auf Kooperation, daher benötigen wir Ihre Hilfe,
um es wachsen zu lassen! Bitte kontaktieren Sie uns auf
<guix-devel@gnu.org> und ‘#guix’ im Freenode-IRC-Netzwerk. Wir freuen
uns auf Ihre Ideen, Fehlerberichte, Patches und alles, was hilfreich für
das Projekt sein könnte. Besonders willkommen ist Hilfe bei der
Erstellung von Paketen (siehe *note Paketrichtlinien::).

   Wir möchten eine angenehme, freundliche und von Belästigungen freie
Umgebung bereitstellen, so dass jeder Beiträge nach seinen Fähigkeiten
leisten kann. Zu diesem Zweck verwendet unser Projekt einen
„Verhaltenskodex für Mitwirkende“, der von
<https://contributor-covenant.org/> übernommen wurde. Eine übersetzte
Fassung finden Sie auf
<https://www.contributor-covenant.org/de/version/1/4/code-of-conduct>
sowie eine mitgelieferte, englische Fassung in der Datei
‘CODE-OF-CONDUCT’ im Quellbaum.

   Von Mitwirkenden wird nicht erwartet, dass sie in Patches oder in der
Online-Kommunikation ihre echten Namen preisgeben. Sie können einen
beliebigen Namen oder ein Pseudonym ihrer Wahl verwenden.

* Menu:

* Erstellung aus dem Git::   Das Neueste und Beste.
* Guix vor der Installation ausführen::  Hacker-Tricks.
* Perfekt eingerichtet::     Die richtigen Werkzeuge.
* Paketrichtlinien::         Die Distribution wachsen lassen.
* Programmierstil::          Wie Mitwirkende hygienisch arbeiten.
* Einreichen von Patches::   Teilen Sie Ihre Arbeit.
* Überblick über gemeldete Fehler und Patches::  Debbugs benutzen.
* Commit-Zugriff::           Auf die offiziellen Repositorys pushen.


File: guix.de.info,  Node: Erstellung aus dem Git,  Next: Guix vor der Installation ausführen,  Up: Mitwirken

14.1 Erstellung aus dem Git
===========================

Wenn Sie an Guix selbst hacken wollen, ist es empfehlenswert, dass Sie
die neueste Version aus dem Git-Softwarebestand verwenden:

     git clone https://git.savannah.gnu.org/git/guix.git

   Wie stellen Sie sicher, dass Sie eine echte Kopie des Repositorys
heruntergeladen haben? Guix liefert ein Werkzeug mit, mit dem Sie Ihr
Checkout “authentifizieren” können, aber Sie müssen vorher
sicherstellen, dass dieses Werkzeug überhaupt echt ist, wenn Sie Ihre
Vertrauenskette („Trust Chain“) bootstrappen wollen. Führen Sie dazu
dies aus:

     git verify-commit `git log --format=%H build-aux/git-authenticate.scm`

   Die Ausgabe sollte etwa so aussehen:

     gpg: Signatur vom Fr 27 Dez 2019 13:27:41 CET
     gpg:                mittels RSA-Schlüssel 3CE464558A84FDC69DB40CFB090B11993D9AEBB5
     …
     gpg: Signatur vom Fr 27 Dez 2019 13:25:22 CET
     gpg:                mittels RSA-Schlüssel 3CE464558A84FDC69DB40CFB090B11993D9AEBB5
     …

Das bedeutet, dass Änderungen an dieser Datei alle mit dem Schlüssel
‘3CE464558A84FDC69DB40CFB090B11993D9AEBB5’ signiert wurden (eventuell
müssen Sie diesen Schlüssel erst von einem Server beziehen, wenn Sie es
noch nicht getan haben).

   Von da an können Sie alle Commits in Ihrem Checkout authentifizieren,
indem Sie dies ausführen:

     make authenticate

   Die erste Ausführung dauert ein paar Minuten, aber nachfolgende
Ausführungen gehen schneller.

     Anmerkung: Wir raten Ihnen dazu, nach jedem Aufruf von ‘git pull’
     auch ‘make authenticate’ auszuführen. Das stellt sicher, dass Sie
     weiterhin nur gültige Änderungen in Ihr Repository übernehmen.

   Der einfachste Weg, eine Entwicklungsumgebung für Guix einzurichten,
ist natürlich, Guix zu benutzen! Der folgende Befehl startet eine neue
Shell, in der alle Abhängigkeiten und Umgebungsvariablen bereits
eingerichtet sind, um an Guix zu arbeiten:

     guix environment guix --pure

   Siehe *note Aufruf von guix environment:: für weitere Informationen
zu diesem Befehl.

   Wenn Sie Guix nicht benutzen können, wenn Sie es aus einem Checkout
erstellen, werden die folgenden Pakete zusätzlich zu denen benötigt, die
in den Installationsanweisungen angegeben sind (siehe *note
Voraussetzungen::).

   • GNU Autoconf (https://gnu.org/software/autoconf/),
   • GNU Automake (https://gnu.org/software/automake/),
   • GNU Gettext (https://gnu.org/software/gettext/),
   • GNU Texinfo (https://gnu.org/software/texinfo/),
   • Graphviz (https://www.graphviz.org/),
   • GNU Help2man (optional) (https://www.gnu.org/software/help2man/).

   Auf Guix können zusätzliche Abhängigkeiten hinzugefügt werden, indem
Sie stattdessen ‘guix environment’ mit ‘--ad-hoc’ ausführen:

     guix environment guix --pure --ad-hoc help2man git strace

   Führen Sie ‘./bootstrap’ aus, um die Infrastruktur des
Erstellungssystems mit Autoconf und Automake zu erzeugen. Möglicherweise
erhalten Sie eine Fehlermeldung wie diese:

     configure.ac:46: error: possibly undefined macro: PKG_CHECK_MODULES

Das bedeutet wahrscheinlich, dass Autoconf ‘pkg.m4’ nicht finden konnte,
welches von pkg-config bereitgestellt wird. Stellen Sie sicher, dass
‘pkg.m4’ verfügbar ist. Gleiches gilt für den von Guile bereitgestellten
Makrosatz ‘guile.m4’. Wenn Sie beispielsweise Automake in ‘/usr/local’
installiert haben, würde in ‘/usr/share’ nicht nach ‘.m4’-Dateien
geschaut. In einem solchen Fall müssen Sie folgenden Befehl aufrufen:

     export ACLOCAL_PATH=/usr/share/aclocal

   In *note (automake)Macro Search Path:: finden Sie weitere
Informationen.

   Dann führen Sie wie gewohnt ‘./configure’ aus. Achten Sie darauf,
‘--localstatedir=VERZEICHNIS’ zu übergeben, wobei VERZEICHNIS der von
Ihrer aktuellen Installation verwendete ‘localstatedir’-Wert ist
(weitere Informationen siehe *note Der Store::). Unsere Empfehlung ist,
dass Sie als Wert immer ‘/var’ verwenden.

   Zum Schluss müssen Sie ‘make check’ aufrufen, um die Tests
auszuführen (siehe *note Den Testkatalog laufen lassen::). Falls etwas
fehlschlägt, werfen Sie einen Blick auf die Installationsanweisungen
(siehe *note Installation::) oder senden Sie eine E-Mail an die
Mailingliste <guix-devel@gnu.org>.


File: guix.de.info,  Node: Guix vor der Installation ausführen,  Next: Perfekt eingerichtet,  Prev: Erstellung aus dem Git,  Up: Mitwirken

14.2 Guix vor der Installation ausführen
========================================

Um eine gesunde Arbeitsumgebung zu erhalten, ist es hilfreich, die im
lokalen Quellbaum vorgenommenen Änderungen zunächst zu testen, ohne sie
tatsächlich zu installieren. So können Sie zwischen Ihrem
Endnutzer-„Straßenanzug“ und Ihrem „Faschingskostüm“ unterscheiden.

   Zu diesem Zweck können alle Befehlszeilenwerkzeuge auch schon benutzt
werden, ohne dass Sie ‘make install’ laufen lassen. Dazu müssen Sie sich
in einer Umgebung befinden, in der alle Abhängigkeiten von Guix
verfügbar sind (siehe *note Erstellung aus dem Git::) und darin einfach
vor jeden Befehl ‘./pre-inst-env’ schreiben (das Skript ‘pre-inst-env’
befindet sich auf oberster Ebene im Verzeichnis, wo Guix erstellt wird,
wo es durch ‘./configure’ erzeugt wird). Zum Beispiel so(1):

     $ sudo -E ./pre-inst-env guix-daemon --build-users-group=guixbuild
     $ ./pre-inst-env guix build hello

Entsprechend würden Sie dies eingeben, um eine Guile-Sitzung zu öffnen,
die die Guix-Module benutzt:

     $ ./pre-inst-env guile -c '(use-modules (guix utils)) (pk (%current-system))'

     ;;; ("x86_64-linux")

… und auf einer REPL (siehe *note (guile)Using Guile Interactively::):

     $ ./pre-inst-env guile
     scheme@(guile-user)> ,use(guix)
     scheme@(guile-user)> ,use(gnu)
     scheme@(guile-user)> (define snakes
                            (fold-packages
                              (lambda (package lst)
                                (if (string-prefix? "python"
                                                    (package-name package))
                                    (cons package lst)
                                    lst))
                              '()))
     scheme@(guile-user)> (length snakes)
     $1 = 361

   Das ‘pre-inst-env’-Skript richtet alle Umgebungsvariablen ein, die
nötig sind, um dies zu ermöglichen, einschließlich ‘PATH’ und
‘GUILE_LOAD_PATH’.

   Beachten Sie, dass ‘./pre-inst-env guix pull’ den lokalen Quellbaum
_nicht_ aktualisiert; es aktualisiert lediglich die symbolische
Verknüpfung ‘~/.config/guix/current’ (siehe *note Aufruf von guix
pull::). Um Ihren lokalen Quellbaum zu aktualisieren, müssen Sie
stattdessen ‘git pull’ benutzen.

   ---------- Footnotes ----------

   (1) Die Befehlszeilenoption ‘-E’ von ‘sudo’ stellt sicher, dass
‘GUILE_LOAD_PATH’ richtig gesetzt wird, damit ‘guix-daemon’ und die
davon benutzten Werkzeuge die von ihnen benötigten Guile-Module finden
können.


File: guix.de.info,  Node: Perfekt eingerichtet,  Next: Paketrichtlinien,  Prev: Guix vor der Installation ausführen,  Up: Mitwirken

14.3 Perfekt eingerichtet
=========================

Um perfekt für das Hacken an Guix eingerichtet zu sein, brauchen Sie an
sich dasselbe wie um perfekt für das Hacken mit Guile (siehe *note
(guile)Using Guile in Emacs::). Zunächst brauchen Sie mehr als ein
Textverarbeitungsprogramm, Sie brauchen Emacs
(https://www.gnu.org/software/emacs) zusammen mit den vom wunderbaren
Geiser (https://nongnu.org/geiser/) verliehenen Kräften. Um diese zu
installieren, können Sie Folgendes ausführen:

     guix package -i emacs guile emacs-geiser

   Geiser ermöglicht interaktive und inkrementelle Entwicklung aus Emacs
heraus: Code kann in Puffern kompiliert und ausgewertet werden. Zugang
zu Online-Dokumentation (Docstrings) steht ebenso zur Verfügung wie
kontextabhängige Vervollständigung, ‘M-.’ um zu einer Objektdefinition
zu springen, eine REPL, um Ihren Code auszuprobieren, und mehr (siehe
*note (geiser)Einführung::). Zur bequemen Guix-Entwicklung sollten Sie
Guiles Ladepfad so ergänzen, dass die Quelldateien in Ihrem Checkout
gefunden werden.

     ;; Angenommen das Guix-Checkout ist in ~/src/guix.
     (with-eval-after-load 'geiser-guile
       (add-to-list 'geiser-guile-load-path "~/src/guix"))

   Um den Code tatsächlich zu bearbeiten, bietet Emacs schon einen
netten Scheme-Modus. Aber Sie dürfen auch Paredit
(https://www.emacswiki.org/emacs/ParEdit) nicht verpassen. Es bietet
Hilfsmittel, um direkt mit dem Syntaxbaum zu arbeiten, und kann so zum
Beispiel einen S-Ausdruck hochheben oder ihn umhüllen, ihn verschlucken
oder den nachfolgenden S-Ausdruck verwerfen, etc.

   Wir bieten auch Vorlagen für häufige Git-Commit-Nachrichten und
Paketdefinitionen im Verzeichnis ‘etc/snippets’. Diese Vorlagen können
mit YASnippet (https://joaotavora.github.io/yasnippet/) zusammen benutzt
werden, um kurze Auslöse-Zeichenketten zu interaktiven Textschnipseln
umzuschreiben. Vielleicht möchten Sie das Schnipselverzeichnis zu Ihrer
YAS-SNIPPET-DIRS-Variablen in Emacs hinzufügen.

     ;; Angenommen das Guix-Checkout ist in ~/src/guix.
     (with-eval-after-load 'yasnippet
       (add-to-list 'yas-snippet-dirs "~/src/guix/etc/snippets"))

   Die Schnipsel für Commit-Nachrichten setzen Magit (https://magit.vc/)
voraus, um zum Commit vorgemerkte Dateien anzuzeigen. Wenn Sie eine
Commit-Nachricht bearbeiten, können Sie ‘add’ gefolgt von ‘TAB’
eintippen, um eine Commit-Nachrichten-Vorlage für das Hinzufügen eines
Pakets zu erhalten; tippen Sie ‘update’ gefolgt von ‘TAB’ ein, um eine
Vorlage zum Aktualisieren eines Pakets zu bekommen; tippen Sie ‘https’
gefolgt von ‘TAB’ ein, um eine Vorlage zum Ändern der Homepage-URI eines
Pakets auf HTTPS einzufügen.

   Das Hauptschnipsel für ‘scheme-mode’ wird ausgelöst, indem Sie
‘package...’ gefolgt von ‘TAB’ eintippen. Dieses Snippet fügt auch die
Auslöse-Zeichenkette ‘origin...’ ein, die danach weiter umgeschrieben
werden kann. Das ‘origin’-Schnipsel kann wiederum andere
Auslöse-Zeichenketten einfügen, die alle auf ‘...’ enden, was selbst
wieder weiter umgeschrieben werden kann.

   Außerden stellen wir automatisches Einfügen und Aktualisieren von
Urheberrechtsinformationen („Copyright“) über ‘etc/copyright.el’ zur
Verfügung. Dazu müssten Sie Ihren vollständigen Namen mit E-Mail-Adresse
festlegen und eine Datei laden.

     (setq user-full-name "Alice Doe")
     (setq user-mail-address "alice@mail.org")
     ;; Assuming the Guix checkout is in ~/src/guix.
     (load-file "~/src/guix/etc/copyright.el")

   Um an der aktuellen Zeile Copyright-Informationen einzufügen, rufen
Sie ‘M-x guix-copyright’ auf.

   Um Copyright-Informationen aktualisieren zu können, müssen Sie einen
regulären Ausdruck ‘copyright-names-regexp’ angeben.

     (setq copyright-names-regexp
           (format "%s <%s>" user-full-name user-mail-address))

   Sie können prüfen, ob Ihre Urheberrechtsinformationen aktuell sind,
indem Sie ‘M-x copyright-update’ auswerten. Wenn Sie möchten, dass dies
automatisch nach jedem Speichern des Puffers geschieht, fügen Sie
‘(add-hook 'after-save-hook 'copyright-update)’ in Emacs hinzu.


File: guix.de.info,  Node: Paketrichtlinien,  Next: Programmierstil,  Prev: Perfekt eingerichtet,  Up: Mitwirken

14.4 Paketrichtlinien
=====================

Die GNU-Distribution ist noch sehr jung und einige Ihrer Lieblingspakete
könnten noch fehlen. Dieser Abschnitt beschreibt, wie Sie dabei helfen
können, die Distribution wachsen zu lassen.

   Pakete mit freier Software werden normalerweise in Form von “Tarballs
mit dem Quellcode” angeboten — typischerweise in ‘tar.gz’-Archivdateien,
in denen alle Quelldateien enthalten sind. Ein Paket zur Distribution
hinzuzufügen, bedeutet also zweierlei Dinge: Zum einen fügt man ein
“Rezept” ein, das beschreibt, wie das Paket erstellt werden kann,
einschließlich einer Liste von anderen Paketen, die für diese Erstellung
gebraucht werden, zum anderen fügt man “Paketmetadaten” zum Rezept
hinzu, wie zum Beispiel eine Beschreibung und Lizenzinformationen.

   In Guix sind all diese Informationen ein Teil der
“Paketdefinitionen”. In Paketdefinitionen hat man eine abstrahierte,
hochsprachliche Sicht auf das Paket. Sie werden in der Syntax der
Scheme-Programmiersprache verfasst; tatsächlich definieren wir für jedes
Paket eine Variable und binden diese an dessen Definition, um die
Variable anschließend aus einem Modul heraus zu exportieren (siehe *note
Paketmodule::). Allerdings ist _kein_ tiefgehendes Wissen über Scheme
erforderlich, um Pakete zu erstellen. Mehr Informationen über
Paketdefinitionen finden Sie im Abschnitt *note Pakete definieren::.

   Eine fertige Paketdefinition kann, nachdem sie in eine Datei im
Quell-Verzeichnisbaum von Guix eingesetzt wurde, mit Hilfe des Befehls
‘guix build’ getestet werden (siehe *note Aufruf von guix build::). Wenn
das Paket zum Beispiel den Namen ‘gnew’ trägt, können Sie folgenden
Befehl aus dem Erstellungs-Verzeichnisbaum von Guix heraus ausführen
(siehe *note Guix vor der Installation ausführen::):

     ./pre-inst-env guix build gnew --keep-failed

   Wenn Sie ‘--keep-failed’ benutzen, ist es leichter, fehlgeschlagene
Erstellungen zu untersuchen, weil dann der Verzeichnisbaum der
fehlgeschlagenen Erstellung zugänglich bleibt. Eine andere nützliche
Befehlszeilenoption bei der Fehlersuche ist ‘--log-file’, womit das
Erstellungsprotokoll eingesehen werden kann.

   Wenn der ‘guix’-Befehl das Paket nicht erkennt, kann es daran liegen,
dass die Quelldatei einen Syntaxfehler hat oder ihr eine
‘define-public’-Klausel fehlt, die die Paketvariable exportiert. Um das
herauszufinden, können Sie das Modul aus Guile heraus laden, um mehr
Informationen über den tatsächlichen Fehler zu bekommen:

     ./pre-inst-env guile -c '(use-modules (gnu packages gnew))'

   Sobald Ihr Paket erfolgreich erstellt werden kann, schicken Sie uns
bitte einen Patch (siehe *note Einreichen von Patches::). Wenn Sie dabei
Hilfe brauchen sollten, helfen wir gerne. Ab dem Zeitpunkt, zu dem der
Patch als Commit ins Guix-Repository eingepflegt wurde, wird das neue
Paket automatisch durch unser System zur Kontinuierlichen Integration
(ci.guix.gnu.org) auf allen unterstützten Plattformen erstellt.

   Benutzern steht die neue Paketdefinition zur Verfügung, nachdem sie
das nächste Mal ‘guix pull’ ausgeführt haben (siehe *note Aufruf von
guix pull::). Wenn ‘ci.guix.gnu.org’ selbst damit fertig ist, das Paket
zu erstellen, werden bei der Installation automatisch Binärdateien von
dort heruntergeladen (siehe *note Substitute::). Menschliches Eingreifen
muss nur stattfinden, um den Patch zu überprüfen und anzuwenden.

* Menu:

* Software-Freiheit::        Was in die Distribution aufgenommen werden
                               darf.
* Paketbenennung::           Was macht einen Namen aus?
* Versionsnummern::          Wenn der Name noch nicht genug ist.
* Zusammenfassungen und Beschreibungen::  Den Nutzern helfen, das richtige
                                            Paket zu finden.
* Python-Module::            Ein Touch britischer Comedy.
* Perl-Module::              Kleine Perlen.
* Java-Pakete::              Kaffeepause.
* Rust-Crates::              Umgang mit Oxidation.
* Schriftarten::             Schriften verschriftlicht.


File: guix.de.info,  Node: Software-Freiheit,  Next: Paketbenennung,  Up: Paketrichtlinien

14.4.1 Software-Freiheit
------------------------

Das GNU-Betriebssystem wurde entwickelt, um Menschen Freiheit zu
ermöglichen, wie sie ihre Rechengeräte benutzen. GNU ist “freie
Software”, was bedeutet, dass Benutzer die vier wesentlichen Freiheiten
(https://www.gnu.org/philosophy/free-sw.de.html) haben: das Programm
auszuführen, es zu untersuchen, das Programm in Form seines Quellcodes
anzupassen und exakte Kopien ebenso wie modifizierte Versionen davon an
andere weiterzugeben. Die Pakete, die Sie in der GNU-Distribution
finden, stellen ausschließlich solche Software zur Verfügung, die Ihnen
diese vier Freiheiten gewährt.

   Außerdem befolgt die GNU-Distribution die Richtlinien für freie
Systemverteilungen
(https://www.gnu.org/distros/free-system-distribution-guidelines.de.html).
Unter anderem werden unfreie Firmware sowie Empfehlungen von unfreier
Software abgelehnt und Möglichkeiten zum Umgang mit Markenzeichen und
Patenten werden diskutiert.

   Ansonsten freier Paketquellcode von manchen Anbietern enthält einen
kleinen und optionalen Teil, der diese Richtlinien verletzt. Zum
Beispiel kann dieser Teil selbst unfreier Code sein. Wenn das vorkommt,
wird der sie verletzende Teil mit angemessenen Patches oder
Code-Schnipseln innerhalb der ‘origin’-Form des Pakets entfernt (siehe
*note Pakete definieren::). Dadurch liefert Ihnen ‘guix build --source’
nur den „befreiten“ Quellcode und nicht den unmodifizierten Quellcode
des Anbieters.


File: guix.de.info,  Node: Paketbenennung,  Next: Versionsnummern,  Prev: Software-Freiheit,  Up: Paketrichtlinien

14.4.2 Paketbenennung
---------------------

Tatsächlich sind mit jedem Paket zwei Namen assoziiert: Zum einen gibt
es den Namen der _Scheme-Variablen_, der direkt nach ‘define-public’ im
Code steht. Mit diesem Namen kann das Paket im Scheme-Code nutzbar
gemacht und zum Beispiel als Eingabe eines anderen Pakets benannt
werden. Zum anderen gibt es die Zeichenkette im ‘name’-Feld einer
Paketdefinition. Dieser Name wird von Paketverwaltungsbefehlen wie ‘guix
package’ und ‘guix build’ benutzt.

   Meistens sind die beiden identisch und ergeben sich aus einer
Umwandlung des vom Anbieter verwendeten Projektnamens in
Kleinbuchstaben, bei der Unterstriche durch Bindestriche ersetzt werden.
Zum Beispiel wird GNUnet unter dem Paketnamen ‘gnunet’ angeboten und
SDL_net als ‘sdl-net’.

   An Bibliothekspakete hängen wir vorne kein ‘lib’ als Präfix an,
solange es nicht Teil des offiziellen Projektnamens ist. Beachten Sie
aber die Abschnitte *note Python-Module:: und *note Perl-Module::, in
denen Sonderregeln für Module der Programmiersprachen Python und Perl
beschrieben sind.

   Auch Pakete mit Schriftarten werden anders behandelt, siehe *note
Schriftarten::.


File: guix.de.info,  Node: Versionsnummern,  Next: Zusammenfassungen und Beschreibungen,  Prev: Paketbenennung,  Up: Paketrichtlinien

14.4.3 Versionsnummern
----------------------

Normalerweise stellen wir nur für die neueste Version eines
Freie-Software-Projekts ein Paket bereit. Manchmal gibt es allerdings
Fälle wie zum Beispiel untereinander inkompatible Bibliotheksversionen,
so dass zwei (oder mehr) Versionen desselben Pakets angeboten werden
müssen. In diesem Fall müssen wir verschiedene Scheme-Variablennamen
benutzen. Wir benutzen dann für die neueste Version den Namen, wie er im
Abschnitt *note Paketbenennung:: festgelegt wird, und geben vorherigen
Versionen denselben Namen mit einem zusätzlichen Suffix aus ‘-’ gefolgt
vom kürzesten Präfix der Versionsnummer, mit dem noch immer zwei
Versionen unterschieden werden können.

   Der Name innerhalb der Paketdefinition ist hingegen derselbe für alle
Versionen eines Pakets und enthält keine Versionsnummer.

   Zum Beispiel können für GTK in den Versionen 2.24.20 und 3.9.12
Pakete wie folgt geschrieben werden:

     (define-public gtk+
       (package
         (name "gtk+")
         (version "3.9.12")
         …))
     (define-public gtk+-2
       (package
         (name "gtk+")
         (version "2.24.20")
         …))
   Wenn wir auch GTK 3.8.2 wollten, würden wir das Paket schreiben als
     (define-public gtk+-3.8
       (package
         (name "gtk+")
         (version "3.8.2")
         …))

   Gelegentlich fügen wir auch Pakete für Snapshots aus dem
Versionskontrollsystem des Anbieters statt formaler Veröffentlichungen
zur Distribution hinzu. Das sollte die Ausnahme bleiben, weil die
Entwickler selbst klarstellen sollten, welche Version als die stabile
Veröffentlichung gelten sollte, ab und zu ist es jedoch notwendig. Was
also sollten wir dann im ‘version’-Feld eintragen?

   Offensichtlich muss der Bezeichner des Commits, den wir als Snapshot
aus dem Versionskontrollsystem nehmen, in der Versionszeichenkette zu
erkennen sein, aber wir müssen auch sicherstellen, dass die Version
monoton steigend ist, damit ‘guix package --upgrade’ feststellen kann,
welche Version die neuere ist. Weil Commit-Bezeichner, insbesondere bei
Git, nicht monoton steigen, müssen wir eine Revisionsnummer hinzufügen,
die wir jedes Mal erhöhen, wenn wir das Paket auf einen neueren Snapshot
aktualisieren. Die sich ergebende Versionszeichenkette sieht dann so
aus:

     2.0.11-3.cabba9e
       ^    ^    ^
       |    |    `-- Commit-ID beim Anbieter
       |    |
       |    `--- Revisionsnummer des Guix-Pakets
       |
     die neueste Version, die der Anbieter veröffentlicht hat

   It is a good idea to strip commit identifiers in the ‘version’ field
to, say, 7 digits. It avoids an aesthetic annoyance (assuming aesthetics
have a role to play here) as well as problems related to OS limits such
as the maximum shebang length (127 bytes for the Linux kernel). It is
best to use the full commit identifiers in ‘origin’s, though, to avoid
ambiguities. A typical package definition may look like this:

     (define mein-paket
       (let ((commit "c3f29bc928d5900971f65965feaae59e1272a3f7")
             (revision "1"))          ;Guix-Paketrevision
         (package
           (version (git-version "0.9" revision commit))
           (source (origin
                     (method git-fetch)
                     (uri (git-reference
                           (url "git://example.org/mein-paket.git")
                           (commit commit)))
                     (sha256 (base32 "1mbikn…"))
                     (file-name (git-file-name name version))))
           ;; …
           )))


File: guix.de.info,  Node: Zusammenfassungen und Beschreibungen,  Next: Python-Module,  Prev: Versionsnummern,  Up: Paketrichtlinien

14.4.4 Zusammenfassungen und Beschreibungen
-------------------------------------------

Wie wir bereits gesehen haben, enthält jedes Paket in GNU Guix eine (im
Code englischsprachige) Zusammenfassung (englisch: Synopsis) und eine
Beschreibung (englisch: Description; siehe *note Pakete definieren::).
Zusammenfassungen und Beschreibungen sind wichtig: Sie werden mit ‘guix
package --search’ durchsucht und stellen eine entscheidende
Informationsquelle für Nutzer dar, die entscheiden wollen, ob das Paket
Ihren Bedürfnissen entspricht, daher sollten Paketentwickler Acht geben,
was sie dort eintragen.

   Zusammenfassungen müssen mit einem Großbuchstaben beginnen und dürfen
nicht mit einem Punkt enden. Sie dürfen nicht mit den Artikeln „a“ oder
„the“ beginnen, die meistens ohnehin nichts zum Verständnis beitragen.
Zum Beispiel sollte „File-frobbing tool“ gegenüber „A tool that frobs
files“ vorgezogen werden. Die Zusammenfassung sollte aussagen, um was es
sich beim Paket handelt — z.B. „Core GNU utilities (file, text, shell)“
—, oder aussagen, wofür es benutzt wird — z.B. ist die Zusammenfassung
für GNU grep „Print lines matching a pattern“.

   Beachten Sie, dass die Zusammenfassung für eine sehr große
Leserschaft einen Sinn ergeben muss. Zum Beispiel würde „Manipulate
alignments in the SAM format“ vielleicht von einem erfahrenen Forscher
in der Bioinformatik verstanden, könnte für die Nicht-Spezialisten in
Guix’ Zielgruppe aber wenig hilfreich sein oder würde diesen sogar eine
falsche Vorstellung geben. Es ist eine gute Idee, sich eine
Zusammenfassung zu überlegen, die eine Vorstellung von der
Anwendungsdomäne des Pakets vermittelt. Im Beispiel hier würden sich die
Nutzer mit „Manipulate nucleotide sequence alignments“ hoffentlich ein
besseres Bild davon machen können, ob das Paket ist, wonach sie suchen.

   Beschreibungen sollten zwischen fünf und zehn Zeilen lang sein.
Benutzen Sie vollständige Sätze und vermeiden Sie Abkürzungen, die Sie
nicht zuvor eingeführt haben. Vermeiden Sie bitte Marketing-Phrasen wie
„world-leading“ („weltweit führend“), „industrial-strength“
(„industrietauglich“) und „next-generation“ („der nächsten Generation“)
ebenso wie Superlative wie „the most advanced“ („das
fortgeschrittenste“) — davon haben Nutzer nichts, wenn sie ein Paket
suchen, und es könnte sogar verdächtig klingen. Versuchen Sie
stattdessen, bei den Fakten zu bleiben und dabei Anwendungszwecke und
Funktionalitäten zu erwähnen.

   Beschreibungen können wie bei Texinfo ausgezeichneten Text enthalten.
Das bedeutet, Text kann Verzierungen wie ‘@code’ oder ‘@dfn’,
Auflistungen oder Hyperlinks enthalten (siehe *note
(texinfo)Overview::). Sie sollten allerdings vorsichtig sein, wenn Sie
bestimmte Zeichen wie ‘@’ und geschweifte Klammern schreiben, weil es
sich dabei um die grundlegenden Sonderzeichen in Texinfo handelt (siehe
*note (texinfo)Special Characters::). Benutzungsschnittstellen wie ‘guix
package --show’ kümmern sich darum, solche Auszeichnungen angemessen
darzustellen.

   Zusammenfassungen und Beschreibungen werden von Freiwilligen beim
Translation Project
(https://translationproject.org/domain/guix-packages.html) übersetzt,
damit so viele Nutzer wie möglich sie in ihrer Muttersprache lesen
können. Mit Schnittstellen für Benutzer können sie in der von der
aktuell eingestellten Locale festgelegten Sprache durchsucht und
angezeigt werden.

   Damit ‘xgettext’ sie als übersetzbare Zeichenketten extrahieren kann,
_müssen_ Zusammenfassungen und Beschreibungen einfache
Zeichenketten-Literale sein. Das bedeutet, dass Sie diese Zeichenketten
nicht mit Prozeduren wie ‘string-append’ oder ‘format’ konstruieren
können:

     (package
       ;; …
       (synopsis "This is translatable")
       (description (string-append "This is " "*not*" " translatable.")))

   Übersetzen ist viel Arbeit, also passen Sie als Paketentwickler bitte
umso mehr auf, wenn Sie Ihre Zusammenfassungen und Beschreibungen
formulieren, weil jede Änderung zusätzliche Arbeit für Übersetzer
bedeutet. Um den Übersetzern zu helfen, können Sie Empfehlungen und
Anweisungen für diese sichtbar machen, indem Sie spezielle Kommentare
wie in diesem Beispiel einfügen (siehe *note (gettext)xgettext
Invocation::):

     ;; TRANSLATORS: "X11 resize-and-rotate" should not be translated.
     (description "ARandR is designed to provide a simple visual front end
     for the X11 resize-and-rotate (RandR) extension. …")


File: guix.de.info,  Node: Python-Module,  Next: Perl-Module,  Prev: Zusammenfassungen und Beschreibungen,  Up: Paketrichtlinien

14.4.5 Python-Module
--------------------

Zur Zeit stellen wir ein Paket für Python 2 und eines für Python 3
jeweils über die Scheme-Variablen mit den Namen ‘python-2’ und ‘python’
zur Verfügung, entsprechend der Erklärungen im Abschnitt *note
Versionsnummern::. Um Verwirrungen und Namenskollisionen mit anderen
Programmiersprachen zu vermeiden, erscheint es als wünschenswert, dass
der Name eines Pakets für ein Python-Modul auch das Wort ‘python’
enthält.

   Manche Module sind nur mit einer Version von Python kompatibel,
andere mit beiden. Wenn das Paket Foo mit Python 3 kompiliert wird,
geben wir ihm den Namen ‘python-foo’. Wenn es mit Python 2 kompiliert
wird, wählen wir den Namen ‘python2-foo’. Pakete sollten dann
hinzugefügt werden, wenn sie gebraucht werden. Wir erstellen keine
Python-2-Varianten von Paketen, wenn wir sie nicht benutzen wollen.

   Wenn ein Projekt bereits das Wort ‘python’ im Namen hat, lassen wir
es weg; zum Beispiel ist das Modul python-dateutil unter den Namen
‘python-dateutil’ und ‘python2-dateutil’ verfügbar. Wenn der Projektname
mit ‘py’ beginnt (z.B. ‘pytz’), behalten wir ihn bei und stellen das
oben beschriebene Präfix voran.

14.4.5.1 Abhängigkeiten angeben
...............................

Informationen über Abhängigkeiten von Python-Paketen, welche mal mehr
und mal weniger stimmen, finden sich normalerweise im Verzeichnisbaum
des Paketquellcodes: in der Datei ‘setup.py’, in ‘requirements.txt’ oder
in ‘tox.ini’.

   Wenn Sie ein Rezept für ein Python-Paket schreiben, lautet Ihr
Auftrag, diese Abhängigkeiten auf angemessene Arten von „Eingaben“
abzubilden (siehe *note inputs: „package“-Referenz.). Obwohl der
‘pypi’-Importer hier normalerweise eine gute Arbeit leistet (siehe *note
Aufruf von guix import::), könnten Sie die folgende Prüfliste durchgehen
wollen, um zu bestimmen, wo welche Abhängigkeit eingeordnet werden
sollte.

   • Derzeit ist unser Python-2-Paket so geschrieben, dass es
     ‘setuptools’ und ‘pip’ installiert, wie es auch in den Vorgaben zu
     Python 3.4 gemacht wird. Sie müssen also keines der beiden als
     Eingabe angeben. Wenn Sie es doch tun, wird ‘guix lint’ Sie darauf
     mit einer Warnung aufmerksam machen.

   • Python-Abhängigkeiten, die zur Laufzeit gebraucht werden, stehen im
     ‘propagated-inputs’-Feld. Solche werden typischerweise mit dem
     Schlüsselwort ‘install_requires’ in ‘setup.py’ oder in der Datei
     ‘requirements.txt’ definiert.

   • Python-Pakete, die nur zur Erstellungszeit gebraucht werden — z.B.
     jene, die mit dem Schlüsselwort ‘setup_requires’ in ‘setup.py’
     aufgeführt sind — oder die nur zum Testen gebraucht werden — also
     die in ‘tests_require’ —, stehen in ‘native-inputs’. Die Begründung
     ist, dass (1) sie nicht propagiert werden müssen, weil sie zur
     Laufzeit nicht gebraucht werden, und (2) wir beim Cross-Kompilieren
     die „native“ Eingabe des Wirtssystems wollen.

     Beispiele sind die Testrahmen ‘pytest’, ‘mock’ und ‘nose’. Wenn
     natürlich irgendeines dieser Pakete auch zur Laufzeit benötigt
     wird, muss es doch in ‘propagated-inputs’ stehen.

   • Alles, was nicht in die bisher genannten Kategorien fällt, steht in
     ‘inputs’, zum Beispiel Programme oder C-Bibliotheken, die zur
     Erstellung von Python-Paketen mit enthaltenen C-Erweiterungen
     gebraucht werden.

   • Wenn ein Python-Paket optionale Abhängigkeiten hat
     (‘extras_require’), ist es Ihnen überlassen, sie hinzuzufügen oder
     nicht hinzuzufügen, je nachdem wie es um deren Verhältnis von
     Nützlichkeit zu anderen Nachteilen steht (siehe *note ‘guix size’:
     Einreichen von Patches.).


File: guix.de.info,  Node: Perl-Module,  Next: Java-Pakete,  Prev: Python-Module,  Up: Paketrichtlinien

14.4.6 Perl-Module
------------------

Eigenständige Perl-Programme bekommen einen Namen wie jedes andere
Paket, unter Nutzung des Namens beim Anbieter in Kleinbuchstaben. Für
Perl-Pakete, die eine einzelne Klasse enthalten, ersetzen wir alle
Vorkommen von ‘::’ durch Striche und hängen davor das Präfix ‘perl-’ an.
Die Klasse ‘XML::Parser’ wird also zu ‘perl-xml-parser’. Module, die
mehrere Klassen beinhalten, behalten ihren Namen beim Anbieter, in
Kleinbuchstaben gesetzt, und auch an sie wird vorne das Präfix ‘perl-’
angehängt. Es gibt die Tendenz, solche Module mit dem Wort ‘perl’
irgendwo im Namen zu versehen, das wird zu Gunsten des Präfixes
weggelassen. Zum Beispiel wird aus ‘libwww-perl’ bei uns ‘perl-libwww’.


File: guix.de.info,  Node: Java-Pakete,  Next: Rust-Crates,  Prev: Perl-Module,  Up: Paketrichtlinien

14.4.7 Java-Pakete
------------------

Eigenständige Java-Programme werden wie jedes andere Paket benannt, d.h.
mit ihrem in Kleinbuchstaben geschriebenen Namen beim Anbieter.

   Um Verwirrungen und Namenskollisionen mit anderen Programmiersprachen
zu vermeiden, ist es wünschenswert, dass dem Namem eines Pakets zu einem
Java-Paket das Präfix ‘java-’ vorangestellt wird. Wenn ein Projekt
bereits das Wort ‘java’ im Namen trägt, lassen wir es weg; zum Beispiel
befindet sich das Java-Paket ‘ngsjava’ in einem Paket namens ‘java-ngs’.

   Bei Java-Paketen, die eine einzelne Klasse oder eine kleine
Klassenhierarchie enthalten, benutzen wir den Klassennamen in
Kleinbuchstaben und ersetzen dabei alle Vorkommen von ‘.’ durch Striche
und setzen das Präfix ‘java-’ davor. Die Klasse ‘apache.commons.cli’
wird also zum Paket ‘java-apache-commons-cli’.


File: guix.de.info,  Node: Rust-Crates,  Next: Schriftarten,  Prev: Java-Pakete,  Up: Paketrichtlinien

14.4.8 Rust-Crates
------------------

Eigenständige Rust-Programme werden wie jedes andere Paket benannt, d.h.
mit ihrem in Kleinbuchstaben geschriebenen Namen beim Anbieter.

   Um Namensraumkollisionen vorzubeugen, versehen wir alle anderen
Rust-Pakete mit dem Präfix ‘rust-’. Der Name sollte wie sonst in
Kleinbuchstaben geschrieben werden und Bindestriche dort bleiben, wo sie
sind.

   Im Rust-Ökosystem werden oft mehrere inkompatible Versionen desselben
Pakets gleichzeitig benutzt, daher sollte allen Paketen ein die Version
angebendes Suffix gegeben werden. Wenn ein Paket die Version 1.0.0
überschritten hat, genügt die Hauptversionsnummer (etwa ‘rust-clap-2’),
ansonsten sollte das Versionssuffix sowohl Haupt- als auch
Nebenversionsnummer angeben (z.B. ‘rust-rand-0.6’).

   Weil die Verwendung von Rust-Paketen als vorab kompilierte Eingaben
für andere Pakete besondere Schwierigkeiten macht, gibt es im
Cargo-Erstellungssystem (siehe *note ‘cargo-build-system’:
Erstellungssysteme.) die Schlüsselwörter ‘#:cargo-inputs’ und
‘#:cargo-development-inputs’ als Argumente an das Erstellungssystem. Es
ist hilfreich, sie sich ähnlich wie ‘propagated-inputs’ und
‘native-inputs’ vorzustellen. Was in Rust ‘dependencies’ und
‘build-dependencies’ sind, sollte unter ‘#:cargo-inputs’ aufgeführt
werden, während ‘dev-dependencies’ zu den ‘#:cargo-development-inputs’
gehören. Wenn ein Rust-Paket andere Bibliotheken einbindet, gilt die
normale Einordnung in ‘inputs’ usw. wie anderswo auch.

   Man sollte aufpassen, dass man die richtige Version von
Abhängigkeiten benutzt. Deswegen versuchen wir, Tests nicht mit
‘#:skip-build?’ zu überspringen, wenn es möglich ist. Natürlich geht das
nicht immer, vielleicht weil das Paket für ein anderes Betriebssystem
entwickelt wurde, Funktionalitäten der allerneuesten „Nightly“-Version
des Rust-Compilers voraussetzt oder weil der Testkatalog seit seiner
Veröffentlichung verkümmert ist.


File: guix.de.info,  Node: Schriftarten,  Prev: Rust-Crates,  Up: Paketrichtlinien

14.4.9 Schriftarten
-------------------

Wenn Schriftarten in der Regel nicht von Nutzern zur Textbearbeitung
installiert werden oder als Teil eines größeren Software-Pakets
mitgeliefert werden, gelten dafür die allgemeinen Paketrichtlinien für
Software. Zum Beispiel trifft das auf als Teil des X.Org-Systems
ausgelieferte Schriftarten zu, oder auf Schriftarten, die ein Teil von
TeX Live sind.

   Damit es Nutzer leichter haben, nach Schriftarten zu suchen,
konstruieren wir die Namen von anderen Paketen, die nur Schriftarten
enthalten, nach dem folgenden Schema, egal was der Paketname beim
Anbieter ist.

   Der Name eines Pakets, das nur eine Schriftfamilie enthält, beginnt
mit ‘font-’. Darauf folgt der Name des Schriftenherstellers und ein
Strich ‘-’, sofern bekannt ist, wer der Schriftenhersteller ist, und
dann der Name der Schriftfamilie, in dem Leerzeichen durch Striche
ersetzt werden (und wie immer mit Großbuchstaben statt Kleinbuchstaben).
Zum Beispiel befindet sich die von SIL hergestellte
Gentium-Schriftfamilie im Paket mit dem Namen ‘font-sil-gentium’.

   Wenn ein Paket mehrere Schriftfamilien enthält, wird der Name der
Sammlung anstelle des Schriftfamiliennamens benutzt. Zum Beispiel
umfassen die Liberation-Schriftarten drei Familien: Liberation Sans,
Liberation Serif und Liberation Mono. Man könnte sie getrennt
voneinander mit den Namen ‘font-liberation-sans’ und so weiter in Pakete
einteilen, da sie aber unter einem gemeinsamen Namen angeboten werden,
packen wir sie lieber zusammen in ein Paket mit dem Namen
‘font-liberation’.

   Für den Fall, dass mehrere Formate derselben Schriftfamilie oder
Schriftartensammlung in separate Pakete kommen, wird ein Kurzname für
das Format mit einem Strich vorne zum Paketnamen hinzugefügt. Wir
benutzen ‘-ttf’ für TrueType-Schriftarten, ‘-otf’ für
OpenType-Schriftarten und ‘-type1’ für PostScript-Typ-1-Schriftarten.


File: guix.de.info,  Node: Programmierstil,  Next: Einreichen von Patches,  Prev: Paketrichtlinien,  Up: Mitwirken

14.5 Programmierstil
====================

Im Allgemeinen folgt unser Code den GNU Coding Standards (siehe *note
(standards)Top::). Da diese aber nicht viel über Scheme zu sagen haben,
folgen hier einige zusätzliche Regeln.

* Menu:

* Programmierparadigmen::    Wie Sie Ihre Elemente zusammenstellen.
* Module::                   Wo Sie Ihren Code unterbringen.
* Datentypen und Mustervergleich::  Implementierung von Datenstrukturen.
* Formatierung von Code::    Schreibkonventionen.


File: guix.de.info,  Node: Programmierparadigmen,  Next: Module,  Up: Programmierstil

14.5.1 Programmierparadigmen
----------------------------

Scheme-Code wird in Guix auf rein funktionale Weise geschrieben. Eine
Ausnahme ist Code, der mit Ein- und Ausgabe zu tun hat, und Prozeduren,
die grundlegende Konzepte implementieren, wie zum Beispiel die Prozedur
‘memoize’.


File: guix.de.info,  Node: Module,  Next: Datentypen und Mustervergleich,  Prev: Programmierparadigmen,  Up: Programmierstil

14.5.2 Module
-------------

Guile-Module, die beim Erstellen nutzbar sein sollen, müssen im
Namensraum ‘(guix build …)’ leben. Sie dürfen auf keine anderen Guix-
oder GNU-Module Bezug nehmen. Jedoch ist es in Ordnung, wenn ein
„wirtsseitiges“ Modul ein erstellungsseitiges Modul benutzt.

   Module, die mit dem weiteren GNU-System zu tun haben, sollten im
Namensraum ‘(gnu …)’ und nicht in ‘(guix …)’ stehen.


File: guix.de.info,  Node: Datentypen und Mustervergleich,  Next: Formatierung von Code,  Prev: Module,  Up: Programmierstil

14.5.3 Datentypen und Mustervergleich
-------------------------------------

Im klassischen Lisp gibt es die Tendenz, Listen zur Darstellung von
allem zu benutzen, und diese dann „händisch“ zu durchlaufen mit ‘car’,
‘cdr’, ‘cadr’ und so weiter. Dieser Stil ist aus verschiedenen Gründen
problematisch, insbesondere wegen der Tatsache, dass er schwer zu lesen,
schnell fehlerbehaftet und ein Hindernis beim Melden von Typfehlern ist.

   Guix-Code sollte angemessene Datentypen definieren (zum Beispiel mit
‘define-record-type*’) statt Listen zu missbrauchen. Außerdem sollte er
das ‘(ice-9 match)’-Modul von Guile zum Mustervergleich benutzen,
besonders mit Listen.


File: guix.de.info,  Node: Formatierung von Code,  Prev: Datentypen und Mustervergleich,  Up: Programmierstil

14.5.4 Formatierung von Code
----------------------------

Beim Schreiben von Scheme-Code halten wir uns an die üblichen
Gepflogenheiten unter Scheme-Programmierern. Im Allgemeinen bedeutet
das, dass wir uns an Riastradh’s Lisp Style Rules
(https://mumble.net/~campbell/scheme/style.txt) halten. Es hat sich
ergeben, dass dieses Dokument auch die Konventionen beschreibt, die im
Code von Guile hauptsächlich verwendet werden. Es ist gut durchdacht und
schön geschrieben, also lesen Sie es bitte.

   Ein paar in Guix eingeführte Sonderformen, wie zum Beispiel das
‘substitute*’-Makro, haben abweichende Regeln für die Einrückung. Diese
sind in der Datei ‘.dir-locals.el’ definiert, die Emacs automatisch
benutzt. Beachten Sie auch, dass Emacs-Guix einen Modus namens
‘guix-devel-mode’ bereitstellt, der Guix-Code richtig einrückt und
hervorhebt (siehe *note (emacs-guix)Entwicklung::).

   Falls Sie nicht Emacs verwenden, sollten Sie sicherstellen, dass Ihr
Editor diese Regeln kennt. Um eine Paketdefinition automatisch
einzurücken, können Sie auch Folgendes ausführen:

     ./etc/indent-code.el gnu/packages/DATEI.scm PAKET

Dadurch wird die Definition von PAKET in ‘gnu/packages/DATEI.scm’
automatisch eingerückt, indem Emacs im Batch-Modus läuft. Um die
Einrückung in einer gesamten Datei vorzunehmen, lassen Sie das zweite
Argument weg:

     ./etc/indent-code.el gnu/services/DATEI.scm

   Wenn Sie Code mit Vim bearbeiten, empfehlen wir, dass Sie ‘:set
autoindent’ ausführen, damit Ihr Code automatisch eingerückt wird,
während Sie ihn schreiben. Außerdem könnte Ihnen ‘paredit.vim’
(https://www.vim.org/scripts/script.php?script_id=3998) dabei helfen,
mit all diesen Klammern fertigzuwerden.

   Wir fordern von allen Prozeduren auf oberster Ebene, dass sie über
einen Docstring verfügen. Diese Voraussetzung kann jedoch bei einfachen,
privaten Prozeduren im Namensraum ‘(guix build …)’ aufgeweicht werden.

   Prozeduren sollten nicht mehr als vier positionsbestimmte Parameter
haben. Benutzen Sie Schlüsselwort-Parameter für Prozeduren, die mehr als
vier Parameter entgegennehmen.


File: guix.de.info,  Node: Einreichen von Patches,  Next: Überblick über gemeldete Fehler und Patches,  Prev: Programmierstil,  Up: Mitwirken

14.6 Einreichen von Patches
===========================

Die Entwicklung wird mit Hilfe des verteilten Versionskontrollsystems
Git durchgeführt. Daher ist eine ständige Verbindung zum Repository
nicht unbedingt erforderlich. Wir begrüßen Beiträge in Form von Patches,
die mittels ‘git format-patch’ erstellt und an die Mailingliste
<guix-patches@gnu.org> geschickt werden. Erfahrene Guix-Entwickler
möchten vielleicht auch einen Blick auf den Abschnitt über
Commit-Zugriff werfen (siehe *note Commit-Zugriff::).

   Diese Mailing-Liste setzt auf einer Debbugs-Instanz auf, wodurch wir
den Überblick über Eingereichtes behalten können (siehe *note Überblick
über gemeldete Fehler und Patches::). Jede an diese Mailing-Liste
gesendete Nachricht bekommt eine neue Folgenummer zugewiesen, so dass
man eine Folge-E-Mail zur Einreichung an ‘NNN@debbugs.gnu.org’ senden
kann, wobei NNN für die Folgenummer steht (siehe *note Senden einer
Patch-Reihe::).

   Bitte schreiben Sie Commit-Logs im ChangeLog-Format (siehe *note
(standards)Change Logs::); dazu finden Sie Beispiele unter den
bisherigen Commits.

   Bevor Sie einen Patch einreichen, der eine Paketdefinition hinzufügt
oder verändert, gehen Sie bitte diese Prüfliste durch:

  1. Wenn die Autoren der verpackten Software eine kryptografische
     Signatur bzw. Beglaubigung für den Tarball der Veröffentlichung
     anbieten, so machen Sie sich bitte die Mühe, die Echtheit des
     Archivs zu überprüfen. Für eine abgetrennte GPG-Signaturdatei
     würden Sie das mit dem Befehl ‘gpg --verify’ tun.

  2. Nehmen Sie sich die Zeit, eine passende Zusammenfassung und
     Beschreibung für das Paket zu verfassen. Unter *note
     Zusammenfassungen und Beschreibungen:: finden Sie dazu einige
     Richtlinien.

  3. Verwenden Sie ‘guix lint PAKET’, wobei PAKET das neue oder
     geänderte Paket bezeichnet, und beheben Sie alle gemeldeten Fehler
     (siehe *note Aufruf von guix lint::).

  4. Stellen Sie sicher, dass das Paket auf Ihrer Plattform erstellt
     werden kann, indem Sie ‘guix build PAKET’ ausführen.

  5. Wir empfehlen, dass Sie auch versuchen, das Paket auf anderen
     unterstützten Plattformen zu erstellen. Da Sie vielleicht keinen
     Zugang zu echter Hardware für diese Plattformen haben, empfehlen
     wir, den ‘qemu-binfmt-service-type’ zu benutzen, um sie zu
     emulieren. Um ihn zu aktivieren, fügen Sie den folgenden Dienst in
     die Liste der Dienste („services“) in Ihrer
     ‘operating-system’-Konfiguration ein:

          (service qemu-binfmt-service-type
           (qemu-binfmt-configuration
             (platforms (lookup-qemu-platforms "arm" "aarch64"))
             (guix-support? #t)))

     Rekonfigurieren Sie anschließend Ihr System.

     Sie können Pakete für andere Plattformen erstellen lassen, indem
     Sie die Befehlszeilenoption ‘--system’ angeben. Um zum Beispiel das
     Paket „hello“ für die Architekturen armhf, aarch64 oder mips64
     erstellen zu lassen, würden Sie jeweils die folgenden Befehle
     angeben:
          guix build --system=armhf-linux --rounds=2 hello
          guix build --system=aarch64-linux --rounds=2 hello

  6. Achten Sie darauf, dass im Paket keine Software gebündelt
     mitgeliefert wird, die bereits in separaten Paketen zur Verfügung
     steht.

     Manchmal enthalten Pakete Kopien des Quellcodes ihrer
     Abhängigkeiten, um Nutzern die Installation zu erleichtern. Als
     eine Distribution wollen wir jedoch sicherstellen, dass solche
     Pakete die schon in der Distribution verfügbare Fassung benutzen,
     sofern es eine gibt. Dadurch wird sowohl der Ressourcenverbrauch
     optimiert (die Abhängigkeit wird so nur einmal erstellt und
     gespeichert) als auch der Distribution die Möglichkeit gegeben,
     ergänzende Änderungen durchzuführen, um beispielsweise
     Sicherheitsaktualisierungen für ein bestimmtes Paket an nur einem
     Ort einzuspielen, die aber das gesamte System betreffen — gebündelt
     mitgelieferte Kopien würden dies verhindern.

  7. Schauen Sie sich das von ‘guix size’ ausgegebene Profil an (siehe
     *note Aufruf von guix size::). Dadurch können Sie Referenzen auf
     andere Pakete finden, die ungewollt vorhanden sind. Dies kann auch
     dabei helfen, zu entscheiden, ob das Paket aufgespalten werden
     sollte (siehe *note Pakete mit mehreren Ausgaben.::) und welche
     optionalen Abhängigkeiten verwendet werden sollten. Dabei sollten
     Sie es wegen seiner enormen Größe insbesondere vermeiden, ‘texlive’
     als eine Abhängigkeit hinzuzufügen; benutzen Sie stattdessen
     ‘texlive-tiny’ oder ‘texlive-union’.

  8. Achten Sie bei wichtigen Änderungen darauf, dass abhängige Pakete
     (falls vorhanden) nicht von der Änderung beeinträchtigt werden;
     ‘guix refresh --list-dependent PAKET’ hilft Ihnen dabei (siehe
     *note Aufruf von guix refresh::).

     Je nachdem, wieviele abhängige Pakete es gibt, und entsprechend
     wieviele Neuerstellungen dadurch nötig würden, finden Commits auf
     anderen Branches statt, nach ungefähr diesen Regeln:

     300 abhängige Pakete oder weniger
          ‘master’-Branch (störfreie Änderungen).

     zwischen 300 und 1200 abhängige Pakete
          ‘staging’-Branch (störfreie Änderungen). Dieser Branch wird
          circa alle 3 Wochen mit ‘master’ zusammengeführt.
          Themenbezogene Änderungen (z.B. eine Aktualisierung der
          GNOME-Plattform) können stattdessen auch auf einem eigenen
          Branch umgesetzt werden (wie ‘gnome-updates’).

     mehr als 1200 abhängige Pakete
          ‘core-updates’-Branch (kann auch größere und womöglich andere
          Software beeinträchtigende Änderungen umfassen). Dieser Branch
          wird planmäßig in ‘master’ alle 2,5 Monate oder so gemerget.

     All diese Branches werden kontinuierlich auf unserer
     Erstellungsfarm (ci.guix.gnu.org) erstellt und in ‘master’
     gemerget, sobald alles erfolgreich erstellt worden ist. Dadurch
     können wir Probleme beheben, bevor sie bei Nutzern auftreten, und
     zudem das Zeitfenster, während dessen noch keine vorerstellten
     Binärdateien verfügbar sind, verkürzen.

     Im Allgemeinen werden Branches außer ‘master’ als _unveränderlich_
     angesehen, wenn sie kürzlich ausgewertet wurden oder ein
     entsprechender ‘-next’-Branch existiert. Bitte fragen Sie auf der
     Mailing-Liste oder IRC, wenn Sie sich nicht sicher sind, wo ein
     Patch eingespielt werden sollte.

  9. Überprüfen Sie, ob der Erstellungsprozess deterministisch ist. Dazu
     prüfen Sie typischerweise, ob eine unabhängige Erstellung des
     Pakets genau dasselbe Ergebnis wie Ihre Erstellung hat, Bit für
     Bit.

     Dies können Sie leicht tun, indem Sie dasselbe Paket mehrere Male
     hintereinander auf Ihrer Maschine erstellen (siehe *note Aufruf von
     guix build::):

          guix build --rounds=2 mein-paket

     Dies reicht aus, um eine ganze Klasse häufiger Ursachen von
     Nichtdeterminismus zu finden, wie zum Beispiel Zeitstempel oder
     zufallsgenerierte Ausgaben im Ergebnis der Erstellung.

     Eine weitere Möglichkeit ist, ‘guix challenge’ (siehe *note Aufruf
     von guix challenge::) zu benutzen. Sie können es ausführen, sobald
     ein Paket commitet und von ‘ci.guix.gnu.org’ erstellt wurde, um zu
     sehen, ob dort dasselbe Ergebnis wie bei Ihnen geliefert wurde.
     Noch besser: Finden Sie eine andere Maschine, die das Paket
     erstellen kann, und führen Sie ‘guix publish’ aus. Da sich die
     entfernte Erstellungsmaschine wahrscheinlich von Ihrer
     unterscheidet, können Sie auf diese Weise Probleme durch
     Nichtdeterminismus erkennen, die mit der Hardware zu tun haben —
     zum Beispiel die Nutzung anderer Befehlssatzerweiterungen — oder
     mit dem Betriebssystem-Kernel — zum Beispiel, indem ‘uname’ oder
     ‘/proc’-Dateien verwendet werden.

  10. Beim Schreiben von Dokumentation achten Sie bitte auf eine
     geschlechtsneutrale Wortwahl, wenn Sie sich auf Personen beziehen,
     wie „they“, „their“, „them“ im Singular
     (https://en.wikipedia.org/wiki/Singular_they) und so weiter.

  11. Stellen Sie sicher, dass Ihr Patch nur einen Satz
     zusammengehöriger Änderungen umfasst. Das Zusammenfassen nicht
     zusammengehöriger Änderungen erschwert und bremst das Durchsehen
     Ihres Patches.

     Beispiele für nicht zusammengehörige Änderungen sind das Hinzufügen
     mehrerer Pakete auf einmal, oder das Aktualisieren eines Pakets auf
     eine neue Version zusammen mit Fehlerbehebungen für das Paket.

  12. Bitte befolgen Sie unsere Richtlinien für die Code-Formatierung,
     womöglich wollen Sie dies automatisch tun lassen durch das Skript
     ‘etc/indent-code.el’ (siehe *note Formatierung von Code::).

  13. Benutzen Sie, wenn möglich, Spiegelserver (Mirrors) in der
     Quell-URL (siehe *note Aufruf von guix download::). Verwenden Sie
     verlässliche URLs, keine automatisch generierten. Zum Beispiel sind
     Archive von GitHub nicht immer identisch von einer Generation auf
     die nächste, daher ist es in diesem Fall besser, als Quelle einen
     Klon des Repositorys zu verwenden. Benutzen Sie _nicht_ das
     ‘name’-Feld beim Angeben der URL; er hilft nicht wirklich und wenn
     sich der Name ändert, stimmt die URL nicht mehr.

  14. Überprüfen Sie, ob Guix erstellt werden kann (siehe *note
     Erstellung aus dem Git::) und kümmern Sie sich um die Warnungen,
     besonders um solche über nicht definierte Symbole.

  15. Stellen Sie sicher, dass Ihre Änderungen Guix nicht
     beeinträchtigen, und simulieren Sie eine Ausführung von ‘guix pull’
     über den Befehl:
          guix pull --url=/pfad/zu/ihrem/checkout --profile=/tmp/guix.master

   When posting a patch to the mailing list, use ‘[PATCH] ...’ as a
subject, if your patch is to be applied on a branch other than ‘master’,
say ‘core-updates’, specify it in the subject like ‘[PATCH core-updates]
...’. You may use your email client or the ‘git send-email’ command
(*note Senden einer Patch-Reihe::). We prefer to get patches in plain
text messages, either inline or as MIME attachments. You are advised to
pay attention if your email client changes anything like line breaks or
indentation which could potentially break the patches.

   Wenn dadurch ein Fehler behoben wurde, schließen Sie bitte den
Thread, indem Sie eine E-Mail an <NNN-done@debbugs.gnu.org> senden.

Senden einer Patch-Reihe
------------------------

Wenn Sie eine Patch-Reihe senden (z.B. mit ‘git send-email’), schicken
Sie bitte als Erstes eine Nachricht an <guix-patches@gnu.org> und dann
nachfolgende Patches an <NNN@debbugs.gnu.org>, um sicherzustellen, dass
sie zusammen bearbeitet werden. Siehe die Debbugs-Dokumentation
(https://debbugs.gnu.org/Advanced.html) für weitere Informationen. Sie
können ‘git send-email’ mit dem Befehl ‘guix install git:send-email’
installieren.


File: guix.de.info,  Node: Überblick über gemeldete Fehler und Patches,  Next: Commit-Zugriff,  Prev: Einreichen von Patches,  Up: Mitwirken

14.7 Überblick über gemeldete Fehler und Patches
================================================

Einen Überblick über gemeldete Fehler („Bugs“) und eingereichte Patches
finden Sie derzeit auf der Debbugs-Instanz unter <https://bugs.gnu.org>.
Fehler werden für das „Paket“ (so sagt man im Sprachgebrauch von
Debbugs) namens ‘guix’ gemeldet, indem Sie eine E-Mail an
<bug-guix@gnu.org> schicken. Dagegen werden Patches für das Paket
‘guix-patches’ eingereicht, indem Sie eine E-Mail an
<guix-patches@gnu.org> schicken (siehe *note Einreichen von Patches::).

   Ihnen steht eine Weboberfläche (tatsächlich sogar _zwei_
Weboberflächen!) zur Verfügung, um die Fehlerdatenbank zu durchsuchen:

   • Auf <https://bugs.gnu.org/guix> werden gemeldete Fehler aufgeführt,
   • auf <https://bugs.gnu.org/guix-patches> eingereichte Patches.

   Sie können auf beides auch über die (hübschere) Schnittstelle unter
<https://issues.guix.gnu.org> zugreifen(1). Um Diskussionen zum Fehler
mit Fehlernummer N einzusehen, schauen Sie auf
‘https://issues.guix.gnu.org/issue/N’ oder ‘https://bugs.gnu.org/N’.

   Wenn Sie Emacs benutzen, finden Sie es vielleicht bequemer, sich
durch Nutzung von ‘debbugs.el’ mit Fehlern zu befassen, was Sie mit
folgendem Befehl installieren können:

     guix install emacs-debbugs

   Um zum Beispiel alle noch ausstehenden, „offenen“ Fehler bezüglich
‘guix-patches’ anzusehen, geben Sie dies ein:

     C-u M-x debbugs-gnu RET RET guix-patches RET n y

   Siehe *note (debbugs-ug)Top:: für weitere Informationen zu diesem
raffinierten Werkzeug.

   ---------- Footnotes ----------

   (1) Die Weboberfläche unter <https://issues.guix.gnu.org> läuft über
das Programm Mumi, ein schönes Stück in Guile geschriebene Software, bei
der Sie uns helfen können! Siehe
<https://git.elephly.net/gitweb.cgi?p=software/mumi.git>.


File: guix.de.info,  Node: Commit-Zugriff,  Prev: Überblick über gemeldete Fehler und Patches,  Up: Mitwirken

14.8 Commit-Zugriff
===================

Für Leute, die häufig zu Guix beitragen, ist es praktischer,
Schreibzugriff auf das Repository zu haben. Wenn Sie es für angemessen
halten, dann sollten Sie in Erwägung ziehen, sich wie folgt um
Commit-Zugriff zu bewerben:

  1. Finden Sie drei Commiter, die für Sie eintreten. Sie können die
     Liste der Commiter unter
     <https://savannah.gnu.org/project/memberlist.php?group=guix>
     finden. Jeder von ihnen sollte eine entsprechende Erklärung per
     E-Mail an <guix-maintainers@gnu.org> schicken (eine private
     Alias-Adresse für das Kollektiv aus allen Betreuern bzw.
     Maintainern), die jeweils mit ihrem OpenPGP-Schlüssel signiert
     wurde.

     Von den Commitern wird erwartet, dass sie bereits mit Ihnen als
     Mitwirkendem zu tun hatten und beurteilen können, ob Sie mit den
     Richtlinien des Projekts hinreichend vertraut sind. Dabei geht es
     _nicht_ darum, wie wertvoll Ihre Beiträge sind, daher sollte eine
     Ablehnung mehr als „schauen wir später nochmal“ verstanden werden.

  2. Senden Sie eine Nachricht an <guix-maintainers@gnu.org>, in der Sie
     Ihre Bereitschaft darlegen und die Namen der drei Commiter nennen,
     die Ihre Bewerbung unterstützen. Die Nachricht sollte mit dem
     OpenPGP-Schlüssel signiert sein, mit dem Sie später auch Ihre
     Commits signieren, und Sie sollten den Fingerabdruck hinterlegen
     (siehe unten). Siehe <https://emailselfdefense.fsf.org/de/> für
     eine Einführung in asymmetrische Kryptografie („Public-Key“) mit
     GnuPG.

     Set up GnuPG such that it never uses the SHA1 hash algorithm for
     digital signatures, which is known to be unsafe since 2019, for
     instance by adding the following line to ‘~/.gnupg/gpg.conf’ (*note
     (gnupg)GPG Esoteric Options::):

          digest-algo sha512

  3. Betreuer entscheiden letztendlich darüber, ob Ihnen Commit-Zugriff
     gegeben wird, folgen dabei aber normalerweise der Empfehlung Ihrer
     Fürsprecher.

  4. Wenn und sobald Ihnen Zugriff gewährt wurde, senden Sie bitte eine
     Nachricht an <guix-devel@gnu.org>, um dies bekanntzugeben, die Sie
     erneut mit dem OpenPGP-Schlüssel signiert haben, mit dem Sie
     Commits signieren (tun Sie das, bevor Sie Ihren ersten Commit
     pushen). Auf diese Weise kann jeder Ihren Beitritt mitbekommen und
     nachprüfen, dass dieser OpenPGP-Schlüssel wirklich Ihnen gehört.

          Important: Before you can push for the first time, maintainers
          must:

            1. add your OpenPGP key to the ‘keyring’ branch;
            2. add your OpenPGP fingerprint to the
               ‘.guix-authorizations’ file of the branch(es) you will
               commit to.

  5. Wenn Sie den Rest dieses Abschnitts jetzt auch noch lesen, steht
     Ihrer Karriere nichts mehr im Weg!

     Anmerkung: Betreuer geben gerne anderen Leuten Commit-Zugriff, die
     schon einige Zeit dabei waren und ihre Eignung unter Beweis
     gestellt haben. Seien Sie nicht schüchtern und unterschätzen Sie
     Ihre Arbeit nicht!

     Sie sollten sich bewusst sein, dass unser Projekt auf ein besser
     automatisiertes System hinarbeitet, um Patches zu überprüfen und zu
     mergen. Als Folge davon werden wir vielleicht weniger Leuten
     Commit-Zugriff auf das Haupt-Repository geben. Bleiben Sie auf dem
     Laufenden!

   Wenn Sie Commit-Zugriff erhalten, passen Sie bitte auf, dass Sie der
folgenden Richtlinie folgen (Diskussionen über die Richtlinie können wir
auf <guix-devel@gnu.org> führen).

   Nichttriviale Patches sollten immer zuerst an <guix-patches@gnu.org>
geschickt werden (zu den trivialen Patches gehört zum Beispiel das
Beheben von Schreibfehlern usw.). Was an diese Mailing-Liste geschickt
wird, steht danach in der Patch-Datenbank (siehe *note Überblick über
gemeldete Fehler und Patches::).

   Bei Patches, die nur ein einziges neues Paket hinzufügen, das auch
noch einfach ist, ist es in Ordnung, sie zu commiten, wenn Sie von von
ihnen überzeugt sind (das bedeutet, Sie sollten es in einer
chroot-Umgebung erstellt haben und Urheberrecht und Lizenzen mit
angemessener Gründlichkeit geprüft haben). Für Paketaktualisierungen
gilt dasselbe, außer die Aktualisierung hat viele Neuerstellungen zur
Folge (wenn Sie zum Beispiel GnuTLS oder GLib aktualisieren). Wir haben
eine Mailing-Liste für Commit-Benachrichtigungen
(<guix-commits@gnu.org>), damit andere sie bemerken. Bevor Sie Ihre
Änderungen pushen, führen Sie ‘git pull --rebase’ aus.

   Alle Commits, die auf das zentrale Repository auf Savannah gepusht
werden, müssen mit einem OpenPGP-Schlüssel signiert worden sein, und
diesen öffentlichen Schlüssel sollten Sie auf Ihr Benutzerkonto auf
Savannah und auf öffentliche Schlüsselserver wie ‘keys.openpgp.org’
hochladen. Um Git so zu konfigurieren, dass es Commits automatisch
signiert, führen Sie diese Befehle aus:

     git config commit.gpgsign true
     git config user.signingkey CABBA6EA1DC0FF33

   Sie können als Vorsichtsmaßnahme, um _nicht_ versehentlich
unsignierte Commits auf Savannah zu pushen, den Pre-Push-Git-Hook
benutzen, der sich unter ‘etc/git/pre-push’ befindet:

     cp etc/git/pre-push .git/hooks/pre-push

   Wenn Sie einen Commit für jemand anderen pushen, fügen Sie bitte eine
‘Signed-off-by’-Zeile am Ende der Commit-Log-Nachricht hinzu — z.B. mit
‘git am --signoff’. Dadurch lässt es sich leichter überblicken, wer was
getan hat.

   When adding channel news entries (*note Writing Channel News:
Kanäle.), make sure they are well-formed by running the following
command right before pushing:

     make check-channel-news

   Alles andere schicken Sie bitte an <guix-patches@gnu.org> und warten
eine Weile, ohne etwas zu commiten, damit andere Zeit haben, sich die
Änderungen anzuschauen (siehe *note Einreichen von Patches::). Wenn Sie
nach zwei Wochen keine Antwort erhalten haben und von den Änderungen
überzeugt sind, ist es in Ordnung, sie zu commiten.

   Die letzten Anweisungen werden wir vielleicht noch ändern, damit man
unstrittige Änderungen direkt commiten kann, wenn man mit von Änderungen
betroffenen Teilen vertraut ist.

   Eine Sache noch: Das Projekt entwickelt sich nicht nur deswegen
schnell, weil Commiter ihre eigenen tollen Änderungen pushen, sondern
auch, weil sie sich Zeit nehmen, die Änderungen anderer Leute in
„Reviews“ zu _überprüfen_ und zu pushen. Als Commiter begrüßen wir es,
wenn Sie Ihre Expertise und Commit-Rechte dafür einsetzen, auch anderen
Mitwirkenden zu helfen!


File: guix.de.info,  Node: Danksagungen,  Next: GNU-Lizenz für freie Dokumentation,  Prev: Mitwirken,  Up: Top

15 Danksagungen
***************

Guix is based on the Nix package manager (https://nixos.org/nix/), which
was designed and implemented by Eelco Dolstra, with contributions from
other people (see the ‘nix/AUTHORS’ file in Guix). Nix pioneered
functional package management, and promoted unprecedented features, such
as transactional package upgrades and rollbacks, per-user profiles, and
referentially transparent build processes. Without this work, Guix would
not exist.

   Die Nix-basierten Software-Distributionen Nixpkgs und NixOS waren
auch eine Inspiration für Guix.

   GNU Guix ist selbst das Produkt kollektiver Arbeit mit Beiträgen
durch eine Vielzahl von Leuten. Siehe die Datei ‘AUTHORS’ in Guix für
mehr Informationen, wer diese wunderbaren Menschen sind. In der Datei
‘THANKS’ finden Sie eine Liste der Leute, die uns geholfen haben, indem
Sie Fehler gemeldet, sich um unsere Infrastruktur gekümmert,
künstlerische Arbeit und schön gestaltete Themen beigesteuert,
Vorschläge gemacht und noch vieles mehr getan haben — vielen Dank!


File: guix.de.info,  Node: GNU-Lizenz für freie Dokumentation,  Next: Konzeptverzeichnis,  Prev: Danksagungen,  Up: Top

Anhang A GNU-Lizenz für freie Dokumentation
*******************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially. Secondarily, this License preserves for the author
     and publisher a way to get credit for their work, while not being
     considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense. It
     complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does. But this License is not limited to software
     manuals; it can be used for any textual work, regardless of subject
     matter or whether it is published as a printed book. We recommend
     this License principally for works whose purpose is instruction or
     reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License. Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein. The
     “Document”, below, refers to any such manual or work. Any member of
     the public is a licensee, and is addressed as “you”. You accept the
     license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject. (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.) The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant. The Document may
     contain zero Invariant Sections. If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License. A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters. A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent. An image format is not Transparent if
     used for any substantial amount of text. A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page. For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language. (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document. These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License. You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute. However,
     you may accept compensation in exchange for copies. If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover. Both covers must also clearly
     and legibly identify you as the publisher of these copies. The
     front cover must present the full title with all words of the title
     equally prominent and visible. You may add other material on the
     covers in addition. Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material. If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it. In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document). You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page. If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on. These may be placed in the
          “History” section. You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles. Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”. Such a section may
          not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant. To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice. These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version. Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity. If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy. If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number. Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”. You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit. When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form. Otherwise they must appear on printed covers that bracket the
     whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4. Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections. You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers. In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License. Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License. If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time. Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns. See
     <https://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number. If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation. If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation. If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works. A
     public wiki that anybody can edit is an example of such a server. A
     “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: guix.de.info,  Node: Konzeptverzeichnis,  Next: Programmierverzeichnis,  Prev: GNU-Lizenz für freie Dokumentation,  Up: Top

Konzeptverzeichnis
******************

 [index ]
* Menu:

* .local, Rechnernamensauflösung:        Name Service Switch.
                                                             (line   22)
* /bin/sh:                               Basisdienste.       (line   36)
* /usr/bin/env:                          Basisdienste.       (line   38)
* AArch64, Bootloader:                   Bootloader-Konfiguration.
                                                             (line   34)
* Abhängigkeiten zur Erstellungszeit:    Ableitungen.        (line   14)
* Abhängigkeiten, bei Kanälen:           Kanäle.             (line  138)
* Abhängigkeiten, zur Laufzeit:          Ableitungen.        (line   42)
* Abhängigkeitsbaum umschreiben:         Pakete definieren.  (line  180)
* Ableitung:                             Aufruf von guix gc. (line  151)
* Ableitung <1>:                         Programmierschnittstelle.
                                                             (line   24)
* Ableitungen:                           Ableitungen.        (line    6)
* Ableitungen mit fester Ausgabe:        Ableitungen.        (line   33)
* Ableitungspfad:                        Ableitungen.        (line   26)
* Abschluss:                             Aufruf von guix gc. (line  139)
* Abschluss <1>:                         Aufruf von guix size.
                                                             (line    6)
* Abschluss <2>:                         Aufruf von guix size.
                                                             (line   30)
* Access Control List (ACL), für Substitute: Substitut-Server autorisieren.
                                                             (line    6)
* ACL (Access Control List), für Substitute: Substitut-Server autorisieren.
                                                             (line    6)
* Administrationsbereich, Kerberos:      Kerberos-Dienste.   (line   58)
* Aktionen, bei Shepherd-Diensten:       Shepherd-Dienste.   (line   68)
* Aktualisieren des Guix-Daemon, auf einer Fremddistribution: Aktualisieren von Guix.
                                                             (line   12)
* Aktualisieren von Guix:                Aufruf von guix pull.
                                                             (line    6)
* Aktualisieren von Guix für den root-Administratornutzer, auf einer Fremddistribution: Aktualisieren von Guix.
                                                             (line   12)
* Aktualisieren von Guix, auf einer Fremddistribution: Aktualisieren von Guix.
                                                             (line    6)
* Alias-Namen für guix package:          Aufruf von guix package.
                                                             (line   24)
* Alias-Namen, für E-Mail-Adressen:      Mail-Dienste.       (line 1681)
* ALSA:                                  Tondienste.         (line    6)
* Android-Distribution:                  Erstellungssysteme. (line  157)
* Android-NDK-Erstellungssystem:         Erstellungssysteme. (line  157)
* Anfechten:                             Aufruf von guix challenge.
                                                             (line    6)
* Anmeldeverwaltung:                     X Window.           (line    6)
* Anmeldeverwaltung <1>:                 X Window.           (line  265)
* Anpassung, von Diensten:               Das Konfigurationssystem nutzen.
                                                             (line  144)
* Anpassung, von Paketen:                Auf Guix-Art Software verwalten.
                                                             (line   16)
* Anpassung, von Paketen <1>:            Paketmodule.        (line   20)
* Anwendungsbündel:                      Aufruf von guix pack.
                                                             (line   17)
* Archivdateien:                         Aufruf von guix archive.
                                                             (line    6)
* Archivierung von Quellcode, Software Heritage: Aufruf von guix lint.
                                                             (line   42)
* ARM, Bootloader:                       Bootloader-Konfiguration.
                                                             (line   34)
* Audit:                                 Verschiedene Dienste.
                                                             (line  257)
* Auflösung:                             Bootloader-Konfiguration.
                                                             (line  175)
* Auflösung <1>:                         Aufruf von guix system.
                                                             (line   22)
* Ausführlichkeit der Befehlszeilenwerkzeuge: Gemeinsame Erstellungsoptionen.
                                                             (line  120)
* Ausgaben:                              Pakete mit mehreren Ausgaben..
                                                             (line    6)
* auslagern:                             Auslagern des Daemons einrichten.
                                                             (line    6)
* auslagern <1>:                         Aufruf des guix-daemon.
                                                             (line   71)
* Auslagerung testen:                    Auslagern des Daemons einrichten.
                                                             (line  161)
* Auslagerungs-Lagebericht:              Auslagern des Daemons einrichten.
                                                             (line  182)
* Authentifizieren, eines Guix-Checkouts: Erstellung aus dem Git.
                                                             (line   11)
* Autorisieren, von Archiven:            Aufruf von guix archive.
                                                             (line  113)
* Autorisierte Schlüssel, SSH:           Netzwerkdienste.    (line  931)
* AutoSSH:                               Netzwerkdienste.    (line 1012)
* Backquote (Quasimaskierung):           Pakete definieren.  (line  113)
* Bag (systemnahe Paketrepräsentation):  Erstellungssysteme. (line   16)
* Benutzer:                              Benutzerkonten.     (line    6)
* Benutzerkonten:                        Benutzerkonten.     (line    6)
* Benutzeroberflächen:                   Auf Guix-Art Software verwalten.
                                                             (line    6)
* binfmt_misc:                           Virtualisierungsdienste.
                                                             (line  612)
* Bioconductor:                          Aufruf von guix import.
                                                             (line  110)
* BIOS, Bootloader:                      Bootloader-Konfiguration.
                                                             (line   21)
* BIOS-Boot, auf Intel-Maschinen:        Das Konfigurationssystem nutzen.
                                                             (line   77)
* bootloader:                            Bootloader-Konfiguration.
                                                             (line    6)
* Bootloader:                            Bootloader-Konfiguration.
                                                             (line    6)
* Bootmenü:                              Bootloader-Konfiguration.
                                                             (line  116)
* Bootstrap-Binärdateien:                Bootstrapping.      (line   16)
* Bootstrap-Binärdateien <1>:            Vorbereitung zur Verwendung der Bootstrap-Binärdateien.
                                                             (line  109)
* Bootstrapping:                         Bootstrapping.      (line    6)
* Branching-Strategie:                   Einreichen von Patches.
                                                             (line  101)
* Bug-Meldungen, Überblick:              Überblick über gemeldete Fehler und Patches.
                                                             (line    6)
* Build-Hook:                            Auslagern des Daemons einrichten.
                                                             (line    6)
* Bündel:                                Aufruf von guix pack.
                                                             (line   17)
* Cargo (Rust-Erstellungssystem):        Erstellungssysteme. (line  231)
* cat-avatar-generator:                  Web-Dienste.        (line  926)
* CD-Abbild-Format:                      Aufruf von guix system.
                                                             (line  400)
* certificates:                          Aufruf von guix environment.
                                                             (line   92)
* Cgit-Dienst:                           Versionskontrolldienste.
                                                             (line  154)
* channels.scm, Konfigurationsdatei:     Aufruf von guix pull.
                                                             (line  107)
* channels.scm, Konfigurationsdatei <1>: Kanäle.             (line    6)
* chroot:                                Einrichten der Erstellungsumgebung.
                                                             (line   55)
* chroot <1>:                            Aufruf des guix-daemon.
                                                             (line   17)
* Clojure (Programmiersprache):          Erstellungssysteme. (line  324)
* Cluster, Einrichtung des Daemons:      Aufruf des guix-daemon.
                                                             (line  247)
* Cluster, Einrichtung des Daemons <1>:  Der Store.          (line   55)
* Code-Schnipsel:                        Perfekt eingerichtet.
                                                             (line   36)
* Code-Stil:                             Formatierung von Code.
                                                             (line    6)
* Commit-Zugriff, für Entwickler:        Commit-Zugriff.     (line    6)
* Connman:                               Netzwerkdienste.    (line  224)
* container:                             Aufruf von guix environment.
                                                             (line   78)
* container <1>:                         Aufruf von guix environment.
                                                             (line  239)
* container <2>:                         Aufruf von guix container.
                                                             (line    6)
* Container, Erstellungsumgebung:        Aufruf des guix-daemon.
                                                             (line   17)
* Copyright einfügen oder aktualisieren: Perfekt eingerichtet.
                                                             (line   63)
* CPAN:                                  Aufruf von guix import.
                                                             (line   95)
* CPU-Frequenzskalierung mit Thermald:   Dienste zur Stromverbrauchsverwaltung.
                                                             (line  461)
* CRAN:                                  Aufruf von guix import.
                                                             (line  110)
* crate:                                 Aufruf von guix import.
                                                             (line  355)
* cron:                                  Geplante Auftragsausführung.
                                                             (line    6)
* Cross-Kompilieren:                     Aufruf von guix pack.
                                                             (line  265)
* Cross-Kompilieren <1>:                 Pakete definieren.  (line  168)
* Cross-Kompilieren <2>:                 G-Ausdrücke.        (line   84)
* Cross-Kompilieren <3>:                 Zusätzliche Erstellungsoptionen.
                                                             (line  198)
* Cross-Kompilieren, Paketabhängigkeiten: „package“-Referenz.
                                                             (line   54)
* CTAN:                                  Aufruf von guix import.
                                                             (line  147)
* CVE, Common Vulnerabilities and Exposures: Aufruf von guix lint.
                                                             (line   71)
* Daemon:                                Den Daemon einrichten.
                                                             (line    6)
* Daemon, Einrichten auf Clustern:       Aufruf des guix-daemon.
                                                             (line  247)
* Daemon, Einrichten auf Clustern <1>:   Der Store.          (line   55)
* Daemon, Fernzugriff:                   Aufruf des guix-daemon.
                                                             (line  247)
* Daemon, Fernzugriff <1>:               Der Store.          (line   55)
* Daemons:                               Dienstkompositionen.
                                                             (line    6)
* DAG:                                   Aufruf von guix graph.
                                                             (line    6)
* darkstat:                              Systemüberwachungsdienste.
                                                             (line  113)
* dateiartige Objekte:                   G-Ausdrücke.        (line  324)
* Dateien zur Fehlersuche:               Dateien zur Fehlersuche installieren.
                                                             (line    6)
* Datenbank:                             Datenbankdienste.   (line    6)
* Datenbeschädigung, Behebung:           Aufruf von guix gc. (line  187)
* Datenbeschädigung, Behebung <1>:       Zusätzliche Erstellungsoptionen.
                                                             (line  219)
* ddclient:                              DNS-Dienste.        (line  650)
* Debbugs, Mumi-Weboberfläche:           Web-Dienste.        (line  704)
* Debbugs, System zum Überblicken gemeldeter Fehler: Überblick über gemeldete Fehler und Patches.
                                                             (line    6)
* Deduplizieren:                         Aufruf des guix-daemon.
                                                             (line  179)
* Deduplizieren <1>:                     Aufruf von guix gc. (line  197)
* Determinismus, von Erstellungsprozessen: Einreichen von Patches.
                                                             (line  133)
* Determinismus, Überprüfung:            Zusätzliche Erstellungsoptionen.
                                                             (line  203)
* DHCP:                                  Tastaturbelegung und Netzwerkanbindung und Partitionierung.
                                                             (line   85)
* DHCP, Netzwerkdienst:                  Netzwerkdienste.    (line    9)
* Diensterweiterungen:                   Dienstkompositionen.
                                                             (line   21)
* Diensttyp:                             Service-Referenz.   (line   99)
* Diensttypen:                           Dienstkompositionen.
                                                             (line   50)
* digitale Signaturen:                   Substitutauthentifizierung.
                                                             (line    6)
* DNS (Domain Name System):              DNS-Dienste.        (line    6)
* Docker:                                Verschiedene Dienste.
                                                             (line  234)
* Docker, ein Abbild erstellen mit guix pack: Aufruf von guix pack.
                                                             (line   61)
* documentation:                         Pakete mit mehreren Ausgaben..
                                                             (line   28)
* Dokumentation, Suche danach:           Dokumentation.      (line    6)
* Domain Name System (DNS):              DNS-Dienste.        (line    6)
* downgrade attacks, protection against: Aufruf von guix pull.
                                                             (line  189)
* Druckerunterstützung mit CUPS:         Druckdienste.       (line    6)
* Dual-Boot:                             Bootloader-Konfiguration.
                                                             (line  116)
* DVD-Abbild-Format:                     Aufruf von guix system.
                                                             (line  400)
* E-Mail-Alias-Namen:                    Mail-Dienste.       (line 1681)
* Early-Out-Of-Memory-Daemon:            Linux-Dienste.      (line    6)
* earlyoom:                              Linux-Dienste.      (line    6)
* Echtzeit:                              Basisdienste.       (line  774)
* Echtzeituhr:                           Netzwerkdienste.    (line  403)
* EFI, Bootloader:                       Bootloader-Konfiguration.
                                                             (line   21)
* EFI, Installation:                     Tastaturbelegung und Netzwerkanbindung und Partitionierung.
                                                             (line  137)
* EFI-Boot:                              Das Konfigurationssystem nutzen.
                                                             (line   77)
* Eigene Pakete (Kanäle):                Kanäle.             (line   41)
* einfaches Clojure-Erstellungssystem:   Erstellungssysteme. (line  324)
* Eingaben umschreiben:                  Pakete definieren.  (line  180)
* Eingaben, für Python-Pakete:           Python-Module.      (line   30)
* Eingaben, von Paketen:                 „package“-Referenz. (line   39)
* einmalig ausgeführte Dienste, für Shepherd: Shepherd-Dienste.
                                                             (line   48)
* Einrückung, Code-:                     Formatierung von Code.
                                                             (line   21)
* Einsprungpunkt, für Docker-Abbilder:   Aufruf von guix pack.
                                                             (line  214)
* elpa:                                  Aufruf von guix import.
                                                             (line  321)
* emacs:                                 Anwendungen einrichten.
                                                             (line  153)
* email:                                 Mail-Dienste.       (line    6)
* Emulation:                             Virtualisierungsdienste.
                                                             (line  612)
* Entfernen von Paketen:                 Aufruf von guix package.
                                                             (line    6)
* Entwicklungsumgebungen:                Aufruf von guix environment.
                                                             (line    6)
* env, in /usr/bin:                      Basisdienste.       (line   38)
* Ersetzungen von Paketen, bei Veredelungen: Sicherheitsaktualisierungen.
                                                             (line   43)
* Erstellungs-Daemon:                    Auf Guix-Art Software verwalten.
                                                             (line   11)
* Erstellungsbenutzer:                   Einrichten der Erstellungsumgebung.
                                                             (line   15)
* Erstellungscode maskieren:             G-Ausdrücke.        (line    6)
* Erstellungsfarm:                       Offizieller Substitut-Server.
                                                             (line    6)
* Erstellungsfehler, Fehlersuche:        Fehlschläge beim Erstellen untersuchen.
                                                             (line    6)
* Erstellungsphasen:                     Erstellungssysteme. (line   42)
* Erstellungsphasen <1>:                 Erstellungssysteme. (line  907)
* Erstellungsprotokolle, Ausführlichkeit: Gemeinsame Erstellungsoptionen.
                                                             (line  120)
* Erstellungsprotokolle, Veröffentlichen: Aufruf von guix publish.
                                                             (line   67)
* Erstellungsprotokolle, Zugriff:        Zusätzliche Erstellungsoptionen.
                                                             (line  244)
* Erstellungssystem:                     Erstellungssysteme. (line    6)
* Erstellungsumgebung:                   Einrichten der Erstellungsumgebung.
                                                             (line    6)
* Erstellungsumgebung <1>:               Aufruf des guix-daemon.
                                                             (line   17)
* Erstellungszeitabhängigkeiten:         Ableitungen.        (line   14)
* Erweiterbarkeit der Distribution:      Auf Guix-Art Software verwalten.
                                                             (line   16)
* Erweiterungen, für G-Ausdrücke:        G-Ausdrücke.        (line  144)
* Erzeugen von System-Disk-Images in verschiedenen Formaten: Aufruf von guix system.
                                                             (line  263)
* ESP, EFI-Systempartition:              Tastaturbelegung und Netzwerkanbindung und Partitionierung.
                                                             (line  137)
* essenzielle Dienste:                   „operating-system“-Referenz.
                                                             (line  191)
* fastcgi:                               Web-Dienste.        (line  738)
* fc-cache:                              Anwendungen einrichten.
                                                             (line  103)
* fcgiwrap:                              Web-Dienste.        (line  738)
* Fehlerstrategie:                       Aufruf von guix system.
                                                             (line  439)
* Fensterverwaltung:                     X Window.           (line   18)
* Fernzugriff auf den Daemon:            Aufruf des guix-daemon.
                                                             (line  247)
* Fernzugriff auf den Daemon <1>:        Der Store.          (line   55)
* Festsetzen, bei Kanälen:               Kanäle.             (line  247)
* Festsetzen, bei Kanälen <1>:           Aufruf von time-machine.
                                                             (line    6)
* Fingerabdruck:                         Verschiedene Dienste.
                                                             (line    6)
* Firmware:                              „operating-system“-Referenz.
                                                             (line   80)
* Font-Cache:                            Anwendungen einrichten.
                                                             (line  103)
* Formatierung von Code:                 Formatierung von Code.
                                                             (line    6)
* Formatierung, Code-:                   Formatierung von Code.
                                                             (line   21)
* freie Software:                        Software-Freiheit.  (line    6)
* Fremddistribution:                     Installation.       (line   14)
* Fremddistribution <1>:                 Anwendungen einrichten.
                                                             (line    6)
* funktionale Paketverwaltung:           Auf Guix-Art Software verwalten.
                                                             (line   26)
* G-Ausdruck:                            G-Ausdrücke.        (line    6)
* GC-Wurzeln:                            Aufruf des guix-daemon.
                                                             (line  194)
* GC-Wurzeln <1>:                        Aufruf von guix gc. (line   13)
* GC-Wurzeln, Hinzufügen:                Zusätzliche Erstellungsoptionen.
                                                             (line  233)
* GCC:                                   GCC-Toolchain.      (line    6)
* GDM:                                   X Window.           (line   13)
* gebündelt:                             Einreichen von Patches.
                                                             (line   70)
* Geheimnisse, Knot-Dienst:              DNS-Dienste.        (line  486)
* gem:                                   Aufruf von guix import.
                                                             (line   72)
* gemeldete Fehler überblicken:          Überblick über gemeldete Fehler und Patches.
                                                             (line    6)
* Generationen:                          Aufruf von guix package.
                                                             (line  268)
* Generationen <1>:                      Aufruf von guix package.
                                                             (line  475)
* Generationen <2>:                      Aufruf von guix pull.
                                                             (line  144)
* Generationen <3>:                      Aufruf von guix system.
                                                             (line  115)
* Gerätezuordnung:                       Zugeordnete Geräte. (line    6)
* git send-email:                        Einreichen von Patches.
                                                             (line  212)
* Git, den neuesten Commit benutzen:     Paketumwandlungsoptionen.
                                                             (line   93)
* Git, Server anbieten („hosten“):       Versionskontrolldienste.
                                                             (line  954)
* Git, Weboberfläche:                    Versionskontrolldienste.
                                                             (line  154)
* git-send-email:                        Einreichen von Patches.
                                                             (line  212)
* Gitolite-Dienst:                       Versionskontrolldienste.
                                                             (line  954)
* Global Security System:                Network File System.
                                                             (line  127)
* GNOME, Anmeldeverwaltung:              X Window.           (line   13)
* GNU-Erstellungssystem:                 Pakete definieren.  (line   81)
* GNU-Mailutils-IMAP4-Daemon:            Mail-Dienste.       (line 1707)
* gpm:                                   Basisdienste.       (line  675)
* Gruppen:                               Benutzerkonten.     (line   37)
* Gruppen <1>:                           Benutzerkonten.     (line  104)
* Größe:                                 Aufruf von guix size.
                                                             (line    6)
* GSS:                                   Network File System.
                                                             (line  127)
* GSSD:                                  Network File System.
                                                             (line  127)
* guix archive:                          Aufruf von guix archive.
                                                             (line    6)
* Guix aus Binärdateien installieren:    Aus Binärdatei installieren.
                                                             (line    6)
* guix build:                            Aufruf von guix build.
                                                             (line    6)
* guix challenge:                        Aufruf von guix challenge.
                                                             (line    6)
* guix container:                        Aufruf von guix container.
                                                             (line    6)
* guix download:                         Aufruf von guix download.
                                                             (line    6)
* guix edit:                             Aufruf von guix edit.
                                                             (line    6)
* guix environment:                      Aufruf von guix environment.
                                                             (line    6)
* guix graph:                            Aufruf von guix graph.
                                                             (line    6)
* guix hash:                             Aufruf von guix hash.
                                                             (line    6)
* guix import aufrufen:                  Aufruf von guix import.
                                                             (line    6)
* Guix installieren:                     Installation.       (line    6)
* guix lint:                             Aufruf von guix lint.
                                                             (line    6)
* guix publish:                          Aufruf von guix publish.
                                                             (line    6)
* guix pull:                             Aufruf von guix pull.
                                                             (line    6)
* guix pull für den root-Administratornutzer, auf einer Fremddistribution: Aktualisieren von Guix.
                                                             (line   12)
* guix pull, Konfigurationsdatei:        Kanäle.             (line    6)
* guix refresh:                          Aufruf von guix refresh.
                                                             (line    6)
* guix size:                             Aufruf von guix size.
                                                             (line    6)
* Guix System:                           Einführung.         (line   15)
* Guix System <1>:                       GNU-Distribution.   (line    6)
* Guix System Distribution, welche jetzt Guix System heißt: Einführung.
                                                             (line   15)
* Guix System, Installation:             Systeminstallation. (line    6)
* guix time-machine:                     Aufruf von time-machine.
                                                             (line    6)
* Guix-Binärdatei herunterladen:         Aus Binärdatei installieren.
                                                             (line   26)
* GuixSD, was jetzt Guix System heißt:   Einführung.         (line   15)
* hackage:                               Aufruf von guix import.
                                                             (line  242)
* Handbuchseiten („Man-Pages“):          Dokumentation.      (line    6)
* Hardwareunterstützung von Guix System: Hardware-Überlegungen.
                                                             (line    6)
* HDPI:                                  Bootloader-Konfiguration.
                                                             (line  175)
* HDPI <1>:                              Aufruf von guix system.
                                                             (line   22)
* Herunterbrechen, von abstrakten Objekten in G-Ausdrücken: G-Ausdrücke.
                                                             (line   53)
* Herunterbrechen, von abstrakten Objekten in G-Ausdrücken <1>: G-Ausdrücke.
                                                             (line  570)
* HiDPI:                                 Bootloader-Konfiguration.
                                                             (line  175)
* HiDPI <1>:                             Aufruf von guix system.
                                                             (line   22)
* hostapd service, for Wi-Fi access points: Netzwerkdienste. (line  280)
* hosts-Datei:                           „operating-system“-Referenz.
                                                             (line   93)
* hpcguix-web:                           Web-Dienste.        (line  954)
* HTTP:                                  Web-Dienste.        (line    6)
* HTTP, HTTPS:                           Zertifikatsdienste. (line    6)
* HTTP-Proxy, für guix-daemon:           Basisdienste.       (line  547)
* HTTPS, Zertifikate:                    X.509-Zertifikate.  (line    6)
* hurd:                                  „operating-system“-Referenz.
                                                             (line   19)
* idmapd:                                Network File System.
                                                             (line  151)
* IMAP:                                  Mail-Dienste.       (line 1413)
* importierte Module, in G-Ausdrücken:   G-Ausdrücke.        (line  105)
* inetd:                                 Netzwerkdienste.    (line  520)
* Info, Dokumentationsformat:            Dokumentation.      (line    6)
* init-System:                           Shepherd-Dienste.   (line    6)
* initiale RAM-Disk:                     „operating-system“-Referenz.
                                                             (line   68)
* initiale RAM-Disk <1>:                 Initiale RAM-Disk.  (line    6)
* initiale RAM-Disk <2>:                 Initiale RAM-Disk.  (line  109)
* initrd:                                „operating-system“-Referenz.
                                                             (line   68)
* initrd <1>:                            Initiale RAM-Disk.  (line    6)
* initrd <2>:                            Initiale RAM-Disk.  (line  109)
* Inkompatibilität, von Locale-Daten:    Locales.            (line   82)
* inputattach:                           Verschiedene Dienste.
                                                             (line  103)
* Installations-Skript:                  Aus Binärdatei installieren.
                                                             (line    6)
* Installationsabbild:                   Ein Abbild zur Installation erstellen.
                                                             (line    6)
* Installieren von Guix System:          Systeminstallation. (line    6)
* Installieren von Paketen:              Aufruf von guix package.
                                                             (line    6)
* Integrität, des Stores:                Aufruf von guix gc. (line  171)
* Integritätsprüfung:                    Aufruf von guix gc. (line  171)
* Internettelefonie-Server (VoIP):       Telefondienste.     (line    6)
* iptables:                              Netzwerkdienste.    (line  335)
* IRC (Internet Relay Chat):             Kurznachrichtendienste.
                                                             (line  442)
* IRC (Internet Relay Chat) <1>:         Kurznachrichtendienste.
                                                             (line  483)
* IRC-Zugang („Gateway“):                Kurznachrichtendienste.
                                                             (line  442)
* ISO-9660-Format:                       Aufruf von guix system.
                                                             (line  400)
* Isolierung:                            Auf Guix-Art Software verwalten.
                                                             (line   26)
* Jabber:                                Kurznachrichtendienste.
                                                             (line    6)
* jackd:                                 Basisdienste.       (line  774)
* java:                                  Java-Pakete.        (line    6)
* JSON:                                  Aufruf von guix describe.
                                                             (line   73)
* JSON, Import:                          Aufruf von guix import.
                                                             (line  174)
* Kanäle:                                Kanäle.             (line    6)
* Kanäle, für eigene Pakete:             Kanäle.             (line   41)
* Kerberos:                              Kerberos-Dienste.   (line    6)
* Kernel-Module, Sperrliste:             Initiale RAM-Disk.  (line   91)
* Kernelmodule laden:                    Linux-Dienste.      (line   68)
* Keymap:                                Tastaturbelegung.   (line    6)
* Keymap, für Xorg:                      X Window.           (line  326)
* Kollisionen, in einem Profil:          Aufruf von guix package.
                                                             (line  351)
* Komma (Demaskierung):                  Pakete definieren.  (line  113)
* Konfiguration von guix pull:           Kanäle.             (line    6)
* Konfigurationsdatei für Kanäle:        Aufruf von guix pull.
                                                             (line  107)
* Konfigurationsdatei für Kanäle <1>:    Kanäle.             (line    6)
* Konten:                                Benutzerkonten.     (line    6)
* Kontinuierliche Integration:           Paketumwandlungsoptionen.
                                                             (line  107)
* Kontinuierliche Integration <1>:       Kontinuierliche Integration.
                                                             (line    6)
* Kontinuierliche Integration, Statistik: Aufruf von guix weather.
                                                             (line   38)
* Kopieren, von Store-Objekten, über SSH: Aufruf von guix copy.
                                                             (line    6)
* Laufwerksverschlüsselung:              Zugeordnete Geräte. (line   59)
* Laufzeitabhängigkeiten:                Ableitungen.        (line   42)
* ld-wrapper:                            GCC-Toolchain.      (line    6)
* LDAP:                                  LDAP-Dienste.       (line    6)
* Legacy-Boot, auf Intel-Maschinen:      Das Konfigurationssystem nutzen.
                                                             (line   77)
* Lese-Auswerten-Schreiben-Schleife:     Guix vor der Installation ausführen.
                                                             (line   29)
* Let’s Encrypt:                         Zertifikatsdienste. (line    6)
* linker wrapper:                        GCC-Toolchain.      (line    6)
* lirc:                                  Verschiedene Dienste.
                                                             (line   72)
* Lizenz, GNU-Lizenz für freie Dokumentation: GNU-Lizenz für freie Dokumentation.
                                                             (line    6)
* Lizenz, von Paketen:                   „package“-Referenz. (line  113)
* Locale:                                Locales.            (line    6)
* Locale-Definition:                     Locales.            (line   13)
* Locale-Name:                           Locales.            (line   73)
* Locales, nicht auf Guix System:        Anwendungen einrichten.
                                                             (line   13)
* Log-Rotation:                          Log-Rotation.       (line    6)
* LUKS:                                  Zugeordnete Geräte. (line   59)
* Löschen von Systemgenerationen:        Aufruf von guix system.
                                                             (line  168)
* M-x copyright-update:                  Perfekt eingerichtet.
                                                             (line   63)
* M-x guix-copyright:                    Perfekt eingerichtet.
                                                             (line   63)
* Mail:                                  Mail-Dienste.       (line    6)
* Mail Transfer Agent (MTA):             Mail-Dienste.       (line 1382)
* man-Pages (Handbuchseiten):            Dokumentation.      (line    6)
* Mandatory Access Control, SELinux:     SELinux-Unterstützung.
                                                             (line    6)
* Maskierung:                            Pakete definieren.  (line   92)
* Maus:                                  Basisdienste.       (line  675)
* mcron:                                 Geplante Auftragsausführung.
                                                             (line    6)
* mehrere Ausgaben, bei Paketen:         Pakete mit mehreren Ausgaben..
                                                             (line    6)
* Message of the Day:                    Basisdienste.       (line   90)
* Messaging:                             Kurznachrichtendienste.
                                                             (line    6)
* Metadaten, bei Kanälen:                Kanäle.             (line  137)
* Mischen von Guix-Versionen:            Untergeordnete.     (line   10)
* ModemManager:                          Netzwerkdienste.    (line   99)
* Modeswitching:                         Netzwerkdienste.    (line  113)
* modprobe:                              Linux-Dienste.      (line   68)
* Modulabschluss:                        G-Ausdrücke.        (line  125)
* Monade:                                Die Store-Monade.   (line    6)
* monadische Funktionen:                 Die Store-Monade.   (line   19)
* monadische Werte:                      Die Store-Monade.   (line   19)
* mpd:                                   Audio-Dienste.      (line    9)
* MTA (Mail Transfer Agent):             Mail-Dienste.       (line 1382)
* Mumi, Weboberfläche für Debbugs:       Web-Dienste.        (line  704)
* Murmur (VoIP-Internettelefonie-Server): Telefondienste.    (line    6)
* Müllsammler:                           Aufruf von guix gc. (line    6)
* Müllsammlerwurzel, für Bündel:         Aufruf von guix pack.
                                                             (line  311)
* Müllsammlerwurzel, für Umgebungen:     Aufruf von guix environment.
                                                             (line  110)
* Müllsammlerwurzeln:                    Aufruf des guix-daemon.
                                                             (line  194)
* Müllsammlerwurzeln <1>:                Aufruf von guix gc. (line   13)
* Müllsammlerwurzeln, Hinzufügen:        Zusätzliche Erstellungsoptionen.
                                                             (line  233)
* Nachbilden von Guix:                   Kanäle.             (line  247)
* Nachbilden von Guix <1>:               Aufruf von time-machine.
                                                             (line    6)
* Nachbilden von Guix <2>:               Aufruf von guix describe.
                                                             (line    6)
* Nachbildung, von Software-Umgebungen:  Funktionalitäten.   (line   84)
* Name Service Cache Daemon:             Basisdienste.       (line  369)
* Name Service Caching Daemon (nscd):    Anwendungen einrichten.
                                                             (line   48)
* Name Service Switch:                   Name Service Switch.
                                                             (line    6)
* Name Service Switch, glibc:            Anwendungen einrichten.
                                                             (line   48)
* Name-Mapper:                           Network File System.
                                                             (line  151)
* Nar, Archivformat:                     Aufruf von guix archive.
                                                             (line   52)
* Network Information Service (NIS):     Anwendungen einrichten.
                                                             (line   61)
* NetworkManager:                        Netzwerkdienste.    (line  149)
* Netzwerkverwaltung:                    Netzwerkdienste.    (line   87)
* Neuerstellungs-Zeitplan:               Einreichen von Patches.
                                                             (line  101)
* neuester Commit, davon erstellen:      Paketumwandlungsoptionen.
                                                             (line   93)
* Neuigkeiten über Kanäle:               Aufruf von guix pull.
                                                             (line  119)
* Neuigkeiten, bei Kanälen:              Kanäle.             (line  182)
* NFS:                                   Network File System.
                                                             (line    6)
* NFS, Server:                           Network File System.
                                                             (line   18)
* nftables:                              Netzwerkdienste.    (line  380)
* Nichtdeterminismus, in Paketerstellungen: Aufruf von guix challenge.
                                                             (line   71)
* NIS (Network Information Service):     Anwendungen einrichten.
                                                             (line   61)
* Nix:                                   Verschiedene Dienste.
                                                             (line  308)
* Normalisiertes Archiv (Nar):           Aufruf von guix archive.
                                                             (line   52)
* Normalisiertes Codeset in Locale-Namen: Locales.           (line   73)
* nscd:                                  Basisdienste.       (line  369)
* nscd (Name Service Caching Daemon):    Anwendungen einrichten.
                                                             (line   48)
* nscd, Ungültigmachen des Zwischenspeichers: Basisdienste.  (line  380)
* nslcd, LDAP-Dienst:                    LDAP-Dienste.       (line    6)
* NSS:                                   Name Service Switch.
                                                             (line    6)
* NSS (Name Service Switch), glibc:      Anwendungen einrichten.
                                                             (line   48)
* nss-certs:                             Anwendungen einrichten.
                                                             (line  141)
* nss-certs <1>:                         X.509-Zertifikate.  (line   22)
* nss-mdns:                              Name Service Switch.
                                                             (line   22)
* nsswitch.conf:                         Anwendungen einrichten.
                                                             (line   56)
* NTP (Network Time Protocol), Dienst:   Netzwerkdienste.    (line  403)
* ntpd, Dienst für den Network-Time-Protocol-Daemon: Netzwerkdienste.
                                                             (line  403)
* OCaml:                                 Aufruf von guix import.
                                                             (line  374)
* Offizieller Webauftritt:               Voraussetzungen.    (line   12)
* on-error:                              Aufruf von guix system.
                                                             (line  439)
* on-error-Strategie:                    Aufruf von guix system.
                                                             (line  439)
* OOM:                                   Linux-Dienste.      (line    6)
* OPAM:                                  Aufruf von guix import.
                                                             (line  374)
* OpenNTPD:                              Netzwerkdienste.    (line  457)
* OpenPGP, signed commits:               Commit-Zugriff.     (line   46)
* Out-Of-Memory-Killer:                  Linux-Dienste.      (line    6)
* Pack:                                  Aufruf von guix pack.
                                                             (line   17)
* Paketabhängigkeiten:                   Aufruf von guix gc. (line  134)
* Paketabhängigkeiten <1>:               Aufruf von guix graph.
                                                             (line    6)
* Paketausgaben:                         Pakete mit mehreren Ausgaben..
                                                             (line    6)
* Paketbeschreibung:                     Zusammenfassungen und Beschreibungen.
                                                             (line    6)
* Paketdefinition, Bearbeiten:           Aufruf von guix edit.
                                                             (line    6)
* Pakete:                                Paketverwaltung.    (line    6)
* Pakete aktualisieren:                  Aufruf von guix package.
                                                             (line  198)
* Pakete an Guix anpassen:               Aufruf von guix import.
                                                             (line    6)
* Pakete definieren:                     Paketrichtlinien.   (line    6)
* Pakete importieren:                    Aufruf von guix import.
                                                             (line    6)
* Pakete, auf Fehler prüfen:             Aufruf von guix lint.
                                                             (line    6)
* Paketentfernung:                       Aufruf von guix package.
                                                             (line    6)
* Paketerstellung:                       Aufruf von guix build.
                                                             (line    6)
* Paketgröße:                            Aufruf von guix size.
                                                             (line    6)
* Paketimport:                           Aufruf von guix import.
                                                             (line    6)
* Paketinstallation:                     Aufruf von guix package.
                                                             (line    6)
* Paketkollisionen in Profilen:          Aufruf von guix package.
                                                             (line  351)
* Paketmodulsuchpfad:                    Paketmodule.        (line   20)
* Paketname:                             Paketbenennung.     (line    6)
* Paketquellcode herunterladen:          Aufruf von guix download.
                                                             (line    6)
* Paketsammlung erweitern (Kanäle):      Kanäle.             (line   41)
* Paketumwandlungen:                     Pakete definieren.  (line  180)
* Paketvarianten:                        Paketumwandlungsoptionen.
                                                             (line    6)
* Paketversion:                          Versionsnummern.    (line    6)
* Paketzusammenfassung:                  Zusammenfassungen und Beschreibungen.
                                                             (line    6)
* PAM:                                   „operating-system“-Referenz.
                                                             (line  200)
* pam-krb5:                              Kerberos-Dienste.   (line   98)
* pam-mount:                             PAM-Einbindedienst. (line    6)
* Passwort, für Benutzerkonten:          Benutzerkonten.     (line   74)
* Patch-Einreichungen, Überblick:        Überblick über gemeldete Fehler und Patches.
                                                             (line    6)
* Patch-Reihe:                           Einreichen von Patches.
                                                             (line  212)
* Patches:                               Pakete definieren.  (line   76)
* Patchwork:                             Web-Dienste.        (line  518)
* pcscd:                                 Verschiedene Dienste.
                                                             (line   44)
* perl:                                  Perl-Module.        (line    6)
* persistente Umgebung:                  Aufruf von guix environment.
                                                             (line  110)
* php-fpm:                               Web-Dienste.        (line  791)
* PID 1:                                 Shepherd-Dienste.   (line    6)
* pipefs:                                Network File System.
                                                             (line  109)
* Planen von Aufträgen:                  Geplante Auftragsausführung.
                                                             (line    6)
* Plattenspeicher:                       Aufruf von guix gc. (line    6)
* Platz sparen:                          Aufruf von guix system.
                                                             (line  168)
* Pluggable Authentication Modules:      „operating-system“-Referenz.
                                                             (line  200)
* POP:                                   Mail-Dienste.       (line 1413)
* postgis:                               Datenbankdienste.   (line   29)
* PostgreSQL-Erweiterungspakete:         Datenbankdienste.   (line   22)
* Priorität:                             Basisdienste.       (line  774)
* Profil:                                Aufruf von guix package.
                                                             (line   43)
* Profildeklaration:                     Aufruf von guix package.
                                                             (line  218)
* Profilkollisionen:                     Aufruf von guix package.
                                                             (line  351)
* Profilmanifest:                        Aufruf von guix package.
                                                             (line  218)
* prometheus-node-exporter:              Systemüberwachungsdienste.
                                                             (line  151)
* propagierte Eingaben:                  Aufruf von guix package.
                                                             (line   82)
* Protokollierung:                       Basisdienste.       (line  472)
* Protokollierung <1>:                   Log-Rotation.       (line    6)
* Provenienzverfolgung, des Betriebssystems: Aufruf von guix system.
                                                             (line   92)
* Provenienzverfolgung, des Betriebssystems <1>: Aufruf von guix system.
                                                             (line  374)
* Provenienzverfolgung, des Betriebssystems <2>: Service-Referenz.
                                                             (line  214)
* Provenienzverfolgung, von Software-Artefakten: Funktionalitäten.
                                                             (line   84)
* Proxy, bei der Systeminstallation:     Tastaturbelegung und Netzwerkanbindung und Partitionierung.
                                                             (line  100)
* Proxy, für HTTP-Zugriffe durch guix-daemon: Basisdienste.  (line  547)
* pull:                                  Aufruf von guix pull.
                                                             (line    6)
* PulseAudio, Sound-Unterstützung:       Tondienste.         (line    6)
* pypi:                                  Aufruf von guix import.
                                                             (line   52)
* python:                                Python-Module.      (line    6)
* QEMU:                                  Guix in einer VM starten.
                                                             (line   26)
* quote:                                 Pakete definieren.  (line   92)
* references:                            Ableitungen.        (line   42)
* Reparieren von Store-Objekten:         Zusätzliche Erstellungsoptionen.
                                                             (line  219)
* REPL:                                  Guix vor der Installation ausführen.
                                                             (line   29)
* REPL (Lese-Auswerten-Schreiben-Schleife): Aufruf von guix repl.
                                                             (line    6)
* Reproduzierbare Erstellungen:          Aufruf des guix-daemon.
                                                             (line   17)
* Reproduzierbare Erstellungen <1>:      Funktionalitäten.   (line   53)
* Reproduzierbare Erstellungen <2>:      Substitutauthentifizierung.
                                                             (line   19)
* Reproduzierbare Erstellungen <3>:      Aufruf von guix challenge.
                                                             (line    6)
* Reproduzierbare Erstellungen, Überprüfung: Einreichen von Patches.
                                                             (line  133)
* reproduzierbare Erstellungsumgebungen: Aufruf von guix environment.
                                                             (line    6)
* Reproduzierbarkeit:                    Funktionalitäten.   (line   53)
* Reproduzierbarkeit <1>:                Aufruf von guix describe.
                                                             (line    6)
* Reproduzierbarkeit von Guix:           Kanäle.             (line  247)
* Reproduzierbarkeit von Guix <1>:       Aufruf von time-machine.
                                                             (line    6)
* Reproduzierbarkeit, Überprüfung:       Zusätzliche Erstellungsoptionen.
                                                             (line  203)
* rottlog:                               Log-Rotation.       (line    6)
* rpcbind:                               Network File System.
                                                             (line   86)
* rpc_pipefs:                            Network File System.
                                                             (line  109)
* rust:                                  Rust-Crates.        (line    6)
* Rust-Programmiersprache:               Erstellungssysteme. (line  231)
* RYF, Respects Your Freedom:            Hardware-Überlegungen.
                                                             (line   26)
* rücksetzen:                            Aufruf von guix package.
                                                             (line  251)
* rücksetzen <1>:                        Aufruf von guix pull.
                                                             (line  139)
* rücksetzen <2>:                        Aufruf von guix system.
                                                             (line  157)
* Scanner, Zugriff auf:                  Desktop-Dienste.    (line  382)
* Schichten von Code:                    G-Ausdrücke.        (line   14)
* Schriftarten:                          Anwendungen einrichten.
                                                             (line   96)
* Schriftarten <1>:                      Schriftarten.       (line    6)
* SELinux, Einschränkungen:              SELinux-Unterstützung.
                                                             (line   38)
* SELinux, Policy für den Daemon:        SELinux-Unterstützung.
                                                             (line    6)
* SELinux, Policy installieren:          SELinux-Unterstützung.
                                                             (line   16)
* services:                              Das Konfigurationssystem nutzen.
                                                             (line  133)
* services <1>:                          Dienstkompositionen.
                                                             (line    6)
* setuid-Programme:                      Setuid-Programme.   (line    6)
* sh, in /bin:                           Basisdienste.       (line   36)
* Shepherd-Dienste:                      Shepherd-Dienste.   (line    6)
* shortest path, between packages:       Aufruf von guix graph.
                                                             (line  156)
* Sicherheit:                            Substitut-Server autorisieren.
                                                             (line    6)
* Sicherheit, des guix-daemon:           SELinux-Unterstützung.
                                                             (line    6)
* Sicherheitsaktualisierungen:           Sicherheitsaktualisierungen.
                                                             (line    6)
* Sicherheitslücken:                     Aufruf von guix lint.
                                                             (line   71)
* Sicherheitslücken <1>:                 Sicherheitsaktualisierungen.
                                                             (line    6)
* Signieren, von Archiven:               Aufruf von guix archive.
                                                             (line   98)
* Singularity, ein Abbild erstellen mit guix pack: Aufruf von guix pack.
                                                             (line   79)
* Sitzungs-Limits:                       Basisdienste.       (line  774)
* Sitzungstypen (X11):                   X Window.           (line   30)
* SMTP:                                  Mail-Dienste.       (line 1382)
* Software Heritage, Quellcode-Archiv:   Aufruf von guix lint.
                                                             (line   42)
* Software-Bündel:                       Aufruf von guix pack.
                                                             (line   17)
* Softwareentwicklung:                   Entwicklung.        (line    6)
* Sound-Unterstützung:                   Tondienste.         (line    6)
* Sperrliste, von Kernel-Modulen:        Initiale RAM-Disk.  (line   91)
* spice:                                 Verschiedene Dienste.
                                                             (line   91)
* SQL:                                   Datenbankdienste.   (line    6)
* SquashFS, ein Abbild erstellen mit guix pack: Aufruf von guix pack.
                                                             (line   79)
* SSH:                                   Netzwerkdienste.    (line  756)
* SSH <1>:                               Netzwerkdienste.    (line  799)
* SSH <2>:                               Guix in einer VM starten.
                                                             (line   95)
* SSH, autorisierte Schlüssel:           Netzwerkdienste.    (line  931)
* SSH, Kopieren von Store-Objekten:      Aufruf von guix copy.
                                                             (line    6)
* SSH-Server:                            Netzwerkdienste.    (line  756)
* SSH-Server <1>:                        Netzwerkdienste.    (line  799)
* SSH-Server <2>:                        Guix in einer VM starten.
                                                             (line   95)
* SSH-Zugriff auf Erstellungs-Daemons:   Der Store.          (line   73)
* stackage:                              Aufruf von guix import.
                                                             (line  289)
* Statistik, für Substitute:             Aufruf von guix weather.
                                                             (line   15)
* Store:                                 Auf Guix-Art Software verwalten.
                                                             (line   43)
* Store <1>:                             Der Store.          (line    6)
* Store, reparieren:                     Aufruf von guix gc. (line  187)
* Store-Objekte:                         Der Store.          (line    6)
* Store-Objekte exportieren:             Aufruf von guix archive.
                                                             (line   16)
* Store-Objekte zwischen Maschinen teilen: Aufruf von guix copy.
                                                             (line    6)
* Store-Pfade:                           Der Store.          (line    6)
* Stromverbrauch mit TLP verwalten:      Dienste zur Stromverbrauchsverwaltung.
                                                             (line    6)
* Substituierer:                         Paketrichtlinien.   (line   59)
* Substitute:                            Aufruf des guix-daemon.
                                                             (line   53)
* Substitute <1>:                        Funktionalitäten.   (line   66)
* Substitute <2>:                        Substitute.         (line    6)
* Substitute, deren Autorisierung:       Aus Binärdatei installieren.
                                                             (line  136)
* Substitute, deren Autorisierung <1>:   Substitut-Server autorisieren.
                                                             (line    6)
* Substitute, deren Autorisierung <2>:   Basisdienste.       (line  510)
* Substitute, wie man sie ausschaltet:   Substitut-Server autorisieren.
                                                             (line   51)
* Substitutverfügbarkeit:                Aufruf von guix weather.
                                                             (line   15)
* Suche nach Paketen:                    Aufruf von guix package.
                                                             (line  370)
* Suchen nach Dokumentation:             Dokumentation.      (line    6)
* Suchpfade:                             Aufruf von guix package.
                                                             (line   47)
* Suchpfade <1>:                         Aufruf von guix package.
                                                             (line  283)
* sudo, Wirkung auf guix pull:           Nach der Systeminstallation.
                                                             (line   19)
* sudoers-Datei:                         „operating-system“-Referenz.
                                                             (line  208)
* Swap-Geräte:                           „operating-system“-Referenz.
                                                             (line  106)
* Swap-Verschlüsselung:                  Zugeordnete Geräte. (line   84)
* sysctl:                                Verschiedene Dienste.
                                                             (line   19)
* syslog:                                Basisdienste.       (line  472)
* syslog <1>:                            Basisdienste.       (line  481)
* System-Disk-Images, Erstellung in verschiedenen Formaten: Aufruf von guix system.
                                                             (line  263)
* Systemdienst:                          Dienstkompositionen.
                                                             (line   42)
* Systemdienste:                         Dienste.            (line    6)
* Systemkonfiguration:                   Systemkonfiguration.
                                                             (line    6)
* Tablett-Eingaben, für Xorg:            Verschiedene Dienste.
                                                             (line  106)
* Tastaturbelegung:                      Tastaturbelegung und Netzwerkanbindung und Partitionierung.
                                                             (line   14)
* Tastaturbelegung <1>:                  Tastaturbelegung.   (line    6)
* Tastaturbelegung, beim Bootloader:     Bootloader-Konfiguration.
                                                             (line   69)
* Tastaturbelegung, Definition:          Tastaturbelegung.   (line   16)
* Tastaturbelegung, für Xorg:            X Window.           (line  326)
* Tastaturbelegung, Konfiguration:       Tastaturbelegung.   (line   80)
* Tastbildschirm-Eingaben, für Xorg:     Verschiedene Dienste.
                                                             (line  106)
* Testkatalog:                           Den Testkatalog laufen lassen.
                                                             (line    6)
* TeX Live:                              Aufruf von guix import.
                                                             (line  147)
* Texinfo-Auszeichnungen, in Paketbeschreibungen: Zusammenfassungen und Beschreibungen.
                                                             (line   46)
* thermald:                              Dienste zur Stromverbrauchsverwaltung.
                                                             (line  461)
* Tipparbeit sparen:                     Perfekt eingerichtet.
                                                             (line   36)
* TLP:                                   Dienste zur Stromverbrauchsverwaltung.
                                                             (line    6)
* TLS:                                   X.509-Zertifikate.  (line    6)
* TLS-Zertifikate:                       Zertifikatsdienste. (line    6)
* toolchain, for C development:          GCC-Toolchain.      (line    6)
* toolchain, for Fortran development:    GCC-Toolchain.      (line    6)
* Tor:                                   Netzwerkdienste.    (line  611)
* Transaktionen:                         Funktionalitäten.   (line   28)
* Transaktionen <1>:                     Aufruf von guix package.
                                                             (line   14)
* Transaktionen, zurücksetzen:           Aufruf von guix package.
                                                             (line  251)
* Transaktionen, zurücksetzen <1>:       Aufruf von guix pull.
                                                             (line  139)
* UEFI, Bootloader:                      Bootloader-Konfiguration.
                                                             (line   21)
* UEFI, Installation:                    Tastaturbelegung und Netzwerkanbindung und Partitionierung.
                                                             (line  137)
* UEFI-Boot:                             Das Konfigurationssystem nutzen.
                                                             (line   77)
* ulimit:                                Basisdienste.       (line  774)
* Umgebung, Paketerstellungsumgebung:    Aufruf von guix environment.
                                                             (line    6)
* ungültige Store-Objekte:               Der Store.          (line  118)
* Untergeordnete:                        Untergeordnete.     (line   10)
* Untergeordnete <1>:                    Aufruf von guix repl.
                                                             (line   18)
* untergeordnete Pakete:                 Untergeordnete.     (line   15)
* untergeordnete Pakete <1>:             Untergeordnete.     (line   85)
* Unterverzeichnis, Kanäle:              Kanäle.             (line  170)
* Updaten von Guix:                      Aufruf von guix pull.
                                                             (line    6)
* USB_ModeSwitch:                        Netzwerkdienste.    (line  113)
* Varnish:                               Web-Dienste.        (line  436)
* Veredelungen:                          Sicherheitsaktualisierungen.
                                                             (line   32)
* Verfügbarkeit von Substituten:         Aufruf von guix weather.
                                                             (line   15)
* Verhaltenskodex für Mitwirkende:       Mitwirken.          (line   13)
* Verhaltensregeln, für Mitwirkende:     Mitwirken.          (line   13)
* verifizierbare Erstellungen:           Aufruf von guix challenge.
                                                             (line    6)
* verschiebliche Binärdateien:           Aufruf von guix pack.
                                                             (line  130)
* verschiebliche Binärdateien, mit guix pack: Aufruf von guix pack.
                                                             (line   53)
* verschlüsselte Partition:              Tastaturbelegung und Netzwerkanbindung und Partitionierung.
                                                             (line  174)
* verschlüsselte Partition <1>:          Das Konfigurationssystem nutzen.
                                                             (line  180)
* Versionsnummer, bei Snapshots aus Versionskontrolle: Versionsnummern.
                                                             (line   40)
* versteckter Dienst:                    Netzwerkdienste.    (line  662)
* Vertrauen, gegenüber vorerstellten Binärdateien: Vom Vertrauen gegenüber Binärdateien.
                                                             (line    6)
* Verzeichnisse auf einer Fremddistribution: Installation.   (line   14)
* Vim, zum Editieren von Scheme-Code:    Formatierung von Code.
                                                             (line   34)
* Virtual Private Network (VPN):         VPN-Dienste.        (line    6)
* Virtual Private Server (VPS):          Guix in einer VM installieren.
                                                             (line    6)
* virtuelle Maschine:                    Aufruf von guix system.
                                                             (line  214)
* virtuelle Maschine <1>:                Guix in einer VM starten.
                                                             (line    6)
* virtuelle Maschine, Guix System installieren: Guix in einer VM installieren.
                                                             (line    6)
* VM:                                    Aufruf von guix system.
                                                             (line  214)
* vorerstellte Binärdateien:             Substitute.         (line    6)
* Vorlagen:                              Perfekt eingerichtet.
                                                             (line   36)
* VPN (Virtual Private Network):         VPN-Dienste.        (line    6)
* VPS (Virtual Private Server):          Guix in einer VM installieren.
                                                             (line    6)
* Web:                                   Web-Dienste.        (line    6)
* Web <1>:                               Zertifikatsdienste. (line    6)
* wesnothd:                              Spieldienste.       (line    9)
* Wetter, Substitutverfügbarkeit:        Aufruf von guix weather.
                                                             (line   15)
* Wi-Fi access points, hostapd service:  Netzwerkdienste.    (line  280)
* wicd:                                  Netzwerkdienste.    (line   87)
* WiFi:                                  Tastaturbelegung und Netzwerkanbindung und Partitionierung.
                                                             (line   56)
* WiFi <1>:                              Netzwerkdienste.    (line   87)
* WLAN:                                  Tastaturbelegung und Netzwerkanbindung und Partitionierung.
                                                             (line   56)
* WLAN <1>:                              Netzwerkdienste.    (line   87)
* WLAN, Hardware-Unterstützung:          Hardware-Überlegungen.
                                                             (line   16)
* WPA-Supplikant:                        Netzwerkdienste.    (line  247)
* WWW:                                   Web-Dienste.        (line    6)
* Wörterbuch:                            Verschiedene Dienste.
                                                             (line  135)
* X Window System:                       X Window.           (line    6)
* X.509-Zertifikate:                     X.509-Zertifikate.  (line    6)
* X11:                                   X Window.           (line    6)
* X11-Anmeldung:                         X Window.           (line  265)
* X11-Sitzungstypen:                     X Window.           (line   30)
* XKB, Tastaturbelegungen:               Tastaturbelegung.   (line   37)
* xlsfonts:                              Anwendungen einrichten.
                                                             (line  134)
* XMPP:                                  Kurznachrichtendienste.
                                                             (line    6)
* Xorg, Konfiguration:                   X Window.           (line  296)
* xterm:                                 Anwendungen einrichten.
                                                             (line  121)
* Zabbix, Zabbix-Agent:                  Systemüberwachungsdienste.
                                                             (line  290)
* Zabbix, Zabbix-Frontend:               Systemüberwachungsdienste.
                                                             (line  368)
* Zabbix, Zabbix-Server:                 Systemüberwachungsdienste.
                                                             (line  180)
* zugeordnete Geräte:                    Zugeordnete Geräte. (line    6)
* Zurücksetzen von Transaktionen:        Aufruf von guix package.
                                                             (line  251)
* Zurücksetzen von Transaktionen <1>:    Aufruf von guix pull.
                                                             (line  139)
* Zurücksetzen, des Betriebssystems:     Das Konfigurationssystem nutzen.
                                                             (line  362)
* Zustandsmonade:                        Die Store-Monade.   (line  165)
* Zustandsverzeichnis:                   Voraussetzungen.    (line   55)
* Zweck:                                 Einführung.         (line    6)
* Zwischenspeicher ungültig machen, nscd: Basisdienste.      (line  380)
* Über SSH installieren:                 Tastaturbelegung und Netzwerkanbindung und Partitionierung.
                                                             (line  108)
* Übertragen von Store-Objekten zwischen Maschinen: Aufruf von guix copy.
                                                             (line    6)


File: guix.de.info,  Node: Programmierverzeichnis,  Prev: Konzeptverzeichnis,  Up: Top

Programmierverzeichnis
**********************

 [index ]
* Menu:

* #~AUSDRUCK:                            G-Ausdrücke.        (line  161)
* %base-file-systems:                    Dateisysteme.       (line  133)
* %base-groups:                          Benutzerkonten.     (line  133)
* %base-initrd-modules:                  Initiale RAM-Disk.  (line   27)
* %base-packages:                        Das Konfigurationssystem nutzen.
                                                             (line   94)
* %base-services:                        Das Konfigurationssystem nutzen.
                                                             (line  133)
* %base-services <1>:                    Basisdienste.       (line   10)
* %base-user-accounts:                   Benutzerkonten.     (line  140)
* %binary-format-file-system:            Dateisysteme.       (line  160)
* %default-authorized-guix-keys:         Basisdienste.       (line  515)
* %default-channels:                     Kanäle.             (line   91)
* %default-httpd-modules:                Web-Dienste.        (line   69)
* %default-locale-definitions:           Locales.            (line   68)
* %default-nss:                          Name Service Switch.
                                                             (line   68)
* %default-rotations:                    Log-Rotation.       (line  100)
* %default-theme:                        X Window.           (line  168)
* %default-theme-name:                   X Window.           (line  169)
* %desktop-services:                     Desktop-Dienste.    (line   17)
* %dicod-database:gcide:                 Verschiedene Dienste.
                                                             (line  212)
* %facebook-host-aliases:                Netzwerkdienste.    (line 1084)
* %fuse-control-file-system:             Dateisysteme.       (line  166)
* %immutable-store:                      Dateisysteme.       (line  150)
* %mdns-host-lookup-nss:                 Name Service Switch.
                                                             (line   72)
* %nscd-default-caches:                  Basisdienste.       (line  459)
* %nscd-default-configuration:           Basisdienste.       (line  393)
* %ntp-servers:                          Netzwerkdienste.    (line  428)
* %openntpd-servers:                     Netzwerkdienste.    (line  473)
* %pseudo-terminal-file-system:          Dateisysteme.       (line  139)
* %random-seed-file:                     Basisdienste.       (line  669)
* %rotated-files:                        Log-Rotation.       (line  104)
* %setuid-programs:                      Setuid-Programme.   (line   35)
* %shared-memory-file-system:            Dateisysteme.       (line  145)
* %shepherd-root-service:                Shepherd-Dienste.   (line  146)
* %standard-geoclue-applications:        Desktop-Dienste.    (line  387)
* %standard-phases:                      Erstellungssysteme. (line   91)
* %state-monad:                          Die Store-Monade.   (line  169)
* %store-monad:                          Die Store-Monade.   (line  215)
* ':                                     Pakete definieren.  (line   92)
* (gexp:                                 G-Ausdrücke.        (line  162)
* ,:                                     Pakete definieren.  (line  113)
* ,@:                                    Pakete definieren.  (line  113)
* >>=:                                   Die Store-Monade.   (line  108)
* `:                                     Pakete definieren.  (line  113)
* about-filter:                          Versionskontrolldienste.
                                                             (line  175)
* about-filter <1>:                      Versionskontrolldienste.
                                                             (line  723)
* access-controls:                       Druckdienste.       (line  492)
* access-controls <1>:                   Druckdienste.       (line  523)
* access-controls <2>:                   Druckdienste.       (line  733)
* access-drivers:                        Virtualisierungsdienste.
                                                             (line  160)
* access-log:                            Druckdienste.       (line   68)
* access-log-level:                      Druckdienste.       (line  255)
* accountsservice-service:               Desktop-Dienste.    (line  239)
* add-text-to-store:                     Der Store.          (line  127)
* address:                               Mail-Dienste.       (line  149)
* admin-keepalive-count:                 Virtualisierungsdienste.
                                                             (line  474)
* admin-keepalive-interval:              Virtualisierungsdienste.
                                                             (line  468)
* admin-max-client-requests:             Virtualisierungsdienste.
                                                             (line  320)
* admin-max-clients:                     Virtualisierungsdienste.
                                                             (line  308)
* admin-max-queued-clients:              Virtualisierungsdienste.
                                                             (line  313)
* admin-max-workers:                     Virtualisierungsdienste.
                                                             (line  303)
* admin-min-workers:                     Virtualisierungsdienste.
                                                             (line  298)
* admins:                                Kurznachrichtendienste.
                                                             (line   87)
* agefile:                               Versionskontrolldienste.
                                                             (line  182)
* agetty-configuration:                  Basisdienste.       (line  136)
* agetty-service:                        Basisdienste.       (line  131)
* ahci-runtime-pm-on-ac?:                Dienste zur Stromverbrauchsverwaltung.
                                                             (line  264)
* ahci-runtime-pm-on-bat?:               Dienste zur Stromverbrauchsverwaltung.
                                                             (line  272)
* ahci-runtime-pm-timeout:               Dienste zur Stromverbrauchsverwaltung.
                                                             (line  278)
* allow-registration?:                   Kurznachrichtendienste.
                                                             (line  121)
* alsa-configuration:                    Tondienste.         (line   21)
* alsa-service-type:                     Tondienste.         (line   10)
* android-ndk-build-system:              Erstellungssysteme. (line  156)
* ant-build-system:                      Erstellungssysteme. (line  120)
* args:                                  Mail-Dienste.       (line  224)
* args <1>:                              Mail-Dienste.       (line  241)
* asdf-build-system/ecl:                 Erstellungssysteme. (line  176)
* asdf-build-system/sbcl:                Erstellungssysteme. (line  175)
* asdf-build-system/source:              Erstellungssysteme. (line  174)
* audit-level:                           Virtualisierungsdienste.
                                                             (line  404)
* audit-logging:                         Virtualisierungsdienste.
                                                             (line  417)
* auditd-configuration:                  Verschiedene Dienste.
                                                             (line  289)
* auditd-service-type:                   Verschiedene Dienste.
                                                             (line  263)
* auth-anonymous-username:               Mail-Dienste.       (line  495)
* auth-cache-negative-ttl:               Mail-Dienste.       (line  430)
* auth-cache-size:                       Mail-Dienste.       (line  412)
* auth-cache-ttl:                        Mail-Dienste.       (line  420)
* auth-debug-passwords?:                 Mail-Dienste.       (line  632)
* auth-debug?:                           Mail-Dienste.       (line  627)
* auth-default-realm:                    Mail-Dienste.       (line  447)
* auth-failure-delay:                    Mail-Dienste.       (line  537)
* auth-filter:                           Versionskontrolldienste.
                                                             (line  189)
* auth-gssapi-hostname:                  Mail-Dienste.       (line  509)
* auth-krb5-keytab:                      Mail-Dienste.       (line  516)
* auth-master-user-separator:            Mail-Dienste.       (line  484)
* auth-mechanisms:                       Mail-Dienste.       (line  555)
* auth-realms:                           Mail-Dienste.       (line  437)
* auth-socket-path:                      Mail-Dienste.       (line   68)
* auth-socket-path <1>:                  Mail-Dienste.       (line  860)
* auth-ssl-require-client-cert?:         Mail-Dienste.       (line  542)
* auth-ssl-username-from-cert?:          Mail-Dienste.       (line  547)
* auth-tcp:                              Virtualisierungsdienste.
                                                             (line  141)
* auth-tls:                              Virtualisierungsdienste.
                                                             (line  149)
* auth-unix-ro:                          Virtualisierungsdienste.
                                                             (line  125)
* auth-unix-rw:                          Virtualisierungsdienste.
                                                             (line  132)
* auth-use-winbind?:                     Mail-Dienste.       (line  524)
* auth-user-pass:                        VPN-Dienste.        (line  108)
* auth-username-chars:                   Mail-Dienste.       (line  454)
* auth-username-format:                  Mail-Dienste.       (line  473)
* auth-username-translation:             Mail-Dienste.       (line  465)
* auth-verbose-passwords:                Mail-Dienste.       (line  615)
* auth-verbose?:                         Mail-Dienste.       (line  610)
* auth-winbind-helper-path:              Mail-Dienste.       (line  532)
* auth-worker-max-count:                 Mail-Dienste.       (line  501)
* authentication:                        Kurznachrichtendienste.
                                                             (line  243)
* auto:                                  Mail-Dienste.       (line  330)
* auto-purge-jobs?:                      Druckdienste.       (line  269)
* autossh-configuration:                 Netzwerkdienste.    (line 1035)
* autossh-service-type:                  Netzwerkdienste.    (line 1012)
* avahi-configuration:                   Netzwerkdienste.    (line 1133)
* avahi-service-type:                    Netzwerkdienste.    (line 1116)
* base:                                  LDAP-Dienste.       (line  159)
* base-dir:                              Mail-Dienste.       (line  343)
* base-initrd:                           Initiale RAM-Disk.  (line  141)
* bay-device:                            Dienste zur Stromverbrauchsverwaltung.
                                                             (line  385)
* bay-poweroff-on-bat?:                  Dienste zur Stromverbrauchsverwaltung.
                                                             (line  375)
* binary-file:                           Die Store-Monade.   (line  235)
* bind-timelimit:                        LDAP-Dienste.       (line  204)
* bind?:                                 VPN-Dienste.        (line  126)
* binddn:                                LDAP-Dienste.       (line   89)
* bindpw:                                LDAP-Dienste.       (line   96)
* bitlbee-configuration:                 Kurznachrichtendienste.
                                                             (line  456)
* bitlbee-service-type:                  Kurznachrichtendienste.
                                                             (line  446)
* bluetooth-service:                     Desktop-Dienste.    (line  411)
* boot-service-type:                     Service-Referenz.   (line  187)
* bootloader-configuration:              Bootloader-Konfiguration.
                                                             (line   17)
* branch-sort:                           Versionskontrolldienste.
                                                             (line  195)
* branch-sort <1>:                       Versionskontrolldienste.
                                                             (line  729)
* browse-dns-sd-sub-types:               Druckdienste.       (line  276)
* browse-local-protocols:                Druckdienste.       (line  285)
* browse-web-if?:                        Druckdienste.       (line  292)
* browsing?:                             Druckdienste.       (line  297)
* build-derivations:                     Der Store.          (line  132)
* build-expression->derivation:          Ableitungen.        (line  138)
* build-machine:                         Auslagern des Daemons einrichten.
                                                             (line   50)
* c2s-require-encryption?:               Kurznachrichtendienste.
                                                             (line  200)
* ca:                                    VPN-Dienste.        (line   49)
* ca <1>:                                VPN-Dienste.        (line  179)
* ca-certs:                              Mail-Dienste.       (line 1509)
* ca-file:                               Virtualisierungsdienste.
                                                             (line  184)
* cache-about-ttl:                       Versionskontrolldienste.
                                                             (line  240)
* cache-dir:                             Druckdienste.       (line   82)
* cache-dynamic-ttl:                     Versionskontrolldienste.
                                                             (line  214)
* cache-repo-ttl:                        Versionskontrolldienste.
                                                             (line  221)
* cache-root:                            Versionskontrolldienste.
                                                             (line  202)
* cache-root-ttl:                        Versionskontrolldienste.
                                                             (line  227)
* cache-scanrc-ttl:                      Versionskontrolldienste.
                                                             (line  233)
* cache-size:                            Versionskontrolldienste.
                                                             (line  252)
* cache-snapshot-ttl:                    Versionskontrolldienste.
                                                             (line  246)
* cache-static-ttl:                      Versionskontrolldienste.
                                                             (line  207)
* cafile:                                Kurznachrichtendienste.
                                                             (line  153)
* capath:                                Kurznachrichtendienste.
                                                             (line  148)
* cargo-build-system:                    Erstellungssysteme. (line  230)
* case-sensitive-sort?:                  Versionskontrolldienste.
                                                             (line  258)
* cat-avatar-generator-service:          Web-Dienste.        (line  931)
* cert:                                  VPN-Dienste.        (line   54)
* cert <1>:                              VPN-Dienste.        (line  184)
* cert-file:                             Virtualisierungsdienste.
                                                             (line  178)
* certbot-configuration:                 Zertifikatsdienste. (line   71)
* certbot-service-type:                  Zertifikatsdienste. (line   47)
* certfile:                              Mail-Dienste.       (line 1502)
* certificate:                           Kurznachrichtendienste.
                                                             (line  145)
* certificate-configuration:             Zertifikatsdienste. (line  123)
* certificates:                          Kurznachrichtendienste.
                                                             (line   80)
* cgit:                                  Versionskontrolldienste.
                                                             (line  937)
* ciphers:                               Kurznachrichtendienste.
                                                             (line  177)
* classification:                        Druckdienste.       (line  302)
* classify-override?:                    Druckdienste.       (line  310)
* client-config-dir:                     VPN-Dienste.        (line  301)
* client-limit:                          Mail-Dienste.       (line  165)
* client-to-client?:                     VPN-Dienste.        (line  272)
* clojure-build-system:                  Erstellungssysteme. (line  324)
* clone-prefix:                          Versionskontrolldienste.
                                                             (line  265)
* clone-url:                             Versionskontrolldienste.
                                                             (line  272)
* clone-url <1>:                         Versionskontrolldienste.
                                                             (line  737)
* close-connection:                      Der Store.          (line  105)
* cmake-build-system:                    Erstellungssysteme. (line  388)
* colord-service-type:                   Desktop-Dienste.    (line  360)
* commit-filter:                         Versionskontrolldienste.
                                                             (line  277)
* commit-filter <1>:                     Versionskontrolldienste.
                                                             (line  743)
* commit-sort:                           Versionskontrolldienste.
                                                             (line  282)
* commit-sort <1>:                       Versionskontrolldienste.
                                                             (line  749)
* comp-lzo?:                             VPN-Dienste.        (line   66)
* comp-lzo? <1>:                         VPN-Dienste.        (line  196)
* component-interface:                   Kurznachrichtendienste.
                                                             (line  408)
* component-ports:                       Kurznachrichtendienste.
                                                             (line  403)
* component-secret:                      Kurznachrichtendienste.
                                                             (line  396)
* computed-file:                         G-Ausdrücke.        (line  373)
* config-file-perm:                      Druckdienste.       (line   87)
* connman-configuration:                 Netzwerkdienste.    (line  237)
* connman-service-type:                  Netzwerkdienste.    (line  224)
* console-font-service-type:             Basisdienste.       (line   63)
* content-hash:                          „origin“-Referenz.  (line   96)
* copy-build-system:                     Erstellungssysteme. (line  259)
* cpu-boost-on-ac?:                      Dienste zur Stromverbrauchsverwaltung.
                                                             (line  157)
* cpu-boost-on-bat?:                     Dienste zur Stromverbrauchsverwaltung.
                                                             (line  163)
* cpu-max-perf-on-ac:                    Dienste zur Stromverbrauchsverwaltung.
                                                             (line  136)
* cpu-max-perf-on-bat:                   Dienste zur Stromverbrauchsverwaltung.
                                                             (line  151)
* cpu-min-perf-on-ac:                    Dienste zur Stromverbrauchsverwaltung.
                                                             (line  127)
* cpu-min-perf-on-bat:                   Dienste zur Stromverbrauchsverwaltung.
                                                             (line  145)
* cpu-scaling-governor-on-ac:            Dienste zur Stromverbrauchsverwaltung.
                                                             (line   81)
* cpu-scaling-governor-on-bat:           Dienste zur Stromverbrauchsverwaltung.
                                                             (line   92)
* cpu-scaling-max-freq-on-ac:            Dienste zur Stromverbrauchsverwaltung.
                                                             (line  106)
* cpu-scaling-max-freq-on-bat:           Dienste zur Stromverbrauchsverwaltung.
                                                             (line  120)
* cpu-scaling-min-freq-on-ac:            Dienste zur Stromverbrauchsverwaltung.
                                                             (line   99)
* cpu-scaling-min-freq-on-bat:           Dienste zur Stromverbrauchsverwaltung.
                                                             (line  113)
* crl-file:                              Virtualisierungsdienste.
                                                             (line  191)
* css:                                   Versionskontrolldienste.
                                                             (line  289)
* cuirass-configuration:                 Kontinuierliche Integration.
                                                             (line   61)
* cuirass-service-type:                  Kontinuierliche Integration.
                                                             (line   14)
* cups:                                  Druckdienste.       (line   54)
* cups <1>:                              Druckdienste.       (line  864)
* cups-files.conf:                       Druckdienste.       (line  870)
* cups-service-type:                     Druckdienste.       (line   11)
* cupsd.conf:                            Druckdienste.       (line  867)
* current-build-output-port:             Der Store.          (line  108)
* current-state:                         Die Store-Monade.   (line  191)
* curve:                                 Kurznachrichtendienste.
                                                             (line  188)
* daemon:                                DNS-Dienste.        (line  672)
* darkstat-configuration:                Systemüberwachungsdienste.
                                                             (line  127)
* data-path:                             Kurznachrichtendienste.
                                                             (line   70)
* db-host:                               Systemüberwachungsdienste.
                                                             (line  213)
* db-host <1>:                           Systemüberwachungsdienste.
                                                             (line  377)
* db-name:                               Systemüberwachungsdienste.
                                                             (line  218)
* db-name <1>:                           Systemüberwachungsdienste.
                                                             (line  387)
* db-password:                           Systemüberwachungsdienste.
                                                             (line  228)
* db-password <1>:                       Systemüberwachungsdienste.
                                                             (line  397)
* db-port:                               Systemüberwachungsdienste.
                                                             (line  234)
* db-port <1>:                           Systemüberwachungsdienste.
                                                             (line  382)
* db-secret-file:                        Systemüberwachungsdienste.
                                                             (line  403)
* db-user:                               Systemüberwachungsdienste.
                                                             (line  223)
* db-user <1>:                           Systemüberwachungsdienste.
                                                             (line  392)
* dbus-service:                          Desktop-Dienste.    (line  154)
* ddclient:                              DNS-Dienste.        (line  669)
* debug-log-path:                        Mail-Dienste.       (line  598)
* default-auth-type:                     Druckdienste.       (line  318)
* default-client-limit:                  Mail-Dienste.       (line 1080)
* default-encryption:                    Druckdienste.       (line  324)
* default-internal-user:                 Mail-Dienste.       (line 1099)
* default-language:                      Druckdienste.       (line  331)
* default-login-user:                    Mail-Dienste.       (line 1093)
* default-paper-size:                    Druckdienste.       (line  337)
* default-policy:                        Druckdienste.       (line  346)
* default-process-limit:                 Mail-Dienste.       (line 1075)
* default-shared?:                       Druckdienste.       (line  352)
* default-vsz-limit:                     Mail-Dienste.       (line 1085)
* defbranch:                             Versionskontrolldienste.
                                                             (line  757)
* delete:                                Mail-Dienste.       (line 1575)
* delete-after:                          Mail-Dienste.       (line 1584)
* delete-bigger-than:                    Mail-Dienste.       (line 1595)
* deliver-log-format:                    Mail-Dienste.       (line  669)
* delivered-to:                          Mail-Dienste.       (line 1621)
* depth:                                 Kurznachrichtendienste.
                                                             (line  171)
* deref:                                 LDAP-Dienste.       (line  173)
* derivation:                            Ableitungen.        (line   57)
* desc:                                  Versionskontrolldienste.
                                                             (line  766)
* destination:                           Mail-Dienste.       (line 1522)
* dev:                                   VPN-Dienste.        (line   43)
* dev <1>:                               VPN-Dienste.        (line  173)
* dh:                                    VPN-Dienste.        (line  255)
* dhcp-client-service-type:              Netzwerkdienste.    (line    9)
* dhcpd-configuration:                   Netzwerkdienste.    (line   26)
* dhcpd-service-type:                    Netzwerkdienste.    (line   16)
* dhparam:                               Kurznachrichtendienste.
                                                             (line  182)
* dicod-configuration:                   Verschiedene Dienste.
                                                             (line  156)
* dicod-database:                        Verschiedene Dienste.
                                                             (line  192)
* dicod-handler:                         Verschiedene Dienste.
                                                             (line  176)
* dicod-service:                         Verschiedene Dienste.
                                                             (line  142)
* dicod-service-type:                    Verschiedene Dienste.
                                                             (line  138)
* dict:                                  Mail-Dienste.       (line  202)
* digital-ocean-configuration:           Aufruf von guix deploy.
                                                             (line  173)
* director-mail-servers:                 Mail-Dienste.       (line  571)
* director-servers:                      Mail-Dienste.       (line  563)
* director-user-expire:                  Mail-Dienste.       (line  577)
* director-username-hash:                Mail-Dienste.       (line  581)
* directory:                             Mail-Dienste.       (line 1438)
* directory-union:                       G-Ausdrücke.        (line  490)
* dirty-clean-interval:                  Druckdienste.       (line  358)
* disable-plaintext-auth?:               Mail-Dienste.       (line  402)
* disable-sasl-mechanisms:               Kurznachrichtendienste.
                                                             (line  206)
* disk-apm-level-on-ac:                  Dienste zur Stromverbrauchsverwaltung.
                                                             (line  212)
* disk-apm-level-on-bat:                 Dienste zur Stromverbrauchsverwaltung.
                                                             (line  216)
* disk-idle-secs-on-ac:                  Dienste zur Stromverbrauchsverwaltung.
                                                             (line   53)
* disk-idle-secs-on-bat:                 Dienste zur Stromverbrauchsverwaltung.
                                                             (line   61)
* disk-iosched:                          Dienste zur Stromverbrauchsverwaltung.
                                                             (line  235)
* disk-spindown-timeout-on-ac:           Dienste zur Stromverbrauchsverwaltung.
                                                             (line  220)
* disk-spindown-timeout-on-bat:          Dienste zur Stromverbrauchsverwaltung.
                                                             (line  228)
* disks-devices:                         Dienste zur Stromverbrauchsverwaltung.
                                                             (line  208)
* dnsmasq-configuration:                 DNS-Dienste.        (line  588)
* dnsmasq-service-type:                  DNS-Dienste.        (line  579)
* docker-configuration:                  Verschiedene Dienste.
                                                             (line  247)
* docker-service-type:                   Verschiedene Dienste.
                                                             (line  240)
* domain:                                Kurznachrichtendienste.
                                                             (line  306)
* dotlock-use-excl?:                     Mail-Dienste.       (line  759)
* doveadm-socket-path:                   Mail-Dienste.       (line  390)
* doveadm-worker-count:                  Mail-Dienste.       (line  384)
* dovecot:                               Mail-Dienste.       (line   45)
* dovecot <1>:                           Mail-Dienste.       (line 1339)
* dovecot-service:                       Mail-Dienste.       (line   14)
* driver:                                Mail-Dienste.       (line  219)
* driver <1>:                            Mail-Dienste.       (line  236)
* dropbear-configuration:                Netzwerkdienste.    (line  985)
* dropbear-service:                      Netzwerkdienste.    (line  972)
* dub-build-system:                      Erstellungssysteme. (line  806)
* dune-build-system:                     Erstellungssysteme. (line  407)
* earlyoom-configuration:                Linux-Dienste.      (line   25)
* earlyoom-service-type:                 Linux-Dienste.      (line   17)
* elogind-service:                       Desktop-Dienste.    (line  169)
* emacs-build-system:                    Erstellungssysteme. (line  816)
* email-filter:                          Versionskontrolldienste.
                                                             (line  295)
* email-filter <1>:                      Versionskontrolldienste.
                                                             (line  779)
* embedded?:                             Versionskontrolldienste.
                                                             (line  302)
* enable-commit-graph?:                  Versionskontrolldienste.
                                                             (line  309)
* enable-commit-graph? <1>:              Versionskontrolldienste.
                                                             (line  785)
* enable-filter-overrides?:              Versionskontrolldienste.
                                                             (line  317)
* enable-follow-links?:                  Versionskontrolldienste.
                                                             (line  325)
* enable-git-config?:                    Versionskontrolldienste.
                                                             (line  400)
* enable-html-serving?:                  Versionskontrolldienste.
                                                             (line  384)
* enable-html-serving? <1>:              Versionskontrolldienste.
                                                             (line  821)
* enable-http-clone?:                    Versionskontrolldienste.
                                                             (line  332)
* enable-index-links?:                   Versionskontrolldienste.
                                                             (line  339)
* enable-index-owner?:                   Versionskontrolldienste.
                                                             (line  347)
* enable-log-filecount?:                 Versionskontrolldienste.
                                                             (line  354)
* enable-log-filecount? <1>:             Versionskontrolldienste.
                                                             (line  792)
* enable-log-linecount?:                 Versionskontrolldienste.
                                                             (line  361)
* enable-log-linecount? <1>:             Versionskontrolldienste.
                                                             (line  799)
* enable-remote-branches?:               Versionskontrolldienste.
                                                             (line  369)
* enable-remote-branches? <1>:           Versionskontrolldienste.
                                                             (line  806)
* enable-subject-links?:                 Versionskontrolldienste.
                                                             (line  376)
* enable-subject-links? <1>:             Versionskontrolldienste.
                                                             (line  814)
* enable-tree-linenumbers?:              Versionskontrolldienste.
                                                             (line  392)
* energy-perf-policy-on-ac:              Dienste zur Stromverbrauchsverwaltung.
                                                             (line  195)
* energy-perf-policy-on-bat:             Dienste zur Stromverbrauchsverwaltung.
                                                             (line  202)
* enlightenment-desktop-service-configuration: Desktop-Dienste.
                                                             (line  127)
* enlightenment-desktop-service-type:    Desktop-Dienste.    (line  122)
* entries:                               Mail-Dienste.       (line  208)
* environment-variables:                 Druckdienste.       (line  666)
* environment-variables <1>:             Mail-Dienste.       (line 1673)
* error-log:                             Druckdienste.       (line  102)
* error-policy:                          Druckdienste.       (line  367)
* etc-service-type:                      Service-Referenz.   (line  192)
* exim-configuration:                    Mail-Dienste.       (line 1396)
* exim-service-type:                     Mail-Dienste.       (line 1382)
* expression->initrd:                    Initiale RAM-Disk.  (line  175)
* ext-components:                        Kurznachrichtendienste.
                                                             (line  378)
* extensions:                            Druckdienste.       (line   57)
* extra-options:                         Systemüberwachungsdienste.
                                                             (line  274)
* extra-options <1>:                     Systemüberwachungsdienste.
                                                             (line  352)
* extra-options <2>:                     DNS-Dienste.        (line  723)
* extra-options <3>:                     Versionskontrolldienste.
                                                             (line  918)
* extra-options <4>:                     Versionskontrolldienste.
                                                             (line  924)
* extra-parameters:                      Mail-Dienste.       (line 1516)
* extra-parameters <1>:                  Mail-Dienste.       (line 1543)
* extra-parameters <2>:                  Mail-Dienste.       (line 1659)
* extra-special-file:                    Basisdienste.       (line   49)
* fast-io?:                              VPN-Dienste.        (line   87)
* fast-io? <1>:                          VPN-Dienste.        (line  217)
* fatal-errors:                          Druckdienste.       (line  116)
* favicon:                               Versionskontrolldienste.
                                                             (line  407)
* fcgiwrap-configuration:                Web-Dienste.        (line  759)
* fcgiwrap-service-type:                 Web-Dienste.        (line  756)
* file->udev-rule:                       Basisdienste.       (line  609)
* file-append:                           G-Ausdrücke.        (line  500)
* file-device?:                          Druckdienste.       (line  154)
* file-system:                           Dateisysteme.       (line   20)
* file-system-label:                     Dateisysteme.       (line   40)
* file-union:                            G-Ausdrücke.        (line  475)
* files-configuration:                   Druckdienste.       (line   60)
* filter-limit:                          Druckdienste.       (line  377)
* filter-nice:                           Druckdienste.       (line  392)
* filters:                               LDAP-Dienste.       (line  197)
* first-valid-gid:                       Mail-Dienste.       (line  819)
* first-valid-uid:                       Mail-Dienste.       (line  803)
* fold-services:                         Service-Referenz.   (line  172)
* font-build-system:                     Erstellungssysteme. (line  829)
* footer:                                Versionskontrolldienste.
                                                             (line  413)
* fprintd-service-type:                  Verschiedene Dienste.
                                                             (line   13)
* gdm-configuration:                     X Window.           (line   43)
* gdm-service-type:                      X Window.           (line   24)
* geoclue-application:                   Desktop-Dienste.    (line  369)
* geoclue-service:                       Desktop-Dienste.    (line  396)
* getmail-service-type:                  Mail-Dienste.       (line 1413)
* gexp->derivation:                      G-Ausdrücke.        (line  263)
* gexp->file:                            G-Ausdrücke.        (line  416)
* gexp->script:                          G-Ausdrücke.        (line  381)
* gexp?:                                 G-Ausdrücke.        (line  255)
* gid:                                   LDAP-Dienste.       (line   58)
* git-daemon-configuration:              Versionskontrolldienste.
                                                             (line   25)
* git-daemon-service:                    Versionskontrolldienste.
                                                             (line   14)
* git-fetch:                             „origin“-Referenz.  (line   30)
* git-fetch <1>:                         Aufruf von guix hash.
                                                             (line   57)
* git-http-configuration:                Versionskontrolldienste.
                                                             (line   88)
* git-http-nginx-location-configuration: Versionskontrolldienste.
                                                             (line  121)
* gitolite-configuration:                Versionskontrolldienste.
                                                             (line  982)
* gitolite-rc-file:                      Versionskontrolldienste.
                                                             (line 1015)
* glib-or-gtk-build-system:              Erstellungssysteme. (line  459)
* gnome-desktop-configuration:           Desktop-Dienste.    (line   85)
* gnome-desktop-service-type:            Desktop-Dienste.    (line   76)
* gnome-keyring-configuration:           Desktop-Dienste.    (line  434)
* gnome-keyring-service-type:            Desktop-Dienste.    (line  423)
* gnu-build-system:                      Erstellungssysteme. (line   37)
* go-build-system:                       Erstellungssysteme. (line  434)
* gpm-configuration:                     Basisdienste.       (line  686)
* gpm-service-type:                      Basisdienste.       (line  675)
* group:                                 Druckdienste.       (line  162)
* group <1>:                             Mail-Dienste.       (line  122)
* group <2>:                             Mail-Dienste.       (line  139)
* group <3>:                             Mail-Dienste.       (line 1433)
* group <4>:                             Systemüberwachungsdienste.
                                                             (line  208)
* group <5>:                             Systemüberwachungsdienste.
                                                             (line  302)
* group <6>:                             DNS-Dienste.        (line  710)
* groups-file:                           Kurznachrichtendienste.
                                                             (line  115)
* grub-bootloader:                       Tastaturbelegung und Netzwerkanbindung und Partitionierung.
                                                             (line  145)
* grub-bootloader <1>:                   Bootloader-Konfiguration.
                                                             (line   31)
* grub-efi-bootloader:                   Tastaturbelegung und Netzwerkanbindung und Partitionierung.
                                                             (line  145)
* grub-efi-bootloader <1>:               Bootloader-Konfiguration.
                                                             (line   25)
* grub-theme:                            Bootloader-Konfiguration.
                                                             (line  179)
* grub-theme <1>:                        Bootloader-Konfiguration.
                                                             (line  187)
* gss-configuration:                     Network File System.
                                                             (line  138)
* gss-service-type:                      Network File System.
                                                             (line  135)
* guile-build-system:                    Erstellungssysteme. (line  495)
* guix-configuration:                    Basisdienste.       (line  494)
* guix-data-service-configuration:       Guix-Dienste.       (line   24)
* guix-publish-configuration:            Basisdienste.       (line  709)
* guix-publish-service-type:             Basisdienste.       (line  698)
* guix-service-type:                     Basisdienste.       (line  488)
* GUIX_BUILD_OPTIONS:                    Gemeinsame Erstellungsoptionen.
                                                             (line  155)
* GUIX_DAEMON_SOCKET:                    Der Store.          (line   41)
* GUIX_ENVIRONMENT:                      Aufruf von guix environment.
                                                             (line   30)
* GUIX_EXECUTION_ENGINE:                 Aufruf von guix pack.
                                                             (line  210)
* GUIX_LOCPATH:                          Anwendungen einrichten.
                                                             (line   13)
* GUIX_PACKAGE_PATH:                     Paketmodule.        (line   37)
* GUIX_PACKAGE_PATH <1>:                 Pakete definieren.  (line  143)
* haskell-build-system:                  Erstellungssysteme. (line  785)
* head-include:                          Versionskontrolldienste.
                                                             (line  420)
* header:                                Versionskontrolldienste.
                                                             (line  426)
* hidden?:                               Mail-Dienste.       (line  293)
* hide?:                                 Versionskontrolldienste.
                                                             (line  828)
* homepage:                              Versionskontrolldienste.
                                                             (line  773)
* host-name-lookups:                     Druckdienste.       (line  399)
* host-name-service:                     Basisdienste.       (line   59)
* host-uuid:                             Virtualisierungsdienste.
                                                             (line  423)
* host-uuid-source:                      Virtualisierungsdienste.
                                                             (line  430)
* hostapd-configuration:                 Netzwerkdienste.    (line  293)
* hostapd-service-type:                  Netzwerkdienste.    (line  280)
* hostname:                              Mail-Dienste.       (line 1178)
* hostname <1>:                          Kurznachrichtendienste.
                                                             (line  335)
* hostname <2>:                          Kurznachrichtendienste.
                                                             (line  400)
* hostname <3>:                          Systemüberwachungsdienste.
                                                             (line  307)
* hpcguix-web-configuration:             Web-Dienste.        (line  962)
* hpcguix-web-service-type:              Web-Dienste.        (line  959)
* http-external-url:                     Kurznachrichtendienste.
                                                             (line  269)
* http-max-content-size:                 Kurznachrichtendienste.
                                                             (line  265)
* httpd-config-file:                     Web-Dienste.        (line   72)
* httpd-configuration:                   Web-Dienste.        (line   40)
* httpd-module:                          Web-Dienste.        (line   57)
* httpd-service-type:                    Web-Dienste.        (line   12)
* httpd-virtualhost:                     Web-Dienste.        (line  157)
* https_proxy:                           Einrichten der Erstellungsumgebung.
                                                             (line   83)
* https_proxy <1>:                       Proxy-Einstellungen.
                                                             (line    6)
* http_proxy:                            Einrichten der Erstellungsumgebung.
                                                             (line   83)
* http_proxy <1>:                        Proxy-Einstellungen.
                                                             (line    6)
* hurd-console-configuration:            Hurd Services.      (line   11)
* hurd-console-service-type:             Hurd Services.      (line    6)
* hurd-etc-service:                      Hurd Services.      (line   18)
* hurd-getty-configuration:              Hurd Services.      (line   29)
* hurd-getty-service-type:               Hurd Services.      (line   24)
* idle:                                  Mail-Dienste.       (line 1665)
* idle-timelimit:                        LDAP-Dienste.       (line  218)
* idmap-configuration:                   Network File System.
                                                             (line  158)
* idmap-service-type:                    Network File System.
                                                             (line  155)
* ifconfig-pool-persist:                 VPN-Dienste.        (line  260)
* ifconfig-push:                         VPN-Dienste.        (line  319)
* ignore?:                               Versionskontrolldienste.
                                                             (line  835)
* ignorecase:                            LDAP-Dienste.       (line  377)
* imap-capability:                       Mail-Dienste.       (line 1266)
* imap-client-workarounds:               Mail-Dienste.       (line 1288)
* imap-id-log:                           Mail-Dienste.       (line 1284)
* imap-id-send:                          Mail-Dienste.       (line 1277)
* imap-idle-notify-interval:             Mail-Dienste.       (line 1272)
* imap-logout-format:                    Mail-Dienste.       (line 1254)
* imap-max-line-length:                  Mail-Dienste.       (line 1246)
* imap-urlauth-host:                     Mail-Dienste.       (line 1320)
* imap4d-configuration:                  Mail-Dienste.       (line 1716)
* imap4d-service-type:                   Mail-Dienste.       (line 1707)
* import-environment:                    Mail-Dienste.       (line  395)
* inbox?:                                Mail-Dienste.       (line  289)
* include:                               Versionskontrolldienste.
                                                             (line  432)
* include-files:                         Systemüberwachungsdienste.
                                                             (line  280)
* include-files <1>:                     Systemüberwachungsdienste.
                                                             (line  358)
* index-header:                          Versionskontrolldienste.
                                                             (line  439)
* index-info:                            Versionskontrolldienste.
                                                             (line  445)
* inetd-configuration:                   Netzwerkdienste.    (line  558)
* inetd-entry:                           Netzwerkdienste.    (line  568)
* inetd-service-type:                    Netzwerkdienste.    (line  520)
* inferior-for-channels:                 Untergeordnete.     (line   68)
* inferior-package-description:          Untergeordnete.     (line  105)
* inferior-package-home-page:            Untergeordnete.     (line  106)
* inferior-package-inputs:               Untergeordnete.     (line  108)
* inferior-package-location:             Untergeordnete.     (line  107)
* inferior-package-name:                 Untergeordnete.     (line  102)
* inferior-package-native-inputs:        Untergeordnete.     (line  109)
* inferior-package-native-search-paths:  Untergeordnete.     (line  112)
* inferior-package-propagated-inputs:    Untergeordnete.     (line  110)
* inferior-package-search-paths:         Untergeordnete.     (line  115)
* inferior-package-synopsis:             Untergeordnete.     (line  104)
* inferior-package-transitive-native-search-paths: Untergeordnete.
                                                             (line  113)
* inferior-package-transitive-propagated-inputs: Untergeordnete.
                                                             (line  111)
* inferior-package-version:              Untergeordnete.     (line  103)
* inferior-package?:                     Untergeordnete.     (line   99)
* inferior-packages:                     Untergeordnete.     (line   88)
* info-log-path:                         Mail-Dienste.       (line  594)
* inputattach-configuration:             Verschiedene Dienste.
                                                             (line  114)
* inputattach-service-type:              Verschiedene Dienste.
                                                             (line  110)
* int-components:                        Kurznachrichtendienste.
                                                             (line  309)
* interned-file:                         Die Store-Monade.   (line  242)
* iptables-configuration:                Netzwerkdienste.    (line  363)
* iptables-service-type:                 Netzwerkdienste.    (line  335)
* iroute:                                VPN-Dienste.        (line  314)
* job-kill-delay:                        Druckdienste.       (line  412)
* job-private-access:                    Druckdienste.       (line  682)
* job-private-values:                    Druckdienste.       (line  699)
* job-retry-interval:                    Druckdienste.       (line  420)
* job-retry-limit:                       Druckdienste.       (line  430)
* julia-build-system:                    Erstellungssysteme. (line  509)
* keep-alive-timeout:                    Druckdienste.       (line  444)
* keep-alive?:                           Druckdienste.       (line  439)
* keepalive:                             VPN-Dienste.        (line  279)
* keepalive-count:                       Virtualisierungsdienste.
                                                             (line  453)
* keepalive-interval:                    Virtualisierungsdienste.
                                                             (line  442)
* kernel-module-loader-service-type:     Linux-Dienste.      (line   77)
* key:                                   Kurznachrichtendienste.
                                                             (line  142)
* key <1>:                               VPN-Dienste.        (line   60)
* key <2>:                               VPN-Dienste.        (line  190)
* key-file:                              Virtualisierungsdienste.
                                                             (line  171)
* keyfile:                               Mail-Dienste.       (line 1495)
* kind:                                  Mail-Dienste.       (line   94)
* kmscon-configuration:                  Basisdienste.       (line  341)
* kmscon-service-type:                   Basisdienste.       (line  334)
* knot-acl-configuration:                DNS-Dienste.        (line   89)
* knot-configuration:                    DNS-Dienste.        (line  469)
* knot-key-configuration:                DNS-Dienste.        (line   72)
* knot-keystore-configuration:           DNS-Dienste.        (line  248)
* knot-policy-configuration:             DNS-Dienste.        (line  269)
* knot-remote-configuration:             DNS-Dienste.        (line  220)
* knot-resolver-configuration:           DNS-Dienste.        (line  560)
* knot-resolver-service-type:            DNS-Dienste.        (line  543)
* knot-service-type:                     DNS-Dienste.        (line   54)
* knot-zone-configuration:               DNS-Dienste.        (line  367)
* krb5-ccname:                           LDAP-Dienste.       (line  153)
* krb5-configuration:                    Kerberos-Dienste.   (line   73)
* krb5-realm:                            Kerberos-Dienste.   (line   57)
* krb5-service-type:                     Kerberos-Dienste.   (line   23)
* ladspa-service-type:                   Tondienste.         (line  115)
* last-valid-gid:                        Mail-Dienste.       (line  828)
* last-valid-uid:                        Mail-Dienste.       (line  814)
* lda-mailbox-autocreate?:               Mail-Dienste.       (line 1235)
* lda-mailbox-autosubscribe?:            Mail-Dienste.       (line 1241)
* lda-original-recipient-header:         Mail-Dienste.       (line 1226)
* ldap-version:                          LDAP-Dienste.       (line   81)
* let-system:                            G-Ausdrücke.        (line  524)
* let-system <1>:                        G-Ausdrücke.        (line  525)
* libvirt:                               Virtualisierungsdienste.
                                                             (line   28)
* libvirt-service-type:                  Virtualisierungsdienste.
                                                             (line   17)
* limit-request-body:                    Druckdienste.       (line  451)
* linux-module-build-system:             Erstellungssysteme. (line  903)
* lirc-service:                          Verschiedene Dienste.
                                                             (line   78)
* list?:                                 Mail-Dienste.       (line  305)
* listen:                                Druckdienste.       (line  459)
* listen <1>:                            Mail-Dienste.       (line   48)
* listen-addr:                           Virtualisierungsdienste.
                                                             (line   66)
* listen-back-log:                       Druckdienste.       (line  470)
* listen-tcp?:                           Virtualisierungsdienste.
                                                             (line   42)
* listen-tls?:                           Virtualisierungsdienste.
                                                             (line   31)
* listeners:                             Mail-Dienste.       (line  100)
* local-file:                            G-Ausdrücke.        (line  342)
* local-time?:                           Versionskontrolldienste.
                                                             (line  452)
* locale-definition:                     Locales.            (line   52)
* location:                              Mail-Dienste.       (line  283)
* location-access-controls:              Druckdienste.       (line  482)
* lock-method:                           Mail-Dienste.       (line  791)
* LOCPATH:                               Anwendungen einrichten.
                                                             (line   13)
* LOCPATH <1>:                           Locales.            (line   42)
* log:                                   Kurznachrichtendienste.
                                                             (line  254)
* log <1>:                               LDAP-Dienste.       (line   64)
* log-debug-history:                     Druckdienste.       (line  531)
* log-file:                              Systemüberwachungsdienste.
                                                             (line  250)
* log-file <1>:                          Systemüberwachungsdienste.
                                                             (line  325)
* log-file-perm:                         Druckdienste.       (line  168)
* log-filters:                           Virtualisierungsdienste.
                                                             (line  333)
* log-filters <1>:                       Virtualisierungsdienste.
                                                             (line  518)
* log-level:                             Druckdienste.       (line  540)
* log-level <1>:                         Virtualisierungsdienste.
                                                             (line  327)
* log-level <2>:                         Virtualisierungsdienste.
                                                             (line  512)
* log-outputs:                           Virtualisierungsdienste.
                                                             (line  366)
* log-outputs <1>:                       Virtualisierungsdienste.
                                                             (line  554)
* log-path:                              Mail-Dienste.       (line  588)
* log-rotation:                          Log-Rotation.       (line   66)
* log-time-format:                       Druckdienste.       (line  547)
* log-timestamp:                         Mail-Dienste.       (line  647)
* log-type:                              Systemüberwachungsdienste.
                                                             (line  239)
* log-type <1>:                          Systemüberwachungsdienste.
                                                             (line  314)
* login-access-sockets:                  Mail-Dienste.       (line  361)
* login-configuration:                   Basisdienste.       (line   86)
* login-greeting:                        Mail-Dienste.       (line  347)
* login-log-format:                      Mail-Dienste.       (line  659)
* login-log-format-elements:             Mail-Dienste.       (line  652)
* login-service:                         Basisdienste.       (line   80)
* login-trusted-networks:                Mail-Dienste.       (line  351)
* logo:                                  Versionskontrolldienste.
                                                             (line  458)
* logo <1>:                              Versionskontrolldienste.
                                                             (line  842)
* logo-link:                             Versionskontrolldienste.
                                                             (line  464)
* logo-link <1>:                         Versionskontrolldienste.
                                                             (line  849)
* lookup-inferior-packages:              Untergeordnete.     (line   91)
* lookup-qemu-platforms:                 Virtualisierungsdienste.
                                                             (line  673)
* lower-object:                          G-Ausdrücke.        (line  576)
* lsh-service:                           Netzwerkdienste.    (line  758)
* luks-device-mapping:                   Zugeordnete Geräte. (line   47)
* machine:                               Aufruf von guix deploy.
                                                             (line  119)
* machine-ssh-configuration:             Aufruf von guix deploy.
                                                             (line  139)
* mail:                                  DNS-Dienste.        (line  683)
* mail-access-groups:                    Mail-Dienste.       (line  738)
* mail-aliases-service-type:             Mail-Dienste.       (line 1681)
* mail-attachment-dir:                   Mail-Dienste.       (line 1034)
* mail-attachment-fs:                    Mail-Dienste.       (line 1054)
* mail-attachment-hash:                  Mail-Dienste.       (line 1068)
* mail-attachment-min-size:              Mail-Dienste.       (line 1047)
* mail-cache-min-mail-count:             Mail-Dienste.       (line  877)
* mail-chroot:                           Mail-Dienste.       (line  850)
* mail-debug?:                           Mail-Dienste.       (line  639)
* mail-failure:                          DNS-Dienste.        (line  688)
* mail-fsync:                            Mail-Dienste.       (line  767)
* mail-full-filesystem-access?:          Mail-Dienste.       (line  747)
* mail-gid:                              Mail-Dienste.       (line  727)
* mail-location:                         Mail-Dienste.       (line  686)
* mail-log-prefix:                       Mail-Dienste.       (line  664)
* mail-max-keyword-length:               Mail-Dienste.       (line  833)
* mail-max-userip-connections:           Mail-Dienste.       (line   79)
* mail-nfs-index?:                       Mail-Dienste.       (line  785)
* mail-nfs-storage?:                     Mail-Dienste.       (line  778)
* mail-plugin-dir:                       Mail-Dienste.       (line  866)
* mail-plugins:                          Mail-Dienste.       (line   75)
* mail-plugins <1>:                      Mail-Dienste.       (line  870)
* mail-privileged-group:                 Mail-Dienste.       (line  731)
* mail-save-crlf?:                       Mail-Dienste.       (line  894)
* mail-temp-dir:                         Mail-Dienste.       (line  799)
* mail-uid:                              Mail-Dienste.       (line  719)
* mailbox-idle-check-interval:           Mail-Dienste.       (line  885)
* mailboxes:                             Mail-Dienste.       (line  320)
* maildir-copy-with-hardlinks?:          Mail-Dienste.       (line  917)
* maildir-stat-dirs?:                    Mail-Dienste.       (line  906)
* maildir-very-dirty-syncs?:             Mail-Dienste.       (line  924)
* mapped-device:                         Zugeordnete Geräte. (line   24)
* maps:                                  LDAP-Dienste.       (line  187)
* mate-desktop-configuration:            Desktop-Dienste.    (line  116)
* mate-desktop-service-type:             Desktop-Dienste.    (line  108)
* max-anonymous-clients:                 Virtualisierungsdienste.
                                                             (line  254)
* max-atom-items:                        Versionskontrolldienste.
                                                             (line  475)
* max-backups:                           Virtualisierungsdienste.
                                                             (line  604)
* max-blob-size:                         Versionskontrolldienste.
                                                             (line  506)
* max-bytes-per-session:                 Mail-Dienste.       (line 1604)
* max-client-requests:                   Virtualisierungsdienste.
                                                             (line  289)
* max-clients:                           Druckdienste.       (line  554)
* max-clients <1>:                       VPN-Dienste.        (line  289)
* max-clients <2>:                       Virtualisierungsdienste.
                                                             (line  240)
* max-clients <3>:                       Virtualisierungsdienste.
                                                             (line  592)
* max-clients-per-host:                  Druckdienste.       (line  560)
* max-commit-count:                      Versionskontrolldienste.
                                                             (line  481)
* max-copies:                            Druckdienste.       (line  567)
* max-history-messages:                  Kurznachrichtendienste.
                                                             (line  372)
* max-hold-time:                         Druckdienste.       (line  573)
* max-job-time:                          Druckdienste.       (line  604)
* max-jobs:                              Druckdienste.       (line  581)
* max-jobs-per-printer:                  Druckdienste.       (line  588)
* max-jobs-per-user:                     Druckdienste.       (line  596)
* max-log-size:                          Druckdienste.       (line  612)
* max-lost-work-secs-on-ac:              Dienste zur Stromverbrauchsverwaltung.
                                                             (line   67)
* max-lost-work-secs-on-bat:             Dienste zur Stromverbrauchsverwaltung.
                                                             (line   75)
* max-message-length:                    Versionskontrolldienste.
                                                             (line  487)
* max-message-size:                      Mail-Dienste.       (line 1613)
* max-queued-clients:                    Virtualisierungsdienste.
                                                             (line  246)
* max-repo-count:                        Versionskontrolldienste.
                                                             (line  493)
* max-repodesc-length:                   Versionskontrolldienste.
                                                             (line  499)
* max-requests:                          Virtualisierungsdienste.
                                                             (line  284)
* max-size:                              Virtualisierungsdienste.
                                                             (line  598)
* max-stats:                             Versionskontrolldienste.
                                                             (line  512)
* max-stats <1>:                         Versionskontrolldienste.
                                                             (line  878)
* max-workers:                           Virtualisierungsdienste.
                                                             (line  266)
* mbegin:                                Die Store-Monade.   (line  141)
* mbox-dirty-syncs?:                     Mail-Dienste.       (line  975)
* mbox-dotlock-change-timeout:           Mail-Dienste.       (line  968)
* mbox-lazy-writes?:                     Mail-Dienste.       (line  998)
* mbox-lock-timeout:                     Mail-Dienste.       (line  964)
* mbox-min-index-size:                   Mail-Dienste.       (line 1008)
* mbox-read-locks:                       Mail-Dienste.       (line  931)
* mbox-very-dirty-syncs?:                Mail-Dienste.       (line  991)
* mbox-write-locks:                      Mail-Dienste.       (line  961)
* mcron-configuration:                   Geplante Auftragsausführung.
                                                             (line  115)
* mcron-service-type:                    Geplante Auftragsausführung.
                                                             (line  105)
* mdbox-preallocate-space?:              Mail-Dienste.       (line 1027)
* mdbox-rotate-interval:                 Mail-Dienste.       (line 1020)
* mdbox-rotate-size:                     Mail-Dienste.       (line 1015)
* mdns-adv?:                             Virtualisierungsdienste.
                                                             (line   72)
* mdns-name:                             Virtualisierungsdienste.
                                                             (line   80)
* memcached-configuration:               Datenbankdienste.   (line   87)
* memcached-service-type:                Datenbankdienste.   (line   79)
* menu-entry:                            Bootloader-Konfiguration.
                                                             (line  131)
* meson-build-system:                    Erstellungssysteme. (line  838)
* message-log:                           Mail-Dienste.       (line 1635)
* message-log-syslog:                    Mail-Dienste.       (line 1643)
* message-log-verbose:                   Mail-Dienste.       (line 1650)
* method-access-controls:                Druckdienste.       (line  500)
* methods:                               Druckdienste.       (line  518)
* mimetype:                              Versionskontrolldienste.
                                                             (line  518)
* mimetype-file:                         Versionskontrolldienste.
                                                             (line  525)
* min-workers:                           Virtualisierungsdienste.
                                                             (line  261)
* mingetty-configuration:                Basisdienste.       (line  103)
* mingetty-service:                      Basisdienste.       (line   97)
* minify-build-system:                   Erstellungssysteme. (line  535)
* mixed-text-file:                       G-Ausdrücke.        (line  465)
* mlet:                                  Die Store-Monade.   (line  123)
* mlet*:                                 Die Store-Monade.   (line  124)
* mmap-disable?:                         Mail-Dienste.       (line  754)
* mod-muc:                               Kurznachrichtendienste.
                                                             (line  341)
* mode:                                  Mail-Dienste.       (line  115)
* mode <1>:                              Mail-Dienste.       (line  132)
* modem-manager-configuration:           Netzwerkdienste.    (line  107)
* modem-manager-service-type:            Netzwerkdienste.    (line   99)
* modify-services:                       Das Konfigurationssystem nutzen.
                                                             (line  144)
* modify-services <1>:                   Service-Referenz.   (line   67)
* module-link:                           Versionskontrolldienste.
                                                             (line  531)
* module-link <1>:                       Versionskontrolldienste.
                                                             (line  861)
* module-link-path:                      Versionskontrolldienste.
                                                             (line  870)
* modules-disabled:                      Kurznachrichtendienste.
                                                             (line  109)
* modules-enabled:                       Kurznachrichtendienste.
                                                             (line  100)
* mongodb-configuration:                 Datenbankdienste.   (line  113)
* mongodb-service-type:                  Datenbankdienste.   (line  107)
* mpd-configuration:                     Audio-Dienste.      (line   28)
* mpd-output:                            Audio-Dienste.      (line   62)
* mpd-service-type:                      Audio-Dienste.      (line   25)
* multiple-operation-timeout:            Druckdienste.       (line  619)
* mumi-configuration:                    Web-Dienste.        (line  713)
* mumi-service-type:                     Web-Dienste.        (line  710)
* munless:                               Die Store-Monade.   (line  158)
* murmur-configuration:                  Telefondienste.     (line   10)
* murmur-public-registration-configuration: Telefondienste.  (line  213)
* mwhen:                                 Die Store-Monade.   (line  151)
* mysql-configuration:                   Datenbankdienste.   (line   63)
* mysql-service:                         Datenbankdienste.   (line   56)
* name:                                  Druckdienste.       (line  679)
* name <1>:                              Mail-Dienste.       (line   65)
* name <2>:                              Mail-Dienste.       (line  263)
* name <3>:                              Mail-Dienste.       (line  327)
* name <4>:                              Mail-Dienste.       (line 1420)
* name <5>:                              Kurznachrichtendienste.
                                                             (line  356)
* name <6>:                              VPN-Dienste.        (line  147)
* name <7>:                              VPN-Dienste.        (line  309)
* name <8>:                              Versionskontrolldienste.
                                                             (line  885)
* name-service:                          Name Service Switch.
                                                             (line  110)
* name-service-switch:                   Name Service Switch.
                                                             (line   87)
* namespaces:                            Mail-Dienste.       (line  256)
* network-manager-configuration:         Netzwerkdienste.    (line  157)
* network-manager-service-type:          Netzwerkdienste.    (line  149)
* nfs-configuration:                     Network File System.
                                                             (line   25)
* nfs-service-type:                      Network File System.
                                                             (line   22)
* nftables-configuration:                Netzwerkdienste.    (line  393)
* nftables-service-type:                 Netzwerkdienste.    (line  380)
* nginx:                                 Systemüberwachungsdienste.
                                                             (line  373)
* nginx <1>:                             Versionskontrolldienste.
                                                             (line  171)
* nginx-configuration:                   Web-Dienste.        (line  217)
* nginx-location-configuration:          Web-Dienste.        (line  399)
* nginx-named-location-configuration:    Web-Dienste.        (line  415)
* nginx-php-location:                    Web-Dienste.        (line  905)
* nginx-server-configuration:            Web-Dienste.        (line  326)
* nginx-service-type:                    Web-Dienste.        (line  182)
* nginx-upstream-configuration:          Web-Dienste.        (line  383)
* nix-service-type:                      Verschiedene Dienste.
                                                             (line  314)
* nmi-watchdog?:                         Dienste zur Stromverbrauchsverwaltung.
                                                             (line  182)
* nocache?:                              Versionskontrolldienste.
                                                             (line  537)
* node-build-system:                     Erstellungssysteme. (line  928)
* noheader?:                             Versionskontrolldienste.
                                                             (line  548)
* noplainemail?:                         Versionskontrolldienste.
                                                             (line  542)
* nscd-cache:                            Basisdienste.       (line  423)
* nscd-configuration:                    Basisdienste.       (line  398)
* nscd-service:                          Basisdienste.       (line  369)
* nss-disable-enumeration:               LDAP-Dienste.       (line  358)
* nss-getgrent-skipmembers:              LDAP-Dienste.       (line  348)
* nss-gid-offset:                        LDAP-Dienste.       (line  328)
* nss-initgroups-ignoreusers:            LDAP-Dienste.       (line  303)
* nss-min-uid:                           LDAP-Dienste.       (line  313)
* nss-nested-groups:                     LDAP-Dienste.       (line  336)
* nss-pam-ldapd:                         LDAP-Dienste.       (line   42)
* nss-uid-offset:                        LDAP-Dienste.       (line  320)
* ntp-configuration:                     Netzwerkdienste.    (line  412)
* ntp-server:                            Netzwerkdienste.    (line  433)
* ntp-service-type:                      Netzwerkdienste.    (line  403)
* ocaml-build-system:                    Erstellungssysteme. (line  552)
* open-connection:                       Der Store.          (line   93)
* open-inferior:                         Untergeordnete.     (line   79)
* openntpd-configuration:                Netzwerkdienste.    (line  477)
* openntpd-service-type:                 Netzwerkdienste.    (line  457)
* opensmtpd-configuration:               Mail-Dienste.       (line 1365)
* opensmtpd-service-type:                Mail-Dienste.       (line 1355)
* openssh-configuration:                 Netzwerkdienste.    (line  821)
* openssh-service-type:                  Netzwerkdienste.    (line  799)
* openvpn:                               VPN-Dienste.        (line   29)
* openvpn <1>:                           VPN-Dienste.        (line  159)
* openvpn-client-service:                VPN-Dienste.        (line   13)
* openvpn-server-service:                VPN-Dienste.        (line   19)
* openvswitch-configuration:             Netzwerkdienste.    (line 1173)
* openvswitch-service-type:              Netzwerkdienste.    (line 1168)
* operating-system:                      „operating-system“-Referenz.
                                                             (line   10)
* operating-system <1>:                  Das Konfigurationssystem nutzen.
                                                             (line   13)
* operating-system-derivation:           Das Konfigurationssystem nutzen.
                                                             (line  386)
* options:                               Mail-Dienste.       (line 1549)
* options <1>:                           Kurznachrichtendienste.
                                                             (line  164)
* origin:                                „origin“-Referenz.  (line   10)
* override-fields:                       Mail-Dienste.       (line  246)
* ovs-timeout:                           Virtualisierungsdienste.
                                                             (line  479)
* owner:                                 Versionskontrolldienste.
                                                             (line  891)
* owner-filter:                          Versionskontrolldienste.
                                                             (line  469)
* owner-filter <1>:                      Versionskontrolldienste.
                                                             (line  855)
* package:                               „package“-Referenz. (line    9)
* package <1>:                           Mail-Dienste.       (line 1425)
* package <2>:                           Versionskontrolldienste.
                                                             (line  168)
* package->cross-derivation:             Die Store-Monade.   (line  284)
* package->derivation:                   Die Store-Monade.   (line  283)
* package-cross-derivation:              Pakete definieren.  (line  171)
* package-derivation:                    Pakete definieren.  (line  158)
* package-file:                          Die Store-Monade.   (line  271)
* package-input-rewriting:               Pakete definieren.  (line  185)
* package-input-rewriting/spec:          Pakete definieren.  (line  217)
* package-mapping:                       Pakete definieren.  (line  241)
* packages->manifest:                    Aufruf von guix package.
                                                             (line  232)
* page-log:                              Druckdienste.       (line  174)
* page-log-format:                       Druckdienste.       (line  626)
* pagekite-configuration:                Netzwerkdienste.    (line 1202)
* pagekite-service-type:                 Netzwerkdienste.    (line 1182)
* pagesize:                              LDAP-Dienste.       (line  296)
* pam-authc-ppolicy:                     LDAP-Dienste.       (line  388)
* pam-authc-search:                      LDAP-Dienste.       (line  396)
* pam-authz-search:                      LDAP-Dienste.       (line  408)
* pam-krb5-configuration:                Kerberos-Dienste.   (line  106)
* pam-krb5-service-type:                 Kerberos-Dienste.   (line  103)
* pam-limits-service:                    Basisdienste.       (line  774)
* pam-mount-configuration:               PAM-Einbindedienst. (line   14)
* pam-password-prohibit-message:         LDAP-Dienste.       (line  417)
* pam-services:                          LDAP-Dienste.       (line  427)
* passdbs:                               Mail-Dienste.       (line  212)
* password:                              Mail-Dienste.       (line 1483)
* password <1>:                          Kurznachrichtendienste.
                                                             (line  197)
* password-command:                      Mail-Dienste.       (line 1489)
* patchwork-configuration:               Web-Dienste.        (line  561)
* patchwork-database-configuration:      Web-Dienste.        (line  677)
* patchwork-service-type:                Web-Dienste.        (line  522)
* patchwork-settings-module:             Web-Dienste.        (line  593)
* path:                                  Druckdienste.       (line  489)
* path <1>:                              Mail-Dienste.       (line  111)
* path <2>:                              Mail-Dienste.       (line  128)
* path <3>:                              Mail-Dienste.       (line 1535)
* path <4>:                              Versionskontrolldienste.
                                                             (line  897)
* pcie-aspm-on-ac:                       Dienste zur Stromverbrauchsverwaltung.
                                                             (line  285)
* pcie-aspm-on-bat:                      Dienste zur Stromverbrauchsverwaltung.
                                                             (line  292)
* pcscd-configuration:                   Verschiedene Dienste.
                                                             (line   61)
* pcscd-service-type:                    Verschiedene Dienste.
                                                             (line   54)
* perl-build-system:                     Erstellungssysteme. (line  629)
* persist-key?:                          VPN-Dienste.        (line   72)
* persist-key? <1>:                      VPN-Dienste.        (line  202)
* persist-tun?:                          VPN-Dienste.        (line   79)
* persist-tun? <1>:                      VPN-Dienste.        (line  209)
* phc-controls:                          Dienste zur Stromverbrauchsverwaltung.
                                                             (line  188)
* php-fpm-configuration:                 Web-Dienste.        (line  817)
* php-fpm-dynamic-process-manager-configuration: Web-Dienste.
                                                             (line  871)
* php-fpm-on-demand-process-manager-configuration: Web-Dienste.
                                                             (line  895)
* php-fpm-service-type:                  Web-Dienste.        (line  814)
* php-fpm-static-process-manager-configuration: Web-Dienste. (line  888)
* pid:                                   DNS-Dienste.        (line  694)
* pid-file:                              Systemüberwachungsdienste.
                                                             (line  255)
* pid-file <1>:                          Systemüberwachungsdienste.
                                                             (line  330)
* pid-file <2>:                          VPN-Dienste.        (line   32)
* pid-file <3>:                          VPN-Dienste.        (line  162)
* pidfile:                               Kurznachrichtendienste.
                                                             (line  260)
* pipefs-configuration:                  Network File System.
                                                             (line  116)
* pipefs-service-type:                   Network File System.
                                                             (line  113)
* plain-file:                            G-Ausdrücke.        (line  366)
* plugin:                                Kurznachrichtendienste.
                                                             (line  338)
* plugin-configuration:                  Mail-Dienste.       (line  251)
* plugin-paths:                          Kurznachrichtendienste.
                                                             (line   75)
* policies:                              Druckdienste.       (line  673)
* polkit-service:                        Desktop-Dienste.    (line  254)
* polkit-wheel-service:                  Desktop-Dienste.    (line  268)
* port:                                  Mail-Dienste.       (line  155)
* port <1>:                              Mail-Dienste.       (line 1477)
* port <2>:                              VPN-Dienste.        (line  152)
* port <3>:                              VPN-Dienste.        (line  238)
* postgresql-service:                    Datenbankdienste.   (line    9)
* postmaster-address:                    Mail-Dienste.       (line 1173)
* prefix:                                Mail-Dienste.       (line  278)
* preserve-job-files:                    Druckdienste.       (line  739)
* preserve-job-history:                  Druckdienste.       (line  751)
* prio-workers:                          Virtualisierungsdienste.
                                                             (line  276)
* process-limit:                         Mail-Dienste.       (line  183)
* process-min-avail:                     Mail-Dienste.       (line  191)
* profile-service-type:                  Service-Referenz.   (line  208)
* program-file:                          G-Ausdrücke.        (line  407)
* project-list:                          Versionskontrolldienste.
                                                             (line  554)
* prometheus-node-exporter-configuration: Systemüberwachungsdienste.
                                                             (line  167)
* prosody:                               Kurznachrichtendienste.
                                                             (line   67)
* prosody <1>:                           Kurznachrichtendienste.
                                                             (line  424)
* prosody-service-type:                  Kurznachrichtendienste.
                                                             (line   13)
* prosody.cfg.lua:                       Kurznachrichtendienste.
                                                             (line  427)
* proto:                                 VPN-Dienste.        (line   37)
* proto <1>:                             VPN-Dienste.        (line  167)
* protocol:                              Mail-Dienste.       (line  145)
* protocol <1>:                          Kurznachrichtendienste.
                                                             (line  139)
* protocols:                             Mail-Dienste.       (line   58)
* provenance-service-type:               Service-Referenz.   (line  214)
* pulseaudio-configuration:              Tondienste.         (line   93)
* pulseaudio-service-type:               Tondienste.         (line   73)
* python-build-system:                   Erstellungssysteme. (line  604)
* qemu-binfmt-configuration:             Virtualisierungsdienste.
                                                             (line  635)
* qemu-binfmt-service-type:              Virtualisierungsdienste.
                                                             (line  619)
* qemu-platform-name:                    Virtualisierungsdienste.
                                                             (line  682)
* qemu-platform?:                        Virtualisierungsdienste.
                                                             (line  679)
* qt-build-system:                       Erstellungssysteme. (line  650)
* quasiquote:                            Pakete definieren.  (line  113)
* quassel-configuration:                 Kurznachrichtendienste.
                                                             (line  492)
* quassel-service-type:                  Kurznachrichtendienste.
                                                             (line  487)
* quota-full-tempfail?:                  Mail-Dienste.       (line 1184)
* quote:                                 Pakete definieren.  (line   92)
* r-build-system:                        Erstellungssysteme. (line  686)
* radeon-dpm-perf-level-on-ac:           Dienste zur Stromverbrauchsverwaltung.
                                                             (line  323)
* radeon-dpm-perf-level-on-bat:          Dienste zur Stromverbrauchsverwaltung.
                                                             (line  330)
* radeon-dpm-state-on-ac:                Dienste zur Stromverbrauchsverwaltung.
                                                             (line  311)
* radeon-dpm-state-on-bat:               Dienste zur Stromverbrauchsverwaltung.
                                                             (line  318)
* radeon-power-profile-on-ac:            Dienste zur Stromverbrauchsverwaltung.
                                                             (line  297)
* radeon-power-profile-on-bat:           Dienste zur Stromverbrauchsverwaltung.
                                                             (line  305)
* raid-device-mapping:                   Zugeordnete Geräte. (line   52)
* rakudo-build-system:                   Erstellungssysteme. (line  694)
* raw-content:                           Kurznachrichtendienste.
                                                             (line  412)
* raw-initrd:                            Initiale RAM-Disk.  (line  109)
* rcfile:                                Mail-Dienste.       (line 1443)
* read-all:                              Mail-Dienste.       (line 1566)
* readme:                                Versionskontrolldienste.
                                                             (line  562)
* readme <1>:                            Versionskontrolldienste.
                                                             (line  903)
* received:                              Mail-Dienste.       (line 1628)
* recipient-delimiter:                   Mail-Dienste.       (line 1222)
* reconnect-retrytime:                   LDAP-Dienste.       (line  233)
* reconnect-sleeptime:                   LDAP-Dienste.       (line  225)
* redirect-gateway?:                     VPN-Dienste.        (line  266)
* redis-configuration:                   Datenbankdienste.   (line  134)
* redis-service-type:                    Datenbankdienste.   (line  129)
* referrals:                             LDAP-Dienste.       (line  180)
* rejection-reason:                      Mail-Dienste.       (line 1206)
* rejection-subject:                     Mail-Dienste.       (line 1199)
* reload-timeout:                        Druckdienste.       (line  763)
* remote:                                VPN-Dienste.        (line  138)
* remote-root:                           Druckdienste.       (line  188)
* remove-suffix?:                        Versionskontrolldienste.
                                                             (line  568)
* renamelimit:                           Versionskontrolldienste.
                                                             (line  575)
* repositories:                          Versionskontrolldienste.
                                                             (line  695)
* repository-directory:                  Versionskontrolldienste.
                                                             (line  624)
* repository-sort:                       Versionskontrolldienste.
                                                             (line  581)
* request-root:                          Druckdienste.       (line  195)
* resolv-retry?:                         VPN-Dienste.        (line  131)
* restore-device-state-on-startup?:      Dienste zur Stromverbrauchsverwaltung.
                                                             (line  454)
* restrict-room-creation:                Kurznachrichtendienste.
                                                             (line  360)
* retriever:                             Mail-Dienste.       (line 1449)
* return:                                Die Store-Monade.   (line  105)
* reverse?:                              Druckdienste.       (line  509)
* rip-cache:                             Druckdienste.       (line  770)
* rngd-service:                          Basisdienste.       (line  767)
* robots:                                Versionskontrolldienste.
                                                             (line  586)
* root-desc:                             Versionskontrolldienste.
                                                             (line  591)
* root-readme:                           Versionskontrolldienste.
                                                             (line  597)
* root-title:                            Versionskontrolldienste.
                                                             (line  603)
* rootpwmoddn:                           LDAP-Dienste.       (line  102)
* rootpwmodpw:                           LDAP-Dienste.       (line  109)
* rottlog-configuration:                 Log-Rotation.       (line   47)
* rottlog-service-type:                  Log-Rotation.       (line   36)
* rpcbind-configuration:                 Network File System.
                                                             (line   94)
* rpcbind-service-type:                  Network File System.
                                                             (line   91)
* rsync-configuration:                   Netzwerkdienste.    (line  698)
* rsync-service-type:                    Netzwerkdienste.    (line  689)
* ruby-build-system:                     Erstellungssysteme. (line  735)
* run-with-state:                        Die Store-Monade.   (line  207)
* run-with-store:                        Die Store-Monade.   (line  223)
* runtime-pm-all?:                       Dienste zur Stromverbrauchsverwaltung.
                                                             (line  403)
* runtime-pm-blacklist:                  Dienste zur Stromverbrauchsverwaltung.
                                                             (line  409)
* runtime-pm-driver-blacklist:           Dienste zur Stromverbrauchsverwaltung.
                                                             (line  417)
* runtime-pm-on-ac:                      Dienste zur Stromverbrauchsverwaltung.
                                                             (line  391)
* runtime-pm-on-bat:                     Dienste zur Stromverbrauchsverwaltung.
                                                             (line  398)
* s2s-insecure-domains:                  Kurznachrichtendienste.
                                                             (line  227)
* s2s-require-encryption?:               Kurznachrichtendienste.
                                                             (line  212)
* s2s-secure-auth?:                      Kurznachrichtendienste.
                                                             (line  218)
* s2s-secure-domains:                    Kurznachrichtendienste.
                                                             (line  236)
* sandboxing:                            Druckdienste.       (line  201)
* sane-service-type:                     Desktop-Dienste.    (line  382)
* sasl-allowed-usernames:                Virtualisierungsdienste.
                                                             (line  224)
* sasl-authcid:                          LDAP-Dienste.       (line  129)
* sasl-authzid:                          LDAP-Dienste.       (line  136)
* sasl-canonicalize?:                    LDAP-Dienste.       (line  143)
* sasl-mech:                             LDAP-Dienste.       (line  117)
* sasl-realm:                            LDAP-Dienste.       (line  123)
* sata-linkpwr-blacklist:                Dienste zur Stromverbrauchsverwaltung.
                                                             (line  257)
* sata-linkpwr-on-ac:                    Dienste zur Stromverbrauchsverwaltung.
                                                             (line  244)
* sata-linkpwr-on-bat:                   Dienste zur Stromverbrauchsverwaltung.
                                                             (line  252)
* scan-hidden-path:                      Versionskontrolldienste.
                                                             (line  609)
* sched-powersave-on-ac?:                Dienste zur Stromverbrauchsverwaltung.
                                                             (line  169)
* sched-powersave-on-bat?:               Dienste zur Stromverbrauchsverwaltung.
                                                             (line  176)
* scheme-file:                           G-Ausdrücke.        (line  433)
* Scheme-Variable:                       Systemüberwachungsdienste.
                                                             (line  117)
* Scheme-Variable <1>:                   Systemüberwachungsdienste.
                                                             (line  157)
* Scheme-Variable <2>:                   Spieldienste.       (line   14)
* Scheme-Variable <3>:                   PAM-Einbindedienst. (line   11)
* Scheme-Variable <4>:                   Guix-Dienste.       (line   17)
* scons-build-system:                    Erstellungssysteme. (line  768)
* scope:                                 LDAP-Dienste.       (line  164)
* screen-locker-service:                 X Window.           (line  368)
* sddm-configuration:                    X Window.           (line  172)
* sddm-configuration <1>:                X Window.           (line  277)
* sddm-service-type:                     X Window.           (line  265)
* secret-file:                           DNS-Dienste.        (line  715)
* section:                               Versionskontrolldienste.
                                                             (line  631)
* section <1>:                           Versionskontrolldienste.
                                                             (line  910)
* section-from-path:                     Versionskontrolldienste.
                                                             (line  644)
* section-sort:                          Versionskontrolldienste.
                                                             (line  638)
* sendmail-path:                         Mail-Dienste.       (line 1190)
* separator:                             Mail-Dienste.       (line  270)
* server:                                Mail-Dienste.       (line 1463)
* server <1>:                            Systemüberwachungsdienste.
                                                             (line  335)
* server <2>:                            VPN-Dienste.        (line  243)
* server-active:                         Systemüberwachungsdienste.
                                                             (line  343)
* server-admin:                          Druckdienste.       (line  777)
* server-alias:                          Druckdienste.       (line  782)
* server-ipv6:                           VPN-Dienste.        (line  249)
* server-keychain:                       Druckdienste.       (line  210)
* server-name:                           Druckdienste.       (line  796)
* server-root:                           Druckdienste.       (line  218)
* server-tokens:                         Druckdienste.       (line  802)
* service:                               Service-Referenz.   (line   11)
* service-count:                         Mail-Dienste.       (line  175)
* service-extension:                     Service-Referenz.   (line  135)
* service-extension?:                    Service-Referenz.   (line  142)
* service-kind:                          Service-Referenz.   (line   35)
* service-type:                          Service-Referenz.   (line   98)
* service-value:                         Service-Referenz.   (line   38)
* service?:                              Service-Referenz.   (line   32)
* services:                              Mail-Dienste.       (line   86)
* set-current-state:                     Die Store-Monade.   (line  194)
* set-env:                               Druckdienste.       (line  249)
* set-xorg-configuration:                Tastaturbelegung.   (line   84)
* set-xorg-configuration <1>:            X Window.           (line  349)
* setuid-program-service-type:           Service-Referenz.   (line  202)
* shepherd-action:                       Shepherd-Dienste.   (line   96)
* shepherd-root-service-type:            Shepherd-Dienste.   (line  138)
* shepherd-service:                      Shepherd-Dienste.   (line   31)
* shutdown-clients?:                     Mail-Dienste.       (line  375)
* side-by-side-diffs?:                   Versionskontrolldienste.
                                                             (line  651)
* simple-service:                        Service-Referenz.   (line  151)
* simulated-wifi-service-type:           Netzwerkdienste.    (line  325)
* singularity-service-type:              Verschiedene Dienste.
                                                             (line  296)
* slim-configuration:                    X Window.           (line  109)
* slim-service-type:                     X Window.           (line   74)
* snapshots:                             Versionskontrolldienste.
                                                             (line  618)
* snapshots <1>:                         Versionskontrolldienste.
                                                             (line  704)
* sound-power-save-controller?:          Dienste zur Stromverbrauchsverwaltung.
                                                             (line  368)
* sound-power-save-on-ac:                Dienste zur Stromverbrauchsverwaltung.
                                                             (line  354)
* sound-power-save-on-bat:               Dienste zur Stromverbrauchsverwaltung.
                                                             (line  362)
* source-filter:                         Versionskontrolldienste.
                                                             (line  659)
* source-filter <1>:                     Versionskontrolldienste.
                                                             (line  711)
* source-module-closure:                 G-Ausdrücke.        (line  125)
* special-files-service-type:            Basisdienste.       (line   27)
* special-use:                           Mail-Dienste.       (line  336)
* specification->package:                Das Konfigurationssystem nutzen.
                                                             (line  113)
* specifications->manifest:              Aufruf von guix package.
                                                             (line  240)
* spice-vdagent-service:                 Verschiedene Dienste.
                                                             (line   96)
* ssl:                                   Kurznachrichtendienste.
                                                             (line  127)
* ssl <1>:                               LDAP-Dienste.       (line  241)
* ssl <2>:                               DNS-Dienste.        (line  699)
* ssl-ca:                                Mail-Dienste.       (line 1129)
* ssl-ca-location:                       Systemüberwachungsdienste.
                                                             (line  260)
* ssl-cert:                              Mail-Dienste.       (line 1111)
* ssl-cert-location:                     Systemüberwachungsdienste.
                                                             (line  268)
* ssl-cert-username-field:               Mail-Dienste.       (line 1151)
* ssl-cipher-list:                       Mail-Dienste.       (line 1164)
* ssl-crypto-device:                     Mail-Dienste.       (line 1168)
* ssl-key:                               Mail-Dienste.       (line 1115)
* ssl-key-password:                      Mail-Dienste.       (line 1122)
* ssl-listen:                            Druckdienste.       (line  812)
* ssl-min-protocol:                      Mail-Dienste.       (line 1160)
* ssl-options:                           Druckdienste.       (line  822)
* ssl-require-crl?:                      Mail-Dienste.       (line 1138)
* ssl-verify-client-cert?:               Mail-Dienste.       (line 1144)
* ssl?:                                  Mail-Dienste.       (line  159)
* ssl? <1>:                              Mail-Dienste.       (line 1106)
* state-pop:                             Die Store-Monade.   (line  202)
* state-push:                            Die Store-Monade.   (line  198)
* static-networking-service:             Netzwerkdienste.    (line   64)
* static-networking-service-type:        Netzwerkdienste.    (line   61)
* status:                                VPN-Dienste.        (line  294)
* strict-conformance?:                   Druckdienste.       (line  837)
* strict-export:                         Versionskontrolldienste.
                                                             (line  683)
* string:                                Mail-Dienste.       (line 1342)
* string <1>:                            Versionskontrolldienste.
                                                             (line  940)
* submission-host:                       Mail-Dienste.       (line 1194)
* subscription-private-access:           Druckdienste.       (line  707)
* subscription-private-values:           Druckdienste.       (line  724)
* subscriptions?:                        Mail-Dienste.       (line  313)
* summary-branches:                      Versionskontrolldienste.
                                                             (line  665)
* summary-log:                           Versionskontrolldienste.
                                                             (line  671)
* summary-tags:                          Versionskontrolldienste.
                                                             (line  677)
* sync-on-close?:                        Druckdienste.       (line  224)
* sysctl-configuration:                  Verschiedene Dienste.
                                                             (line   34)
* sysctl-service-type:                   Verschiedene Dienste.
                                                             (line   25)
* syslog:                                DNS-Dienste.        (line  678)
* syslog-configuration:                  Basisdienste.       (line  472)
* syslog-facility:                       Mail-Dienste.       (line  603)
* syslog-service:                        Basisdienste.       (line  481)
* system-group:                          Druckdienste.       (line  232)
* system-service-type:                   Service-Referenz.   (line  182)
* tailon-configuration:                  Systemüberwachungsdienste.
                                                             (line   28)
* tailon-configuration-file:             Systemüberwachungsdienste.
                                                             (line   48)
* tcp-port:                              Virtualisierungsdienste.
                                                             (line   60)
* temp-dir:                              Druckdienste.       (line  237)
* texlive-build-system:                  Erstellungssysteme. (line  714)
* text-file:                             Die Store-Monade.   (line  228)
* text-file*:                            G-Ausdrücke.        (line  439)
* thermald-configuration:                Dienste zur Stromverbrauchsverwaltung.
                                                             (line  475)
* thermald-service-type:                 Dienste zur Stromverbrauchsverwaltung.
                                                             (line  468)
* this-operating-system:                 „operating-system“-Referenz.
                                                             (line  218)
* this-package:                          „package“-Referenz. (line  130)
* threads:                               LDAP-Dienste.       (line   45)
* timelimit:                             LDAP-Dienste.       (line  210)
* timeout:                               Druckdienste.       (line  844)
* tlp:                                   Dienste zur Stromverbrauchsverwaltung.
                                                             (line   38)
* tlp-default-mode:                      Dienste zur Stromverbrauchsverwaltung.
                                                             (line   46)
* tlp-enable?:                           Dienste zur Stromverbrauchsverwaltung.
                                                             (line   41)
* tlp-service-type:                      Dienste zur Stromverbrauchsverwaltung.
                                                             (line   19)
* tls-allowed-dn-list:                   Virtualisierungsdienste.
                                                             (line  218)
* tls-auth:                              VPN-Dienste.        (line  100)
* tls-auth <1>:                          VPN-Dienste.        (line  230)
* tls-cacertdir:                         LDAP-Dienste.       (line  256)
* tls-cacertfile:                        LDAP-Dienste.       (line  264)
* tls-cert:                              LDAP-Dienste.       (line  284)
* tls-ciphers:                           LDAP-Dienste.       (line  278)
* tls-key:                               LDAP-Dienste.       (line  290)
* tls-no-sanity-cert:                    Virtualisierungsdienste.
                                                             (line  198)
* tls-no-verify-cert:                    Virtualisierungsdienste.
                                                             (line  207)
* tls-port:                              Virtualisierungsdienste.
                                                             (line   54)
* tls-priority:                          Virtualisierungsdienste.
                                                             (line  232)
* tls-randfile:                          LDAP-Dienste.       (line  271)
* tls-reqcert:                           LDAP-Dienste.       (line  248)
* tor-configuration:                     Netzwerkdienste.    (line  620)
* tor-hidden-service:                    Netzwerkdienste.    (line  662)
* tor-service-type:                      Netzwerkdienste.    (line  611)
* trivial-build-system:                  Erstellungssysteme. (line  944)
* type:                                  Mail-Dienste.       (line  266)
* type <1>:                              Mail-Dienste.       (line 1456)
* type <2>:                              Mail-Dienste.       (line 1528)
* udev-rule:                             Basisdienste.       (line  577)
* udev-rules-service:                    Basisdienste.       (line  593)
* udev-service:                          Basisdienste.       (line  566)
* udisks-service:                        Desktop-Dienste.    (line  351)
* uid:                                   LDAP-Dienste.       (line   52)
* unix-sock-admin-perms:                 Virtualisierungsdienste.
                                                             (line  110)
* unix-sock-dir:                         Virtualisierungsdienste.
                                                             (line  119)
* unix-sock-group:                       Virtualisierungsdienste.
                                                             (line   86)
* unix-sock-ro-perms:                    Virtualisierungsdienste.
                                                             (line   94)
* unix-sock-rw-perms:                    Virtualisierungsdienste.
                                                             (line  101)
* unquote:                               Pakete definieren.  (line  113)
* unquote-splicing:                      Pakete definieren.  (line  113)
* upower-configuration:                  Desktop-Dienste.    (line  285)
* upower-service-type:                   Desktop-Dienste.    (line  276)
* urandom-seed-service-type:             Basisdienste.       (line  664)
* uri:                                   LDAP-Dienste.       (line   75)
* url:                                   Versionskontrolldienste.
                                                             (line  717)
* usb-autosuspend-disable-on-shutdown?:  Dienste zur Stromverbrauchsverwaltung.
                                                             (line  448)
* usb-autosuspend?:                      Dienste zur Stromverbrauchsverwaltung.
                                                             (line  424)
* usb-blacklist:                         Dienste zur Stromverbrauchsverwaltung.
                                                             (line  430)
* usb-blacklist-wwan?:                   Dienste zur Stromverbrauchsverwaltung.
                                                             (line  435)
* usb-modeswitch-configuration:          Netzwerkdienste.    (line  129)
* usb-modeswitch-service-type:           Netzwerkdienste.    (line  113)
* usb-whitelist:                         Dienste zur Stromverbrauchsverwaltung.
                                                             (line  441)
* use-libevent?:                         Kurznachrichtendienste.
                                                             (line   95)
* user:                                  Druckdienste.       (line  243)
* user <1>:                              Mail-Dienste.       (line  118)
* user <2>:                              Mail-Dienste.       (line  135)
* user <3>:                              Mail-Dienste.       (line 1428)
* user <4>:                              Systemüberwachungsdienste.
                                                             (line  203)
* user <5>:                              Systemüberwachungsdienste.
                                                             (line  297)
* user <6>:                              DNS-Dienste.        (line  704)
* user-account:                          Benutzerkonten.     (line   29)
* user-group:                            Benutzerkonten.     (line  108)
* userdbs:                               Mail-Dienste.       (line  229)
* username:                              Mail-Dienste.       (line 1470)
* uuid:                                  Dateisysteme.       (line   52)
* valid-chroot-dirs:                     Mail-Dienste.       (line  839)
* valid-path?:                           Der Store.          (line  117)
* validnames:                            LDAP-Dienste.       (line  369)
* varnish-configuration:                 Web-Dienste.        (line  445)
* varnish-service-type:                  Web-Dienste.        (line  442)
* verbose:                               Mail-Dienste.       (line 1555)
* verbose-proctitle?:                    Mail-Dienste.       (line  366)
* verbose-ssl?:                          Mail-Dienste.       (line  644)
* verbosity:                             VPN-Dienste.        (line   95)
* verbosity <1>:                         VPN-Dienste.        (line  225)
* verify:                                Kurznachrichtendienste.
                                                             (line  159)
* verify-key-usage?:                     VPN-Dienste.        (line  118)
* verifyext:                             Kurznachrichtendienste.
                                                             (line  193)
* virtlog-service-type:                  Virtualisierungsdienste.
                                                             (line  504)
* virtual-root:                          Versionskontrolldienste.
                                                             (line  689)
* virtualhosts:                          Kurznachrichtendienste.
                                                             (line  278)
* vsz-limit:                             Mail-Dienste.       (line  196)
* waf-build-system:                      Erstellungssysteme. (line  757)
* web-interface?:                        Druckdienste.       (line  849)
* wesnothd-configuration:                Spieldienste.       (line   21)
* wicd-service:                          Netzwerkdienste.    (line   87)
* wifi-pwr-on-ac?:                       Dienste zur Stromverbrauchsverwaltung.
                                                             (line  336)
* wifi-pwr-on-bat?:                      Dienste zur Stromverbrauchsverwaltung.
                                                             (line  342)
* with-extensions:                       G-Ausdrücke.        (line  144)
* with-extensions <1>:                   G-Ausdrücke.        (line  243)
* with-imported-modules:                 G-Ausdrücke.        (line  105)
* with-imported-modules <1>:             G-Ausdrücke.        (line  221)
* with-monad:                            Die Store-Monade.   (line  102)
* with-parameters:                       G-Ausdrücke.        (line  547)
* wol-disable?:                          Dienste zur Stromverbrauchsverwaltung.
                                                             (line  348)
* wpa-supplicant-configuration:          Netzwerkdienste.    (line  254)
* wpa-supplicant-service-type:           Netzwerkdienste.    (line  247)
* xfce-desktop-configuration:            Desktop-Dienste.    (line  102)
* xfce-desktop-service-type:             Desktop-Dienste.    (line   91)
* xorg-configuration:                    X Window.           (line  296)
* xorg-start-command:                    X Window.           (line  359)
* zabbix-agent:                          Systemüberwachungsdienste.
                                                             (line  294)
* zabbix-host:                           Systemüberwachungsdienste.
                                                             (line  412)
* zabbix-port:                           Systemüberwachungsdienste.
                                                             (line  417)
* zabbix-server:                         Systemüberwachungsdienste.
                                                             (line  200)
* zone-entry:                            DNS-Dienste.        (line  125)
* zone-file:                             DNS-Dienste.        (line  159)

